import { Store } from '@ngrx/store';
import { Observable } from 'rxjs';
import { AuthService } from '../../auth/index';
import { Cart } from '../../model/cart.model';
import { User } from '../../model/misc.model';
import { OrderEntry } from '../../model/order.model';
import { StateWithMultiCart } from '../store/multi-cart-state';
import { MultiCartService } from './multi-cart.service';
import * as ɵngcc0 from '@angular/core';
export declare class ActiveCartService {
    protected store: Store<StateWithMultiCart>;
    protected authService: AuthService;
    protected multiCartService: MultiCartService;
    private readonly PREVIOUS_USER_ID_INITIAL_VALUE;
    private previousUserId;
    private activeCart$;
    private userId;
    private cartId;
    private cartUser;
    private activeCartId$;
    private cartSelector$;
    constructor(store: Store<StateWithMultiCart>, authService: AuthService, multiCartService: MultiCartService);
    private initActiveCart;
    /**
     * Returns active cart
     */
    getActive(): Observable<Cart>;
    /**
     * Returns active cart id
     */
    getActiveCartId(): Observable<string>;
    /**
     * Returns cart entries
     */
    getEntries(): Observable<OrderEntry[]>;
    /**
     * Returns cart loading state
     */
    getLoading(): Observable<boolean>;
    /**
     * Returns true when cart is stable (not loading and not pending processes on cart)
     */
    isStable(): Observable<boolean>;
    private loadOrMerge;
    private load;
    private addEntriesGuestMerge;
    private requireLoadedCartForGuestMerge;
    private isCartCreating;
    private requireLoadedCart;
    /**
     * Add entry to active cart
     *
     * @param productCode
     * @param quantity
     */
    addEntry(productCode: string, quantity: number): void;
    /**
     * Remove entry
     *
     * @param entry
     */
    removeEntry(entry: OrderEntry): void;
    /**
     * Update entry
     *
     * @param entryNumber
     * @param quantity
     */
    updateEntry(entryNumber: number, quantity: number): void;
    /**
     * Returns cart entry
     *
     * @param productCode
     */
    getEntry(productCode: string): Observable<OrderEntry>;
    /**
     * Assign email to cart
     *
     * @param email
     */
    addEmail(email: string): void;
    /**
     * Get assigned user to cart
     */
    getAssignedUser(): Observable<User>;
    /**
     * Returns true for guest cart
     */
    isGuestCart(): boolean;
    /**
     * Add multiple entries to a cart
     *
     * @param cartEntries : list of entries to add (OrderEntry[])
     */
    addEntries(cartEntries: OrderEntry[]): void;
    private isEmail;
    /**
     * Temporary method to merge guest cart with user cart because of backend limitation
     * This is for an edge case
     */
    private guestCartMerge;
    private isEmpty;
    private isJustLoggedIn;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ActiveCartService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aXZlLWNhcnQuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJhY3RpdmUtY2FydC5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0b3JlIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEF1dGhTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vYXV0aC9pbmRleCc7XHJcbmltcG9ydCB7IENhcnQgfSBmcm9tICcuLi8uLi9tb2RlbC9jYXJ0Lm1vZGVsJztcclxuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uLy4uL21vZGVsL21pc2MubW9kZWwnO1xyXG5pbXBvcnQgeyBPcmRlckVudHJ5IH0gZnJvbSAnLi4vLi4vbW9kZWwvb3JkZXIubW9kZWwnO1xyXG5pbXBvcnQgeyBTdGF0ZVdpdGhNdWx0aUNhcnQgfSBmcm9tICcuLi9zdG9yZS9tdWx0aS1jYXJ0LXN0YXRlJztcclxuaW1wb3J0IHsgTXVsdGlDYXJ0U2VydmljZSB9IGZyb20gJy4vbXVsdGktY2FydC5zZXJ2aWNlJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQWN0aXZlQ2FydFNlcnZpY2Uge1xyXG4gICAgcHJvdGVjdGVkIHN0b3JlOiBTdG9yZTxTdGF0ZVdpdGhNdWx0aUNhcnQ+O1xyXG4gICAgcHJvdGVjdGVkIGF1dGhTZXJ2aWNlOiBBdXRoU2VydmljZTtcclxuICAgIHByb3RlY3RlZCBtdWx0aUNhcnRTZXJ2aWNlOiBNdWx0aUNhcnRTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBQUkVWSU9VU19VU0VSX0lEX0lOSVRJQUxfVkFMVUU7XHJcbiAgICBwcml2YXRlIHByZXZpb3VzVXNlcklkO1xyXG4gICAgcHJpdmF0ZSBhY3RpdmVDYXJ0JDtcclxuICAgIHByaXZhdGUgdXNlcklkO1xyXG4gICAgcHJpdmF0ZSBjYXJ0SWQ7XHJcbiAgICBwcml2YXRlIGNhcnRVc2VyO1xyXG4gICAgcHJpdmF0ZSBhY3RpdmVDYXJ0SWQkO1xyXG4gICAgcHJpdmF0ZSBjYXJ0U2VsZWN0b3IkO1xyXG4gICAgY29uc3RydWN0b3Ioc3RvcmU6IFN0b3JlPFN0YXRlV2l0aE11bHRpQ2FydD4sIGF1dGhTZXJ2aWNlOiBBdXRoU2VydmljZSwgbXVsdGlDYXJ0U2VydmljZTogTXVsdGlDYXJ0U2VydmljZSk7XHJcbiAgICBwcml2YXRlIGluaXRBY3RpdmVDYXJ0O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGFjdGl2ZSBjYXJ0XHJcbiAgICAgKi9cclxuICAgIGdldEFjdGl2ZSgpOiBPYnNlcnZhYmxlPENhcnQ+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGFjdGl2ZSBjYXJ0IGlkXHJcbiAgICAgKi9cclxuICAgIGdldEFjdGl2ZUNhcnRJZCgpOiBPYnNlcnZhYmxlPHN0cmluZz47XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgY2FydCBlbnRyaWVzXHJcbiAgICAgKi9cclxuICAgIGdldEVudHJpZXMoKTogT2JzZXJ2YWJsZTxPcmRlckVudHJ5W10+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGNhcnQgbG9hZGluZyBzdGF0ZVxyXG4gICAgICovXHJcbiAgICBnZXRMb2FkaW5nKCk6IE9ic2VydmFibGU8Ym9vbGVhbj47XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdHJ1ZSB3aGVuIGNhcnQgaXMgc3RhYmxlIChub3QgbG9hZGluZyBhbmQgbm90IHBlbmRpbmcgcHJvY2Vzc2VzIG9uIGNhcnQpXHJcbiAgICAgKi9cclxuICAgIGlzU3RhYmxlKCk6IE9ic2VydmFibGU8Ym9vbGVhbj47XHJcbiAgICBwcml2YXRlIGxvYWRPck1lcmdlO1xyXG4gICAgcHJpdmF0ZSBsb2FkO1xyXG4gICAgcHJpdmF0ZSBhZGRFbnRyaWVzR3Vlc3RNZXJnZTtcclxuICAgIHByaXZhdGUgcmVxdWlyZUxvYWRlZENhcnRGb3JHdWVzdE1lcmdlO1xyXG4gICAgcHJpdmF0ZSBpc0NhcnRDcmVhdGluZztcclxuICAgIHByaXZhdGUgcmVxdWlyZUxvYWRlZENhcnQ7XHJcbiAgICAvKipcclxuICAgICAqIEFkZCBlbnRyeSB0byBhY3RpdmUgY2FydFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwcm9kdWN0Q29kZVxyXG4gICAgICogQHBhcmFtIHF1YW50aXR5XHJcbiAgICAgKi9cclxuICAgIGFkZEVudHJ5KHByb2R1Y3RDb2RlOiBzdHJpbmcsIHF1YW50aXR5OiBudW1iZXIpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgZW50cnlcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gZW50cnlcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlRW50cnkoZW50cnk6IE9yZGVyRW50cnkpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGUgZW50cnlcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gZW50cnlOdW1iZXJcclxuICAgICAqIEBwYXJhbSBxdWFudGl0eVxyXG4gICAgICovXHJcbiAgICB1cGRhdGVFbnRyeShlbnRyeU51bWJlcjogbnVtYmVyLCBxdWFudGl0eTogbnVtYmVyKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBjYXJ0IGVudHJ5XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHByb2R1Y3RDb2RlXHJcbiAgICAgKi9cclxuICAgIGdldEVudHJ5KHByb2R1Y3RDb2RlOiBzdHJpbmcpOiBPYnNlcnZhYmxlPE9yZGVyRW50cnk+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBc3NpZ24gZW1haWwgdG8gY2FydFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBlbWFpbFxyXG4gICAgICovXHJcbiAgICBhZGRFbWFpbChlbWFpbDogc3RyaW5nKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogR2V0IGFzc2lnbmVkIHVzZXIgdG8gY2FydFxyXG4gICAgICovXHJcbiAgICBnZXRBc3NpZ25lZFVzZXIoKTogT2JzZXJ2YWJsZTxVc2VyPjtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0cnVlIGZvciBndWVzdCBjYXJ0XHJcbiAgICAgKi9cclxuICAgIGlzR3Vlc3RDYXJ0KCk6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIEFkZCBtdWx0aXBsZSBlbnRyaWVzIHRvIGEgY2FydFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBjYXJ0RW50cmllcyA6IGxpc3Qgb2YgZW50cmllcyB0byBhZGQgKE9yZGVyRW50cnlbXSlcclxuICAgICAqL1xyXG4gICAgYWRkRW50cmllcyhjYXJ0RW50cmllczogT3JkZXJFbnRyeVtdKTogdm9pZDtcclxuICAgIHByaXZhdGUgaXNFbWFpbDtcclxuICAgIC8qKlxyXG4gICAgICogVGVtcG9yYXJ5IG1ldGhvZCB0byBtZXJnZSBndWVzdCBjYXJ0IHdpdGggdXNlciBjYXJ0IGJlY2F1c2Ugb2YgYmFja2VuZCBsaW1pdGF0aW9uXHJcbiAgICAgKiBUaGlzIGlzIGZvciBhbiBlZGdlIGNhc2VcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBndWVzdENhcnRNZXJnZTtcclxuICAgIHByaXZhdGUgaXNFbXB0eTtcclxuICAgIHByaXZhdGUgaXNKdXN0TG9nZ2VkSW47XHJcbn1cclxuIl19