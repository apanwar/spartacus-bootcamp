{"version":3,"file":"spartacus-core.js","sources":["ng://@spartacus/core/src/config/utils/deep-merge.ts","ng://@spartacus/core/src/config/config.module.ts","ng://@spartacus/core/src/anonymous-consents/config/default-anonymous-consents-config.ts","ng://@spartacus/core/src/auth/config/default-auth-config.ts","ng://@spartacus/core/src/occ/utils/interceptor-util.ts","ng://@spartacus/core/src/occ/utils/occ-constants.ts","ng://@spartacus/core/src/state/utils/entity/entity.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.action.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.reducer.ts","ng://@spartacus/core/src/state/utils/loader/loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity/entity.reducer.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.reducer.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.action.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.action.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity/entity.selectors.ts","ng://@spartacus/core/src/state/utils/get-state-slice.ts","ng://@spartacus/core/src/auth/store/auth-state.ts","ng://@spartacus/core/src/auth/store/actions/client-token.action.ts","ng://@spartacus/core/src/auth/store/actions/login-logout.action.ts","ng://@spartacus/core/src/auth/store/actions/user-token.action.ts","ng://@spartacus/core/src/auth/store/selectors/feature.selector.ts","ng://@spartacus/core/src/auth/store/selectors/client-token.selectors.ts","ng://@spartacus/core/src/auth/store/selectors/user-token.selectors.ts","ng://@spartacus/core/src/auth/facade/auth.service.ts","ng://@spartacus/core/src/auth/services/client-error/client-error-handling.service.ts","ng://@spartacus/core/src/window/window-ref.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url-parsing.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/path-utils.ts","ng://@spartacus/core/src/routing/configurable-routes/config/routing-config.ts","ng://@spartacus/core/src/routing/configurable-routes/routing-config.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/semantic-path.service.ts","ng://@spartacus/core/src/routing/store/actions/router.action.ts","ng://@spartacus/core/src/routing/store/routing-state.ts","ng://@spartacus/core/src/routing/store/selectors/routing.selector.ts","ng://@spartacus/core/src/routing/facade/routing.service.ts","ng://@spartacus/core/src/auth/services/user-error/user-error-handling.service.ts","ng://@spartacus/core/src/auth/http-interceptors/auth-error.interceptor.ts","ng://@spartacus/core/src/config/utils/dynamic-template.ts","ng://@spartacus/core/src/site-context/config/context-config-utils.ts","ng://@spartacus/core/src/site-context/config/site-context-config.ts","ng://@spartacus/core/src/site-context/providers/context-ids.ts","ng://@spartacus/core/src/site-context/store/actions/base-site.action.ts","ng://@spartacus/core/src/site-context/store/actions/currencies.action.ts","ng://@spartacus/core/src/site-context/store/actions/languages.action.ts","ng://@spartacus/core/src/site-context/store/state.ts","ng://@spartacus/core/src/site-context/store/selectors/site-context.selector.ts","ng://@spartacus/core/src/site-context/store/selectors/base-site.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/currencies.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/languages.selectors.ts","ng://@spartacus/core/src/site-context/facade/base-site.service.ts","ng://@spartacus/core/src/occ/adapters/cart/custom.encoder.ts","ng://@spartacus/core/src/occ/config/occ-config.ts","ng://@spartacus/core/src/occ/occ-models/occ-endpoints.model.ts","ng://@spartacus/core/src/occ/services/occ-endpoints.service.ts","ng://@spartacus/core/src/auth/http-interceptors/client-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/user-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/token-revocation.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/index.ts","ng://@spartacus/core/src/state/config/state-config.ts","ng://@spartacus/core/src/state/config/default-state-config.ts","ng://@spartacus/core/src/state/reducers/storage-sync.reducer.ts","ng://@spartacus/core/src/state/reducers/transfer-state.reducer.ts","ng://@spartacus/core/src/state/reducers/index.ts","ng://@spartacus/core/src/state/state.module.ts","ng://@spartacus/core/src/util/serialization-utils.ts","ng://@spartacus/core/src/auth/config/auth-config.ts","ng://@spartacus/core/src/auth/services/client-authentication/client-authentication-token.service.ts","ng://@spartacus/core/src/auth/store/effects/client-token.effect.ts","ng://@spartacus/core/src/auth/services/user-authentication/user-authentication-token.service.ts","ng://@spartacus/core/src/auth/store/effects/user-token.effect.ts","ng://@spartacus/core/src/auth/store/effects/index.ts","ng://@spartacus/core/src/auth/store/reducers/user-token.reducer.ts","ng://@spartacus/core/src/auth/store/reducers/index.ts","ng://@spartacus/core/src/auth/store/auth-store.module.ts","ng://@spartacus/core/src/auth/auth.module.ts","ng://@spartacus/core/src/auth/guards/auth-redirect.service.ts","ng://@spartacus/core/src/auth/guards/auth.guard.ts","ng://@spartacus/core/src/auth/guards/not-auth.guard.ts","ng://@spartacus/core/src/model/address.model.ts","ng://@spartacus/core/src/model/cart.model.ts","ng://@spartacus/core/src/model/cms.model.ts","ng://@spartacus/core/src/model/consent.model.ts","ng://@spartacus/core/src/model/image.model.ts","ng://@spartacus/core/src/model/product.model.ts","ng://@spartacus/core/src/model/shared.model.ts","ng://@spartacus/core/src/model/product-interest.model.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-state.ts","ng://@spartacus/core/src/anonymous-consents/store/actions/anonymous-consents.action.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/feature.selector.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-templates.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-ui.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consents.selectors.ts","ng://@spartacus/core/src/anonymous-consents/facade/anonymous-consents.service.ts","ng://@spartacus/core/src/asm/connectors/asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/default-occ-asm-config.ts","ng://@spartacus/core/src/asm/config/asm-config.ts","ng://@spartacus/core/src/asm/connectors/converters.ts","ng://@spartacus/core/src/util/converter.service.ts","ng://@spartacus/core/src/occ/adapters/asm/occ-asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/asm-occ.module.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/cart/converters.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.adapter.ts","ng://@spartacus/core/src/product/connectors/product/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/converters/occ-cart-normalizer.ts","ng://@spartacus/core/src/occ/adapters/cart/default-occ-cart-config.ts","ng://@spartacus/core/src/cart/connectors/entry/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-voucher.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-save-cart.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/cart-occ.module.ts","ng://@spartacus/core/src/checkout/connectors/checkout/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout.adapter.ts","ng://@spartacus/core/src/checkout/connectors/delivery/converters.ts","ng://@spartacus/core/src/user/connectors/address/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-payment.adapter.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/converters/occ-order-normalizer.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/checkout-occ.module.ts","ng://@spartacus/core/src/cms/connectors/page/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-component.adapter.ts","ng://@spartacus/core/src/cms/config/cms-config.ts","ng://@spartacus/core/src/occ/adapters/cms/converters/occ-cms-page-normalizer.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/cms-occ.module.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-image-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-reference-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-search-page-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-references-list-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-name-normalizer.ts","ng://@spartacus/core/src/product/connectors/references/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-search.adapter.ts","ng://@spartacus/core/src/occ/utils/occ-fields.ts","ng://@spartacus/core/src/occ/services/occ-fields.service.ts","ng://@spartacus/core/src/occ/services/occ-requests-optimizer.service.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product.adapter.ts","ng://@spartacus/core/src/product/connectors/product/product.adapter.ts","ng://@spartacus/core/src/product/connectors/references/product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/product-search.adapter.ts","ng://@spartacus/core/src/product/model/product-scope.ts","ng://@spartacus/core/src/occ/adapters/product/default-occ-product-config.ts","ng://@spartacus/core/src/occ/adapters/product/product-occ.module.ts","ng://@spartacus/core/src/site-context/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/site-context/occ-site.adapter.ts","ng://@spartacus/core/src/site-context/connectors/site.adapter.ts","ng://@spartacus/core/src/occ/adapters/site-context/default-occ-site-context-config.ts","ng://@spartacus/core/src/site-context/facade/currency.service.ts","ng://@spartacus/core/src/site-context/facade/language.service.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context.interceptor.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context-occ.module.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/default-occ-store-finder-config.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.connector.ts","ng://@spartacus/core/src/store-finder/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/store-finder/occ-store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/store-finder-occ.module.ts","ng://@spartacus/core/src/user/connectors/consent/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-address.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/order/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-order.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user.adapter.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/user/connectors/address/user-address.adapter.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/order/user-order.adapter.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/user.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/default-occ-user-config.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.adapter.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-customer-coupon.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/converters.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.connector.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-notification-preference.adapter.ts","ng://@spartacus/core/src/user/connectors/interests/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-interests.adapter.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-user-interests-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-return-request-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/user-occ.module.ts","ng://@spartacus/core/src/occ/config-loader/java-reg-exp-converter.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.ts","ng://@spartacus/core/src/ssr/ssr.providers.ts","ng://@spartacus/core/src/occ/config-loader/occ-loaded-config-converter.ts","ng://@spartacus/core/src/occ/config-loader/occ-sites-config-loader.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.service.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.module.ts","ng://@spartacus/core/src/occ/config/config-from-meta-tag-factory.ts","ng://@spartacus/core/src/occ/config/default-occ-config.ts","ng://@spartacus/core/src/occ/config/occ-config-validator.ts","ng://@spartacus/core/src/occ/interceptors/with-credentials.interceptor.ts","ng://@spartacus/core/src/occ/occ-models/occ.models.ts","ng://@spartacus/core/src/config/config-validator/config-validator.ts","ng://@spartacus/core/src/occ/occ.module.ts","ng://@spartacus/core/src/occ/services/loading-scopes.service.ts","ng://@spartacus/core/src/anonymous-consents/config/anonymous-consents-config.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/anonymous-consents-interceptor.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/index.ts","ng://@spartacus/core/src/event/utils/merging-subject.ts","ng://@spartacus/core/src/event/event.service.ts","ng://@spartacus/core/src/util/create-from.ts","ng://@spartacus/core/src/state/event/state-event.service.ts","ng://@spartacus/core/src/state/services/state-persistence.service.ts","ng://@spartacus/core/src/process/store/process-state.ts","ng://@spartacus/core/src/process/store/selectors/feature.selector.ts","ng://@spartacus/core/src/process/store/selectors/process.selectors.ts","ng://@spartacus/core/src/user/store/actions/billing-countries.action.ts","ng://@spartacus/core/src/user/store/actions/consignment-tracking.action.ts","ng://@spartacus/core/src/user/store/actions/delivery-countries.action.ts","ng://@spartacus/core/src/user/store/actions/forgot-password.action.ts","ng://@spartacus/core/src/user/store/user-state.ts","ng://@spartacus/core/src/user/store/actions/order-details.action.ts","ng://@spartacus/core/src/user/store/actions/payment-methods.action.ts","ng://@spartacus/core/src/user/store/actions/regions.action.ts","ng://@spartacus/core/src/user/store/actions/reset-password.action.ts","ng://@spartacus/core/src/user/store/actions/titles.action.ts","ng://@spartacus/core/src/user/store/actions/update-email.action.ts","ng://@spartacus/core/src/user/store/actions/update-password.action.ts","ng://@spartacus/core/src/user/store/actions/user-addresses.action.ts","ng://@spartacus/core/src/user/store/actions/user-consents.action.ts","ng://@spartacus/core/src/user/store/actions/user-details.action.ts","ng://@spartacus/core/src/user/store/actions/user-misc.action.ts","ng://@spartacus/core/src/user/store/actions/user-orders.action.ts","ng://@spartacus/core/src/user/store/actions/user-register.action.ts","ng://@spartacus/core/src/user/store/actions/customer-coupon.action.ts","ng://@spartacus/core/src/user/store/actions/notification-preference.action.ts","ng://@spartacus/core/src/user/store/actions/product-interests.actions.ts","ng://@spartacus/core/src/user/store/actions/order-return-request.action.ts","ng://@spartacus/core/src/user/store/selectors/feature.selector.ts","ng://@spartacus/core/src/user/store/selectors/billing-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/consignment-tracking.selectors.ts","ng://@spartacus/core/src/user/store/selectors/delivery-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-return-request.selectors.ts","ng://@spartacus/core/src/user/store/selectors/payment-methods.selectors.ts","ng://@spartacus/core/src/user/store/selectors/regions.selectors.ts","ng://@spartacus/core/src/user/store/selectors/reset-password.selectors.ts","ng://@spartacus/core/src/user/store/selectors/titles.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-addresses.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-consents.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-orders.selectors.ts","ng://@spartacus/core/src/user/store/selectors/customer-coupons.selectors.ts","ng://@spartacus/core/src/user/store/selectors/notification-preference.selectors.ts","ng://@spartacus/core/src/user/store/selectors/product-interests.selectors.ts","ng://@spartacus/core/src/user/facade/user-consent.service.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.connector.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/anonymous-consents.effect.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/index.ts","ng://@spartacus/core/src/site-context/connectors/site.connector.ts","ng://@spartacus/core/src/site-context/providers/context-service-map.ts","ng://@spartacus/core/src/site-context/config/base-site-config-validator.ts","ng://@spartacus/core/src/site-context/config/default-site-context-config.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.service.ts","ng://@spartacus/core/src/site-context/services/site-context-params.service.ts","ng://@spartacus/core/src/site-context/services/site-context-url-serializer.ts","ng://@spartacus/core/src/site-context/services/site-context-routes-handler.ts","ng://@spartacus/core/src/site-context/providers/context-service-providers.ts","ng://@spartacus/core/src/site-context/providers/site-context-params-providers.ts","ng://@spartacus/core/src/site-context/store/effects/languages.effect.ts","ng://@spartacus/core/src/site-context/store/effects/currencies.effect.ts","ng://@spartacus/core/src/site-context/store/effects/base-site.effect.ts","ng://@spartacus/core/src/site-context/store/effects/index.ts","ng://@spartacus/core/src/site-context/store/reducers/base-site.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/currencies.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/languages.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/index.ts","ng://@spartacus/core/src/site-context/store/site-context-store.module.ts","ng://@spartacus/core/src/site-context/site-context.module.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-banner.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-update.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/index.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-store.module.ts","ng://@spartacus/core/src/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/core/src/asm/config/default-asm-config.ts","ng://@spartacus/core/src/asm/store/asm-state.ts","ng://@spartacus/core/src/asm/connectors/asm.connector.ts","ng://@spartacus/core/src/asm/store/actions/asm-ui.action.ts","ng://@spartacus/core/src/asm/store/actions/customer.action.ts","ng://@spartacus/core/src/asm/store/actions/csagent-token.action.ts","ng://@spartacus/core/src/asm/store/effects/customer.effect.ts","ng://@spartacus/core/src/asm/store/effects/csagent-token.effect.ts","ng://@spartacus/core/src/asm/store/effects/index.ts","ng://@spartacus/core/src/asm/store/reducers/asm-ui.reducer.ts","ng://@spartacus/core/src/asm/store/reducers/index.ts","ng://@spartacus/core/src/asm/store/asm-store.module.ts","ng://@spartacus/core/src/global-message/models/global-message.model.ts","ng://@spartacus/core/src/global-message/config/global-message-config.ts","ng://@spartacus/core/src/global-message/store/actions/global-message.actions.ts","ng://@spartacus/core/src/global-message/store/global-message-state.ts","ng://@spartacus/core/src/global-message/store/selectors/feature.selector.ts","ng://@spartacus/core/src/global-message/store/selectors/global-message.selectors.ts","ng://@spartacus/core/src/global-message/facade/global-message.service.ts","ng://@spartacus/core/src/global-message/models/response-status.model.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/http-error.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-gateway/bad-gateway.handler.ts","ng://@spartacus/core/src/cart/utils/utils.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-request/bad-request.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/conflict/conflict.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/forbidden/forbidden.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/gateway/gateway-timeout.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/internal-server/internal-server.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/not-found/not-found.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unauthorized/unauthorized.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unknown-error/unknown-error.handler.ts","ng://@spartacus/core/src/util/applicable.ts","ng://@spartacus/core/src/global-message/http-interceptors/http-error.interceptor.ts","ng://@spartacus/core/src/global-message/http-interceptors/index.ts","ng://@spartacus/core/src/global-message/store/reducers/global-message.reducer.ts","ng://@spartacus/core/src/global-message/store/reducers/index.ts","ng://@spartacus/core/src/global-message/store/global-message-store.module.ts","ng://@spartacus/core/src/util/compare-equal-objects.ts","ng://@spartacus/core/src/global-message/store/effects/global-message.effect.ts","ng://@spartacus/core/src/global-message/config/default-global-message-config.ts","ng://@spartacus/core/src/global-message/global-message.module.ts","ng://@spartacus/core/src/asm/store/selectors/feature.selector.ts","ng://@spartacus/core/src/asm/store/selectors/asm-ui.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/customer-search.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/csagent-token.selectors.ts","ng://@spartacus/core/src/asm/facade/asm-auth.service.ts","ng://@spartacus/core/src/asm/services/csagent-error-handling.service.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-auth-error.interceptor.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-token.interceptor.ts","ng://@spartacus/core/src/asm/http-interceptors/index.ts","ng://@spartacus/core/src/asm/asm.module.ts","ng://@spartacus/core/src/asm/facade/asm.service.ts","ng://@spartacus/core/src/cms/page/page-meta.resolver.ts","ng://@spartacus/core/src/util/regex-pattern.ts","ng://@spartacus/core/src/cart/store/multi-cart-state.ts","ng://@spartacus/core/src/cart/store/selectors/multi-cart.selector.ts","ng://@spartacus/core/src/cart/store/actions/cart-entry.action.ts","ng://@spartacus/core/src/cart/store/actions/cart-voucher.action.ts","ng://@spartacus/core/src/cart/store/actions/cart.action.ts","ng://@spartacus/core/src/cart/store/actions/multi-cart.action.ts","ng://@spartacus/core/src/cart/store/actions/wish-list.action.ts","ng://@spartacus/core/src/cart/facade/multi-cart.service.ts","ng://@spartacus/core/src/cart/facade/active-cart.service.ts","ng://@spartacus/core/src/util/withdraw-on.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-entry.effect.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-voucher.effect.ts","ng://@spartacus/core/src/checkout/store/actions/address-verification.action.ts","ng://@spartacus/core/src/checkout/store/actions/card-types.action.ts","ng://@spartacus/core/src/checkout/store/checkout-state.ts","ng://@spartacus/core/src/checkout/store/actions/checkout.action.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart.effect.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.connecter.ts","ng://@spartacus/core/src/cart/store/effects/wish-list.effect.ts","ng://@spartacus/core/src/cart/store/reducers/multi-cart.reducer.ts","ng://@spartacus/core/src/cart/store/reducers/index.ts","ng://@spartacus/core/src/cart/event/cart.events.ts","ng://@spartacus/core/src/cart/event/cart-event.builder.ts","ng://@spartacus/core/src/cart/event/cart-event.module.ts","ng://@spartacus/core/src/cms/store/cms-state.ts","ng://@spartacus/core/src/cms/store/actions/components.action.ts","ng://@spartacus/core/src/cms/store/actions/navigation-entry-item.action.ts","ng://@spartacus/core/src/cms/store/actions/page.action.ts","ng://@spartacus/core/src/cms/store/selectors/feature.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/components.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/navigation-entry-item.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/page.selectors.ts","ng://@spartacus/core/src/cms/utils/cms-utils.ts","ng://@spartacus/core/src/cms/facade/cms.service.ts","ng://@spartacus/core/src/cms/model/page.model.ts","ng://@spartacus/core/src/cart/services/cart-page-meta.resolver.ts","ng://@spartacus/core/src/cart/services/multi-cart-state-persistence.service.ts","ng://@spartacus/core/src/cart/store/effects/multi-cart.effect.ts","ng://@spartacus/core/src/cart/store/multi-cart-store.module.ts","ng://@spartacus/core/src/cart/cart.module.ts","ng://@spartacus/core/src/cart/config/cart-config.ts","ng://@spartacus/core/src/cart/facade/cart-voucher.service.ts","ng://@spartacus/core/src/user/facade/user.service.ts","ng://@spartacus/core/src/cart/services/cart-config.service.ts","ng://@spartacus/core/src/cart/facade/selective-cart.service.ts","ng://@spartacus/core/src/cart/facade/wish-list.service.ts","ng://@spartacus/core/src/i18n/translation.service.ts","ng://@spartacus/core/src/checkout/services/checkout-page-meta.resolver.ts","ng://@spartacus/core/src/checkout/store/reducers/address-verification.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/card-types.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/checkout.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/index.ts","ng://@spartacus/core/src/user/connectors/address/user-address.connector.ts","ng://@spartacus/core/src/checkout/store/effects/address-verification.effect.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.connector.ts","ng://@spartacus/core/src/checkout/store/effects/card-types.effect.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.connector.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.connector.ts","ng://@spartacus/core/src/checkout/store/effects/checkout.effect.ts","ng://@spartacus/core/src/checkout/store/effects/index.ts","ng://@spartacus/core/src/checkout/store/checkout-store.module.ts","ng://@spartacus/core/src/checkout/checkout.module.ts","ng://@spartacus/core/src/checkout/store/selectors/checkout.selectors.ts","ng://@spartacus/core/src/checkout/store/selectors/address-verification.selectors.ts","ng://@spartacus/core/src/checkout/store/selectors/card-types.selectors.ts","ng://@spartacus/core/src/checkout/facade/checkout.service.ts","ng://@spartacus/core/src/checkout/facade/checkout-delivery.service.ts","ng://@spartacus/core/src/checkout/facade/checkout-payment.service.ts","ng://@spartacus/core/src/cms/config/default-cms-config.ts","ng://@spartacus/core/src/cms/page/content-page-meta.resolver.ts","ng://@spartacus/core/src/cms/page/page.module.ts","ng://@spartacus/core/src/util/buffer-debounce-time.ts","ng://@spartacus/core/src/config/utils/get-cookie.ts","ng://@spartacus/core/src/config/test-config.module.ts","ng://@spartacus/core/src/config/config-validator/config-validator.module.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.module.ts","ng://@spartacus/core/src/cms/config/cms-structure.config.ts","ng://@spartacus/core/src/cms/services/cms-structure-config.service.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.connector.ts","ng://@spartacus/core/src/cms/store/effects/components.effect.ts","ng://@spartacus/core/src/util/glob-utils.ts","ng://@spartacus/core/src/util/glob.service.ts","ng://@spartacus/core/src/routing/services/url-matcher.service.ts","ng://@spartacus/core/src/routing/configurable-routes/configurable-routes.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/product-url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.module.ts","ng://@spartacus/core/src/routing/external-routes/external-routes-config.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.guard.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.providers.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.service.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.module.ts","ng://@spartacus/core/src/routing/models/page-context.model.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.service.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.guard.ts","ng://@spartacus/core/src/routing/store/effects/router.effect.ts","ng://@spartacus/core/src/routing/store/effects/index.ts","ng://@spartacus/core/src/routing/store/reducers/router.reducer.ts","ng://@spartacus/core/src/routing/routing.module.ts","ng://@spartacus/core/src/routing/url-matcher/default-url-matcher.ts","ng://@spartacus/core/src/cms/store/effects/navigation-entry-item.effect.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.connector.ts","ng://@spartacus/core/src/cms/store/effects/page.effect.ts","ng://@spartacus/core/src/cms/store/effects/index.ts","ng://@spartacus/core/src/cms/store/reducers/components.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/navigation-entry-item.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-data.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-index.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/index.ts","ng://@spartacus/core/src/cms/store/cms-store.module.ts","ng://@spartacus/core/src/cms/cms.module.ts","ng://@spartacus/core/src/cms/facade/page-meta.service.ts","ng://@spartacus/core/src/smart-edit/services/smart-edit.service.ts","ng://@spartacus/core/src/cms/services/dynamic-attribute.service.ts","ng://@spartacus/core/src/features-config/config/features-config.ts","ng://@spartacus/core/src/features-config/utils/feature-config-utils.ts","ng://@spartacus/core/src/features-config/services/feature-config.service.ts","ng://@spartacus/core/src/features-config/directives/feature-level.directive.ts","ng://@spartacus/core/src/features-config/directives/feature.directive.ts","ng://@spartacus/core/src/features-config/features-config.module.ts","ng://@spartacus/core/src/i18n/date.pipe.ts","ng://@spartacus/core/src/i18n/translate.pipe.ts","ng://@spartacus/core/src/i18n/config/i18n-config.ts","ng://@spartacus/core/src/i18n/translation-chunk.service.ts","ng://@spartacus/core/src/i18n/config/default-i18n-config.ts","ng://@spartacus/core/src/i18n/i18next/i18next-init.ts","ng://@spartacus/core/src/i18n/i18next/i18next-providers.ts","ng://@spartacus/core/src/i18n/i18next/i18next-translation.service.ts","ng://@spartacus/core/src/i18n/i18n.module.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.pipe.ts","ng://@spartacus/core/src/i18n/testing/mock-translation.service.ts","ng://@spartacus/core/src/i18n/testing/mock-date.pipe.ts","ng://@spartacus/core/src/i18n/testing/i18n-testing.module.ts","ng://@spartacus/core/src/kyma/config/kyma-config.ts","ng://@spartacus/core/src/kyma/store/kyma-state.ts","ng://@spartacus/core/src/kyma/store/actions/open-id-token.action.ts","ng://@spartacus/core/src/kyma/store/selectors/feature.selector.ts","ng://@spartacus/core/src/kyma/store/selectors/open-id-token.selectors.ts","ng://@spartacus/core/src/kyma/facade/kyma.service.ts","ng://@spartacus/core/src/kyma/config/default-kyma-config.ts","ng://@spartacus/core/src/kyma/services/open-id-token/open-id-token.service.ts","ng://@spartacus/core/src/kyma/store/effects/open-id-token.effect.ts","ng://@spartacus/core/src/kyma/store/effects/index.ts","ng://@spartacus/core/src/kyma/store/reducers/index.ts","ng://@spartacus/core/src/kyma/store/kyma-store.module.ts","ng://@spartacus/core/src/kyma/kyma.module.ts","ng://@spartacus/core/src/personalization/config/default-personalization-config.ts","ng://@spartacus/core/src/personalization/config/personalization-config.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-id.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-time.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/index.ts","ng://@spartacus/core/src/personalization/personalization.module.ts","ng://@spartacus/core/src/personalization/services/personalization-context.service.ts","ng://@spartacus/core/src/process/store/reducers/index.ts","ng://@spartacus/core/src/process/store/process-store.module.ts","ng://@spartacus/core/src/process/process.module.ts","ng://@spartacus/core/src/product/connectors/product/product.connector.ts","ng://@spartacus/core/src/product/connectors/references/product-references.connector.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.connector.ts","ng://@spartacus/core/src/product/connectors/search/product-search.connector.ts","ng://@spartacus/core/src/product/store/actions/product-references.action.ts","ng://@spartacus/core/src/product/store/actions/product-reviews.action.ts","ng://@spartacus/core/src/product/store/actions/product-search.action.ts","ng://@spartacus/core/src/product/store/product-state.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.actions.ts","ng://@spartacus/core/src/product/store/actions/product.action.ts","ng://@spartacus/core/src/product/store/selectors/feature.selector.ts","ng://@spartacus/core/src/product/store/selectors/product-references.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product-reviews.selectors.ts","ng://@spartacus/core/src/product/store/reducers/product-search.reducer.ts","ng://@spartacus/core/src/product/store/selectors/product-search.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product.selectors.ts","ng://@spartacus/core/src/product/facade/product-reference.service.ts","ng://@spartacus/core/src/product/facade/product-review.service.ts","ng://@spartacus/core/src/product/facade/product-search.service.ts","ng://@spartacus/core/src/product/services/product-loading.service.ts","ng://@spartacus/core/src/product/facade/product.service.ts","ng://@spartacus/core/src/product/facade/searchbox.service.ts","ng://@spartacus/core/src/product/services/category-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/coupon-search-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/product-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/search-page-meta.resolver.ts","ng://@spartacus/core/src/product/store/effects/product-references.effect.ts","ng://@spartacus/core/src/product/store/effects/product-reviews.effect.ts","ng://@spartacus/core/src/product/store/effects/product-search.effect.ts","ng://@spartacus/core/src/product/store/effects/product.effect.ts","ng://@spartacus/core/src/product/store/effects/index.ts","ng://@spartacus/core/src/product/store/reducers/product-references.reducer.ts","ng://@spartacus/core/src/product/store/reducers/product-reviews.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/scoped-loader.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.reducer.ts","ng://@spartacus/core/src/product/store/reducers/index.ts","ng://@spartacus/core/src/product/store/product-store.module.ts","ng://@spartacus/core/src/product/product.module.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/cms-ticket.interceptor.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/index.ts","ng://@spartacus/core/src/smart-edit/smart-edit.module.ts","ng://@spartacus/core/src/ssr/ng-express-engine-decorator.ts","ng://@spartacus/core/src/store-finder/config/store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/store-finder-state.ts","ng://@spartacus/core/src/store-finder/store/actions/find-stores.action.ts","ng://@spartacus/core/src/store-finder/store/actions/view-all-stores.action.ts","ng://@spartacus/core/src/store-finder/store/selectors/feature.selector.ts","ng://@spartacus/core/src/store-finder/store/selectors/find-stores.selectors.ts","ng://@spartacus/core/src/store-finder/store/selectors/view-all-stores.selectors.ts","ng://@spartacus/core/src/store-finder/facade/store-finder.service.ts","ng://@spartacus/core/src/store-finder/facade/store-data.service.ts","ng://@spartacus/core/src/store-finder/service/external-js-file-loader.service.ts","ng://@spartacus/core/src/store-finder/service/google-map-renderer.service.ts","ng://@spartacus/core/src/store-finder/config/default-store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/reducers/index.ts","ng://@spartacus/core/src/store-finder/store/effects/find-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/view-all-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/index.ts","ng://@spartacus/core/src/store-finder/store/store-finder-store.module.ts","ng://@spartacus/core/src/store-finder/store-finder.module.ts","ng://@spartacus/core/src/user/connectors/user/user.connector.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.connector.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.connector.ts","ng://@spartacus/core/src/user/connectors/order/user-order.connector.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.connector.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.connector.ts","ng://@spartacus/core/src/user/facade/consent.service.ts","ng://@spartacus/core/src/user/facade/user-address.service.ts","ng://@spartacus/core/src/user/facade/user-order.service.ts","ng://@spartacus/core/src/user/facade/customer-coupon.service.ts","ng://@spartacus/core/src/user/facade/user-payment.service.ts","ng://@spartacus/core/src/user/facade/order-return-request.service.ts","ng://@spartacus/core/src/user/facade/user-notification-preference.service.ts","ng://@spartacus/core/src/user/facade/user-interests.service.ts","ng://@spartacus/core/src/user/store/reducers/billing-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/consignment-tracking.reducer.ts","ng://@spartacus/core/src/user/store/reducers/delivery-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/notification-preference.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/payment-methods.reducer.ts","ng://@spartacus/core/src/user/store/reducers/regions.reducer.ts","ng://@spartacus/core/src/user/store/reducers/reset-password.reducer.ts","ng://@spartacus/core/src/user/store/reducers/titles.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-addresses.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-consents.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-orders.reducer.ts","ng://@spartacus/core/src/user/store/reducers/customer-coupon.reducer.ts","ng://@spartacus/core/src/user/store/reducers/product-interests.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-return-request.reducer.ts","ng://@spartacus/core/src/user/store/reducers/index.ts","ng://@spartacus/core/src/user/store/effects/billing-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/clear-miscs-data.effect.ts","ng://@spartacus/core/src/user/store/effects/consignment-tracking.effect.ts","ng://@spartacus/core/src/user/store/effects/delivery-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/forgot-password.effect.ts","ng://@spartacus/core/src/user/store/effects/notification-preference.effect.ts","ng://@spartacus/core/src/user/store/effects/order-details.effect.ts","ng://@spartacus/core/src/user/store/effects/order-return-request.effect.ts","ng://@spartacus/core/src/user/store/effects/payment-methods.effect.ts","ng://@spartacus/core/src/user/store/effects/regions.effect.ts","ng://@spartacus/core/src/user/store/effects/reset-password.effect.ts","ng://@spartacus/core/src/user/store/effects/titles.effect.ts","ng://@spartacus/core/src/user/store/effects/update-email.effect.ts","ng://@spartacus/core/src/user/store/effects/update-password.effect.ts","ng://@spartacus/core/src/user/store/effects/user-addresses.effect.ts","ng://@spartacus/core/src/user/store/effects/user-consents.effect.ts","ng://@spartacus/core/src/user/store/effects/user-details.effect.ts","ng://@spartacus/core/src/user/store/effects/user-orders.effect.ts","ng://@spartacus/core/src/user/store/effects/user-register.effect.ts","ng://@spartacus/core/src/user/store/effects/customer-coupon.effect.ts","ng://@spartacus/core/src/user/store/effects/product-interests.effect.ts","ng://@spartacus/core/src/user/store/effects/index.ts","ng://@spartacus/core/src/user/store/user-store.module.ts","ng://@spartacus/core/src/user/user.module.ts","ng://@spartacus/core/public_api.ts","ng://@spartacus/core/spartacus-core.ts"],"sourcesContent":["export function isObject(item: any): boolean {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nexport function deepMerge(target = {}, ...sources: any[]): any {\n  if (!sources.length) {\n    return target;\n  }\n  const source = sources.shift() || {};\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (source[key] instanceof Date) {\n        Object.assign(target, { [key]: source[key] });\n      } else if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, { [key]: {} });\n        }\n        deepMerge(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return deepMerge(target, ...sources);\n}\n","import { CommonModule } from '@angular/common';\r\nimport {\r\n  InjectionToken,\r\n  ModuleWithProviders,\r\n  NgModule,\r\n  Optional,\r\n  Provider,\r\n} from '@angular/core';\r\nimport { deepMerge } from './utils/deep-merge';\r\n\r\n/**\r\n * Global Configuration injection token, can be used to inject configuration to any part of the app\r\n */\r\nexport const Config = new InjectionToken('Configuration');\r\n\r\n/**\r\n * Config chunk token, can be used to provide configuration chunk and contribute to the global configuration object.\r\n * Should not be used directly, use `provideConfig` or import `ConfigModule.withConfig` instead.\r\n */\r\nexport const ConfigChunk = new InjectionToken('ConfigurationChunk');\r\n\r\n/**\r\n * Config chunk token, can be used to provide configuration chunk and contribute to the default configuration.\r\n * Should not be used directly, use `provideDefaultConfig` or `provideDefaultConfigFactory` instead.\r\n *\r\n * General rule is, that all config provided in libraries should be provided as default config.\r\n */\r\nexport const DefaultConfigChunk = new InjectionToken(\r\n  'DefaultConfigurationChunk'\r\n);\r\n\r\n/**\r\n * Helper function to provide configuration chunk using ConfigChunk token\r\n *\r\n * To provide default configuration in libraries provideDefaultConfig should be used instead.\r\n *\r\n * @param config Config object to merge with the global configuration\r\n */\r\nexport function provideConfig(\r\n  config: any = {},\r\n  defaultConfig = false\r\n): Provider {\r\n  return {\r\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\r\n    useValue: config,\r\n    multi: true,\r\n  };\r\n}\r\n\r\n/**\r\n * Helper function to provide configuration with factory function, using ConfigChunk token\r\n *\r\n * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\r\n *\r\n * @param configFactory Factory Function that will generate config object\r\n * @param deps Optional dependencies to a factory function\r\n */\r\nexport function provideConfigFactory(\r\n  configFactory: Function,\r\n  deps?: any[],\r\n  defaultConfig = false\r\n): Provider {\r\n  return {\r\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\r\n    useFactory: configFactory,\r\n    multi: true,\r\n    deps: deps,\r\n  };\r\n}\r\n\r\n/**\r\n * Helper function to provide default configuration chunk using DefaultConfigChunk token\r\n *\r\n * @param config Config object to merge with the default configuration\r\n */\r\nexport function provideDefaultConfig(config: any = {}): Provider {\r\n  return {\r\n    provide: DefaultConfigChunk,\r\n    useValue: config,\r\n    multi: true,\r\n  };\r\n}\r\n\r\n/**\r\n * Helper function to provide default configuration with factory function, using DefaultConfigChunk token\r\n *\r\n * @param configFactory Factory Function that will generate config object\r\n * @param deps Optional dependencies to a factory function\r\n */\r\nexport function provideDefaultConfigFactory(\r\n  configFactory: Function,\r\n  deps?: any[]\r\n): Provider {\r\n  return {\r\n    provide: DefaultConfigChunk,\r\n    useFactory: configFactory,\r\n    multi: true,\r\n    deps: deps,\r\n  };\r\n}\r\n\r\n/**\r\n * Factory function that merges all configurations chunks. Should not be used directly without explicit reason.\r\n *\r\n */\r\nexport function configurationFactory(\r\n  configChunks: any[] = [],\r\n  defaultConfigChunks: any[] = []\r\n) {\r\n  const config = deepMerge(\r\n    {},\r\n    ...(defaultConfigChunks ?? []),\r\n    ...(configChunks ?? [])\r\n  );\r\n  return config;\r\n}\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [],\r\n})\r\nexport class ConfigModule {\r\n  /**\r\n   * Import ConfigModule and contribute config to the global configuration\r\n   *\r\n   * To provide default configuration in libraries provideDefaultConfig should be used instead.\r\n   *\r\n   * @param config Config object to merge with the global configuration\r\n   */\r\n  static withConfig(config: object): ModuleWithProviders<ConfigModule> {\r\n    return {\r\n      ngModule: ConfigModule,\r\n      providers: [provideConfig(config)],\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Import ConfigModule and contribute config to the global configuration using factory function\r\n   *\r\n   * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\r\n   *\r\n   * @param configFactory Factory function that will generate configuration\r\n   * @param deps Optional dependencies to factory function\r\n   */\r\n  static withConfigFactory(\r\n    configFactory: Function,\r\n    deps?: any[]\r\n  ): ModuleWithProviders<ConfigModule> {\r\n    return {\r\n      ngModule: ConfigModule,\r\n      providers: [provideConfigFactory(configFactory, deps)],\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Module with providers, should be imported only once, if possible, at the root of the app.\r\n   *\r\n   * @param config\r\n   */\r\n  static forRoot(config: any = {}): ModuleWithProviders<ConfigModule> {\r\n    return {\r\n      ngModule: ConfigModule,\r\n      providers: [\r\n        provideConfig(config),\r\n        {\r\n          provide: Config,\r\n          useFactory: configurationFactory,\r\n          deps: [\r\n            [new Optional(), ConfigChunk],\r\n            [new Optional(), DefaultConfigChunk],\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { AnonymousConsentsConfig } from './anonymous-consents-config';\n\nexport const defaultAnonymousConsentsConfig: AnonymousConsentsConfig = {\n  anonymousConsents: {\n    registerConsent: 'MARKETING_NEWSLETTER',\n    showLegalDescriptionInDialog: true,\n    requiredConsents: [],\n    consentManagementPage: {\n      showAnonymousConsents: true,\n      hideConsents: [],\n    },\n  },\n};\n","import { AuthConfig } from './auth-config';\n\nexport const defaultAuthConfig: AuthConfig = {\n  authentication: {\n    client_id: 'mobile_android',\n    client_secret: 'secret',\n  },\n  backend: {\n    occ: {\n      endpoints: {\n        login: '/authorizationserver/oauth/token',\n        revoke: '/authorizationserver/oauth/revoke',\n      },\n    },\n  },\n};\n","import { HttpHeaders, HttpRequest } from '@angular/common/http';\n\nexport const USE_CLIENT_TOKEN = 'cx-use-client-token';\nexport const USE_CUSTOMER_SUPPORT_AGENT_TOKEN = 'cx-use-csagent-token';\nexport const TOKEN_REVOCATION_HEADER = 'cx-token-revocation';\n\nexport class InterceptorUtil {\n  static createHeader<T>(\n    headerName: string,\n    interceptorParam: T,\n    headers?: HttpHeaders\n  ): HttpHeaders {\n    if (headers) {\n      return headers.append(headerName, JSON.stringify(interceptorParam));\n    }\n    headers = new HttpHeaders().set(\n      headerName,\n      JSON.stringify(interceptorParam)\n    );\n    return headers;\n  }\n\n  static removeHeader(\n    headerName: string,\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    const updatedHeaders = request.headers.delete(headerName);\n    return request.clone({ headers: updatedHeaders });\n  }\n\n  static getInterceptorParam<T>(headerName: string, headers: HttpHeaders): T {\n    const rawValue = headers.get(headerName);\n    if (rawValue) {\n      return JSON.parse(rawValue);\n    }\n    return undefined;\n  }\n}\n","export const OCC_USER_ID_CURRENT = 'current';\nexport const OCC_USER_ID_ANONYMOUS = 'anonymous';\nexport const OCC_USER_ID_GUEST = 'guest';\n\nexport const OCC_CART_ID_CURRENT = 'current';\n","import { Action } from '@ngrx/store';\n\nexport const ENTITY_REMOVE_ACTION = '[ENTITY] REMOVE';\nexport const ENTITY_REMOVE_ALL_ACTION = '[ENTITY] REMOVE ALL';\n\nexport interface EntityMeta {\n  entityType: string;\n  entityId: string | string[];\n  entityRemove?: boolean;\n}\n\nexport function entityMeta(type: string, id: string | string[]): EntityMeta {\n  return {\n    entityType: type,\n    entityId: id,\n  };\n}\n\nexport function entityRemoveMeta(\n  type: string,\n  id: string | string[]\n): EntityMeta {\n  return {\n    entityId: id,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport function entityRemoveAllMeta(type: string): EntityMeta {\n  return {\n    entityId: null,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport interface EntityAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityMeta;\n}\n\nexport class EntityRemoveAction implements EntityAction {\n  type = ENTITY_REMOVE_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityRemoveMeta(entityType, id);\n  }\n}\n\nexport class EntityRemoveAllAction implements EntityAction {\n  type = ENTITY_REMOVE_ALL_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string) {\n    this.meta = entityRemoveAllMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOADER_LOAD_ACTION = '[LOADER] LOAD';\nexport const LOADER_FAIL_ACTION = '[LOADER] FAIL';\nexport const LOADER_SUCCESS_ACTION = '[LOADER] SUCCESS';\nexport const LOADER_RESET_ACTION = '[LOADER] RESET';\n\nexport interface LoaderMeta {\n  entityType: string;\n  loader: {\n    load?: boolean;\n    error?: any;\n    success?: boolean;\n  };\n}\n\nexport interface LoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: LoaderMeta;\n}\n\nexport function loadMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      load: true,\n    },\n  };\n}\n\nexport function failMeta(entityType: string, error?: any): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      error: error ? error : true,\n    },\n  };\n}\n\nexport function successMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      success: true,\n    },\n  };\n}\n\nexport function resetMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {},\n  };\n}\nexport class LoaderLoadAction implements LoaderAction {\n  type = LOADER_LOAD_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = loadMeta(entityType);\n  }\n}\n\nexport class LoaderFailAction implements LoaderAction {\n  type = LOADER_FAIL_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string, error?: any) {\n    this.meta = failMeta(entityType, error);\n  }\n}\n\nexport class LoaderSuccessAction implements LoaderAction {\n  type = LOADER_SUCCESS_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = successMeta(entityType);\n  }\n}\n\nexport class LoaderResetAction implements LoaderAction {\n  type = LOADER_RESET_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = resetMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\r\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\r\nimport {\r\n  failMeta,\r\n  LoaderMeta,\r\n  loadMeta,\r\n  resetMeta,\r\n  successMeta,\r\n} from '../loader/loader.action';\r\n\r\nexport const ENTITY_LOAD_ACTION = '[ENTITY] LOAD';\r\nexport const ENTITY_FAIL_ACTION = '[ENTITY] LOAD FAIL';\r\nexport const ENTITY_SUCCESS_ACTION = '[ENTITY] LOAD SUCCESS';\r\nexport const ENTITY_RESET_ACTION = '[ENTITY] RESET';\r\n\r\nexport interface EntityLoaderMeta extends EntityMeta, LoaderMeta {}\r\n\r\nexport interface EntityLoaderAction extends Action {\r\n  readonly payload?: any;\r\n  readonly meta?: EntityLoaderMeta;\r\n}\r\n\r\nexport function entityLoadMeta(\r\n  entityType: string,\r\n  id: string | string[]\r\n): EntityLoaderMeta {\r\n  return {\r\n    ...loadMeta(entityType),\r\n    ...entityMeta(entityType, id),\r\n  };\r\n}\r\n\r\nexport function entityFailMeta(\r\n  entityType: string,\r\n  id: string | string[],\r\n  error?: any\r\n): EntityLoaderMeta {\r\n  return {\r\n    ...failMeta(entityType, error),\r\n    ...entityMeta(entityType, id),\r\n  };\r\n}\r\n\r\nexport function entitySuccessMeta(\r\n  entityType: string,\r\n  id: string | string[]\r\n): EntityLoaderMeta {\r\n  return {\r\n    ...successMeta(entityType),\r\n    ...entityMeta(entityType, id),\r\n  };\r\n}\r\n\r\nexport function entityResetMeta(\r\n  entityType: string,\r\n  id: string | string[]\r\n): EntityLoaderMeta {\r\n  return {\r\n    ...resetMeta(entityType),\r\n    ...entityMeta(entityType, id),\r\n  };\r\n}\r\n\r\nexport class EntityLoadAction implements EntityLoaderAction {\r\n  type = ENTITY_LOAD_ACTION;\r\n  readonly meta: EntityLoaderMeta;\r\n  constructor(entityType: string, id: string | string[]) {\r\n    this.meta = entityLoadMeta(entityType, id);\r\n  }\r\n}\r\n\r\nexport class EntityFailAction implements EntityLoaderAction {\r\n  type = ENTITY_FAIL_ACTION;\r\n  readonly meta: EntityLoaderMeta;\r\n  constructor(entityType: string, id: string | string[], error?: any) {\r\n    this.meta = entityFailMeta(entityType, id, error);\r\n  }\r\n}\r\n\r\nexport class EntitySuccessAction implements EntityLoaderAction {\r\n  type = ENTITY_SUCCESS_ACTION;\r\n  readonly meta: EntityLoaderMeta;\r\n  constructor(entityType: string, id: string | string[], public payload?: any) {\r\n    this.meta = entitySuccessMeta(entityType, id);\r\n  }\r\n}\r\n\r\nexport class EntityLoaderResetAction implements EntityLoaderAction {\r\n  type = ENTITY_RESET_ACTION;\r\n  readonly meta: EntityLoaderMeta;\r\n  constructor(entityType: string, id: string | string[]) {\r\n    this.meta = entityResetMeta(entityType, id);\r\n  }\r\n}\r\n","import { Action } from '@ngrx/store';\nimport { LoaderState } from './loader-state';\nimport { LoaderAction } from './loader.action';\n\nexport const initialLoaderState: LoaderState<any> = {\n  loading: false,\n  error: false,\n  success: false,\n  value: undefined,\n};\n\n/**\n * Higher order reducer that adds generic loading flag to chunk of the state\n *\n * Utilizes \"loader\" meta field of actions to set specific flags for specific\n * action (LOAD, SUCCESS, FAIL, RESET)\n */\nexport function loaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (state: LoaderState<T>, action: LoaderAction) => LoaderState<T> {\n  return (\n    state: LoaderState<T> = initialLoaderState,\n    action: LoaderAction\n  ): LoaderState<T> => {\n    if (\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType\n    ) {\n      const entity = action.meta.loader;\n\n      if (entity.load) {\n        return {\n          ...state,\n          loading: true,\n          value: reducer ? reducer(state.value, action) : state.value,\n        };\n      } else if (entity.error) {\n        return {\n          ...state,\n          loading: false,\n          error: true,\n          success: false,\n          value: reducer ? reducer(state.value, action) : undefined,\n        };\n      } else if (entity.success) {\n        return {\n          ...state,\n          value: reducer ? reducer(state.value, action) : action.payload,\n          loading: false,\n          error: false,\n          success: true,\n        };\n      } else {\n        // reset state action\n        return {\n          ...initialLoaderState,\n          value: reducer\n            ? reducer(initialLoaderState.value, action)\n            : initialLoaderState.value,\n        };\n      }\n    }\n\n    if (reducer) {\n      const newValue = reducer(state.value, action);\n      if (newValue !== state.value) {\n        return { ...state, value: newValue };\n      }\n    }\n    return state;\n  };\n}\n","import { LoaderState } from './loader-state';\n\nexport function loaderValueSelector<T>(state: LoaderState<T>): T {\n  return state.value;\n}\n\nexport function loaderLoadingSelector<T>(state: LoaderState<T>): boolean {\n  return state.loading;\n}\n\nexport function loaderErrorSelector<T>(state: LoaderState<T>): boolean {\n  return state.error;\n}\n\nexport function loaderSuccessSelector<T>(state: LoaderState<T>): boolean {\n  return state.success;\n}\n","import { LoaderState } from '../loader/loader-state';\r\nimport { initialLoaderState } from '../loader/loader.reducer';\r\nimport { EntityLoaderState } from './entity-loader-state';\r\nimport {\r\n  loaderValueSelector,\r\n  loaderLoadingSelector,\r\n  loaderErrorSelector,\r\n  loaderSuccessSelector,\r\n} from '../loader';\r\n\r\nexport function entityLoaderStateSelector<T>(\r\n  state: EntityLoaderState<T>,\r\n  id: string\r\n): LoaderState<T> {\r\n  return state.entities[id] || initialLoaderState;\r\n}\r\n\r\nexport function entityValueSelector<T>(\r\n  state: EntityLoaderState<T>,\r\n  id: string\r\n): T {\r\n  const entityState = entityLoaderStateSelector(state, id);\r\n  return loaderValueSelector(entityState);\r\n}\r\n\r\nexport function entityLoadingSelector<T>(\r\n  state: EntityLoaderState<T>,\r\n  id: string\r\n): boolean {\r\n  const entityState = entityLoaderStateSelector(state, id);\r\n  return loaderLoadingSelector(entityState);\r\n}\r\n\r\nexport function entityErrorSelector<T>(\r\n  state: EntityLoaderState<T>,\r\n  id: string\r\n): boolean {\r\n  const entityState = entityLoaderStateSelector(state, id);\r\n  return loaderErrorSelector(entityState);\r\n}\r\n\r\nexport function entitySuccessSelector<T>(\r\n  state: EntityLoaderState<T>,\r\n  id: string\r\n): boolean {\r\n  const entityState = entityLoaderStateSelector(state, id);\r\n  return loaderSuccessSelector(entityState);\r\n}\r\n","import { Action } from '@ngrx/store';\n\nimport { EntityState } from './entity-state';\nimport { EntityAction } from './entity.action';\n\nexport const initialEntityState: EntityState<any> = { entities: {} };\n\n/**\n * Higher order reducer for reusing reducer logic for multiple entities\n *\n * Utilizes entityId meta field to target entity by id in actions\n */\nexport function entityReducer<T>(\n  entityType: string,\n  reducer: (state: T, action: Action) => T\n) {\n  return (\n    state: EntityState<T> = initialEntityState,\n    action: EntityAction\n  ): EntityState<T> => {\n    let ids: string[];\n    let partitionPayload = false;\n    if (\n      action.meta &&\n      action.meta.entityType === entityType &&\n      action.meta.entityId !== undefined\n    ) {\n      ids = [].concat(action.meta.entityId);\n\n      // remove selected entities\n      if (action.meta.entityRemove) {\n        if (action.meta.entityId === null) {\n          return initialEntityState;\n        } else {\n          let removed = false;\n          const newEntities = Object.keys(state.entities).reduce((acc, cur) => {\n            if (ids.includes(cur)) {\n              removed = true;\n            } else {\n              acc[cur] = state.entities[cur];\n            }\n            return acc;\n          }, {});\n\n          return removed ? { entities: newEntities } : state;\n        }\n      }\n\n      partitionPayload =\n        Array.isArray(action.meta.entityId) && Array.isArray(action.payload);\n    } else {\n      ids = Object.keys(state.entities);\n    }\n\n    const entityUpdates: { [id: string]: T } = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const subAction = partitionPayload\n        ? { ...action, payload: action.payload[i] }\n        : action;\n      const newState = reducer(state.entities[id], subAction);\n      if (newState) {\n        entityUpdates[id] = newState;\n      }\n    }\n\n    if (Object.keys(entityUpdates).length > 0) {\n      return {\n        ...state,\n        entities: { ...state.entities, ...entityUpdates },\n      };\n    }\n\n    return state;\n  };\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { loaderReducer } from '../loader/loader.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityLoaderState } from './entity-loader-state';\nimport { EntityLoaderAction } from './entity-loader.action';\n\n/**\n * Higher order reducer that wraps LoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags\n */\nexport function entityLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityLoaderState<T>,\n  action: EntityLoaderAction\n) => EntityLoaderState<T> {\n  return entityReducer(entityType, loaderReducer(entityType, reducer));\n}\n","import { Action } from '@ngrx/store';\nimport {\n  LoaderMeta,\n  resetMeta as loaderResetMeta,\n} from '../loader/loader.action';\n\nexport const PROCESSES_INCREMENT_ACTION = '[PROCESSES LOADER] INCREMENT';\nexport const PROCESSES_DECREMENT_ACTION = '[PROCESSES LOADER] DECREMENT';\nexport const PROCESSES_LOADER_RESET_ACTION = '[PROCESSES LOADER] RESET';\n\nexport interface ProcessesLoaderMeta extends LoaderMeta {\n  entityType: string;\n  processesCountDiff?: number;\n}\n\nexport interface ProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProcessesLoaderMeta;\n}\n\nexport function processesIncrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: 1,\n  };\n}\n\nexport function processesDecrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: -1,\n  };\n}\n\nexport function processesLoaderResetMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  // processes reset action is a reset action for loader reducer, but not the other way around\n  return {\n    ...loaderResetMeta(entityType),\n    processesCountDiff: null,\n  };\n}\n\nexport class ProcessesLoaderResetAction implements ProcessesLoaderAction {\n  type = PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesLoaderResetMeta(entityType);\n  }\n}\n\nexport class ProcessesIncrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_INCREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesIncrementMeta(entityType);\n  }\n}\n\nexport class ProcessesDecrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_DECREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesDecrementMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  processesDecrementMeta,\n  processesIncrementMeta,\n  ProcessesLoaderMeta,\n  processesLoaderResetMeta,\n} from '../processes-loader/processes-loader.action';\n\nexport const ENTITY_PROCESSES_LOADER_RESET_ACTION =\n  '[ENTITY] PROCESSES LOADER RESET';\nexport const ENTITY_PROCESSES_INCREMENT_ACTION = '[ENTITY] PROCESSES INCREMENT';\nexport const ENTITY_PROCESSES_DECREMENT_ACTION = '[ENTITY] PROCESSES DECREMENT';\n\nexport interface EntityProcessesLoaderMeta\n  extends EntityMeta,\n    ProcessesLoaderMeta {}\n\nexport interface EntityProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityProcessesLoaderMeta;\n}\n\nexport function entityProcessesLoaderResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesLoaderResetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesIncrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesIncrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesDecrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesDecrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityProcessesLoaderResetAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesLoaderResetMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesIncrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_INCREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesIncrementMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesDecrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_DECREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesDecrementMeta(entityType, id);\n  }\n}\n","import { ProcessesLoaderState } from './processes-loader-state';\n\nexport function isStableSelector<T>(state: ProcessesLoaderState<T>): boolean {\n  return state.processesCount === 0 && !state.loading;\n}\n\nexport function hasPendingProcessesSelector<T>(\n  state: ProcessesLoaderState<T>\n): boolean {\n  return state.processesCount > 0;\n}\n","import { isDevMode } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { initialLoaderState, loaderReducer } from '../loader/loader.reducer';\nimport { ProcessesLoaderState } from './processes-loader-state';\nimport { ProcessesLoaderAction } from './processes-loader.action';\n\nexport const initialProcessesState: ProcessesLoaderState<any> = {\n  processesCount: 0,\n};\n\n/**\n * Higher order reducer that adds processes count\n */\nexport function processesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ProcessesLoaderState<T>,\n  action: ProcessesLoaderAction\n) => ProcessesLoaderState<T> {\n  return (\n    state: ProcessesLoaderState<T> = {\n      ...initialProcessesState,\n      ...initialLoaderState,\n    },\n    action: ProcessesLoaderAction\n  ): ProcessesLoaderState<T> => {\n    const loaderState = loaderReducer(entityType, reducer)(state, action);\n    if (action.meta && action.meta.entityType === entityType) {\n      const processesCountDiff = action.meta.processesCountDiff;\n      if (isDevMode() && state.processesCount + processesCountDiff < 0) {\n        console.error(\n          `Action '${action.type}' sets processesCount to value < 0!\\n` +\n            'Make sure to keep processesCount in sync.\\n' +\n            'There should always be only one decrement action for each increment action.\\n' +\n            \"Make sure that you don't reset state in between those actions.\\n\",\n          action\n        );\n      }\n      if (processesCountDiff) {\n        return {\n          ...loaderState,\n          processesCount: state.processesCount\n            ? state.processesCount + processesCountDiff\n            : processesCountDiff,\n        };\n      } else if (processesCountDiff === null) {\n        // reset action\n        return {\n          ...loaderState,\n          ...initialProcessesState,\n        };\n      }\n    }\n\n    return loaderState;\n  };\n}\n","import { entityLoaderStateSelector } from '../entity-loader/entity-loader.selectors';\r\nimport { initialLoaderState } from '../loader/loader.reducer';\r\nimport {\r\n  initialProcessesState,\r\n  ProcessesLoaderState,\r\n} from '../processes-loader';\r\nimport {\r\n  hasPendingProcessesSelector,\r\n  isStableSelector,\r\n} from '../processes-loader/processes-loader.selectors';\r\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\r\n\r\nconst initialProcessesLoaderState = {\r\n  ...initialLoaderState,\r\n  ...initialProcessesState,\r\n};\r\n\r\nexport function entityHasPendingProcessesSelector<T>(\r\n  state: EntityProcessesLoaderState<T>,\r\n  id: string\r\n): boolean {\r\n  const entityState = entityLoaderStateSelector(state, id);\r\n  return hasPendingProcessesSelector(entityState);\r\n}\r\n\r\nexport function entityIsStableSelector<T>(\r\n  state: EntityProcessesLoaderState<T>,\r\n  id: string\r\n): boolean {\r\n  const entityState = entityLoaderStateSelector(state, id);\r\n  return isStableSelector(entityState);\r\n}\r\n\r\nexport function entityProcessesLoaderStateSelector<T>(\r\n  state: EntityProcessesLoaderState<T>,\r\n  id: string\r\n): ProcessesLoaderState<T> {\r\n  return state.entities[id] || initialProcessesLoaderState;\r\n}\r\n","import { entityReducer } from '../entity/entity.reducer';\nimport { processesLoaderReducer } from '../processes-loader';\nimport { ProcessesLoaderAction } from '../processes-loader/processes-loader.action';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\nimport { EntityProcessesLoaderAction } from './entity-processes-loader.action';\n\n/**\n * Higher order reducer that wraps ProcessesLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic processesCount flag\n */\nexport function entityProcessesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: ProcessesLoaderAction) => T\n): (\n  state: EntityProcessesLoaderState<T>,\n  action: EntityProcessesLoaderAction\n) => EntityProcessesLoaderState<T> {\n  return entityReducer(entityType, processesLoaderReducer(entityType, reducer));\n}\n","import { EntityState } from './entity-state';\n\nexport function entitySelector<T>(state: EntityState<T>, id: string): T {\n  return state.entities[id] || undefined;\n}\n","import { deepMerge } from '../../config/utils/deep-merge';\r\nimport { StateTransferType, StorageSyncType } from '../config/state-config';\r\n\r\nconst OBJECT_SEPARATOR = '.';\r\n\r\nexport function getStateSliceValue<T, E>(keys: string, state: T): E {\r\n  return keys\r\n    .split(OBJECT_SEPARATOR)\r\n    .reduce(\r\n      (previous, current) => (previous ? previous[current] : undefined),\r\n      state\r\n    );\r\n}\r\n\r\nexport function createShellObject<T, E>(\r\n  key: string,\r\n  excludeKeys: string[],\r\n  value: T\r\n): E {\r\n  if (!key || !value || Object.keys(value).length === 0) {\r\n    return {} as E;\r\n  }\r\n\r\n  const shell = key.split(OBJECT_SEPARATOR).reduceRight((acc, previous) => {\r\n    return ({ [previous]: acc } as unknown) as T;\r\n  }, value);\r\n  return handleExclusions(key, excludeKeys, shell);\r\n}\r\n\r\nexport function getStateSlice<T, E>(\r\n  keys: string[],\r\n  excludeKeys: string[],\r\n  state: T\r\n): E {\r\n  if (keys && keys.length === 0) {\r\n    return {} as E;\r\n  }\r\n\r\n  let stateSlices = {};\r\n  for (const currentKey of keys) {\r\n    const stateValue = getStateSliceValue(currentKey, state);\r\n    const shell = createShellObject(currentKey, excludeKeys, stateValue);\r\n    stateSlices = deepMerge(stateSlices, shell);\r\n  }\r\n\r\n  return stateSlices as E;\r\n}\r\n\r\nexport function handleExclusions(\r\n  key: string,\r\n  excludeKeys: string[],\r\n  value: any\r\n): any {\r\n  const exclusionKeys = getExclusionKeys(key, excludeKeys);\r\n  if (exclusionKeys.length === 0) {\r\n    return value;\r\n  }\r\n\r\n  const finalValue = deepMerge({}, value);\r\n  for (const currentExclusionKey of exclusionKeys) {\r\n    const exclusionChunksSplit = currentExclusionKey.split(OBJECT_SEPARATOR);\r\n\r\n    let nestedTemp = finalValue;\r\n    for (let i = 0; i < exclusionChunksSplit.length; i++) {\r\n      const currentChunk = exclusionChunksSplit[i];\r\n\r\n      // last iteration\r\n      if (i === exclusionChunksSplit.length - 1) {\r\n        if (nestedTemp && nestedTemp[currentChunk]) {\r\n          delete nestedTemp[currentChunk];\r\n        }\r\n      } else {\r\n        nestedTemp = nestedTemp[currentChunk];\r\n      }\r\n    }\r\n  }\r\n\r\n  return finalValue;\r\n}\r\n\r\nexport function getExclusionKeys(key: string, excludeKeys: string[]): string[] {\r\n  if (!key || !excludeKeys) {\r\n    return [];\r\n  }\r\n\r\n  const exclusionKeys: string[] = [];\r\n  for (const exclusionKey of excludeKeys) {\r\n    if (exclusionKey.includes(key)) {\r\n      exclusionKeys.push(exclusionKey);\r\n    }\r\n  }\r\n\r\n  return exclusionKeys;\r\n}\r\n\r\nexport function filterKeysByType(\r\n  keys: { [key: string]: StorageSyncType | StateTransferType },\r\n  type: StorageSyncType | StateTransferType\r\n): string[] {\r\n  if (!keys) {\r\n    return [];\r\n  }\r\n  return Object.keys(keys).filter((key) => keys[key] === type);\r\n}\r\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\n\nexport const AUTH_FEATURE = 'auth';\nexport const CLIENT_TOKEN_DATA = '[Auth] Client Token Data';\n\nexport interface StateWithAuth {\n  [AUTH_FEATURE]: AuthState;\n}\n\nexport interface AuthState {\n  userToken: UserTokenState;\n  clientToken: LoaderState<ClientToken>;\n}\n\nexport interface UserTokenState {\n  token: UserToken;\n}\n","import { StateUtils } from '../../../state/utils/index';\r\nimport { ClientToken } from '../../models/token-types.model';\r\nimport { CLIENT_TOKEN_DATA } from '../auth-state';\r\n\r\nexport const LOAD_CLIENT_TOKEN = '[Token] Load Client Token';\r\nexport const LOAD_CLIENT_TOKEN_FAIL = '[Token] Load Client Token Fail';\r\nexport const LOAD_CLIENT_TOKEN_SUCCESS = '[Token] Load Client Token Success';\r\n\r\nexport class LoadClientToken extends StateUtils.LoaderLoadAction {\r\n  readonly type = LOAD_CLIENT_TOKEN;\r\n  constructor() {\r\n    super(CLIENT_TOKEN_DATA);\r\n  }\r\n}\r\n\r\nexport class LoadClientTokenFail extends StateUtils.LoaderFailAction {\r\n  readonly type = LOAD_CLIENT_TOKEN_FAIL;\r\n  constructor(public payload: any) {\r\n    super(CLIENT_TOKEN_DATA, payload);\r\n  }\r\n}\r\n\r\nexport class LoadClientTokenSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = LOAD_CLIENT_TOKEN_SUCCESS;\r\n  constructor(public payload: ClientToken) {\r\n    super(CLIENT_TOKEN_DATA);\r\n  }\r\n}\r\n\r\nexport type ClientTokenAction =\r\n  | LoadClientToken\r\n  | LoadClientTokenFail\r\n  | LoadClientTokenSuccess;\r\n","import { Action } from '@ngrx/store';\n\nexport const LOGIN = '[Auth] Login';\nexport const LOGOUT = '[Auth] Logout';\nexport const LOGOUT_CUSTOMER_SUPPORT_AGENT =\n  '[Auth] Logout Customer Support Agent';\n\nexport class Login implements Action {\n  readonly type = LOGIN;\n}\n\nexport class Logout implements Action {\n  readonly type = LOGOUT;\n}\n\n// action types\nexport type LoginLogoutAction = Login | Logout;\n","import { Action } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\n\nexport const LOAD_USER_TOKEN = '[Auth] Load User Token';\nexport const LOAD_USER_TOKEN_FAIL = '[Auth] Load User Token Fail';\nexport const LOAD_USER_TOKEN_SUCCESS = '[Auth] Load User Token Success';\nexport const REFRESH_USER_TOKEN = '[Auth] Refresh User Token';\nexport const REFRESH_USER_TOKEN_FAIL = '[Auth] Refresh User Token Fail';\nexport const REFRESH_USER_TOKEN_SUCCESS = '[Auth] Refresh User Token Success';\nexport const REVOKE_USER_TOKEN = '[Auth] Revoke User Token';\nexport const REVOKE_USER_TOKEN_FAIL = '[Auth] Revoke User Token Fail';\nexport const REVOKE_USER_TOKEN_SUCCESS = '[Auth] Revoke User Token Success';\n\nexport class LoadUserToken implements Action {\n  readonly type = LOAD_USER_TOKEN;\n  constructor(public payload: { userId: string; password: string }) {}\n}\n\nexport class LoadUserTokenFail implements Action {\n  readonly type = LOAD_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserTokenSuccess implements Action {\n  readonly type = LOAD_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserToken implements Action {\n  readonly type = REFRESH_USER_TOKEN;\n  constructor(public payload: { refreshToken: string }) {}\n}\n\nexport class RefreshUserTokenSuccess implements Action {\n  readonly type = REFRESH_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserTokenFail implements Action {\n  readonly type = REFRESH_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RevokeUserToken implements Action {\n  readonly type = REVOKE_USER_TOKEN;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenSuccess implements Action {\n  readonly type = REVOKE_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenFail implements Action {\n  readonly type = REVOKE_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\n// action types\nexport type UserTokenAction =\n  | LoadUserToken\n  | LoadUserTokenFail\n  | LoadUserTokenSuccess\n  | RefreshUserToken\n  | RefreshUserTokenFail\n  | RefreshUserTokenSuccess\n  | RevokeUserToken\n  | RevokeUserTokenFail\n  | RevokeUserTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AuthState, AUTH_FEATURE, StateWithAuth } from '../auth-state';\n\nexport const getAuthState: MemoizedSelector<\n  StateWithAuth,\n  AuthState\n> = createFeatureSelector<AuthState>(AUTH_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport { ClientToken } from '../../models/token-types.model';\r\nimport { AuthState, StateWithAuth } from '../auth-state';\r\nimport { getAuthState } from './feature.selector';\r\n\r\nexport const getClientTokenState: MemoizedSelector<\r\n  StateWithAuth,\r\n  LoaderState<ClientToken>\r\n> = createSelector(getAuthState, (state: AuthState) => state.clientToken);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { UserToken } from '../../models/token-types.model';\r\nimport { AuthState, StateWithAuth, UserTokenState } from '../auth-state';\r\nimport { getAuthState } from './feature.selector';\r\n\r\nconst getUserTokenSelector = (state: UserTokenState) => state.token;\r\n\r\nexport const getUserTokenState: MemoizedSelector<\r\n  StateWithAuth,\r\n  UserTokenState\r\n> = createSelector(getAuthState, (state: AuthState) => state.userToken);\r\n\r\nexport const getUserToken: MemoizedSelector<\r\n  StateWithAuth,\r\n  UserToken\r\n> = createSelector(getUserTokenState, getUserTokenSelector);\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { filter, map, take } from 'rxjs/operators';\r\nimport {\r\n  OCC_USER_ID_ANONYMOUS,\r\n  OCC_USER_ID_CURRENT,\r\n} from '../../occ/utils/occ-constants';\r\nimport { LoaderState } from '../../state/utils/loader/loader-state';\r\nimport { ClientToken, UserToken } from '../models/token-types.model';\r\nimport { AuthActions } from '../store/actions/index';\r\nimport { StateWithAuth } from '../store/auth-state';\r\nimport { AuthSelectors } from '../store/selectors/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  constructor(protected store: Store<StateWithAuth>) {}\r\n\r\n  /**\r\n   * Loads a new user token\r\n   * @param userId\r\n   * @param password\r\n   */\r\n  authorize(userId: string, password: string): void {\r\n    this.store.dispatch(\r\n      new AuthActions.LoadUserToken({\r\n        userId: userId,\r\n        password: password,\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This function provides the userId the OCC calls should use, depending\r\n   * on whether there is an active storefront session or not.\r\n   *\r\n   * It returns the userId of the current storefront user or 'anonymous'\r\n   * in the case there are no signed in user in the storefront.\r\n   *\r\n   * The user id of a regular customer session is 'current'.  In the case of an\r\n   * asm customer emulation session, the userId will be the customerId.\r\n   */\r\n  getOccUserId(): Observable<string> {\r\n    return this.getUserToken().pipe(\r\n      map((userToken) => {\r\n        if (!!userToken && !!userToken.userId) {\r\n          return userToken.userId;\r\n        } else {\r\n          return OCC_USER_ID_ANONYMOUS;\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Calls provided callback with current user id.\r\n   *\r\n   * @param cb callback function to invoke\r\n   */\r\n  invokeWithUserId(cb: (userId: string) => any): Subscription {\r\n    return this.getOccUserId()\r\n      .pipe(take(1))\r\n      .subscribe((id) => cb(id));\r\n  }\r\n\r\n  /**\r\n   * Returns the user's token\r\n   */\r\n  getUserToken(): Observable<UserToken> {\r\n    return this.store.pipe(select(AuthSelectors.getUserToken));\r\n  }\r\n\r\n  /**\r\n   * Refreshes the user token\r\n   * @param token a user token to refresh\r\n   */\r\n  refreshUserToken(token: UserToken): void {\r\n    this.store.dispatch(\r\n      new AuthActions.RefreshUserToken({\r\n        refreshToken: token.refresh_token,\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Store the provided token\r\n   */\r\n  authorizeWithToken(token: UserToken): void {\r\n    this.store.dispatch(new AuthActions.LoadUserTokenSuccess(token));\r\n  }\r\n\r\n  /**\r\n   * Logout a storefront customer\r\n   */\r\n  logout(): void {\r\n    this.getUserToken()\r\n      .pipe(take(1))\r\n      .subscribe((userToken) => {\r\n        this.store.dispatch(new AuthActions.Logout());\r\n        if (Boolean(userToken) && userToken.userId === OCC_USER_ID_CURRENT) {\r\n          this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Returns a client token.  The client token from the store is returned if there is one.\r\n   * Otherwise, an new token is fetched from the backend and saved in the store.\r\n   */\r\n  getClientToken(): Observable<ClientToken> {\r\n    return this.store.pipe(\r\n      select(AuthSelectors.getClientTokenState),\r\n      filter((state: LoaderState<ClientToken>) => {\r\n        if (this.isClientTokenLoaded(state)) {\r\n          return true;\r\n        } else {\r\n          if (!state.loading) {\r\n            this.store.dispatch(new AuthActions.LoadClientToken());\r\n          }\r\n          return false;\r\n        }\r\n      }),\r\n      map((state: LoaderState<ClientToken>) => state.value)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Fetches a clientToken from the backend ans saves it in the store where getClientToken can use it.\r\n   * The new clientToken is returned.\r\n   */\r\n  refreshClientToken(): Observable<ClientToken> {\r\n    this.store.dispatch(new AuthActions.LoadClientToken());\r\n\r\n    return this.store.pipe(\r\n      select(AuthSelectors.getClientTokenState),\r\n      filter((state: LoaderState<ClientToken>) =>\r\n        this.isClientTokenLoaded(state)\r\n      ),\r\n      map((state: LoaderState<ClientToken>) => state.value)\r\n    );\r\n  }\r\n\r\n  protected isClientTokenLoaded(state: LoaderState<ClientToken>): boolean {\r\n    return (state.success || state.error) && !state.loading;\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the user is logged in; and `false` if the user is anonymous.\r\n   */\r\n  isUserLoggedIn(): Observable<boolean> {\r\n    return this.getUserToken().pipe(\r\n      map((userToken) => Boolean(userToken) && Boolean(userToken.access_token))\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { switchMap, take } from 'rxjs/operators';\r\n\r\nimport { AuthService } from '../../facade/auth.service';\r\nimport { ClientToken } from '../../models/token-types.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ClientErrorHandlingService {\r\n  constructor(protected authService: AuthService) {}\r\n\r\n  public handleExpiredClientToken(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<any> {\r\n    return this.authService.refreshClientToken().pipe(\r\n      take(1),\r\n      switchMap((token: ClientToken) => {\r\n        return next.handle(this.createNewRequestWithNewToken(request, token));\r\n      })\r\n    );\r\n  }\r\n\r\n  protected createNewRequestWithNewToken(\r\n    request: HttpRequest<any>,\r\n    token: ClientToken\r\n  ): HttpRequest<any> {\r\n    request = request.clone({\r\n      setHeaders: {\r\n        Authorization: `${token.token_type} ${token.access_token}`,\r\n      },\r\n    });\r\n    return request;\r\n  }\r\n}\r\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, startWith } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WindowRef {\n  readonly document: Document;\n\n  constructor(@Inject(DOCUMENT) document) {\n    // it's a workaround to have document property properly typed\n    // see: https://github.com/angular/angular/issues/15640\n    this.document = document;\n  }\n\n  get nativeWindow(): Window {\n    return typeof window !== 'undefined' ? window : undefined;\n  }\n\n  get sessionStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.sessionStorage : undefined;\n  }\n\n  get localStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.localStorage : undefined;\n  }\n\n  /**\n   * Returns an observable for the window resize event and emits an event\n   * every 300ms in case of resizing. An event is simulated initially.\n   *\n   * If there's no window object availale (i.e. in SSR), a null value is emitted.\n   */\n  get resize$(): Observable<any> {\n    if (!this.nativeWindow) {\n      return of(null);\n    } else {\n      return fromEvent(this.nativeWindow, 'resize').pipe(\n        debounceTime(300),\n        startWith({ target: this.nativeWindow }),\n        distinctUntilChanged()\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { UrlSegmentGroup, PRIMARY_OUTLET } from '@angular/router';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UrlParsingService {\r\n  constructor(private router: Router) {}\r\n\r\n  getPrimarySegments(url: string): string[] {\r\n    const urlTree = this.router.parseUrl(url);\r\n    return this._getPrimarySegmentsFromUrlTree(urlTree.root);\r\n  }\r\n\r\n  private _getPrimarySegmentsFromUrlTree(tree: UrlSegmentGroup): string[] {\r\n    const segments = tree.segments.map((s) => s.path);\r\n    const childrenSegments = tree.children[PRIMARY_OUTLET]\r\n      ? this._getPrimarySegmentsFromUrlTree(tree.children[PRIMARY_OUTLET])\r\n      : [];\r\n    return segments.concat(childrenSegments);\r\n  }\r\n}\r\n","export const isParam = (segment: string): boolean => segment.startsWith(':');\n\nexport const getParamName = (segment: string): string => segment.slice(1); // it just removes leading ':'\n\nexport const ensureLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path : '/' + path;\n\nexport const removeLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path.slice(1) : path;\n","import { RoutesConfig } from '../routes-config';\r\nimport { Injectable } from '@angular/core';\r\nimport { Config } from '../../../config/config.module';\r\n\r\nexport const enum RouteLoadStrategy {\r\n  /**\r\n   * Don't reload the data on navigation if it was loaded before\r\n   */\r\n  ONCE = 'once',\r\n  /**\r\n   * Always reload the data on navigation\r\n   */\r\n  ALWAYS = 'always',\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class RoutingConfig {\r\n  routing?: {\r\n    /**\r\n     * Configuration of semantic routes. Key is route's name. Value is the config specific to this route.\r\n     */\r\n    routes?: RoutesConfig;\r\n\r\n    /**\r\n     * When true, it closes the storefront for unauthorized users, except from routes that have individual config flag `protected: false`\r\n     */\r\n    protected?: boolean;\r\n\r\n    /**\r\n     * Global load strategy which is used as a fallback for loading data on each navigation\r\n     */\r\n    loadStrategy?: RouteLoadStrategy;\r\n  };\r\n}\r\n","import { Injectable, isDevMode } from '@angular/core';\r\nimport { RouteConfig } from './routes-config';\r\nimport { RouteLoadStrategy, RoutingConfig } from './config/routing-config';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class RoutingConfigService {\r\n  constructor(protected config: RoutingConfig) {}\r\n\r\n  getRouteConfig(routeName: string): RouteConfig {\r\n    const routeConfig = this.config?.routing?.routes;\r\n\r\n    const result = routeConfig && routeConfig[routeName];\r\n    if (!routeConfig || result === undefined) {\r\n      this.warn(`No path was configured for the named route '${routeName}'!`);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private warn(...args) {\r\n    if (isDevMode()) {\r\n      console.warn(...args);\r\n    }\r\n  }\r\n\r\n  getLoadStrategy(): RouteLoadStrategy {\r\n    return this.config?.routing?.loadStrategy ?? RouteLoadStrategy.ALWAYS;\r\n  }\r\n}\r\n","import { Injectable, isDevMode } from '@angular/core';\r\nimport { UrlParsingService } from './url-parsing.service';\r\nimport { RouteConfig, ParamsMapping } from '../routes-config';\r\nimport { getParamName, isParam } from './path-utils';\r\nimport { UrlCommandRoute, UrlCommands, UrlCommand } from './url-command';\r\nimport { RoutingConfigService } from '../routing-config.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SemanticPathService {\r\n  readonly ROOT_URL = ['/'];\r\n\r\n  constructor(\r\n    protected routingConfigService: RoutingConfigService,\r\n    protected urlParser: UrlParsingService\r\n  ) {}\r\n\r\n  /**\r\n   * Returns the first path alias configured for a given route name. It adds `/` at the beginning.\r\n   */\r\n  get(routeName: string): string {\r\n    const routeConfig = this.routingConfigService.getRouteConfig(routeName);\r\n    return routeConfig && Array.isArray(routeConfig.paths)\r\n      ? '/' + routeConfig.paths[0]\r\n      : undefined;\r\n  }\r\n\r\n  /**\r\n   * Transforms the array of url commands. Each command can be:\r\n   * a) string - will be left untouched\r\n   * b) object { cxRoute: <route name> } - will be replaced with semantic path\r\n   * c) object { cxRoute: <route name>, params: { ... } } - same as above, but with passed params\r\n   *\r\n   * If the first command is the object with the `cxRoute` property, returns an absolute url (with the first element of the array `'/'`)\r\n   */\r\n  transform(commands: UrlCommands): any[] {\r\n    if (!Array.isArray(commands)) {\r\n      commands = [commands];\r\n    }\r\n\r\n    const result: string[] = [];\r\n    for (const command of commands) {\r\n      if (!this.isRouteCommand(command)) {\r\n        // don't modify segment that is not route command:\r\n        result.push(command);\r\n      } else {\r\n        // generate array with url segments for given route command:\r\n        const partialResult = this.generateUrlPart(command);\r\n\r\n        if (partialResult === null) {\r\n          return this.ROOT_URL;\r\n        }\r\n\r\n        result.push(...partialResult);\r\n      }\r\n    }\r\n\r\n    if (this.shouldOutputAbsolute(commands)) {\r\n      result.unshift('/');\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  private isRouteCommand(command: UrlCommand): boolean {\r\n    return command && Boolean(command.cxRoute);\r\n  }\r\n\r\n  private shouldOutputAbsolute(commands: UrlCommands): boolean {\r\n    return this.isRouteCommand(commands[0]);\r\n  }\r\n\r\n  private generateUrlPart(command: UrlCommandRoute): string[] | null {\r\n    this.standarizeRouteCommand(command);\r\n\r\n    if (!command.cxRoute) {\r\n      return null;\r\n    }\r\n\r\n    const routeConfig = this.routingConfigService.getRouteConfig(\r\n      command.cxRoute\r\n    );\r\n\r\n    // if no route translation was configured, return null:\r\n    if (!routeConfig || !routeConfig.paths) {\r\n      return null;\r\n    }\r\n\r\n    // find first path that can satisfy it's parameters with given parameters\r\n    const path = this.findPathWithFillableParams(routeConfig, command.params);\r\n\r\n    // if there is no configured path that can be satisfied with given params, return null\r\n    if (!path) {\r\n      return null;\r\n    }\r\n\r\n    const result = this.provideParamsValues(\r\n      path,\r\n      command.params,\r\n      routeConfig.paramsMapping\r\n    );\r\n\r\n    return result;\r\n  }\r\n\r\n  private standarizeRouteCommand(command: UrlCommandRoute): void {\r\n    command.params = command.params || {};\r\n  }\r\n\r\n  private provideParamsValues(\r\n    path: string,\r\n    params: object,\r\n    paramsMapping: ParamsMapping\r\n  ): string[] {\r\n    return this.urlParser.getPrimarySegments(path).map((segment) => {\r\n      if (isParam(segment)) {\r\n        const paramName = getParamName(segment);\r\n        const mappedParamName = this.getMappedParamName(\r\n          paramName,\r\n          paramsMapping\r\n        );\r\n        return params[mappedParamName];\r\n      }\r\n      return segment;\r\n    });\r\n  }\r\n\r\n  private findPathWithFillableParams(\r\n    routeConfig: RouteConfig,\r\n    params: object\r\n  ): string {\r\n    const foundPath = routeConfig.paths.find((path) =>\r\n      this.getParams(path).every((paramName) => {\r\n        const mappedParamName = this.getMappedParamName(\r\n          paramName,\r\n          routeConfig.paramsMapping\r\n        );\r\n\r\n        return params[mappedParamName] !== undefined;\r\n      })\r\n    );\r\n\r\n    if (foundPath === undefined || foundPath === null) {\r\n      this.warn(\r\n        `No configured path matches all its params to given object. `,\r\n        `Route config: `,\r\n        routeConfig,\r\n        `Params object: `,\r\n        params\r\n      );\r\n      return null;\r\n    }\r\n    return foundPath;\r\n  }\r\n\r\n  private getParams(path: string) {\r\n    return this.urlParser\r\n      .getPrimarySegments(path)\r\n      .filter(isParam)\r\n      .map(getParamName);\r\n  }\r\n\r\n  private getMappedParamName(paramName: string, paramsMapping: object): string {\r\n    if (paramsMapping) {\r\n      return paramsMapping[paramName] || paramName;\r\n    }\r\n    return paramName;\r\n  }\r\n\r\n  private warn(...args) {\r\n    if (isDevMode()) {\r\n      console.warn(...args);\r\n    }\r\n  }\r\n}\r\n","import { NavigationExtras } from '@angular/router';\nimport { Action } from '@ngrx/store';\n\nexport const ROUTER_GO = '[Router] Go';\nexport const ROUTER_GO_BY_URL = '[Router] Go By Url';\nexport const ROUTER_BACK = '[Router] Back';\nexport const ROUTER_FORWARD = '[Router] Forward';\n\nexport class RouteGoAction implements Action {\n  readonly type = ROUTER_GO;\n  constructor(\n    public payload: {\n      path: string[];\n      query?: object;\n      extras?: NavigationExtras;\n    }\n  ) {}\n}\n\nexport class RouteGoByUrlAction implements Action {\n  readonly type = ROUTER_GO_BY_URL;\n  constructor(public payload: string) {}\n}\n\nexport class RouteBackAction implements Action {\n  readonly type = ROUTER_BACK;\n}\n\nexport class RouteForwardAction implements Action {\n  readonly type = ROUTER_FORWARD;\n}\n\nexport type RoutingAction =\n  | RouteGoAction\n  | RouteGoByUrlAction\n  | RouteBackAction\n  | RouteForwardAction;\n","import { Params } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { PageContext } from '../models/page-context.model';\n\nexport const ROUTING_FEATURE = 'router';\n\nexport interface RouterState\n  extends fromNgrxRouter.RouterReducerState<ActivatedRouterStateSnapshot> {\n  nextState?: ActivatedRouterStateSnapshot;\n}\n\nexport interface ActivatedRouterStateSnapshot {\n  url: string;\n  queryParams: Params;\n  params: Params;\n  context: PageContext;\n  cmsRequired: boolean;\n}\n\nexport interface State {\n  [ROUTING_FEATURE]: RouterState;\n}\n","import {\r\n  createFeatureSelector,\r\n  createSelector,\r\n  MemoizedSelector,\r\n} from '@ngrx/store';\r\nimport { PageContext } from '../../models/page-context.model';\r\nimport { RouterState, ROUTING_FEATURE, State } from '../routing-state';\r\n\r\nexport const getRouterFeatureState: MemoizedSelector<\r\n  any,\r\n  State\r\n> = createFeatureSelector<State>(ROUTING_FEATURE);\r\n\r\nexport const getRouterState: MemoizedSelector<\r\n  any,\r\n  RouterState\r\n> = createSelector(getRouterFeatureState, (state) => state.router);\r\n\r\nexport const getPageContext: MemoizedSelector<\r\n  any,\r\n  PageContext\r\n> = createSelector(\r\n  getRouterState,\r\n  (routingState: RouterState) =>\r\n    (routingState.state && routingState.state.context) || { id: '' }\r\n);\r\n\r\nexport const getNextPageContext: MemoizedSelector<\r\n  any,\r\n  PageContext\r\n> = createSelector(\r\n  getRouterState,\r\n  (routingState: RouterState) =>\r\n    routingState.nextState && routingState.nextState.context\r\n);\r\n\r\nexport const isNavigating: MemoizedSelector<any, boolean> = createSelector(\r\n  getNextPageContext,\r\n  (context) => !!context\r\n);\r\n","import { Injectable } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { WindowRef } from '../../window/window-ref';\nimport { SemanticPathService } from '../configurable-routes/url-translation/semantic-path.service';\nimport { UrlCommands } from '../configurable-routes/url-translation/url-command';\nimport { PageContext } from '../models/page-context.model';\nimport { RoutingActions } from '../store/actions/index';\nimport { RouterState } from '../store/routing-state';\nimport { RoutingSelector } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoutingService {\n  constructor(\n    protected store: Store<RouterState>,\n    protected winRef: WindowRef,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Get the current router state\n   */\n  getRouterState(): Observable<RouterState> {\n    return this.store.pipe(select(RoutingSelector.getRouterState));\n  }\n\n  /**\n   * Get the `PageContext` from the state\n   */\n  getPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getPageContext));\n  }\n\n  /**\n   * Get the next `PageContext` from the state\n   */\n  getNextPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getNextPageContext));\n  }\n\n  /**\n   * Get the `isNavigating` info from the state\n   */\n  isNavigating(): Observable<boolean> {\n    return this.store.pipe(select(RoutingSelector.isNavigating));\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param commands: url commands\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  go(commands: UrlCommands, query?: object, extras?: NavigationExtras): void {\n    const path = this.semanticPathService.transform(commands);\n\n    return this.navigate(path, query, extras);\n  }\n\n  /**\n   * Navigation using URL\n   * @param url\n   */\n  goByUrl(url: string) {\n    this.store.dispatch(new RoutingActions.RouteGoByUrlAction(url));\n  }\n\n  /**\n   * Navigating back\n   */\n  back(): void {\n    const isLastPageInApp = this.winRef.document.referrer.includes(\n      this.winRef.nativeWindow.location.origin\n    );\n    if (isLastPageInApp) {\n      this.store.dispatch(new RoutingActions.RouteBackAction());\n      return;\n    }\n    this.go(['/']);\n    return;\n  }\n\n  /**\n   * Navigating forward\n   */\n  forward(): void {\n    this.store.dispatch(new RoutingActions.RouteForwardAction());\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param path\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  protected navigate(\n    path: any[],\n    query?: object,\n    extras?: NavigationExtras\n  ): void {\n    this.store.dispatch(\n      new RoutingActions.RouteGoAction({\n        path,\n        query,\n        extras,\n      })\n    );\n  }\n}\n","import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, switchMap, take, tap } from 'rxjs/operators';\r\nimport { RoutingService } from '../../../routing/facade/routing.service';\r\nimport { AuthService } from '../../facade/auth.service';\r\nimport { UserToken } from '../../models/token-types.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserErrorHandlingService {\r\n  constructor(\r\n    protected authService: AuthService,\r\n    protected routingService: RoutingService\r\n  ) {}\r\n\r\n  public handleExpiredUserToken(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<UserToken>> {\r\n    return this.handleExpiredToken().pipe(\r\n      switchMap((token: UserToken) => {\r\n        return next.handle(this.createNewRequestWithNewToken(request, token));\r\n      })\r\n    );\r\n  }\r\n\r\n  public handleExpiredRefreshToken(): void {\r\n    // Logout user\r\n    this.authService.logout();\r\n  }\r\n\r\n  protected handleExpiredToken(): Observable<UserToken> {\r\n    let oldToken: UserToken;\r\n    return this.authService.getUserToken().pipe(\r\n      tap((token: UserToken) => {\r\n        if (token.access_token && token.refresh_token && !oldToken) {\r\n          this.authService.refreshUserToken(token);\r\n        } else if (!token.access_token && !token.refresh_token) {\r\n          this.routingService.go({ cxRoute: 'login' });\r\n        } else if (!token.refresh_token) {\r\n          this.authService.logout();\r\n          this.routingService.go({ cxRoute: 'login' });\r\n        }\r\n        oldToken = oldToken || token;\r\n      }),\r\n      filter(\r\n        (token: UserToken) => oldToken.access_token !== token.access_token\r\n      ),\r\n      take(1)\r\n    );\r\n  }\r\n\r\n  protected createNewRequestWithNewToken(\r\n    request: HttpRequest<any>,\r\n    token: UserToken\r\n  ): HttpRequest<any> {\r\n    request = request.clone({\r\n      setHeaders: {\r\n        Authorization: `${token.token_type} ${token.access_token}`,\r\n      },\r\n    });\r\n    return request;\r\n  }\r\n}\r\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AuthService } from '../facade/auth.service';\nimport { ClientErrorHandlingService } from '../services/client-error/client-error-handling.service';\nimport { UserErrorHandlingService } from '../services/user-error/user-error-handling.service';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthErrorInterceptor implements HttpInterceptor {\n  constructor(\n    private userErrorHandlingService: UserErrorHandlingService,\n    private clientErrorHandlingService: ClientErrorHandlingService,\n    private authService: AuthService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isClientTokenRequest = this.isClientTokenRequest(request);\n    if (isClientTokenRequest) {\n      request = InterceptorUtil.removeHeader(USE_CLIENT_TOKEN, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          switch (errResponse.status) {\n            case 401: // Unauthorized\n              if (isClientTokenRequest) {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.clientErrorHandlingService.handleExpiredClientToken(\n                    request,\n                    next\n                  );\n                }\n                // user token request\n              } else {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.userErrorHandlingService.handleExpiredUserToken(\n                    request,\n                    next\n                  );\n                } else if (\n                  // Refresh expired token\n                  // Check that the OAUTH endpoint was called and the error is for refresh token is expired\n                  errResponse.url.includes(OAUTH_ENDPOINT) &&\n                  errResponse.error.error === 'invalid_token'\n                ) {\n                  this.userErrorHandlingService.handleExpiredRefreshToken();\n                  return of();\n                }\n              }\n              break;\n            case 400: // Bad Request\n              if (\n                errResponse.url.includes(OAUTH_ENDPOINT) &&\n                errResponse.error.error === 'invalid_grant'\n              ) {\n                if (request.body.get('grant_type') === 'refresh_token') {\n                  // refresh token fail, force user logout\n                  this.authService.logout();\n                }\n              }\n              break;\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isClientTokenRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CLIENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n\n  private isExpiredToken(resp: HttpErrorResponse): boolean {\n    if (\n      resp.error &&\n      resp.error.errors &&\n      resp.error.errors instanceof Array &&\n      resp.error.errors[0]\n    ) {\n      return resp.error.errors[0].type === 'InvalidTokenError';\n    }\n    return false;\n  }\n}\n","export class DynamicTemplate {\n  static resolve(templateString: string, templateVariables: Object) {\n    for (const variableLabel of Object.keys(templateVariables)) {\n      const placeholder = new RegExp('\\\\${' + variableLabel + '}', 'g');\n      templateString = templateString.replace(\n        placeholder,\n        templateVariables[variableLabel]\n      );\n    }\n    return templateString;\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\n\n/**\n * Helper function for safely getting context parameter config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterValues(\n  config: SiteContextConfig,\n  parameter: string\n): string[] {\n  return (config.context && config.context[parameter]) || [];\n}\n\n/**\n * Helper function for calculating default value for context parameter from config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterDefault(\n  config: SiteContextConfig,\n  parameter: string\n): string {\n  const param = getContextParameterValues(config, parameter);\n  return param && param.length ? param[0] : undefined;\n}\n","import { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class SiteContextConfig {\r\n  context?: {\r\n    urlParameters?: string[];\r\n    [contextName: string]: string[];\r\n  };\r\n}\r\n","export const LANGUAGE_CONTEXT_ID = 'language';\nexport const CURRENCY_CONTEXT_ID = 'currency';\nexport const BASE_SITE_CONTEXT_ID = 'baseSite';\n","import { Action } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\n\nexport const LOAD_BASE_SITE = '[Site-context] Load BaseSite';\nexport const LOAD_BASE_SITE_FAIL = '[Site-context] Load BaseSite Fail';\nexport const LOAD_BASE_SITE_SUCCESS = '[Site-context] Load BaseSite Success';\nexport const SET_ACTIVE_BASE_SITE = '[Site-context] Set Active BaseSite';\nexport const BASE_SITE_CHANGE = '[Site-context] BaseSite Change';\n\nexport class LoadBaseSite implements Action {\n  readonly type = LOAD_BASE_SITE;\n}\n\nexport class LoadBaseSiteFail implements Action {\n  readonly type = LOAD_BASE_SITE_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBaseSiteSuccess implements Action {\n  readonly type = LOAD_BASE_SITE_SUCCESS;\n  constructor(public payload: BaseSite) {}\n}\n\nexport class SetActiveBaseSite implements Action {\n  readonly type = SET_ACTIVE_BASE_SITE;\n  constructor(public payload: string) {}\n}\n\nexport class BaseSiteChange implements Action {\n  readonly type = BASE_SITE_CHANGE;\n}\n\n// action types\nexport type BaseSiteAction =\n  | LoadBaseSite\n  | LoadBaseSiteFail\n  | LoadBaseSiteSuccess\n  | SetActiveBaseSite\n  | BaseSiteChange;\n","import { Action } from '@ngrx/store';\r\nimport { Currency } from '../../../model/misc.model';\r\n\r\nexport const LOAD_CURRENCIES = '[Site-context] Load Currencies';\r\nexport const LOAD_CURRENCIES_FAIL = '[Site-context] Load Currencies Fail';\r\nexport const LOAD_CURRENCIES_SUCCESS = '[Site-context] Load Currencies Success';\r\nexport const SET_ACTIVE_CURRENCY = '[Site-context] Set Active Currency';\r\nexport const CURRENCY_CHANGE = '[Site-context] Currency Change';\r\n\r\nexport class LoadCurrencies implements Action {\r\n  readonly type = LOAD_CURRENCIES;\r\n}\r\n\r\nexport class LoadCurrenciesFail implements Action {\r\n  readonly type = LOAD_CURRENCIES_FAIL;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LoadCurrenciesSuccess implements Action {\r\n  readonly type = LOAD_CURRENCIES_SUCCESS;\r\n  constructor(public payload: Currency[]) {}\r\n}\r\n\r\nexport class SetActiveCurrency implements Action {\r\n  readonly type = SET_ACTIVE_CURRENCY;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class CurrencyChange implements Action {\r\n  readonly type = CURRENCY_CHANGE;\r\n  constructor(public payload: { previous: string; current: string }) {}\r\n}\r\n\r\n// action types\r\nexport type CurrenciesAction =\r\n  | LoadCurrencies\r\n  | LoadCurrenciesFail\r\n  | LoadCurrenciesSuccess\r\n  | SetActiveCurrency\r\n  | CurrencyChange;\r\n","import { Action } from '@ngrx/store';\r\nimport { Language } from '../../../model/misc.model';\r\n\r\nexport const LOAD_LANGUAGES = '[Site-context] Load Languages';\r\nexport const LOAD_LANGUAGES_FAIL = '[Site-context] Load Languages Fail';\r\nexport const LOAD_LANGUAGES_SUCCESS = '[Site-context] Load Languages Success';\r\nexport const SET_ACTIVE_LANGUAGE = '[Site-context] Set Active Language';\r\nexport const LANGUAGE_CHANGE = '[Site-context] Language Change';\r\n\r\nexport class LoadLanguages implements Action {\r\n  readonly type = LOAD_LANGUAGES;\r\n}\r\n\r\nexport class LoadLanguagesFail implements Action {\r\n  readonly type = LOAD_LANGUAGES_FAIL;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LoadLanguagesSuccess implements Action {\r\n  readonly type = LOAD_LANGUAGES_SUCCESS;\r\n  constructor(public payload: Language[]) {}\r\n}\r\n\r\nexport class SetActiveLanguage implements Action {\r\n  readonly type = SET_ACTIVE_LANGUAGE;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class LanguageChange implements Action {\r\n  readonly type = LANGUAGE_CHANGE;\r\n  constructor(public payload: { previous: string; current: string }) {}\r\n}\r\n\r\n// action types\r\nexport type LanguagesAction =\r\n  | LoadLanguages\r\n  | LoadLanguagesFail\r\n  | LoadLanguagesSuccess\r\n  | SetActiveLanguage\r\n  | LanguageChange;\r\n","import { Currency, Language, BaseSite } from '../../model/misc.model';\nexport const SITE_CONTEXT_FEATURE = 'siteContext';\n\nexport interface StateWithSiteContext {\n  [SITE_CONTEXT_FEATURE]: SiteContextState;\n}\n\nexport interface SiteContextState {\n  languages: LanguagesState;\n  currencies: CurrenciesState;\n  baseSite: BaseSiteState;\n}\n\nexport interface CurrencyEntities {\n  [isocode: string]: Currency;\n}\n\nexport interface CurrenciesState {\n  entities: CurrencyEntities;\n  activeCurrency: string;\n}\nexport interface LanguagesEntities {\n  [isocode: string]: Language;\n}\n\nexport interface LanguagesState {\n  entities: LanguagesEntities;\n  activeLanguage: string;\n}\n\nexport interface BaseSiteState {\n  activeSite: string;\n  details: BaseSite;\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  SiteContextState,\n  SITE_CONTEXT_FEATURE,\n  StateWithSiteContext,\n} from '../state';\n\nexport const getSiteContextState: MemoizedSelector<\n  StateWithSiteContext,\n  SiteContextState\n> = createFeatureSelector<SiteContextState>(SITE_CONTEXT_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\nimport { SiteContextState, StateWithSiteContext } from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nexport const getActiveBaseSite: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) =>\n    state && state.baseSite && state.baseSite.activeSite\n);\n\nexport const getBaseSiteData: MemoizedSelector<\n  StateWithSiteContext,\n  BaseSite\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state && state.baseSite && state.baseSite.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { Currency } from '../../../model/misc.model';\r\nimport {\r\n  CurrenciesState,\r\n  CurrencyEntities,\r\n  SiteContextState,\r\n  StateWithSiteContext,\r\n} from '../state';\r\nimport { getSiteContextState } from './site-context.selector';\r\n\r\nconst currenciesEntitiesSelector = (state: CurrenciesState) => state.entities;\r\nconst activeCurrencySelector = (state: CurrenciesState) => state.activeCurrency;\r\n\r\nexport const getCurrenciesState: MemoizedSelector<\r\n  StateWithSiteContext,\r\n  CurrenciesState\r\n> = createSelector(\r\n  getSiteContextState,\r\n  (state: SiteContextState) => state.currencies\r\n);\r\n\r\nexport const getCurrenciesEntities: MemoizedSelector<\r\n  StateWithSiteContext,\r\n  CurrencyEntities\r\n> = createSelector(getCurrenciesState, currenciesEntitiesSelector);\r\n\r\nexport const getActiveCurrency: MemoizedSelector<\r\n  StateWithSiteContext,\r\n  string\r\n> = createSelector(getCurrenciesState, activeCurrencySelector);\r\n\r\nexport const getAllCurrencies: MemoizedSelector<\r\n  StateWithSiteContext,\r\n  Currency[]\r\n> = createSelector(getCurrenciesEntities, (entities) => {\r\n  return entities\r\n    ? Object.keys(entities).map((isocode) => entities[isocode])\r\n    : null;\r\n});\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { Language } from '../../../model/misc.model';\r\nimport {\r\n  LanguagesEntities,\r\n  LanguagesState,\r\n  SiteContextState,\r\n  StateWithSiteContext,\r\n} from '../state';\r\nimport { getSiteContextState } from './site-context.selector';\r\n\r\nconst activeLanguageSelector = (state: LanguagesState) => state.activeLanguage;\r\nconst languagesEntitiesSelector = (state: LanguagesState) => state.entities;\r\n\r\nexport const getLanguagesState: MemoizedSelector<\r\n  StateWithSiteContext,\r\n  LanguagesState\r\n> = createSelector(\r\n  getSiteContextState,\r\n  (state: SiteContextState) => state.languages\r\n);\r\n\r\nexport const getLanguagesEntities: MemoizedSelector<\r\n  StateWithSiteContext,\r\n  LanguagesEntities\r\n> = createSelector(getLanguagesState, languagesEntitiesSelector);\r\n\r\nexport const getActiveLanguage: MemoizedSelector<\r\n  StateWithSiteContext,\r\n  string\r\n> = createSelector(getLanguagesState, activeLanguageSelector);\r\n\r\nexport const getAllLanguages: MemoizedSelector<\r\n  StateWithSiteContext,\r\n  Language[]\r\n> = createSelector(getLanguagesEntities, (entities) => {\r\n  return entities\r\n    ? Object.keys(entities).map((isocode) => entities[isocode])\r\n    : null;\r\n});\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { filter, map, take, tap } from 'rxjs/operators';\r\nimport { BaseSite } from '../../model/misc.model';\r\nimport { getContextParameterDefault } from '../config/context-config-utils';\r\nimport { SiteContextConfig } from '../config/site-context-config';\r\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\r\nimport { SiteContextActions } from '../store/actions/index';\r\nimport { SiteContextSelectors } from '../store/selectors/index';\r\nimport { StateWithSiteContext } from '../store/state';\r\nimport { SiteContext } from './site-context.interface';\r\n\r\n@Injectable()\r\nexport class BaseSiteService implements SiteContext<string> {\r\n  constructor(\r\n    protected store: Store<StateWithSiteContext>,\r\n    protected config: SiteContextConfig\r\n  ) {}\r\n\r\n  /**\r\n   * Represents the current baseSite uid.\r\n   */\r\n  getActive(): Observable<string> {\r\n    return this.store.pipe(\r\n      select(SiteContextSelectors.getActiveBaseSite),\r\n      filter((active) => Boolean(active))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * We currently don't support switching baseSite at run time\r\n   */\r\n  getAll(): Observable<string[]> {\r\n    return this.getActive().pipe(map((baseSite) => [baseSite]));\r\n  }\r\n\r\n  setActive(baseSite: string): Subscription {\r\n    return this.store\r\n      .pipe(select(SiteContextSelectors.getActiveBaseSite), take(1))\r\n      .subscribe((activeBaseSite) => {\r\n        if (baseSite && activeBaseSite !== baseSite) {\r\n          this.store.dispatch(\r\n            new SiteContextActions.SetActiveBaseSite(baseSite)\r\n          );\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Initializes the active baseSite.\r\n   */\r\n  initialize(): void {\r\n    let value;\r\n    this.getActive()\r\n      .subscribe((val) => (value = val))\r\n      .unsubscribe();\r\n    if (value) {\r\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\r\n      return;\r\n    }\r\n\r\n    this.setActive(\r\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the base site details data\r\n   */\r\n  getBaseSiteData(): Observable<BaseSite> {\r\n    return this.store.pipe(\r\n      select(SiteContextSelectors.getBaseSiteData),\r\n      tap((baseSite) => {\r\n        if (Object.keys(baseSite).length === 0) {\r\n          this.store.dispatch(new SiteContextActions.LoadBaseSite());\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n","/**\n * Angular uses the native encodeURIComponent function,\n * but then un-encoded some characters that are allowed\n * to be part of the query according to IETF RFC 3986.\n * So, to make these characters still encoded, this encoder only\n * uses the encodeURIComponent.\n */\nimport { HttpParameterCodec } from '@angular/common/http';\n\nexport class CustomEncoder implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\n","import { SiteContextConfig } from '../../site-context/config/site-context-config';\r\nimport { OccEndpoints } from '../occ-models/occ-endpoints.model';\r\nimport { LoadingScopes } from './loading-scopes-config';\r\nimport { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class OccConfig extends SiteContextConfig {\r\n  backend?: {\r\n    occ?: {\r\n      baseUrl?: string;\r\n      prefix?: string;\r\n      /**\r\n       * Indicates whether or not cross-site Access-Control requests should be made\r\n       * using credentials such as cookies, authorization headers or TLS client certificates\r\n       */\r\n      useWithCredentials?: boolean;\r\n\r\n      endpoints?: OccEndpoints;\r\n      legacy?: boolean;\r\n    };\r\n    media?: {\r\n      /**\r\n       * Media URLs are typically relative, so that the host can be configured.\r\n       * Configurable media baseURLs are useful for SEO, multi-site,\r\n       * switching environments, etc.\r\n       */\r\n      baseUrl?: string;\r\n    };\r\n    loadingScopes?: LoadingScopes;\r\n  };\r\n}\r\n","export const DEFAULT_SCOPE = 'default';\r\n\r\nexport interface OccEndpoint {\r\n  default?: string;\r\n  [scope: string]: string;\r\n}\r\n\r\nexport interface ProductOccEndpoint extends OccEndpoint {\r\n  list?: string;\r\n  details?: string;\r\n  attributes?: string;\r\n  variants?: string;\r\n}\r\n\r\nexport interface OccEndpoints {\r\n  /**\r\n   * Client login (get authorization token)\r\n   *\r\n   * @member {string}\r\n   */\r\n  login?: string | OccEndpoint;\r\n\r\n  /**\r\n   * Client logout (revoke authorization token)\r\n   *\r\n   * @member {string}\r\n   */\r\n  revoke?: string | OccEndpoint;\r\n\r\n  /**\r\n   * Get product details for scope\r\n   *\r\n   * @member Object\r\n   */\r\n  product?: string | ProductOccEndpoint;\r\n  /**\r\n   * Get reviews for a product\r\n   *\r\n   * @member {string}\r\n   */\r\n  productReviews?: string | OccEndpoint;\r\n  /**\r\n   * Get a list of product references\r\n   *\r\n   * @member {string}\r\n   */\r\n  productReferences?: string | OccEndpoint;\r\n  /**\r\n   * Get a list of products and additional data\r\n   *\r\n   * @member {string}\r\n   */\r\n  productSearch?: string | OccEndpoint;\r\n  /**\r\n   * Get a list of available suggestions\r\n   *\r\n   * @member {string}\r\n   */\r\n  productSuggestions?: string | OccEndpoint;\r\n  /**\r\n   * Get CMS component details\r\n   *\r\n   * @member {string}\r\n   */\r\n  component?: string | OccEndpoint;\r\n  /**\r\n   * Get a list of CMS component details\r\n   *\r\n   * @member {string}\r\n   */\r\n  components?: string | OccEndpoint;\r\n  /**\r\n   * Get page data with list of cms content slots\r\n   *\r\n   * @member {string}\r\n   */\r\n  pages?: string | OccEndpoint;\r\n  /**\r\n   * Get page data with list of cms content slots\r\n   *\r\n   * @member {string}\r\n   */\r\n  page?: string | OccEndpoint;\r\n  /**\r\n   * Get all carts\r\n   *\r\n   * @member {string} [carts]\r\n   */\r\n  carts?: string | OccEndpoint;\r\n  /**\r\n   * Get a cart with a given identifier\r\n   *\r\n   * @member {string} [cart]\r\n   */\r\n  cart?: string | OccEndpoint;\r\n  /**\r\n   * Creates or restore a cart for a user\r\n   *\r\n   * @member {string} [createCart]\r\n   */\r\n  createCart?: string | OccEndpoint;\r\n  /**\r\n   * Deletes a cart with a given cart id\r\n   *\r\n   * @member {string} [deleteCart]\r\n   */\r\n  deleteCart?: string | OccEndpoint;\r\n  /**\r\n   * Adds a product to the cart\r\n   *\r\n   * @member {string} [addEntries]\r\n   */\r\n  addEntries?: string | OccEndpoint;\r\n  /**\r\n   * Update quantity and store the details of a cart entry\r\n   *\r\n   * @member {string} [updateEntries]\r\n   */\r\n  updateEntries?: string | OccEndpoint;\r\n  /**\r\n   * Deletes cart entry\r\n   *\r\n   * @member {string} [removeEntries]\r\n   */\r\n  removeEntries?: string | OccEndpoint;\r\n  /**\r\n   * Assign email to cart\r\n   *\r\n   * @member {string} [addEmail]\r\n   */\r\n  addEmail?: string | OccEndpoint;\r\n  /**\r\n   * Get a store location\r\n   *\r\n   * @member {string} [page]\r\n   */\r\n  store?: string | OccEndpoint;\r\n  /**\r\n   * Get a list of store locations\r\n   *\r\n   * @member {string} [page]\r\n   */\r\n  stores?: string | OccEndpoint;\r\n  /**\r\n   * Gets a store location count per country and regions\r\n   *\r\n   * @member {string} [page]\r\n   */\r\n  storescounts?: string | OccEndpoint;\r\n  /**\r\n   * Get a list of available languages\r\n   *\r\n   * @member {string}\r\n   */\r\n  languages?: string | OccEndpoint;\r\n  /**\r\n   * Get a list of available currencies\r\n   *\r\n   * @member {string}\r\n   */\r\n  currencies?: string | OccEndpoint;\r\n  /**\r\n   * Get a list of countries\r\n   *\r\n   * @member {string}\r\n   */\r\n  countries?: string | OccEndpoint;\r\n  /**\r\n   * Fetch the list of regions for the provided country\r\n   *\r\n   * @member {string}\r\n   */\r\n  regions?: string | OccEndpoint;\r\n  /**\r\n   * Titles used for user's personal info.\r\n   *\r\n   * @member {string}\r\n   */\r\n  titles?: string | OccEndpoint;\r\n  /**\r\n   * Get user details\r\n   *\r\n   * @member {string}\r\n   */\r\n  user?: string | OccEndpoint;\r\n  /**\r\n   * Register a new user.\r\n   *\r\n   * @member {string}\r\n   */\r\n  userRegister?: string | OccEndpoint;\r\n  /**\r\n   * Request an email to reset the password\r\n   *\r\n   * @member {string}\r\n   */\r\n  userForgotPassword?: string | OccEndpoint;\r\n  /**\r\n   * Reset the password once the email is recieved.\r\n   *\r\n   * @member {string}\r\n   */\r\n  userResetPassword?: string | OccEndpoint;\r\n  /**\r\n   * Update the user id with which the user authenticates.\r\n   *\r\n   * @member {string}\r\n   */\r\n  userUpdateLoginId?: string | OccEndpoint;\r\n  /**\r\n   * Update the user's password\r\n   *\r\n   * @member {string}\r\n   */\r\n  userUpdatePassword?: string | OccEndpoint;\r\n  /**\r\n   * Payment details root endpoint.\r\n   *\r\n   * @member {string}\r\n   */\r\n  paymentDetailsAll?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for a specific payment method.\r\n   *\r\n   * @member {string}\r\n   */\r\n  paymentDetail?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for the list of one user's orders\r\n   *\r\n   * @member {string}\r\n   */\r\n  orderHistory?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for the details of one user's order\r\n   *\r\n   * @member {string}\r\n   */\r\n  orderDetail?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for anonymous consent templates\r\n   *\r\n   * @member {string}\r\n   */\r\n  anonymousConsentTemplates?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for consent templates\r\n   *\r\n   * @member {string}\r\n   */\r\n  consentTemplates?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for a user's consents\r\n   *\r\n   * @member {string}\r\n   */\r\n  consents?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for a user's specific previously given consent.\r\n   *\r\n   * @member {string}\r\n   */\r\n  consentDetail?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for a user's addresses\r\n   *\r\n   * @member {string}\r\n   */\r\n  addresses?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for a user's specific address\r\n   *\r\n   * @member {string}\r\n   */\r\n  addressDetail?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for address verification\r\n   *\r\n   * @member {string}\r\n   */\r\n  addressVerification?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for consignment tracking\r\n   *\r\n   * @member {string}\r\n   */\r\n  consignmentTracking?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for asm customer search\r\n   *\r\n   * @member {string}\r\n   */\r\n  asmCustomerSearch?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for cart voucher\r\n   *\r\n   * @member {string}\r\n   */\r\n  cartVoucher?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for coupons\r\n   *\r\n   * @member {string}\r\n   */\r\n  customerCoupons?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for claiming coupon\r\n   *\r\n   * @member {string}\r\n   */\r\n  claimCoupon?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for coupons\r\n   *\r\n   * @member {string}\r\n   */\r\n  couponNotification?: string | OccEndpoint;\r\n  /**\r\n   * Explicitly saves a cart\r\n   *\r\n   * @member {string}\r\n   */\r\n  saveCart?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for notification preference\r\n   *\r\n   * @member {string}\r\n   */\r\n  notificationPreference?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for product interests\r\n   *\r\n   * @member {string}\r\n   */\r\n  productInterests?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for getting product interests\r\n   *\r\n   * @member {string}\r\n   */\r\n  getProductInterests?: string | OccEndpoint;\r\n\r\n  /**\r\n   * Endpoint for cancel an order\r\n   */\r\n  cancelOrder?: string | OccEndpoint;\r\n\r\n  /**\r\n   * Endpoint for creating order return request\r\n   */\r\n  returnOrder?: string | OccEndpoint;\r\n\r\n  /**\r\n   * Endpoint for user's order return requests\r\n   */\r\n  orderReturns?: string | OccEndpoint;\r\n\r\n  /**\r\n   * Endpoint for order return request details\r\n   */\r\n  orderReturnDetail?: string | OccEndpoint;\r\n\r\n  /**\r\n   * Endpoint for cancelling return request\r\n   */\r\n  cancelReturn?: string | OccEndpoint;\r\n}\r\n","import { HttpParams } from '@angular/common/http';\r\nimport { Injectable, isDevMode, Optional } from '@angular/core';\r\nimport { DynamicTemplate } from '../../config/utils/dynamic-template';\r\nimport { getContextParameterDefault } from '../../site-context/config/context-config-utils';\r\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\r\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\r\nimport { CustomEncoder } from '../adapters/cart/custom.encoder';\r\nimport { OccConfig } from '../config/occ-config';\r\nimport { DEFAULT_SCOPE } from '../occ-models/occ-endpoints.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OccEndpointsService {\r\n  private activeBaseSite: string;\r\n\r\n  constructor(\r\n    private config: OccConfig,\r\n    @Optional() private baseSiteService: BaseSiteService\r\n  ) {\r\n    this.activeBaseSite =\r\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID) || '';\r\n\r\n    if (this.baseSiteService) {\r\n      this.baseSiteService\r\n        .getActive()\r\n        .subscribe((value) => (this.activeBaseSite = value));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns and endpoint starting from the OCC baseUrl (no baseSite)\r\n   * @param endpoint Endpoint suffix\r\n   */\r\n  getRawEndpoint(endpoint: string): string {\r\n    if (!this.config?.backend?.occ) {\r\n      return '';\r\n    }\r\n    endpoint = this.config.backend.occ.endpoints?.[endpoint];\r\n\r\n    if (!endpoint.startsWith('/')) {\r\n      endpoint = '/' + endpoint;\r\n    }\r\n\r\n    return this.config.backend.occ.baseUrl + endpoint;\r\n  }\r\n\r\n  /**\r\n   * Returns base OCC endpoint (baseUrl + prefix + baseSite)\r\n   */\r\n  getBaseEndpoint(): string {\r\n    if (!this.config?.backend?.occ) {\r\n      return '';\r\n    }\r\n\r\n    return (\r\n      (this.config.backend.occ.baseUrl || '') +\r\n      this.config.backend.occ.prefix +\r\n      this.activeBaseSite\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns an OCC endpoint including baseUrl and baseSite\r\n   * @param endpoint Endpoint suffix\r\n   */\r\n  getEndpoint(endpoint: string): string {\r\n    if (!endpoint.startsWith('/')) {\r\n      endpoint = '/' + endpoint;\r\n    }\r\n    return this.getBaseEndpoint() + endpoint;\r\n  }\r\n\r\n  /**\r\n   * Returns a fully qualified OCC Url (including baseUrl and baseSite)\r\n   * @param endpoint Name of the OCC endpoint key config\r\n   * @param urlParams  URL parameters\r\n   * @param queryParams Query parameters\r\n   * @param scope\r\n   */\r\n  getUrl(\r\n    endpoint: string,\r\n    urlParams?: object,\r\n    queryParams?: object,\r\n    scope?: string\r\n  ): string {\r\n    endpoint = this.getEndpointForScope(endpoint, scope);\r\n\r\n    if (urlParams) {\r\n      Object.keys(urlParams).forEach((key) => {\r\n        urlParams[key] = encodeURIComponent(urlParams[key]);\r\n      });\r\n      endpoint = DynamicTemplate.resolve(endpoint, urlParams);\r\n    }\r\n\r\n    if (queryParams) {\r\n      let httpParamsOptions = { encoder: new CustomEncoder() };\r\n\r\n      if (endpoint.includes('?')) {\r\n        let queryParamsFromEndpoint;\r\n        [endpoint, queryParamsFromEndpoint] = endpoint.split('?');\r\n\r\n        httpParamsOptions = {\r\n          ...httpParamsOptions,\r\n          ...{ fromString: queryParamsFromEndpoint },\r\n        };\r\n      }\r\n\r\n      let httpParams = new HttpParams(httpParamsOptions);\r\n      Object.keys(queryParams).forEach((key) => {\r\n        const value = queryParams[key];\r\n        if (value !== undefined) {\r\n          if (value === null) {\r\n            httpParams = httpParams.delete(key);\r\n          } else {\r\n            httpParams = httpParams.set(key, value);\r\n          }\r\n        }\r\n      });\r\n\r\n      const params = httpParams.toString();\r\n      if (params.length) {\r\n        endpoint += '?' + params;\r\n      }\r\n    }\r\n\r\n    return this.getEndpoint(endpoint);\r\n  }\r\n\r\n  private getEndpointForScope(endpoint: string, scope?: string): string {\r\n    const endpointsConfig = this.config.backend?.occ?.endpoints;\r\n    const endpointConfig = endpointsConfig[endpoint];\r\n\r\n    if (scope) {\r\n      if (endpointConfig?.[scope]) {\r\n        return endpointConfig?.[scope];\r\n      }\r\n      if (scope === DEFAULT_SCOPE && typeof endpointConfig === 'string') {\r\n        return endpointConfig;\r\n      }\r\n      if (isDevMode()) {\r\n        console.warn(\r\n          `${endpoint} endpoint configuration missing for scope \"${scope}\"`\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      (typeof endpointConfig === 'string'\r\n        ? endpointConfig\r\n        : endpointConfig?.[DEFAULT_SCOPE]) || endpoint\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n} from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../facade/auth.service';\nimport {\n  USE_CLIENT_TOKEN,\n  InterceptorUtil,\n} from '../../occ/utils/interceptor-util';\nimport { ClientToken } from '../models/token-types.model';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ClientTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getClientToken(request).pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        if (\n          token &&\n          request.url.includes(this.occEndpoints.getBaseEndpoint())\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getClientToken(request: HttpRequest<any>): Observable<ClientToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(USE_CLIENT_TOKEN, request.headers)\n    ) {\n      return this.authService.getClientToken();\n    }\n    return of(null);\n  }\n}\n","import {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { switchMap, take } from 'rxjs/operators';\r\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\r\nimport { AuthService } from '../facade/auth.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserTokenInterceptor implements HttpInterceptor {\r\n  constructor(\r\n    private authService: AuthService,\r\n    private occEndpoints: OccEndpointsService\r\n  ) {}\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    return this.authService.getUserToken().pipe(\r\n      take(1),\r\n      switchMap((token) => {\r\n        if (\r\n          token &&\r\n          this.isOccUrl(request.url) &&\r\n          !request.headers.get('Authorization')\r\n        ) {\r\n          request = request.clone({\r\n            setHeaders: {\r\n              Authorization: `${token.token_type} ${token.access_token}`,\r\n            },\r\n          });\r\n        }\r\n\r\n        return next.handle(request);\r\n      })\r\n    );\r\n  }\r\n\r\n  private isOccUrl(url: string): boolean {\r\n    return url.includes(this.occEndpoints.getBaseEndpoint());\r\n  }\r\n}\r\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { EMPTY, Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  TOKEN_REVOCATION_HEADER,\n} from '../../occ/utils/interceptor-util';\n\n@Injectable({ providedIn: 'root' })\nexport class TokenRevocationInterceptor implements HttpInterceptor {\n  constructor() {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isTokenRevocationRequest = this.isTokenRevocationRequest(request);\n    if (isTokenRevocationRequest) {\n      request = InterceptorUtil.removeHeader(TOKEN_REVOCATION_HEADER, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((error: any) => {\n        if (isTokenRevocationRequest) {\n          return EMPTY;\n        }\n        return throwError(error);\n      })\n    );\n  }\n\n  protected isTokenRevocationRequest(request: HttpRequest<any>): boolean {\n    const isTokenRevocationHeaderPresent = InterceptorUtil.getInterceptorParam<\n      string\n    >(TOKEN_REVOCATION_HEADER, request.headers);\n    return Boolean(isTokenRevocationHeaderPresent);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AuthErrorInterceptor } from './auth-error.interceptor';\nimport { ClientTokenInterceptor } from './client-token.interceptor';\nimport { UserTokenInterceptor } from './user-token.interceptor';\nimport { TokenRevocationInterceptor } from './token-revocation.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: ClientTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: UserTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AuthErrorInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: TokenRevocationInterceptor,\n    multi: true,\n  },\n];\n","import { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\nexport enum StorageSyncType {\r\n  NO_STORAGE = 'NO_STORAGE',\r\n  LOCAL_STORAGE = 'LOCAL_STORAGE',\r\n  SESSION_STORAGE = 'SESSION_STORAGE',\r\n}\r\n\r\nexport enum StateTransferType {\r\n  TRANSFER_STATE = 'SSR',\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class StateConfig {\r\n  state?: {\r\n    storageSync?: {\r\n      /**\r\n       * A key name for the data stored in `localStorage`.\r\n       * Default is `DEFAULT_LOCAL_STORAGE_KEY`.\r\n       */\r\n      localStorageKeyName?: string;\r\n      /**\r\n       * A key name for the data stored in `sessionStorage`.\r\n       * Default is `DEFAULT_SESSION_STORAGE_KEY`.\r\n       */\r\n      sessionStorageKeyName?: string;\r\n      /**\r\n       * A set of state keys that should be synced with the specified browser's storage.\r\n       */\r\n      keys?: {\r\n        [key: string]: StorageSyncType;\r\n      };\r\n      /**\r\n       * A set of keys not to sync with the specified browser's storage.\r\n       */\r\n      excludeKeys?: {\r\n        [key: string]: StorageSyncType;\r\n      };\r\n    };\r\n    ssrTransfer?: {\r\n      keys?: {\r\n        /**\r\n         * A set of state keys that should be transferred from server.\r\n         */\r\n        [key: string]: StateTransferType;\r\n      };\r\n    };\r\n  };\r\n}\r\n","import { StateConfig } from './state-config';\n\nexport const DEFAULT_LOCAL_STORAGE_KEY = 'spartacus-local-data';\nexport const DEFAULT_SESSION_STORAGE_KEY = 'spartacus-session-data';\n\nexport const defaultStateConfig: StateConfig = {\n  state: {\n    storageSync: {\n      localStorageKeyName: DEFAULT_LOCAL_STORAGE_KEY,\n      sessionStorageKeyName: DEFAULT_SESSION_STORAGE_KEY,\n      keys: {},\n      excludeKeys: {},\n    },\n  },\n};\n","import { Action, ActionReducer, INIT, MetaReducer, UPDATE } from '@ngrx/store';\r\nimport { deepMerge } from '../../config/utils/deep-merge';\r\nimport { WindowRef } from '../../window/window-ref';\r\nimport { StateConfig, StorageSyncType } from '../config/state-config';\r\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\r\n\r\nexport function getStorageSyncReducer<T>(\r\n  winRef: WindowRef,\r\n  config?: StateConfig\r\n): MetaReducer<T, Action> {\r\n  if (\r\n    !winRef.nativeWindow ||\r\n    !config ||\r\n    !config.state ||\r\n    !config.state.storageSync ||\r\n    !config.state.storageSync.keys\r\n  ) {\r\n    return (reducer) => reducer;\r\n  }\r\n\r\n  const storageSyncConfig = config.state.storageSync;\r\n\r\n  return (reducer: ActionReducer<T, Action>): ActionReducer<T, Action> => {\r\n    return (state, action): T => {\r\n      const newState = reducer(state, action);\r\n\r\n      if (action.type === INIT || action.type === UPDATE) {\r\n        const rehydratedState = rehydrate(config, winRef);\r\n        return deepMerge({}, newState, rehydratedState);\r\n      }\r\n\r\n      if (action.type !== INIT) {\r\n        // handle local storage\r\n        const localStorageKeys = filterKeysByType(\r\n          storageSyncConfig.keys,\r\n          StorageSyncType.LOCAL_STORAGE\r\n        );\r\n        const localStorageExclusionKeys = filterKeysByType(\r\n          storageSyncConfig.excludeKeys,\r\n          StorageSyncType.LOCAL_STORAGE\r\n        );\r\n        const localStorageStateSlices = getStateSlice(\r\n          localStorageKeys,\r\n          localStorageExclusionKeys,\r\n          newState\r\n        );\r\n        persistToStorage(\r\n          config.state.storageSync.localStorageKeyName,\r\n          localStorageStateSlices,\r\n          winRef.localStorage\r\n        );\r\n\r\n        // handle session storage\r\n        const sessionStorageKeys = filterKeysByType(\r\n          storageSyncConfig.keys,\r\n          StorageSyncType.SESSION_STORAGE\r\n        );\r\n        const sessionStorageExclusionKeys = filterKeysByType(\r\n          storageSyncConfig.excludeKeys,\r\n          StorageSyncType.SESSION_STORAGE\r\n        );\r\n        const sessionStorageStateSlices = getStateSlice(\r\n          sessionStorageKeys,\r\n          sessionStorageExclusionKeys,\r\n          newState\r\n        );\r\n        persistToStorage(\r\n          config.state.storageSync.sessionStorageKeyName,\r\n          sessionStorageStateSlices,\r\n          winRef.sessionStorage\r\n        );\r\n      }\r\n\r\n      return newState;\r\n    };\r\n  };\r\n}\r\n\r\nexport function rehydrate<T>(config: StateConfig, winRef: WindowRef): T {\r\n  const localStorageValue = readFromStorage(\r\n    winRef.localStorage,\r\n    config.state.storageSync.localStorageKeyName\r\n  );\r\n  const sessionStorageValue = readFromStorage(\r\n    winRef.sessionStorage,\r\n    config.state.storageSync.sessionStorageKeyName\r\n  );\r\n\r\n  return deepMerge(localStorageValue, sessionStorageValue);\r\n}\r\n\r\nexport function exists(value: Object): boolean {\r\n  if (value != null) {\r\n    if (typeof value === 'object') {\r\n      return Object.keys(value).length !== 0;\r\n    }\r\n    return value !== '';\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function getStorage(\r\n  storageType: StorageSyncType,\r\n  winRef: WindowRef\r\n): Storage {\r\n  let storage: Storage;\r\n\r\n  switch (storageType) {\r\n    case StorageSyncType.LOCAL_STORAGE: {\r\n      storage = winRef.localStorage;\r\n      break;\r\n    }\r\n    case StorageSyncType.SESSION_STORAGE: {\r\n      storage = winRef.sessionStorage;\r\n      break;\r\n    }\r\n    case StorageSyncType.NO_STORAGE: {\r\n      storage = undefined;\r\n      break;\r\n    }\r\n\r\n    default: {\r\n      storage = winRef.sessionStorage;\r\n    }\r\n  }\r\n\r\n  return storage;\r\n}\r\n\r\nexport function persistToStorage(\r\n  configKey: string,\r\n  value: any,\r\n  storage: Storage\r\n): void {\r\n  if (!isSsr(storage) && value) {\r\n    storage.setItem(configKey, JSON.stringify(value));\r\n  }\r\n}\r\n\r\nexport function readFromStorage(storage: Storage, key: string): any {\r\n  if (isSsr(storage)) {\r\n    return;\r\n  }\r\n\r\n  const storageValue = storage.getItem(key);\r\n  if (!storageValue) {\r\n    return;\r\n  }\r\n\r\n  return JSON.parse(storageValue);\r\n}\r\n\r\nexport function isSsr(storage: Storage): boolean {\r\n  return !Boolean(storage);\r\n}\r\n","import { isPlatformBrowser, isPlatformServer } from '@angular/common';\r\nimport {\r\n  makeStateKey,\r\n  StateKey,\r\n  TransferState,\r\n} from '@angular/platform-browser';\r\nimport { INIT } from '@ngrx/store';\r\nimport { AUTH_FEATURE, StateWithAuth } from '../../auth/store/auth-state';\r\nimport { deepMerge } from '../../config/utils/deep-merge';\r\nimport { StateConfig, StateTransferType } from '../config/state-config';\r\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\r\n\r\nexport const CX_KEY: StateKey<string> = makeStateKey<string>('cx-state');\r\n\r\nexport function getTransferStateReducer(\r\n  platformId,\r\n  transferState?: TransferState,\r\n  config?: StateConfig\r\n) {\r\n  if (\r\n    transferState &&\r\n    config &&\r\n    config.state &&\r\n    config.state.ssrTransfer &&\r\n    config.state.ssrTransfer.keys\r\n  ) {\r\n    if (isPlatformBrowser(platformId)) {\r\n      return getBrowserTransferStateReducer(\r\n        transferState,\r\n        config.state.ssrTransfer.keys\r\n      );\r\n    } else if (isPlatformServer(platformId)) {\r\n      return getServerTransferStateReducer(\r\n        transferState,\r\n        config.state.ssrTransfer.keys\r\n      );\r\n    }\r\n  }\r\n\r\n  return (reducer) => reducer;\r\n}\r\n\r\nexport function getServerTransferStateReducer(\r\n  transferState: TransferState,\r\n  keys: { [key: string]: StateTransferType }\r\n) {\r\n  const transferStateKeys = filterKeysByType(\r\n    keys,\r\n    StateTransferType.TRANSFER_STATE\r\n  );\r\n\r\n  return function (reducer) {\r\n    return function (state, action: any) {\r\n      const newState = reducer(state, action);\r\n      if (newState) {\r\n        const stateSlice = getStateSlice(transferStateKeys, [], newState);\r\n        transferState.set(CX_KEY, stateSlice);\r\n      }\r\n\r\n      return newState;\r\n    };\r\n  };\r\n}\r\n\r\nexport function getBrowserTransferStateReducer(\r\n  transferState: TransferState,\r\n  keys: { [key: string]: StateTransferType }\r\n) {\r\n  const transferStateKeys = filterKeysByType(\r\n    keys,\r\n    StateTransferType.TRANSFER_STATE\r\n  );\r\n\r\n  return function (reducer) {\r\n    return function (state, action: any) {\r\n      if (action.type === INIT) {\r\n        if (!state) {\r\n          state = reducer(state, action);\r\n        }\r\n\r\n        // we should not utilize transfer state if user is logged in\r\n        const authState = (state as StateWithAuth)[AUTH_FEATURE];\r\n        const isLoggedIn =\r\n          authState && authState.userToken && authState.userToken.token;\r\n\r\n        if (!isLoggedIn && transferState.hasKey(CX_KEY)) {\r\n          const cxKey = transferState.get(CX_KEY, {});\r\n          const transferredStateSlice = getStateSlice(\r\n            transferStateKeys,\r\n            [],\r\n            cxKey\r\n          );\r\n\r\n          state = deepMerge({}, state, transferredStateSlice);\r\n        }\r\n        return state;\r\n      }\r\n      return reducer(state, action);\r\n    };\r\n  };\r\n}\r\n","import { Optional, PLATFORM_ID, Provider, InjectionToken } from '@angular/core';\nimport { TransferState } from '@angular/platform-browser';\nimport { META_REDUCERS } from '@ngrx/store';\nimport { Config } from '../../config/config.module';\nimport { WindowRef } from '../../window/window-ref';\nimport { getStorageSyncReducer } from './storage-sync.reducer';\nimport { getTransferStateReducer } from './transfer-state.reducer';\n\nexport { getStateSlice } from '../utils/get-state-slice';\nexport { getStorageSyncReducer } from './storage-sync.reducer';\nexport * from './transfer-state.reducer';\n\nexport const TRANSFER_STATE_META_REDUCER = new InjectionToken(\n  'TransferStateMetaReducer'\n);\nexport const STORAGE_SYNC_META_REDUCER = new InjectionToken(\n  'StorageSyncMetaReducer'\n);\n\nexport const stateMetaReducers: Provider[] = [\n  {\n    provide: TRANSFER_STATE_META_REDUCER,\n    useFactory: getTransferStateReducer,\n    deps: [\n      PLATFORM_ID,\n      [new Optional(), TransferState],\n      [new Optional(), Config],\n    ],\n  },\n  {\n    provide: STORAGE_SYNC_META_REDUCER,\n    useFactory: getStorageSyncReducer,\n    deps: [WindowRef, [new Optional(), Config]],\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: TRANSFER_STATE_META_REDUCER,\n    multi: true,\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: STORAGE_SYNC_META_REDUCER,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '../config/config.module';\r\nimport { defaultStateConfig } from './config/default-state-config';\r\nimport { stateMetaReducers } from './reducers/index';\r\n\r\n@NgModule({})\r\nexport class StateModule {\r\n  static forRoot(): ModuleWithProviders<StateModule> {\r\n    return {\r\n      ngModule: StateModule,\r\n      providers: [\r\n        ...stateMetaReducers,\r\n        provideDefaultConfig(defaultStateConfig),\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { isObject } from '../config/utils/deep-merge';\nimport { ErrorModel, HttpErrorModel } from '../model/misc.model';\n\nexport const UNKNOWN_ERROR = {\n  error: 'unknown error',\n};\n\nconst circularReplacer = () => {\n  const seen = new WeakSet();\n  return (_key: any, value: any) => {\n    if (typeof value === 'object' && value !== null) {\n      if (seen.has(value)) {\n        return;\n      }\n      seen.add(value);\n    }\n    return value;\n  };\n};\n\nexport function makeErrorSerializable(\n  error: HttpErrorResponse | ErrorModel | any\n): HttpErrorModel | Error | any {\n  if (error instanceof Error) {\n    return {\n      message: error.message,\n      type: error.name,\n      reason: error.stack,\n    } as ErrorModel;\n  }\n\n  if (error instanceof HttpErrorResponse) {\n    let serializableError = error.error;\n    if (isObject(error.error)) {\n      serializableError = JSON.stringify(error.error, circularReplacer());\n    }\n\n    return {\n      message: error.message,\n      error: serializableError,\n      status: error.status,\n      statusText: error.statusText,\n      url: error.url,\n    } as HttpErrorModel;\n  }\n\n  return isObject(error) ? UNKNOWN_ERROR : error;\n}\n","import { OccConfig } from '../../occ/config/occ-config';\r\nimport { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class AuthConfig extends OccConfig {\r\n  authentication?: {\r\n    client_id?: string;\r\n    client_secret?: string;\r\n  };\r\n}\r\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\r\nimport { AuthConfig } from '../../config/auth-config';\r\nimport { ClientToken } from '../../models/token-types.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ClientAuthenticationTokenService {\r\n  constructor(\r\n    protected config: AuthConfig,\r\n    protected http: HttpClient,\r\n    protected occEndpointsService: OccEndpointsService\r\n  ) {}\r\n\r\n  loadClientAuthenticationToken(): Observable<ClientToken> {\r\n    const url: string = this.occEndpointsService.getRawEndpoint('login');\r\n    const params = new HttpParams()\r\n      .set(\r\n        'client_id',\r\n        encodeURIComponent(this.config.authentication.client_id)\r\n      )\r\n      .set(\r\n        'client_secret',\r\n        encodeURIComponent(this.config.authentication.client_secret)\r\n      )\r\n      .set('grant_type', 'client_credentials');\r\n\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n    return this.http.post<ClientToken>(url, params, { headers });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { ClientToken } from '../../models/token-types.model';\r\nimport { ClientAuthenticationTokenService } from '../../services/client-authentication/client-authentication-token.service';\r\nimport { AuthActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class ClientTokenEffect {\r\n  @Effect()\r\n  loadClientToken$: Observable<\r\n    AuthActions.ClientTokenAction\r\n  > = this.actions$.pipe(\r\n    ofType(AuthActions.LOAD_CLIENT_TOKEN),\r\n    exhaustMap(() => {\r\n      return this.clientAuthenticationTokenService\r\n        .loadClientAuthenticationToken()\r\n        .pipe(\r\n          map((token: ClientToken) => {\r\n            return new AuthActions.LoadClientTokenSuccess(token);\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new AuthActions.LoadClientTokenFail(makeErrorSerializable(error))\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private clientAuthenticationTokenService: ClientAuthenticationTokenService\r\n  ) {}\r\n}\r\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\r\nimport {\r\n  InterceptorUtil,\r\n  TOKEN_REVOCATION_HEADER,\r\n} from '../../../occ/utils/interceptor-util';\r\nimport { AuthConfig } from '../../config/auth-config';\r\nimport { UserToken } from '../../models/token-types.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserAuthenticationTokenService {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected config: AuthConfig,\r\n    protected occEndpointsService: OccEndpointsService\r\n  ) {}\r\n\r\n  loadToken(userId: string, password: string): Observable<UserToken> {\r\n    const url = this.occEndpointsService.getRawEndpoint('login');\r\n    const params = new HttpParams()\r\n      .set('client_id', this.config.authentication.client_id)\r\n      .set('client_secret', this.config.authentication.client_secret)\r\n      .set('grant_type', 'password')\r\n      .set('username', userId)\r\n      .set('password', password);\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n\r\n    return this.http\r\n      .post<UserToken>(url, params, { headers })\r\n      .pipe(catchError((error: any) => throwError(error)));\r\n  }\r\n\r\n  refreshToken(refreshToken: string): Observable<UserToken> {\r\n    const url = this.occEndpointsService.getRawEndpoint('login');\r\n    const params = new HttpParams()\r\n      .set(\r\n        'client_id',\r\n        encodeURIComponent(this.config.authentication.client_id)\r\n      )\r\n      .set(\r\n        'client_secret',\r\n        encodeURIComponent(this.config.authentication.client_secret)\r\n      )\r\n      .set('refresh_token', encodeURI(refreshToken))\r\n      .set('grant_type', 'refresh_token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n\r\n    return this.http\r\n      .post<UserToken>(url, params, { headers })\r\n      .pipe(catchError((error: any) => throwError(error)));\r\n  }\r\n\r\n  revoke(userToken: UserToken): Observable<{}> {\r\n    const url = this.occEndpointsService.getRawEndpoint('revoke');\r\n    const headers = InterceptorUtil.createHeader(\r\n      TOKEN_REVOCATION_HEADER,\r\n      true,\r\n      new HttpHeaders({\r\n        Authorization: `${userToken.token_type} ${userToken.access_token}`,\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n      })\r\n    );\r\n    const params = new HttpParams().set('token', userToken.access_token);\r\n    return this.http\r\n      .post<{}>(url, params, { headers })\r\n      .pipe(catchError((error: any) => throwError(error)));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, exhaustMap, map, mergeMap } from 'rxjs/operators';\r\nimport { OCC_USER_ID_CURRENT } from '../../../occ/utils/occ-constants';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserToken } from '../../models/token-types.model';\r\nimport { UserAuthenticationTokenService } from '../../services/user-authentication/user-authentication-token.service';\r\nimport { AuthActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class UserTokenEffects {\r\n  @Effect()\r\n  loadUserToken$: Observable<AuthActions.UserTokenAction> = this.actions$.pipe(\r\n    ofType(AuthActions.LOAD_USER_TOKEN),\r\n    map((action: AuthActions.LoadUserToken) => action.payload),\r\n    mergeMap(({ userId, password }) =>\r\n      this.userTokenService.loadToken(userId, password).pipe(\r\n        map((token: UserToken) => {\r\n          const date = new Date();\r\n          date.setSeconds(date.getSeconds() + token.expires_in);\r\n          token.expiration_time = date.toJSON();\r\n          token.userId = OCC_USER_ID_CURRENT;\r\n          return new AuthActions.LoadUserTokenSuccess(token);\r\n        }),\r\n        catchError((error) =>\r\n          of(new AuthActions.LoadUserTokenFail(makeErrorSerializable(error)))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  login$: Observable<AuthActions.Login> = this.actions$.pipe(\r\n    ofType(AuthActions.LOAD_USER_TOKEN_SUCCESS),\r\n    map(() => new AuthActions.Login())\r\n  );\r\n\r\n  @Effect()\r\n  refreshUserToken$: Observable<\r\n    AuthActions.UserTokenAction\r\n  > = this.actions$.pipe(\r\n    ofType(AuthActions.REFRESH_USER_TOKEN),\r\n    map((action: AuthActions.RefreshUserToken) => action.payload),\r\n    exhaustMap(({ refreshToken }) => {\r\n      return this.userTokenService.refreshToken(refreshToken).pipe(\r\n        map(\r\n          (token: UserToken) => {\r\n            const date = new Date();\r\n            date.setSeconds(date.getSeconds() + token.expires_in);\r\n            token.expiration_time = date.toJSON();\r\n            return new AuthActions.RefreshUserTokenSuccess(token);\r\n          },\r\n          catchError((error) =>\r\n            of(\r\n              new AuthActions.RefreshUserTokenFail(makeErrorSerializable(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  revokeUserToken$: Observable<\r\n    AuthActions.UserTokenAction\r\n  > = this.actions$.pipe(\r\n    ofType(AuthActions.REVOKE_USER_TOKEN),\r\n    map((action: AuthActions.RevokeUserToken) => {\r\n      return action.payload;\r\n    }),\r\n    mergeMap((userToken: UserToken) => {\r\n      return this.userTokenService.revoke(userToken).pipe(\r\n        map(() => new AuthActions.RevokeUserTokenSuccess(userToken)),\r\n        catchError((error) => of(new AuthActions.RevokeUserTokenFail(error)))\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userTokenService: UserAuthenticationTokenService\r\n  ) {}\r\n}\r\n","import { ClientTokenEffect } from './client-token.effect';\nimport { UserTokenEffects } from './user-token.effect';\n\nexport const effects: any[] = [UserTokenEffects, ClientTokenEffect];\n\nexport * from './client-token.effect';\nexport * from './user-token.effect';\n","import * as fromUpdateEmailAction from '../../../user/store/actions/update-email.action';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\n\nexport const initialState: UserToken = <UserToken>{};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | AuthActions.UserTokenAction\n    | fromUpdateEmailAction.UpdateEmailSuccessAction\n): UserToken {\n  switch (action.type) {\n    case AuthActions.LOAD_USER_TOKEN:\n    case AuthActions.REFRESH_USER_TOKEN: {\n      return {\n        ...state,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_SUCCESS:\n    case AuthActions.REFRESH_USER_TOKEN_SUCCESS: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_FAIL:\n    case AuthActions.REFRESH_USER_TOKEN_FAIL: {\n      return {\n        ...state,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\r\nimport {\r\n  Action,\r\n  ActionReducer,\r\n  ActionReducerMap,\r\n  combineReducers,\r\n  MetaReducer,\r\n} from '@ngrx/store';\r\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\r\nimport { ClientToken } from '../../models/token-types.model';\r\nimport { AuthActions } from '../actions/index';\r\nimport { AuthState, CLIENT_TOKEN_DATA } from '../auth-state';\r\nimport * as fromUserTokenReducer from './user-token.reducer';\r\n\r\nexport function getReducers(): ActionReducerMap<AuthState> {\r\n  return {\r\n    userToken: combineReducers({ token: fromUserTokenReducer.reducer }),\r\n    clientToken: loaderReducer<ClientToken>(CLIENT_TOKEN_DATA),\r\n  };\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducerMap<\r\n  AuthState\r\n>> = new InjectionToken<ActionReducerMap<AuthState>>('AuthReducers');\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n\r\nexport function clearAuthState(\r\n  reducer: ActionReducer<AuthState, Action>\r\n): ActionReducer<AuthState, Action> {\r\n  return function (state, action) {\r\n    if (action.type === AuthActions.LOGOUT) {\r\n      state = {\r\n        ...state,\r\n        userToken: undefined,\r\n      };\r\n    }\r\n    return reducer(state, action);\r\n  };\r\n}\r\n\r\nexport const metaReducers: MetaReducer<any>[] = [clearAuthState];\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { provideDefaultConfigFactory } from '../../config/config.module';\r\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\r\nimport { StateModule } from '../../state/state.module';\r\nimport { AUTH_FEATURE } from './auth-state';\r\nimport { effects } from './effects/index';\r\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\r\n\r\nexport function authStoreConfigFactory(): StateConfig {\r\n  // if we want to reuse AUTH_FEATURE const in config, we have to use factory instead of plain object\r\n  const config: StateConfig = {\r\n    state: {\r\n      storageSync: {\r\n        keys: {\r\n          'auth.userToken.token.access_token': StorageSyncType.LOCAL_STORAGE,\r\n          'auth.userToken.token.token_type': StorageSyncType.LOCAL_STORAGE,\r\n          'auth.userToken.token.expires_in': StorageSyncType.LOCAL_STORAGE,\r\n          'auth.userToken.token.expiration_time': StorageSyncType.LOCAL_STORAGE,\r\n          'auth.userToken.token.scope': StorageSyncType.LOCAL_STORAGE,\r\n          'auth.userToken.token.userId': StorageSyncType.LOCAL_STORAGE,\r\n        },\r\n      },\r\n    },\r\n  };\r\n  return config;\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    StateModule,\r\n    StoreModule.forFeature(AUTH_FEATURE, reducerToken, { metaReducers }),\r\n    EffectsModule.forFeature(effects),\r\n  ],\r\n  providers: [\r\n    provideDefaultConfigFactory(authStoreConfigFactory),\r\n    reducerProvider,\r\n  ],\r\n})\r\nexport class AuthStoreModule {}\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '../config/config.module';\r\nimport { defaultAuthConfig } from './config/default-auth-config';\r\nimport { interceptors } from './http-interceptors/index';\r\nimport { AuthStoreModule } from './store/auth-store.module';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, HttpClientModule, AuthStoreModule],\r\n})\r\nexport class AuthModule {\r\n  static forRoot(): ModuleWithProviders<AuthModule> {\r\n    return {\r\n      ngModule: AuthModule,\r\n      providers: [provideDefaultConfig(defaultAuthConfig), ...interceptors],\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { RoutingService } from '../../routing/facade/routing.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthRedirectService {\n  /**\n   * This service is responsible for redirecting to the last page before authorization. \"The last page\" can be:\n   * 1. Just the previously opened page; or\n   * 2. The page that we just tried to open, but AuthGuard cancelled it\n   *\n   * For example:\n   * 1. The user opens the product page, then clicks /login link and signs in\n   *    -> Then we should redirect to the product page; or\n   * 2. The user opens the product page, then he clicks /my-account link,\n   *    but is automatically redirected to the login page by the AuthGuard, and he signs in\n   *    -> Then we should redirect to the my-account page, not the product page\n   */\n  constructor(private routing: RoutingService, private router: Router) {}\n\n  private redirectUrl: string;\n  private ignoredUrls = new Set<string>();\n  private lastAuthGuardNavigation: {\n    url: string;\n    navigationId: number;\n  };\n\n  redirect() {\n    if (this.redirectUrl === undefined) {\n      this.routing.go('/');\n    } else {\n      this.routing.goByUrl(this.redirectUrl);\n    }\n    this.redirectUrl = undefined;\n    this.lastAuthGuardNavigation = undefined;\n  }\n\n  reportAuthGuard() {\n    const { url, navigationId } = this.getCurrentNavigation();\n    this.lastAuthGuardNavigation = { url, navigationId };\n    this.redirectUrl = url;\n  }\n\n  reportNotAuthGuard() {\n    const { url, initialUrl, navigationId } = this.getCurrentNavigation();\n\n    this.ignoredUrls.add(url);\n\n    // Don't save redirect url if you've already come from page with NotAuthGuard (i.e. user has come from login to register)\n    if (!this.ignoredUrls.has(initialUrl)) {\n      // We compare the navigation id to find out if the url cancelled by AuthGuard (i.e. my-account) is more recent\n      // than the last opened page\n      if (\n        !this.lastAuthGuardNavigation ||\n        this.lastAuthGuardNavigation.navigationId < navigationId - 1\n      ) {\n        this.redirectUrl = initialUrl;\n        this.lastAuthGuardNavigation = undefined;\n      }\n    }\n  }\n\n  private getCurrentNavigation(): {\n    navigationId: number;\n    url: string;\n    initialUrl: string;\n  } {\n    const initialUrl = this.router.url;\n    const navigation = this.router.getCurrentNavigation();\n    const url = this.router.serializeUrl(navigation.finalUrl);\n    return {\n      navigationId: navigation.id,\n      url,\n      initialUrl,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { UserToken } from '../models/token-types.model';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected router: Router\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token: UserToken) => {\n        if (!token.access_token) {\n          this.authRedirectService.reportAuthGuard();\n          this.routingService.go({ cxRoute: 'login' });\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { RoutingService } from '../../routing/facade/routing.service';\r\nimport { AuthService } from '../facade/auth.service';\r\nimport { AuthRedirectService } from './auth-redirect.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NotAuthGuard implements CanActivate {\r\n  constructor(\r\n    protected routingService: RoutingService,\r\n    protected authService: AuthService,\r\n    private authRedirectService: AuthRedirectService\r\n  ) {}\r\n\r\n  canActivate(): Observable<boolean> {\r\n    this.authRedirectService.reportNotAuthGuard();\r\n\r\n    // redirect, if user is already logged in:\r\n    return this.authService.getUserToken().pipe(\r\n      map((token) => {\r\n        if (token.access_token) {\r\n          this.routingService.go({ cxRoute: 'home' });\r\n        }\r\n        return !token.access_token;\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { ErrorModel } from './misc.model';\n\nexport interface Country {\n  isocode?: string;\n  name?: string;\n}\n\nexport enum CountryType {\n  BILLING = 'BILLING',\n  SHIPPING = 'SHIPPING',\n}\n\nexport interface Region {\n  countryIso?: string;\n  isocode?: string;\n  isocodeShort?: string;\n  name?: string;\n}\n\nexport interface Address {\n  companyName?: string;\n  country?: Country;\n  defaultAddress?: boolean;\n  email?: string;\n  firstName?: string;\n  formattedAddress?: string;\n  id?: string;\n  lastName?: string;\n  line1?: string;\n  line2?: string;\n  phone?: string;\n  postalCode?: string;\n  region?: Region;\n  shippingAddress?: boolean;\n  title?: string;\n  titleCode?: string;\n  town?: string;\n  visibleInAddressBook?: boolean;\n}\n\nexport interface AddressValidation {\n  decision?: string;\n  // TODO: Simplify with converter\n  errors?: { errors: ErrorModel[] };\n  suggestedAddresses?: Address[];\n}\n","import { Address } from './address.model';\nimport { Currency } from './misc.model';\nimport {\n  DeliveryMode,\n  OrderEntry,\n  PickupOrderEntryGroup,\n  PromotionOrderEntryConsumed,\n} from './order.model';\nimport { Price, Promotion } from './product.model';\n\nexport interface PromotionResult {\n  consumedEntries?: PromotionOrderEntryConsumed[];\n  description?: string;\n  promotion?: Promotion;\n}\n\nexport enum PromotionLocation {\n  ActiveCart = 'CART',\n  Checkout = 'CHECKOUT',\n  Order = 'ORDER',\n}\n\nexport interface Voucher {\n  appliedValue?: Price;\n  code?: string;\n  currency?: Currency;\n  description?: string;\n  freeShipping?: boolean;\n  name?: string;\n  value?: number;\n  valueFormatted?: string;\n  valueString?: string;\n  voucherCode?: string;\n}\n\nexport interface DeliveryOrderEntryGroup {\n  deliveryAddress?: Address;\n  entries?: OrderEntry[];\n  quantity?: number;\n  totalPriceWithTax?: Price;\n}\n\nexport interface Principal {\n  name?: string;\n  uid?: string;\n}\n\nexport interface CardType {\n  code?: string;\n  name?: string;\n}\n\nexport interface PaymentDetails {\n  accountHolderName?: string;\n  billingAddress?: Address;\n  cardNumber?: string;\n  cardType?: CardType;\n  cvn?: string;\n  defaultPayment?: boolean;\n  expiryMonth?: string;\n  expiryYear?: string;\n  id?: string;\n  issueNumber?: string;\n  saved?: boolean;\n  startMonth?: string;\n  startYear?: string;\n  subscriptionId?: string;\n}\n\nexport interface SaveCartResult {\n  savedCartData?: Cart;\n}\n\nexport interface Cart {\n  appliedOrderPromotions?: PromotionResult[];\n  appliedProductPromotions?: PromotionResult[];\n  appliedVouchers?: Voucher[];\n  calculated?: boolean;\n  code?: string;\n  deliveryAddress?: Address;\n  deliveryCost?: Price;\n  deliveryItemsQuantity?: number;\n  deliveryMode?: DeliveryMode;\n  deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n  description?: string;\n  entries?: OrderEntry[];\n  expirationTime?: Date;\n  guid?: string;\n  name?: string;\n  net?: boolean;\n  orderDiscounts?: Price;\n  paymentInfo?: PaymentDetails;\n  pickupItemsQuantity?: number;\n  pickupOrderGroups?: PickupOrderEntryGroup[];\n  potentialOrderPromotions?: PromotionResult[];\n  potentialProductPromotions?: PromotionResult[];\n  productDiscounts?: Price;\n  saveTime?: Date;\n  savedBy?: Principal;\n  site?: string;\n  store?: string;\n  subTotal?: Price;\n  totalDiscounts?: Price;\n  totalItems?: number;\n  totalPrice?: Price;\n  totalPriceWithTax?: Price;\n  totalTax?: Price;\n  totalUnitCount?: number;\n  user?: Principal;\n}\n\nexport interface CartModification {\n  deliveryModeChanged?: boolean;\n  entry?: OrderEntry;\n  quantity?: number;\n  quantityAdded?: number;\n  statusCode?: string;\n  statusMessage?: string;\n}\n","export interface CmsComponent {\n  modifiedTime?: Date;\n  name?: string;\n  otherProperties?: any;\n  typeCode?: string;\n  uid?: string;\n}\n\nexport enum PageType {\n  CONTENT_PAGE = 'ContentPage',\n  PRODUCT_PAGE = 'ProductPage',\n  CATEGORY_PAGE = 'CategoryPage',\n  CATALOG_PAGE = 'CatalogPage',\n}\n\nexport interface CmsLinkComponent extends CmsComponent {\n  url?: string;\n  container?: boolean;\n  external?: boolean;\n  contentPage?: string;\n  contentPageLabelOrId?: string;\n  linkName?: string;\n  target?: boolean;\n}\n\nexport interface CmsSiteContextSelectorComponent extends CmsComponent {\n  context?: string;\n}\n\nexport interface CmsSearchBoxComponent extends CmsComponent {\n  container?: boolean;\n  maxSuggestions?: number;\n  maxProducts?: number;\n  displaySuggestions?: boolean;\n  displayProducts?: boolean;\n  displayProductImages?: boolean;\n  waitTimeBeforeRequest?: number;\n  minCharactersBeforeRequest?: number;\n}\n\nexport interface CmsParagraphComponent extends CmsComponent {\n  content?: string;\n  container?: string;\n  title?: string;\n}\n\nexport interface CMSTabParagraphContainer extends CmsComponent {\n  container?: string;\n  components?: string;\n}\n\nexport interface CmsBannerComponentMedia {\n  altText?: string;\n  code?: string;\n  mime?: string;\n  url?: string;\n}\n\nexport interface CmsResponsiveBannerComponentMedia {\n  desktop?: CmsBannerComponentMedia;\n  mobile?: CmsBannerComponentMedia;\n  tablet?: CmsBannerComponentMedia;\n  widescreen?: CmsBannerComponentMedia;\n}\n\nexport interface CmsBannerComponent extends CmsComponent {\n  headline?: string;\n  content?: string;\n  container?: string;\n  media?: CmsBannerComponentMedia | CmsResponsiveBannerComponentMedia;\n  urlLink?: string;\n  external?: string;\n}\n\nexport enum CmsBannerCarouselEffect {\n  FADE = 'FADE',\n  ZOOM = 'ZOOM',\n  CURTAIN = 'CURTAINX',\n  TURNDOWN = 'TURNDOWN',\n}\n\nexport interface CmsBannerCarouselComponent extends CmsComponent {\n  banners?: string;\n  effect?: CmsBannerCarouselEffect;\n}\n\nexport interface CmsProductCarouselComponent extends CmsComponent {\n  title?: string;\n  productCodes?: string;\n  container?: string;\n  popup?: string;\n  scroll?: string;\n}\n\nexport interface CmsProductReferencesComponent extends CmsComponent {\n  title?: string;\n  displayProductTitles?: string;\n  displayProductPrices?: string;\n  maximumNumberProducts?: number;\n  productReferenceTypes?: string;\n  container?: string;\n}\n\nexport interface CmsMiniCartComponent extends CmsComponent {\n  container?: string;\n  shownProductCount?: string;\n  title?: string;\n  totalDisplay?: string;\n  lightboxBannerComponent?: CmsBannerComponent;\n}\n\n// TODO: Upgrade model when Breadcrumbs will be finally used in project\nexport interface CmsBreadcrumbsComponent extends CmsComponent {\n  container?: string;\n}\n\nexport interface CmsNavigationNode {\n  uid?: string;\n  title?: string;\n  children?: Array<CmsNavigationNode>;\n  entries?: Array<CmsNavigationEntry>;\n}\n\nexport interface CmsNavigationEntry {\n  itemId?: string;\n  itemSuperType?: string;\n  itemType?: string;\n}\n\nexport interface CmsNavigationComponent extends CmsComponent {\n  container?: string;\n  styleClass?: string;\n  wrapAfter?: string;\n  notice?: string;\n  showLanguageCurrency?: string;\n  navigationNode?: CmsNavigationNode;\n}\n\nexport interface CmsProductFacetNavigationComponent extends CmsComponent {\n  container?: string;\n  activeFacetValueCode?: string;\n  searchResult?: string;\n  minPerFacet?: string;\n}\n","export interface ConsentTemplate {\n  id?: string;\n  name?: string;\n  description?: string;\n  version?: number;\n  currentConsent?: Consent;\n}\n\nexport interface Consent {\n  code?: string;\n  consentGivenDate?: Date;\n  consentWithdrawnDate?: Date;\n}\n\nexport interface AnonymousConsent {\n  templateCode?: string;\n  version?: number;\n  consentState?: ANONYMOUS_CONSENT_STATUS;\n}\n\nexport enum ANONYMOUS_CONSENT_STATUS {\n  GIVEN = 'GIVEN',\n  WITHDRAWN = 'WITHDRAWN',\n}\n","export interface Images {\n  [imageType: string]: ImageGroup | ImageGroup[];\n}\n\nexport interface Image {\n  altText?: string;\n  format?: string;\n  galleryIndex?: number;\n  imageType?: ImageType;\n  url?: string;\n}\n\nexport enum ImageType {\n  PRIMARY = 'PRIMARY',\n  GALLERY = 'GALLERY',\n}\n\nexport interface ImageGroup {\n  [format: string]: Image;\n}\n","import { Image, Images } from './image.model';\nimport { User } from './misc.model';\n\nexport interface VariantOptionQualifier {\n  image?: Image;\n  name?: string;\n  qualifier?: VariantQualifier;\n  value?: string;\n}\n\nexport interface PromotionRestriction {\n  description?: string;\n  restrictionType?: string;\n}\n\nexport interface FeatureUnit {\n  name?: string;\n  symbol?: string;\n  unitType?: string;\n}\n\nexport interface FeatureValue {\n  value?: string;\n}\n\nexport interface Feature {\n  code?: string;\n  comparable?: boolean;\n  description?: string;\n  featureUnit?: FeatureUnit;\n  featureValues?: FeatureValue[];\n  name?: string;\n  range?: boolean;\n  type?: string;\n}\n\nexport interface VariantCategory {\n  hasImage?: boolean;\n  name?: string;\n  priority?: number;\n}\n\nexport interface VariantValueCategory {\n  name?: string;\n  sequence?: number;\n  superCategories?: VariantCategory[];\n}\n\nexport enum VariantType {\n  SIZE = 'ApparelSizeVariantProduct',\n  STYLE = 'ApparelStyleVariantProduct',\n  COLOR = 'ElectronicsColorVariantProduct',\n}\n\nexport enum PriceType {\n  BUY = 'BUY',\n  FROM = 'FROM',\n}\n\nexport interface Price {\n  currencyIso?: string;\n  formattedValue?: string;\n  maxQuantity?: number;\n  minQuantity?: number;\n  priceType?: PriceType;\n  value?: number;\n}\n\nexport interface Stock {\n  stockLevel?: number;\n  stockLevelStatus?: string;\n}\n\nexport interface VariantOption {\n  code?: string;\n  priceData?: Price;\n  stock?: Stock;\n  url?: string;\n  variantOptionQualifiers?: VariantOptionQualifier[];\n}\n\nexport interface Promotion {\n  code?: string;\n  couldFireMessages?: string[];\n  description?: string;\n  enabled?: boolean;\n  endDate?: Date;\n  firedMessages?: string[];\n  priority?: number;\n  productBanner?: Image;\n  promotionGroup?: string;\n  promotionType?: string;\n  restrictions?: PromotionRestriction[];\n  startDate?: Date;\n  title?: string;\n}\n\nexport interface Category {\n  code?: string;\n  name?: string;\n  image?: Image;\n  url?: string;\n}\n\nexport interface Classification {\n  code?: string;\n  features?: Feature[];\n  name?: string;\n}\n\nexport interface FutureStock {\n  date?: Date;\n  formattedDate?: string;\n  stock?: Stock;\n}\n\nexport interface PriceRange {\n  maxPrice?: Price;\n  minPrice?: Price;\n}\n\nexport interface ProductReference {\n  description?: string;\n  preselected?: boolean;\n  quantity?: number;\n  referenceType?: string;\n  target?: Product;\n}\n\nexport interface Review {\n  alias?: string;\n  comment?: string;\n  date?: Date;\n  headline?: string;\n  id?: string;\n  principal?: User;\n  rating?: number;\n}\n\nexport interface VariantMatrixElement {\n  elements?: VariantMatrixElement[];\n  isLeaf?: boolean;\n  parentVariantCategory?: VariantCategory;\n  variantOption?: VariantOption;\n  variantValueCategory?: VariantValueCategory;\n}\n\nexport interface ProductReferences {\n  [referenceType: string]: ProductReference[];\n}\n\nexport interface BaseOption {\n  options?: VariantOption[];\n  selected?: VariantOption;\n  variantType?: VariantType;\n}\n\nexport interface Product {\n  availableForPickup?: boolean;\n  averageRating?: number;\n  baseOptions?: BaseOption[];\n  baseProduct?: string;\n  categories?: Category[];\n  classifications?: Classification[];\n  code?: string;\n  description?: string;\n  futureStocks?: FutureStock[];\n  images?: Images;\n  manufacturer?: string;\n  multidimensional?: boolean;\n  name?: string;\n  nameHtml?: string;\n  numberOfReviews?: number;\n  potentialPromotions?: Promotion[];\n  price?: Price;\n  priceRange?: PriceRange;\n  productReferences?: ProductReferences;\n  purchasable?: boolean;\n  reviews?: Review[];\n  stock?: Stock;\n  summary?: string;\n  url?: string;\n  variantMatrix?: VariantMatrixElement[];\n  variantOptions?: VariantOption[];\n  variantType?: VariantType;\n  volumePrices?: Price[];\n  volumePricesFlag?: boolean;\n}\n\nexport enum VariantQualifier {\n  SIZE = 'size',\n  STYLE = 'style',\n  COLOR = 'color',\n  THUMBNAIL = 'thumbnail',\n  PRODUCT = 'product',\n  ROLLUP_PROPERTY = 'rollupProperty',\n}\n","export const testestsd = 'sare';\n","import { Product } from './product.model';\nimport { Pagination, Sort } from './unused.model';\n\nexport interface ProductInterestEntry {\n  interestType?: NotificationType;\n  dateAdded?: string;\n  expirationDate?: string;\n}\n\nexport interface ProductInterestEntryRelation {\n  product?: Product;\n  productInterestEntry?: ProductInterestEntry[];\n}\n\nexport interface ProductInterestSearchResult {\n  results?: ProductInterestEntryRelation[];\n  sorts?: Sort[];\n  pagination?: Pagination;\n}\n\nexport enum NotificationType {\n  BACK_IN_STOCK = 'BACK_IN_STOCK',\n}\n","import { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\r\nimport { StateUtils } from '../../state';\r\n\r\nexport const ANONYMOUS_CONSENTS_STORE_FEATURE = 'anonymous-consents';\r\nexport const ANONYMOUS_CONSENTS = '[Anonymous Consents] Anonymous Consents';\r\n\r\nexport interface StateWithAnonymousConsents {\r\n  [ANONYMOUS_CONSENTS_STORE_FEATURE]: AnonymousConsentsState;\r\n}\r\n\r\nexport interface AnonymousConsentsState {\r\n  templates: StateUtils.LoaderState<ConsentTemplate[]>;\r\n  consents: AnonymousConsent[];\r\n  ui: {\r\n    bannerDismissed: boolean;\r\n    updated: boolean;\r\n  };\r\n}\r\n","import {\r\n  AnonymousConsent,\r\n  ConsentTemplate,\r\n} from '../../../model/consent.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { ANONYMOUS_CONSENTS } from '../anonymous-consents-state';\r\n\r\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES =\r\n  '[Anonymous Consents] Load Anonymous Consent Templates';\r\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS =\r\n  '[Anonymous Consents] Load Anonymous Consent Templates Success';\r\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL =\r\n  '[Anonymous Consents] Load Anonymous Consent Templates Fail';\r\nexport const RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES =\r\n  '[Anonymous Consents] Reset Load Anonymous Consent Templates';\r\n\r\nexport const GET_ALL_ANONYMOUS_CONSENTS =\r\n  '[Anonymous Consents] Get All Anonymous Consents';\r\nexport const GET_ANONYMOUS_CONSENT =\r\n  '[Anonymous Consents] Get Anonymous Consent';\r\nexport const SET_ANONYMOUS_CONSENTS =\r\n  '[Anonymous Consents] Set Anonymous Consents';\r\nexport const GIVE_ANONYMOUS_CONSENT =\r\n  '[Anonymous Consents] Give Anonymous Consent';\r\nexport const WITHDRAW_ANONYMOUS_CONSENT =\r\n  '[Anonymous Consents] Withdraw Anonymous Consent';\r\n\r\nexport const TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED =\r\n  '[Anonymous Consents] Toggle Anonymous Consents Banner Dismissed';\r\nexport const TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED =\r\n  '[Anonymous Consents] Anonymous Consent Templates Updated';\r\n\r\nexport class LoadAnonymousConsentTemplates extends StateUtils.LoaderLoadAction {\r\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES;\r\n  constructor() {\r\n    super(ANONYMOUS_CONSENTS);\r\n  }\r\n}\r\n\r\nexport class LoadAnonymousConsentTemplatesSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS;\r\n  constructor(public payload: ConsentTemplate[]) {\r\n    super(ANONYMOUS_CONSENTS);\r\n  }\r\n}\r\nexport class LoadAnonymousConsentTemplatesFail extends StateUtils.LoaderFailAction {\r\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL;\r\n  constructor(payload: any) {\r\n    super(ANONYMOUS_CONSENTS, payload);\r\n  }\r\n}\r\n\r\nexport class ResetLoadAnonymousConsentTemplates extends StateUtils.LoaderResetAction {\r\n  readonly type = RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES;\r\n  constructor() {\r\n    super(ANONYMOUS_CONSENTS);\r\n  }\r\n}\r\n\r\nexport class GetAllAnonymousConsents {\r\n  readonly type = GET_ALL_ANONYMOUS_CONSENTS;\r\n  constructor() {}\r\n}\r\n\r\nexport class GetAnonymousConsent {\r\n  readonly type = GET_ANONYMOUS_CONSENT;\r\n  constructor(public templateCode: string) {}\r\n}\r\n\r\nexport class SetAnonymousConsents {\r\n  readonly type = SET_ANONYMOUS_CONSENTS;\r\n  constructor(public payload: AnonymousConsent[]) {}\r\n}\r\n\r\nexport class GiveAnonymousConsent {\r\n  readonly type = GIVE_ANONYMOUS_CONSENT;\r\n  constructor(public templateCode: string) {}\r\n}\r\n\r\nexport class WithdrawAnonymousConsent {\r\n  readonly type = WITHDRAW_ANONYMOUS_CONSENT;\r\n  constructor(public templateCode: string) {}\r\n}\r\n\r\nexport class ToggleAnonymousConsentsBannerDissmissed {\r\n  readonly type = TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED;\r\n  constructor(public dismissed: boolean) {}\r\n}\r\n\r\nexport class ToggleAnonymousConsentTemplatesUpdated {\r\n  readonly type = TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED;\r\n  constructor(public updated: boolean) {}\r\n}\r\n\r\nexport type AnonymousConsentsActions =\r\n  | LoadAnonymousConsentTemplates\r\n  | LoadAnonymousConsentTemplatesSuccess\r\n  | LoadAnonymousConsentTemplatesFail\r\n  | ResetLoadAnonymousConsentTemplates\r\n  | GetAllAnonymousConsents\r\n  | SetAnonymousConsents\r\n  | GetAnonymousConsent\r\n  | GiveAnonymousConsent\r\n  | WithdrawAnonymousConsent\r\n  | ToggleAnonymousConsentsBannerDissmissed\r\n  | ToggleAnonymousConsentTemplatesUpdated;\r\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS_STORE_FEATURE,\n  StateWithAnonymousConsents,\n} from '../anonymous-consents-state';\n\nexport const getAnonymousConsentState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsentsState\n> = createFeatureSelector<AnonymousConsentsState>(\n  ANONYMOUS_CONSENTS_STORE_FEATURE\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { ConsentTemplate } from '../../../model/consent.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\r\nimport { getAnonymousConsentState } from './feature.selector';\r\n\r\nexport const getAnonymousConsentTemplatesState: MemoizedSelector<\r\n  StateWithAnonymousConsents,\r\n  LoaderState<ConsentTemplate[]>\r\n> = createSelector(getAnonymousConsentState, (state) => state.templates);\r\n\r\nexport const getAnonymousConsentTemplatesValue: MemoizedSelector<\r\n  StateWithAnonymousConsents,\r\n  ConsentTemplate[]\r\n> = createSelector(\r\n  getAnonymousConsentTemplatesState,\r\n  StateUtils.loaderValueSelector\r\n);\r\n\r\nexport const getAnonymousConsentTemplatesLoading: MemoizedSelector<\r\n  StateWithAnonymousConsents,\r\n  boolean\r\n> = createSelector(\r\n  getAnonymousConsentTemplatesState,\r\n  StateUtils.loaderLoadingSelector\r\n);\r\n\r\nexport const getAnonymousConsentTemplatesSuccess: MemoizedSelector<\r\n  StateWithAnonymousConsents,\r\n  boolean\r\n> = createSelector(\r\n  getAnonymousConsentTemplatesState,\r\n  StateUtils.loaderSuccessSelector\r\n);\r\n\r\nexport const getAnonymousConsentTemplatesError: MemoizedSelector<\r\n  StateWithAnonymousConsents,\r\n  boolean\r\n> = createSelector(\r\n  getAnonymousConsentTemplatesState,\r\n  StateUtils.loaderErrorSelector\r\n);\r\n\r\nexport const getAnonymousConsentTemplate = (\r\n  templateCode: string\r\n): MemoizedSelector<StateWithAnonymousConsents, ConsentTemplate> => {\r\n  return createSelector(getAnonymousConsentTemplatesValue, (templates) => {\r\n    return templates\r\n      ? templates.find((template) => template.id === templateCode)\r\n      : null;\r\n  });\r\n};\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\r\nimport { getAnonymousConsentState } from './feature.selector';\r\n\r\nexport const getAnonymousConsentTemplatesUpdate: MemoizedSelector<\r\n  StateWithAnonymousConsents,\r\n  boolean\r\n> = createSelector(getAnonymousConsentState, (state) => state.ui.updated);\r\n\r\nexport const getAnonymousConsentsBannerDismissed: MemoizedSelector<\r\n  StateWithAnonymousConsents,\r\n  boolean\r\n> = createSelector(\r\n  getAnonymousConsentState,\r\n  (state) => state.ui.bannerDismissed\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { AnonymousConsent } from '../../../model/consent.model';\r\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\r\nimport { getAnonymousConsentState } from './feature.selector';\r\n\r\nexport const getAnonymousConsents: MemoizedSelector<\r\n  StateWithAnonymousConsents,\r\n  AnonymousConsent[]\r\n> = createSelector(getAnonymousConsentState, (state) => state.consents);\r\n\r\nexport const getAnonymousConsentByTemplateCode = (\r\n  templateCode: string\r\n): MemoizedSelector<StateWithAnonymousConsents, AnonymousConsent> =>\r\n  createSelector(getAnonymousConsents, (consents) =>\r\n    consents.find((consent) => consent.templateCode === templateCode)\r\n  );\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { combineLatest, iif, Observable } from 'rxjs';\r\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/index';\r\nimport {\r\n  AnonymousConsent,\r\n  ANONYMOUS_CONSENT_STATUS,\r\n  ConsentTemplate,\r\n} from '../../model/index';\r\nimport { AnonymousConsentsActions } from '../store/actions/index';\r\nimport { StateWithAnonymousConsents } from '../store/anonymous-consents-state';\r\nimport { AnonymousConsentsSelectors } from '../store/selectors/index';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AnonymousConsentsService {\r\n  constructor(\r\n    protected store: Store<StateWithAnonymousConsents>,\r\n    protected authService: AuthService\r\n  ) {}\r\n\r\n  /**\r\n   * Retrieves the anonymous consent templates.\r\n   */\r\n  loadTemplates(): void {\r\n    this.store.dispatch(\r\n      new AnonymousConsentsActions.LoadAnonymousConsentTemplates()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Conditionally triggers the load of the anonymous consent templates if:\r\n   *   - `loadIfMissing` parameter is set to `true`\r\n   *   - the `templates` in the store are `undefined`\r\n   *\r\n   * Othewise it just returns the value from the store.\r\n   *\r\n   * @param loadIfMissing setting to `true` will trigger the load of the templates if the currently stored templates are `undefined`\r\n   */\r\n  getTemplates(loadIfMissing = false): Observable<ConsentTemplate[]> {\r\n    return iif(\r\n      () => loadIfMissing,\r\n      this.store.pipe(\r\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue),\r\n        withLatestFrom(this.getLoadTemplatesLoading()),\r\n        filter(([_templates, loading]) => !loading),\r\n        tap(([templates, _loading]) => {\r\n          if (!Boolean(templates)) {\r\n            this.loadTemplates();\r\n          }\r\n        }),\r\n        filter(([templates, _loading]) => Boolean(templates)),\r\n        map(([templates, _loading]) => templates)\r\n      ),\r\n      this.store.pipe(\r\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue)\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the anonymous consent templates with the given template code.\r\n   * @param templateCode a template code by which to filter anonymous consent templates.\r\n   */\r\n  getTemplate(templateCode: string): Observable<ConsentTemplate> {\r\n    return this.store.pipe(\r\n      select(\r\n        AnonymousConsentsSelectors.getAnonymousConsentTemplate(templateCode)\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns an indicator for the loading status for the anonymous consent templates.\r\n   */\r\n  getLoadTemplatesLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns an indicator for the success status for the anonymous consent templates.\r\n   */\r\n  getLoadTemplatesSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns an indicator for the error status for the anonymous consent templates.\r\n   */\r\n  getLoadTemplatesError(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesError)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resets the loading, success and error indicators for the anonymous consent templates.\r\n   */\r\n  resetLoadTemplatesState(): void {\r\n    this.store.dispatch(\r\n      new AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns all the anonymous consents.\r\n   */\r\n  getConsents(): Observable<AnonymousConsent[]> {\r\n    return this.store.pipe(\r\n      select(AnonymousConsentsSelectors.getAnonymousConsents)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Puts the provided anonymous consents into the store.\r\n   */\r\n  setConsents(consents: AnonymousConsent[]): void {\r\n    return this.store.dispatch(\r\n      new AnonymousConsentsActions.SetAnonymousConsents(consents)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the anonymous consent for the given template ID.\r\n   *\r\n   * As a side-effect, the method will call `getTemplates(true)` to load the templates if those are not present.\r\n   *\r\n   * @param templateId a template ID by which to filter anonymous consent templates.\r\n   */\r\n  getConsent(templateId: string): Observable<AnonymousConsent> {\r\n    return this.authService.isUserLoggedIn().pipe(\r\n      filter((authenticated) => !authenticated),\r\n      tap(() => this.getTemplates(true)),\r\n      switchMap(() =>\r\n        this.store.pipe(\r\n          select(\r\n            AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode(\r\n              templateId\r\n            )\r\n          )\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Give a consent for the given `templateCode`\r\n   * @param templateCode for which to give the consent\r\n   */\r\n  giveConsent(templateCode: string): void {\r\n    this.store.dispatch(\r\n      new AnonymousConsentsActions.GiveAnonymousConsent(templateCode)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sets all the anonymous consents' state to given.\r\n   */\r\n  giveAllConsents(): Observable<ConsentTemplate[]> {\r\n    return this.getTemplates(true).pipe(\r\n      tap((templates) =>\r\n        templates.forEach((template) => this.giveConsent(template.id))\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the provided `consent` is given.\r\n   * @param consent a consent to test\r\n   */\r\n  isConsentGiven(consent: AnonymousConsent): boolean {\r\n    return consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN;\r\n  }\r\n\r\n  /**\r\n   * Withdraw a consent for the given `templateCode`\r\n   * @param templateCode for which to withdraw the consent\r\n   */\r\n  withdrawConsent(templateCode: string): void {\r\n    this.store.dispatch(\r\n      new AnonymousConsentsActions.WithdrawAnonymousConsent(templateCode)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sets all the anonymous consents' state to withdrawn.\r\n   */\r\n  withdrawAllConsents(): Observable<ConsentTemplate[]> {\r\n    return this.getTemplates(true).pipe(\r\n      tap((templates) =>\r\n        templates.forEach((template) => this.withdrawConsent(template.id))\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the provided `consent` is withdrawn.\r\n   * @param consent a consent to test\r\n   */\r\n  isConsentWithdrawn(consent: AnonymousConsent): boolean {\r\n    return (\r\n      consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.WITHDRAWN\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Toggles the dismissed state of the anonymous consents banner.\r\n   * @param dismissed the banner will be dismissed if `true` is passed, otherwise it will be visible.\r\n   */\r\n  toggleBannerDismissed(dismissed: boolean): void {\r\n    this.store.dispatch(\r\n      new AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed(\r\n        dismissed\r\n      )\r\n    );\r\n    if (dismissed) {\r\n      this.toggleTemplatesUpdated(false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the banner was dismissed, `false` otherwise.\r\n   */\r\n  isBannerDismissed(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the consent templates were updated on the back-end.\r\n   * If the templates are not present in the store, it triggers the load.\r\n   */\r\n  getTemplatesUpdated(): Observable<boolean> {\r\n    return this.getTemplates(true).pipe(\r\n      switchMap(() =>\r\n        this.store.pipe(\r\n          select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate)\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Toggles the `updated` slice of the state\r\n   * @param updated\r\n   */\r\n  toggleTemplatesUpdated(updated: boolean): void {\r\n    this.store.dispatch(\r\n      new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\r\n        updated\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if either the banner is not dismissed or if the templates were updated on the back-end.\r\n   * Otherwise, it returns `false`.\r\n   */\r\n  isBannerVisible(): Observable<boolean> {\r\n    return combineLatest([\r\n      this.isBannerDismissed(),\r\n      this.getTemplatesUpdated(),\r\n    ]).pipe(map(([dismissed, updated]) => !dismissed || updated));\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if there's a missmatch in template versions between the provided `currentTemplates` and `newTemplates`\r\n   * @param currentTemplates current templates to check\r\n   * @param newTemplates new templates to check\r\n   */\r\n  detectUpdatedTemplates(\r\n    currentTemplates: ConsentTemplate[],\r\n    newTemplates: ConsentTemplate[]\r\n  ): boolean {\r\n    if (newTemplates.length !== currentTemplates.length) {\r\n      return true;\r\n    }\r\n\r\n    for (let i = 0; i < newTemplates.length; i++) {\r\n      const newTemplate = newTemplates[i];\r\n      const currentTemplate = currentTemplates[i];\r\n      if (newTemplate.version !== currentTemplate.version) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Serializes using `JSON.stringify()` and encodes using `encodeURIComponent()` methods\r\n   * @param consents to serialize and encode\r\n   */\r\n  serializeAndEncode(consents: AnonymousConsent[]): string {\r\n    if (!consents) {\r\n      return '';\r\n    }\r\n    const serialized = JSON.stringify(consents);\r\n    const encoded = encodeURIComponent(serialized);\r\n    return encoded;\r\n  }\r\n\r\n  /**\r\n   * Decodes using `decodeURIComponent()` and deserializes using `JSON.parse()`\r\n   * @param rawConsents to decode an deserialize\r\n   */\r\n  decodeAndDeserialize(rawConsents: string): AnonymousConsent[] {\r\n    const decoded = decodeURIComponent(rawConsents);\r\n    const unserialized = JSON.parse(decoded) as AnonymousConsent[];\r\n    return unserialized;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Compares the given `newConsents` and `previousConsents` and returns `true` if there are differences (the `newConsents` are updates).\r\n   * Otherwise it returns `false`.\r\n   *\r\n   * @param newConsents new consents to compare\r\n   * @param previousConsents old consents to compare\r\n   */\r\n  consentsUpdated(\r\n    newConsents: AnonymousConsent[],\r\n    previousConsents: AnonymousConsent[]\r\n  ): boolean {\r\n    const newRawConsents = this.serializeAndEncode(newConsents);\r\n    const previousRawConsents = this.serializeAndEncode(previousConsents);\r\n    return newRawConsents !== previousRawConsents;\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\n\nexport abstract class AsmAdapter {\n  /**\n   * Abstract function used to search for customers.\n   */\n  abstract customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccAsmConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        asmCustomerSearch: '/assistedservicewebservices/customers/search',\n      },\n    },\n  },\n};\n","import { OccConfig } from '../../occ/config/occ-config';\r\nimport { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class AsmConfig extends OccConfig {\r\n  asm?: {\r\n    agentSessionTimer?: {\r\n      startingDelayInSeconds?: number;\r\n    };\r\n    customerSearch?: {\r\n      maxResults?: number;\r\n    };\r\n  };\r\n}\r\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { CustomerSearchPage } from '../models/asm.models';\n\nexport const CUSTOMER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerSearchPage>\n>('CustomerSearchPageNormalizer');\n","import { Injectable, InjectionToken, Injector } from '@angular/core';\r\nimport { Observable, OperatorFunction } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n/**\r\n * Converter is used to convert source data model to target data model.\r\n * By convention, we distinguish two flows:\r\n *   - *Normalize* is the conversion from backend models to UI models\r\n *   - *Serialize* is the conversion of UI models to backend models (in case of submitting data to the backend).\r\n *\r\n * Converters can be stacked together to to apply decoupled customizations\r\n */\r\nexport interface Converter<S, T> {\r\n  /**\r\n   * Convert converts source model to target model. Can use optional target parameter,\r\n   * used in case of stacking multiple converters (for example, to implement populator pattern).\r\n   *\r\n   * @param source Source data model\r\n   * @param target Optional, partially converted target model\r\n   */\r\n  convert(source: S, target?: T): T;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ConverterService {\r\n  constructor(protected injector: Injector) {}\r\n\r\n  private converters: Map<\r\n    InjectionToken<Converter<any, any>>,\r\n    Converter<any, any>[]\r\n  > = new Map();\r\n\r\n  private getConverters<S, T>(\r\n    injectionToken: InjectionToken<Converter<S, T>>\r\n  ): Converter<S, T>[] {\r\n    if (!this.converters.has(injectionToken)) {\r\n      const converters = this.injector.get<Converter<S, T>[]>(\r\n        injectionToken,\r\n        []\r\n      );\r\n      if (!Array.isArray(converters)) {\r\n        console.warn(\r\n          'Converter must be multi-provided, please use \"multi: true\" for',\r\n          injectionToken.toString()\r\n        );\r\n      }\r\n      this.converters.set(injectionToken, converters);\r\n    }\r\n\r\n    return this.converters.get(injectionToken);\r\n  }\r\n\r\n  /**\r\n   * Will return true if converters for specified token were provided\r\n   */\r\n  hasConverters<S, T>(\r\n    injectionToken: InjectionToken<Converter<S, T>>\r\n  ): boolean {\r\n    const converters = this.getConverters(injectionToken);\r\n    return Array.isArray(converters) && converters.length > 0;\r\n  }\r\n\r\n  /**\r\n   * Pipeable operator to apply converter logic in a observable stream\r\n   */\r\n  pipeable<S, T>(\r\n    injectionToken: InjectionToken<Converter<S, T>>\r\n  ): OperatorFunction<S, T> {\r\n    if (this.hasConverters(injectionToken)) {\r\n      return map((model: S) => this.convertSource(model, injectionToken));\r\n    } else {\r\n      return (observable: Observable<any>) => observable as Observable<T>;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pipeable operator to apply converter logic in a observable stream to collection of items\r\n   */\r\n  pipeableMany<S, T>(\r\n    injectionToken: InjectionToken<Converter<S, T>>\r\n  ): OperatorFunction<S[], T[]> {\r\n    if (this.hasConverters(injectionToken)) {\r\n      return map((model: S[]) => this.convertMany(model, injectionToken));\r\n    } else {\r\n      return (observable: Observable<any[]>) => observable as Observable<T[]>;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply converter logic specified by injection token to source data\r\n   */\r\n  convert<S, T>(source: S, injectionToken: InjectionToken<Converter<S, T>>): T {\r\n    if (this.hasConverters(injectionToken)) {\r\n      return this.convertSource(source, injectionToken);\r\n    } else {\r\n      return source as any;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply converter logic specified by injection token to a collection\r\n   */\r\n  convertMany<S, T>(\r\n    sources: S[],\r\n    injectionToken: InjectionToken<Converter<S, T>>\r\n  ): T[] {\r\n    if (this.hasConverters(injectionToken) && Array.isArray(sources)) {\r\n      return sources.map((source) =>\r\n        this.convertSource(source, injectionToken)\r\n      );\r\n    } else {\r\n      return sources as any[];\r\n    }\r\n  }\r\n\r\n  private convertSource<S, T>(\r\n    source: S,\r\n    injectionToken: InjectionToken<Converter<S, T>>\r\n  ): T {\r\n    return this.getConverters(injectionToken).reduce((target, converter) => {\r\n      return converter.convert(source, target);\r\n    }, undefined as T);\r\n  }\r\n}\r\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { AsmConfig } from '../../../asm/config/asm-config';\r\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\r\nimport { CUSTOMER_SEARCH_PAGE_NORMALIZER } from '../../../asm/connectors/converters';\r\nimport {\r\n  CustomerSearchOptions,\r\n  CustomerSearchPage,\r\n} from '../../../asm/models/asm.models';\r\nimport { BaseSiteService } from '../../../site-context/facade/base-site.service';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\nimport {\r\n  InterceptorUtil,\r\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\r\n} from '../../utils/interceptor-util';\r\n\r\n@Injectable()\r\nexport class OccAsmAdapter implements AsmAdapter {\r\n  private activeBaseSite: string;\r\n\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpointsService: OccEndpointsService,\r\n    protected converterService: ConverterService,\r\n    protected config: AsmConfig,\r\n    protected baseSiteService: BaseSiteService\r\n  ) {\r\n    this.baseSiteService\r\n      .getActive()\r\n      .subscribe((value) => (this.activeBaseSite = value));\r\n  }\r\n\r\n  customerSearch(\r\n    options: CustomerSearchOptions\r\n  ): Observable<CustomerSearchPage> {\r\n    const headers = InterceptorUtil.createHeader(\r\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\r\n      true,\r\n      new HttpHeaders()\r\n    );\r\n    let params: HttpParams = new HttpParams()\r\n      .set('baseSite', this.activeBaseSite)\r\n      .set('sort', 'byNameAsc');\r\n\r\n    if (typeof options['query'] !== 'undefined') {\r\n      params = params.set('query', '' + options.query);\r\n    }\r\n\r\n    if (typeof options['pageSize'] !== 'undefined') {\r\n      params = params.set('pageSize', '' + options.pageSize);\r\n    }\r\n\r\n    const url = this.occEndpointsService.getRawEndpoint('asmCustomerSearch');\r\n\r\n    return this.http\r\n      .get<CustomerSearchPage>(url, { headers, params })\r\n      .pipe(this.converterService.pipeable(CUSTOMER_SEARCH_PAGE_NORMALIZER));\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\r\nimport { provideDefaultConfig } from '../../../config/config.module';\r\nimport { defaultOccAsmConfig } from './default-occ-asm-config';\r\nimport { OccAsmAdapter } from './occ-asm.adapter';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, HttpClientModule],\r\n  providers: [\r\n    provideDefaultConfig(defaultOccAsmConfig),\r\n    {\r\n      provide: AsmAdapter,\r\n      useClass: OccAsmAdapter,\r\n    },\r\n  ],\r\n})\r\nexport class AsmOccModule {}\r\n","import { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\n\nexport abstract class CartAdapter {\n  /**\n   * Abstract method used to load all carts\n   *\n   * @param userId\n   */\n  abstract loadAll(userId: string): Observable<Cart[]>;\n\n  /**\n   * Abstract method used to load cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract load(userId: string, cartId: string): Observable<Cart>;\n\n  /**\n   * Abstract method used to create cart. If toMergeCartGuid is specified, cart will be merged with existing one\n   *\n   * @param userId\n   * @param oldCartId\n   * @param toMergeCartGuid\n   */\n  abstract create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart>;\n\n  /**\n   * Abstract method used to delete cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract delete(userId: string, cartId: string): Observable<{}>;\n\n  /**\n   * Abstract method to assign an email to the cart. This step is required to make a guest checkout\n   * @param userId\n   * @param cartId\n   * @param email\n   */\n  abstract addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Cart } from '../../../model/cart.model';\n\nexport const CART_NORMALIZER = new InjectionToken<Converter<any, Cart>>(\n  'CartNormalizer'\n);\n","import { Observable } from 'rxjs';\nimport { CartModification } from '../../../model/cart.model';\n\nexport abstract class CartEntryAdapter {\n  /**\n   * Abstract method used to add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to update entry in cart\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param qty\n   * @param pickupStore\n   */\n  abstract update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any>;\n}\n","import { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\n\nexport abstract class SaveCartAdapter {\n  /**\n   * Abstract method used to save a cart\n   *\n   * @param userId: string\n   * @param cartId: string\n   * @param saveCartName?: string\n   * @param saveCartDescription?: string\n   */\n  abstract saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult>;\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class CartVoucherAdapter {\n  /**\n   * Abstract method used to apply voucher to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to remove voucher from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Product } from '../../../model/product.model';\n\nexport const PRODUCT_NORMALIZER = new InjectionToken<Converter<any, Product>>(\n  'ProductNormalizer'\n);\n","import { Injectable } from '@angular/core';\r\nimport { Cart } from '../../../../model/cart.model';\r\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\r\nimport {\r\n  Converter,\r\n  ConverterService,\r\n} from '../../../../util/converter.service';\r\nimport { Occ } from '../../../occ-models/occ.models';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OccCartNormalizer implements Converter<Occ.Cart, Cart> {\r\n  constructor(private converter: ConverterService) {}\r\n\r\n  convert(source: Occ.Cart, target?: Cart): Cart {\r\n    if (target === undefined) {\r\n      target = { ...(source as any) };\r\n    }\r\n\r\n    if (source && source.entries) {\r\n      target.entries = source.entries.map((entry) => ({\r\n        ...entry,\r\n        product: this.converter.convert(entry.product, PRODUCT_NORMALIZER),\r\n      }));\r\n    }\r\n\r\n    this.removeDuplicatePromotions(source, target);\r\n    return target;\r\n  }\r\n\r\n  /**\r\n   * Remove all duplicate promotions\r\n   */\r\n  private removeDuplicatePromotions(source: any, target: Cart): void {\r\n    if (source && source.potentialOrderPromotions) {\r\n      target.potentialOrderPromotions = this.removeDuplicateItems(\r\n        source.potentialOrderPromotions\r\n      );\r\n    }\r\n\r\n    if (source && source.potentialProductPromotions) {\r\n      target.potentialProductPromotions = this.removeDuplicateItems(\r\n        source.potentialProductPromotions\r\n      );\r\n    }\r\n\r\n    if (source && source.appliedOrderPromotions) {\r\n      target.appliedOrderPromotions = this.removeDuplicateItems(\r\n        source.appliedOrderPromotions\r\n      );\r\n    }\r\n\r\n    if (source && source.appliedProductPromotions) {\r\n      target.appliedProductPromotions = this.removeDuplicateItems(\r\n        source.appliedProductPromotions\r\n      );\r\n    }\r\n  }\r\n\r\n  private removeDuplicateItems(itemList: any[]): any[] {\r\n    return itemList.filter((p, i, a) => {\r\n      const b = a.map((el) => JSON.stringify(el));\r\n      return i === b.indexOf(JSON.stringify(p));\r\n    });\r\n  }\r\n}\r\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccCartConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        carts:\n          'users/${userId}/carts?fields=carts(DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),saveTime,user,name)',\n        cart:\n          'users/${userId}/carts/${cartId}?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        createCart:\n          'users/${userId}/carts?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        addEntries: 'users/${userId}/carts/${cartId}/entries',\n        updateEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        removeEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        addEmail: 'users/${userId}/carts/${cartId}/email',\n        deleteCart: 'users/${userId}/carts/${cartId}',\n        cartVoucher: 'users/${userId}/carts/${cartId}/vouchers',\n        saveCart: 'users/${userId}/carts/${cartId}/save',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CartModification } from '../../../model/cart.model';\n\nexport const CART_MODIFICATION_NORMALIZER = new InjectionToken<\n  Converter<any, CartModification>\n>('CartModificationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\r\nimport { CART_MODIFICATION_NORMALIZER } from '../../../cart/connectors/entry/converters';\r\nimport { CartModification } from '../../../model/cart.model';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\n\r\n@Injectable()\r\nexport class OccCartEntryAdapter implements CartEntryAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpointsService: OccEndpointsService,\r\n    protected converterService: ConverterService\r\n  ) {}\r\n\r\n  public add(\r\n    userId: string,\r\n    cartId: string,\r\n    productCode: string,\r\n    quantity: number = 1\r\n  ): Observable<CartModification> {\r\n    const toAdd = JSON.stringify({});\r\n\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n\r\n    const url = this.occEndpointsService.getUrl(\r\n      'addEntries',\r\n      {\r\n        userId,\r\n        cartId,\r\n      },\r\n      { code: productCode, qty: quantity }\r\n    );\r\n\r\n    return this.http\r\n      .post<CartModification>(url, toAdd, { headers })\r\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\r\n  }\r\n\r\n  public update(\r\n    userId: string,\r\n    cartId: string,\r\n    entryNumber: string,\r\n    qty: number,\r\n    pickupStore?: string\r\n  ): Observable<CartModification> {\r\n    let params = {};\r\n    if (pickupStore) {\r\n      params = { pickupStore };\r\n    }\r\n\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n\r\n    const url = this.occEndpointsService.getUrl(\r\n      'updateEntries',\r\n      { userId, cartId, entryNumber },\r\n      { qty, ...params }\r\n    );\r\n\r\n    return this.http\r\n      .patch<CartModification>(url, {}, { headers })\r\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\r\n  }\r\n\r\n  public remove(\r\n    userId: string,\r\n    cartId: string,\r\n    entryNumber: string\r\n  ): Observable<any> {\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n\r\n    const url = this.occEndpointsService.getUrl('removeEntries', {\r\n      userId,\r\n      cartId,\r\n      entryNumber,\r\n    });\r\n\r\n    return this.http.delete(url, { headers });\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\nimport { Voucher } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CART_VOUCHER_NORMALIZER = new InjectionToken<\n  Converter<any, Voucher>\n>('CartVoucherNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\r\nimport { CART_VOUCHER_NORMALIZER } from '../../../cart/connectors/voucher/converters';\r\nimport { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\nimport {\r\n  InterceptorUtil,\r\n  USE_CLIENT_TOKEN,\r\n} from '../../utils/interceptor-util';\r\n\r\n@Injectable()\r\nexport class OccCartVoucherAdapter implements CartVoucherAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpoints: OccEndpointsService,\r\n    protected converter: ConverterService\r\n  ) {}\r\n\r\n  protected getCartVoucherEndpoint(userId: string, cartId): string {\r\n    return this.occEndpoints.getUrl('cartVoucher', { userId, cartId });\r\n  }\r\n\r\n  protected getHeaders(userId: string): HttpHeaders {\r\n    let headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n\r\n    if (userId === OCC_USER_ID_ANONYMOUS) {\r\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\r\n    }\r\n\r\n    return headers;\r\n  }\r\n\r\n  add(userId: string, cartId: string, voucherId: string): Observable<{}> {\r\n    const url = this.getCartVoucherEndpoint(userId, cartId);\r\n\r\n    const toAdd = JSON.stringify({});\r\n\r\n    const params: HttpParams = new HttpParams().set('voucherId', voucherId);\r\n\r\n    const headers = this.getHeaders(userId);\r\n\r\n    return this.http.post(url, toAdd, { headers, params }).pipe(\r\n      catchError((error: any) => throwError(error)),\r\n      this.converter.pipeable(CART_VOUCHER_NORMALIZER)\r\n    );\r\n  }\r\n\r\n  remove(userId: string, cartId: string, voucherId: string): Observable<{}> {\r\n    const url =\r\n      this.getCartVoucherEndpoint(userId, cartId) +\r\n      '/' +\r\n      encodeURIComponent(voucherId);\r\n\r\n    const headers = this.getHeaders(userId);\r\n\r\n    return this.http\r\n      .delete(url, { headers })\r\n      .pipe(catchError((error: any) => throwError(error)));\r\n  }\r\n}\r\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map, pluck } from 'rxjs/operators';\r\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\r\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\r\nimport { Cart } from '../../../model/cart.model';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { Occ } from '../../occ-models/occ.models';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\nimport {\r\n  InterceptorUtil,\r\n  USE_CLIENT_TOKEN,\r\n} from '../../utils/interceptor-util';\r\nimport {\r\n  OCC_CART_ID_CURRENT,\r\n  OCC_USER_ID_ANONYMOUS,\r\n} from '../../utils/occ-constants';\r\n\r\n@Injectable()\r\nexport class OccCartAdapter implements CartAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpointsService: OccEndpointsService,\r\n    protected converterService: ConverterService\r\n  ) {}\r\n\r\n  public loadAll(userId: string): Observable<Cart[]> {\r\n    return this.http\r\n      .get<Occ.CartList>(this.occEndpointsService.getUrl('carts', { userId }))\r\n      .pipe(\r\n        pluck('carts'),\r\n        this.converterService.pipeableMany(CART_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  public load(userId: string, cartId: string): Observable<Cart> {\r\n    if (cartId === OCC_CART_ID_CURRENT) {\r\n      return this.loadAll(userId).pipe(\r\n        map((carts) => {\r\n          if (carts) {\r\n            const activeCart = carts.find((cart) => {\r\n              return cart['saveTime'] === undefined;\r\n            });\r\n            return activeCart;\r\n          } else {\r\n            return null;\r\n          }\r\n        })\r\n      );\r\n    } else {\r\n      return this.http\r\n        .get<Occ.Cart>(\r\n          this.occEndpointsService.getUrl('cart', { userId, cartId })\r\n        )\r\n        .pipe(this.converterService.pipeable(CART_NORMALIZER));\r\n    }\r\n  }\r\n\r\n  create(\r\n    userId: string,\r\n    oldCartId?: string,\r\n    toMergeCartGuid?: string\r\n  ): Observable<Cart> {\r\n    const toAdd = JSON.stringify({});\r\n\r\n    let params = {};\r\n\r\n    if (oldCartId) {\r\n      params = { oldCartId: oldCartId };\r\n    }\r\n    if (toMergeCartGuid) {\r\n      params['toMergeCartGuid'] = toMergeCartGuid;\r\n    }\r\n\r\n    return this.http\r\n      .post<Occ.Cart>(\r\n        this.occEndpointsService.getUrl('createCart', { userId }, params),\r\n        toAdd\r\n      )\r\n      .pipe(this.converterService.pipeable(CART_NORMALIZER));\r\n  }\r\n\r\n  delete(userId: string, cartId: string): Observable<{}> {\r\n    let headers = new HttpHeaders();\r\n    if (userId === OCC_USER_ID_ANONYMOUS) {\r\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\r\n    }\r\n    return this.http.delete<{}>(\r\n      this.occEndpointsService.getUrl('deleteCart', { userId, cartId }),\r\n      { headers }\r\n    );\r\n  }\r\n\r\n  addEmail(userId: string, cartId: string, email: string): Observable<{}> {\r\n    let headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\r\n\r\n    const httpParams: HttpParams = new HttpParams().set('email', email);\r\n\r\n    const url = this.occEndpointsService.getUrl('addEmail', {\r\n      userId,\r\n      cartId,\r\n    });\r\n\r\n    return this.http.put(url, httpParams, { headers });\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const SAVE_CART_NORMALIZER = new InjectionToken<\n  Converter<any, SaveCartResult>\n>('SaveCartNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SAVE_CART_NORMALIZER } from '../../../cart/connectors/save-cart/converters';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSaveCartAdapter implements SaveCartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    let httpParams = new HttpParams();\n\n    if (Boolean(saveCartName)) {\n      httpParams = httpParams.set('saveCartName', saveCartName);\n    }\n\n    if (Boolean(saveCartDescription)) {\n      httpParams = httpParams.set('saveCartDescription', saveCartDescription);\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .patch<Occ.SaveCartResult>(\n        this.occEndpointsService.getUrl('saveCart', { userId, cartId }),\n        httpParams,\n        { headers }\n      )\n      .pipe(this.converterService.pipeable(SAVE_CART_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\r\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\r\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\r\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\r\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\r\nimport { provideDefaultConfig } from '../../../config/config.module';\r\nimport { OccCartNormalizer } from './converters/occ-cart-normalizer';\r\nimport { defaultOccCartConfig } from './default-occ-cart-config';\r\nimport { OccCartEntryAdapter } from './occ-cart-entry.adapter';\r\nimport { OccCartVoucherAdapter } from './occ-cart-voucher.adapter';\r\nimport { OccCartAdapter } from './occ-cart.adapter';\r\nimport { OccSaveCartAdapter } from './occ-save-cart.adapter';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, HttpClientModule],\r\n  providers: [\r\n    provideDefaultConfig(defaultOccCartConfig),\r\n    {\r\n      provide: CartAdapter,\r\n      useClass: OccCartAdapter,\r\n    },\r\n    {\r\n      provide: CART_NORMALIZER,\r\n      useExisting: OccCartNormalizer,\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: CartEntryAdapter,\r\n      useClass: OccCartEntryAdapter,\r\n    },\r\n    {\r\n      provide: CartVoucherAdapter,\r\n      useClass: OccCartVoucherAdapter,\r\n    },\r\n    {\r\n      provide: SaveCartAdapter,\r\n      useClass: OccSaveCartAdapter,\r\n    },\r\n  ],\r\n})\r\nexport class CartOccModule {}\r\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Order } from '../../../model/order.model';\n\nexport const ORDER_NORMALIZER = new InjectionToken<Converter<any, Order>>(\n  'OrderNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { Order } from '../../../model/order.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n// To be changed to a more optimised params after ticket: C3PO-1076\nconst FULL_PARAMS = 'fields=FULL';\nconst CHECKOUT_PARAMS = 'deliveryAddress(FULL),deliveryMode,paymentInfo(FULL)';\nconst ORDERS_ENDPOINT = '/orders';\nconst CARTS_ENDPOINT = '/carts/';\n\n@Injectable()\nexport class OccCheckoutAdapter implements CheckoutAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getEndpoint(userId: string, subEndpoint: string): string {\n    const orderEndpoint = 'users/' + userId + subEndpoint;\n    return this.occEndpoints.getEndpoint(orderEndpoint);\n  }\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    const url = this.getEndpoint(userId, ORDERS_ENDPOINT);\n    const params = new HttpParams({\n      fromString: 'cartId=' + cartId + '&' + FULL_PARAMS,\n    });\n\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return this.http\n      .post<Occ.Order>(url, {}, { headers, params })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    const url = this.getEndpoint(userId, CARTS_ENDPOINT) + cartId;\n    const params = new HttpParams({\n      fromString: `fields=${CHECKOUT_PARAMS}`,\n    });\n    return this.http.get<CheckoutDetails>(url, { params });\n  }\n\n  clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/addresses/delivery`;\n    return this.http.delete<any>(url);\n  }\n\n  clearCheckoutDeliveryMode(userId: string, cartId: string): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/deliverymode`;\n    return this.http.delete<any>(url);\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport const DELIVERY_MODE_NORMALIZER = new InjectionToken<\n  Converter<any, DeliveryMode>\n>('DeliveryModeNormalizer');\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const ADDRESS_NORMALIZER = new InjectionToken<Converter<any, Address>>(\n  'AddressNormalizer'\n);\n\nexport const ADDRESS_SERIALIZER = new InjectionToken<Converter<Address, any>>(\n  'AddressSerializer'\n);\n\nexport const ADDRESS_VALIDATION_NORMALIZER = new InjectionToken<\n  Converter<any, AddressValidation>\n>('AddressValidationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { DELIVERY_MODE_NORMALIZER } from '../../../checkout/connectors/delivery/converters';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n} from '../../../user/connectors/address/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCheckoutDeliveryAdapter implements CheckoutDeliveryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<Occ.Address>(\n        this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n        address,\n        {\n          headers: new HttpHeaders().set('Content-Type', 'application/json'),\n        }\n      )\n      .pipe(this.converter.pipeable(ADDRESS_NORMALIZER));\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n      {},\n      {\n        params: { addressId: addressId },\n      }\n    );\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/deliverymode',\n      {},\n      {\n        params: { deliveryModeId: deliveryModeId },\n      }\n    );\n  }\n\n  public getMode(userId: string, cartId: string): Observable<any> {\n    return this.http\n      .get(this.getCartEndpoint(userId) + cartId + '/deliverymode')\n      .pipe(this.converter.pipeable(DELIVERY_MODE_NORMALIZER));\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.http\n      .get<Occ.DeliveryModeList>(\n        this.getCartEndpoint(userId) + cartId + '/deliverymodes'\n      )\n      .pipe(\n        pluck('deliveryModes'),\n        this.converter.pipeableMany(DELIVERY_MODE_NORMALIZER)\n      );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport const PAYMENT_DETAILS_NORMALIZER = new InjectionToken<\n  Converter<any, PaymentDetails>\n>('PaymentDetailsNormalizer');\n\nexport const PAYMENT_DETAILS_SERIALIZER = new InjectionToken<\n  Converter<PaymentDetails, any>\n>('PaymentDetailsSerializer');\n\nexport const CARD_TYPE_NORMALIZER = new InjectionToken<\n  Converter<any, CardType>\n>('CardTypeNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\r\nimport {\r\n  CARD_TYPE_NORMALIZER,\r\n  PAYMENT_DETAILS_NORMALIZER,\r\n  PAYMENT_DETAILS_SERIALIZER,\r\n} from '../../../checkout/connectors/payment/converters';\r\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { Occ } from '../../occ-models';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\nimport { CustomEncoder } from '../cart/custom.encoder';\r\n\r\nconst ENDPOINT_CARD_TYPES = 'cardtypes';\r\n\r\n@Injectable()\r\nexport class OccCheckoutPaymentAdapter implements CheckoutPaymentAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpoints: OccEndpointsService,\r\n    protected converter: ConverterService\r\n  ) {\r\n    if (typeof DOMParser !== 'undefined') {\r\n      this.domparser = new DOMParser();\r\n    }\r\n  }\r\n\r\n  private domparser: DOMParser;\r\n\r\n  protected getCartEndpoint(userId: string): string {\r\n    const cartEndpoint = 'users/' + userId + '/carts/';\r\n    return this.occEndpoints.getEndpoint(cartEndpoint);\r\n  }\r\n\r\n  public create(\r\n    userId: string,\r\n    cartId: string,\r\n    paymentDetails: PaymentDetails\r\n  ): Observable<PaymentDetails> {\r\n    paymentDetails = this.converter.convert(\r\n      paymentDetails,\r\n      PAYMENT_DETAILS_SERIALIZER\r\n    );\r\n    return this.getProviderSubInfo(userId, cartId).pipe(\r\n      map((data) => {\r\n        const labelsMap = this.convertToMap(data.mappingLabels.entry);\r\n        return {\r\n          url: data.postUrl,\r\n          parameters: this.getParamsForPaymentProvider(\r\n            paymentDetails,\r\n            data.parameters.entry,\r\n            labelsMap\r\n          ),\r\n          mappingLabels: labelsMap,\r\n        };\r\n      }),\r\n      mergeMap((sub) => {\r\n        // create a subscription directly with payment provider\r\n        return this.createSubWithProvider(sub.url, sub.parameters).pipe(\r\n          map((response) => this.extractPaymentDetailsFromHtml(response)),\r\n          mergeMap((fromPaymentProvider) => {\r\n            fromPaymentProvider['defaultPayment'] =\r\n              paymentDetails.defaultPayment;\r\n            fromPaymentProvider['savePaymentInfo'] = true;\r\n            return this.createDetailsWithParameters(\r\n              userId,\r\n              cartId,\r\n              fromPaymentProvider\r\n            ).pipe(this.converter.pipeable(PAYMENT_DETAILS_NORMALIZER));\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  public set(\r\n    userId: string,\r\n    cartId: string,\r\n    paymentDetailsId: string\r\n  ): Observable<any> {\r\n    return this.http.put(\r\n      this.getCartEndpoint(userId) + cartId + '/paymentdetails',\r\n      {},\r\n      {\r\n        params: { paymentDetailsId: paymentDetailsId },\r\n      }\r\n    );\r\n  }\r\n\r\n  loadCardTypes(): Observable<CardType[]> {\r\n    return this.http\r\n      .get<Occ.CardTypeList>(this.occEndpoints.getEndpoint(ENDPOINT_CARD_TYPES))\r\n      .pipe(\r\n        map((cardTypeList) => cardTypeList.cardTypes),\r\n        this.converter.pipeableMany(CARD_TYPE_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  protected getProviderSubInfo(\r\n    userId: string,\r\n    cartId: string\r\n  ): Observable<any> {\r\n    return this.http.get(\r\n      this.getCartEndpoint(userId) +\r\n        cartId +\r\n        '/payment/sop/request?responseUrl=sampleUrl'\r\n    );\r\n  }\r\n\r\n  protected createSubWithProvider(\r\n    postUrl: string,\r\n    parameters: any\r\n  ): Observable<any> {\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n      Accept: 'text/html',\r\n    });\r\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\r\n    Object.keys(parameters).forEach((key) => {\r\n      httpParams = httpParams.append(key, parameters[key]);\r\n    });\r\n\r\n    return this.http.post(postUrl, httpParams, {\r\n      headers,\r\n      responseType: 'text',\r\n    });\r\n  }\r\n\r\n  protected createDetailsWithParameters(\r\n    userId: string,\r\n    cartId: string,\r\n    parameters: any\r\n  ): Observable<PaymentDetails> {\r\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\r\n    Object.keys(parameters).forEach((key) => {\r\n      httpParams = httpParams.append(key, parameters[key]);\r\n    });\r\n\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n\r\n    return this.http.post<PaymentDetails>(\r\n      this.getCartEndpoint(userId) + cartId + '/payment/sop/response',\r\n      httpParams,\r\n      { headers }\r\n    );\r\n  }\r\n\r\n  private getParamsForPaymentProvider(\r\n    paymentDetails: PaymentDetails,\r\n    parameters: { key; value }[],\r\n    mappingLabels: any\r\n  ) {\r\n    const params = this.convertToMap(parameters);\r\n    params[mappingLabels['hybris_account_holder_name']] =\r\n      paymentDetails.accountHolderName;\r\n    params[mappingLabels['hybris_card_type']] = paymentDetails.cardType.code;\r\n    params[mappingLabels['hybris_card_number']] = paymentDetails.cardNumber;\r\n    if (mappingLabels['hybris_combined_expiry_date'] === 'true') {\r\n      params[mappingLabels['hybris_card_expiry_date']] =\r\n        paymentDetails.expiryMonth +\r\n        mappingLabels['hybris_separator_expiry_date'] +\r\n        paymentDetails.expiryYear;\r\n    } else {\r\n      params[mappingLabels['hybris_card_expiration_month']] =\r\n        paymentDetails.expiryMonth;\r\n      params[mappingLabels['hybris_card_expiration_year']] =\r\n        paymentDetails.expiryYear;\r\n    }\r\n    params[mappingLabels['hybris_card_cvn']] = paymentDetails.cvn;\r\n\r\n    // billing address\r\n    params[mappingLabels['hybris_billTo_country']] =\r\n      paymentDetails.billingAddress.country.isocode;\r\n    params[mappingLabels['hybris_billTo_firstname']] =\r\n      paymentDetails.billingAddress.firstName;\r\n    params[mappingLabels['hybris_billTo_lastname']] =\r\n      paymentDetails.billingAddress.lastName;\r\n    params[mappingLabels['hybris_billTo_street1']] =\r\n      paymentDetails.billingAddress.line1 +\r\n      ' ' +\r\n      paymentDetails.billingAddress.line2;\r\n    params[mappingLabels['hybris_billTo_city']] =\r\n      paymentDetails.billingAddress.town;\r\n    if (paymentDetails.billingAddress.region) {\r\n      params[mappingLabels['hybris_billTo_region']] =\r\n        paymentDetails.billingAddress.region.isocodeShort;\r\n    } else {\r\n      params[mappingLabels['hybris_billTo_region']] = '';\r\n    }\r\n    params[mappingLabels['hybris_billTo_postalcode']] =\r\n      paymentDetails.billingAddress.postalCode;\r\n    return params;\r\n  }\r\n\r\n  private extractPaymentDetailsFromHtml(html: string): any {\r\n    const domdoc = this.domparser.parseFromString(html, 'text/xml');\r\n    const responseForm = domdoc.getElementsByTagName('form')[0];\r\n    const inputs = responseForm.getElementsByTagName('input');\r\n\r\n    const values = {};\r\n    for (let i = 0; inputs[i]; i++) {\r\n      const input = inputs[i];\r\n      if (\r\n        input.getAttribute('name') !== '{}' &&\r\n        input.getAttribute('value') !== ''\r\n      ) {\r\n        values[input.getAttribute('name')] = input.getAttribute('value');\r\n      }\r\n    }\r\n\r\n    return values;\r\n  }\r\n\r\n  private convertToMap(paramList: { key; value }[]) {\r\n    return paramList.reduce(function (result, item) {\r\n      const key = item.key;\r\n      result[key] = item.value;\r\n      return result;\r\n    }, {});\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\nexport abstract class CheckoutAdapter {\n  /**\n   * Abstract method used to place an order.\n   *\n   * @param userId The `userId` for given user\n   * @param cartId The `cartId` for cart used for placing order\n   */\n  abstract placeOrder(userId: string, cartId: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load checkout details\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails>;\n\n  /**\n   * Abstract method used to clear checkout delivery address\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to clear checkout delivery mode\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\r\nimport { Occ } from '../../../occ-models/occ.models';\r\nimport {\r\n  Converter,\r\n  ConverterService,\r\n} from '../../../../util/converter.service';\r\nimport { Order, OrderEntry } from '../../../../model/order.model';\r\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OccOrderNormalizer implements Converter<Occ.Order, Order> {\r\n  constructor(private converter: ConverterService) {}\r\n\r\n  convert(source: Occ.Order, target?: Order): Order {\r\n    if (target === undefined) {\r\n      target = { ...(source as any) };\r\n    }\r\n\r\n    if (source.entries) {\r\n      target.entries = source.entries.map((entry) =>\r\n        this.convertOrderEntry(entry)\r\n      );\r\n    }\r\n\r\n    if (source.consignments) {\r\n      target.consignments = source.consignments.map((consignment) => ({\r\n        ...consignment,\r\n        entries: consignment.entries.map((entry) => ({\r\n          ...entry,\r\n          orderEntry: this.convertOrderEntry(entry.orderEntry),\r\n        })),\r\n      }));\r\n    }\r\n\r\n    if (source.unconsignedEntries) {\r\n      target.unconsignedEntries = source.unconsignedEntries.map((entry) =>\r\n        this.convertOrderEntry(entry)\r\n      );\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\r\n    return {\r\n      ...source,\r\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\r\n    };\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport abstract class CheckoutDeliveryAdapter {\n  /**\n   * Abstract method used to create address in cart\n   *\n   * @param userId\n   * @param cartId\n   * @param address\n   */\n  abstract createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address>;\n\n  /**\n   * Abstract method used to set adress for delivery\n   *\n   * @param userId\n   * @param cartId\n   * @param addressId\n   */\n  abstract setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to set delivery mode on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param deliveryModeId\n   */\n  abstract setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get current delivery mode from cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getMode(userId: string, cartId: string): Observable<DeliveryMode>;\n\n  /**\n   * Abstract method used to get supported delivery modes for cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]>;\n}\n","import { Observable } from 'rxjs';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class CheckoutPaymentAdapter {\n  /**\n   * Abstract method used to create payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetails\n   */\n  abstract create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails>;\n\n  /**\n   * Abstract method used to set payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetailsId\n   */\n  abstract set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get available cart types\n   */\n  abstract loadCardTypes(): Observable<CardType[]>;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { OccCheckoutAdapter } from './occ-checkout.adapter';\nimport { OccOrderNormalizer } from './converters/occ-order-normalizer';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { OccCheckoutDeliveryAdapter } from './occ-checkout-delivery.adapter';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport { OccCheckoutPaymentAdapter } from './occ-checkout-payment.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CheckoutAdapter,\n      useClass: OccCheckoutAdapter,\n    },\n    { provide: ORDER_NORMALIZER, useExisting: OccOrderNormalizer, multi: true },\n    {\n      provide: CheckoutDeliveryAdapter,\n      useClass: OccCheckoutDeliveryAdapter,\n    },\n    {\n      provide: CheckoutPaymentAdapter,\n      useClass: OccCheckoutPaymentAdapter,\n    },\n  ],\n})\nexport class CheckoutOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CmsStructureModel>\n>('CmsPageNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsStructureModel } from '../../../cms/model/page.model';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsPageAdapter implements CmsPageAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<CmsStructureModel> {\n    // load page by Id\n    if (pageContext.type === undefined) {\n      return this.http\n        .get(\n          this.occEndpoints.getUrl(\n            'page',\n            {\n              id: pageContext.id,\n            },\n            { fields: fields ? fields : 'DEFAULT' }\n          ),\n          {\n            headers: this.headers,\n          }\n        )\n        .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n    }\n\n    // load page by PageContext\n    const httpParams = this.getPagesRequestParams(pageContext);\n    return this.http\n      .get(this.getPagesEndpoint(httpParams, fields), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n  }\n\n  private getPagesEndpoint(\n    params: {\n      [key: string]: string;\n    },\n    fields?: string\n  ): string {\n    fields = fields ? fields : 'DEFAULT';\n    return this.occEndpoints.getUrl('pages', {}, { fields, ...params });\n  }\n\n  private getPagesRequestParams(\n    pageContext: PageContext\n  ): { [key: string]: any } {\n    let httpParams = {};\n\n    // smartedit preview page is loaded by previewToken which added by interceptor\n    if (pageContext.id !== 'smartedit-preview') {\n      httpParams = { pageType: pageContext.type };\n\n      if (pageContext.type === PageType.CONTENT_PAGE) {\n        httpParams['pageLabelOrId'] = pageContext.id;\n      } else {\n        httpParams['code'] = pageContext.id;\n      }\n    }\n    return httpParams;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_COMPONENT_NORMALIZER = new InjectionToken<\n  Converter<any, CmsComponent>\n>('CmsComponentNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\nimport { CMS_COMPONENT_NORMALIZER } from '../../../cms/connectors/component/converters';\nimport { CmsComponent, PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsComponentAdapter implements CmsComponentAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.http\n      .get<T>(this.getComponentEndPoint(id, pageContext), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable<any, T>(CMS_COMPONENT_NORMALIZER));\n  }\n\n  findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    requestParams['componentIds'] = ids.toString();\n\n    return this.http\n      .get<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const idList: Occ.ComponentIDList = { idList: ids };\n\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    return this.http\n      .post<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        idList,\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  protected getComponentEndPoint(id: string, pageContext: PageContext): string {\n    return this.occEndpoints.getUrl(\n      'component',\n      { id },\n      this.getContextParams(pageContext)\n    );\n  }\n\n  protected getComponentsEndpoint(requestParams: any, fields: string): string {\n    return this.occEndpoints.getUrl(\n      'components',\n      {},\n      { fields, ...requestParams }\n    );\n  }\n\n  private getPaginationParams(\n    currentPage?: number,\n    pageSize?: number,\n    sort?: string\n  ): { [key: string]: string } {\n    const requestParams = {};\n    if (currentPage !== undefined) {\n      requestParams['currentPage'] = currentPage.toString();\n    }\n    if (pageSize !== undefined) {\n      requestParams['pageSize'] = pageSize.toString();\n    }\n    if (sort !== undefined) {\n      requestParams['sort'] = sort;\n    }\n\n    return requestParams;\n  }\n\n  private getContextParams(\n    pageContext: PageContext\n  ): { [key: string]: string } {\n    let requestParams = {};\n    switch (pageContext.type) {\n      case PageType.PRODUCT_PAGE: {\n        requestParams = { productCode: pageContext.id };\n        break;\n      }\n      case PageType.CATEGORY_PAGE: {\n        requestParams = { categoryCode: pageContext.id };\n        break;\n      }\n      case PageType.CATALOG_PAGE: {\n        requestParams = { catalogCode: pageContext.id };\n        break;\n      }\n    }\n\n    return requestParams;\n  }\n}\n","import { Injectable, StaticProvider } from '@angular/core';\r\nimport { Routes } from '@angular/router';\r\nimport { AuthConfig } from '../../auth/config/auth-config';\r\nimport { KymaConfig } from '../../kyma/config/kyma-config';\r\nimport { OccConfig } from '../../occ/config/occ-config';\r\nimport { Config } from '../../config/config.module';\r\n\r\nexport interface StandardCmsComponentConfig {\r\n  CMSSiteContextComponent?: CmsComponentMapping;\r\n  CMSLinkComponent?: CmsComponentMapping;\r\n  SimpleResponsiveBannerComponent?: CmsComponentMapping;\r\n  SimpleBannerComponent?: CmsComponentMapping;\r\n  BannerComponent?: CmsComponentMapping;\r\n  CMSParagraphComponent?: CmsComponentMapping;\r\n  BreadcrumbComponent?: CmsComponentMapping;\r\n  NavigationComponent?: CmsComponentMapping;\r\n  FooterNavigationComponent?: CmsComponentMapping;\r\n  CategoryNavigationComponent?: CmsComponentMapping;\r\n  ProductAddToCartComponent?: CmsComponentMapping;\r\n  MiniCartComponent?: CmsComponentMapping;\r\n  ProductCarouselComponent?: CmsComponentMapping;\r\n  SearchBoxComponent?: CmsComponentMapping;\r\n  ProductReferencesComponent?: CmsComponentMapping;\r\n  CMSTabParagraphComponent?: CmsComponentMapping;\r\n  LoginComponent?: CmsComponentMapping;\r\n}\r\n\r\nexport interface JspIncludeCmsComponentConfig {\r\n  AccountAddressBookComponent?: CmsComponentMapping;\r\n  ForgotPasswordComponent?: CmsComponentMapping;\r\n  ResetPasswordComponent?: CmsComponentMapping;\r\n  ProductDetailsTabComponent?: CmsComponentMapping;\r\n  ProductSpecsTabComponent?: CmsComponentMapping;\r\n  ProductReviewsTabComponent?: CmsComponentMapping;\r\n}\r\n\r\nexport const JSP_INCLUDE_CMS_COMPONENT_TYPE = 'JspIncludeComponent';\r\nexport const CMS_FLEX_COMPONENT_TYPE = 'CMSFlexComponent';\r\n\r\nexport interface CmsComponentMapping {\r\n  component?: any;\r\n  providers?: StaticProvider[];\r\n  childRoutes?: Routes;\r\n  disableSSR?: boolean;\r\n  i18nKeys?: string[];\r\n  guards?: any[];\r\n\r\n  /**\r\n   * DeferLoading can be specified globally, but also per component.\r\n   * Some components require direct loading while it's not initially\r\n   * in the viewport.\r\n   */\r\n  deferLoading?: DeferLoadingStrategy;\r\n}\r\n\r\n/** Strategy to control the loading strategy of DOM elements. */\r\nexport enum DeferLoadingStrategy {\r\n  /** Defers loading of DOM elements until element is near/in the users view port */\r\n  DEFER = 'DEFERRED-LOADING',\r\n  /** Renders the DOM instantly without being concerned with the view port */\r\n  INSTANT = 'INSTANT-LOADING',\r\n}\r\n\r\nexport interface CMSComponentConfig\r\n  extends StandardCmsComponentConfig,\r\n    JspIncludeCmsComponentConfig {\r\n  [componentType: string]: CmsComponentMapping;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class CmsConfig extends OccConfig\r\n  implements AuthConfig, KymaConfig {\r\n  authentication?: {\r\n    client_id?: string;\r\n    client_secret?: string;\r\n    kyma_client_id?: string;\r\n    kyma_client_secret?: string;\r\n  };\r\n\r\n  cmsComponents?: CMSComponentConfig;\r\n}\r\n","import { Injectable } from '@angular/core';\nimport {\n  CMS_FLEX_COMPONENT_TYPE,\n  JSP_INCLUDE_CMS_COMPONENT_TYPE,\n} from '../../../../cms/config/cms-config';\nimport { ContentSlotComponentData } from '../../../../cms/model/content-slot-component-data.model';\nimport { ContentSlotData } from '../../../../cms/model/content-slot-data.model';\nimport { CmsStructureModel } from '../../../../cms/model/page.model';\nimport { Converter } from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCmsPageNormalizer\n  implements Converter<Occ.CMSPage, CmsStructureModel> {\n  convert(\n    source: Occ.CMSPage,\n    target: CmsStructureModel = {}\n  ): CmsStructureModel {\n    this.normalizePageData(source, target);\n    this.normalizePageSlotData(source, target);\n    this.normalizePageComponentData(source, target);\n    this.normalizeComponentData(source, target);\n    return target;\n  }\n\n  private normalizePageData(source: any, target: CmsStructureModel): void {\n    target.page = {\n      loadTime: Date.now(),\n      name: source.name,\n      type: source.typeCode,\n      title: source.title,\n      pageId: source.uid,\n      template: source.template,\n      slots: {},\n      properties: source.properties,\n      label: source.label,\n    };\n  }\n\n  private normalizePageSlotData(source: any, target: CmsStructureModel): void {\n    for (const slot of source.contentSlots.contentSlot) {\n      target.page.slots[slot.position] = {\n        components: [],\n        properties: slot.properties,\n      } as ContentSlotData;\n    }\n  }\n\n  private normalizePageComponentData(\n    source: any,\n    target: CmsStructureModel\n  ): void {\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component) {\n          const comp: ContentSlotComponentData = {\n            uid: component.uid,\n            typeCode: component.typeCode,\n            properties: component.properties,\n          };\n\n          if (component.typeCode === CMS_FLEX_COMPONENT_TYPE) {\n            comp.flexType = component.flexType;\n          } else if (component.typeCode === JSP_INCLUDE_CMS_COMPONENT_TYPE) {\n            comp.flexType = component.uid;\n          } else {\n            comp.flexType = component.typeCode;\n          }\n          target.page.slots[slot.position].components.push(comp);\n        }\n      }\n    }\n  }\n\n  private normalizeComponentData(source: any, target: CmsStructureModel): void {\n    target.components = [];\n\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component as any) {\n          // we dont put properties into component state\n          if (component.properties) {\n            component.properties = undefined;\n          }\n          target.components.push(component);\n        }\n      }\n    }\n  }\n}\n","import { Observable } from 'rxjs';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n/**\n * Abstract class that can be used to implement custom loader logic\n * in order to load CMS structure from third-party CMS system.\n */\nexport abstract class CmsPageAdapter {\n  /**\n   * Abstract method must be used to load the page structure for a given `PageContext`.\n   * The page can be loaded from alternative sources, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load(pageContext: PageContext): Observable<CmsStructureModel>;\n}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/models/page-context.model';\n\nexport abstract class CmsComponentAdapter {\n  /**\n   * Abstract method must be used to load the component for a given `id` and `PageContext`.\n   * The component can be loaded from alternative backend, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<T>;\n\n  abstract findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n\n  abstract findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { OccCmsComponentAdapter } from './occ-cms-component.adapter';\nimport { OccCmsPageNormalizer } from './converters/occ-cms-page-normalizer';\nimport { OccCmsPageAdapter } from './occ-cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CmsPageAdapter,\n      useClass: OccCmsPageAdapter,\n    },\n    {\n      provide: CMS_PAGE_NORMALIZER,\n      useExisting: OccCmsPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: CmsComponentAdapter,\n      useClass: OccCmsComponentAdapter,\n    },\n  ],\n})\nexport class CmsOccModule {}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\nimport { Images } from '../../../../model/image.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductImageNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.images) {\n      target.images = this.normalize(source.images);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the image structure we'd like to have. Instead of\n   * having a single list with all images despite type and format\n   * we create a proper structure. With that we can do:\n   * - images.primary.thumnail.url\n   * - images.GALLERY[0].thumnail.url\n   */\n  normalize(source: Occ.Image[]): Images {\n    const images = {};\n    if (source) {\n      for (const image of source) {\n        const isList = image.hasOwnProperty('galleryIndex');\n        if (!images.hasOwnProperty(image.imageType)) {\n          images[image.imageType] = isList ? [] : {};\n        }\n\n        let imageContainer;\n        if (isList && !images[image.imageType][image.galleryIndex]) {\n          images[image.imageType][image.galleryIndex] = {};\n        }\n\n        if (isList) {\n          imageContainer = images[image.imageType][image.galleryIndex];\n        } else {\n          imageContainer = images[image.imageType];\n        }\n\n        const targetImage = { ...image };\n        targetImage.url = this.normalizeImageUrl(targetImage.url);\n        imageContainer[image.format] = targetImage;\n      }\n    }\n    return images;\n  }\n  /**\n   * Traditionally, in an on-prem world, medias and other backend related calls\n   * are hosted at the same platform, but in a cloud setup, applications are are\n   * typically distributed cross different environments. For media, we use the\n   * `backend.media.baseUrl` by default, but fallback to `backend.occ.baseUrl`\n   * if none provided.\n   */\n  private normalizeImageUrl(url: string): string {\n    if (new RegExp(/^(http|data:image|\\/\\/)/i).test(url)) {\n      return url;\n    }\n    return (\n      (this.config.backend.media.baseUrl ||\n        this.config.backend.occ.baseUrl ||\n        '') + url\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product, ProductReferences } from '../../../../model/product.model';\n\n@Injectable()\nexport class ProductReferenceNormalizer\n  implements Converter<Occ.Product, Product> {\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.productReferences) {\n      target.productReferences = this.normalize(source.productReferences);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the reference structure we'd like to have. Instead of\n   * having a single list with all references we create a proper structure.\n   * With that we have a semantic API for the clients\n   * - product.references.SIMILAR[0].code\n   */\n  protected normalize(source: Occ.ProductReference[]): ProductReferences {\n    const references = {};\n\n    if (source) {\n      for (const reference of source) {\n        if (!references.hasOwnProperty(reference.referenceType)) {\n          references[reference.referenceType] = [];\n        }\n        references[reference.referenceType].push(reference);\n      }\n    }\n    return references;\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  Facet,\r\n  ProductSearchPage,\r\n} from '../../../../model/product-search.model';\r\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\r\nimport {\r\n  Converter,\r\n  ConverterService,\r\n} from '../../../../util/converter.service';\r\nimport { Occ } from '../../../occ-models/occ.models';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OccProductSearchPageNormalizer\r\n  implements Converter<Occ.ProductSearchPage, ProductSearchPage> {\r\n  constructor(private converterService: ConverterService) {}\r\n\r\n  /**\r\n   * Specifies the minimal number of top values in case\r\n   * non have been setup by the business.\r\n   */\r\n  protected DEFAULT_TOP_VALUES = 6;\r\n\r\n  convert(\r\n    source: Occ.ProductSearchPage,\r\n    target: ProductSearchPage = {}\r\n  ): ProductSearchPage {\r\n    target = {\r\n      ...target,\r\n      ...(source as any),\r\n    };\r\n\r\n    this.normalizeFacets(target);\r\n    if (source.products) {\r\n      target.products = source.products.map((product) =>\r\n        this.converterService.convert(product, PRODUCT_NORMALIZER)\r\n      );\r\n    }\r\n    return target;\r\n  }\r\n\r\n  private normalizeFacets(target: ProductSearchPage): void {\r\n    this.normalizeFacetValues(target);\r\n    this.normalizeUselessFacets(target);\r\n  }\r\n\r\n  /**\r\n   * The (current) backend returns facets with values that do not contribute\r\n   * to the facet navigation much, as the number in the result list will not get\r\n   * behaviour, see https://jira.hybris.com/browse/CS-427.\r\n   *\r\n   * As long as this is not in place, we manually filter the facet from the list;\r\n   * any facet that does not have a count < the total results will be dropped from\r\n   * the facets.\r\n   */\r\n  private normalizeUselessFacets(target: ProductSearchPage): void {\r\n    target.facets = target.facets.filter((facet) => {\r\n      return (\r\n        !target.pagination ||\r\n        !target.pagination.totalResults ||\r\n        ((!facet.hasOwnProperty('visible') || facet.visible) &&\r\n          facet.values &&\r\n          facet.values.find((value) => {\r\n            return (\r\n              value.selected || value.count < target.pagination.totalResults\r\n            );\r\n          }))\r\n      );\r\n    });\r\n  }\r\n\r\n  /*\r\n   * In case there are so-called `topValues` given for the facet values,\r\n   * values are obsolete.\r\n   *\r\n   * `topValues` is a feature in Adaptive Search which can limit a large\r\n   * amount of facet values to a small set (5 by default). As long as the backend\r\n   * provides all facet values AND topValues, we normalize the data to not bother\r\n   * the UI with this specific feature.\r\n   */\r\n  private normalizeFacetValues(target: ProductSearchPage): void {\r\n    if (target.facets) {\r\n      target.facets = target.facets.map((facetSource: Facet) => {\r\n        const { topValues, ...facetTarget } = facetSource;\r\n        facetTarget.topValueCount = topValues\r\n          ? topValues.length\r\n          : this.DEFAULT_TOP_VALUES;\r\n        return facetTarget;\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ProductReference } from '../../../../model/product.model';\r\nimport { Occ } from '../../../occ-models/occ.models';\r\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\r\nimport {\r\n  Converter,\r\n  ConverterService,\r\n} from '../../../../util/converter.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OccProductReferencesListNormalizer\r\n  implements Converter<Occ.ProductReferenceList, ProductReference[]> {\r\n  constructor(private converter: ConverterService) {}\r\n\r\n  convert(\r\n    source: Occ.ProductReferenceList,\r\n    target: ProductReference[] = []\r\n  ): ProductReference[] {\r\n    if (target === undefined) {\r\n      target = { ...(source as any) };\r\n    }\r\n\r\n    if (source && source.references) {\r\n      target = source.references.map((reference) => ({\r\n        ...reference,\r\n        target: this.converter.convert(reference.target, PRODUCT_NORMALIZER),\r\n      }));\r\n\r\n      return target;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductNameNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.name) {\n      target.name = this.normalize(source.name);\n      target.nameHtml = source.name;\n    }\n    return target;\n  }\n\n  protected normalize(name: string): string {\n    return name.replace(/<[^>]*>/g, '');\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { ProductReference } from '../../../model/product.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const PRODUCT_REFERENCES_NORMALIZER = new InjectionToken<\n  Converter<any, ProductReference[]>\n>('ProductReferencesListNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\n\n@Injectable()\nexport class OccProductReferencesAdapter implements ProductReferencesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, referenceType, pageSize))\n      .pipe(this.converter.pipeable(PRODUCT_REFERENCES_NORMALIZER));\n  }\n\n  protected getEndpoint(\n    code: string,\n    reference?: string,\n    pageSize?: number\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productReferences',\n      {\n        productCode: code,\n      },\n      { referenceType: reference, pageSize }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Review } from '../../../model/product.model';\n\nexport const PRODUCT_REVIEW_NORMALIZER = new InjectionToken<\n  Converter<any, Review>\n>('ProductReviewNormalizer');\n\nexport const PRODUCT_REVIEW_SERIALIZER = new InjectionToken<\n  Converter<Review, any>\n>('ProductReviewSerializer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { pluck } from 'rxjs/operators';\r\nimport { Review } from '../../../model/product.model';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport {\r\n  PRODUCT_REVIEW_NORMALIZER,\r\n  PRODUCT_REVIEW_SERIALIZER,\r\n} from '../../../product/connectors/reviews/converters';\r\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\r\n\r\n@Injectable()\r\nexport class OccProductReviewsAdapter implements ProductReviewsAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpoints: OccEndpointsService,\r\n    protected converter: ConverterService\r\n  ) {}\r\n\r\n  load(productCode: string, maxCount?: number): Observable<Review[]> {\r\n    return this.http\r\n      .get(this.getEndpoint(productCode, maxCount))\r\n      .pipe(\r\n        pluck('reviews'),\r\n        this.converter.pipeableMany(PRODUCT_REVIEW_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  post(productCode: string, review: any): Observable<Review> {\r\n    review = this.converter.convert(review, PRODUCT_REVIEW_SERIALIZER);\r\n\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n\r\n    const body = new URLSearchParams();\r\n    body.append('headline', review.headline);\r\n    body.append('comment', review.comment);\r\n    body.append('rating', review.rating.toString());\r\n    body.append('alias', review.alias);\r\n\r\n    return this.http.post(this.getEndpoint(productCode), body.toString(), {\r\n      headers,\r\n    });\r\n  }\r\n\r\n  protected getEndpoint(code: string, maxCount?: number): string {\r\n    return this.occEndpoints.getUrl(\r\n      'productReviews',\r\n      {\r\n        productCode: code,\r\n      },\r\n      { maxCount }\r\n    );\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport const PRODUCT_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, ProductSearchPage>\n>('ProductSearchPageNormalizer');\n\nexport const PRODUCT_SUGGESTION_NORMALIZER = new InjectionToken<\n  Converter<any, Suggestion>\n>('ProductSuggestionNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  PRODUCT_SEARCH_PAGE_NORMALIZER,\n  PRODUCT_SUGGESTION_NORMALIZER,\n} from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { SearchConfig } from '../../../product/model/search-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst DEFAULT_SEARCH_CONFIG: SearchConfig = {\n  pageSize: 20,\n};\n\n@Injectable()\nexport class OccProductSearchAdapter implements ProductSearchAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: SearchConfig = DEFAULT_SEARCH_CONFIG\n  ): Observable<ProductSearchPage> {\n    return this.http\n      .get(this.getSearchEndpoint(query, searchConfig))\n      .pipe(this.converter.pipeable(PRODUCT_SEARCH_PAGE_NORMALIZER));\n  }\n\n  loadSuggestions(\n    term: string,\n    pageSize: number = 3\n  ): Observable<Suggestion[]> {\n    return this.http\n      .get(this.getSuggestionEndpoint(term, pageSize.toString()))\n      .pipe(\n        pluck('suggestions'),\n        this.converter.pipeableMany(PRODUCT_SUGGESTION_NORMALIZER)\n      );\n  }\n\n  protected getSearchEndpoint(\n    query: string,\n    searchConfig: SearchConfig\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productSearch',\n      {},\n      {\n        query,\n        pageSize: searchConfig.pageSize,\n        currentPage: searchConfig.currentPage,\n        sort: searchConfig.sortCode,\n      }\n    );\n  }\n\n  protected getSuggestionEndpoint(term: string, max: string): string {\n    return this.occEndpoints.getUrl('productSuggestions', {}, { term, max });\n  }\n}\n","import { deepMerge, isObject } from '../../config/utils/deep-merge';\r\n\r\n/**\r\n * Merge occ fields parameters\r\n *\r\n * @param fields Fields definition as string or object\r\n */\r\nexport function mergeFields(fields: (string | object)[]): string {\r\n  const parsedFields = fields.map((f) =>\r\n    typeof f === 'string' ? parseFields(f) : f\r\n  );\r\n  const mergedFields = optimizeFields(deepMerge({}, ...parsedFields));\r\n  return stringifyFields(mergedFields);\r\n}\r\n\r\n/**\r\n * Optimize fields definition by removing not needed groups\r\n *\r\n * @param fields\r\n */\r\nexport function optimizeFields(fields: object = {}): object {\r\n  const keys = Object.keys(fields);\r\n  if (keys.includes('FULL')) {\r\n    delete fields['DEFAULT'];\r\n    delete fields['BASIC'];\r\n  } else if (keys.includes('DEFAULT')) {\r\n    delete fields['BASIC'];\r\n  }\r\n  Object.keys(fields).forEach((key) => {\r\n    fields[key] = optimizeFields(fields[key]);\r\n  });\r\n  return fields;\r\n}\r\n\r\n/**\r\n * Parse string field definition to an AST object\r\n *\r\n * @param fields Fields string definition\r\n * @param startIndex Used for recurrence\r\n */\r\nexport function parseFields(\r\n  fields: string,\r\n  startIndex = 0\r\n): [object, number] | object {\r\n  const parsedFields = {};\r\n\r\n  let i = startIndex;\r\n  while (i < fields.length) {\r\n    if (fields[i] === ',') {\r\n      if (i > startIndex) {\r\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\r\n      }\r\n      startIndex = i + 1;\r\n    } else if (fields[i] === '(') {\r\n      const subFields = parseFields(fields, i + 1);\r\n      if (Array.isArray(subFields)) {\r\n        parsedFields[fields.substr(startIndex, i - startIndex)] = subFields[0];\r\n        startIndex = subFields[1];\r\n        i = startIndex - 1;\r\n      } else {\r\n        return parsedFields;\r\n      }\r\n    } else if (fields[i] === ')') {\r\n      if (i > startIndex) {\r\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\r\n      }\r\n      return [parsedFields, i + 1];\r\n    }\r\n    i++;\r\n  }\r\n\r\n  if (startIndex < fields.length) {\r\n    parsedFields[fields.substr(startIndex, i - startIndex)] = {};\r\n  }\r\n\r\n  return parsedFields;\r\n}\r\n\r\n/**\r\n * Convert AST object fields definition to string representation\r\n *\r\n * @param fields\r\n */\r\nexport function stringifyFields(fields: object): string {\r\n  return Object.keys(fields)\r\n    .map((key) => {\r\n      const subFields = stringifyFields(fields[key]);\r\n      return subFields ? `${key}(${subFields})` : key;\r\n    })\r\n    .join(',');\r\n}\r\n\r\n/**\r\n * Extract part of the object described by fields definition\r\n *\r\n * @param data\r\n * @param fields\r\n */\r\nexport function extractFields<T>(data: T, fields: string | object): T {\r\n  const parsedFields =\r\n    typeof fields === 'string' ? parseFields(fields) : fields;\r\n  return getObjectPart<T>(data, parsedFields);\r\n}\r\n\r\nfunction getObjectPart<T>(data: T, fields: object): T {\r\n  if (!isObject(data)) {\r\n    return data;\r\n  }\r\n\r\n  const keys = Object.keys(fields);\r\n\r\n  if (\r\n    keys.length === 0 ||\r\n    // we should not extract parts of the object with ambiguous fields definitions\r\n    keys.find((el) => el === 'BASIC' || el === 'DEFAULT' || el === 'FULL')\r\n  ) {\r\n    return data;\r\n  }\r\n\r\n  const result = {} as T;\r\n\r\n  keys.forEach((key) => {\r\n    if (data.hasOwnProperty(key)) {\r\n      result[key] = getObjectPart(data[key], fields[key]);\r\n    }\r\n  });\r\n\r\n  return result;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { mergeFields, parseFields } from '../utils/occ-fields';\r\nimport { ScopedData } from '../../model/scoped-data';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nexport interface ScopedDataWithUrl {\r\n  /** Url (with fields) to load scoped data */\r\n  url?: string;\r\n  /** scoped data model */\r\n  scopedData: ScopedData<any>;\r\n}\r\n\r\n/**\r\n * Intermediate model to accommodate all data needed to perform occ fields optimizations\r\n * wrapping ScopedData with url and fields\r\n */\r\nexport interface OccFieldsModel extends ScopedDataWithUrl {\r\n  /** extracted fields object, used to extract data from broader model */\r\n  fields?: object;\r\n}\r\n\r\n/**\r\n * Grouped rest calls with optimal urls\r\n *\r\n * One url groups all scopes it covers with related occFieldsModels\r\n */\r\nexport interface OccOptimimalUrlGroups {\r\n  [optimalUrl: string]: {\r\n    [scope: string]: OccFieldsModel;\r\n  };\r\n}\r\n\r\n/**\r\n * Helper service for optimizing endpoint calls to occ backend\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OccFieldsService {\r\n  constructor(protected http: HttpClient) {}\r\n\r\n  protected FIELDS_PARAM = 'fields';\r\n\r\n  /**\r\n   * Merge similar occ endpoints calls by merging fields parameter\r\n   *\r\n   * We assume that different scopes are defined by different fields parameters,\r\n   * so we are grouping all requests with the same urls (except fields definition)\r\n   * and merging into one request with fields that will satisfy all separate ones.\r\n   *\r\n   * @param models\r\n   */\r\n  getOptimalUrlGroups(models: ScopedDataWithUrl[]): OccOptimimalUrlGroups {\r\n    const groupedByUrls: OccOptimimalUrlGroups = {};\r\n    for (const model of models as OccFieldsModel[]) {\r\n      const [urlPart, fields] = this.splitFields(model.url);\r\n      if (!groupedByUrls[urlPart]) {\r\n        groupedByUrls[urlPart] = {};\r\n      }\r\n      model.fields = fields ? parseFields(fields) : {};\r\n      groupedByUrls[urlPart][model.scopedData.scope] = model;\r\n    }\r\n\r\n    const mergedUrls: OccOptimimalUrlGroups = {};\r\n    for (const [url, group] of Object.entries(groupedByUrls)) {\r\n      const urlWithFields = this.getUrlWithFields(\r\n        url,\r\n        Object.values(group).map((lo) => lo.fields)\r\n      );\r\n      mergedUrls[urlWithFields] = group;\r\n    }\r\n\r\n    return mergedUrls;\r\n  }\r\n\r\n  /**\r\n   * Extract fields parameter from occ endpoint url\r\n   *\r\n   * @param urlWithFields\r\n   */\r\n  private splitFields(urlWithFields: string): [string, string] {\r\n    const [url, params] = urlWithFields.split('?');\r\n\r\n    const paramsMap = {};\r\n\r\n    if (params) {\r\n      params.split('&').map((param) => {\r\n        const keyValue = param.split('=');\r\n        paramsMap[keyValue[0]] = keyValue[1];\r\n      });\r\n    }\r\n\r\n    const nonFieldsParams = Object.keys(paramsMap)\r\n      .sort()\r\n      .reduce((id, par) => {\r\n        if (par !== this.FIELDS_PARAM) {\r\n          id.push(paramsMap[par] ? `${par}=${paramsMap[par]}` : par);\r\n        }\r\n        return id;\r\n      }, []);\r\n\r\n    const nonFields = nonFieldsParams.join('&');\r\n\r\n    return [\r\n      nonFields ? `${url}?${nonFields}` : url,\r\n      paramsMap[this.FIELDS_PARAM],\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Combine url with field parameters\r\n   *\r\n   * @param url\r\n   * @param fields\r\n   */\r\n  private getUrlWithFields(url: string, fields: (string | object)[]): string {\r\n    const mergedFields = mergeFields(fields);\r\n\r\n    if (mergedFields) {\r\n      url += url.includes('?') ? '&' : '?';\r\n      url += `${this.FIELDS_PARAM}=${mergedFields}`;\r\n    }\r\n\r\n    return url;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ScopedData } from '../../model/scoped-data';\r\nimport { map, shareReplay } from 'rxjs/operators';\r\nimport { extractFields } from '../utils/occ-fields';\r\nimport {\r\n  OccFieldsModel,\r\n  OccFieldsService,\r\n  ScopedDataWithUrl,\r\n} from './occ-fields.service';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OccRequestsOptimizerService {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occFields: OccFieldsService\r\n  ) {}\r\n\r\n  /**\r\n   * Optimize occ endpoint calls merging requests to the same url by merging field parameters\r\n   *\r\n   * @param scopedDataWithUrls\r\n   * @param dataFactory\r\n   */\r\n  scopedDataLoad<T>(\r\n    scopedDataWithUrls: ScopedDataWithUrl[],\r\n    dataFactory?: (url: string) => Observable<T>\r\n  ): ScopedData<T>[] {\r\n    const result = [];\r\n\r\n    if (!dataFactory) {\r\n      dataFactory = (url) => this.http.get<any>(url);\r\n    }\r\n\r\n    const mergedUrls = this.occFields.getOptimalUrlGroups(scopedDataWithUrls);\r\n\r\n    Object.entries(mergedUrls).forEach(\r\n      ([url, groupedModelsSet]: [\r\n        string,\r\n        {\r\n          [scope: string]: OccFieldsModel;\r\n        }\r\n      ]) => {\r\n        const groupedModels = Object.values(groupedModelsSet);\r\n\r\n        if (groupedModels.length === 1) {\r\n          // only one scope for url, we can pass the data straightaway\r\n          result.push({\r\n            ...groupedModels[0].scopedData,\r\n            data$: dataFactory(url),\r\n          });\r\n        } else {\r\n          // multiple scopes per url\r\n          // we have to split the model per each scope\r\n          const data$ = dataFactory(url).pipe(shareReplay(1));\r\n\r\n          groupedModels.forEach((modelData) => {\r\n            result.push({\r\n              ...modelData.scopedData,\r\n              data$: data$.pipe(\r\n                map((data) => extractFields<T>(data, modelData.fields))\r\n              ),\r\n            });\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    return result;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\r\nimport { Product } from '../../../model/product.model';\r\nimport { ScopedProductData } from '../../../product/connectors/product/scoped-product-data';\r\nimport { ScopedDataWithUrl } from '../../services/occ-fields.service';\r\nimport { Occ } from '../../occ-models';\r\nimport { OccRequestsOptimizerService } from '../../services/occ-requests-optimizer.service';\r\n\r\n@Injectable()\r\nexport class OccProductAdapter implements ProductAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpoints: OccEndpointsService,\r\n    protected converter: ConverterService,\r\n    protected requestsOptimizer: OccRequestsOptimizerService\r\n  ) {}\r\n\r\n  load(productCode: string, scope?: string): Observable<Product> {\r\n    return this.http\r\n      .get(this.getEndpoint(productCode, scope))\r\n      .pipe(this.converter.pipeable(PRODUCT_NORMALIZER));\r\n  }\r\n\r\n  loadMany(products: ScopedProductData[]): ScopedProductData[] {\r\n    const scopedDataWithUrls: ScopedDataWithUrl[] = products.map((model) => ({\r\n      scopedData: model,\r\n      url: this.getEndpoint(model.code, model.scope),\r\n    }));\r\n\r\n    return this.requestsOptimizer\r\n      .scopedDataLoad<Occ.Product>(scopedDataWithUrls)\r\n      .map(\r\n        (scopedProduct) =>\r\n          ({\r\n            ...scopedProduct,\r\n            data$: scopedProduct.data$.pipe(\r\n              this.converter.pipeable(PRODUCT_NORMALIZER)\r\n            ),\r\n          } as ScopedProductData)\r\n      );\r\n  }\r\n\r\n  protected getEndpoint(code: string, scope?: string): string {\r\n    return this.occEndpoints.getUrl(\r\n      'product',\r\n      {\r\n        productCode: code,\r\n      },\r\n      undefined,\r\n      scope\r\n    );\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from './scoped-product-data';\n\nexport abstract class ProductAdapter {\n  /**\n   * Abstract method used to load product's details data.\n   * Product's data can be loaded from alternative sources, as long as the structure\n   * converts to the `Product`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param scope The product scope to load\n   */\n  abstract load(productCode: string, scope?: string): Observable<Product>;\n\n  /**\n   * Abstract method used to load data for multiple product and scopes\n   * Adapter is able to optimize necessary backend calls and load\n   * products in the most efficient way possible.\n   *\n   * @param products\n   */\n  abstract loadMany?(products: ScopedProductData[]): ScopedProductData[];\n}\n","import { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\n\nexport abstract class ProductReferencesAdapter {\n  /**\n   * Abstract method used to load product references for a given product.\n   * References can be loaded from alternative sources, as long as the structure\n   * converts to the `ProductReference[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param referenceType Reference type according to enum ProductReferenceTypeEnum\n   * @param pageSize Maximum number of product refrence to load\n   */\n  abstract load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Review } from '../../../model/product.model';\n\nexport abstract class ProductReviewsAdapter {\n  /**\n   * Abstract method used to load reviews for a given product.\n   * Reviews can be loaded from alternative sources, as long as the structure\n   * converts to the `Review[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param maxCount Maximum number of review to load\n   */\n  abstract load(productCode: string, maxCount?: number): Observable<Review[]>;\n\n  /**\n   * Abstract method used to post review for a given product.\n   *\n   * @param productCode The `productCode` for given product\n   * @param review Review to post\n   */\n  abstract post(productCode: string, review: any): Observable<Review>;\n}\n","import { SearchConfig } from '../../model/search-config';\n\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport abstract class ProductSearchAdapter {\n  abstract search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage>;\n\n  abstract loadSuggestions(\n    term: string,\n    pageSize?: number\n  ): Observable<Suggestion[]>;\n}\n","export enum ProductScope {\n  LIST = 'list',\n  DETAILS = 'details',\n  ATTRIBUTES = 'attributes',\n  VARIANTS = 'variants',\n}\n","import { ProductScope } from '../../../product/model/product-scope';\r\nimport { OccConfig } from '../../config/occ-config';\r\n\r\nexport const defaultOccProductConfig: OccConfig = {\r\n  backend: {\r\n    occ: {\r\n      endpoints: {\r\n        product: {\r\n          default:\r\n            'products/${productCode}?fields=DEFAULT,averageRating,images(FULL),classifications,manufacturer,numberOfReviews,categories(FULL),baseOptions,baseProduct,variantOptions,variantType',\r\n          list:\r\n            'products/${productCode}?fields=code,name,summary,price(formattedValue),images(DEFAULT,galleryIndex)',\r\n          details:\r\n            'products/${productCode}?fields=averageRating,stock(DEFAULT),description,availableForPickup,code,url,price(DEFAULT),numberOfReviews,manufacturer,categories(FULL),priceRange,multidimensional,configuratorType,configurable,tags,images(FULL)',\r\n          attributes: 'products/${productCode}?fields=classifications',\r\n          variants:\r\n            'products/${productCode}?fields=name,purchasable,baseOptions(DEFAULT),baseProduct,variantOptions(DEFAULT),variantType',\r\n        },\r\n        productReviews: 'products/${productCode}/reviews',\r\n        // Uncomment this when occ gets configured\r\n        // productReferences:\r\n        //   'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))&referenceType=${referenceType}',\r\n        productReferences:\r\n          'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))',\r\n        // tslint:disable:max-line-length\r\n        productSearch:\r\n          'products/search?fields=products(code,name,summary,price(FULL),images(DEFAULT),stock(FULL),averageRating,variantOptions),facets,breadcrumbs,pagination(DEFAULT),sorts(DEFAULT),freeTextSearch,currentQuery',\r\n        // tslint:enable\r\n        productSuggestions: 'products/suggestions',\r\n      },\r\n    },\r\n    loadingScopes: {\r\n      product: {\r\n        details: {\r\n          include: [ProductScope.LIST, ProductScope.VARIANTS],\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '../../../config/config.module';\r\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\r\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\r\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\r\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\r\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\r\nimport { PRODUCT_SEARCH_PAGE_NORMALIZER } from '../../../product/connectors/search/converters';\r\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\r\nimport { OccProductReferencesListNormalizer } from './converters/occ-product-references-list-normalizer';\r\nimport { OccProductSearchPageNormalizer } from './converters/occ-product-search-page-normalizer';\r\nimport { ProductImageNormalizer } from './converters/product-image-normalizer';\r\nimport { OccProductReferencesAdapter } from './occ-product-references.adapter';\r\nimport { OccProductReviewsAdapter } from './occ-product-reviews.adapter';\r\nimport { OccProductSearchAdapter } from './occ-product-search.adapter';\r\nimport { OccProductAdapter } from './occ-product.adapter';\r\nimport { ProductNameNormalizer } from './converters/product-name-normalizer';\r\nimport { defaultOccProductConfig } from './default-occ-product-config';\r\nimport './product-occ-config';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, HttpClientModule],\r\n  providers: [\r\n    provideDefaultConfig(defaultOccProductConfig),\r\n    {\r\n      provide: ProductAdapter,\r\n      useClass: OccProductAdapter,\r\n    },\r\n    {\r\n      provide: PRODUCT_NORMALIZER,\r\n      useExisting: ProductImageNormalizer,\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: PRODUCT_NORMALIZER,\r\n      useExisting: ProductNameNormalizer,\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: ProductReferencesAdapter,\r\n      useClass: OccProductReferencesAdapter,\r\n    },\r\n    {\r\n      provide: PRODUCT_REFERENCES_NORMALIZER,\r\n      useExisting: OccProductReferencesListNormalizer,\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: ProductSearchAdapter,\r\n      useClass: OccProductSearchAdapter,\r\n    },\r\n    {\r\n      provide: PRODUCT_SEARCH_PAGE_NORMALIZER,\r\n      useExisting: OccProductSearchPageNormalizer,\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: ProductReviewsAdapter,\r\n      useClass: OccProductReviewsAdapter,\r\n    },\r\n  ],\r\n})\r\nexport class ProductOccModule {}\r\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { Currency, Language } from '../../model/misc.model';\nimport { Country, Region } from '../../model/address.model';\n\nexport const LANGUAGE_NORMALIZER = new InjectionToken<Converter<any, Language>>(\n  'LanguageNormalizer'\n);\n\nexport const CURRENCY_NORMALIZER = new InjectionToken<Converter<any, Currency>>(\n  'CurrencyNormalizer'\n);\n\nexport const COUNTRY_NORMALIZER = new InjectionToken<Converter<any, Country>>(\n  'CountryNormalizer'\n);\n\nexport const REGION_NORMALIZER = new InjectionToken<Converter<any, Region>>(\n  'RegionNormalizer'\n);\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Country, CountryType, Region } from '../../../model/address.model';\r\nimport { BaseSite, Currency, Language } from '../../../model/misc.model';\r\nimport {\r\n  COUNTRY_NORMALIZER,\r\n  CURRENCY_NORMALIZER,\r\n  LANGUAGE_NORMALIZER,\r\n  REGION_NORMALIZER,\r\n} from '../../../site-context/connectors/converters';\r\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { Occ } from '../../occ-models/occ.models';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\n\r\n@Injectable()\r\nexport class OccSiteAdapter implements SiteAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpointsService: OccEndpointsService,\r\n    protected converterService: ConverterService\r\n  ) {}\r\n\r\n  loadLanguages(): Observable<Language[]> {\r\n    return this.http\r\n      .get<Occ.LanguageList>(this.occEndpointsService.getUrl('languages'))\r\n      .pipe(\r\n        map((languageList) => languageList.languages),\r\n        this.converterService.pipeableMany(LANGUAGE_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  loadCurrencies(): Observable<Currency[]> {\r\n    return this.http\r\n      .get<Occ.CurrencyList>(this.occEndpointsService.getUrl('currencies'))\r\n      .pipe(\r\n        map((currencyList) => currencyList.currencies),\r\n        this.converterService.pipeableMany(CURRENCY_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  loadCountries(type?: CountryType): Observable<Country[]> {\r\n    return this.http\r\n      .get<Occ.CountryList>(\r\n        this.occEndpointsService.getUrl(\r\n          'countries',\r\n          undefined,\r\n          type ? { type } : undefined\r\n        )\r\n      )\r\n      .pipe(\r\n        map((countryList) => countryList.countries),\r\n        this.converterService.pipeableMany(COUNTRY_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  loadRegions(countryIsoCode: string): Observable<Region[]> {\r\n    return this.http\r\n      .get<Occ.RegionList>(\r\n        this.occEndpointsService.getUrl('regions', { isoCode: countryIsoCode })\r\n      )\r\n      .pipe(\r\n        map((regionList) => regionList.regions),\r\n        this.converterService.pipeableMany(REGION_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  loadBaseSite(): Observable<BaseSite> {\r\n    const baseUrl = this.occEndpointsService.getBaseEndpoint();\r\n    const urlSplits = baseUrl.split('/');\r\n    const activeSite = urlSplits.pop();\r\n    const url = urlSplits.join('/') + '/basesites';\r\n\r\n    const params = new HttpParams({\r\n      fromString: 'fields=FULL',\r\n    });\r\n\r\n    return this.http\r\n      .get<{ baseSites: BaseSite[] }>(url, { params: params })\r\n      .pipe(\r\n        map((siteList) => {\r\n          return siteList.baseSites.find((site) => site.uid === activeSite);\r\n        })\r\n      );\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\n\nexport abstract class SiteAdapter {\n  /**\n   * Abstract method used to load languages.\n   */\n  abstract loadLanguages(): Observable<Language[]>;\n\n  /**\n   * Abstract method used to load currencies.\n   */\n  abstract loadCurrencies(): Observable<Currency[]>;\n\n  /**\n   * Abstract method used to get countries with optional type.\n   */\n  abstract loadCountries(type?: CountryType): Observable<Country[]>;\n\n  /**\n   * Abstract method used to get regions for a country.\n   */\n  abstract loadRegions(countryIsoCode: string): Observable<Region[]>;\n\n  /**\n   * Abstract method used to get base site data.\n   */\n  abstract loadBaseSite(): Observable<BaseSite>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccSiteContextConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        languages: 'languages',\n        currencies: 'currencies',\n        countries: 'countries',\n        regions:\n          'countries/${isoCode}/regions?fields=regions(name,isocode,isocodeShort)',\n      },\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, take, tap } from 'rxjs/operators';\r\nimport { Currency } from '../../model/misc.model';\r\nimport { WindowRef } from '../../window/window-ref';\r\nimport {\r\n  getContextParameterDefault,\r\n  getContextParameterValues,\r\n} from '../config/context-config-utils';\r\nimport { SiteContextConfig } from '../config/site-context-config';\r\nimport { CURRENCY_CONTEXT_ID } from '../providers/context-ids';\r\nimport { SiteContextActions } from '../store/actions/index';\r\nimport { SiteContextSelectors } from '../store/selectors/index';\r\nimport { StateWithSiteContext } from '../store/state';\r\nimport { SiteContext } from './site-context.interface';\r\n\r\n/**\r\n * Facade that provides easy access to curreny state, actions and selectors.\r\n */\r\n@Injectable()\r\nexport class CurrencyService implements SiteContext<Currency> {\r\n  private sessionStorage: Storage;\r\n\r\n  constructor(\r\n    protected store: Store<StateWithSiteContext>,\r\n    winRef: WindowRef,\r\n    protected config: SiteContextConfig\r\n  ) {\r\n    this.sessionStorage = winRef.sessionStorage;\r\n  }\r\n\r\n  /**\r\n   * Represents all the currencies supported by the current store.\r\n   */\r\n  getAll(): Observable<Currency[]> {\r\n    return this.store.pipe(\r\n      select(SiteContextSelectors.getAllCurrencies),\r\n      tap((currencies) => {\r\n        if (!currencies) {\r\n          this.store.dispatch(new SiteContextActions.LoadCurrencies());\r\n        }\r\n      }),\r\n      filter((currenies) => Boolean(currenies))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Represents the isocode of the active currency.\r\n   */\r\n  getActive(): Observable<string> {\r\n    return this.store.pipe(\r\n      select(SiteContextSelectors.getActiveCurrency),\r\n      filter((active) => Boolean(active))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sets the active language.\r\n   */\r\n  setActive(isocode: string) {\r\n    return this.store\r\n      .pipe(select(SiteContextSelectors.getActiveCurrency), take(1))\r\n      .subscribe((activeCurrency) => {\r\n        if (activeCurrency !== isocode) {\r\n          this.store.dispatch(\r\n            new SiteContextActions.SetActiveCurrency(isocode)\r\n          );\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Initials the active currency. The active currency is either given\r\n   * by the last visit (stored in session storage) or by the\r\n   * default session currency of the store.\r\n   */\r\n  initialize() {\r\n    let value;\r\n    this.getActive()\r\n      .subscribe((val) => (value = val))\r\n      .unsubscribe();\r\n    if (value) {\r\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\r\n      return;\r\n    }\r\n\r\n    const sessionCurrency =\r\n      this.sessionStorage && this.sessionStorage.getItem('currency');\r\n    if (\r\n      sessionCurrency &&\r\n      getContextParameterValues(this.config, CURRENCY_CONTEXT_ID).includes(\r\n        sessionCurrency\r\n      )\r\n    ) {\r\n      this.setActive(sessionCurrency);\r\n    } else {\r\n      this.setActive(\r\n        getContextParameterDefault(this.config, CURRENCY_CONTEXT_ID)\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, take, tap } from 'rxjs/operators';\r\nimport { Language } from '../../model/misc.model';\r\nimport { WindowRef } from '../../window/window-ref';\r\nimport {\r\n  getContextParameterDefault,\r\n  getContextParameterValues,\r\n} from '../config/context-config-utils';\r\nimport { SiteContextConfig } from '../config/site-context-config';\r\nimport { LANGUAGE_CONTEXT_ID } from '../providers/context-ids';\r\nimport { SiteContextActions } from '../store/actions/index';\r\nimport { SiteContextSelectors } from '../store/selectors/index';\r\nimport { StateWithSiteContext } from '../store/state';\r\nimport { SiteContext } from './site-context.interface';\r\n\r\n/**\r\n * Facade that provides easy access to language state, actions and selectors.\r\n */\r\n@Injectable()\r\nexport class LanguageService implements SiteContext<Language> {\r\n  private sessionStorage: Storage;\r\n\r\n  constructor(\r\n    protected store: Store<StateWithSiteContext>,\r\n    winRef: WindowRef,\r\n    protected config: SiteContextConfig\r\n  ) {\r\n    this.sessionStorage = winRef.sessionStorage;\r\n  }\r\n\r\n  /**\r\n   * Represents all the languages supported by the current store.\r\n   */\r\n  getAll(): Observable<Language[]> {\r\n    return this.store.pipe(\r\n      select(SiteContextSelectors.getAllLanguages),\r\n      tap((languages) => {\r\n        if (!languages) {\r\n          this.store.dispatch(new SiteContextActions.LoadLanguages());\r\n        }\r\n      }),\r\n      filter((languages) => Boolean(languages))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Represents the isocode of the active language.\r\n   */\r\n  getActive(): Observable<string> {\r\n    return this.store.pipe(\r\n      select(SiteContextSelectors.getActiveLanguage),\r\n      filter((active) => Boolean(active))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sets the active language.\r\n   */\r\n  setActive(isocode: string) {\r\n    return this.store\r\n      .pipe(select(SiteContextSelectors.getActiveLanguage), take(1))\r\n      .subscribe((activeLanguage) => {\r\n        if (activeLanguage !== isocode) {\r\n          this.store.dispatch(\r\n            new SiteContextActions.SetActiveLanguage(isocode)\r\n          );\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Initials the active language. The active language is either given\r\n   * by the last visit (stored in session storage) or by the\r\n   * default session language of the store.\r\n   */\r\n  initialize() {\r\n    let value;\r\n    this.getActive()\r\n      .subscribe((val) => (value = val))\r\n      .unsubscribe();\r\n    if (value) {\r\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\r\n      return;\r\n    }\r\n\r\n    const sessionLanguage =\r\n      this.sessionStorage && this.sessionStorage.getItem('language');\r\n    if (\r\n      sessionLanguage &&\r\n      getContextParameterValues(this.config, LANGUAGE_CONTEXT_ID).includes(\r\n        sessionLanguage\r\n      )\r\n    ) {\r\n      this.setActive(sessionLanguage);\r\n    } else {\r\n      this.setActive(\r\n        getContextParameterDefault(this.config, LANGUAGE_CONTEXT_ID)\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { CurrencyService } from '../../../site-context/facade/currency.service';\r\nimport { LanguageService } from '../../../site-context/facade/language.service';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\nimport { SiteContextConfig } from '../../../site-context/config/site-context-config';\r\nimport { getContextParameterDefault } from '../../../site-context/config/context-config-utils';\r\nimport {\r\n  CURRENCY_CONTEXT_ID,\r\n  LANGUAGE_CONTEXT_ID,\r\n} from '../../../site-context/providers/context-ids';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SiteContextInterceptor implements HttpInterceptor {\r\n  activeLang: string;\r\n  activeCurr: string;\r\n\r\n  constructor(\r\n    private languageService: LanguageService,\r\n    private currencyService: CurrencyService,\r\n    private occEndpoints: OccEndpointsService,\r\n    private config: SiteContextConfig\r\n  ) {\r\n    this.activeLang = getContextParameterDefault(\r\n      this.config,\r\n      LANGUAGE_CONTEXT_ID\r\n    );\r\n    this.activeCurr = getContextParameterDefault(\r\n      this.config,\r\n      CURRENCY_CONTEXT_ID\r\n    );\r\n\r\n    this.languageService\r\n      .getActive()\r\n      .subscribe((data) => (this.activeLang = data));\r\n\r\n    this.currencyService.getActive().subscribe((data) => {\r\n      this.activeCurr = data;\r\n    });\r\n  }\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    if (request.url.includes(this.occEndpoints.getBaseEndpoint())) {\r\n      request = request.clone({\r\n        setParams: {\r\n          lang: this.activeLang,\r\n          curr: this.activeCurr,\r\n        },\r\n      });\r\n    }\r\n\r\n    return next.handle(request);\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '../../../config/config.module';\r\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\r\nimport { defaultOccSiteContextConfig } from './default-occ-site-context-config';\r\nimport { OccSiteAdapter } from './occ-site.adapter';\r\nimport { SiteContextInterceptor } from './site-context.interceptor';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, HttpClientModule],\r\n  providers: [\r\n    provideDefaultConfig(defaultOccSiteContextConfig),\r\n    {\r\n      provide: SiteAdapter,\r\n      useClass: OccSiteAdapter,\r\n    },\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useExisting: SiteContextInterceptor,\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class SiteContextOccModule {}\r\n","import { StoreFinderSearchConfig } from '../model/search-config';\r\nimport { Observable } from 'rxjs';\r\nimport { PointOfService } from '../../model/point-of-service.model';\r\nimport { GeoPoint } from '../../model/misc.model';\r\nimport {\r\n  StoreFinderSearchPage,\r\n  StoreCount,\r\n} from '../../model/store-finder.model';\r\n\r\nexport abstract class StoreFinderAdapter {\r\n  abstract search(\r\n    query: string,\r\n    searchConfig: StoreFinderSearchConfig,\r\n    longitudeLatitude?: GeoPoint,\r\n    radius?: number\r\n  ): Observable<StoreFinderSearchPage>;\r\n\r\n  abstract loadCounts(): Observable<StoreCount[]>;\r\n\r\n  abstract load(storeId: string): Observable<PointOfService>;\r\n}\r\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccStoreFinderConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        store: 'stores/${storeId}?fields=FULL',\n        stores:\n          'stores?fields=stores(name,displayName,formattedDistance,openingHours(weekDayOpeningList(FULL),specialDayOpeningList(FULL)),geoPoint(latitude,longitude),address(line1,line2,town,region(FULL),postalCode,phone,country,email), features),pagination(DEFAULT),sorts(DEFAULT)',\n        storescounts: 'stores/storescounts',\n      },\n    },\n  },\n};\n","import { StoreFinderSearchConfig } from '../model/search-config';\r\nimport { Observable } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { StoreFinderAdapter } from './store-finder.adapter';\r\nimport { PointOfService } from '../../model/point-of-service.model';\r\nimport { GeoPoint } from '../../model/misc.model';\r\nimport {\r\n  StoreCount,\r\n  StoreFinderSearchPage,\r\n} from '../../model/store-finder.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class StoreFinderConnector {\r\n  constructor(protected adapter: StoreFinderAdapter) {}\r\n\r\n  search(\r\n    query: string,\r\n    searchConfig: StoreFinderSearchConfig,\r\n    longitudeLatitude?: GeoPoint,\r\n    radius?: number\r\n  ): Observable<StoreFinderSearchPage> {\r\n    return this.adapter.search(query, searchConfig, longitudeLatitude, radius);\r\n  }\r\n\r\n  getCounts(): Observable<StoreCount[]> {\r\n    return this.adapter.loadCounts();\r\n  }\r\n\r\n  get(storeId: string): Observable<PointOfService> {\r\n    return this.adapter.load(storeId);\r\n  }\r\n}\r\n","import { Converter } from '../../util/converter.service';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { InjectionToken } from '@angular/core';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport const POINT_OF_SERVICE_NORMALIZER = new InjectionToken<\n  Converter<any, PointOfService>\n>('PointOfServiceNormalizer');\n\nexport const STORE_FINDER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, StoreFinderSearchPage>\n>('StoreFinderSearchPageNormalizer');\n\nexport const STORE_COUNT_NORMALIZER = new InjectionToken<\n  Converter<any, StoreCount>\n>('StoreCountNormalizer');\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { GeoPoint } from '../../../model/misc.model';\r\nimport { PointOfService } from '../../../model/point-of-service.model';\r\nimport {\r\n  StoreCount,\r\n  StoreFinderSearchPage,\r\n} from '../../../model/store-finder.model';\r\nimport {\r\n  POINT_OF_SERVICE_NORMALIZER,\r\n  STORE_COUNT_NORMALIZER,\r\n  STORE_FINDER_SEARCH_PAGE_NORMALIZER,\r\n} from '../../../store-finder/connectors';\r\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\r\nimport { StoreFinderSearchConfig } from '../../../store-finder/model';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { Occ } from '../../occ-models/occ.models';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\n\r\n@Injectable()\r\nexport class OccStoreFinderAdapter implements StoreFinderAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpointsService: OccEndpointsService,\r\n    protected converterService: ConverterService\r\n  ) {}\r\n\r\n  search(\r\n    query: string,\r\n    searchConfig: StoreFinderSearchConfig,\r\n    longitudeLatitude?: GeoPoint,\r\n    radius?: number\r\n  ): Observable<StoreFinderSearchPage> {\r\n    return this.callOccFindStores(\r\n      query,\r\n      searchConfig,\r\n      longitudeLatitude,\r\n      radius\r\n    ).pipe(this.converterService.pipeable(STORE_FINDER_SEARCH_PAGE_NORMALIZER));\r\n  }\r\n\r\n  loadCounts(): Observable<StoreCount[]> {\r\n    return this.http\r\n      .get<Occ.StoreCountList>(this.occEndpointsService.getUrl('storescounts'))\r\n      .pipe(\r\n        map(\r\n          ({ countriesAndRegionsStoreCount }) => countriesAndRegionsStoreCount\r\n        ),\r\n        this.converterService.pipeableMany(STORE_COUNT_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  load(storeId: string): Observable<PointOfService> {\r\n    return this.http\r\n      .get<Occ.PointOfService>(\r\n        this.occEndpointsService.getUrl('store', { storeId })\r\n      )\r\n      .pipe(this.converterService.pipeable(POINT_OF_SERVICE_NORMALIZER));\r\n  }\r\n\r\n  protected callOccFindStores(\r\n    query: string,\r\n    searchConfig: StoreFinderSearchConfig,\r\n    longitudeLatitude?: GeoPoint,\r\n    radius?: number\r\n  ): Observable<Occ.StoreFinderSearchPage> {\r\n    const params = {};\r\n\r\n    if (longitudeLatitude) {\r\n      params['longitude'] = String(longitudeLatitude.longitude);\r\n      params['latitude'] = String(longitudeLatitude.latitude);\r\n      params['radius'] = String(radius);\r\n    } else {\r\n      params['query'] = query;\r\n    }\r\n\r\n    if (searchConfig.pageSize) {\r\n      params['pageSize'] = String(searchConfig.pageSize);\r\n    }\r\n    if (searchConfig.currentPage) {\r\n      params['currentPage'] = String(searchConfig.currentPage);\r\n    }\r\n    if (searchConfig.sort) {\r\n      params['sort'] = searchConfig.sort;\r\n    }\r\n\r\n    return this.http.get<Occ.StoreFinderSearchPage>(\r\n      this.occEndpointsService.getUrl('stores', undefined, params)\r\n    );\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '../../../config/config.module';\r\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\r\nimport { defaultOccStoreFinderConfig } from './default-occ-store-finder-config';\r\nimport { OccStoreFinderAdapter } from './occ-store-finder.adapter';\r\n\r\n@NgModule({\r\n  providers: [\r\n    provideDefaultConfig(defaultOccStoreFinderConfig),\r\n    { provide: StoreFinderAdapter, useClass: OccStoreFinderAdapter },\r\n  ],\r\n})\r\nexport class StoreFinderOccModule {}\r\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport const CONSENT_TEMPLATE_NORMALIZER = new InjectionToken<\n  Converter<any, ConsentTemplate>\n>('ConsentTemplateNormalizer');\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\r\nimport { ConsentTemplate } from '../../../model/consent.model';\r\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { Occ } from '../../occ-models/occ.models';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\n\r\n@Injectable()\r\nexport class OccAnonymousConsentTemplatesAdapter\r\n  implements AnonymousConsentTemplatesAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpoints: OccEndpointsService,\r\n    protected converter: ConverterService\r\n  ) {}\r\n\r\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\r\n    const url = this.occEndpoints.getUrl('anonymousConsentTemplates');\r\n    return this.http.get<Occ.ConsentTemplateList>(url).pipe(\r\n      catchError((error) => throwError(error)),\r\n      map((consentList) => consentList.consentTemplates),\r\n      this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\r\n    );\r\n  }\r\n}\r\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Address, AddressValidation } from '../../../model/address.model';\r\nimport {\r\n  ADDRESS_NORMALIZER,\r\n  ADDRESS_SERIALIZER,\r\n  ADDRESS_VALIDATION_NORMALIZER,\r\n} from '../../../user/connectors/address/converters';\r\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { Occ } from '../../occ-models/occ.models';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\nimport {\r\n  InterceptorUtil,\r\n  USE_CLIENT_TOKEN,\r\n} from '../../utils/interceptor-util';\r\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\r\n\r\n@Injectable()\r\nexport class OccUserAddressAdapter implements UserAddressAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpoints: OccEndpointsService,\r\n    protected converter: ConverterService\r\n  ) {}\r\n\r\n  loadAll(userId: string): Observable<Address[]> {\r\n    const url = this.occEndpoints.getUrl('addresses', { userId });\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n\r\n    return this.http\r\n      .get<Occ.AddressList>(url, { headers })\r\n      .pipe(\r\n        catchError((error: any) => throwError(error)),\r\n        map((addressList) => addressList.addresses),\r\n        this.converter.pipeableMany(ADDRESS_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  add(userId: string, address: Address): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('addresses', { userId });\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\r\n\r\n    return this.http\r\n      .post(url, address, { headers })\r\n      .pipe(catchError((error: any) => throwError(error)));\r\n  }\r\n\r\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('addressDetail', {\r\n      userId,\r\n      addressId,\r\n    });\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\r\n\r\n    return this.http\r\n      .patch(url, address, { headers })\r\n      .pipe(catchError((error: any) => throwError(error)));\r\n  }\r\n\r\n  verify(userId: string, address: Address): Observable<AddressValidation> {\r\n    const url = this.occEndpoints.getUrl('addressVerification', { userId });\r\n    let headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n    if (userId === OCC_USER_ID_ANONYMOUS) {\r\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\r\n    }\r\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\r\n\r\n    return this.http\r\n      .post<AddressValidation>(url, address, { headers })\r\n      .pipe(\r\n        catchError((error: any) => throwError(error)),\r\n        this.converter.pipeable(ADDRESS_VALIDATION_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  delete(userId: string, addressId: string): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('addressDetail', {\r\n      userId,\r\n      addressId,\r\n    });\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n\r\n    return this.http\r\n      .delete(url, { headers })\r\n      .pipe(catchError((error: any) => throwError(error)));\r\n  }\r\n}\r\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { ConsentTemplate } from '../../../model/consent.model';\r\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\r\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { Occ } from '../../occ-models/occ.models';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\n\r\n@Injectable()\r\nexport class OccUserConsentAdapter implements UserConsentAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpoints: OccEndpointsService,\r\n    protected converter: ConverterService\r\n  ) {}\r\n\r\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\r\n    const url = this.occEndpoints.getUrl('consentTemplates', { userId });\r\n    const headers = new HttpHeaders({ 'Cache-Control': 'no-cache' });\r\n    return this.http\r\n      .get<Occ.ConsentTemplateList>(url, { headers })\r\n      .pipe(\r\n        catchError((error: any) => throwError(error)),\r\n        map((consentList) => consentList.consentTemplates),\r\n        this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  giveConsent(\r\n    userId: string,\r\n    consentTemplateId: string,\r\n    consentTemplateVersion: number\r\n  ): Observable<ConsentTemplate> {\r\n    const url = this.occEndpoints.getUrl('consents', { userId });\r\n    const httpParams = new HttpParams()\r\n      .set('consentTemplateId', consentTemplateId)\r\n      .set('consentTemplateVersion', consentTemplateVersion.toString());\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n      'Cache-Control': 'no-cache',\r\n    });\r\n    return this.http\r\n      .post<Occ.ConsentTemplate>(url, httpParams, { headers })\r\n      .pipe(\r\n        catchError((error) => throwError(error)),\r\n        this.converter.pipeable(CONSENT_TEMPLATE_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\r\n    const headers = new HttpHeaders({\r\n      'Cache-Control': 'no-cache',\r\n    });\r\n    const url = this.occEndpoints.getUrl('consentDetail', {\r\n      userId,\r\n      consentId: consentCode,\r\n    });\r\n\r\n    return this.http.delete(url, { headers });\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  OrderHistoryList,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequest,\n} from '../../../model/order.model';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\n\nexport const ORDER_HISTORY_NORMALIZER = new InjectionToken<\n  Converter<any, OrderHistoryList>\n>('OrderHistoryNormalizer');\n\nexport const CONSIGNMENT_TRACKING_NORMALIZER = new InjectionToken<\n  Converter<any, ConsignmentTracking>\n>('ConsignmentTrackingNormalizer');\n\nexport const ORDER_RETURN_REQUEST_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequest>\n>('OrderReturnRequestNormalizer');\n\nexport const ORDER_RETURN_REQUEST_INPUT_SERIALIZER = new InjectionToken<\n  Converter<ReturnRequestEntryInputList, any>\n>('OrderReturnRequestInputSerializer');\n\nexport const ORDER_RETURNS_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequestList>\n>('OrderReturnsNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\r\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\r\nimport {\r\n  CancellationRequestEntryInputList,\r\n  Order,\r\n  OrderHistoryList,\r\n  ReturnRequest,\r\n  ReturnRequestEntryInputList,\r\n  ReturnRequestList,\r\n  ReturnRequestModification,\r\n} from '../../../model/order.model';\r\nimport {\r\n  CONSIGNMENT_TRACKING_NORMALIZER,\r\n  ORDER_HISTORY_NORMALIZER,\r\n  ORDER_RETURNS_NORMALIZER,\r\n  ORDER_RETURN_REQUEST_INPUT_SERIALIZER,\r\n  ORDER_RETURN_REQUEST_NORMALIZER,\r\n} from '../../../user/connectors/order/converters';\r\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { Occ } from '../../occ-models/occ.models';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\nimport {\r\n  InterceptorUtil,\r\n  USE_CLIENT_TOKEN,\r\n} from '../../utils/interceptor-util';\r\nimport {\r\n  OCC_USER_ID_ANONYMOUS,\r\n  OCC_USER_ID_CURRENT,\r\n} from '../../utils/occ-constants';\r\n\r\n@Injectable()\r\nexport class OccUserOrderAdapter implements UserOrderAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpoints: OccEndpointsService,\r\n    protected converter: ConverterService\r\n  ) {}\r\n\r\n  public load(userId: string, orderCode: string): Observable<Order> {\r\n    const url = this.occEndpoints.getUrl('orderDetail', {\r\n      userId,\r\n      orderId: orderCode,\r\n    });\r\n\r\n    let headers = new HttpHeaders();\r\n    if (userId === OCC_USER_ID_ANONYMOUS) {\r\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\r\n    }\r\n\r\n    return this.http\r\n      .get<Occ.Order>(url, { headers })\r\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\r\n  }\r\n\r\n  public loadHistory(\r\n    userId: string,\r\n    pageSize?: number,\r\n    currentPage?: number,\r\n    sort?: string\r\n  ): Observable<OrderHistoryList> {\r\n    const params = {};\r\n    if (pageSize) {\r\n      params['pageSize'] = pageSize.toString();\r\n    }\r\n    if (currentPage) {\r\n      params['currentPage'] = currentPage.toString();\r\n    }\r\n    if (sort) {\r\n      params['sort'] = sort.toString();\r\n    }\r\n\r\n    const url = this.occEndpoints.getUrl('orderHistory', { userId }, params);\r\n\r\n    return this.http\r\n      .get<Occ.OrderHistoryList>(url)\r\n      .pipe(this.converter.pipeable(ORDER_HISTORY_NORMALIZER));\r\n  }\r\n\r\n  public getConsignmentTracking(\r\n    orderCode: string,\r\n    consignmentCode: string,\r\n    userId: string = OCC_USER_ID_CURRENT\r\n  ): Observable<ConsignmentTracking> {\r\n    const url = this.occEndpoints.getUrl('consignmentTracking', {\r\n      userId,\r\n      orderCode,\r\n      consignmentCode,\r\n    });\r\n    return this.http\r\n      .get<ConsignmentTracking>(url)\r\n      .pipe(this.converter.pipeable(CONSIGNMENT_TRACKING_NORMALIZER));\r\n  }\r\n\r\n  public cancel(\r\n    userId: string,\r\n    orderCode: string,\r\n    cancelRequestInput: CancellationRequestEntryInputList\r\n  ): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('cancelOrder', {\r\n      userId,\r\n      orderId: orderCode,\r\n    });\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n\r\n    return this.http\r\n      .post(url, cancelRequestInput, { headers })\r\n      .pipe(catchError((error: any) => throwError(error)));\r\n  }\r\n\r\n  public createReturnRequest(\r\n    userId: string,\r\n    returnRequestInput: ReturnRequestEntryInputList\r\n  ): Observable<ReturnRequest> {\r\n    const url = this.occEndpoints.getUrl('returnOrder', {\r\n      userId,\r\n    });\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n\r\n    returnRequestInput = this.converter.convert(\r\n      returnRequestInput,\r\n      ORDER_RETURN_REQUEST_INPUT_SERIALIZER\r\n    );\r\n\r\n    return this.http.post(url, returnRequestInput, { headers }).pipe(\r\n      catchError((error: any) => throwError(error)),\r\n      this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER)\r\n    );\r\n  }\r\n\r\n  public loadReturnRequestList(\r\n    userId: string,\r\n    pageSize?: number,\r\n    currentPage?: number,\r\n    sort?: string\r\n  ): Observable<ReturnRequestList> {\r\n    const params = {};\r\n    if (pageSize) {\r\n      params['pageSize'] = pageSize.toString();\r\n    }\r\n    if (currentPage) {\r\n      params['currentPage'] = currentPage.toString();\r\n    }\r\n    if (sort) {\r\n      params['sort'] = sort.toString();\r\n    }\r\n\r\n    const url = this.occEndpoints.getUrl('orderReturns', { userId }, params);\r\n\r\n    return this.http\r\n      .get<ReturnRequestList>(url)\r\n      .pipe(this.converter.pipeable(ORDER_RETURNS_NORMALIZER));\r\n  }\r\n\r\n  public loadReturnRequestDetail(\r\n    userId: string,\r\n    returnRequestCode: string\r\n  ): Observable<ReturnRequest> {\r\n    const url = this.occEndpoints.getUrl('orderReturnDetail', {\r\n      userId,\r\n      returnRequestCode,\r\n    });\r\n\r\n    return this.http\r\n      .get<ReturnRequest>(url)\r\n      .pipe(this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER));\r\n  }\r\n\r\n  public cancelReturnRequest(\r\n    userId: string,\r\n    returnRequestCode: string,\r\n    returnRequestModification: ReturnRequestModification\r\n  ): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('cancelReturn', {\r\n      userId,\r\n      returnRequestCode,\r\n    });\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n\r\n    return this.http\r\n      .patch(url, returnRequestModification, { headers })\r\n      .pipe(catchError((error: any) => throwError(error)));\r\n  }\r\n}\r\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { PAYMENT_DETAILS_NORMALIZER } from '../../../checkout/connectors/payment/converters';\r\nimport { PaymentDetails } from '../../../model/cart.model';\r\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { Occ } from '../../occ-models/occ.models';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\n\r\n@Injectable()\r\nexport class OccUserPaymentAdapter implements UserPaymentAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpoints: OccEndpointsService,\r\n    protected converter: ConverterService\r\n  ) {}\r\n\r\n  loadAll(userId: string): Observable<PaymentDetails[]> {\r\n    const url =\r\n      this.occEndpoints.getUrl('paymentDetailsAll', { userId }) + '?saved=true';\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n\r\n    return this.http\r\n      .get<Occ.PaymentDetailsList>(url, { headers })\r\n      .pipe(\r\n        catchError((error: any) => throwError(error)),\r\n        map((methodList) => methodList.payments),\r\n        this.converter.pipeableMany(PAYMENT_DETAILS_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('paymentDetail', {\r\n      userId,\r\n      paymentDetailId: paymentMethodID,\r\n    });\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n\r\n    return this.http\r\n      .delete(url, { headers })\r\n      .pipe(catchError((error: any) => throwError(error)));\r\n  }\r\n\r\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('paymentDetail', {\r\n      userId,\r\n      paymentDetailId: paymentMethodID,\r\n    });\r\n\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n\r\n    return this.http\r\n      .patch(\r\n        url,\r\n        // TODO: Remove billingAddress property\r\n        { billingAddress: { titleCode: 'mr' }, defaultPayment: true },\r\n        { headers }\r\n      )\r\n      .pipe(catchError((error: any) => throwError(error)));\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport const USER_NORMALIZER = new InjectionToken<Converter<any, User>>(\n  'UserNormalizer'\n);\n\nexport const USER_SERIALIZER = new InjectionToken<Converter<User, any>>(\n  'UserSerializer'\n);\n\nexport const USER_SIGN_UP_SERIALIZER = new InjectionToken<\n  Converter<UserSignUp, any>\n>('UserSignUpSerializer');\n\nexport const TITLE_NORMALIZER = new InjectionToken<Converter<any, Title>>(\n  'TitleNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\r\nimport {\r\n  TITLE_NORMALIZER,\r\n  USER_NORMALIZER,\r\n  USER_SERIALIZER,\r\n  USER_SIGN_UP_SERIALIZER,\r\n} from '../../../user/connectors/user/converters';\r\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { Occ } from '../../occ-models';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\nimport {\r\n  InterceptorUtil,\r\n  USE_CLIENT_TOKEN,\r\n} from '../../utils/interceptor-util';\r\n@Injectable()\r\nexport class OccUserAdapter implements UserAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpoints: OccEndpointsService,\r\n    protected converter: ConverterService\r\n  ) {}\r\n\r\n  load(userId: string): Observable<User> {\r\n    const url = this.occEndpoints.getUrl('user', { userId });\r\n    return this.http\r\n      .get<Occ.User>(url)\r\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\r\n  }\r\n\r\n  update(userId: string, user: User): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('user', { userId });\r\n    user = this.converter.convert(user, USER_SERIALIZER);\r\n    return this.http.patch(url, user);\r\n  }\r\n\r\n  register(user: UserSignUp): Observable<User> {\r\n    const url: string = this.occEndpoints.getUrl('userRegister');\r\n    let headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\r\n    user = this.converter.convert(user, USER_SIGN_UP_SERIALIZER);\r\n\r\n    return this.http\r\n      .post<User>(url, user, { headers })\r\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\r\n  }\r\n\r\n  registerGuest(guid: string, password: string): Observable<User> {\r\n    const url: string = this.occEndpoints.getUrl('userRegister');\r\n    let headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\r\n\r\n    const httpParams: HttpParams = new HttpParams()\r\n      .set('guid', guid)\r\n      .set('password', password);\r\n\r\n    return this.http\r\n      .post<User>(url, httpParams, { headers })\r\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\r\n  }\r\n\r\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('userForgotPassword');\r\n    const httpParams: HttpParams = new HttpParams().set(\r\n      'userId',\r\n      userEmailAddress\r\n    );\r\n    let headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\r\n    return this.http.post(url, httpParams, { headers });\r\n  }\r\n\r\n  resetPassword(token: string, newPassword: string): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('userResetPassword');\r\n    let headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\r\n\r\n    return this.http.post(url, { token, newPassword }, { headers });\r\n  }\r\n\r\n  updateEmail(\r\n    userId: string,\r\n    currentPassword: string,\r\n    newUserId: string\r\n  ): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('userUpdateLoginId', { userId });\r\n    const httpParams: HttpParams = new HttpParams()\r\n      .set('password', currentPassword)\r\n      .set('newLogin', newUserId);\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n    return this.http.put(url, httpParams, { headers });\r\n  }\r\n\r\n  updatePassword(\r\n    userId: string,\r\n    oldPassword: string,\r\n    newPassword: string\r\n  ): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('userUpdatePassword', { userId });\r\n    const httpParams: HttpParams = new HttpParams()\r\n      .set('old', oldPassword)\r\n      .set('new', newPassword);\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n    return this.http.put(url, httpParams, { headers });\r\n  }\r\n\r\n  remove(userId: string): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('user', { userId });\r\n    return this.http.delete<User>(url);\r\n  }\r\n\r\n  loadTitles(): Observable<Title[]> {\r\n    const url = this.occEndpoints.getUrl('titles');\r\n    return this.http.get<Occ.TitleList>(url).pipe(\r\n      map((titleList) => titleList.titles),\r\n      this.converter.pipeableMany(TITLE_NORMALIZER)\r\n    );\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../model/consent.model';\n\nexport abstract class AnonymousConsentTemplatesAdapter {\n  /**\n   * Abstract method used to load anonymous consents.\n   */\n  abstract loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport abstract class UserAddressAdapter {\n  abstract loadAll(userId: string): Observable<Address[]>;\n\n  abstract add(userId: string, address: Address): Observable<{}>;\n\n  abstract update(\n    userId: string,\n    addressId: string,\n    address: Address\n  ): Observable<{}>;\n\n  abstract verify(\n    userId: string,\n    address: Address\n  ): Observable<AddressValidation>;\n\n  abstract delete(userId: string, addressId: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport abstract class UserConsentAdapter {\n  abstract loadConsents(userId: string): Observable<ConsentTemplate[]>;\n\n  abstract giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate>;\n\n  abstract withdrawConsent(userId: string, consentCode: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\n\nexport abstract class UserOrderAdapter {\n  /**\n   * Abstract method used to load order data.\n   *\n   * @param userId The `userId` for given user\n   * @param orderCode The `orderCode` for given order\n   */\n  abstract load(userId: string, orderCode: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load order history for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   */\n  abstract loadHistory(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<OrderHistoryList>;\n\n  /**\n   * Abstract method used to get consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   * @param userId user id related to order\n   */\n  abstract getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking>;\n\n  /**\n   * Abstract method used to create return request\n   * @param userId The `userId` for given user\n   * @param returnRequestInput Return request entry input list\n   */\n  abstract createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request details\n   * @param userId\n   * @param returnRequestCode\n   */\n  abstract loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request list for an user.\n   * @param userId\n   * @param pageSize\n   * @param currentPage\n   * @param sort\n   */\n  abstract loadReturnRequestList(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<ReturnRequestList>;\n\n  /**\n   * Abstract method used to cancel order\n   * @param userId\n   * @param orderCode\n   * @param cancelRequestInput Cancel request entry input list\n   */\n  abstract cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to cancel one return request\n   * @param userId\n   * @param returnRequestCode\n   * @param returnRequestModification\n   */\n  abstract cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class UserPaymentAdapter {\n  abstract loadAll(userId: string): Observable<PaymentDetails[]>;\n\n  abstract delete(userId: string, paymentMethodID: string): Observable<{}>;\n\n  abstract setDefault(userId: string, paymentMethodID: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport abstract class UserAdapter {\n  abstract load(userId: string): Observable<User>;\n\n  abstract update(username: string, user: User): Observable<{}>;\n\n  abstract register(user: UserSignUp): Observable<User>;\n\n  abstract registerGuest(guid: string, password: string): Observable<User>;\n\n  abstract requestForgotPasswordEmail(userEmailAddress: string): Observable<{}>;\n\n  abstract resetPassword(token: string, newPassword: string): Observable<{}>;\n\n  abstract updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}>;\n\n  abstract updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}>;\n\n  abstract remove(userId: string): Observable<{}>;\n\n  abstract loadTitles(): Observable<Title[]>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccUserConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        user: 'users/${userId}',\n        userRegister: 'users',\n        userForgotPassword: 'forgottenpasswordtokens',\n        userResetPassword: 'resetpassword',\n        userUpdateLoginId: 'users/${userId}/login',\n        userUpdatePassword: 'users/${userId}/password',\n        titles: 'titles',\n        paymentDetailsAll: 'users/${userId}/paymentdetails',\n        paymentDetail: 'users/${userId}/paymentdetails/${paymentDetailId}',\n        orderHistory: 'users/${userId}/orders',\n        orderDetail: 'users/${userId}/orders/${orderId}?fields=FULL',\n        anonymousConsentTemplates: 'users/anonymous/consenttemplates',\n        consentTemplates: 'users/${userId}/consenttemplates',\n        consents: 'users/${userId}/consents',\n        consentDetail: 'users/${userId}/consents/${consentId}',\n        addresses: 'users/${userId}/addresses',\n        addressDetail: 'users/${userId}/addresses/${addressId}',\n        addressVerification: 'users/${userId}/addresses/verification',\n        consignmentTracking:\n          'users/${userId}/orders/${orderCode}/consignments/${consignmentCode}/tracking',\n        customerCoupons: 'users/${userId}/customercoupons',\n        claimCoupon: 'users/${userId}/customercoupons/${couponCode}/claim',\n        couponNotification:\n          'users/${userId}/customercoupons/${couponCode}/notification',\n        notificationPreference: 'users/${userId}/notificationpreferences',\n        productInterests: 'users/${userId}/productinterests',\n        getProductInterests:\n          'users/${userId}/productinterests?fields=sorts,pagination,results(productInterestEntry,product(code))',\n        cancelOrder: 'users/${userId}/orders/${orderId}/cancellation',\n        returnOrder:\n          'users/${userId}/orderReturns?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        orderReturns: 'users/${userId}/orderReturns?fields=BASIC',\n        orderReturnDetail:\n          'users/${userId}/orderReturns/${returnRequestCode}?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        cancelReturn: 'users/${userId}/orderReturns/${returnRequestCode}',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\n\nexport abstract class CustomerCouponAdapter {\n  abstract getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult>;\n\n  abstract turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification>;\n\n  abstract turnOffNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<{}>;\n\n  abstract claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerCouponSearchResult>\n>('CustomerCouponSearchResultNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport {\r\n  CustomerCoupon2Customer,\r\n  CustomerCouponNotification,\r\n  CustomerCouponSearchResult,\r\n} from '../../../model/customer-coupon.model';\r\nimport { CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER } from '../../../user/connectors/customer-coupon/converters';\r\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { Occ } from '../../occ-models/occ.models';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\r\n\r\n@Injectable()\r\nexport class OccCustomerCouponAdapter implements CustomerCouponAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpoints: OccEndpointsService,\r\n    protected converter: ConverterService\r\n  ) {}\r\n\r\n  getCustomerCoupons(\r\n    userId: string,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    sort: string\r\n  ): Observable<CustomerCouponSearchResult> {\r\n    // Currently OCC only supports calls for customer coupons in case of logged users\r\n    if (userId === OCC_USER_ID_ANONYMOUS) {\r\n      return of({});\r\n    }\r\n\r\n    const url = this.occEndpoints.getUrl('customerCoupons', { userId });\r\n\r\n    let params = new HttpParams().set('sort', sort ? sort : 'startDate:asc');\r\n\r\n    if (pageSize) {\r\n      params = params.set('pageSize', pageSize.toString());\r\n    }\r\n    if (currentPage) {\r\n      params = params.set('currentPage', currentPage.toString());\r\n    }\r\n\r\n    const headers = this.newHttpHeader();\r\n\r\n    return this.http\r\n      .get<Occ.CustomerCouponSearchResult>(url, { headers, params })\r\n      .pipe(this.converter.pipeable(CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER));\r\n  }\r\n\r\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('couponNotification', {\r\n      userId,\r\n      couponCode,\r\n    });\r\n    const headers = this.newHttpHeader();\r\n\r\n    return this.http.delete(url, { headers });\r\n  }\r\n\r\n  turnOnNotification(\r\n    userId: string,\r\n    couponCode: string\r\n  ): Observable<CustomerCouponNotification> {\r\n    const url = this.occEndpoints.getUrl('couponNotification', {\r\n      userId,\r\n      couponCode,\r\n    });\r\n    const headers = this.newHttpHeader();\r\n\r\n    return this.http.post(url, { headers });\r\n  }\r\n\r\n  claimCustomerCoupon(\r\n    userId: string,\r\n    couponCode: string\r\n  ): Observable<CustomerCoupon2Customer> {\r\n    const url = this.occEndpoints.getUrl('claimCoupon', {\r\n      userId,\r\n      couponCode,\r\n    });\r\n    const headers = this.newHttpHeader();\r\n\r\n    return this.http.post(url, { headers });\r\n  }\r\n\r\n  private newHttpHeader() {\r\n    return new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport abstract class UserNotificationPreferenceAdapter {\n  /**\n   * Abstract method used to load notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   */\n  abstract loadAll(userId: string): Observable<NotificationPreference[]>;\n\n  /**\n   * Abstract method used to update notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param preferences The notification preferences to be updated.\n   */\n  abstract update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const NOTIFICATION_PREFERENCE_SERIALIZER = new InjectionToken<\n  Converter<NotificationPreference[], any>\n>('NotificationPreferenceSerializer');\n\nexport const NOTIFICATION_PREFERENCE_NORMALIZER = new InjectionToken<\n  Converter<any, NotificationPreference>\n>('NotificationPreferenceNormalizer');\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserNotificationPreferenceAdapter } from './user-notification-preference.adapter';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceConnector {\n  constructor(protected adapter: UserNotificationPreferenceAdapter) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  update(userId: string, preferences: NotificationPreference[]) {\n    return this.adapter.update(userId, preferences);\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport {\r\n  NotificationPreference,\r\n  NotificationPreferenceList,\r\n} from '../../../model/notification-preference.model';\r\nimport {\r\n  NOTIFICATION_PREFERENCE_NORMALIZER,\r\n  NOTIFICATION_PREFERENCE_SERIALIZER,\r\n} from '../../../user/connectors/notification-preference';\r\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\n\r\nconst headers = new HttpHeaders({\r\n  'Content-Type': 'application/json',\r\n});\r\n\r\n@Injectable()\r\nexport class OccUserNotificationPreferenceAdapter\r\n  implements UserNotificationPreferenceAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected converter: ConverterService,\r\n    protected occEndpoints: OccEndpointsService\r\n  ) {}\r\n\r\n  loadAll(userId: string): Observable<NotificationPreference[]> {\r\n    return this.http\r\n      .get<NotificationPreferenceList>(\r\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\r\n        {\r\n          headers,\r\n        }\r\n      )\r\n      .pipe(\r\n        map((list) => list.preferences),\r\n        this.converter.pipeableMany(NOTIFICATION_PREFERENCE_NORMALIZER),\r\n        catchError((error: any) => throwError(error))\r\n      );\r\n  }\r\n\r\n  update(\r\n    userId: string,\r\n    preferences: NotificationPreference[]\r\n  ): Observable<{}> {\r\n    preferences = this.converter.convert(\r\n      preferences,\r\n      NOTIFICATION_PREFERENCE_SERIALIZER\r\n    );\r\n    return this.http\r\n      .patch(\r\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\r\n        { preferences: preferences },\r\n        { headers }\r\n      )\r\n      .pipe(catchError((error: any) => throwError(error)));\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const PRODUCT_INTERESTS_NORMALIZER = new InjectionToken<\n  Converter<any, ProductInterestSearchResult>\n>('ProductInterestsNormalizer');\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { Observable, throwError, forkJoin } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { OccConfig } from '../../config/occ-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserInterestsAdapter implements UserInterestsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected config: OccConfig,\n    protected converter: ConverterService\n  ) {}\n\n  public getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    let params = new HttpParams().set('sort', sort ? sort : 'name:asc');\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n    if (productCode) {\n      params = params.set('productCode', productCode);\n    }\n    if (notificationType) {\n      params = params.set('notificationType', notificationType.toString());\n    }\n\n    return this.http\n      .get(this.occEndpoints.getUrl('getProductInterests', { userId }), {\n        headers,\n        params,\n      })\n      .pipe(\n        this.converter.pipeable(PRODUCT_INTERESTS_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  public removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    const r: Observable<any>[] = [];\n    item.productInterestEntry.forEach((entry: any) => {\n      const params: HttpParams = new HttpParams()\n        .set('productCode', item.product.code)\n        .set('notificationType', entry.interestType);\n      r.push(\n        this.http\n          .delete(this.occEndpoints.getUrl('productInterests', { userId }), {\n            params: params,\n          })\n          .pipe(catchError((error: any) => throwError(error)))\n      );\n    });\n    return forkJoin(r);\n  }\n\n  public addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    const params = new HttpParams()\n      .set('productCode', productCode)\n      .set('notificationType', notificationType.toString());\n    return this.http\n      .post(\n        this.occEndpoints.getUrl('productInterests', { userId }),\n        {},\n        {\n          headers,\n          params,\n        }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\nexport abstract class UserInterestsAdapter {\n  /**\n   * Abstract method used to load product interests for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   * @param productCode The product code\n   * @param  notificationType The notification type\n   */\n  abstract getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult>;\n\n  /**\n   * Abstract method used to remove product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param ProductInterestRelation The product interest to be removed.\n   */\n  abstract removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]>;\n\n  /**\n   * Abstract method to add a product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param productCode The product code\n   * @param notificationType The notification type\n   */\n  abstract addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\r\nimport { Occ } from '../../../occ-models/occ.models';\r\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\r\nimport {\r\n  Converter,\r\n  ConverterService,\r\n} from '../../../../util/converter.service';\r\nimport { ProductInterestSearchResult } from '../../../../model/product-interest.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OccUserInterestsNormalizer\r\n  implements\r\n    Converter<Occ.ProductInterestSearchResult, ProductInterestSearchResult> {\r\n  constructor(private converter: ConverterService) {}\r\n\r\n  convert(\r\n    source: Occ.ProductInterestSearchResult,\r\n    target?: ProductInterestSearchResult\r\n  ): ProductInterestSearchResult {\r\n    if (target === undefined) {\r\n      target = { ...(source as any) };\r\n    }\r\n    if (source && source.results) {\r\n      target.results = source.results.map((result) => ({\r\n        ...result,\r\n        product: this.converter.convert(result.product, PRODUCT_NORMALIZER),\r\n      }));\r\n    }\r\n\r\n    return target;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Occ } from '../../../occ-models/occ.models';\r\nimport {\r\n  Converter,\r\n  ConverterService,\r\n} from '../../../../util/converter.service';\r\nimport { OrderEntry, ReturnRequest } from '../../../../model/order.model';\r\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OccReturnRequestNormalizer\r\n  implements Converter<Occ.ReturnRequest, ReturnRequest> {\r\n  constructor(private converter: ConverterService) {}\r\n\r\n  convert(source: Occ.ReturnRequest, target?: ReturnRequest): ReturnRequest {\r\n    if (target === undefined) {\r\n      target = { ...(source as any) };\r\n    }\r\n\r\n    if (source.returnEntries) {\r\n      target.returnEntries = source.returnEntries.map((entry) => ({\r\n        ...entry,\r\n        orderEntry: this.convertOrderEntry(entry.orderEntry),\r\n      }));\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\r\n    return {\r\n      ...source,\r\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\r\n    };\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\r\nimport { provideDefaultConfig } from '../../../config/config.module';\r\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\r\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\r\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\r\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\r\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\r\nimport { defaultOccUserConfig } from './default-occ-user-config';\r\nimport { OccAnonymousConsentTemplatesAdapter } from './occ-anonymous-consent-templates.adapter';\r\nimport { OccUserAddressAdapter } from './occ-user-address.adapter';\r\nimport { OccUserConsentAdapter } from './occ-user-consent.adapter';\r\nimport { OccUserOrderAdapter } from './occ-user-order.adapter';\r\nimport { OccUserPaymentAdapter } from './occ-user-payment.adapter';\r\nimport { OccUserAdapter } from './occ-user.adapter';\r\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\r\nimport { OccCustomerCouponAdapter } from '../user/occ-customer-coupon.adapter';\r\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\r\nimport { OccUserNotificationPreferenceAdapter } from './occ-user-notification-preference.adapter';\r\nimport { OccUserInterestsAdapter } from './occ-user-interests.adapter';\r\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\r\nimport { OccUserInterestsNormalizer } from './converters/occ-user-interests-normalizer';\r\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\r\nimport { ORDER_RETURN_REQUEST_NORMALIZER } from '../../../user/connectors/order/converters';\r\nimport { OccReturnRequestNormalizer } from './converters/index';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, HttpClientModule],\r\n  providers: [\r\n    provideDefaultConfig(defaultOccUserConfig),\r\n    { provide: UserAdapter, useClass: OccUserAdapter },\r\n    { provide: UserAddressAdapter, useClass: OccUserAddressAdapter },\r\n    { provide: UserConsentAdapter, useClass: OccUserConsentAdapter },\r\n    {\r\n      provide: AnonymousConsentTemplatesAdapter,\r\n      useClass: OccAnonymousConsentTemplatesAdapter,\r\n    },\r\n    {\r\n      provide: UserPaymentAdapter,\r\n      useClass: OccUserPaymentAdapter,\r\n    },\r\n    { provide: UserOrderAdapter, useClass: OccUserOrderAdapter },\r\n    { provide: CustomerCouponAdapter, useClass: OccCustomerCouponAdapter },\r\n    {\r\n      provide: UserNotificationPreferenceAdapter,\r\n      useClass: OccUserNotificationPreferenceAdapter,\r\n    },\r\n    { provide: UserInterestsAdapter, useClass: OccUserInterestsAdapter },\r\n    {\r\n      provide: PRODUCT_INTERESTS_NORMALIZER,\r\n      useExisting: OccUserInterestsNormalizer,\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: ORDER_RETURN_REQUEST_NORMALIZER,\r\n      useExisting: OccReturnRequestNormalizer,\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class UserOccModule {}\r\n","import { Injectable, isDevMode } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class JavaRegExpConverter {\n  /**\n   * Pattern that extracts modifiers from the Java regexp.\n   *\n   * Java regexps MAY start with ONE or MANY modifiers like `(?MODIFIERS)PATTERN`. Examples:\n   * - `(?i)` for Case Insensitive Mode: `(?i)PATTERN`\n   * - `(?u)` for Unicode-Aware Case Folding; `(?u)PATTERN`\n   * - or multiple combined:  `(?iu)PATTERN`\n   * - (more modifiers in the official Java docs https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html)\n   *\n   * This pattern extracts 3 parts from the input string, i.e. for `(?iu)PATTERN`:\n   *    1. original modifiers syntax, i.e. `(?iu)` (or undefined if no modifiers present)\n   *    2. extracted modifiers, i.e. `iu` (or undefined if no modifiers present)\n   *    3. the rest of the regexp, i.e. `PATTERN`\n   */\n  private readonly EXTRACT_JAVA_REGEXP_MODIFIERS: RegExp = /^(\\(\\?([a-z]+)\\))?(.*)/;\n\n  /**\n   * Converts RegExp from Java syntax to Javascript, by recognizing Java regexp modifiers\n   * and converting them to the Javascript ones (i.e. case insensitive mode: `(?i)PATTERN` -> `/pattern/i`)\n   *\n   * **CAUTION!** Not all features and modifiers of Java regexps are valid in Javascript!\n   * If unsupported feature or modifier is used, then `null` will be returned instead of Javascript RegExp.\n   *\n   * See differences between Java and Javascript regexps:\n   * - https://stackoverflow.com/questions/8754444/convert-javascript-regular-expression-to-java-syntax\n   * - https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Language_features\n   */\n  toJsRegExp(javaSyntax: string): RegExp {\n    const parts = javaSyntax.match(this.EXTRACT_JAVA_REGEXP_MODIFIERS);\n    if (!parts) {\n      return null;\n    }\n    const [, , modifiers, jsSyntax] = parts;\n    try {\n      return new RegExp(jsSyntax, modifiers);\n    } catch (error) {\n      if (isDevMode()) {\n        console.warn(\n          `WARNING: Could not convert Java regexp into Javascript. Original regexp: ${javaSyntax} \\nMessage: ${error}`\n        );\n      }\n      return null;\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const CONFIG_INITIALIZER = new InjectionToken('ConfigInitializer');\n\n/**\n * Used to provide asynchronous config during app initialization\n */\nexport interface ConfigInitializer {\n  /**\n   * List of config parts that are resolved by configFactory, e.g.:\n   * 'context.baseSite', 'context.language'\n   */\n  scopes: string[];\n  /**\n   * Promise that returns config chunk\n   */\n  configFactory: () => Promise<any>;\n}\n\nexport const CONFIG_INITIALIZER_FORROOT_GUARD = new InjectionToken<void>(\n  'CONFIG_INITIALIZER_FORROOT_GUARD'\n);\n","import { InjectionToken } from '@angular/core';\n\n/**\n * The url of the server request when running SSR\n * */\nexport const SERVER_REQUEST_URL = new InjectionToken<string>(\n  'SERVER_REQUEST_URL'\n);\n\n/**\n * The url of the server request host when running SSR\n * */\nexport const SERVER_REQUEST_ORIGIN = new InjectionToken<string>(\n  'SERVER_REQUEST_ORIGIN'\n);\n","import { Injectable } from '@angular/core';\r\nimport { I18nConfig } from '../../i18n';\r\nimport { BaseSite } from '../../model/misc.model';\r\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\r\nimport {\r\n  BASE_SITE_CONTEXT_ID,\r\n  CURRENCY_CONTEXT_ID,\r\n  LANGUAGE_CONTEXT_ID,\r\n} from '../../site-context/providers/context-ids';\r\nimport { Occ } from '../occ-models/occ.models';\r\nimport { JavaRegExpConverter } from './java-reg-exp-converter';\r\nimport { OccLoadedConfig } from './occ-loaded-config';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OccLoadedConfigConverter {\r\n  constructor(private javaRegExpConverter: JavaRegExpConverter) {}\r\n\r\n  fromOccBaseSites(baseSites: BaseSite[], currentUrl: string): OccLoadedConfig {\r\n    const baseSite = baseSites.find((site) =>\r\n      this.isCurrentBaseSite(site, currentUrl)\r\n    );\r\n    if (!baseSite) {\r\n      throw this.getError(\r\n        `Current url (${currentUrl}) doesn't match with any of url patterns of any base site.`\r\n      );\r\n    }\r\n\r\n    // Although `stores` property is an array, typically there is only one store. So we return the first store from the list.\r\n    const baseStore = baseSite.stores && baseSite.stores[0];\r\n    if (!baseStore) {\r\n      throw this.getError(\r\n        `Current base site (${baseSite.uid}) doesn't have any base store.`\r\n      );\r\n    }\r\n\r\n    return {\r\n      baseSite: baseSite.uid,\r\n      languages: this.getIsoCodes(\r\n        baseStore.languages,\r\n        baseSite.defaultLanguage || baseStore.defaultLanguage\r\n      ),\r\n      currencies: this.getIsoCodes(\r\n        baseStore.currencies,\r\n        baseStore.defaultCurrency\r\n      ),\r\n      urlParameters: this.getUrlParams(baseSite.urlEncodingAttributes),\r\n    };\r\n  }\r\n\r\n  toSiteContextConfig({\r\n    baseSite,\r\n    languages,\r\n    currencies,\r\n    urlParameters: urlEncodingAttributes,\r\n  }: OccLoadedConfig): SiteContextConfig {\r\n    const result = {\r\n      context: {\r\n        urlParameters: urlEncodingAttributes,\r\n        [BASE_SITE_CONTEXT_ID]: [baseSite],\r\n        [LANGUAGE_CONTEXT_ID]: languages,\r\n        [CURRENCY_CONTEXT_ID]: currencies,\r\n      },\r\n    };\r\n    return result;\r\n  }\r\n\r\n  toI18nConfig({ languages }: OccLoadedConfig): I18nConfig {\r\n    return { i18n: { fallbackLang: languages[0] } };\r\n  }\r\n\r\n  private isCurrentBaseSite(site: Occ.BaseSite, currentUrl: string): boolean {\r\n    const index = (site.urlPatterns || []).findIndex((javaRegexp) => {\r\n      const jsRegexp = this.javaRegExpConverter.toJsRegExp(javaRegexp);\r\n      if (jsRegexp) {\r\n        const result = jsRegexp.test(currentUrl);\r\n        return result;\r\n      }\r\n    });\r\n\r\n    return index !== -1;\r\n  }\r\n\r\n  /**\r\n   * Returns an array of url encoded site context parameters.\r\n   *\r\n   * It maps the string \"storefront\" (used in OCC) to the \"baseSite\" (used in Spartacus)\r\n   */\r\n  private getUrlParams(params: string[]): string[] {\r\n    const STOREFRONT_PARAM = 'storefront';\r\n\r\n    return (params || []).map((param) =>\r\n      param === STOREFRONT_PARAM ? BASE_SITE_CONTEXT_ID : param\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns iso codes in a array, where the first element is the default iso code.\r\n   */\r\n  private getIsoCodes(\r\n    elements: { isocode?: string }[],\r\n    defaultElement: { isocode?: string }\r\n  ) {\r\n    const result = this.moveToFirst(\r\n      elements,\r\n      (el) => el.isocode === defaultElement.isocode\r\n    ).map((el) => el.isocode);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Moves to the start of the array the first element that satisfies the given predicate.\r\n   *\r\n   * @param array array to modify\r\n   * @param predicate function called on elements\r\n   */\r\n  private moveToFirst(array: any[], predicate: (el: any) => boolean): any[] {\r\n    array = [...array];\r\n    const index = array.findIndex(predicate);\r\n    if (index !== -1) {\r\n      const [el] = array.splice(index, 1);\r\n      array.unshift(el);\r\n    }\r\n    return array;\r\n  }\r\n\r\n  private getError(message: string): Error {\r\n    return new Error(`Error: Cannot get base site config! ${message}`);\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { OccConfig } from '../config/occ-config';\nimport { Occ } from '../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccSitesConfigLoader {\n  constructor(protected config: OccConfig, protected http: HttpClient) {}\n\n  protected readonly endpoint =\n    'basesites?fields=baseSites(uid,defaultLanguage(isocode),urlEncodingAttributes,urlPatterns,stores(currencies(isocode),defaultCurrency(isocode),languages(isocode),defaultLanguage(isocode)))';\n\n  private get baseEndpoint(): string {\n    return (\n      (this.config.backend.occ.baseUrl || '') + this.config.backend.occ.prefix\n    );\n  }\n\n  private get url(): string {\n    return `${this.baseEndpoint}${this.endpoint}`;\n  }\n\n  load(): Observable<BaseSite[]> {\n    if (!this.config || !this.config.backend || !this.config.backend.occ) {\n      return throwError(new Error(`Missing config for OCC backend!`));\n    }\n\n    return this.http\n      .get<Occ.BaseSites>(this.url)\n      .pipe(map(({ baseSites }) => baseSites));\n  }\n}\n","import { DOCUMENT, isPlatformBrowser, isPlatformServer } from '@angular/common';\r\nimport {\r\n  Inject,\r\n  Injectable,\r\n  isDevMode,\r\n  Optional,\r\n  PLATFORM_ID,\r\n} from '@angular/core';\r\nimport {\r\n  makeStateKey,\r\n  StateKey,\r\n  TransferState,\r\n} from '@angular/platform-browser';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { Config } from '../../config/config.module';\r\nimport { deepMerge } from '../../config/utils/deep-merge';\r\nimport { I18nConfig } from '../../i18n/config/i18n-config';\r\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\r\nimport { SERVER_REQUEST_URL } from '../../ssr/ssr.providers';\r\nimport { OccLoadedConfig } from './occ-loaded-config';\r\nimport { OccLoadedConfigConverter } from './occ-loaded-config-converter';\r\nimport { OccSitesConfigLoader } from './occ-sites-config-loader';\r\n\r\nexport const EXTERNAL_CONFIG_TRANSFER_ID: StateKey<string> = makeStateKey<\r\n  string\r\n>('cx-external-config');\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OccConfigLoaderService {\r\n  constructor(\r\n    @Inject(PLATFORM_ID) protected platform: any,\r\n    @Inject(DOCUMENT) protected document: any,\r\n    @Inject(Config) protected config: any,\r\n    protected sitesConfigLoader: OccSitesConfigLoader,\r\n    protected converter: OccLoadedConfigConverter,\r\n    @Optional() protected transferState: TransferState,\r\n\r\n    @Optional()\r\n    @Inject(SERVER_REQUEST_URL)\r\n    protected serverRequestUrl?: string\r\n  ) {}\r\n\r\n  private get currentUrl(): string {\r\n    if (isPlatformBrowser(this.platform)) {\r\n      return this.document.location.href;\r\n    }\r\n    if (this.serverRequestUrl) {\r\n      return this.serverRequestUrl;\r\n    }\r\n    if (isDevMode()) {\r\n      console.error(\r\n        `Please provide token 'SERVER_REQUEST_URL' with the requested URL for SSR`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the Spartacus config asynchronously basing on the external config\r\n   */\r\n  loadConfig(): Promise<I18nConfig | SiteContextConfig> {\r\n    return this.get()\r\n      .pipe(\r\n        tap((externalConfig) => this.transfer(externalConfig)),\r\n        map((externalConfig) =>\r\n          deepMerge({}, ...this.getConfigChunks(externalConfig))\r\n        )\r\n      )\r\n      .toPromise();\r\n  }\r\n\r\n  /**\r\n   * Returns the external config\r\n   */\r\n  protected get(): Observable<OccLoadedConfig> {\r\n    const rehydratedExternalConfig = this.rehydrate();\r\n\r\n    return rehydratedExternalConfig\r\n      ? of(rehydratedExternalConfig)\r\n      : this.load();\r\n  }\r\n\r\n  /**\r\n   * Loads the external config from backend\r\n   */\r\n  protected load(): Observable<OccLoadedConfig> {\r\n    return this.sitesConfigLoader\r\n      .load()\r\n      .pipe(\r\n        map((baseSites) =>\r\n          this.converter.fromOccBaseSites(baseSites, this.currentUrl)\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Tries to rehydrate external config in the browser from SSR\r\n   */\r\n  protected rehydrate(): OccLoadedConfig {\r\n    if (this.transferState && isPlatformBrowser(this.platform)) {\r\n      return this.transferState.get(EXTERNAL_CONFIG_TRANSFER_ID, undefined);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transfers the given external config in SSR to the browser\r\n   *\r\n   * @param externalConfig\r\n   */\r\n  protected transfer(externalConfig: OccLoadedConfig) {\r\n    if (\r\n      this.transferState &&\r\n      isPlatformServer(this.platform) &&\r\n      externalConfig\r\n    ) {\r\n      this.transferState.set(EXTERNAL_CONFIG_TRANSFER_ID, externalConfig);\r\n    }\r\n  }\r\n\r\n  protected getConfigChunks(\r\n    externalConfig: OccLoadedConfig\r\n  ): (I18nConfig | SiteContextConfig)[] {\r\n    const chunks: any[] = [this.converter.toSiteContextConfig(externalConfig)];\r\n\r\n    if (this.shouldReturnI18nChunk()) {\r\n      chunks.push(this.converter.toI18nConfig(externalConfig));\r\n    }\r\n\r\n    return chunks;\r\n  }\r\n\r\n  private shouldReturnI18nChunk(): boolean {\r\n    const fallbackLangExists =\r\n      typeof (\r\n        this.config &&\r\n        this.config.i18n &&\r\n        this.config.i18n.fallbackLang\r\n      ) !== 'undefined';\r\n    if (fallbackLangExists && isDevMode()) {\r\n      console.warn(\r\n        `There is an already provided static config for 'i18n.fallbackLang', so the value from OCC loaded config is ignored.`\r\n      );\r\n    }\r\n    return !fallbackLangExists;\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  ConfigInitializer,\n  CONFIG_INITIALIZER,\n} from '../../config/config-initializer/config-initializer';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { OccConfigLoaderService } from './occ-config-loader.service';\n\n/**\n * Initializes the Spartacus config asynchronously basing on the external config\n */\nexport function initConfig(\n  configLoader: OccConfigLoaderService,\n  config: SiteContextConfig\n): ConfigInitializer {\n  /**\n   * Load config for `context` from backend only when there is no static config for `context.baseSite`\n   */\n  if (!config.context || !config.context[BASE_SITE_CONTEXT_ID]) {\n    return {\n      scopes: ['context', 'i18n.fallbackLang'],\n      configFactory: () => configLoader.loadConfig(),\n    };\n  }\n  return null;\n}\n\n/**\n * Re-provides the external config chunk given before Angular bootstrap\n */\n@NgModule()\nexport class OccConfigLoaderModule {\n  static forRoot(): ModuleWithProviders<OccConfigLoaderModule> {\n    return {\n      ngModule: OccConfigLoaderModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER,\n          useFactory: initConfig,\n          deps: [OccConfigLoaderService, SiteContextConfig],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Provider } from '@angular/core';\nimport { Meta } from '@angular/platform-browser';\nimport { provideConfigFactory } from '../../config/config.module';\nimport { OccConfig } from './occ-config';\n\nexport const OCC_BASE_URL_META_TAG_NAME = 'occ-backend-base-url';\nexport const OCC_BASE_URL_META_TAG_PLACEHOLDER = 'OCC_BACKEND_BASE_URL_VALUE';\nexport const MEDIA_BASE_URL_META_TAG_NAME = 'media-backend-base-url';\nexport const MEDIA_BASE_URL_META_TAG_PLACEHOLDER =\n  'MEDIA_BACKEND_BASE_URL_VALUE';\n\nexport function occServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(OCC_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== OCC_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { occ: { baseUrl } } }\n    : {};\n}\n\nexport function mediaServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(MEDIA_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== MEDIA_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { media: { baseUrl } } }\n    : {};\n}\n\nfunction getMetaTagContent(name: string, meta: Meta) {\n  const metaTag = meta.getTag(`name=\"${name}\"`);\n  return metaTag && metaTag.content;\n}\n\nexport function provideConfigFromMetaTags(): Provider[] {\n  return [\n    provideConfigFactory(occServerConfigFromMetaTagFactory, [Meta]),\n    provideConfigFactory(mediaServerConfigFromMetaTagFactory, [Meta]),\n  ];\n}\n","import { OccConfig } from './occ-config';\r\n\r\nexport const defaultOccConfig: OccConfig = {\r\n  backend: {\r\n    occ: {\r\n      prefix: '/rest/v2/',\r\n    },\r\n    media: {},\r\n  },\r\n};\r\n","import { OccConfig } from '../../occ';\n\nexport function occConfigValidator(config: OccConfig) {\n  if (\n    config.backend === undefined ||\n    config.backend.occ === undefined ||\n    config.backend.occ.baseUrl === undefined\n  ) {\n    return 'Please configure backend.occ.baseUrl before using storefront library!';\n  }\n}\n","import {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { OccConfig } from '../config/occ-config';\r\n\r\n/**\r\n * Http interceptor to add cookies to all cross-site requests.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class WithCredentialsInterceptor implements HttpInterceptor {\r\n  constructor(protected config: OccConfig) {}\r\n\r\n  /**\r\n   * Intercepts each request and adds the `withCredential` flag to it\r\n   * if it hasn't been added already.\r\n   */\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    if (this.requiresWithCredentials(request)) {\r\n      request = request.clone({\r\n        withCredentials: true,\r\n      });\r\n    }\r\n    return next.handle(request);\r\n  }\r\n\r\n  /**\r\n   * indicates whether the request should use the WithCredentials flag.\r\n   */\r\n  protected requiresWithCredentials(request: HttpRequest<any>): boolean {\r\n    return (\r\n      this.occConfig?.useWithCredentials &&\r\n      request.url.indexOf(this.occConfig?.prefix) > -1\r\n    );\r\n  }\r\n\r\n  private get occConfig() {\r\n    return this.config.backend.occ;\r\n  }\r\n}\r\n","export namespace Occ {\r\n  /**\r\n   *\r\n   * An interface representing Country.\r\n   */\r\n  export interface Country {\r\n    /**\r\n     * @member {string} [isocode]\r\n     */\r\n    isocode?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Region.\r\n   */\r\n  export interface Region {\r\n    /**\r\n     * @member {string} [countryIso]\r\n     */\r\n    countryIso?: string;\r\n    /**\r\n     * @member {string} [isocode]\r\n     */\r\n    isocode?: string;\r\n    /**\r\n     * @member {string} [isocodeShort]\r\n     */\r\n    isocodeShort?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing RegionList.\r\n   */\r\n  export interface RegionList {\r\n    /**\r\n     * @member {Region[]} [regions]\r\n     */\r\n    regions?: Region[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Address.\r\n   */\r\n  export interface Address {\r\n    /**\r\n     * @member {string} [companyName]\r\n     */\r\n    companyName?: string;\r\n    /**\r\n     * @member {Country} [country]\r\n     */\r\n    country?: Country;\r\n    /**\r\n     * @member {boolean} [defaultAddress]\r\n     */\r\n    defaultAddress?: boolean;\r\n    /**\r\n     * @member {string} [email]\r\n     */\r\n    email?: string;\r\n    /**\r\n     * @member {string} [firstName]\r\n     */\r\n    firstName?: string;\r\n    /**\r\n     * @member {string} [formattedAddress]\r\n     */\r\n    formattedAddress?: string;\r\n    /**\r\n     * @member {string} [id]\r\n     */\r\n    id?: string;\r\n    /**\r\n     * @member {string} [lastName]\r\n     */\r\n    lastName?: string;\r\n    /**\r\n     * @member {string} [line1]\r\n     */\r\n    line1?: string;\r\n    /**\r\n     * @member {string} [line2]\r\n     */\r\n    line2?: string;\r\n    /**\r\n     * @member {string} [phone]\r\n     */\r\n    phone?: string;\r\n    /**\r\n     * @member {string} [postalCode]\r\n     */\r\n    postalCode?: string;\r\n    /**\r\n     * @member {Region} [region]\r\n     */\r\n    region?: Region;\r\n    /**\r\n     * @member {boolean} [shippingAddress]\r\n     */\r\n    shippingAddress?: boolean;\r\n    /**\r\n     * @member {string} [title]\r\n     */\r\n    title?: string;\r\n    /**\r\n     * @member {string} [titleCode]\r\n     */\r\n    titleCode?: string;\r\n    /**\r\n     * @member {string} [town]\r\n     */\r\n    town?: string;\r\n    /**\r\n     * @member {boolean} [visibleInAddressBook]\r\n     */\r\n    visibleInAddressBook?: boolean;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing AddressList.\r\n   */\r\n  export interface AddressList {\r\n    /**\r\n     * @member {Address[]} [addresses]\r\n     */\r\n    addresses?: Address[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ErrorModel.\r\n   * Error message\r\n   *\r\n   */\r\n  export interface ErrorModel {\r\n    /**\r\n     * @member {string} [message] Descriptive, human readable error message.\r\n     */\r\n    message?: string;\r\n    /**\r\n     * @member {string} [reason] Additional classification specific for each\r\n     * error type e.g. 'noStock'.\r\n     */\r\n    reason?: string;\r\n    /**\r\n     * @member {string} [subject] Identifier of the related object e.g. '1'.\r\n     */\r\n    subject?: string;\r\n    /**\r\n     * @member {string} [subjectType] Type of the object related to the error\r\n     * e.g. 'entry'.\r\n     */\r\n    subjectType?: string;\r\n    /**\r\n     * @member {string} [type] Type of the error e.g. 'LowStockError'.\r\n     */\r\n    type?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ErrorList.\r\n   * List of errors\r\n   *\r\n   */\r\n  export interface ErrorList {\r\n    /**\r\n     * @member {ErrorModel[]} [errors]\r\n     */\r\n    errors?: ErrorModel[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing AddressValidation.\r\n   */\r\n  export interface AddressValidation {\r\n    /**\r\n     * @member {string} [decision]\r\n     */\r\n    decision?: string;\r\n    /**\r\n     * @member {ErrorList} [errors]\r\n     */\r\n    errors?: ErrorList;\r\n    /**\r\n     * @member {Address[]} [suggestedAddresses]\r\n     */\r\n    suggestedAddresses?: Address[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Price.\r\n   */\r\n  export interface Price {\r\n    /**\r\n     * @member {string} [currencyIso]\r\n     */\r\n    currencyIso?: string;\r\n    /**\r\n     * @member {string} [formattedValue]\r\n     */\r\n    formattedValue?: string;\r\n    /**\r\n     * @member {number} [maxQuantity]\r\n     */\r\n    maxQuantity?: number;\r\n    /**\r\n     * @member {number} [minQuantity]\r\n     */\r\n    minQuantity?: number;\r\n    /**\r\n     * @member {PriceType} [priceType] Possible values include: 'BUY', 'FROM'\r\n     */\r\n    priceType?: PriceType;\r\n    /**\r\n     * @member {number} [value]\r\n     */\r\n    value?: number;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Stock.\r\n   */\r\n  export interface Stock {\r\n    /**\r\n     * @member {number} [stockLevel]\r\n     */\r\n    stockLevel?: number;\r\n    /**\r\n     * @member {string} [stockLevelStatus]\r\n     */\r\n    stockLevelStatus?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Image.\r\n   */\r\n  export interface Image {\r\n    /**\r\n     * @member {string} [altText]\r\n     */\r\n    altText?: string;\r\n    /**\r\n     * @member {string} [format]\r\n     */\r\n    format?: string;\r\n    /**\r\n     * @member {number} [galleryIndex]\r\n     */\r\n    galleryIndex?: number;\r\n    /**\r\n     * @member {ImageType} [imageType] Possible values include: 'PRIMARY',\r\n     * 'GALLERY'\r\n     */\r\n    imageType?: ImageType;\r\n    /**\r\n     * @member {string} [url]\r\n     */\r\n    url?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing VariantOptionQualifier.\r\n   */\r\n  export interface VariantOptionQualifier {\r\n    /**\r\n     * @member {Image} [image]\r\n     */\r\n    image?: Image;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {string} [qualifier]\r\n     */\r\n    qualifier?: string;\r\n    /**\r\n     * @member {string} [value]\r\n     */\r\n    value?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing VariantOption.\r\n   */\r\n  export interface VariantOption {\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {Price} [priceData]\r\n     */\r\n    priceData?: Price;\r\n    /**\r\n     * @member {Stock} [stock]\r\n     */\r\n    stock?: Stock;\r\n    /**\r\n     * @member {string} [url]\r\n     */\r\n    url?: string;\r\n    /**\r\n     * @member {VariantOptionQualifier[]} [variantOptionQualifiers]\r\n     */\r\n    variantOptionQualifiers?: VariantOptionQualifier[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing BaseOption.\r\n   */\r\n  export interface BaseOption {\r\n    /**\r\n     * @member {VariantOption[]} [options]\r\n     */\r\n    options?: VariantOption[];\r\n    /**\r\n     * @member {VariantOption} [selected]\r\n     */\r\n    selected?: VariantOption;\r\n    /**\r\n     * @member {string} [variantType]\r\n     */\r\n    variantType?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing SearchQuery.\r\n   */\r\n  export interface SearchQuery {\r\n    /**\r\n     * @member {string} [value]\r\n     */\r\n    value?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing SearchState.\r\n   */\r\n  export interface SearchState {\r\n    /**\r\n     * @member {SearchQuery} [query]\r\n     */\r\n    query?: SearchQuery;\r\n    /**\r\n     * @member {string} [url]\r\n     */\r\n    url?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Breadcrumb.\r\n   */\r\n  export interface Breadcrumb {\r\n    /**\r\n     * @member {string} [facetCode]\r\n     */\r\n    facetCode?: string;\r\n    /**\r\n     * @member {string} [facetName]\r\n     */\r\n    facetName?: string;\r\n    /**\r\n     * @member {string} [facetValueCode]\r\n     */\r\n    facetValueCode?: string;\r\n    /**\r\n     * @member {string} [facetValueName]\r\n     */\r\n    facetValueName?: string;\r\n    /**\r\n     * @member {SearchState} [removeQuery]\r\n     */\r\n    removeQuery?: SearchState;\r\n    /**\r\n     * @member {SearchState} [truncateQuery]\r\n     */\r\n    truncateQuery?: SearchState;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Component.\r\n   */\r\n  export interface Component {\r\n    /**\r\n     * @member {Date} [modifiedTime]\r\n     */\r\n    modifiedTime?: Date;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {any} [otherProperties]\r\n     */\r\n    otherProperties?: any;\r\n    /**\r\n     * @member {string} [typeCode]\r\n     */\r\n    typeCode?: string;\r\n    /**\r\n     * @member {string} [uid]\r\n     */\r\n    uid?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ComponentList.\r\n   */\r\n  export interface ComponentList {\r\n    /**\r\n     * @member {Component[]} [component]\r\n     */\r\n    component?: Component[] | any[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ContentSlot.\r\n   */\r\n  export interface ContentSlot {\r\n    /**\r\n     * @member {ComponentList} [components]\r\n     */\r\n    components?: ComponentList;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {string} [position]\r\n     */\r\n    position?: string;\r\n    /**\r\n     * @member {string} [slotId]\r\n     */\r\n    slotId?: string;\r\n    /**\r\n     * @member {boolean} [slotShared]\r\n     */\r\n    slotShared?: boolean;\r\n    /**\r\n     * @member {string} [slotStatus]\r\n     */\r\n    slotStatus?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ContentSlotList.\r\n   */\r\n  export interface ContentSlotList {\r\n    /**\r\n     * @member {ContentSlot[]} [contentSlot]\r\n     */\r\n    contentSlot?: ContentSlot[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing CMSPage.\r\n   */\r\n  export interface CMSPage {\r\n    /**\r\n     * @member {ContentSlotList} [contentSlots]\r\n     */\r\n    contentSlots?: ContentSlotList;\r\n    /**\r\n     * @member {boolean} [defaultPage]\r\n     */\r\n    defaultPage?: boolean;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {string} [template]\r\n     */\r\n    template?: string;\r\n    /**\r\n     * @member {string} [title]\r\n     */\r\n    title?: string;\r\n    /**\r\n     * @member {string} [typeCode]\r\n     */\r\n    typeCode?: string;\r\n    /**\r\n     * @member {string} [uid]\r\n     */\r\n    uid?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing CardType.\r\n   */\r\n  export interface CardType {\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing CardTypeList.\r\n   */\r\n  export interface CardTypeList {\r\n    /**\r\n     * @member {CardType[]} [cardTypes]\r\n     */\r\n    cardTypes?: CardType[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing PromotionOrderEntryConsumed.\r\n   */\r\n  export interface PromotionOrderEntryConsumed {\r\n    /**\r\n     * @member {number} [adjustedUnitPrice]\r\n     */\r\n    adjustedUnitPrice?: number;\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {number} [orderEntryNumber]\r\n     */\r\n    orderEntryNumber?: number;\r\n    /**\r\n     * @member {number} [quantity]\r\n     */\r\n    quantity?: number;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing PromotionRestriction.\r\n   */\r\n  export interface PromotionRestriction {\r\n    /**\r\n     * @member {string} [description]\r\n     */\r\n    description?: string;\r\n    /**\r\n     * @member {string} [restrictionType]\r\n     */\r\n    restrictionType?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Promotion.\r\n   */\r\n  export interface Promotion {\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {string[]} [couldFireMessages]\r\n     */\r\n    couldFireMessages?: string[];\r\n    /**\r\n     * @member {string} [description]\r\n     */\r\n    description?: string;\r\n    /**\r\n     * @member {boolean} [enabled]\r\n     */\r\n    enabled?: boolean;\r\n    /**\r\n     * @member {Date} [endDate]\r\n     */\r\n    endDate?: Date;\r\n    /**\r\n     * @member {string[]} [firedMessages]\r\n     */\r\n    firedMessages?: string[];\r\n    /**\r\n     * @member {number} [priority]\r\n     */\r\n    priority?: number;\r\n    /**\r\n     * @member {Image} [productBanner]\r\n     */\r\n    productBanner?: Image;\r\n    /**\r\n     * @member {string} [promotionGroup]\r\n     */\r\n    promotionGroup?: string;\r\n    /**\r\n     * @member {string} [promotionType]\r\n     */\r\n    promotionType?: string;\r\n    /**\r\n     * @member {PromotionRestriction[]} [restrictions]\r\n     */\r\n    restrictions?: PromotionRestriction[];\r\n    /**\r\n     * @member {Date} [startDate]\r\n     */\r\n    startDate?: Date;\r\n    /**\r\n     * @member {string} [title]\r\n     */\r\n    title?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing PromotionResult.\r\n   */\r\n  export interface PromotionResult {\r\n    /**\r\n     * @member {PromotionOrderEntryConsumed[]} [consumedEntries]\r\n     */\r\n    consumedEntries?: PromotionOrderEntryConsumed[];\r\n    /**\r\n     * @member {string} [description]\r\n     */\r\n    description?: string;\r\n    /**\r\n     * @member {Promotion} [promotion]\r\n     */\r\n    promotion?: Promotion;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Currency.\r\n   */\r\n  export interface Currency {\r\n    /**\r\n     * @member {boolean} [active]\r\n     */\r\n    active?: boolean;\r\n    /**\r\n     * @member {string} [isocode]\r\n     */\r\n    isocode?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {string} [symbol]\r\n     */\r\n    symbol?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Voucher.\r\n   */\r\n  export interface Voucher {\r\n    /**\r\n     * @member {Price} [appliedValue]\r\n     */\r\n    appliedValue?: Price;\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {Currency} [currency]\r\n     */\r\n    currency?: Currency;\r\n    /**\r\n     * @member {string} [description]\r\n     */\r\n    description?: string;\r\n    /**\r\n     * @member {boolean} [freeShipping]\r\n     */\r\n    freeShipping?: boolean;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {number} [value]\r\n     */\r\n    value?: number;\r\n    /**\r\n     * @member {string} [valueFormatted]\r\n     */\r\n    valueFormatted?: string;\r\n    /**\r\n     * @member {string} [valueString]\r\n     */\r\n    valueString?: string;\r\n    /**\r\n     * @member {string} [voucherCode]\r\n     */\r\n    voucherCode?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing DeliveryMode.\r\n   */\r\n  export interface DeliveryMode {\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {Price} [deliveryCost]\r\n     */\r\n    deliveryCost?: Price;\r\n    /**\r\n     * @member {string} [description]\r\n     */\r\n    description?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing GeoPoint.\r\n   */\r\n  export interface GeoPoint {\r\n    /**\r\n     * @member {number} [latitude]\r\n     */\r\n    latitude?: number;\r\n    /**\r\n     * @member {number} [longitude]\r\n     */\r\n    longitude?: number;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Time.\r\n   */\r\n  export interface Time {\r\n    /**\r\n     * @member {string} [formattedHour]\r\n     */\r\n    formattedHour?: string;\r\n    /**\r\n     * @member {number} [hour]\r\n     */\r\n    hour?: number;\r\n    /**\r\n     * @member {number} [minute]\r\n     */\r\n    minute?: number;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing SpecialOpeningDay.\r\n   */\r\n  export interface SpecialOpeningDay {\r\n    /**\r\n     * @member {boolean} [closed]\r\n     */\r\n    closed?: boolean;\r\n    /**\r\n     * @member {Time} [closingTime]\r\n     */\r\n    closingTime?: Time;\r\n    /**\r\n     * @member {string} [comment]\r\n     */\r\n    comment?: string;\r\n    /**\r\n     * @member {Date} [date]\r\n     */\r\n    date?: Date;\r\n    /**\r\n     * @member {string} [formattedDate]\r\n     */\r\n    formattedDate?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {Time} [openingTime]\r\n     */\r\n    openingTime?: Time;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing WeekdayOpeningDay.\r\n   */\r\n  export interface WeekdayOpeningDay {\r\n    /**\r\n     * @member {boolean} [closed]\r\n     */\r\n    closed?: boolean;\r\n    /**\r\n     * @member {Time} [closingTime]\r\n     */\r\n    closingTime?: Time;\r\n    /**\r\n     * @member {Time} [openingTime]\r\n     */\r\n    openingTime?: Time;\r\n    /**\r\n     * @member {string} [weekDay]\r\n     */\r\n    weekDay?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing OpeningSchedule.\r\n   */\r\n  export interface OpeningSchedule {\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {SpecialOpeningDay[]} [specialDayOpeningList]\r\n     */\r\n    specialDayOpeningList?: SpecialOpeningDay[];\r\n    /**\r\n     * @member {WeekdayOpeningDay[]} [weekDayOpeningList]\r\n     */\r\n    weekDayOpeningList?: WeekdayOpeningDay[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing PointOfService.\r\n   */\r\n  export interface PointOfService {\r\n    /**\r\n     * @member {Address} [address]\r\n     */\r\n    address?: Address;\r\n    /**\r\n     * @member {string} [description]\r\n     */\r\n    description?: string;\r\n    /**\r\n     * @member {string} [displayName]\r\n     */\r\n    displayName?: string;\r\n    /**\r\n     * @member {number} [distanceKm]\r\n     */\r\n    distanceKm?: number;\r\n    /**\r\n     * @member {{ [propertyName: string]: string }} [features]\r\n     */\r\n    features?: { [propertyName: string]: string };\r\n    /**\r\n     * @member {string} [formattedDistance]\r\n     */\r\n    formattedDistance?: string;\r\n    /**\r\n     * @member {GeoPoint} [geoPoint]\r\n     */\r\n    geoPoint?: GeoPoint;\r\n    /**\r\n     * @member {Image} [mapIcon]\r\n     */\r\n    mapIcon?: Image;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {OpeningSchedule} [openingHours]\r\n     */\r\n    openingHours?: OpeningSchedule;\r\n    /**\r\n     * @member {string} [storeContent]\r\n     */\r\n    storeContent?: string;\r\n    /**\r\n     * @member {Image[]} [storeImages]\r\n     */\r\n    storeImages?: Image[];\r\n    /**\r\n     * @member {string} [url]\r\n     */\r\n    url?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Category.\r\n   */\r\n  export interface Category {\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {Image} [image]\r\n     */\r\n    image?: Image;\r\n    /**\r\n     * @member {string} [url]\r\n     */\r\n    url?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing FeatureUnit.\r\n   */\r\n  export interface FeatureUnit {\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {string} [symbol]\r\n     */\r\n    symbol?: string;\r\n    /**\r\n     * @member {string} [unitType]\r\n     */\r\n    unitType?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing FeatureValue.\r\n   */\r\n  export interface FeatureValue {\r\n    /**\r\n     * @member {string} [value]\r\n     */\r\n    value?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Feature.\r\n   */\r\n  export interface Feature {\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {boolean} [comparable]\r\n     */\r\n    comparable?: boolean;\r\n    /**\r\n     * @member {string} [description]\r\n     */\r\n    description?: string;\r\n    /**\r\n     * @member {FeatureUnit} [featureUnit]\r\n     */\r\n    featureUnit?: FeatureUnit;\r\n    /**\r\n     * @member {FeatureValue[]} [featureValues]\r\n     */\r\n    featureValues?: FeatureValue[];\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {boolean} [range]\r\n     */\r\n    range?: boolean;\r\n    /**\r\n     * @member {string} [type]\r\n     */\r\n    type?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Classification.\r\n   */\r\n  export interface Classification {\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {Feature[]} [features]\r\n     */\r\n    features?: Feature[];\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing FutureStock.\r\n   */\r\n  export interface FutureStock {\r\n    /**\r\n     * @member {Date} [date]\r\n     */\r\n    date?: Date;\r\n    /**\r\n     * @member {string} [formattedDate]\r\n     */\r\n    formattedDate?: string;\r\n    /**\r\n     * @member {Stock} [stock]\r\n     */\r\n    stock?: Stock;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing PriceRange.\r\n   */\r\n  export interface PriceRange {\r\n    /**\r\n     * @member {Price} [maxPrice]\r\n     */\r\n    maxPrice?: Price;\r\n    /**\r\n     * @member {Price} [minPrice]\r\n     */\r\n    minPrice?: Price;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ProductReference.\r\n   */\r\n  export interface ProductReference {\r\n    /**\r\n     * @member {string} [description]\r\n     */\r\n    description?: string;\r\n    /**\r\n     * @member {boolean} [preselected]\r\n     */\r\n    preselected?: boolean;\r\n    /**\r\n     * @member {number} [quantity]\r\n     */\r\n    quantity?: number;\r\n    /**\r\n     * @member {string} [referenceType]\r\n     */\r\n    referenceType?: string;\r\n    /**\r\n     * @member {Product} [target]\r\n     */\r\n    target?: Product;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Language.\r\n   */\r\n  export interface Language {\r\n    /**\r\n     * @member {boolean} [active]\r\n     */\r\n    active?: boolean;\r\n    /**\r\n     * @member {string} [isocode]\r\n     */\r\n    isocode?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {string} [nativeName]\r\n     */\r\n    nativeName?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing User.\r\n   */\r\n  export interface User {\r\n    /**\r\n     * @member {Currency} [currency]\r\n     */\r\n    currency?: Currency;\r\n    /**\r\n     * @member {string} [customerId]\r\n     */\r\n    customerId?: string;\r\n    /**\r\n     * @member {Date} [deactivationDate]\r\n     */\r\n    deactivationDate?: Date;\r\n    /**\r\n     * @member {Address} [defaultAddress]\r\n     */\r\n    defaultAddress?: Address;\r\n    /**\r\n     * @member {string} [displayUid]\r\n     */\r\n    displayUid?: string;\r\n    /**\r\n     * @member {string} [firstName]\r\n     */\r\n    firstName?: string;\r\n    /**\r\n     * @member {Language} [language]\r\n     */\r\n    language?: Language;\r\n    /**\r\n     * @member {string} [lastName]\r\n     */\r\n    lastName?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {string} [title]\r\n     */\r\n    title?: string;\r\n    /**\r\n     * @member {string} [titleCode]\r\n     */\r\n    titleCode?: string;\r\n    /**\r\n     * @member {string} [uid]\r\n     */\r\n    uid?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Review.\r\n   */\r\n  export interface Review {\r\n    /**\r\n     * @member {string} [alias]\r\n     */\r\n    alias?: string;\r\n    /**\r\n     * @member {string} [comment]\r\n     */\r\n    comment?: string;\r\n    /**\r\n     * @member {Date} [date]\r\n     */\r\n    date?: Date;\r\n    /**\r\n     * @member {string} [headline]\r\n     */\r\n    headline?: string;\r\n    /**\r\n     * @member {string} [id]\r\n     */\r\n    id?: string;\r\n    /**\r\n     * @member {User} [principal]\r\n     */\r\n    principal?: User;\r\n    /**\r\n     * @member {number} [rating]\r\n     */\r\n    rating?: number;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing VariantCategory.\r\n   */\r\n  export interface VariantCategory {\r\n    /**\r\n     * @member {boolean} [hasImage]\r\n     */\r\n    hasImage?: boolean;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {number} [priority]\r\n     */\r\n    priority?: number;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing VariantValueCategory.\r\n   */\r\n  export interface VariantValueCategory {\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {number} [sequence]\r\n     */\r\n    sequence?: number;\r\n    /**\r\n     * @member {VariantCategory[]} [superCategories]\r\n     */\r\n    superCategories?: VariantCategory[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing VariantMatrixElement.\r\n   */\r\n  export interface VariantMatrixElement {\r\n    /**\r\n     * @member {VariantMatrixElement[]} [elements]\r\n     */\r\n    elements?: VariantMatrixElement[];\r\n    /**\r\n     * @member {boolean} [isLeaf]\r\n     */\r\n    isLeaf?: boolean;\r\n    /**\r\n     * @member {VariantCategory} [parentVariantCategory]\r\n     */\r\n    parentVariantCategory?: VariantCategory;\r\n    /**\r\n     * @member {VariantOption} [variantOption]\r\n     */\r\n    variantOption?: VariantOption;\r\n    /**\r\n     * @member {VariantValueCategory} [variantValueCategory]\r\n     */\r\n    variantValueCategory?: VariantValueCategory;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Product.\r\n   */\r\n  export interface Product {\r\n    /**\r\n     * @member {boolean} [availableForPickup]\r\n     */\r\n    availableForPickup?: boolean;\r\n    /**\r\n     * @member {number} [averageRating]\r\n     */\r\n    averageRating?: number;\r\n    /**\r\n     * @member {BaseOption[]} [baseOptions]\r\n     */\r\n    baseOptions?: BaseOption[];\r\n    /**\r\n     * @member {string} [baseProduct]\r\n     */\r\n    baseProduct?: string;\r\n    /**\r\n     * @member {Category[]} [categories]\r\n     */\r\n    categories?: Category[];\r\n    /**\r\n     * @member {Classification[]} [classifications]\r\n     */\r\n    classifications?: Classification[];\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {string} [description]\r\n     */\r\n    description?: string;\r\n    /**\r\n     * @member {FutureStock[]} [futureStocks]\r\n     */\r\n    futureStocks?: FutureStock[];\r\n    /**\r\n     * @member {Image[]} [images]\r\n     */\r\n    images?: Image[];\r\n    /**\r\n     * @member {string} [manufacturer]\r\n     */\r\n    manufacturer?: string;\r\n    /**\r\n     * @member {boolean} [multidimensional]\r\n     */\r\n    multidimensional?: boolean;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {number} [numberOfReviews]\r\n     */\r\n    numberOfReviews?: number;\r\n    /**\r\n     * @member {Promotion[]} [potentialPromotions]\r\n     */\r\n    potentialPromotions?: Promotion[];\r\n    /**\r\n     * @member {Price} [price]\r\n     */\r\n    price?: Price;\r\n    /**\r\n     * @member {PriceRange} [priceRange]\r\n     */\r\n    priceRange?: PriceRange;\r\n    /**\r\n     * @member {ProductReference[]} [productReferences]\r\n     */\r\n    productReferences?: ProductReference[];\r\n    /**\r\n     * @member {boolean} [purchasable]\r\n     */\r\n    purchasable?: boolean;\r\n    /**\r\n     * @member {Review[]} [reviews]\r\n     */\r\n    reviews?: Review[];\r\n    /**\r\n     * @member {Stock} [stock]\r\n     */\r\n    stock?: Stock;\r\n    /**\r\n     * @member {string} [summary]\r\n     */\r\n    summary?: string;\r\n    /**\r\n     * @member {string} [url]\r\n     */\r\n    url?: string;\r\n    /**\r\n     * @member {VariantMatrixElement[]} [variantMatrix]\r\n     */\r\n    variantMatrix?: VariantMatrixElement[];\r\n    /**\r\n     * @member {VariantOption[]} [variantOptions]\r\n     */\r\n    variantOptions?: VariantOption[];\r\n    /**\r\n     * @member {string} [variantType]\r\n     */\r\n    variantType?: string;\r\n    /**\r\n     * @member {Price[]} [volumePrices]\r\n     */\r\n    volumePrices?: Price[];\r\n    /**\r\n     * @member {boolean} [volumePricesFlag]\r\n     */\r\n    volumePricesFlag?: boolean;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing OrderEntry.\r\n   */\r\n  export interface OrderEntry {\r\n    /**\r\n     * @member {Price} [basePrice]\r\n     */\r\n    basePrice?: Price;\r\n    /**\r\n     * @member {DeliveryMode} [deliveryMode]\r\n     */\r\n    deliveryMode?: DeliveryMode;\r\n    /**\r\n     * @member {PointOfService} [deliveryPointOfService]\r\n     */\r\n    deliveryPointOfService?: PointOfService;\r\n    /**\r\n     * @member {number} [entryNumber]\r\n     */\r\n    entryNumber?: number;\r\n    /**\r\n     * @member {Product} [product]\r\n     */\r\n    product?: Product;\r\n    /**\r\n     * @member {number} [quantity]\r\n     */\r\n    quantity?: number;\r\n    /**\r\n     * @member {Price} [totalPrice]\r\n     */\r\n    totalPrice?: Price;\r\n    /**\r\n     * @member {boolean} [updateable]\r\n     */\r\n    updateable?: boolean;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing DeliveryOrderEntryGroup.\r\n   */\r\n  export interface DeliveryOrderEntryGroup {\r\n    /**\r\n     * @member {Address} [deliveryAddress]\r\n     */\r\n    deliveryAddress?: Address;\r\n    /**\r\n     * @member {OrderEntry[]} [entries]\r\n     */\r\n    entries?: OrderEntry[];\r\n    /**\r\n     * @member {number} [quantity]\r\n     */\r\n    quantity?: number;\r\n    /**\r\n     * @member {Price} [totalPriceWithTax]\r\n     */\r\n    totalPriceWithTax?: Price;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing PaymentDetails.\r\n   */\r\n  export interface PaymentDetails {\r\n    /**\r\n     * @member {string} [accountHolderName]\r\n     */\r\n    accountHolderName?: string;\r\n    /**\r\n     * @member {Address} [billingAddress]\r\n     */\r\n    billingAddress?: Address;\r\n    /**\r\n     * @member {string} [cardNumber]\r\n     */\r\n    cardNumber?: string;\r\n    /**\r\n     * @member {CardType} [cardType]\r\n     */\r\n    cardType?: CardType;\r\n    /**\r\n     * @member {string} [cvn]\r\n     */\r\n    cvn?: string;\r\n    /**\r\n     * @member {boolean} [defaultPayment]\r\n     */\r\n    defaultPayment?: boolean;\r\n    /**\r\n     * @member {string} [expiryMonth]\r\n     */\r\n    expiryMonth?: string;\r\n    /**\r\n     * @member {string} [expiryYear]\r\n     */\r\n    expiryYear?: string;\r\n    /**\r\n     * @member {string} [id]\r\n     */\r\n    id?: string;\r\n    /**\r\n     * @member {string} [issueNumber]\r\n     */\r\n    issueNumber?: string;\r\n    /**\r\n     * @member {boolean} [saved]\r\n     */\r\n    saved?: boolean;\r\n    /**\r\n     * @member {string} [startMonth]\r\n     */\r\n    startMonth?: string;\r\n    /**\r\n     * @member {string} [startYear]\r\n     */\r\n    startYear?: string;\r\n    /**\r\n     * @member {string} [subscriptionId]\r\n     */\r\n    subscriptionId?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing PickupOrderEntryGroup.\r\n   */\r\n  export interface PickupOrderEntryGroup {\r\n    /**\r\n     * @member {PointOfService} [deliveryPointOfService]\r\n     */\r\n    deliveryPointOfService?: PointOfService;\r\n    /**\r\n     * @member {number} [distance]\r\n     */\r\n    distance?: number;\r\n    /**\r\n     * @member {OrderEntry[]} [entries]\r\n     */\r\n    entries?: OrderEntry[];\r\n    /**\r\n     * @member {number} [quantity]\r\n     */\r\n    quantity?: number;\r\n    /**\r\n     * @member {Price} [totalPriceWithTax]\r\n     */\r\n    totalPriceWithTax?: Price;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Principal.\r\n   */\r\n  export interface Principal {\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {string} [uid]\r\n     */\r\n    uid?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Cart.\r\n   */\r\n  export interface Cart {\r\n    /**\r\n     * @member {PromotionResult[]} [appliedOrderPromotions]\r\n     */\r\n    appliedOrderPromotions?: PromotionResult[];\r\n    /**\r\n     * @member {PromotionResult[]} [appliedProductPromotions]\r\n     */\r\n    appliedProductPromotions?: PromotionResult[];\r\n    /**\r\n     * @member {Voucher[]} [appliedVouchers]\r\n     */\r\n    appliedVouchers?: Voucher[];\r\n    /**\r\n     * @member {boolean} [calculated]\r\n     */\r\n    calculated?: boolean;\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {Address} [deliveryAddress]\r\n     */\r\n    deliveryAddress?: Address;\r\n    /**\r\n     * @member {Price} [deliveryCost]\r\n     */\r\n    deliveryCost?: Price;\r\n    /**\r\n     * @member {number} [deliveryItemsQuantity]\r\n     */\r\n    deliveryItemsQuantity?: number;\r\n    /**\r\n     * @member {DeliveryMode} [deliveryMode]\r\n     */\r\n    deliveryMode?: DeliveryMode;\r\n    /**\r\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\r\n     */\r\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\r\n    /**\r\n     * @member {string} [description]\r\n     */\r\n    description?: string;\r\n    /**\r\n     * @member {OrderEntry[]} [entries]\r\n     */\r\n    entries?: OrderEntry[];\r\n    /**\r\n     * @member {Date} [expirationTime]\r\n     */\r\n    expirationTime?: Date;\r\n    /**\r\n     * @member {string} [guid]\r\n     */\r\n    guid?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {boolean} [net]\r\n     */\r\n    net?: boolean;\r\n    /**\r\n     * @member {Price} [orderDiscounts]\r\n     */\r\n    orderDiscounts?: Price;\r\n    /**\r\n     * @member {PaymentDetails} [paymentInfo]\r\n     */\r\n    paymentInfo?: PaymentDetails;\r\n    /**\r\n     * @member {number} [pickupItemsQuantity]\r\n     */\r\n    pickupItemsQuantity?: number;\r\n    /**\r\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\r\n     */\r\n    pickupOrderGroups?: PickupOrderEntryGroup[];\r\n    /**\r\n     * @member {PromotionResult[]} [potentialOrderPromotions]\r\n     */\r\n    potentialOrderPromotions?: PromotionResult[];\r\n    /**\r\n     * @member {PromotionResult[]} [potentialProductPromotions]\r\n     */\r\n    potentialProductPromotions?: PromotionResult[];\r\n    /**\r\n     * @member {Price} [productDiscounts]\r\n     */\r\n    productDiscounts?: Price;\r\n    /**\r\n     * @member {Date} [saveTime]\r\n     */\r\n    saveTime?: Date;\r\n    /**\r\n     * @member {Principal} [savedBy]\r\n     */\r\n    savedBy?: Principal;\r\n    /**\r\n     * @member {string} [site]\r\n     */\r\n    site?: string;\r\n    /**\r\n     * @member {string} [store]\r\n     */\r\n    store?: string;\r\n    /**\r\n     * @member {Price} [subTotal]\r\n     */\r\n    subTotal?: Price;\r\n    /**\r\n     * @member {Price} [totalDiscounts]\r\n     */\r\n    totalDiscounts?: Price;\r\n    /**\r\n     * @member {number} [totalItems]\r\n     */\r\n    totalItems?: number;\r\n    /**\r\n     * @member {Price} [totalPrice]\r\n     */\r\n    totalPrice?: Price;\r\n    /**\r\n     * @member {Price} [totalPriceWithTax]\r\n     */\r\n    totalPriceWithTax?: Price;\r\n    /**\r\n     * @member {Price} [totalTax]\r\n     */\r\n    totalTax?: Price;\r\n    /**\r\n     * @member {number} [totalUnitCount]\r\n     */\r\n    totalUnitCount?: number;\r\n    /**\r\n     * @member {Principal} [user]\r\n     */\r\n    user?: Principal;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing CartList.\r\n   */\r\n  export interface CartList {\r\n    /**\r\n     * @member {Cart[]} [carts]\r\n     */\r\n    carts?: Cart[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing CartModification.\r\n   */\r\n  export interface CartModification {\r\n    /**\r\n     * @member {boolean} [deliveryModeChanged]\r\n     */\r\n    deliveryModeChanged?: boolean;\r\n    /**\r\n     * @member {OrderEntry} [entry]\r\n     */\r\n    entry?: OrderEntry;\r\n    /**\r\n     * @member {number} [quantity]\r\n     */\r\n    quantity?: number;\r\n    /**\r\n     * @member {number} [quantityAdded]\r\n     */\r\n    quantityAdded?: number;\r\n    /**\r\n     * @member {string} [statusCode]\r\n     */\r\n    statusCode?: string;\r\n    /**\r\n     * @member {string} [statusMessage]\r\n     */\r\n    statusMessage?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing CategoryHierarchy.\r\n   */\r\n  export interface CategoryHierarchy {\r\n    /**\r\n     * @member {string} [id]\r\n     */\r\n    id?: string;\r\n    /**\r\n     * @member {Date} [lastModified]\r\n     */\r\n    lastModified?: Date;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {CategoryHierarchy[]} [subcategories]\r\n     */\r\n    subcategories?: CategoryHierarchy[];\r\n    /**\r\n     * @member {string} [url]\r\n     */\r\n    url?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing CatalogVersion.\r\n   */\r\n  export interface CatalogVersion {\r\n    /**\r\n     * @member {CategoryHierarchy[]} [categories]\r\n     */\r\n    categories?: CategoryHierarchy[];\r\n    /**\r\n     * @member {string} [id]\r\n     */\r\n    id?: string;\r\n    /**\r\n     * @member {Date} [lastModified]\r\n     */\r\n    lastModified?: Date;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {string} [url]\r\n     */\r\n    url?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Catalog.\r\n   */\r\n  export interface Catalog {\r\n    /**\r\n     * @member {CatalogVersion[]} [catalogVersions]\r\n     */\r\n    catalogVersions?: CatalogVersion[];\r\n    /**\r\n     * @member {string} [id]\r\n     */\r\n    id?: string;\r\n    /**\r\n     * @member {Date} [lastModified]\r\n     */\r\n    lastModified?: Date;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {string} [url]\r\n     */\r\n    url?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing CatalogList.\r\n   */\r\n  export interface CatalogList {\r\n    /**\r\n     * @member {Catalog[]} [catalogs]\r\n     */\r\n    catalogs?: Catalog[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ComponentIDList.\r\n   */\r\n  export interface ComponentIDList {\r\n    /**\r\n     * @member {string[]} [idList]\r\n     */\r\n    idList?: string[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ConsignmentEntry.\r\n   */\r\n  export interface ConsignmentEntry {\r\n    /**\r\n     * @member {OrderEntry} [orderEntry]\r\n     */\r\n    orderEntry?: OrderEntry;\r\n    /**\r\n     * @member {number} [quantity]\r\n     */\r\n    quantity?: number;\r\n    /**\r\n     * @member {number} [shippedQuantity]\r\n     */\r\n    shippedQuantity?: number;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Consignment.\r\n   */\r\n  export interface Consignment {\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {PointOfService} [deliveryPointOfService]\r\n     */\r\n    deliveryPointOfService?: PointOfService;\r\n    /**\r\n     * @member {ConsignmentEntry[]} [entries]\r\n     */\r\n    entries?: ConsignmentEntry[];\r\n    /**\r\n     * @member {Address} [shippingAddress]\r\n     */\r\n    shippingAddress?: Address;\r\n    /**\r\n     * @member {string} [status]\r\n     */\r\n    status?: string;\r\n    /**\r\n     * @member {Date} [statusDate]\r\n     */\r\n    statusDate?: Date;\r\n    /**\r\n     * @member {string} [trackingID]\r\n     */\r\n    trackingID?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing CountryList.\r\n   */\r\n  export interface CountryList {\r\n    /**\r\n     * @member {Country[]} [countries]\r\n     */\r\n    countries?: Country[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing CurrencyList.\r\n   */\r\n  export interface CurrencyList {\r\n    /**\r\n     * @member {Currency[]} [currencies]\r\n     */\r\n    currencies?: Currency[];\r\n  }\r\n\r\n  /**\r\n   * An interface representing CustomerCoupon\r\n   */\r\n  export interface CustomerCoupon {\r\n    /**\r\n     * @member {string} [couponId]\r\n     */\r\n    couponId?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {string} [startDate]\r\n     */\r\n    startDate?: string;\r\n    /**\r\n     * @member {string} [endDate]\r\n     */\r\n    endDate?: string;\r\n    /**\r\n     * @member {string} [endDate]\r\n     */\r\n    status?: string;\r\n    /**\r\n     * @member {string} [description]\r\n     */\r\n    description?: string;\r\n    /**\r\n     * @member {boolean} [notificationOn]\r\n     */\r\n    notificationOn?: boolean;\r\n    /**\r\n     * @member {boolean} [allProductsApplicable]\r\n     */\r\n    allProductsApplicable?: boolean;\r\n  }\r\n\r\n  /**\r\n   * An interface representing CustomerCouponSearchResult\r\n   */\r\n  export interface CustomerCouponSearchResult {\r\n    /**\r\n     * @member {CustomerCoupon[]} [coupons]\r\n     */\r\n    coupons?: CustomerCoupon[];\r\n    /**\r\n     * @member {Sort[]} [sorts]\r\n     */\r\n    sorts?: Sort[];\r\n    /**\r\n     * @member {Pagination} [pagination]\r\n     */\r\n    pagination?: Pagination;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing DeliveryModeList.\r\n   */\r\n  export interface DeliveryModeList {\r\n    /**\r\n     * @member {DeliveryMode[]} [deliveryModes]\r\n     */\r\n    deliveryModes?: DeliveryMode[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing FacetValue.\r\n   */\r\n  export interface FacetValue {\r\n    /**\r\n     * @member {number} [count]\r\n     */\r\n    count?: number;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {SearchState} [query]\r\n     */\r\n    query?: SearchState;\r\n    /**\r\n     * @member {boolean} [selected]\r\n     */\r\n    selected?: boolean;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Facet.\r\n   */\r\n  export interface Facet {\r\n    /**\r\n     * @member {boolean} [category]\r\n     */\r\n    category?: boolean;\r\n    /**\r\n     * @member {boolean} [multiSelect]\r\n     */\r\n    multiSelect?: boolean;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {number} [priority]\r\n     */\r\n    priority?: number;\r\n    /**\r\n     * @member {FacetValue[]} [topValues]\r\n     */\r\n    topValues?: FacetValue[];\r\n    /**\r\n     * @member {FacetValue[]} [values]\r\n     */\r\n    values?: FacetValue[];\r\n    /**\r\n     * @member {boolean} [visible]\r\n     */\r\n    visible?: boolean;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing LanguageList.\r\n   */\r\n  export interface LanguageList {\r\n    /**\r\n     * @member {Language[]} [languages]\r\n     */\r\n    languages?: Language[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Pagination.\r\n   * Pagination info\r\n   *\r\n   */\r\n  export interface Pagination {\r\n    /**\r\n     * @member {number} [count] Number of elements on this page\r\n     */\r\n    count?: number;\r\n    /**\r\n     * @member {number} [page] Current page number\r\n     */\r\n    page?: number;\r\n    /**\r\n     * @member {number} [totalCount] Total number of elements\r\n     */\r\n    totalCount?: number;\r\n    /**\r\n     * @member {number} [totalPages] Total number of pages\r\n     */\r\n    totalPages?: number;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Sort.\r\n   * Sort option\r\n   *\r\n   */\r\n  export interface Sort {\r\n    /**\r\n     * @member {boolean} [asc]\r\n     */\r\n    asc?: boolean;\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ListAdaptedComponents.\r\n   */\r\n  export interface ListAdaptedComponents {\r\n    /**\r\n     * @member {any[]} [components]\r\n     */\r\n    components?: any[];\r\n    /**\r\n     * @member {Pagination} [pagination]\r\n     */\r\n    pagination?: Pagination;\r\n    /**\r\n     * @member {Sort[]} [sorts]\r\n     */\r\n    sorts?: Sort[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing MemberList.\r\n   */\r\n  export interface MemberList {\r\n    /**\r\n     * @member {Principal[]} [members]\r\n     */\r\n    members?: Principal[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing OrderEntryList.\r\n   */\r\n  export interface OrderEntryList {\r\n    /**\r\n     * @member {OrderEntry[]} [orderEntries]\r\n     */\r\n    orderEntries?: OrderEntry[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing OrderHistory.\r\n   */\r\n  export interface OrderHistory {\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {string} [guid]\r\n     */\r\n    guid?: string;\r\n    /**\r\n     * @member {Date} [placed]\r\n     */\r\n    placed?: Date;\r\n    /**\r\n     * @member {string} [status]\r\n     */\r\n    status?: string;\r\n    /**\r\n     * @member {string} [statusDisplay]\r\n     */\r\n    statusDisplay?: string;\r\n    /**\r\n     * @member {Price} [total]\r\n     */\r\n    total?: Price;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing PaginationModel.\r\n   */\r\n  export interface PaginationModel {\r\n    /**\r\n     * @member {number} [currentPage]\r\n     */\r\n    currentPage?: number;\r\n    /**\r\n     * @member {number} [pageSize]\r\n     */\r\n    pageSize?: number;\r\n    /**\r\n     * @member {string} [sort]\r\n     */\r\n    sort?: string;\r\n    /**\r\n     * @member {number} [totalPages]\r\n     */\r\n    totalPages?: number;\r\n    /**\r\n     * @member {number} [totalResults]\r\n     */\r\n    totalResults?: number;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing SortModel.\r\n   */\r\n  export interface SortModel {\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {boolean} [selected]\r\n     */\r\n    selected?: boolean;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing OrderHistoryList.\r\n   */\r\n  export interface OrderHistoryList {\r\n    /**\r\n     * @member {OrderHistory[]} [orders]\r\n     */\r\n    orders?: OrderHistory[];\r\n    /**\r\n     * @member {PaginationModel} [pagination]\r\n     */\r\n    pagination?: PaginationModel;\r\n    /**\r\n     * @member {SortModel[]} [sorts]\r\n     */\r\n    sorts?: SortModel[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing OrderStatusUpdateElement.\r\n   */\r\n  export interface OrderStatusUpdateElement {\r\n    /**\r\n     * @member {string} [baseSiteId]\r\n     */\r\n    baseSiteId?: string;\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {string} [status]\r\n     */\r\n    status?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing OrderStatusUpdateElementList.\r\n   */\r\n  export interface OrderStatusUpdateElementList {\r\n    /**\r\n     * @member {OrderStatusUpdateElement[]} [orderStatusUpdateElements]\r\n     */\r\n    orderStatusUpdateElements?: OrderStatusUpdateElement[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Order.\r\n   */\r\n  export interface Order {\r\n    /**\r\n     * @member {PromotionResult[]} [appliedOrderPromotions]\r\n     */\r\n    appliedOrderPromotions?: PromotionResult[];\r\n    /**\r\n     * @member {PromotionResult[]} [appliedProductPromotions]\r\n     */\r\n    appliedProductPromotions?: PromotionResult[];\r\n    /**\r\n     * @member {Voucher[]} [appliedVouchers]\r\n     */\r\n    appliedVouchers?: Voucher[];\r\n    /**\r\n     * @member {boolean} [calculated]\r\n     */\r\n    calculated?: boolean;\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {Consignment[]} [consignments]\r\n     */\r\n    consignments?: Consignment[];\r\n    /**\r\n     * @member {Date} [created]\r\n     */\r\n    created?: Date;\r\n    /**\r\n     * @member {Address} [deliveryAddress]\r\n     */\r\n    deliveryAddress?: Address;\r\n    /**\r\n     * @member {Price} [deliveryCost]\r\n     */\r\n    deliveryCost?: Price;\r\n    /**\r\n     * @member {number} [deliveryItemsQuantity]\r\n     */\r\n    deliveryItemsQuantity?: number;\r\n    /**\r\n     * @member {DeliveryMode} [deliveryMode]\r\n     */\r\n    deliveryMode?: DeliveryMode;\r\n    /**\r\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\r\n     */\r\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\r\n    /**\r\n     * @member {string} [deliveryStatus]\r\n     */\r\n    deliveryStatus?: string;\r\n    /**\r\n     * @member {string} [deliveryStatusDisplay]\r\n     */\r\n    deliveryStatusDisplay?: string;\r\n    /**\r\n     * @member {OrderEntry[]} [entries]\r\n     */\r\n    entries?: OrderEntry[];\r\n    /**\r\n     * @member {boolean} [guestCustomer]\r\n     */\r\n    guestCustomer?: boolean;\r\n    /**\r\n     * @member {string} [guid]\r\n     */\r\n    guid?: string;\r\n    /**\r\n     * @member {boolean} [net]\r\n     */\r\n    net?: boolean;\r\n    /**\r\n     * @member {Price} [orderDiscounts]\r\n     */\r\n    orderDiscounts?: Price;\r\n    /**\r\n     * @member {PaymentDetails} [paymentInfo]\r\n     */\r\n    paymentInfo?: PaymentDetails;\r\n    /**\r\n     * @member {number} [pickupItemsQuantity]\r\n     */\r\n    pickupItemsQuantity?: number;\r\n    /**\r\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\r\n     */\r\n    pickupOrderGroups?: PickupOrderEntryGroup[];\r\n    /**\r\n     * @member {Price} [productDiscounts]\r\n     */\r\n    productDiscounts?: Price;\r\n    /**\r\n     * @member {string} [site]\r\n     */\r\n    site?: string;\r\n    /**\r\n     * @member {string} [status]\r\n     */\r\n    status?: string;\r\n    /**\r\n     * @member {string} [statusDisplay]\r\n     */\r\n    statusDisplay?: string;\r\n    /**\r\n     * @member {string} [store]\r\n     */\r\n    store?: string;\r\n    /**\r\n     * @member {Price} [subTotal]\r\n     */\r\n    subTotal?: Price;\r\n    /**\r\n     * @member {Price} [totalDiscounts]\r\n     */\r\n    totalDiscounts?: Price;\r\n    /**\r\n     * @member {number} [totalItems]\r\n     */\r\n    totalItems?: number;\r\n    /**\r\n     * @member {Price} [totalPrice]\r\n     */\r\n    totalPrice?: Price;\r\n    /**\r\n     * @member {Price} [totalPriceWithTax]\r\n     */\r\n    totalPriceWithTax?: Price;\r\n    /**\r\n     * @member {Price} [totalTax]\r\n     */\r\n    totalTax?: Price;\r\n    /**\r\n     * @member {OrderEntry[]} [unconsignedEntries]\r\n     */\r\n    unconsignedEntries?: OrderEntry[];\r\n    /**\r\n     * @member {Principal} [user]\r\n     */\r\n    user?: Principal;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ReturnRequest.\r\n   */\r\n  export interface ReturnRequest {\r\n    /**\r\n     * @member {boolean} [cancellable]\r\n     */\r\n    cancellable?: boolean;\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {Date} [creationTime]\r\n     */\r\n    creationTime?: Date;\r\n    /**\r\n     * @member {Price} [deliveryCost]\r\n     */\r\n    deliveryCost?: Price;\r\n    /**\r\n     * @member {order} [order]\r\n     */\r\n    order?: Order;\r\n    /**\r\n     * @member {boolean} [refundDeliveryCost]\r\n     */\r\n    refundDeliveryCost?: boolean;\r\n    /**\r\n     * @member {ReturnRequestEntry[]} [returnEntries]\r\n     */\r\n    returnEntries?: ReturnRequestEntry[];\r\n    /**\r\n     * @member {string} [returnLabelDownloadUrl]\r\n     */\r\n    returnLabelDownloadUrl?: string;\r\n    /**\r\n     * @member {string} [rma]\r\n     */\r\n    rma?: string;\r\n    /**\r\n     * @member {string} [status]\r\n     */\r\n    status?: string;\r\n    /**\r\n     * @member {Price} [subTotal]\r\n     */\r\n    subTotal?: Price;\r\n    /**\r\n     * @member {Price} [totalPrice]\r\n     */\r\n    totalPrice?: Price;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ReturnRequestEntry.\r\n   */\r\n  export interface ReturnRequestEntry {\r\n    /**\r\n     * @member {OrderEntry} [orderEntry]\r\n     */\r\n    orderEntry?: OrderEntry;\r\n    /**\r\n     * @member {number} [expectedQuantity]\r\n     */\r\n    expectedQuantity?: number;\r\n    /**\r\n     * @member {Price} [refundAmount]\r\n     */\r\n    refundAmount?: Price;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing PaymentDetailsList.\r\n   */\r\n  export interface PaymentDetailsList {\r\n    /**\r\n     * @member {PaymentDetails[]} [payments]\r\n     */\r\n    payments?: PaymentDetails[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing PointOfServiceStock.\r\n   */\r\n  export interface PointOfServiceStock {\r\n    /**\r\n     * @member {Address} [address]\r\n     */\r\n    address?: Address;\r\n    /**\r\n     * @member {string} [description]\r\n     */\r\n    description?: string;\r\n    /**\r\n     * @member {string} [displayName]\r\n     */\r\n    displayName?: string;\r\n    /**\r\n     * @member {number} [distanceKm]\r\n     */\r\n    distanceKm?: number;\r\n    /**\r\n     * @member {{ [propertyName: string]: string }} [features]\r\n     */\r\n    features?: { [propertyName: string]: string };\r\n    /**\r\n     * @member {string} [formattedDistance]\r\n     */\r\n    formattedDistance?: string;\r\n    /**\r\n     * @member {GeoPoint} [geoPoint]\r\n     */\r\n    geoPoint?: GeoPoint;\r\n    /**\r\n     * @member {Image} [mapIcon]\r\n     */\r\n    mapIcon?: Image;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {OpeningSchedule} [openingHours]\r\n     */\r\n    openingHours?: OpeningSchedule;\r\n    /**\r\n     * @member {Stock} [stockInfo]\r\n     */\r\n    stockInfo?: Stock;\r\n    /**\r\n     * @member {string} [storeContent]\r\n     */\r\n    storeContent?: string;\r\n    /**\r\n     * @member {Image[]} [storeImages]\r\n     */\r\n    storeImages?: Image[];\r\n    /**\r\n     * @member {string} [url]\r\n     */\r\n    url?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ProductExpressUpdateElement.\r\n   */\r\n  export interface ProductExpressUpdateElement {\r\n    /**\r\n     * @member {string} [catalogId]\r\n     */\r\n    catalogId?: string;\r\n    /**\r\n     * @member {string} [catalogVersion]\r\n     */\r\n    catalogVersion?: string;\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ProductExpressUpdateElementList.\r\n   */\r\n  export interface ProductExpressUpdateElementList {\r\n    /**\r\n     * @member {ProductExpressUpdateElement[]} [productExpressUpdateElements]\r\n     */\r\n    productExpressUpdateElements?: ProductExpressUpdateElement[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ProductList.\r\n   */\r\n  export interface ProductList {\r\n    /**\r\n     * @member {string} [catalog]\r\n     */\r\n    catalog?: string;\r\n    /**\r\n     * @member {number} [currentPage]\r\n     */\r\n    currentPage?: number;\r\n    /**\r\n     * @member {Product[]} [products]\r\n     */\r\n    products?: Product[];\r\n    /**\r\n     * @member {number} [totalPageCount]\r\n     */\r\n    totalPageCount?: number;\r\n    /**\r\n     * @member {number} [totalProductCount]\r\n     */\r\n    totalProductCount?: number;\r\n    /**\r\n     * @member {string} [version]\r\n     */\r\n    version?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ProductReferenceList.\r\n   */\r\n  export interface ProductReferenceList {\r\n    /**\r\n     * @member {ProductReference[]} [references]\r\n     */\r\n    references?: ProductReference[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing SpellingSuggestion.\r\n   */\r\n  export interface SpellingSuggestion {\r\n    /**\r\n     * @member {string} [query]\r\n     */\r\n    query?: string;\r\n    /**\r\n     * @member {string} [suggestion]\r\n     */\r\n    suggestion?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ProductSearchPage.\r\n   */\r\n  export interface ProductSearchPage {\r\n    /**\r\n     * @member {Breadcrumb[]} [breadcrumbs]\r\n     */\r\n    breadcrumbs?: Breadcrumb[];\r\n    /**\r\n     * @member {string} [categoryCode]\r\n     */\r\n    categoryCode?: string;\r\n    /**\r\n     * @member {SearchState} [currentQuery]\r\n     */\r\n    currentQuery?: SearchState;\r\n    /**\r\n     * @member {Facet[]} [facets]\r\n     */\r\n    facets?: Facet[];\r\n    /**\r\n     * @member {string} [freeTextSearch]\r\n     */\r\n    freeTextSearch?: string;\r\n    /**\r\n     * @member {string} [keywordRedirectUrl]\r\n     */\r\n    keywordRedirectUrl?: string;\r\n    /**\r\n     * @member {PaginationModel} [pagination]\r\n     */\r\n    pagination?: PaginationModel;\r\n    /**\r\n     * @member {Product[]} [products]\r\n     */\r\n    products?: Product[];\r\n    /**\r\n     * @member {SortModel[]} [sorts]\r\n     */\r\n    sorts?: SortModel[];\r\n    /**\r\n     * @member {SpellingSuggestion} [spellingSuggestion]\r\n     */\r\n    spellingSuggestion?: SpellingSuggestion;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing PromotionList.\r\n   */\r\n  export interface PromotionList {\r\n    /**\r\n     * @member {Promotion[]} [promotions]\r\n     */\r\n    promotions?: Promotion[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing PromotionResultList.\r\n   */\r\n  export interface PromotionResultList {\r\n    /**\r\n     * @member {PromotionResult[]} [promotions]\r\n     */\r\n    promotions?: PromotionResult[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ReviewList.\r\n   */\r\n  export interface ReviewList {\r\n    /**\r\n     * @member {Review[]} [reviews]\r\n     */\r\n    reviews?: Review[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing SaveCartResult.\r\n   */\r\n  export interface SaveCartResult {\r\n    /**\r\n     * @member {Cart} [savedCartData]\r\n     */\r\n    savedCartData?: Cart;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing StoreFinderSearchPage.\r\n   */\r\n  export interface StoreFinderSearchPage {\r\n    /**\r\n     * @member {number} [boundEastLongitude]\r\n     */\r\n    boundEastLongitude?: number;\r\n    /**\r\n     * @member {number} [boundNorthLatitude]\r\n     */\r\n    boundNorthLatitude?: number;\r\n    /**\r\n     * @member {number} [boundSouthLatitude]\r\n     */\r\n    boundSouthLatitude?: number;\r\n    /**\r\n     * @member {number} [boundWestLongitude]\r\n     */\r\n    boundWestLongitude?: number;\r\n    /**\r\n     * @member {string} [locationText]\r\n     */\r\n    locationText?: string;\r\n    /**\r\n     * @member {PaginationModel} [pagination]\r\n     */\r\n    pagination?: PaginationModel;\r\n    /**\r\n     * @member {SortModel[]} [sorts]\r\n     */\r\n    sorts?: SortModel[];\r\n    /**\r\n     * @member {number} [sourceLatitude]\r\n     */\r\n    sourceLatitude?: number;\r\n    /**\r\n     * @member {number} [sourceLongitude]\r\n     */\r\n    sourceLongitude?: number;\r\n    /**\r\n     * @member {PointOfService[]} [stores]\r\n     */\r\n    stores?: PointOfService[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing StoreFinderStockSearchPage.\r\n   */\r\n  export interface StoreFinderStockSearchPage {\r\n    /**\r\n     * @member {number} [boundEastLongitude]\r\n     */\r\n    boundEastLongitude?: number;\r\n    /**\r\n     * @member {number} [boundNorthLatitude]\r\n     */\r\n    boundNorthLatitude?: number;\r\n    /**\r\n     * @member {number} [boundSouthLatitude]\r\n     */\r\n    boundSouthLatitude?: number;\r\n    /**\r\n     * @member {number} [boundWestLongitude]\r\n     */\r\n    boundWestLongitude?: number;\r\n    /**\r\n     * @member {string} [locationText]\r\n     */\r\n    locationText?: string;\r\n    /**\r\n     * @member {PaginationModel} [pagination]\r\n     */\r\n    pagination?: PaginationModel;\r\n    /**\r\n     * @member {Product} [product]\r\n     */\r\n    product?: Product;\r\n    /**\r\n     * @member {SortModel[]} [sorts]\r\n     */\r\n    sorts?: SortModel[];\r\n    /**\r\n     * @member {number} [sourceLatitude]\r\n     */\r\n    sourceLatitude?: number;\r\n    /**\r\n     * @member {number} [sourceLongitude]\r\n     */\r\n    sourceLongitude?: number;\r\n    /**\r\n     * @member {PointOfServiceStock[]} [stores]\r\n     */\r\n    stores?: PointOfServiceStock[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Suggestion.\r\n   */\r\n  export interface Suggestion {\r\n    /**\r\n     * @member {string} [value]\r\n     */\r\n    value?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing SuggestionList.\r\n   */\r\n  export interface SuggestionList {\r\n    /**\r\n     * @member {Suggestion[]} [suggestions]\r\n     */\r\n    suggestions?: Suggestion[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Title.\r\n   */\r\n  export interface Title {\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing TitleList.\r\n   */\r\n  export interface TitleList {\r\n    /**\r\n     * @member {Title[]} [titles]\r\n     */\r\n    titles?: Title[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing UserGroup.\r\n   */\r\n  export interface UserGroup {\r\n    /**\r\n     * @member {Principal[]} [members]\r\n     */\r\n    members?: Principal[];\r\n    /**\r\n     * @member {number} [membersCount]\r\n     */\r\n    membersCount?: number;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {UserGroup[]} [subGroups]\r\n     */\r\n    subGroups?: UserGroup[];\r\n    /**\r\n     * @member {string} [uid]\r\n     */\r\n    uid?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing UserGroupList.\r\n   */\r\n  export interface UserGroupList {\r\n    /**\r\n     * @member {number} [currentPage]\r\n     */\r\n    currentPage?: number;\r\n    /**\r\n     * @member {number} [numberOfPages]\r\n     */\r\n    numberOfPages?: number;\r\n    /**\r\n     * @member {number} [pageSize]\r\n     */\r\n    pageSize?: number;\r\n    /**\r\n     * @member {number} [totalNumber]\r\n     */\r\n    totalNumber?: number;\r\n    /**\r\n     * @member {UserGroup[]} [userGroups]\r\n     */\r\n    userGroups?: UserGroup[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing UserSignUp.\r\n   */\r\n  export interface UserSignUp {\r\n    /**\r\n     * @member {string} [firstName]\r\n     */\r\n    firstName?: string;\r\n    /**\r\n     * @member {string} [lastName]\r\n     */\r\n    lastName?: string;\r\n    /**\r\n     * @member {string} [password]\r\n     */\r\n    password?: string;\r\n    /**\r\n     * @member {string} [titleCode]\r\n     */\r\n    titleCode?: string;\r\n    /**\r\n     * @member {string} [uid]\r\n     */\r\n    uid?: string;\r\n  }\r\n\r\n  export interface StoreCount {\r\n    count?: number;\r\n    isoCode?: string;\r\n    name?: string;\r\n    type?: string;\r\n  }\r\n\r\n  export interface StoreCountList {\r\n    countriesAndRegionsStoreCount?: StoreCount[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing VoucherList.\r\n   */\r\n  export interface VoucherList {\r\n    /**\r\n     * @member {Voucher[]} [vouchers]\r\n     */\r\n    vouchers?: Voucher[];\r\n  }\r\n\r\n  /**\r\n   * Defines values for PriceType.\r\n   * Possible values include: 'BUY', 'FROM'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: PriceType = <PriceType>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum PriceType {\r\n    BUY = 'BUY',\r\n    FROM = 'FROM',\r\n  }\r\n\r\n  /**\r\n   * Defines values for ImageType.\r\n   * Possible values include: 'PRIMARY', 'GALLERY'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: ImageType = <ImageType>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum ImageType {\r\n    PRIMARY = 'PRIMARY',\r\n    GALLERY = 'GALLERY',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields = <Fields>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields1.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields1 = <Fields1>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields1 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields2.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields2 = <Fields2>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields2 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields3.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields3 = <Fields3>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields3 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields4.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields4 = <Fields4>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields4 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields5.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields5 = <Fields5>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields5 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields6.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields6 = <Fields6>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields6 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for PageType.\r\n   * Possible values include: 'ContentPage', 'ProductPage', 'CategoryPage',\r\n   * 'CatalogPage'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: PageType = <PageType>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum PageType {\r\n    CONTENT_PAGE = 'ContentPage',\r\n    PRODUCT_PAGE = 'ProductPage',\r\n    CATEGORY_PAGE = 'CategoryPage',\r\n    CATALOG_PAGE = 'CatalogPage',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields7.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields7 = <Fields7>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields7 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields8.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields8 = <Fields8>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields8 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields9.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields9 = <Fields9>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields9 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields10.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields10 = <Fields10>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields10 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields11.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields11 = <Fields11>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields11 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields12.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields12 = <Fields12>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields12 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields13.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields13 = <Fields13>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields13 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields14.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields14 = <Fields14>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields14 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields15.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields15 = <Fields15>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields15 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields16.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields16 = <Fields16>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields16 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for SortEnum.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: SortEnum = <SortEnum>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum SortEnum {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields17.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields17 = <Fields17>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields17 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields18.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields18 = <Fields18>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields18 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields19.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields19 = <Fields19>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields19 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields20.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields20 = <Fields20>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields20 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields21.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields21 = <Fields21>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields21 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields22.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields22 = <Fields22>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields22 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields23.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields23 = <Fields23>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields23 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields24.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields24 = <Fields24>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields24 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields25.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields25 = <Fields25>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields25 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields26.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields26 = <Fields26>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields26 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields27.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields27 = <Fields27>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields27 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields28.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields28 = <Fields28>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields28 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields29.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields29 = <Fields29>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields29 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields30.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields30 = <Fields30>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields30 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields31.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields31 = <Fields31>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields31 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields32.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields32 = <Fields32>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields32 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields33.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields33 = <Fields33>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields33 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields34.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields34 = <Fields34>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields34 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields35.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields35 = <Fields35>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields35 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields36.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields36 = <Fields36>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields36 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields37.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields37 = <Fields37>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields37 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields38.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields38 = <Fields38>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields38 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields39.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields39 = <Fields39>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields39 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields40.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields40 = <Fields40>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields40 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields41.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields41 = <Fields41>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields41 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields42.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields42 = <Fields42>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields42 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields43.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields43 = <Fields43>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields43 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields44.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields44 = <Fields44>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields44 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields45.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields45 = <Fields45>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields45 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields46.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields46 = <Fields46>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields46 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields47.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields47 = <Fields47>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields47 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields48.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields48 = <Fields48>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields48 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields49.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields49 = <Fields49>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields49 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields50.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields50 = <Fields50>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields50 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields51.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields51 = <Fields51>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields51 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields52.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields52 = <Fields52>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields52 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields53.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields53 = <Fields53>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields53 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields54.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields54 = <Fields54>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields54 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields55.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields55 = <Fields55>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields55 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields56.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields56 = <Fields56>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields56 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields57.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields57 = <Fields57>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields57 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields58.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields58 = <Fields58>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields58 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields59.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields59 = <Fields59>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields59 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields60.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields60 = <Fields60>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields60 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields61.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields61 = <Fields61>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields61 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Type.\r\n   * Possible values include: 'all', 'product', 'order'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Type = <Type>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Type {\r\n    All = 'all',\r\n    Product = 'product',\r\n    Order = 'order',\r\n  }\r\n\r\n  export interface AnonymousConsent {\r\n    templateCode?: string;\r\n    version?: number;\r\n    consentState?: CONSENT_STATUS;\r\n  }\r\n\r\n  export enum CONSENT_STATUS {\r\n    ANONYMOUS_CONSENT_GIVEN = 'GIVEN',\r\n    ANONYMOUS_CONSENT_WITHDRAWN = 'WITHDRAWN',\r\n  }\r\n\r\n  export interface ConsentTemplate {\r\n    id?: string;\r\n    name?: string;\r\n    description?: string;\r\n    version?: number;\r\n    currentConsent?: Consent;\r\n  }\r\n\r\n  export interface Consent {\r\n    code?: string;\r\n    consentGivenDate?: Date;\r\n    consentWithdrawnDate?: Date;\r\n  }\r\n\r\n  export interface ConsentTemplateList {\r\n    consentTemplates?: ConsentTemplate[];\r\n  }\r\n\r\n  export interface BaseSites {\r\n    baseSites?: BaseSite[];\r\n  }\r\n\r\n  export interface BaseSite {\r\n    channel?: string;\r\n    defaultLanguage?: Language;\r\n    defaultPreviewCatalogId?: string;\r\n    defaultPreviewCategoryCode?: string;\r\n    defaultPreviewProductCode?: string;\r\n    locale?: string;\r\n    name?: string;\r\n    theme?: string;\r\n    uid?: string;\r\n    stores?: BaseStore[];\r\n    urlPatterns?: string[];\r\n    urlEncodingAttributes?: string[];\r\n  }\r\n\r\n  export interface BaseStore {\r\n    currencies?: Currency[];\r\n    defaultCurrency?: Currency;\r\n    languages?: Language[];\r\n    defaultLanguage?: Language;\r\n  }\r\n\r\n  export interface ProductInterestEntry {\r\n    interestType?: NotificationType;\r\n    dateAdded?: string;\r\n    expirationDate?: string;\r\n  }\r\n\r\n  export interface ProductInterestEntryRelation {\r\n    product?: Product;\r\n    productInterestEntry?: ProductInterestEntry[];\r\n  }\r\n\r\n  export interface ProductInterestSearchResult {\r\n    results?: ProductInterestEntryRelation[];\r\n    sorts?: Sort[];\r\n    pagination?: Pagination;\r\n  }\r\n\r\n  export enum NotificationType {\r\n    BACK_IN_STOCK = 'BACK_IN_STOCK',\r\n  }\r\n}\r\n","import { InjectionToken, Provider } from '@angular/core';\n\nexport const ConfigValidatorToken = new InjectionToken(\n  'ConfigurationValidator'\n);\n\n/**\n * ConfigValidator is used to validate config and display warning messages in development mode.\n *\n * In case of failed validation, should return a string with error message.\n */\nexport type ConfigValidator = (config: any) => string | void;\n\n/**\n * Use to probide config validation at app bootstrap (when all config chunks are merged)\n *\n * @param configValidator\n */\nexport function provideConfigValidator(\n  configValidator: ConfigValidator\n): Provider {\n  return {\n    provide: ConfigValidatorToken,\n    useValue: configValidator,\n    multi: true,\n  };\n}\n\nexport function validateConfig(\n  config: any,\n  configValidators: ConfigValidator[]\n) {\n  for (const validate of configValidators) {\n    const warning = validate(config);\n    if (warning) {\n      console.warn(warning);\n    }\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\r\nimport { provideDefaultConfig } from '../config/config.module';\r\nimport { AsmOccModule } from './adapters/asm/asm-occ.module';\r\nimport { CartOccModule } from './adapters/cart/cart-occ.module';\r\nimport { CheckoutOccModule } from './adapters/checkout/checkout-occ.module';\r\nimport { CmsOccModule } from './adapters/cms/cms-occ.module';\r\nimport { ProductOccModule } from './adapters/product/product-occ.module';\r\nimport { SiteContextOccModule } from './adapters/site-context/site-context-occ.module';\r\nimport { StoreFinderOccModule } from './adapters/store-finder/store-finder-occ.module';\r\nimport { UserOccModule } from './adapters/user/user-occ.module';\r\nimport { OccConfigLoaderModule } from './config-loader/occ-config-loader.module';\r\nimport { defaultOccConfig } from './config/default-occ-config';\r\nimport { occConfigValidator } from './config/occ-config-validator';\r\nimport { WithCredentialsInterceptor } from './interceptors/with-credentials.interceptor';\r\n\r\n@NgModule({\r\n  imports: [\r\n    AsmOccModule,\r\n    CmsOccModule,\r\n    CartOccModule,\r\n    CheckoutOccModule,\r\n    ProductOccModule,\r\n    SiteContextOccModule,\r\n    StoreFinderOccModule,\r\n    UserOccModule,\r\n    OccConfigLoaderModule.forRoot(),\r\n  ],\r\n})\r\nexport class OccModule {\r\n  static forRoot(): ModuleWithProviders<OccModule> {\r\n    return {\r\n      ngModule: OccModule,\r\n      providers: [\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useExisting: WithCredentialsInterceptor,\r\n          multi: true,\r\n        },\r\n        provideDefaultConfig(defaultOccConfig),\r\n        provideConfigValidator(occConfigValidator),\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../config/occ-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoadingScopesService {\n  constructor(protected config: OccConfig) {}\n\n  /**\n   * Aims to expand scopes based on loading scopes config.\n   *\n   * I.e. if 'details' scope includes 'list' scope by configuration, it'll return ['details', 'list']\n   *\n   * If scope data overlaps with each other, the data should be merged in the order of scopes provided,\n   * i.e. the last scope is merged last, overwriting parts of the data already provided by preceding scope.\n   * It should apply also to implicit scopes (that are included by configuration).\n   *\n   * @param model\n   * @param scopes\n   */\n  expand(model: string, scopes: string[]): string[] {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n\n    if (scopesConfig) {\n      const expandedScopes = [...scopes];\n      let i = expandedScopes.length;\n\n      while (i > 0) {\n        i--;\n        const includedScopes =\n          scopesConfig[expandedScopes[i]] &&\n          scopesConfig[expandedScopes[i]].include;\n        if (includedScopes) {\n          for (const includedScope of includedScopes) {\n            if (!expandedScopes.includes(includedScope)) {\n              expandedScopes.splice(i, 0, includedScope);\n              i++;\n            }\n          }\n        }\n      }\n\n      return expandedScopes;\n    }\n\n    return scopes;\n  }\n\n  /**\n   * Return maxAge for product scope in milliseconds\n   *\n   * @param model\n   * @param scope\n   */\n  getMaxAge(model: string, scope: string): number {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n    return (scopesConfig[scope] && scopesConfig[scope].maxAge) * 1000 || 0;\n  }\n}\n","import { OccConfig } from '../../occ/config/occ-config';\r\nimport { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class AnonymousConsentsConfig extends OccConfig {\r\n  anonymousConsents?: {\r\n    /**\r\n     * Specify the consent template ID to be show on the registration page.\r\n     */\r\n    registerConsent?: string;\r\n    /**\r\n     * Show the legal description at the top of the anonymous consents dialog.\r\n     */\r\n    showLegalDescriptionInDialog?: boolean;\r\n    /**\r\n     * Specify the list of consent template IDs that are required and which can't be toggled off.\r\n     */\r\n    requiredConsents?: string[];\r\n    /**\r\n     * Consent management page configuration.\r\n     */\r\n    consentManagementPage?: {\r\n      /**\r\n       * Show all anonymous consents on the consent management page.\r\n       */\r\n      showAnonymousConsents?: boolean;\r\n      /**\r\n       * A list of consent template IDs that should be hidden on the consent management page.\r\n       */\r\n      hideConsents?: string[];\r\n    };\r\n  };\r\n}\r\n","import {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpResponse,\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { switchMap, take, tap, withLatestFrom } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/index';\r\nimport { AnonymousConsent, ANONYMOUS_CONSENT_STATUS } from '../../model/index';\r\nimport { OccEndpointsService } from '../../occ/index';\r\nimport { AnonymousConsentsConfig } from '../config/anonymous-consents-config';\r\nimport { AnonymousConsentsService } from '../facade/anonymous-consents.service';\r\n\r\nexport const ANONYMOUS_CONSENTS_HEADER = 'X-Anonymous-Consents';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AnonymousConsentsInterceptor implements HttpInterceptor {\r\n  constructor(\r\n    private anonymousConsentsService: AnonymousConsentsService,\r\n    private authService: AuthService,\r\n    private occEndpoints: OccEndpointsService,\r\n    private config: AnonymousConsentsConfig\r\n  ) {}\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    return this.anonymousConsentsService.getConsents().pipe(\r\n      take(1),\r\n      withLatestFrom(this.authService.isUserLoggedIn()),\r\n      switchMap(([consents, isUserLoggedIn]) => {\r\n        if (!this.isOccUrl(request.url)) {\r\n          return next.handle(request);\r\n        }\r\n\r\n        const clonedRequest = this.handleRequest(consents, request);\r\n        return next.handle(clonedRequest).pipe(\r\n          tap((event) => {\r\n            if (event instanceof HttpResponse) {\r\n              this.handleResponse(\r\n                isUserLoggedIn,\r\n                event.headers.get(ANONYMOUS_CONSENTS_HEADER),\r\n                consents\r\n              );\r\n            }\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  private handleResponse(\r\n    isUserLoggedIn: boolean,\r\n    newRawConsents: string,\r\n    previousConsents: AnonymousConsent[]\r\n  ): void {\r\n    if (!isUserLoggedIn && newRawConsents) {\r\n      let newConsents: AnonymousConsent[] = [];\r\n      newConsents = this.anonymousConsentsService.decodeAndDeserialize(\r\n        newRawConsents\r\n      );\r\n      newConsents = this.giveRequiredConsents(newConsents);\r\n\r\n      if (\r\n        this.anonymousConsentsService.consentsUpdated(\r\n          newConsents,\r\n          previousConsents\r\n        )\r\n      ) {\r\n        this.anonymousConsentsService.setConsents(newConsents);\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleRequest(\r\n    consents: AnonymousConsent[],\r\n    request: HttpRequest<any>\r\n  ): HttpRequest<any> {\r\n    if (!consents) {\r\n      return request;\r\n    }\r\n\r\n    const rawConsents = this.anonymousConsentsService.serializeAndEncode(\r\n      consents\r\n    );\r\n    return request.clone({\r\n      setHeaders: {\r\n        [ANONYMOUS_CONSENTS_HEADER]: rawConsents,\r\n      },\r\n    });\r\n  }\r\n\r\n  private isOccUrl(url: string): boolean {\r\n    return url.includes(this.occEndpoints.getBaseEndpoint());\r\n  }\r\n\r\n  private giveRequiredConsents(\r\n    consents: AnonymousConsent[]\r\n  ): AnonymousConsent[] {\r\n    const givenConsents = [...consents];\r\n\r\n    if (\r\n      Boolean(this.config.anonymousConsents) &&\r\n      Boolean(this.config.anonymousConsents.requiredConsents)\r\n    ) {\r\n      for (const consent of givenConsents) {\r\n        if (\r\n          this.config.anonymousConsents.requiredConsents.includes(\r\n            consent.templateCode\r\n          )\r\n        ) {\r\n          consent.consentState = ANONYMOUS_CONSENT_STATUS.GIVEN;\r\n        }\r\n      }\r\n    }\r\n    return givenConsents;\r\n  }\r\n}\r\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AnonymousConsentsInterceptor } from './anonymous-consents-interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AnonymousConsentsInterceptor,\n    multi: true,\n  },\n];\n","import { Observable, Subscriber, Subscription } from 'rxjs';\r\nimport { share } from 'rxjs/operators';\r\n\r\n// PRIVATE API\r\n\r\n/**\r\n * Allows for dynamic adding and removing source observables\r\n * and exposes them as one merged observable at a property `output$`.\r\n *\r\n * Thanks to the `share()` operator used inside, it subscribes to source observables\r\n * only when someone subscribes to it. And it unsubscribes from source observables\r\n * when the counter of consumers drops to 0.\r\n *\r\n * **To avoid memory leaks**, all manually added sources should be manually removed\r\n * when not plan to emit values anymore. In particular closed event sources won't be\r\n * automatically removed.\r\n */\r\nexport class MergingSubject<T> {\r\n  /**\r\n   * List of already added sources (but not removed yet)\r\n   */\r\n  private sources: Observable<T>[] = [];\r\n\r\n  /**\r\n   * For each source: it stores a subscription responsible for\r\n   * passing all values from source to the consumer\r\n   */\r\n  private subscriptionsToSources = new Map<Observable<T>, Subscription>();\r\n\r\n  /**\r\n   * Observable with all sources merged.\r\n   *\r\n   * Only after subscribing to it, under the hood it subscribes to the source observables.\r\n   * When the number of subscribers drops to 0, it unsubscribes from all source observables.\r\n   * But if later on something subscribes to it again, it subscribes to the source observables again.\r\n   *\r\n   * It multicasts the emissions for each subscriber.\r\n   */\r\n  readonly output$: Observable<T> = new Observable<T>((consumer) => {\r\n    // There can be only 0 or 1 consumer of this observable coming from the `share()` operator\r\n    // that is piped right after this observable.\r\n    // `share()` not only multicasts the results but also  When all end-subscribers unsubscribe from `share()` operator, it will unsubscribe\r\n    // from this observable (by the nature `refCount`-nature of the `share()` operator).\r\n\r\n    this.consumer = consumer;\r\n    this.bindAllSourcesToConsumer(consumer);\r\n\r\n    return () => {\r\n      this.consumer = null;\r\n      this.unbindAllSourcesFromConsumer();\r\n    };\r\n  }).pipe(share());\r\n\r\n  /**\r\n   * Reference to the subscriber coming from the `share()` operator piped to the `output$` observable.\r\n   * For more, see docs of the `output$` observable;\r\n   */\r\n  private consumer: Subscriber<any> = null;\r\n\r\n  /**\r\n   * Registers the given source to pass its values to the `output$` observable.\r\n   *\r\n   * It does nothing, when the source has been already added (but not removed yet).\r\n   */\r\n  add(source: Observable<T>): void {\r\n    if (this.has(source)) {\r\n      return;\r\n    }\r\n\r\n    if (this.consumer) {\r\n      this.bindSourceToConsumer(source, this.consumer);\r\n    }\r\n    this.sources.push(source);\r\n  }\r\n\r\n  /**\r\n   * Starts passing all values from already added sources to consumer\r\n   */\r\n  private bindAllSourcesToConsumer(consumer: Subscriber<T>) {\r\n    this.sources.forEach((source) =>\r\n      this.bindSourceToConsumer(source, consumer)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Stops passing all values from already added sources to consumer\r\n   * (if any consumer is active at the moment)\r\n   */\r\n  private unbindAllSourcesFromConsumer() {\r\n    this.sources.forEach((source) => this.unbindSourceFromConsumer(source));\r\n  }\r\n\r\n  /**\r\n   * Starts passing all values from a single source to consumer\r\n   */\r\n  private bindSourceToConsumer(source: Observable<T>, consumer: Subscriber<T>) {\r\n    const subscriptionToSource = source.subscribe((val) => consumer.next(val)); // passes all emissions from source to consumer\r\n    this.subscriptionsToSources.set(source, subscriptionToSource);\r\n  }\r\n\r\n  /**\r\n   * Stops passing all values from a single source to consumer\r\n   * (if any consumer is active at the moment)\r\n   */\r\n  private unbindSourceFromConsumer(source: Observable<T>) {\r\n    const subscriptionToSource = this.subscriptionsToSources.get(source);\r\n    if (subscriptionToSource !== undefined) {\r\n      subscriptionToSource.unsubscribe();\r\n      this.subscriptionsToSources.delete(source);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unregisters the given source so it stops passing its values to `output$` observable.\r\n   *\r\n   * Should be used when a source is no longer maintained **to avoid memory leaks**.\r\n   */\r\n  remove(source: Observable<T>): void {\r\n    // clear binding from source to consumer (if any consumer exists at the moment)\r\n    this.unbindSourceFromConsumer(source);\r\n\r\n    // remove source from array\r\n    let i: number;\r\n    if ((i = this.sources.findIndex((s) => s === source)) !== -1) {\r\n      this.sources.splice(i, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns whether the given source has been already addded\r\n   */\r\n  has(source: Observable<T>): boolean {\r\n    return this.sources.includes(source);\r\n  }\r\n}\r\n","import { Injectable, isDevMode, Type } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { MergingSubject } from './utils/merging-subject';\r\n\r\n/**\r\n * The object holds registered source observables as well as the merged result observable.\r\n */\r\ninterface EventMeta<T> {\r\n  /**\r\n   * Input subject used for dispatching occasional event (without registering a source)\r\n   */\r\n  inputSubject$: Subject<T>;\r\n\r\n  /**\r\n   * A custom subject that allows for dynamic adding and removing sources to be merged as an output\r\n   */\r\n  mergingSubject: MergingSubject<T>;\r\n}\r\n\r\n/**\r\n * A service to register and observe event sources. Events are driven by event types, which are class signatures\r\n * for the given event.\r\n *\r\n * It is possible to register multiple sources to a single event, even without\r\n * knowing as multiple decoupled features can attach sources to the same\r\n * event type.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class EventService {\r\n  /**\r\n   * The various events meta are collected in a map, stored by the event type class\r\n   */\r\n  private eventsMeta = new Map<Type<any>, EventMeta<any>>();\r\n\r\n  /**\r\n   * Register an event source for the given event type.\r\n   *\r\n   * CAUTION: To avoid memory leaks, the returned teardown function should be called\r\n   *  when the event source is no longer maintained by its creator\r\n   * (i.e. in `ngOnDestroy` if the event source was registered in the component).\r\n   *\r\n   * @param eventType the event type\r\n   * @param source$ an observable that represents the source\r\n   *\r\n   * @returns a teardown function which unregisters the given event source\r\n   */\r\n  register<T>(eventType: Type<T>, source$: Observable<T>): () => void {\r\n    const eventMeta = this.getEventMeta(eventType);\r\n    if (eventMeta.mergingSubject.has(source$)) {\r\n      if (isDevMode()) {\r\n        console.warn(\r\n          `EventService: the event source`,\r\n          source$,\r\n          `has been already registered for the type`,\r\n          eventType\r\n        );\r\n      }\r\n    } else {\r\n      eventMeta.mergingSubject.add(source$);\r\n    }\r\n\r\n    return () => eventMeta.mergingSubject.remove(source$);\r\n  }\r\n\r\n  /**\r\n   * Returns a stream of events for the given event type\r\n   * @param eventTypes event type\r\n   */\r\n  get<T>(eventType: Type<T>): Observable<T> {\r\n    let output$ = this.getEventMeta(eventType).mergingSubject.output$;\r\n    if (isDevMode()) {\r\n      output$ = this.getValidatedEventStream(output$, eventType);\r\n    }\r\n    return output$;\r\n  }\r\n\r\n  /**\r\n   * Dispatches an instance of an individual event.\r\n   */\r\n  dispatch(event: Object): void {\r\n    const eventType = event.constructor as Type<any>;\r\n    const inputSubject$ = this.getInputSubject(eventType);\r\n    inputSubject$.next(event);\r\n  }\r\n\r\n  /**\r\n   * Returns the input subject used to dispatch a single event.\r\n   * The subject is created on demand, when it's needed for the first time.\r\n   * @param eventType type of event\r\n   */\r\n  private getInputSubject<T>(eventType: Type<T>): Subject<T> {\r\n    const eventMeta = this.getEventMeta(eventType);\r\n\r\n    if (!eventMeta.inputSubject$) {\r\n      eventMeta.inputSubject$ = new Subject<any>();\r\n      this.register(eventType, eventMeta.inputSubject$);\r\n    }\r\n    return eventMeta.inputSubject$;\r\n  }\r\n\r\n  /**\r\n   * Returns the event meta object for the given event type\r\n   */\r\n  private getEventMeta<T>(eventType: Type<T>): EventMeta<T> {\r\n    if (isDevMode()) {\r\n      this.validateEventType(eventType);\r\n    }\r\n\r\n    if (!this.eventsMeta.get(eventType)) {\r\n      this.createEventMeta(eventType);\r\n    }\r\n    return this.eventsMeta.get(eventType);\r\n  }\r\n\r\n  /**\r\n   * Creates the event meta object for the given event type\r\n   */\r\n  private createEventMeta<T>(eventType: Type<T>): void {\r\n    this.eventsMeta.set(eventType, {\r\n      inputSubject$: null, // will be created lazily by the `dispatch` method\r\n      mergingSubject: new MergingSubject(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Checks if the event type is a valid type (is a class with constructor).\r\n   *\r\n   * Should be used only in dev mode.\r\n   */\r\n  private validateEventType<T>(eventType: Type<T>): void {\r\n    if (!eventType?.constructor) {\r\n      throw new Error(\r\n        `EventService:  ${eventType} is not a valid event type. Please provide a class reference.`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the given event source with runtime validation whether the emitted values are instances of given event type.\r\n   *\r\n   * Should be used only in dev mode.\r\n   */\r\n  private getValidatedEventStream<T>(\r\n    source$: Observable<T>,\r\n    eventType: Type<T>\r\n  ): Observable<T> {\r\n    return source$.pipe(\r\n      tap((event) => {\r\n        if (!(event instanceof eventType)) {\r\n          console.warn(\r\n            `EventService: The stream`,\r\n            source$,\r\n            `emitted the event`,\r\n            event,\r\n            `that is not an instance of the declared type`,\r\n            eventType.name\r\n          );\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Type } from '@angular/core';\r\n\r\n/**\r\n * Creates an instance of the given class and fills its properties with the given data.\r\n *\r\n * @param type reference to the class\r\n * @param data object with properties to be copied to the class\r\n */\r\nexport function createFrom<T>(type: Type<T>, data: T): T {\r\n  return Object.assign(new type(), data);\r\n}\r\n","import { Injectable, Type } from '@angular/core';\r\nimport { ofType } from '@ngrx/effects';\r\nimport { ActionsSubject } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { EventService } from '../../event/event.service';\r\nimport { createFrom } from '../../util/create-from';\r\nimport { ActionToEventMapping } from './action-to-event-mapping';\r\n\r\n/**\r\n * Registers streams of ngrx actions as events source streams\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class StateEventService {\r\n  constructor(\r\n    protected actionsSubject: ActionsSubject,\r\n    protected eventService: EventService\r\n  ) {}\r\n\r\n  /**\r\n   * Registers an event source stream of specific events\r\n   * mapped from a given action type.\r\n   *\r\n   * @param mapping mapping from action to event\r\n   *\r\n   * @returns a teardown function that unregisters the event source\r\n   */\r\n  register<T>(mapping: ActionToEventMapping<T>): () => void {\r\n    return this.eventService.register(\r\n      mapping.event,\r\n      this.getFromAction(mapping)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a stream of specific events mapped from a specific action.\r\n   * @param mapping mapping from action to event\r\n   */\r\n  protected getFromAction<T>(mapping: ActionToEventMapping<T>): Observable<T> {\r\n    return this.actionsSubject\r\n      .pipe(ofType(...[].concat(mapping.action)))\r\n      .pipe(\r\n        map((action: { type: string; payload: T }) =>\r\n          this.createEvent(action, mapping.event, mapping.factory)\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Creates an event instance for given class out from the action object.\r\n   * Unless the `factory` parameter is given, the action's `payload` is used\r\n   * as the argument for the event's constructor.\r\n   *\r\n   * @param action instance of an Action\r\n   * @param mapping mapping from action to event\r\n   * @param factory optional function getting an action instance and returning an event instance\r\n   *\r\n   * @returns instance of an Event\r\n   */\r\n  protected createEvent<T>(\r\n    action: { type: string; payload?: any },\r\n    eventType: Type<T>,\r\n    factory?: (action: any) => T\r\n  ): T {\r\n    return factory\r\n      ? factory(action)\r\n      : createFrom(eventType, action.payload ?? {});\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, Subscription } from 'rxjs';\r\nimport { map, tap, withLatestFrom } from 'rxjs/operators';\r\nimport { StorageSyncType } from '../../state/config/state-config';\r\nimport {\r\n  getStorage,\r\n  persistToStorage,\r\n  readFromStorage,\r\n} from '../../state/reducers/storage-sync.reducer';\r\nimport { WindowRef } from '../../window/window-ref';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class StatePersistenceService {\r\n  constructor(protected winRef: WindowRef) {}\r\n\r\n  /**\r\n   * Helper to synchronize state to more persistent storage (localStorage, sessionStorage).\r\n   * It is context aware, so you can keep different state for te same feature based on specified context.\r\n   *\r\n   * Eg. cart is valid only under the same base site. So you want to synchronize cart only with the same base site.\r\n   * Usage for that case: `syncWithStorage({ key: 'cart', state$: activeCartSelector$, context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]), onRead: (state) => setCorrectStateInStore(state) })`.\r\n   * Active cart for the `electronics` base site will be stored under `spartacus⚿electronics⚿cart` and for apparel under `spartacus⚿apparel⚿cart`.\r\n   *\r\n   * On each context change onRead function will be executed with state from storage provided as a parameter.\r\n   *\r\n   * Omitting context$ will trigger onRead only once at initialization.\r\n   *\r\n   * @param key Key to use in storage for the synchronized state. Should be unique for each feature.\r\n   * @param state$ State to be saved and later restored.\r\n   * @param context$ Context for state\r\n   * @param storageType Storage type to be used to persist state\r\n   * @param onRead Function to be executed on each storage read after context change\r\n   *\r\n   * @returns Subscriptions for reading/writing in storage on context/state change\r\n   */\r\n  syncWithStorage<T>({\r\n    key,\r\n    state$,\r\n    context$ = of(''),\r\n    storageType = StorageSyncType.LOCAL_STORAGE,\r\n    onRead = () => {},\r\n  }: {\r\n    key: string;\r\n    state$: Observable<T>;\r\n    context$?: Observable<string | Array<string>>;\r\n    storageType?: StorageSyncType;\r\n    onRead?: (stateFromStorage: T) => void;\r\n  }): Subscription {\r\n    const storage = getStorage(storageType, this.winRef);\r\n\r\n    const subscriptions = new Subscription();\r\n\r\n    // Do not change order of subscription! Read should happen before write on context change.\r\n    subscriptions.add(\r\n      context$\r\n        .pipe(\r\n          map((context) => {\r\n            return readFromStorage(\r\n              storage,\r\n              this.generateKeyWithContext(context, key)\r\n            ) as T;\r\n          }),\r\n          tap((state) => onRead(state))\r\n        )\r\n        .subscribe()\r\n    );\r\n\r\n    subscriptions.add(\r\n      state$.pipe(withLatestFrom(context$)).subscribe(([state, context]) => {\r\n        persistToStorage(\r\n          this.generateKeyWithContext(context, key),\r\n          state,\r\n          storage\r\n        );\r\n      })\r\n    );\r\n\r\n    return subscriptions;\r\n  }\r\n\r\n  protected generateKeyWithContext(\r\n    context: string | Array<string>,\r\n    key: string\r\n  ): string {\r\n    return `spartacus⚿${[].concat(context).join('⚿')}⚿${key}`;\r\n  }\r\n}\r\n","import { EntityLoaderState } from '../../state/utils/entity-loader/entity-loader-state';\n\nexport const PROCESS_FEATURE = 'process';\n\nexport interface StateWithProcess<T> {\n  [PROCESS_FEATURE]: EntityLoaderState<T>;\n}\n","import { MemoizedSelector, createFeatureSelector } from '@ngrx/store';\n\nimport { StateWithProcess, PROCESS_FEATURE } from '../process-state';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\n\nexport function getProcessState<T>(): MemoizedSelector<\n  StateWithProcess<T>,\n  EntityLoaderState<T>\n> {\n  return createFeatureSelector<EntityLoaderState<T>>(PROCESS_FEATURE);\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport {\r\n  loaderErrorSelector,\r\n  loaderLoadingSelector,\r\n  loaderSuccessSelector,\r\n} from '../../../state/utils/loader/loader.selectors';\r\nimport { StateWithProcess } from '../process-state';\r\nimport { getProcessState } from './feature.selector';\r\n\r\nexport function getProcessStateFactory<T>(\r\n  processId: string\r\n): MemoizedSelector<StateWithProcess<T>, LoaderState<T>> {\r\n  return createSelector(getProcessState(), (entityState) =>\r\n    StateUtils.entityLoaderStateSelector(entityState, processId)\r\n  );\r\n}\r\n\r\nexport function getProcessLoadingFactory<T>(\r\n  processId: string\r\n): MemoizedSelector<StateWithProcess<T>, boolean> {\r\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\r\n    loaderLoadingSelector(loaderState)\r\n  );\r\n}\r\n\r\nexport function getProcessSuccessFactory<T>(\r\n  processId: string\r\n): MemoizedSelector<StateWithProcess<T>, boolean> {\r\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\r\n    loaderSuccessSelector(loaderState)\r\n  );\r\n}\r\n\r\nexport function getProcessErrorFactory<T>(\r\n  processId: string\r\n): MemoizedSelector<StateWithProcess<T>, boolean> {\r\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\r\n    loaderErrorSelector(loaderState)\r\n  );\r\n}\r\n","import { Action } from '@ngrx/store';\n\nexport const LOAD_BILLING_COUNTRIES = '[User] Load Billing Countries';\nexport const LOAD_BILLING_COUNTRIES_FAIL = '[User] Load Billing Countries Fail';\nexport const LOAD_BILLING_COUNTRIES_SUCCESS =\n  '[User] Load Billing Countries Success';\n\nexport class LoadBillingCountries implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadBillingCountriesFail implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBillingCountriesSuccess implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport type BillingCountriesAction =\n  | LoadBillingCountries\n  | LoadBillingCountriesFail\n  | LoadBillingCountriesSuccess;\n","import { Action } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\n\nexport const LOAD_CONSIGNMENT_TRACKING = '[User] Load Consignment Tracking';\nexport const LOAD_CONSIGNMENT_TRACKING_FAIL =\n  '[User] Load Consignment Tracking Fail';\nexport const LOAD_CONSIGNMENT_TRACKING_SUCCESS =\n  '[User] Load Consignment Tracking Success';\nexport const CLEAR_CONSIGNMENT_TRACKING = '[User] Clear Consignment Tracking';\n\nexport class LoadConsignmentTracking implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING;\n  constructor(\n    public payload: {\n      userId?: string;\n      orderCode: string;\n      consignmentCode: string;\n    }\n  ) {}\n}\n\nexport class LoadConsignmentTrackingFail implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadConsignmentTrackingSuccess implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_SUCCESS;\n  constructor(public payload: ConsignmentTracking) {}\n}\n\nexport class ClearConsignmentTracking {\n  readonly type = CLEAR_CONSIGNMENT_TRACKING;\n  constructor() {}\n}\n\nexport type ConsignmentTrackingAction =\n  | LoadConsignmentTracking\n  | LoadConsignmentTrackingFail\n  | LoadConsignmentTrackingSuccess\n  | ClearConsignmentTracking;\n","import { Action } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\n\nexport const LOAD_DELIVERY_COUNTRIES = '[User] Load Delivery Countries';\nexport const LOAD_DELIVERY_COUNTRIES_FAIL =\n  '[User] Load Delivery Countries Fail';\nexport const LOAD_DELIVERY_COUNTRIES_SUCCESS =\n  '[User] Load Delivery Countries Success';\n\nexport class LoadDeliveryCountries implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadDeliveryCountriesFail implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadDeliveryCountriesSuccess implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_SUCCESS;\n  constructor(public payload: Country[]) {}\n}\n\nexport type DeliveryCountriesAction =\n  | LoadDeliveryCountries\n  | LoadDeliveryCountriesFail\n  | LoadDeliveryCountriesSuccess;\n","import { Action } from '@ngrx/store';\n\nexport const FORGOT_PASSWORD_EMAIL_REQUEST =\n  '[User] Forgot Password Email Request';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS =\n  '[User] Forgot Password Email Request Success';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_FAIL =\n  '[User] Forgot Password Email Request Fail';\n\nexport class ForgotPasswordEmailRequest implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST;\n  constructor(public payload: string) {}\n}\n\nexport class ForgotPasswordEmailRequestFail implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ForgotPasswordEmailRequestSuccess implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS;\n}\n\nexport type ForgotPasswordEmailRequestAction =\n  | ForgotPasswordEmailRequest\n  | ForgotPasswordEmailRequestFail\n  | ForgotPasswordEmailRequestSuccess;\n","import { Address, Country, Region } from '../../model/address.model';\r\nimport { PaymentDetails } from '../../model/cart.model';\r\nimport { ConsentTemplate } from '../../model/consent.model';\r\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\r\nimport { Title, User } from '../../model/misc.model';\r\nimport {\r\n  Order,\r\n  OrderHistoryList,\r\n  ReturnRequest,\r\n  ReturnRequestList,\r\n} from '../../model/order.model';\r\nimport { StateUtils } from '../../state';\r\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\r\nimport { NotificationPreference } from '../../model';\r\nimport { ProductInterestSearchResult } from '../../model/product-interest.model';\r\n\r\nexport const USER_FEATURE = 'user';\r\nexport const UPDATE_EMAIL_PROCESS_ID = 'updateEmail';\r\nexport const UPDATE_PASSWORD_PROCESS_ID = 'updatePassword';\r\nexport const UPDATE_USER_DETAILS_PROCESS_ID = 'updateUserDetails';\r\nexport const REGISTER_USER_PROCESS_ID = 'registerUser';\r\nexport const REMOVE_USER_PROCESS_ID = 'removeUser';\r\nexport const GIVE_CONSENT_PROCESS_ID = 'giveConsent';\r\nexport const WITHDRAW_CONSENT_PROCESS_ID = 'withdrawConsent';\r\nexport const UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID =\r\n  'updateNotificationPreferences';\r\nexport const ADD_PRODUCT_INTEREST_PROCESS_ID = 'addProductInterests';\r\nexport const REMOVE_PRODUCT_INTERESTS_PROCESS_ID = 'removeProductInterests';\r\nexport const CANCEL_ORDER_PROCESS_ID = 'cancelOrder';\r\nexport const CANCEL_RETURN_PROCESS_ID = 'cancelReturn';\r\n\r\nexport const USER_CONSENTS = '[User] User Consents';\r\nexport const USER_PAYMENT_METHODS = '[User] User Payment Methods';\r\nexport const USER_ORDERS = '[User] User Orders';\r\nexport const USER_ADDRESSES = '[User] User Addresses';\r\nexport const USER_RETURN_REQUESTS = '[User] Order Return Requests';\r\nexport const USER_RETURN_REQUEST_DETAILS = '[User] Return Request Details';\r\nexport const USER_ORDER_DETAILS = '[User] User Order Details';\r\nexport const REGIONS = '[User] Regions';\r\n\r\nexport const CUSTOMER_COUPONS = '[User] Customer Coupons';\r\nexport const SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID = 'subscribeCustomerCoupon';\r\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID =\r\n  'unsubscribeCustomerCoupon';\r\nexport const CLAIM_CUSTOMER_COUPON_PROCESS_ID = 'claimCustomerCoupon';\r\nexport const NOTIFICATION_PREFERENCES = '[User] Notification Preferences';\r\nexport const PRODUCT_INTERESTS = '[User] Product Interests';\r\n\r\nexport interface StateWithUser {\r\n  [USER_FEATURE]: UserState;\r\n}\r\n\r\nexport interface UserState {\r\n  account: UserDetailsState;\r\n  addresses: StateUtils.LoaderState<Address[]>;\r\n  consents: StateUtils.LoaderState<ConsentTemplate[]>;\r\n  billingCountries: BillingCountriesState;\r\n  countries: DeliveryCountriesState;\r\n  payments: StateUtils.LoaderState<PaymentDetails[]>;\r\n  orders: StateUtils.LoaderState<OrderHistoryList>;\r\n  order: StateUtils.LoaderState<Order>;\r\n  orderReturn: StateUtils.LoaderState<ReturnRequest>;\r\n  orderReturnList: StateUtils.LoaderState<ReturnRequestList>;\r\n  titles: TitlesState;\r\n  regions: StateUtils.LoaderState<RegionsState>;\r\n  resetPassword: boolean;\r\n  consignmentTracking: ConsignmentTrackingState;\r\n  customerCoupons: StateUtils.LoaderState<CustomerCouponSearchResult>;\r\n  notificationPreferences: StateUtils.LoaderState<NotificationPreference[]>;\r\n  productInterests: StateUtils.LoaderState<ProductInterestSearchResult>;\r\n}\r\n\r\nexport interface RegionsState {\r\n  entities: Region[];\r\n  country: string;\r\n}\r\n\r\nexport interface BillingCountryEntities {\r\n  [key: string]: Country;\r\n}\r\n\r\nexport interface BillingCountriesState {\r\n  entities: BillingCountryEntities;\r\n}\r\n\r\nexport interface DeliveryCountryEntities {\r\n  [key: string]: Country;\r\n}\r\n\r\nexport interface DeliveryCountriesState {\r\n  entities: DeliveryCountryEntities;\r\n}\r\n\r\nexport interface TitleEntities {\r\n  [key: string]: Title;\r\n}\r\n\r\nexport interface TitlesState {\r\n  entities: TitleEntities;\r\n}\r\n\r\nexport interface UserDetailsState {\r\n  details: User;\r\n}\r\n\r\nexport interface ConsignmentTrackingState {\r\n  tracking?: ConsignmentTracking;\r\n}\r\n","import {\r\n  Order,\r\n  CancellationRequestEntryInputList,\r\n} from '../../../model/order.model';\r\nimport {\r\n  LoaderFailAction,\r\n  LoaderLoadAction,\r\n  LoaderSuccessAction,\r\n  LoaderResetAction,\r\n} from '../../../state/utils/loader/loader.action';\r\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { USER_ORDER_DETAILS, CANCEL_ORDER_PROCESS_ID } from '../user-state';\r\n\r\nexport const LOAD_ORDER_DETAILS = '[User] Load Order Details';\r\nexport const LOAD_ORDER_DETAILS_FAIL = '[User] Load Order Details Fail';\r\nexport const LOAD_ORDER_DETAILS_SUCCESS = '[User] Load Order Details Success';\r\nexport const CLEAR_ORDER_DETAILS = '[User] Clear Order Details';\r\n\r\nexport const CANCEL_ORDER = '[User] Cancel Order';\r\nexport const CANCEL_ORDER_FAIL = '[User] Cancel Order Fail';\r\nexport const CANCEL_ORDER_SUCCESS = '[User] Cancel Order Success';\r\nexport const RESET_CANCEL_ORDER_PROCESS = '[User] Reset Cancel Order Process';\r\n\r\nexport class LoadOrderDetails extends LoaderLoadAction {\r\n  readonly type = LOAD_ORDER_DETAILS;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      orderCode: string;\r\n    }\r\n  ) {\r\n    super(USER_ORDER_DETAILS);\r\n  }\r\n}\r\n\r\nexport class LoadOrderDetailsFail extends LoaderFailAction {\r\n  readonly type = LOAD_ORDER_DETAILS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_ORDER_DETAILS, payload);\r\n  }\r\n}\r\n\r\nexport class LoadOrderDetailsSuccess extends LoaderSuccessAction {\r\n  readonly type = LOAD_ORDER_DETAILS_SUCCESS;\r\n  constructor(public payload: Order) {\r\n    super(USER_ORDER_DETAILS);\r\n  }\r\n}\r\n\r\nexport class ClearOrderDetails extends LoaderResetAction {\r\n  readonly type = CLEAR_ORDER_DETAILS;\r\n  constructor() {\r\n    super(USER_ORDER_DETAILS);\r\n  }\r\n}\r\n\r\nexport class CancelOrder extends StateUtils.EntityLoadAction {\r\n  readonly type = CANCEL_ORDER;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      orderCode: string;\r\n      cancelRequestInput: CancellationRequestEntryInputList;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class CancelOrderFail extends StateUtils.EntityFailAction {\r\n  readonly type = CANCEL_ORDER_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class CancelOrderSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = CANCEL_ORDER_SUCCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ResetCancelOrderProcess extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = RESET_CANCEL_ORDER_PROCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport type OrderDetailsAction =\r\n  | LoadOrderDetails\r\n  | LoadOrderDetailsFail\r\n  | LoadOrderDetailsSuccess\r\n  | ClearOrderDetails\r\n  | CancelOrder\r\n  | CancelOrderFail\r\n  | CancelOrderSuccess;\r\n","import { PaymentDetails } from '../../../model/cart.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { USER_PAYMENT_METHODS } from '../user-state';\r\n\r\nexport const LOAD_USER_PAYMENT_METHODS = '[User] Load User Payment Methods';\r\nexport const LOAD_USER_PAYMENT_METHODS_FAIL =\r\n  '[User] Load User Payment Methods Fail';\r\nexport const LOAD_USER_PAYMENT_METHODS_SUCCESS =\r\n  '[User] Load User Payment Methods Success';\r\n\r\nexport const SET_DEFAULT_USER_PAYMENT_METHOD =\r\n  '[User] Set Default User Payment Method';\r\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_FAIL =\r\n  '[User] Set Default User Payment Method Fail';\r\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS =\r\n  '[User] Set Default User Payment Method Success';\r\n\r\nexport const DELETE_USER_PAYMENT_METHOD = '[User] Delete User Payment Method';\r\nexport const DELETE_USER_PAYMENT_METHOD_FAIL =\r\n  '[User] Delete User Payment Method Fail';\r\nexport const DELETE_USER_PAYMENT_METHOD_SUCCESS =\r\n  '[User] Delete User  Payment Method Success';\r\n\r\nexport class LoadUserPaymentMethods extends StateUtils.LoaderLoadAction {\r\n  readonly type = LOAD_USER_PAYMENT_METHODS;\r\n  constructor(public payload: string) {\r\n    super(USER_PAYMENT_METHODS);\r\n  }\r\n}\r\n\r\nexport class LoadUserPaymentMethodsFail extends StateUtils.LoaderFailAction {\r\n  readonly type = LOAD_USER_PAYMENT_METHODS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_PAYMENT_METHODS, payload);\r\n  }\r\n}\r\n\r\nexport class LoadUserPaymentMethodsSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = LOAD_USER_PAYMENT_METHODS_SUCCESS;\r\n  constructor(public payload: PaymentDetails[]) {\r\n    super(USER_PAYMENT_METHODS);\r\n  }\r\n}\r\n\r\nexport class SetDefaultUserPaymentMethod extends StateUtils.LoaderLoadAction {\r\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD;\r\n  constructor(public payload: any) {\r\n    super(USER_PAYMENT_METHODS);\r\n  }\r\n}\r\n\r\nexport class SetDefaultUserPaymentMethodFail extends StateUtils.LoaderFailAction {\r\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_PAYMENT_METHODS, payload);\r\n  }\r\n}\r\n\r\nexport class SetDefaultUserPaymentMethodSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS;\r\n  constructor(public payload: any) {\r\n    super(USER_PAYMENT_METHODS);\r\n  }\r\n}\r\n\r\nexport class DeleteUserPaymentMethod extends StateUtils.LoaderLoadAction {\r\n  readonly type = DELETE_USER_PAYMENT_METHOD;\r\n  constructor(public payload: any) {\r\n    super(USER_PAYMENT_METHODS);\r\n  }\r\n}\r\n\r\nexport class DeleteUserPaymentMethodFail extends StateUtils.LoaderFailAction {\r\n  readonly type = DELETE_USER_PAYMENT_METHOD_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_PAYMENT_METHODS, payload);\r\n  }\r\n}\r\n\r\nexport class DeleteUserPaymentMethodSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = DELETE_USER_PAYMENT_METHOD_SUCCESS;\r\n  constructor(public payload: any) {\r\n    super(USER_PAYMENT_METHODS);\r\n  }\r\n}\r\n\r\n// action types\r\nexport type UserPaymentMethodsAction =\r\n  | LoadUserPaymentMethods\r\n  | LoadUserPaymentMethodsFail\r\n  | LoadUserPaymentMethodsSuccess\r\n  | SetDefaultUserPaymentMethod\r\n  | SetDefaultUserPaymentMethodFail\r\n  | SetDefaultUserPaymentMethodSuccess\r\n  | DeleteUserPaymentMethod\r\n  | DeleteUserPaymentMethodFail\r\n  | DeleteUserPaymentMethodSuccess;\r\n","import { Action } from '@ngrx/store';\r\nimport { Region } from '../../../model/address.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { REGIONS } from '../user-state';\r\n\r\nexport const LOAD_REGIONS = '[User] Load Regions';\r\nexport const LOAD_REGIONS_SUCCESS = '[User] Load Regions Success';\r\nexport const LOAD_REGIONS_FAIL = '[User] Load Regions Fail';\r\nexport const CLEAR_REGIONS = '[User] Clear Regions';\r\n\r\nexport class LoadRegions extends StateUtils.LoaderLoadAction {\r\n  readonly type = LOAD_REGIONS;\r\n  constructor(public payload: string) {\r\n    super(REGIONS);\r\n  }\r\n}\r\n\r\nexport class LoadRegionsFail extends StateUtils.LoaderFailAction {\r\n  readonly type = LOAD_REGIONS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(REGIONS, payload);\r\n  }\r\n}\r\n\r\nexport class LoadRegionsSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = LOAD_REGIONS_SUCCESS;\r\n  constructor(public payload: { entities: Region[]; country: string }) {\r\n    super(REGIONS);\r\n  }\r\n}\r\n\r\nexport class ClearRegions implements Action {\r\n  readonly type = CLEAR_REGIONS;\r\n  constructor() {}\r\n}\r\n\r\nexport type RegionsAction =\r\n  | LoadRegions\r\n  | LoadRegionsFail\r\n  | LoadRegionsSuccess\r\n  | ClearRegions;\r\n","import { Action } from '@ngrx/store';\n\nexport const RESET_PASSWORD = '[User] Reset Password';\nexport const RESET_PASSWORD_SUCCESS = '[User] Reset Password Success';\nexport const RESET_PASSWORD_FAIL = '[User] Reset Password Fail';\n\nexport class ResetPassword implements Action {\n  readonly type = RESET_PASSWORD;\n  constructor(public payload: { token: string; password: string }) {}\n}\n\nexport class ResetPasswordFail implements Action {\n  readonly type = RESET_PASSWORD_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ResetPasswordSuccess implements Action {\n  readonly type = RESET_PASSWORD_SUCCESS;\n}\n\nexport type ResetPasswordAction =\n  | ResetPassword\n  | ResetPasswordFail\n  | ResetPasswordSuccess;\n","import { Action } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\n\nexport const LOAD_TITLES = '[User] Load Tiltes';\nexport const LOAD_TITLES_FAIL = '[User] Load Titles Fail';\nexport const LOAD_TITLES_SUCCESS = '[User] Load Titles Success';\n\nexport class LoadTitles implements Action {\n  readonly type = LOAD_TITLES;\n  constructor() {}\n}\n\nexport class LoadTitlesFail implements Action {\n  readonly type = LOAD_TITLES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadTitlesSuccess implements Action {\n  readonly type = LOAD_TITLES_SUCCESS;\n  constructor(public payload: Title[]) {}\n}\n\nexport type TitlesAction = LoadTitles | LoadTitlesFail | LoadTitlesSuccess;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { UPDATE_EMAIL_PROCESS_ID } from '../user-state';\r\n\r\nexport const UPDATE_EMAIL = '[User] Update Email';\r\nexport const UPDATE_EMAIL_ERROR = '[User] Update Email Error';\r\nexport const UPDATE_EMAIL_SUCCESS = '[User] Update Email Success';\r\nexport const RESET_EMAIL = '[User] Reset Email';\r\n\r\nexport class UpdateEmailAction extends StateUtils.EntityLoadAction {\r\n  readonly type = UPDATE_EMAIL;\r\n  constructor(\r\n    public payload: {\r\n      uid: string;\r\n      password: string;\r\n      newUid: string;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class UpdateEmailSuccessAction extends StateUtils.EntitySuccessAction {\r\n  readonly type = UPDATE_EMAIL_SUCCESS;\r\n  constructor(public newUid: string) {\r\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class UpdateEmailErrorAction extends StateUtils.EntityFailAction {\r\n  readonly type = UPDATE_EMAIL_ERROR;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class ResetUpdateEmailAction extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = RESET_EMAIL;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport type EmailActions =\r\n  | UpdateEmailAction\r\n  | UpdateEmailSuccessAction\r\n  | UpdateEmailErrorAction\r\n  | ResetUpdateEmailAction;\r\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { UPDATE_PASSWORD_PROCESS_ID } from '../user-state';\r\n\r\nexport const UPDATE_PASSWORD = '[User] Update Password';\r\nexport const UPDATE_PASSWORD_FAIL = '[User] Update Password Fail';\r\nexport const UPDATE_PASSWORD_SUCCESS = '[User] Update Password Success';\r\nexport const UPDATE_PASSWORD_RESET =\r\n  '[User] Reset Update Password Process State';\r\n\r\nexport class UpdatePassword extends StateUtils.EntityLoadAction {\r\n  readonly type = UPDATE_PASSWORD;\r\n  constructor(\r\n    public payload: { userId: string; oldPassword: string; newPassword: string }\r\n  ) {\r\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class UpdatePasswordFail extends StateUtils.EntityFailAction {\r\n  readonly type = UPDATE_PASSWORD_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class UpdatePasswordSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = UPDATE_PASSWORD_SUCCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class UpdatePasswordReset extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = UPDATE_PASSWORD_RESET;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\r\n  }\r\n}\r\n\r\n// action types\r\nexport type UpdatePasswordAction =\r\n  | UpdatePassword\r\n  | UpdatePasswordFail\r\n  | UpdatePasswordSuccess\r\n  | UpdatePasswordReset;\r\n","import { Address } from '../../../model/address.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { USER_ADDRESSES } from '../user-state';\r\n\r\nexport const LOAD_USER_ADDRESSES = '[User] Load User Addresses';\r\nexport const LOAD_USER_ADDRESSES_FAIL = '[User] Load User Addresses Fail';\r\nexport const LOAD_USER_ADDRESSES_SUCCESS = '[User] Load User Addresses Success';\r\n\r\nexport const ADD_USER_ADDRESS = '[User] Add User Address';\r\nexport const ADD_USER_ADDRESS_FAIL = '[User] Add User Address Fail';\r\nexport const ADD_USER_ADDRESS_SUCCESS = '[User] Add User Address Success';\r\n\r\nexport const UPDATE_USER_ADDRESS = '[User] Update User Address';\r\nexport const UPDATE_USER_ADDRESS_FAIL = '[User] Update User Address Fail';\r\nexport const UPDATE_USER_ADDRESS_SUCCESS = '[User] Update User Address Success';\r\n\r\nexport const DELETE_USER_ADDRESS = '[User] Delete User Address';\r\nexport const DELETE_USER_ADDRESS_FAIL = '[User] Delete User Address Fail';\r\nexport const DELETE_USER_ADDRESS_SUCCESS = '[User] Delete User Address Success';\r\n\r\nexport class LoadUserAddresses extends StateUtils.LoaderLoadAction {\r\n  readonly type = LOAD_USER_ADDRESSES;\r\n  constructor(public payload: string) {\r\n    super(USER_ADDRESSES);\r\n  }\r\n}\r\n\r\nexport class LoadUserAddressesFail extends StateUtils.LoaderFailAction {\r\n  readonly type = LOAD_USER_ADDRESSES_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_ADDRESSES, payload);\r\n  }\r\n}\r\n\r\nexport class LoadUserAddressesSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = LOAD_USER_ADDRESSES_SUCCESS;\r\n  constructor(public payload: Address[]) {\r\n    super(USER_ADDRESSES);\r\n  }\r\n}\r\n\r\n// Adding address actions\r\nexport class AddUserAddress extends StateUtils.LoaderLoadAction {\r\n  readonly type = ADD_USER_ADDRESS;\r\n  constructor(public payload: { userId: string; address: Address }) {\r\n    super(USER_ADDRESSES);\r\n  }\r\n}\r\n\r\nexport class AddUserAddressFail extends StateUtils.LoaderFailAction {\r\n  readonly type = ADD_USER_ADDRESS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_ADDRESSES, payload);\r\n  }\r\n}\r\n\r\nexport class AddUserAddressSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = ADD_USER_ADDRESS_SUCCESS;\r\n  constructor(public payload: any) {\r\n    super(USER_ADDRESSES);\r\n  }\r\n}\r\n\r\n// Updating address actions\r\nexport class UpdateUserAddress extends StateUtils.LoaderLoadAction {\r\n  readonly type = UPDATE_USER_ADDRESS;\r\n  constructor(\r\n    public payload: { userId: string; addressId: string; address: Address }\r\n  ) {\r\n    super(USER_ADDRESSES);\r\n  }\r\n}\r\n\r\nexport class UpdateUserAddressFail extends StateUtils.LoaderFailAction {\r\n  readonly type = UPDATE_USER_ADDRESS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_ADDRESSES, payload);\r\n  }\r\n}\r\n\r\nexport class UpdateUserAddressSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = UPDATE_USER_ADDRESS_SUCCESS;\r\n  constructor(public payload: any) {\r\n    super(USER_ADDRESSES);\r\n  }\r\n}\r\n\r\n// Deleting address actions\r\nexport class DeleteUserAddress extends StateUtils.LoaderLoadAction {\r\n  readonly type = DELETE_USER_ADDRESS;\r\n  constructor(public payload: any) {\r\n    super(USER_ADDRESSES);\r\n  }\r\n}\r\n\r\nexport class DeleteUserAddressFail extends StateUtils.LoaderFailAction {\r\n  readonly type = DELETE_USER_ADDRESS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_ADDRESSES, payload);\r\n  }\r\n}\r\n\r\nexport class DeleteUserAddressSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = DELETE_USER_ADDRESS_SUCCESS;\r\n  constructor(public payload: any) {\r\n    super(USER_ADDRESSES);\r\n  }\r\n}\r\n\r\n// action types\r\nexport type UserAddressesAction =\r\n  | LoadUserAddresses\r\n  | LoadUserAddressesFail\r\n  | LoadUserAddressesSuccess\r\n  | AddUserAddress\r\n  | AddUserAddressFail\r\n  | AddUserAddressSuccess\r\n  | UpdateUserAddress\r\n  | UpdateUserAddressFail\r\n  | UpdateUserAddressSuccess\r\n  | DeleteUserAddress\r\n  | DeleteUserAddressFail\r\n  | DeleteUserAddressSuccess;\r\n","import { ConsentTemplate } from '../../../model/consent.model';\r\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport {\r\n  GIVE_CONSENT_PROCESS_ID,\r\n  USER_CONSENTS,\r\n  WITHDRAW_CONSENT_PROCESS_ID,\r\n} from '../user-state';\r\n\r\nexport const LOAD_USER_CONSENTS = '[User] Load User Consents';\r\nexport const LOAD_USER_CONSENTS_SUCCESS = '[User] Load User Consents Success';\r\nexport const LOAD_USER_CONSENTS_FAIL = '[User] Load User Consents Fail';\r\nexport const RESET_LOAD_USER_CONSENTS = '[User] Reset Load User Consents';\r\n\r\nexport const GIVE_USER_CONSENT = '[User] Give User Consent';\r\nexport const GIVE_USER_CONSENT_FAIL = '[User] Give User Consent Fail';\r\nexport const GIVE_USER_CONSENT_SUCCESS = '[User] Give User Consent Success';\r\nexport const RESET_GIVE_USER_CONSENT_PROCESS =\r\n  '[User] Reset Give User Consent Process';\r\nexport const TRANSFER_ANONYMOUS_CONSENT = '[User] Transfer Anonymous Consent';\r\n\r\nexport const WITHDRAW_USER_CONSENT = '[User] Withdraw User Consent';\r\nexport const WITHDRAW_USER_CONSENT_FAIL = '[User] Withdraw User Consent Fail';\r\nexport const WITHDRAW_USER_CONSENT_SUCCESS =\r\n  '[User] Withdraw User Consent Success';\r\nexport const RESET_WITHDRAW_USER_CONSENT_PROCESS =\r\n  '[User] Reset Withdraw User Consent Process';\r\n\r\nexport class LoadUserConsents extends StateUtils.LoaderLoadAction {\r\n  readonly type = LOAD_USER_CONSENTS;\r\n  constructor(public payload: string) {\r\n    super(USER_CONSENTS);\r\n  }\r\n}\r\n\r\nexport class LoadUserConsentsFail extends StateUtils.LoaderFailAction {\r\n  readonly type = LOAD_USER_CONSENTS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_CONSENTS, payload);\r\n  }\r\n}\r\n\r\nexport class LoadUserConsentsSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = LOAD_USER_CONSENTS_SUCCESS;\r\n  constructor(public payload: ConsentTemplate[]) {\r\n    super(USER_CONSENTS);\r\n  }\r\n}\r\n\r\nexport class ResetLoadUserConsents extends StateUtils.LoaderResetAction {\r\n  readonly type = RESET_LOAD_USER_CONSENTS;\r\n  constructor() {\r\n    super(USER_CONSENTS);\r\n  }\r\n}\r\n\r\nexport class GiveUserConsent extends StateUtils.EntityLoadAction {\r\n  readonly type = GIVE_USER_CONSENT;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      consentTemplateId: string;\r\n      consentTemplateVersion: number;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class GiveUserConsentFail extends StateUtils.EntityFailAction {\r\n  readonly type = GIVE_USER_CONSENT_FAIL;\r\n  constructor(payload: any) {\r\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class GiveUserConsentSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = GIVE_USER_CONSENT_SUCCESS;\r\n  constructor(public consentTemplate: ConsentTemplate) {\r\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ResetGiveUserConsentProcess extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = RESET_GIVE_USER_CONSENT_PROCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class TransferAnonymousConsent {\r\n  readonly type = TRANSFER_ANONYMOUS_CONSENT;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      consentTemplateId: string;\r\n      consentTemplateVersion: number;\r\n    }\r\n  ) {}\r\n}\r\n\r\nexport class WithdrawUserConsent extends StateUtils.EntityLoadAction {\r\n  readonly type = WITHDRAW_USER_CONSENT;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      consentCode: string;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class WithdrawUserConsentFail extends StateUtils.EntityFailAction {\r\n  readonly type = WITHDRAW_USER_CONSENT_FAIL;\r\n  constructor(payload: any) {\r\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class WithdrawUserConsentSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = WITHDRAW_USER_CONSENT_SUCCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ResetWithdrawUserConsentProcess extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = RESET_WITHDRAW_USER_CONSENT_PROCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport type UserConsentsAction =\r\n  | LoadUserConsents\r\n  | LoadUserConsentsFail\r\n  | LoadUserConsentsSuccess\r\n  | ResetLoadUserConsents\r\n  | GiveUserConsent\r\n  | GiveUserConsentFail\r\n  | GiveUserConsentSuccess\r\n  | ResetGiveUserConsentProcess\r\n  | WithdrawUserConsent\r\n  | WithdrawUserConsentFail\r\n  | WithdrawUserConsentSuccess\r\n  | ResetWithdrawUserConsentProcess;\r\n","import { Action } from '@ngrx/store';\r\nimport { User } from '../../../model/misc.model';\r\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { UPDATE_USER_DETAILS_PROCESS_ID } from '../user-state';\r\n\r\nexport const LOAD_USER_DETAILS = '[User] Load User Details';\r\nexport const LOAD_USER_DETAILS_FAIL = '[User] Load User Details Fail';\r\nexport const LOAD_USER_DETAILS_SUCCESS = '[User] Load User Details Success';\r\n\r\nexport const UPDATE_USER_DETAILS = '[User] Update User Details';\r\nexport const UPDATE_USER_DETAILS_FAIL = '[User] Update User Details Fail';\r\nexport const UPDATE_USER_DETAILS_SUCCESS = '[User] Update User Details Success';\r\nexport const RESET_USER_DETAILS = '[User] Reset User Details';\r\n\r\nexport class LoadUserDetails implements Action {\r\n  readonly type = LOAD_USER_DETAILS;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class LoadUserDetailsFail implements Action {\r\n  readonly type = LOAD_USER_DETAILS_FAIL;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LoadUserDetailsSuccess implements Action {\r\n  readonly type = LOAD_USER_DETAILS_SUCCESS;\r\n  constructor(public payload: User) {}\r\n}\r\n\r\nexport class UpdateUserDetails extends StateUtils.EntityLoadAction {\r\n  readonly type = UPDATE_USER_DETAILS;\r\n  constructor(public payload: { username: string; userDetails: User }) {\r\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class UpdateUserDetailsFail extends StateUtils.EntityFailAction {\r\n  readonly type = UPDATE_USER_DETAILS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class UpdateUserDetailsSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = UPDATE_USER_DETAILS_SUCCESS;\r\n  constructor(public userUpdates: User) {\r\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ResetUpdateUserDetails extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = RESET_USER_DETAILS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\r\n  }\r\n}\r\n\r\n// action types\r\nexport type UserDetailsAction =\r\n  | LoadUserDetails\r\n  | LoadUserDetailsFail\r\n  | LoadUserDetailsSuccess\r\n  | UpdateUserDetails\r\n  | UpdateUserDetailsFail\r\n  | UpdateUserDetailsSuccess\r\n  | ResetUpdateUserDetails;\r\n","import { Action } from '@ngrx/store';\nexport const CLEAR_USER_MISCS_DATA = '[User] Clear User Misc Data';\n\nexport class ClearUserMiscsData implements Action {\n  readonly type = CLEAR_USER_MISCS_DATA;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { USER_ORDERS } from '../user-state';\r\n\r\nexport const LOAD_USER_ORDERS = '[User] Load User Orders';\r\nexport const LOAD_USER_ORDERS_FAIL = '[User] Load User Orders Fail';\r\nexport const LOAD_USER_ORDERS_SUCCESS = '[User] Load User Orders Success';\r\nexport const CLEAR_USER_ORDERS = '[User] Clear User Orders';\r\n\r\nexport class LoadUserOrders extends StateUtils.LoaderLoadAction {\r\n  readonly type = LOAD_USER_ORDERS;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      pageSize: number;\r\n      currentPage?: number;\r\n      sort?: string;\r\n    }\r\n  ) {\r\n    super(USER_ORDERS);\r\n  }\r\n}\r\n\r\nexport class LoadUserOrdersFail extends StateUtils.LoaderFailAction {\r\n  readonly type = LOAD_USER_ORDERS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_ORDERS, payload);\r\n  }\r\n}\r\n\r\nexport class LoadUserOrdersSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = LOAD_USER_ORDERS_SUCCESS;\r\n  constructor(public payload: OrderHistoryList) {\r\n    super(USER_ORDERS);\r\n  }\r\n}\r\n\r\nexport class ClearUserOrders extends StateUtils.LoaderResetAction {\r\n  readonly type = CLEAR_USER_ORDERS;\r\n  constructor() {\r\n    super(USER_ORDERS);\r\n  }\r\n}\r\n\r\nexport type UserOrdersAction =\r\n  | LoadUserOrders\r\n  | LoadUserOrdersFail\r\n  | LoadUserOrdersSuccess\r\n  | ClearUserOrders;\r\n","import { Action } from '@ngrx/store';\r\nimport { UserSignUp } from '../../../model/misc.model';\r\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport {\r\n  REGISTER_USER_PROCESS_ID,\r\n  REMOVE_USER_PROCESS_ID,\r\n} from '../user-state';\r\n\r\nexport const REGISTER_USER = '[User] Register User';\r\nexport const REGISTER_USER_FAIL = '[User] Register User Fail';\r\nexport const REGISTER_USER_SUCCESS = '[User] Register User Success';\r\nexport const RESET_REGISTER_USER_PROCESS = '[User] Reset Register User Process';\r\n\r\nexport const REGISTER_GUEST = '[User] Register Guest';\r\nexport const REGISTER_GUEST_FAIL = '[User] Register Guest Fail';\r\nexport const REGISTER_GUEST_SUCCESS = '[User] Register Guest Success';\r\n\r\nexport const REMOVE_USER = '[User] Remove User';\r\nexport const REMOVE_USER_FAIL = '[User] Remove User Fail';\r\nexport const REMOVE_USER_SUCCESS = '[User] Remove User Success';\r\nexport const REMOVE_USER_RESET = '[User] Reset Remove User Process State';\r\n\r\nexport class RegisterUser extends StateUtils.EntityLoadAction {\r\n  readonly type = REGISTER_USER;\r\n  constructor(public payload: UserSignUp) {\r\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class RegisterUserFail extends StateUtils.EntityFailAction {\r\n  readonly type = REGISTER_USER_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class RegisterUserSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = REGISTER_USER_SUCCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ResetRegisterUserProcess extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = RESET_REGISTER_USER_PROCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class RegisterGuest implements Action {\r\n  readonly type = REGISTER_GUEST;\r\n  constructor(public payload: { guid: string; password: string }) {}\r\n}\r\n\r\nexport class RegisterGuestFail implements Action {\r\n  readonly type = REGISTER_GUEST_FAIL;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class RegisterGuestSuccess implements Action {\r\n  readonly type = REGISTER_GUEST_SUCCESS;\r\n}\r\n\r\nexport class RemoveUser extends StateUtils.EntityLoadAction {\r\n  readonly type = REMOVE_USER;\r\n  constructor(public payload: string) {\r\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class RemoveUserFail extends StateUtils.EntityFailAction {\r\n  readonly type = REMOVE_USER_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class RemoveUserSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = REMOVE_USER_SUCCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class RemoveUserReset extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = REMOVE_USER_RESET;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\r\n  }\r\n}\r\n\r\n// action types\r\nexport type UserRegisterOrRemoveAction =\r\n  | RegisterUser\r\n  | RegisterUserFail\r\n  | RegisterUserSuccess\r\n  | ResetRegisterUserProcess\r\n  | RegisterGuest\r\n  | RegisterGuestFail\r\n  | RegisterGuestSuccess\r\n  | RemoveUser\r\n  | RemoveUserFail\r\n  | RemoveUserSuccess\r\n  | RemoveUserReset;\r\n","import {\r\n  CUSTOMER_COUPONS,\r\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\r\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\r\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\r\n} from '../user-state';\r\nimport {\r\n  LoaderLoadAction,\r\n  LoaderFailAction,\r\n  LoaderSuccessAction,\r\n  LoaderResetAction,\r\n} from '../../../state/utils/loader/loader.action';\r\nimport {\r\n  CustomerCouponSearchResult,\r\n  CustomerCouponNotification,\r\n  CustomerCoupon2Customer,\r\n} from '../../../model/customer-coupon.model';\r\nimport {\r\n  EntityFailAction,\r\n  EntityLoadAction,\r\n  EntityLoaderResetAction,\r\n  EntitySuccessAction,\r\n} from '../../../state/utils/entity-loader/entity-loader.action';\r\nimport { PROCESS_FEATURE } from '../../../process/store';\r\n\r\nexport const LOAD_CUSTOMER_COUPONS = '[User] Load Customer Coupons';\r\nexport const LOAD_CUSTOMER_COUPONS_FAIL = '[User] Load Customer Coupons Fail';\r\nexport const LOAD_CUSTOMER_COUPONS_SUCCESS =\r\n  '[User] Load Customer Coupons Success';\r\nexport const RESET_LOAD_CUSTOMER_COUPONS = '[User] Reset Load Customer Coupons';\r\n\r\nexport const SUBSCRIBE_CUSTOMER_COUPON =\r\n  '[User] Subscribe Customer Notification Coupon';\r\nexport const SUBSCRIBE_CUSTOMER_COUPON_FAIL =\r\n  '[User] Subscribe Customer Coupon Notification Fail';\r\nexport const SUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\r\n  '[User] Subscribe Customer Coupon Notification Success';\r\nexport const RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS =\r\n  '[User] Reset Subscribe Customer Coupon Process';\r\n\r\nexport const UNSUBSCRIBE_CUSTOMER_COUPON =\r\n  '[User] Unsubscribe Customer Notification Coupon';\r\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_FAIL =\r\n  '[User] Unsubscribe Customer Coupon Notification Fail';\r\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\r\n  '[User] Unsubscribe Customer Coupon Notification Success';\r\nexport const RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS =\r\n  '[User] Reset Unsubscribe Customer Coupon Process';\r\n\r\nexport const CLAIM_CUSTOMER_COUPON = '[User] Claim Customer';\r\nexport const CLAIM_CUSTOMER_COUPON_FAIL = '[User] Claim Customer Fail';\r\nexport const CLAIM_CUSTOMER_COUPON_SUCCESS = '[User] Claim Customer Success';\r\n\r\nexport class LoadCustomerCoupons extends LoaderLoadAction {\r\n  readonly type = LOAD_CUSTOMER_COUPONS;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      pageSize: number;\r\n      currentPage?: number;\r\n      sort?: string;\r\n    }\r\n  ) {\r\n    super(CUSTOMER_COUPONS);\r\n  }\r\n}\r\n\r\nexport class LoadCustomerCouponsFail extends LoaderFailAction {\r\n  readonly type = LOAD_CUSTOMER_COUPONS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(CUSTOMER_COUPONS, payload);\r\n  }\r\n}\r\n\r\nexport class LoadCustomerCouponsSuccess extends LoaderSuccessAction {\r\n  readonly type = LOAD_CUSTOMER_COUPONS_SUCCESS;\r\n  constructor(public payload: CustomerCouponSearchResult) {\r\n    super(CUSTOMER_COUPONS);\r\n  }\r\n}\r\n\r\nexport class ResetLoadCustomerCoupons extends LoaderResetAction {\r\n  readonly type = RESET_LOAD_CUSTOMER_COUPONS;\r\n  constructor() {\r\n    super(CUSTOMER_COUPONS);\r\n  }\r\n}\r\n\r\n// Subscribe coupon notification actions\r\nexport class SubscribeCustomerCoupon extends EntityLoadAction {\r\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      couponCode: string;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class SubscribeCustomerCouponFail extends EntityFailAction {\r\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class SubscribeCustomerCouponSuccess extends EntitySuccessAction {\r\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\r\n  constructor(public payload: CustomerCouponNotification) {\r\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class ResetSubscribeCustomerCouponProcess extends EntityLoaderResetAction {\r\n  readonly type = RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class UnsubscribeCustomerCoupon extends EntityLoadAction {\r\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      couponCode: string;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class UnsubscribeCustomerCouponFail extends EntityFailAction {\r\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class UnsubscribeCustomerCouponSuccess extends EntitySuccessAction {\r\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class ResetUnsubscribeCustomerCouponProcess extends EntityLoaderResetAction {\r\n  readonly type = RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ClaimCustomerCoupon extends EntityLoadAction {\r\n  readonly type = CLAIM_CUSTOMER_COUPON;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      couponCode;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ClaimCustomerCouponFail extends EntityFailAction {\r\n  readonly type = CLAIM_CUSTOMER_COUPON_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class ClaimCustomerCouponSuccess extends EntitySuccessAction {\r\n  readonly type = CLAIM_CUSTOMER_COUPON_SUCCESS;\r\n  constructor(public payload: CustomerCoupon2Customer) {\r\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\n// action types\r\nexport type CustomerCouponAction =\r\n  | LoadCustomerCoupons\r\n  | LoadCustomerCouponsFail\r\n  | LoadCustomerCouponsSuccess\r\n  | ResetLoadCustomerCoupons\r\n  | SubscribeCustomerCoupon\r\n  | SubscribeCustomerCouponFail\r\n  | SubscribeCustomerCouponSuccess\r\n  | ResetSubscribeCustomerCouponProcess\r\n  | UnsubscribeCustomerCoupon\r\n  | UnsubscribeCustomerCouponFail\r\n  | UnsubscribeCustomerCouponSuccess\r\n  | ResetUnsubscribeCustomerCouponProcess\r\n  | ClaimCustomerCoupon\r\n  | ClaimCustomerCouponFail\r\n  | ClaimCustomerCouponSuccess;\r\n","import { StateUtils } from '../../../state/utils/index';\r\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\r\nimport {\r\n  EntityFailAction,\r\n  EntityLoadAction,\r\n  EntityLoaderResetAction,\r\n  EntitySuccessAction,\r\n} from '../../../state/utils/entity-loader/entity-loader.action';\r\nimport {\r\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\r\n  NOTIFICATION_PREFERENCES,\r\n} from '../user-state';\r\nimport { NotificationPreference } from '../../../model/notification-preference.model';\r\n\r\nexport const LOAD_NOTIFICATION_PREFERENCES =\r\n  '[User] Load Notification Preferences';\r\nexport const LOAD_NOTIFICATION_PREFERENCES_FAIL =\r\n  '[User] Load Notification Preferences Fail';\r\nexport const LOAD_NOTIFICATION_PREFERENCES_SUCCESS =\r\n  '[User] Load Notification Preferences Success';\r\nexport const UPDATE_NOTIFICATION_PREFERENCES =\r\n  '[User] Update Notification Preferences';\r\nexport const UPDATE_NOTIFICATION_PREFERENCES_FAIL =\r\n  '[User] Update Notification Preferences Fail';\r\nexport const UPDATE_NOTIFICATION_PREFERENCES_SUCCESS =\r\n  '[User] Update Notification Preferences Success';\r\nexport const RESET_NOTIFICATION_PREFERENCES =\r\n  '[User] Reset Notification Preferences';\r\nexport const CLEAR_NOTIFICATION_PREFERENCES =\r\n  '[User] Clear Notification Preferences';\r\n\r\nexport class LoadNotificationPreferences extends StateUtils.LoaderLoadAction {\r\n  readonly type = LOAD_NOTIFICATION_PREFERENCES;\r\n  constructor(public payload: string) {\r\n    super(NOTIFICATION_PREFERENCES);\r\n  }\r\n}\r\n\r\nexport class LoadNotificationPreferencesFail extends StateUtils.LoaderFailAction {\r\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_FAIL;\r\n  constructor(public payload: any) {\r\n    super(NOTIFICATION_PREFERENCES, payload);\r\n  }\r\n}\r\n\r\nexport class LoadNotificationPreferencesSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_SUCCESS;\r\n  constructor(public payload: NotificationPreference[]) {\r\n    super(NOTIFICATION_PREFERENCES);\r\n  }\r\n}\r\n\r\nexport class UpdateNotificationPreferences extends EntityLoadAction {\r\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES;\r\n  constructor(\r\n    public payload: { userId: string; preferences: NotificationPreference[] }\r\n  ) {\r\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class UpdateNotificationPreferencesFail extends EntityFailAction {\r\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class UpdateNotificationPreferencesSuccess extends EntitySuccessAction {\r\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_SUCCESS;\r\n  constructor(public payload: NotificationPreference[]) {\r\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ResetNotificationPreferences extends EntityLoaderResetAction {\r\n  readonly type = RESET_NOTIFICATION_PREFERENCES;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ClearNotificationPreferences extends StateUtils.LoaderResetAction {\r\n  readonly type = CLEAR_NOTIFICATION_PREFERENCES;\r\n  constructor() {\r\n    super(NOTIFICATION_PREFERENCES);\r\n  }\r\n}\r\n\r\nexport type NotificationPreferenceAction =\r\n  | LoadNotificationPreferences\r\n  | LoadNotificationPreferencesFail\r\n  | LoadNotificationPreferencesSuccess\r\n  | UpdateNotificationPreferences\r\n  | UpdateNotificationPreferencesFail\r\n  | UpdateNotificationPreferencesSuccess\r\n  | ResetNotificationPreferences\r\n  | ClearNotificationPreferences;\r\n","import {\r\n  PRODUCT_INTERESTS,\r\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\r\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\r\n} from '../user-state';\r\nimport {\r\n  ProductInterestSearchResult,\r\n  ProductInterestEntryRelation,\r\n  NotificationType,\r\n} from '../../../model/product-interest.model';\r\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\r\nimport {\r\n  LoaderLoadAction,\r\n  LoaderFailAction,\r\n  LoaderSuccessAction,\r\n  LoaderResetAction,\r\n} from '../../../state/utils/loader/loader.action';\r\nimport {\r\n  EntityFailAction,\r\n  EntityLoadAction,\r\n  EntitySuccessAction,\r\n  EntityLoaderResetAction,\r\n} from '../../../state/utils/entity-loader/entity-loader.action';\r\n\r\nexport const LOAD_PRODUCT_INTERESTS = 'Load Product Interests';\r\nexport const LOAD_PRODUCT_INTERESTS_FAIL = 'Load Product Interests Fail';\r\nexport const LOAD_PRODUCT_INTERESTS_SUCCESS = 'Load Product Interests Success';\r\n\r\nexport const REMOVE_PRODUCT_INTEREST = 'Remove Product Interest';\r\nexport const REMOVE_PRODUCT_INTEREST_SUCCESS =\r\n  'Remove Product Interest Success';\r\nexport const REMOVE_PRODUCT_INTEREST_FAIL = 'Remove Product Interest Fail';\r\n\r\nexport const ADD_PRODUCT_INTEREST = 'Add Product Interest';\r\nexport const ADD_PRODUCT_INTEREST_FAIL = 'Add Product Interest Fail';\r\nexport const ADD_PRODUCT_INTEREST_SUCCESS = 'Add Product Interest Success';\r\n\r\nexport const ADD_PRODUCT_INTEREST_RESET = 'Add Product Interest Reset';\r\nexport const REMOVE_PRODUCT_INTEREST_RESET = 'Remove Product Interest Reset';\r\n\r\nexport const CLEAR_PRODUCT_INTERESTS = 'Clear Product Interests';\r\n\r\nexport class LoadProductInterests extends LoaderLoadAction {\r\n  readonly type = LOAD_PRODUCT_INTERESTS;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      pageSize?: number;\r\n      currentPage?: number;\r\n      sort?: string;\r\n      productCode?: string;\r\n      notificationType?: NotificationType;\r\n    }\r\n  ) {\r\n    super(PRODUCT_INTERESTS);\r\n  }\r\n}\r\n\r\nexport class LoadProductInterestsFail extends LoaderFailAction {\r\n  readonly type = LOAD_PRODUCT_INTERESTS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PRODUCT_INTERESTS, payload);\r\n  }\r\n}\r\n\r\nexport class LoadProductInterestsSuccess extends LoaderSuccessAction {\r\n  readonly type = LOAD_PRODUCT_INTERESTS_SUCCESS;\r\n  constructor(public payload: ProductInterestSearchResult) {\r\n    super(PRODUCT_INTERESTS);\r\n  }\r\n}\r\n\r\nexport class RemoveProductInterest extends EntityLoadAction {\r\n  readonly type = REMOVE_PRODUCT_INTEREST;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      item: ProductInterestEntryRelation;\r\n      singleDelete?: boolean;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class RemoveProductInterestSuccess extends EntitySuccessAction {\r\n  readonly type = REMOVE_PRODUCT_INTEREST_SUCCESS;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class RemoveProductInterestFail extends EntityFailAction {\r\n  readonly type = REMOVE_PRODUCT_INTEREST_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class AddProductInterest extends EntityLoadAction {\r\n  readonly type = ADD_PRODUCT_INTEREST;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      productCode: string;\r\n      notificationType: NotificationType;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class AddProductInterestSuccess extends EntitySuccessAction {\r\n  readonly type = ADD_PRODUCT_INTEREST_SUCCESS;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class AddProductInterestFail extends EntityFailAction {\r\n  readonly type = ADD_PRODUCT_INTEREST_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class ResetAddInterestState extends EntityLoaderResetAction {\r\n  readonly type = ADD_PRODUCT_INTEREST_RESET;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ResetRemoveInterestState extends EntityLoaderResetAction {\r\n  readonly type = REMOVE_PRODUCT_INTEREST_RESET;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ClearProductInterests extends LoaderResetAction {\r\n  readonly type = CLEAR_PRODUCT_INTERESTS;\r\n  constructor() {\r\n    super(PRODUCT_INTERESTS);\r\n  }\r\n}\r\n\r\nexport type ProductInterestsAction =\r\n  | LoadProductInterests\r\n  | LoadProductInterestsFail\r\n  | LoadProductInterestsSuccess\r\n  | RemoveProductInterest\r\n  | RemoveProductInterestSuccess\r\n  | RemoveProductInterestFail\r\n  | AddProductInterest\r\n  | AddProductInterestFail\r\n  | AddProductInterestSuccess\r\n  | ResetAddInterestState\r\n  | ResetRemoveInterestState\r\n  | ClearProductInterests;\r\n","import {\r\n  ReturnRequest,\r\n  ReturnRequestEntryInputList,\r\n  ReturnRequestList,\r\n  ReturnRequestModification,\r\n} from '../../../model/order.model';\r\nimport {\r\n  USER_RETURN_REQUESTS,\r\n  USER_RETURN_REQUEST_DETAILS,\r\n  CANCEL_RETURN_PROCESS_ID,\r\n} from '../user-state';\r\nimport {\r\n  LoaderFailAction,\r\n  LoaderLoadAction,\r\n  LoaderSuccessAction,\r\n  LoaderResetAction,\r\n} from '../../../state/utils/loader/loader.action';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\r\n\r\nexport const CREATE_ORDER_RETURN_REQUEST = '[User] Create Order Return Request';\r\nexport const CREATE_ORDER_RETURN_REQUEST_FAIL =\r\n  '[User] Create Order Return Request Fail';\r\nexport const CREATE_ORDER_RETURN_REQUEST_SUCCESS =\r\n  '[User] Create Order Return Request Success';\r\n\r\nexport const LOAD_ORDER_RETURN_REQUEST =\r\n  '[User] Load Order Return Request details';\r\nexport const LOAD_ORDER_RETURN_REQUEST_FAIL =\r\n  '[User] Load Order Return Request details Fail';\r\nexport const LOAD_ORDER_RETURN_REQUEST_SUCCESS =\r\n  '[User] Load Order Return Request details Success';\r\n\r\nexport const CANCEL_ORDER_RETURN_REQUEST = '[User] Cancel Order Return Request';\r\nexport const CANCEL_ORDER_RETURN_REQUEST_FAIL =\r\n  '[User] Cancel Order Return Request Fail';\r\nexport const CANCEL_ORDER_RETURN_REQUEST_SUCCESS =\r\n  '[User] Cancel Order Return Request Success';\r\n\r\nexport const LOAD_ORDER_RETURN_REQUEST_LIST =\r\n  '[User] Load User Order Return Request List';\r\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_FAIL =\r\n  '[User] Load User Order Return Request List Fail';\r\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS =\r\n  '[User] Load User Order Return Request List Success';\r\n\r\nexport const CLEAR_ORDER_RETURN_REQUEST =\r\n  '[User] Clear Order Return Request Details';\r\nexport const CLEAR_ORDER_RETURN_REQUEST_LIST =\r\n  '[User] Clear Order Return Request List';\r\nexport const RESET_CANCEL_RETURN_PROCESS =\r\n  '[User] Reset Cancel Return Request Process';\r\n\r\nexport class CreateOrderReturnRequest extends LoaderLoadAction {\r\n  readonly type = CREATE_ORDER_RETURN_REQUEST;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      returnRequestInput: ReturnRequestEntryInputList;\r\n    }\r\n  ) {\r\n    super(USER_RETURN_REQUEST_DETAILS);\r\n  }\r\n}\r\n\r\nexport class CreateOrderReturnRequestFail extends LoaderFailAction {\r\n  readonly type = CREATE_ORDER_RETURN_REQUEST_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_RETURN_REQUEST_DETAILS, payload);\r\n  }\r\n}\r\n\r\nexport class CreateOrderReturnRequestSuccess extends LoaderSuccessAction {\r\n  readonly type = CREATE_ORDER_RETURN_REQUEST_SUCCESS;\r\n  constructor(public payload: ReturnRequest) {\r\n    super(USER_RETURN_REQUEST_DETAILS);\r\n  }\r\n}\r\n\r\nexport class LoadOrderReturnRequest extends LoaderLoadAction {\r\n  readonly type = LOAD_ORDER_RETURN_REQUEST;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      returnRequestCode: string;\r\n    }\r\n  ) {\r\n    super(USER_RETURN_REQUEST_DETAILS);\r\n  }\r\n}\r\n\r\nexport class LoadOrderReturnRequestFail extends LoaderFailAction {\r\n  readonly type = LOAD_ORDER_RETURN_REQUEST_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_RETURN_REQUEST_DETAILS, payload);\r\n  }\r\n}\r\n\r\nexport class LoadOrderReturnRequestSuccess extends LoaderSuccessAction {\r\n  readonly type = LOAD_ORDER_RETURN_REQUEST_SUCCESS;\r\n  constructor(public payload: ReturnRequest) {\r\n    super(USER_RETURN_REQUEST_DETAILS);\r\n  }\r\n}\r\n\r\nexport class CancelOrderReturnRequest extends StateUtils.EntityLoadAction {\r\n  readonly type = CANCEL_ORDER_RETURN_REQUEST;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      returnRequestCode: string;\r\n      returnRequestModification: ReturnRequestModification;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class CancelOrderReturnRequestFail extends StateUtils.EntityFailAction {\r\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class CancelOrderReturnRequestSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_SUCCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class LoadOrderReturnRequestList extends LoaderLoadAction {\r\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      pageSize?: number;\r\n      currentPage?: number;\r\n      sort?: string;\r\n    }\r\n  ) {\r\n    super(USER_RETURN_REQUESTS);\r\n  }\r\n}\r\n\r\nexport class LoadOrderReturnRequestListFail extends LoaderFailAction {\r\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_RETURN_REQUESTS, payload);\r\n  }\r\n}\r\n\r\nexport class LoadOrderReturnRequestListSuccess extends LoaderSuccessAction {\r\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS;\r\n  constructor(public payload: ReturnRequestList) {\r\n    super(USER_RETURN_REQUESTS);\r\n  }\r\n}\r\n\r\nexport class ClearOrderReturnRequest extends LoaderResetAction {\r\n  readonly type = CLEAR_ORDER_RETURN_REQUEST;\r\n  constructor() {\r\n    super(USER_RETURN_REQUEST_DETAILS);\r\n  }\r\n}\r\n\r\nexport class ClearOrderReturnRequestList extends LoaderResetAction {\r\n  readonly type = CLEAR_ORDER_RETURN_REQUEST_LIST;\r\n  constructor() {\r\n    super(USER_RETURN_REQUESTS);\r\n  }\r\n}\r\n\r\nexport class ResetCancelReturnProcess extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = RESET_CANCEL_RETURN_PROCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport type OrderReturnRequestAction =\r\n  | CreateOrderReturnRequest\r\n  | CreateOrderReturnRequestFail\r\n  | CreateOrderReturnRequestSuccess\r\n  | LoadOrderReturnRequest\r\n  | LoadOrderReturnRequestFail\r\n  | LoadOrderReturnRequestSuccess\r\n  | CancelOrderReturnRequest\r\n  | CancelOrderReturnRequestFail\r\n  | CancelOrderReturnRequestSuccess\r\n  | LoadOrderReturnRequestList\r\n  | LoadOrderReturnRequestListFail\r\n  | LoadOrderReturnRequestListSuccess\r\n  | ClearOrderReturnRequest\r\n  | ClearOrderReturnRequestList\r\n  | ResetCancelReturnProcess;\r\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState, USER_FEATURE } from '../user-state';\n\nexport const getUserState: MemoizedSelector<\n  StateWithUser,\n  UserState\n> = createFeatureSelector<UserState>(USER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { Country } from '../../../model/address.model';\r\nimport {\r\n  BillingCountriesState,\r\n  BillingCountryEntities,\r\n  StateWithUser,\r\n  UserState,\r\n} from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\n\r\nexport const getBillingCountriesState: MemoizedSelector<\r\n  StateWithUser,\r\n  BillingCountriesState\r\n> = createSelector(getUserState, (state: UserState) => state.billingCountries);\r\n\r\nexport const getBillingCountriesEntites: MemoizedSelector<\r\n  StateWithUser,\r\n  BillingCountryEntities\r\n> = createSelector(\r\n  getBillingCountriesState,\r\n  (state: BillingCountriesState) => state.entities\r\n);\r\n\r\nexport const getAllBillingCountries: MemoizedSelector<\r\n  StateWithUser,\r\n  Country[]\r\n> = createSelector(getBillingCountriesEntites, (entites) =>\r\n  Object.keys(entites).map((isocode) => entites[isocode])\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\nimport {\n  ConsignmentTrackingState,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsignmentTrackingState: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTrackingState\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.consignmentTracking\n);\n\nexport const getConsignmentTracking: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTracking\n> = createSelector(\n  getConsignmentTrackingState,\n  (state: ConsignmentTrackingState) => state.tracking\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { Country } from '../../../model/address.model';\r\nimport {\r\n  DeliveryCountriesState,\r\n  DeliveryCountryEntities,\r\n  StateWithUser,\r\n  UserState,\r\n} from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\n\r\nexport const getDeliveryCountriesState: MemoizedSelector<\r\n  StateWithUser,\r\n  DeliveryCountriesState\r\n> = createSelector(getUserState, (state: UserState) => state.countries);\r\n\r\nexport const getDeliveryCountriesEntites: MemoizedSelector<\r\n  StateWithUser,\r\n  DeliveryCountryEntities\r\n> = createSelector(\r\n  getDeliveryCountriesState,\r\n  (state: DeliveryCountriesState) => state.entities\r\n);\r\n\r\nexport const getAllDeliveryCountries: MemoizedSelector<\r\n  StateWithUser,\r\n  Country[]\r\n> = createSelector(getDeliveryCountriesEntites, (entites) =>\r\n  Object.keys(entites).map((isocode) => entites[isocode])\r\n);\r\n\r\nexport const countrySelectorFactory = (\r\n  isocode: string\r\n): MemoizedSelector<StateWithUser, Country> =>\r\n  createSelector(getDeliveryCountriesEntites, (entities) =>\r\n    Object.keys(entities).length !== 0 ? entities[isocode] : null\r\n  );\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { Order } from '../../../model/order.model';\r\nimport { StateWithUser, UserState } from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport { StateUtils } from '../../../state/utils/index';\r\n\r\nexport const getOrderState: MemoizedSelector<\r\n  StateWithUser,\r\n  LoaderState<Order>\r\n> = createSelector(getUserState, (state: UserState) => state.order);\r\n\r\nexport const getOrderDetails: MemoizedSelector<\r\n  StateWithUser,\r\n  Order\r\n> = createSelector(getOrderState, (state: LoaderState<Order>) =>\r\n  StateUtils.loaderValueSelector(state)\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\r\nimport { StateWithUser, UserState } from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport { StateUtils } from '../../../state/utils/index';\r\n\r\nexport const getOrderReturnRequestState: MemoizedSelector<\r\n  StateWithUser,\r\n  LoaderState<ReturnRequest>\r\n> = createSelector(getUserState, (state: UserState) => state.orderReturn);\r\n\r\nexport const getOrderReturnRequest: MemoizedSelector<\r\n  StateWithUser,\r\n  ReturnRequest\r\n> = createSelector(\r\n  getOrderReturnRequestState,\r\n  (state: LoaderState<ReturnRequest>) => StateUtils.loaderValueSelector(state)\r\n);\r\n\r\nexport const getOrderReturnRequestLoading: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(\r\n  getOrderReturnRequestState,\r\n  (state: LoaderState<ReturnRequest>) => StateUtils.loaderLoadingSelector(state)\r\n);\r\n\r\nexport const getOrderReturnRequestSuccess: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(\r\n  getOrderReturnRequestState,\r\n  (state: LoaderState<ReturnRequest>) =>\r\n    StateUtils.loaderSuccessSelector(state) &&\r\n    !StateUtils.loaderLoadingSelector(state)\r\n);\r\n\r\nexport const getOrderReturnRequestListState: MemoizedSelector<\r\n  StateWithUser,\r\n  LoaderState<ReturnRequestList>\r\n> = createSelector(getUserState, (state: UserState) => state.orderReturnList);\r\n\r\nexport const getOrderReturnRequestList: MemoizedSelector<\r\n  StateWithUser,\r\n  ReturnRequestList\r\n> = createSelector(\r\n  getOrderReturnRequestListState,\r\n  (state: LoaderState<ReturnRequestList>) =>\r\n    StateUtils.loaderValueSelector(state)\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { PaymentDetails } from '../../../model/cart.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport { StateWithUser, UserState } from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\n\r\nexport const getPaymentMethodsState: MemoizedSelector<\r\n  StateWithUser,\r\n  LoaderState<PaymentDetails[]>\r\n> = createSelector(getUserState, (state: UserState) => state.payments);\r\n\r\nexport const getPaymentMethods: MemoizedSelector<\r\n  StateWithUser,\r\n  PaymentDetails[]\r\n> = createSelector(\r\n  getPaymentMethodsState,\r\n  (state: LoaderState<PaymentDetails[]>) =>\r\n    StateUtils.loaderValueSelector(state)\r\n);\r\n\r\nexport const getPaymentMethodsLoading: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(\r\n  getPaymentMethodsState,\r\n  (state: LoaderState<PaymentDetails[]>) =>\r\n    StateUtils.loaderLoadingSelector(state)\r\n);\r\n\r\nexport const getPaymentMethodsLoadedSuccess: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(\r\n  getPaymentMethodsState,\r\n  (state: LoaderState<PaymentDetails[]>) =>\r\n    StateUtils.loaderSuccessSelector(state) &&\r\n    !StateUtils.loaderLoadingSelector(state)\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { Region } from '../../../model/address.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport { RegionsState, StateWithUser, UserState } from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\n\r\nexport const getRegionsLoaderState: MemoizedSelector<\r\n  StateWithUser,\r\n  LoaderState<RegionsState>\r\n> = createSelector(getUserState, (state: UserState) => state.regions);\r\n\r\nexport const getAllRegions: MemoizedSelector<\r\n  StateWithUser,\r\n  Region[]\r\n> = createSelector(\r\n  getRegionsLoaderState,\r\n  (state: LoaderState<RegionsState>) => {\r\n    return StateUtils.loaderValueSelector(state).entities;\r\n  }\r\n);\r\n\r\nexport const getRegionsDataAndLoading: MemoizedSelector<\r\n  StateWithUser,\r\n  {\r\n    loaded: boolean;\r\n    loading: boolean;\r\n    regions: Region[];\r\n    country: string;\r\n  }\r\n> = createSelector(\r\n  getRegionsLoaderState,\r\n  (state: LoaderState<RegionsState>) => ({\r\n    loaded: StateUtils.loaderSuccessSelector(state),\r\n    loading: StateUtils.loaderLoadingSelector(state),\r\n    regions: StateUtils.loaderValueSelector(state).entities,\r\n    country: StateUtils.loaderValueSelector(state).country,\r\n  })\r\n);\r\n\r\nexport const getRegionsCountry: MemoizedSelector<\r\n  StateWithUser,\r\n  string\r\n> = createSelector(\r\n  getRegionsLoaderState,\r\n  (state: LoaderState<RegionsState>) =>\r\n    StateUtils.loaderValueSelector(state).country\r\n);\r\n\r\nexport const getRegionsLoading: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\r\n  StateUtils.loaderLoadingSelector(state)\r\n);\r\n\r\nexport const getRegionsLoaded: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\r\n  StateUtils.loaderSuccessSelector(state)\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { StateWithUser, UserState } from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\n\r\nexport const getResetPassword: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(getUserState, (state: UserState) => state.resetPassword);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { Title } from '../../../model/misc.model';\r\nimport {\r\n  StateWithUser,\r\n  TitleEntities,\r\n  TitlesState,\r\n  UserState,\r\n} from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\n\r\nexport const getTitlesState: MemoizedSelector<\r\n  StateWithUser,\r\n  TitlesState\r\n> = createSelector(getUserState, (state: UserState) => state.titles);\r\n\r\nexport const getTitlesEntites: MemoizedSelector<\r\n  StateWithUser,\r\n  TitleEntities\r\n> = createSelector(getTitlesState, (state: TitlesState) => state.entities);\r\n\r\nexport const getAllTitles: MemoizedSelector<\r\n  StateWithUser,\r\n  Title[]\r\n> = createSelector(getTitlesEntites, (entites) =>\r\n  Object.keys(entites).map((code) => entites[code])\r\n);\r\n\r\nexport const titleSelectorFactory = (\r\n  code: string\r\n): MemoizedSelector<StateWithUser, Title> =>\r\n  createSelector(getTitlesEntites, (entities) =>\r\n    Object.keys(entities).length !== 0 ? entities[code] : null\r\n  );\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { Address } from '../../../model/address.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport { StateWithUser, UserState } from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\n\r\nexport const getAddressesLoaderState: MemoizedSelector<\r\n  StateWithUser,\r\n  LoaderState<Address[]>\r\n> = createSelector(getUserState, (state: UserState) => state.addresses);\r\n\r\nexport const getAddresses: MemoizedSelector<\r\n  StateWithUser,\r\n  Address[]\r\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\r\n  StateUtils.loaderValueSelector(state)\r\n);\r\n\r\nexport const getAddressesLoading: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\r\n  StateUtils.loaderLoadingSelector(state)\r\n);\r\n\r\nexport const getAddressesLoadedSuccess: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(\r\n  getAddressesLoaderState,\r\n  (state: LoaderState<Address[]>) =>\r\n    StateUtils.loaderSuccessSelector(state) &&\r\n    !StateUtils.loaderLoadingSelector(state)\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { ConsentTemplate } from '../../../model/consent.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport { StateWithUser, UserState } from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\n\r\nexport const getConsentsState: MemoizedSelector<\r\n  StateWithUser,\r\n  LoaderState<ConsentTemplate[]>\r\n> = createSelector(getUserState, (state: UserState) => state.consents);\r\n\r\nexport const getConsentsValue: MemoizedSelector<\r\n  StateWithUser,\r\n  ConsentTemplate[]\r\n> = createSelector(getConsentsState, StateUtils.loaderValueSelector);\r\n\r\nexport const getConsentByTemplateId = (\r\n  templateId: string\r\n): MemoizedSelector<StateWithUser, ConsentTemplate> =>\r\n  createSelector(getConsentsValue, (templates) =>\r\n    templates.find((template) => template.id === templateId)\r\n  );\r\n\r\nexport const getConsentsLoading: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(getConsentsState, StateUtils.loaderLoadingSelector);\r\n\r\nexport const getConsentsSuccess: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(getConsentsState, StateUtils.loaderSuccessSelector);\r\n\r\nexport const getConsentsError: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(getConsentsState, StateUtils.loaderErrorSelector);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { User } from '../../../model/misc.model';\r\nimport { StateWithUser, UserDetailsState, UserState } from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\n\r\nexport const getDetailsState: MemoizedSelector<\r\n  StateWithUser,\r\n  UserDetailsState\r\n> = createSelector(getUserState, (state: UserState) => state.account);\r\n\r\nexport const getDetails: MemoizedSelector<StateWithUser, User> = createSelector(\r\n  getDetailsState,\r\n  (state: UserDetailsState) => state.details\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { OrderHistoryList } from '../../../model/order.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport { StateWithUser, UserState } from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\n\r\nexport const getOrdersState: MemoizedSelector<\r\n  StateWithUser,\r\n  LoaderState<OrderHistoryList>\r\n> = createSelector(getUserState, (state: UserState) => state.orders);\r\n\r\nexport const getOrdersLoaded: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\r\n  StateUtils.loaderSuccessSelector(state)\r\n);\r\n\r\nexport const getOrders: MemoizedSelector<\r\n  StateWithUser,\r\n  OrderHistoryList\r\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\r\n  StateUtils.loaderValueSelector(state)\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\n\r\nimport { UserState, StateWithUser } from '../user-state';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport {\r\n  loaderValueSelector,\r\n  loaderSuccessSelector,\r\n  loaderLoadingSelector,\r\n} from '../../../state/utils/loader/loader.selectors';\r\n\r\nimport { getUserState } from './feature.selector';\r\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\r\n\r\nexport const getCustomerCouponsState: MemoizedSelector<\r\n  StateWithUser,\r\n  LoaderState<CustomerCouponSearchResult>\r\n> = createSelector(getUserState, (state: UserState) => state.customerCoupons);\r\n\r\nexport const getCustomerCouponsLoaded: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(\r\n  getCustomerCouponsState,\r\n  (state: LoaderState<CustomerCouponSearchResult>) =>\r\n    loaderSuccessSelector(state)\r\n);\r\n\r\nexport const getCustomerCouponsLoading: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(\r\n  getCustomerCouponsState,\r\n  (state: LoaderState<CustomerCouponSearchResult>) =>\r\n    loaderLoadingSelector(state)\r\n);\r\n\r\nexport const getCustomerCoupons: MemoizedSelector<\r\n  StateWithUser,\r\n  CustomerCouponSearchResult\r\n> = createSelector(\r\n  getCustomerCouponsState,\r\n  (state: LoaderState<CustomerCouponSearchResult>) => loaderValueSelector(state)\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { NotificationPreference } from '../../../model/notification-preference.model';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport { StateWithUser, UserState } from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\nimport {\r\n  loaderValueSelector,\r\n  loaderLoadingSelector,\r\n} from '../../../state/utils/loader/loader.selectors';\r\n\r\nexport const getPreferencesLoaderState: MemoizedSelector<\r\n  StateWithUser,\r\n  LoaderState<NotificationPreference[]>\r\n> = createSelector(\r\n  getUserState,\r\n  (state: UserState) => state.notificationPreferences\r\n);\r\n\r\nexport const getPreferences: MemoizedSelector<\r\n  StateWithUser,\r\n  NotificationPreference[]\r\n> = createSelector(\r\n  getPreferencesLoaderState,\r\n  (state: LoaderState<NotificationPreference[]>) => loaderValueSelector(state)\r\n);\r\n\r\nexport const getEnabledPreferences: MemoizedSelector<\r\n  StateWithUser,\r\n  NotificationPreference[]\r\n> = createSelector(\r\n  getPreferencesLoaderState,\r\n  (state: LoaderState<NotificationPreference[]>) =>\r\n    loaderValueSelector(state).filter((p) => p.enabled)\r\n);\r\n\r\nexport const getPreferencesLoading: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(\r\n  getPreferencesLoaderState,\r\n  (state: LoaderState<NotificationPreference[]>) => loaderLoadingSelector(state)\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { UserState, StateWithUser } from '../user-state';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport {\r\n  loaderValueSelector,\r\n  loaderLoadingSelector,\r\n} from '../../../state/utils/loader/loader.selectors';\r\nimport { getUserState } from './feature.selector';\r\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\r\n\r\nexport const getInterestsState: MemoizedSelector<\r\n  StateWithUser,\r\n  LoaderState<ProductInterestSearchResult>\r\n> = createSelector(getUserState, (state: UserState) => state.productInterests);\r\n\r\nexport const getInterests: MemoizedSelector<\r\n  StateWithUser,\r\n  ProductInterestSearchResult\r\n> = createSelector(\r\n  getInterestsState,\r\n  (state: LoaderState<ProductInterestSearchResult>) =>\r\n    loaderValueSelector(state)\r\n);\r\n\r\nexport const getInterestsLoading: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(\r\n  getInterestsState,\r\n  (state: LoaderState<ProductInterestSearchResult>) =>\r\n    loaderLoadingSelector(state)\r\n);\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { iif, Observable } from 'rxjs';\r\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { Consent, ConsentTemplate } from '../../model/consent.model';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport {\r\n  getProcessErrorFactory,\r\n  getProcessLoadingFactory,\r\n  getProcessSuccessFactory,\r\n} from '../../process/store/selectors/process.selectors';\r\nimport { UserActions } from '../store/actions/index';\r\nimport { UsersSelectors } from '../store/selectors/index';\r\nimport {\r\n  GIVE_CONSENT_PROCESS_ID,\r\n  StateWithUser,\r\n  WITHDRAW_CONSENT_PROCESS_ID,\r\n} from '../store/user-state';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserConsentService {\r\n  constructor(\r\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\r\n    protected authService: AuthService\r\n  ) {}\r\n\r\n  /**\r\n   * Retrieves all consents.\r\n   */\r\n  loadConsents(): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(new UserActions.LoadUserConsents(userId));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns all consent templates. If `loadIfMissing` parameter is set to `true`, the method triggers the load if consent templates.\r\n   * @param loadIfMissing is set to `true`, the method will load templates if those are not already present. The default value is `false`.\r\n   */\r\n  getConsents(loadIfMissing = false): Observable<ConsentTemplate[]> {\r\n    return iif(\r\n      () => loadIfMissing,\r\n      this.store.pipe(\r\n        select(UsersSelectors.getConsentsValue),\r\n        withLatestFrom(\r\n          this.getConsentsResultLoading(),\r\n          this.getConsentsResultSuccess()\r\n        ),\r\n        filter(([_templates, loading, _success]) => !loading),\r\n        tap(([templates, _loading, success]) => {\r\n          if (!templates || templates.length === 0) {\r\n            // avoid infite loop - if we've already attempted to load templates and we got an empty array as the response\r\n            if (!success) {\r\n              this.loadConsents();\r\n            }\r\n          }\r\n        }),\r\n        filter(([templates, _loading]) => Boolean(templates)),\r\n        map(([templates, _loading]) => templates)\r\n      ),\r\n      this.store.pipe(select(UsersSelectors.getConsentsValue))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the consents loading flag\r\n   */\r\n  getConsentsResultLoading(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getConsentsLoading));\r\n  }\r\n\r\n  /**\r\n   * Returns the consents success flag\r\n   */\r\n  getConsentsResultSuccess(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getConsentsSuccess));\r\n  }\r\n\r\n  /**\r\n   * Returns the consents error flag\r\n   */\r\n  getConsentsResultError(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getConsentsError));\r\n  }\r\n\r\n  /**\r\n   * Resets the processing state for consent retrieval\r\n   */\r\n  resetConsentsProcessState(): void {\r\n    this.store.dispatch(new UserActions.ResetLoadUserConsents());\r\n  }\r\n\r\n  /**\r\n   * Returns the registered consent for the given template ID.\r\n   *\r\n   * As a side-effect, the method will call `getConsents(true)` to load the templates if those are not present.\r\n   *\r\n   * @param templateId a template ID by which to filter the registered templates.\r\n   */\r\n  getConsent(templateId: string): Observable<Consent> {\r\n    return this.authService.isUserLoggedIn().pipe(\r\n      filter(Boolean),\r\n      tap(() => this.getConsents(true)),\r\n      switchMap(() =>\r\n        this.store.pipe(\r\n          select(UsersSelectors.getConsentByTemplateId(templateId))\r\n        )\r\n      ),\r\n      filter((template) => Boolean(template)),\r\n      map((template) => template.currentConsent)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the consent is truthy and if `consentWithdrawnDate` doesn't exist.\r\n   * Otherwise, `false` is returned.\r\n   *\r\n   * @param consent to check\r\n   */\r\n  isConsentGiven(consent: Consent): boolean {\r\n    return (\r\n      Boolean(consent) &&\r\n      Boolean(consent.consentGivenDate) &&\r\n      !Boolean(consent.consentWithdrawnDate)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the consent is either falsy or if `consentWithdrawnDate` is present.\r\n   * Otherwise, `false` is returned.\r\n   *\r\n   * @param consent to check\r\n   */\r\n  isConsentWithdrawn(consent: Consent): boolean {\r\n    if (Boolean(consent)) {\r\n      return Boolean(consent.consentWithdrawnDate);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Give consent for specified consent template ID and version.\r\n   * @param consentTemplateId a template ID for which to give a consent\r\n   * @param consentTemplateVersion a template version for which to give a consent\r\n   */\r\n  giveConsent(consentTemplateId: string, consentTemplateVersion: number): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.GiveUserConsent({\r\n          userId,\r\n          consentTemplateId,\r\n          consentTemplateVersion,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the give consent process loading flag\r\n   */\r\n  getGiveConsentResultLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(GIVE_CONSENT_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the give consent process success flag\r\n   */\r\n  getGiveConsentResultSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(GIVE_CONSENT_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the give consent process error flag\r\n   */\r\n  getGiveConsentResultError(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessErrorFactory(GIVE_CONSENT_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resents the give consent process flags\r\n   */\r\n  resetGiveConsentProcessState(): void {\r\n    return this.store.dispatch(new UserActions.ResetGiveUserConsentProcess());\r\n  }\r\n\r\n  /**\r\n   * Withdraw consent for the given `consentCode`\r\n   * @param consentCode for which to withdraw the consent\r\n   */\r\n  withdrawConsent(consentCode: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.WithdrawUserConsent({\r\n          userId,\r\n          consentCode,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the withdraw consent process loading flag\r\n   */\r\n  getWithdrawConsentResultLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(WITHDRAW_CONSENT_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the withdraw consent process success flag\r\n   */\r\n  getWithdrawConsentResultSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(WITHDRAW_CONSENT_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the withdraw consent process error flag\r\n   */\r\n  getWithdrawConsentResultError(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessErrorFactory(WITHDRAW_CONSENT_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resets the process flags for withdraw consent\r\n   */\r\n  resetWithdrawConsentProcessState(): void {\r\n    return this.store.dispatch(\r\n      new UserActions.ResetWithdrawUserConsentProcess()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Filters the provided `templateList`' templates by hiding the template IDs specified in `hideTemplateIds`.\r\n   * If the `hideTemplateIds` is empty, the provided `templateList` is returned.\r\n   *\r\n   * @param templateList a list of consent templates to filter\r\n   * @param hideTemplateIds template IDs to hide\r\n   */\r\n  filterConsentTemplates(\r\n    templateList: ConsentTemplate[],\r\n    hideTemplateIds: string[] = []\r\n  ): ConsentTemplate[] {\r\n    if (hideTemplateIds.length === 0) {\r\n      return templateList;\r\n    }\r\n\r\n    const updatedTemplateList: ConsentTemplate[] = [];\r\n    for (const template of templateList) {\r\n      const show = !hideTemplateIds.includes(template.id);\r\n      if (show) {\r\n        updatedTemplateList.push(template);\r\n      }\r\n    }\r\n\r\n    return updatedTemplateList;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../model/consent.model';\nimport { AnonymousConsentTemplatesAdapter } from './anonymous-consent-templates.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AnonymousConsentTemplatesConnector {\n  constructor(protected adapter: AnonymousConsentTemplatesAdapter) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    return this.adapter.loadAnonymousConsentTemplates();\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { EMPTY, Observable, of } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  concatMap,\r\n  filter,\r\n  map,\r\n  mergeMap,\r\n  switchMap,\r\n  tap,\r\n  withLatestFrom,\r\n} from 'rxjs/operators';\r\nimport { AuthActions, AuthService } from '../../../auth/index';\r\nimport { UserConsentService } from '../../../user/facade/user-consent.service';\r\nimport { UserActions } from '../../../user/store/actions/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { AnonymousConsentsConfig } from '../../config/anonymous-consents-config';\r\nimport { AnonymousConsentTemplatesConnector } from '../../connectors/anonymous-consent-templates.connector';\r\nimport { AnonymousConsentsService } from '../../facade/index';\r\nimport { AnonymousConsentsActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class AnonymousConsentsEffects {\r\n  @Effect()\r\n  loadAnonymousConsentTemplates$: Observable<\r\n    AnonymousConsentsActions.AnonymousConsentsActions\r\n  > = this.actions$.pipe(\r\n    ofType(AnonymousConsentsActions.LOAD_ANONYMOUS_CONSENT_TEMPLATES),\r\n    concatMap(() =>\r\n      this.anonymousConsentTemplatesConnector\r\n        .loadAnonymousConsentTemplates()\r\n        .pipe(\r\n          withLatestFrom(this.anonymousConsentService.getTemplates()),\r\n          mergeMap(([newConsentTemplates, currentConsentTemplates]) => {\r\n            let updated = false;\r\n            if (\r\n              Boolean(currentConsentTemplates) &&\r\n              currentConsentTemplates.length !== 0\r\n            ) {\r\n              updated = this.anonymousConsentService.detectUpdatedTemplates(\r\n                currentConsentTemplates,\r\n                newConsentTemplates\r\n              );\r\n            }\r\n\r\n            return [\r\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess(\r\n                newConsentTemplates\r\n              ),\r\n              new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\r\n                updated\r\n              ),\r\n            ];\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  transferAnonymousConsentsToUser$: Observable<\r\n    UserActions.TransferAnonymousConsent | Observable<never>\r\n  > = this.actions$.pipe(\r\n    ofType<AuthActions.LoadUserTokenSuccess>(\r\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\r\n    ),\r\n    filter(() => Boolean(this.anonymousConsentsConfig.anonymousConsents)),\r\n    withLatestFrom(\r\n      this.actions$.pipe(\r\n        ofType<UserActions.RegisterUserSuccess>(\r\n          UserActions.REGISTER_USER_SUCCESS\r\n        )\r\n      )\r\n    ),\r\n    filter(([, registerAction]) => Boolean(registerAction)),\r\n    switchMap(() =>\r\n      this.anonymousConsentService.getConsents().pipe(\r\n        withLatestFrom(\r\n          this.authService.getOccUserId(),\r\n          this.anonymousConsentService.getTemplates(),\r\n          this.authService.isUserLoggedIn()\r\n        ),\r\n        filter(([, , , loggedIn]) => loggedIn),\r\n        concatMap(([consents, userId, templates, _loggedIn]) => {\r\n          const actions: UserActions.TransferAnonymousConsent[] = [];\r\n          for (const consent of consents) {\r\n            if (\r\n              this.anonymousConsentService.isConsentGiven(consent) &&\r\n              (!this.anonymousConsentsConfig.anonymousConsents\r\n                .requiredConsents ||\r\n                !this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\r\n                  consent.templateCode\r\n                ))\r\n            ) {\r\n              for (const template of templates) {\r\n                if (template.id === consent.templateCode) {\r\n                  actions.push(\r\n                    new UserActions.TransferAnonymousConsent({\r\n                      userId,\r\n                      consentTemplateId: template.id,\r\n                      consentTemplateVersion: template.version,\r\n                    })\r\n                  );\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n          }\r\n          if (actions.length > 0) {\r\n            return actions;\r\n          }\r\n          return EMPTY;\r\n        })\r\n      )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  giveRequiredConsentsToUser$: Observable<\r\n    UserActions.GiveUserConsent | Observable<never>\r\n  > = this.actions$.pipe(\r\n    ofType<AuthActions.LoadUserTokenSuccess>(\r\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\r\n    ),\r\n    filter(\r\n      (action) =>\r\n        Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\r\n        Boolean(\r\n          this.anonymousConsentsConfig.anonymousConsents.requiredConsents\r\n        ) &&\r\n        Boolean(action)\r\n    ),\r\n    concatMap(() =>\r\n      this.userConsentService.getConsentsResultSuccess().pipe(\r\n        withLatestFrom(\r\n          this.authService.getOccUserId(),\r\n          this.userConsentService.getConsents(),\r\n          this.authService.isUserLoggedIn()\r\n        ),\r\n        filter(([, , , loggedIn]) => loggedIn),\r\n        tap(([loaded, _userId, _templates, _loggedIn]) => {\r\n          if (!loaded) {\r\n            this.userConsentService.loadConsents();\r\n          }\r\n        }),\r\n        map(([_loaded, userId, templates, _loggedIn]) => {\r\n          return { userId, templates };\r\n        }),\r\n        concatMap(({ userId, templates }) => {\r\n          const actions: UserActions.GiveUserConsent[] = [];\r\n          for (const template of templates) {\r\n            if (\r\n              this.userConsentService.isConsentWithdrawn(\r\n                template.currentConsent\r\n              ) &&\r\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\r\n                template.id\r\n              )\r\n            ) {\r\n              actions.push(\r\n                new UserActions.GiveUserConsent({\r\n                  userId,\r\n                  consentTemplateId: template.id,\r\n                  consentTemplateVersion: template.version,\r\n                })\r\n              );\r\n            }\r\n          }\r\n          if (actions.length > 0) {\r\n            return actions;\r\n          }\r\n          return EMPTY;\r\n        })\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private anonymousConsentTemplatesConnector: AnonymousConsentTemplatesConnector,\r\n    private authService: AuthService,\r\n    private anonymousConsentsConfig: AnonymousConsentsConfig,\r\n    private anonymousConsentService: AnonymousConsentsService,\r\n    private userConsentService: UserConsentService\r\n  ) {}\r\n}\r\n","import { AnonymousConsentsEffects } from './anonymous-consents.effect';\n\nexport const effects: any[] = [AnonymousConsentsEffects];\n\nexport * from './anonymous-consents.effect';\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\nimport { SiteAdapter } from './site.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteConnector {\n  constructor(protected adapter: SiteAdapter) {}\n\n  getLanguages(): Observable<Language[]> {\n    return this.adapter.loadLanguages();\n  }\n\n  getCurrencies(): Observable<Currency[]> {\n    return this.adapter.loadCurrencies();\n  }\n\n  getCountries(type?: CountryType): Observable<Country[]> {\n    return this.adapter.loadCountries(type);\n  }\n\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.adapter.loadRegions(countryIsoCode);\n  }\n\n  getBaseSite(): Observable<BaseSite> {\n    return this.adapter.loadBaseSite();\n  }\n}\n","import { Provider, Type } from '@angular/core';\nimport { LanguageService } from '../facade/language.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from './context-ids';\n\nexport abstract class ContextServiceMap {\n  [context: string]: Type<SiteContext<any>>;\n}\n\nexport function serviceMapFactory() {\n  return {\n    [LANGUAGE_CONTEXT_ID]: LanguageService,\n    [CURRENCY_CONTEXT_ID]: CurrencyService,\n    [BASE_SITE_CONTEXT_ID]: BaseSiteService,\n  };\n}\n\nexport const contextServiceMapProvider: Provider = {\n  provide: ContextServiceMap,\n  useFactory: serviceMapFactory,\n};\n","import { SiteContextConfig } from './site-context-config';\nimport { getContextParameterDefault } from './context-config-utils';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\n\nexport function baseSiteConfigValidator(config: SiteContextConfig) {\n  if (getContextParameterDefault(config, BASE_SITE_CONTEXT_ID) === undefined) {\n    return 'Please configure context.parameters.baseSite before using storefront library!';\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../providers/context-ids';\n\nexport function defaultSiteContextConfigFactory(): SiteContextConfig {\n  return {\n    context: {\n      [LANGUAGE_CONTEXT_ID]: [\n        'en',\n        'de',\n        'ja',\n        'zh',\n        'ru',\n        'fr',\n        'tr',\n        'it',\n        'es',\n        'uk',\n        'pl',\n        'nl',\n        'hi',\n        'ar',\n        'pt',\n        'bn',\n        'pa',\n      ],\n      [CURRENCY_CONTEXT_ID]: [\n        'USD',\n        'EUR',\n        'JPY',\n        'GBP',\n        'AUD',\n        'CAD',\n        'CHF',\n        'CNY',\n        'SEK',\n        'NZD',\n        'MXN',\n        'SGD',\n        'HKD',\n        'NOK',\n        'KRW',\n        'TRY',\n        'RUB',\n        'INR',\n        'BRL',\n        'ZAR',\n      ],\n    },\n  };\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\r\nimport {\r\n  CONFIG_INITIALIZER_FORROOT_GUARD,\r\n  ConfigInitializer,\r\n} from './config-initializer';\r\nimport { Config } from '../config.module';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { filter, mapTo, take } from 'rxjs/operators';\r\nimport { deepMerge } from '../utils/deep-merge';\r\n\r\n/**\r\n * Provides support for CONFIG_INITIALIZERS\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ConfigInitializerService {\r\n  constructor(\r\n    @Inject(Config) protected config: any,\r\n    @Optional()\r\n    @Inject(CONFIG_INITIALIZER_FORROOT_GUARD)\r\n    protected initializerGuard\r\n  ) {}\r\n\r\n  protected ongoingScopes$ = new BehaviorSubject<string[]>(undefined);\r\n\r\n  /**\r\n   * Returns true if config is stable, i.e. all CONFIG_INITIALIZERS resolved correctly\r\n   */\r\n  get isStable(): boolean {\r\n    return (\r\n      !this.initializerGuard ||\r\n      (this.ongoingScopes$.value && this.ongoingScopes$.value.length === 0)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Recommended way to get config for code that can run before app will finish\r\n   * initialization (APP_INITIALIZERS, selected service constructors)\r\n   *\r\n   * Used without parameters waits for the whole config to become stable\r\n   *\r\n   * Parameters allow to describe which part of the config should be stable using\r\n   * string describing config part, e.g.:\r\n   * 'siteContext', 'siteContext.language', etc.\r\n   *\r\n   * @param scopes String describing parts of the config we want to be sure are stable\r\n   */\r\n  async getStableConfig(...scopes: string[]): Promise<any> {\r\n    if (this.isStable) {\r\n      return this.config;\r\n    }\r\n    return this.ongoingScopes$\r\n      .pipe(\r\n        filter(\r\n          (ongoingScopes) =>\r\n            ongoingScopes && this.areReady(scopes, ongoingScopes)\r\n        ),\r\n        take(1),\r\n        mapTo(this.config)\r\n      )\r\n      .toPromise();\r\n  }\r\n\r\n  /**\r\n   * Removes provided scopes from currently ongoingScopes\r\n   *\r\n   * @param scopes\r\n   */\r\n  protected finishScopes(scopes: string[]) {\r\n    const newScopes = [...this.ongoingScopes$.value];\r\n    for (const scope of scopes) {\r\n      newScopes.splice(newScopes.indexOf(scope), 1);\r\n    }\r\n    this.ongoingScopes$.next(newScopes);\r\n  }\r\n\r\n  /**\r\n   * Return true if provided scopes are not part of ongoingScopes\r\n   *\r\n   * @param scopes\r\n   * @param ongoingScopes\r\n   */\r\n  protected areReady(scopes: string[], ongoingScopes: string[]): boolean {\r\n    if (!scopes.length) {\r\n      return !ongoingScopes.length;\r\n    }\r\n    for (const scope of scopes) {\r\n      for (const ongoingScope of ongoingScopes) {\r\n        if (this.scopesOverlap(scope, ongoingScope)) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Check if two scopes overlap.\r\n   *\r\n   * Example of scopes that overlap:\r\n   * 'test' and 'test', 'test.a' and 'test', 'test' and 'test.a'\r\n   *\r\n   * Example of scopes that do not overlap:\r\n   * 'test' and 'testA', 'test.a' and 'test.b', 'test.nested' and 'test.nest'\r\n   *\r\n   * @param a ScopeA\r\n   * @param b ScopeB\r\n   */\r\n  protected scopesOverlap(a: string, b: string): boolean {\r\n    if (b.length > a.length) {\r\n      [a, b] = [b, a];\r\n    }\r\n    return a.startsWith(b) && (a[b.length] || '.') === '.';\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   *\r\n   * Not a part of a public API, used by APP_INITIALIZER to initialize all provided CONFIG_INITIALIZERS\r\n   *\r\n   */\r\n  async initialize(initializers?: ConfigInitializer[]) {\r\n    if (this.ongoingScopes$.value) {\r\n      // guard for double initialization\r\n      return;\r\n    }\r\n\r\n    const ongoingScopes: string[] = [];\r\n\r\n    const asyncConfigs: Promise<void>[] = [];\r\n\r\n    for (const initializer of initializers || []) {\r\n      if (!initializer) {\r\n        continue;\r\n      }\r\n      if (!initializer.scopes || !initializer.scopes.length) {\r\n        throw new Error('CONFIG_INITIALIZER should provide scope!');\r\n      }\r\n\r\n      if (isDevMode() && !this.areReady(initializer.scopes, ongoingScopes)) {\r\n        console.warn(\r\n          'More than one CONFIG_INITIALIZER is initializing the same config scope.'\r\n        );\r\n      }\r\n\r\n      ongoingScopes.push(...initializer.scopes);\r\n\r\n      asyncConfigs.push(\r\n        (async () => {\r\n          deepMerge(this.config, await initializer.configFactory());\r\n          this.finishScopes(initializer.scopes);\r\n        })()\r\n      );\r\n    }\r\n    this.ongoingScopes$.next(ongoingScopes);\r\n\r\n    if (asyncConfigs.length) {\r\n      await Promise.all(asyncConfigs);\r\n    }\r\n  }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { combineLatest, Observable, of } from 'rxjs';\r\nimport { distinctUntilChanged, filter } from 'rxjs/operators';\r\nimport {\r\n  getContextParameterDefault,\r\n  getContextParameterValues,\r\n} from '../config/context-config-utils';\r\nimport { SiteContextConfig } from '../config/site-context-config';\r\nimport { SiteContext } from '../facade/site-context.interface';\r\nimport { ContextServiceMap } from '../providers/context-service-map';\r\n\r\n@Injectable()\r\nexport class SiteContextParamsService {\r\n  constructor(\r\n    private config: SiteContextConfig,\r\n    private injector: Injector,\r\n    private serviceMap: ContextServiceMap\r\n  ) {}\r\n\r\n  getContextParameters(): string[] {\r\n    if (this.config.context) {\r\n      return Object.keys(this.config.context).filter(\r\n        (param) => param !== 'urlParameters'\r\n      );\r\n    }\r\n    return [];\r\n  }\r\n\r\n  getUrlEncodingParameters(): string[] {\r\n    return (this.config.context && this.config.context.urlParameters) || [];\r\n  }\r\n\r\n  getParamValues(param: string): string[] {\r\n    return getContextParameterValues(this.config, param);\r\n  }\r\n\r\n  getParamDefaultValue(param: string): string {\r\n    return getContextParameterDefault(this.config, param);\r\n  }\r\n\r\n  getSiteContextService(param: string): SiteContext<any> {\r\n    if (this.serviceMap[param]) {\r\n      return this.injector.get<SiteContext<any>>(this.serviceMap[param], null);\r\n    }\r\n  }\r\n\r\n  getValue(param: string): string {\r\n    let value: string;\r\n\r\n    const service = this.getSiteContextService(param);\r\n    if (service) {\r\n      service\r\n        .getActive()\r\n        .subscribe((val) => (value = val))\r\n        .unsubscribe();\r\n    }\r\n\r\n    return value !== undefined ? value : this.getParamDefaultValue(param);\r\n  }\r\n\r\n  setValue(param: string, value: string) {\r\n    const service = this.getSiteContextService(param);\r\n    if (service) {\r\n      service.setActive(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get active values for all provided context parameters\r\n   *\r\n   * @param params Context parameters\r\n   *\r\n   * @returns Observable emitting array of all passed active context values\r\n   */\r\n  getValues(params: string[]): Observable<Array<string>> {\r\n    if (params.length === 0) {\r\n      return of([]);\r\n    }\r\n\r\n    return combineLatest(\r\n      params.map((param) =>\r\n        this.getSiteContextService(param)\r\n          .getActive()\r\n          .pipe(distinctUntilChanged())\r\n      )\r\n    ).pipe(filter((value) => value.every((param) => !!param)));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { DefaultUrlSerializer, UrlTree } from '@angular/router';\r\nimport { SiteContextParamsService } from './site-context-params.service';\r\n\r\nexport interface ParamValuesMap {\r\n  [name: string]: string;\r\n}\r\n\r\nexport interface UrlTreeWithSiteContext extends UrlTree {\r\n  siteContext?: ParamValuesMap;\r\n}\r\n\r\nconst UrlSplit = /(^[^#?]*)(.*)/; // used to split url into path and query/fragment parts\r\n\r\n@Injectable()\r\nexport class SiteContextUrlSerializer extends DefaultUrlSerializer {\r\n  private get urlEncodingParameters(): string[] {\r\n    return this.siteContextParams.getUrlEncodingParameters();\r\n  }\r\n\r\n  get hasContextInRoutes() {\r\n    return this.urlEncodingParameters.length > 0;\r\n  }\r\n\r\n  constructor(private siteContextParams: SiteContextParamsService) {\r\n    super();\r\n  }\r\n\r\n  parse(url: string): UrlTreeWithSiteContext {\r\n    if (this.hasContextInRoutes) {\r\n      const urlWithParams = this.urlExtractContextParameters(url);\r\n      const parsed = super.parse(urlWithParams.url) as UrlTreeWithSiteContext;\r\n      this.urlTreeIncludeContextParameters(parsed, urlWithParams.params);\r\n      return parsed;\r\n    } else {\r\n      return super.parse(url);\r\n    }\r\n  }\r\n\r\n  urlExtractContextParameters(\r\n    url: string\r\n  ): { url: string; params: ParamValuesMap } {\r\n    const [, urlPart, queryPart] = url.match(UrlSplit);\r\n\r\n    const segments = urlPart.split('/');\r\n    if (segments[0] === '') {\r\n      segments.shift();\r\n    }\r\n    const params = {};\r\n\r\n    let paramId = 0;\r\n    let segmentId = 0;\r\n    while (\r\n      paramId < this.urlEncodingParameters.length &&\r\n      segmentId < segments.length\r\n    ) {\r\n      const paramName = this.urlEncodingParameters[paramId];\r\n      const paramValues = this.siteContextParams.getParamValues(paramName);\r\n\r\n      if (paramValues.includes(segments[segmentId])) {\r\n        params[paramName] = segments[segmentId];\r\n        segmentId++;\r\n      }\r\n      paramId++;\r\n    }\r\n\r\n    url = segments.slice(Object.keys(params).length).join('/') + queryPart;\r\n    return { url, params };\r\n  }\r\n\r\n  private urlTreeIncludeContextParameters(\r\n    urlTree: UrlTreeWithSiteContext,\r\n    params: ParamValuesMap\r\n  ) {\r\n    urlTree.siteContext = params;\r\n  }\r\n\r\n  serialize(tree: UrlTreeWithSiteContext): string {\r\n    const params = this.urlTreeExtractContextParameters(tree);\r\n    const url = super.serialize(tree);\r\n    const serialized = this.urlIncludeContextParameters(url, params);\r\n    return serialized;\r\n  }\r\n\r\n  urlTreeExtractContextParameters(\r\n    urlTree: UrlTreeWithSiteContext\r\n  ): ParamValuesMap {\r\n    return urlTree.siteContext ? urlTree.siteContext : {};\r\n  }\r\n\r\n  private urlIncludeContextParameters(url: string, params: ParamValuesMap) {\r\n    const contextRoutePart = this.urlEncodingParameters\r\n      .map((param) => {\r\n        return params[param]\r\n          ? params[param]\r\n          : this.siteContextParams.getValue(param);\r\n      })\r\n      .join('/');\r\n\r\n    return contextRoutePart + url;\r\n  }\r\n}\r\n","import { Location } from '@angular/common';\r\nimport { Injectable, Injector, OnDestroy } from '@angular/core';\r\nimport {\r\n  NavigationCancel,\r\n  NavigationEnd,\r\n  NavigationError,\r\n  NavigationStart,\r\n  Router,\r\n  RouterEvent,\r\n} from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { SiteContextParamsService } from './site-context-params.service';\r\nimport { SiteContextUrlSerializer } from './site-context-url-serializer';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SiteContextRoutesHandler implements OnDestroy {\r\n  constructor(\r\n    private siteContextParams: SiteContextParamsService,\r\n    private serializer: SiteContextUrlSerializer,\r\n    private injector: Injector\r\n  ) {}\r\n\r\n  private subscription = new Subscription();\r\n\r\n  private contextValues: {\r\n    [param: string]: string;\r\n  } = {};\r\n\r\n  private router: Router;\r\n  private location: Location;\r\n\r\n  /**\r\n   * Tells whether there is a pending navigation at the moment, so we can avoid an infinite loop caused by the cyclic dependency:\r\n   * - `subscribeChanges` method triggers a navigation on update of site context state\r\n   * - `subscribeRouting` method updates the site context state on navigation\r\n   */\r\n  private isNavigating = false;\r\n\r\n  /**\r\n   * Initializes the two-way synchronization between the site context state and the URL.\r\n   *\r\n   * @returns Promise that is resolved when the site context state is initialized (updated for the first time) based on the URL.\r\n   */\r\n  init(): Promise<void> {\r\n    return new Promise((resolve) => {\r\n      this.router = this.injector.get<Router>(Router);\r\n\r\n      this.location = this.injector.get<Location>(Location);\r\n      const routingParams = this.siteContextParams.getUrlEncodingParameters();\r\n\r\n      if (routingParams.length) {\r\n        this.subscribeChanges(routingParams);\r\n        this.subscribeRouting(resolve);\r\n      } else {\r\n        resolve();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * After each change of the site context state, it modifies the current URL in place.\r\n   * But it happens only for the parameters configured to be persisted in the URL.\r\n   */\r\n  private subscribeChanges(params: string[]) {\r\n    params.forEach((param) => {\r\n      const service = this.siteContextParams.getSiteContextService(param);\r\n      if (service) {\r\n        this.subscription.add(\r\n          service.getActive().subscribe((value) => {\r\n            if (\r\n              !this.isNavigating &&\r\n              this.contextValues[param] &&\r\n              this.contextValues[param] !== value\r\n            ) {\r\n              const parsed = this.router.parseUrl(this.router.url);\r\n              const serialized = this.router.serializeUrl(parsed);\r\n              this.location.replaceState(serialized);\r\n            }\r\n            this.contextValues[param] = value;\r\n          })\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * After each Angular NavigationStart event it updates the site context state based on\r\n   * site context params encoded in the anticipated URL.\r\n   *\r\n   * In particular, it's responsible for initializing the state of the context params\r\n   * on page start, reading the values from the URL.\r\n   *\r\n   * @param onContextInitialized notify that the initialization of the context was done based on the URL\r\n   */\r\n  private subscribeRouting(onContextInitialized: Function) {\r\n    let contextInitialized = false;\r\n\r\n    this.subscription.add(\r\n      this.router.events\r\n        .pipe(\r\n          filter(\r\n            (event) =>\r\n              event instanceof NavigationStart ||\r\n              event instanceof NavigationEnd ||\r\n              event instanceof NavigationError ||\r\n              event instanceof NavigationCancel\r\n          )\r\n        )\r\n        .subscribe((event: RouterEvent) => {\r\n          this.isNavigating = event instanceof NavigationStart;\r\n          if (this.isNavigating) {\r\n            this.setContextParamsFromRoute(event.url);\r\n\r\n            if (!contextInitialized) {\r\n              contextInitialized = true;\r\n              onContextInitialized();\r\n            }\r\n          }\r\n        })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates the site context state based on the context params encoded in the given URL\r\n   *\r\n   * @param url URL with encoded context params\r\n   */\r\n  private setContextParamsFromRoute(url: string) {\r\n    const { params } = this.serializer.urlExtractContextParameters(url);\r\n    Object.keys(params).forEach((param) =>\r\n      this.siteContextParams.setValue(param, params[param])\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n}\r\n","import { APP_INITIALIZER, Provider } from '@angular/core';\r\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\r\nimport { BaseSiteService } from '../facade/base-site.service';\r\nimport { CurrencyService } from '../facade/currency.service';\r\nimport { LanguageService } from '../facade/language.service';\r\nimport { SiteContextRoutesHandler } from '../services/site-context-routes-handler';\r\n\r\nexport function initializeContext(\r\n  baseSiteService: BaseSiteService,\r\n  langService: LanguageService,\r\n  currService: CurrencyService,\r\n  configInit: ConfigInitializerService,\r\n  siteContextRoutesHandler: SiteContextRoutesHandler\r\n) {\r\n  return () => {\r\n    configInit.getStableConfig('context').then(() => {\r\n      siteContextRoutesHandler.init().then(() => {\r\n        baseSiteService.initialize();\r\n        langService.initialize();\r\n        currService.initialize();\r\n      });\r\n    });\r\n  };\r\n}\r\n\r\nexport const contextServiceProviders: Provider[] = [\r\n  BaseSiteService,\r\n  LanguageService,\r\n  CurrencyService,\r\n  {\r\n    provide: APP_INITIALIZER,\r\n    useFactory: initializeContext,\r\n    deps: [\r\n      BaseSiteService,\r\n      LanguageService,\r\n      CurrencyService,\r\n      ConfigInitializerService,\r\n      SiteContextRoutesHandler,\r\n    ],\r\n    multi: true,\r\n  },\r\n];\r\n","import { Provider } from '@angular/core';\r\nimport { UrlSerializer } from '@angular/router';\r\nimport { SiteContextParamsService } from '../services/site-context-params.service';\r\nimport { SiteContextUrlSerializer } from '../services/site-context-url-serializer';\r\n\r\n// functions below should not be exposed in public API:\r\n\r\nexport const siteContextParamsProviders: Provider[] = [\r\n  SiteContextParamsService,\r\n  SiteContextUrlSerializer,\r\n  { provide: UrlSerializer, useExisting: SiteContextUrlSerializer },\r\n];\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { NEVER, Observable, of } from 'rxjs';\r\nimport {\r\n  bufferCount,\r\n  catchError,\r\n  exhaustMap,\r\n  filter,\r\n  map,\r\n  switchMapTo,\r\n  tap,\r\n} from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { WindowRef } from '../../../window/window-ref';\r\nimport { SiteConnector } from '../../connectors/site.connector';\r\nimport { SiteContextActions } from '../actions/index';\r\nimport { getActiveLanguage } from '../selectors/languages.selectors';\r\nimport { StateWithSiteContext } from '../state';\r\n\r\n@Injectable()\r\nexport class LanguagesEffects {\r\n  @Effect()\r\n  loadLanguages$: Observable<\r\n    | SiteContextActions.LoadLanguagesSuccess\r\n    | SiteContextActions.LoadLanguagesFail\r\n  > = this.actions$.pipe(\r\n    ofType(SiteContextActions.LOAD_LANGUAGES),\r\n    exhaustMap(() => {\r\n      return this.siteConnector.getLanguages().pipe(\r\n        map(\r\n          (languages) => new SiteContextActions.LoadLanguagesSuccess(languages)\r\n        ),\r\n        catchError((error) =>\r\n          of(\r\n            new SiteContextActions.LoadLanguagesFail(\r\n              makeErrorSerializable(error)\r\n            )\r\n          )\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  persist$: Observable<void> = this.actions$.pipe(\r\n    ofType(SiteContextActions.SET_ACTIVE_LANGUAGE),\r\n    tap((action: SiteContextActions.SetActiveLanguage) => {\r\n      if (this.winRef.sessionStorage) {\r\n        this.winRef.sessionStorage.setItem('language', action.payload);\r\n      }\r\n    }),\r\n    switchMapTo(NEVER)\r\n  );\r\n\r\n  @Effect()\r\n  activateLanguage$: Observable<\r\n    SiteContextActions.LanguageChange\r\n  > = this.state.select(getActiveLanguage).pipe(\r\n    bufferCount(2, 1),\r\n\r\n    // avoid dispatching `change` action when we're just setting the initial value:\r\n    filter(([previous]) => !!previous),\r\n    map(\r\n      ([previous, current]) =>\r\n        new SiteContextActions.LanguageChange({ previous, current })\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private siteConnector: SiteConnector,\r\n    private winRef: WindowRef,\r\n    private state: Store<StateWithSiteContext>\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { NEVER, Observable, of } from 'rxjs';\r\nimport {\r\n  bufferCount,\r\n  catchError,\r\n  exhaustMap,\r\n  filter,\r\n  map,\r\n  switchMapTo,\r\n  tap,\r\n} from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { WindowRef } from '../../../window/window-ref';\r\nimport { SiteConnector } from '../../connectors/site.connector';\r\nimport { SiteContextActions } from '../actions/index';\r\nimport { getActiveCurrency } from '../selectors/currencies.selectors';\r\nimport { StateWithSiteContext } from '../state';\r\n\r\n@Injectable()\r\nexport class CurrenciesEffects {\r\n  @Effect()\r\n  loadCurrencies$: Observable<\r\n    | SiteContextActions.LoadCurrenciesSuccess\r\n    | SiteContextActions.LoadCurrenciesFail\r\n  > = this.actions$.pipe(\r\n    ofType(SiteContextActions.LOAD_CURRENCIES),\r\n    exhaustMap(() => {\r\n      return this.siteConnector.getCurrencies().pipe(\r\n        map(\r\n          (currencies) =>\r\n            new SiteContextActions.LoadCurrenciesSuccess(currencies)\r\n        ),\r\n        catchError((error) =>\r\n          of(\r\n            new SiteContextActions.LoadCurrenciesFail(\r\n              makeErrorSerializable(error)\r\n            )\r\n          )\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  persist$: Observable<void> = this.actions$.pipe(\r\n    ofType(SiteContextActions.SET_ACTIVE_CURRENCY),\r\n    tap((action: SiteContextActions.SetActiveCurrency) => {\r\n      if (this.winRef.sessionStorage) {\r\n        this.winRef.sessionStorage.setItem('currency', action.payload);\r\n      }\r\n    }),\r\n    switchMapTo(NEVER)\r\n  );\r\n\r\n  @Effect()\r\n  activateCurrency$: Observable<\r\n    SiteContextActions.CurrencyChange\r\n  > = this.state.select(getActiveCurrency).pipe(\r\n    bufferCount(2, 1),\r\n\r\n    // avoid dispatching `change` action when we're just setting the initial value:\r\n    filter(([previous]) => !!previous),\r\n    map(\r\n      ([previous, current]) =>\r\n        new SiteContextActions.CurrencyChange({ previous, current })\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private siteConnector: SiteConnector,\r\n    private winRef: WindowRef,\r\n    private state: Store<StateWithSiteContext>\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { SiteConnector } from '../../connectors/site.connector';\r\nimport { SiteContextActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class BaseSiteEffects {\r\n  @Effect()\r\n  loadBaseSite$: Observable<\r\n    SiteContextActions.LoadBaseSiteSuccess | SiteContextActions.LoadBaseSiteFail\r\n  > = this.actions$.pipe(\r\n    ofType(SiteContextActions.LOAD_BASE_SITE),\r\n    exhaustMap(() => {\r\n      return this.siteConnector.getBaseSite().pipe(\r\n        map((baseSite) => new SiteContextActions.LoadBaseSiteSuccess(baseSite)),\r\n        catchError((error) =>\r\n          of(\r\n            new SiteContextActions.LoadBaseSiteFail(\r\n              makeErrorSerializable(error)\r\n            )\r\n          )\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private siteConnector: SiteConnector\r\n  ) {}\r\n}\r\n","import { LanguagesEffects } from './languages.effect';\nimport { CurrenciesEffects } from './currencies.effect';\nimport { BaseSiteEffects } from './base-site.effect';\n\nexport const effects: any[] = [\n  LanguagesEffects,\n  CurrenciesEffects,\n  BaseSiteEffects,\n];\n\nexport * from './languages.effect';\nexport * from './currencies.effect';\nexport * from './base-site.effect';\n","import { SiteContextActions } from '../actions/index';\nimport { BaseSiteState } from '../state';\n\nexport const initialState: BaseSiteState = {\n  details: {},\n  activeSite: '',\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.BaseSiteAction\n): BaseSiteState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_BASE_SITE_SUCCESS: {\n      return {\n        ...state,\n        details: action.payload,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_BASE_SITE: {\n      return {\n        ...state,\n        activeSite: action.payload,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Currency } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { CurrenciesState } from '../state';\n\nexport const initialState: CurrenciesState = {\n  entities: null,\n  activeCurrency: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.CurrenciesAction\n): CurrenciesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_CURRENCIES_SUCCESS: {\n      const currencies: Currency[] = action.payload;\n      const entities = currencies.reduce(\n        (currEntities: { [isocode: string]: Currency }, currency: Currency) => {\n          return {\n            ...currEntities,\n            [currency.isocode]: currency,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_CURRENCY: {\n      const isocode: string = action.payload;\n\n      return {\n        ...state,\n        activeCurrency: isocode,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Language } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { LanguagesState } from '../state';\n\nexport const initialState: LanguagesState = {\n  entities: null,\n  activeLanguage: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.LanguagesAction\n): LanguagesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_LANGUAGES_SUCCESS: {\n      const languages: Language[] = action.payload;\n      const entities = languages.reduce(\n        (langEntities: { [isocode: string]: Language }, language: Language) => {\n          return {\n            ...langEntities,\n            [language.isocode]: language,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_LANGUAGE: {\n      const isocode = action.payload;\n\n      return {\n        ...state,\n        activeLanguage: isocode,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\r\nimport { ActionReducerMap } from '@ngrx/store';\r\nimport { SiteContextState } from '../state';\r\nimport * as fromBaseSite from './base-site.reducer';\r\nimport * as fromCurrencies from './currencies.reducer';\r\nimport * as fromLanguages from './languages.reducer';\r\n\r\nexport function getReducers(): ActionReducerMap<SiteContextState> {\r\n  return {\r\n    languages: fromLanguages.reducer,\r\n    currencies: fromCurrencies.reducer,\r\n    baseSite: fromBaseSite.reducer,\r\n  };\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducerMap<\r\n  SiteContextState\r\n>> = new InjectionToken<ActionReducerMap<SiteContextState>>(\r\n  'SiteContextReducers'\r\n);\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { provideDefaultConfigFactory } from '../../config/config.module';\r\nimport {\r\n  StateConfig,\r\n  StateTransferType,\r\n} from '../../state/config/state-config';\r\nimport { effects } from './effects/index';\r\nimport { reducerProvider, reducerToken } from './reducers/index';\r\nimport { SITE_CONTEXT_FEATURE } from './state';\r\n\r\nexport function siteContextStoreConfigFactory(): StateConfig {\r\n  // if we want to reuse SITE_CONTEXT_FEATURE const in config, we have to use factory instead of plain object\r\n  const config: StateConfig = {\r\n    state: {\r\n      ssrTransfer: {\r\n        keys: { [SITE_CONTEXT_FEATURE]: StateTransferType.TRANSFER_STATE },\r\n      },\r\n    },\r\n  };\r\n  return config;\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    StoreModule.forFeature(SITE_CONTEXT_FEATURE, reducerToken),\r\n    EffectsModule.forFeature(effects),\r\n  ],\r\n  providers: [\r\n    provideDefaultConfigFactory(siteContextStoreConfigFactory),\r\n    reducerProvider,\r\n  ],\r\n})\r\nexport class SiteContextStoreModule {}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { provideDefaultConfigFactory } from '../config/config.module';\r\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\r\nimport { StateModule } from '../state/index';\r\nimport { baseSiteConfigValidator } from './config/base-site-config-validator';\r\nimport { defaultSiteContextConfigFactory } from './config/default-site-context-config';\r\nimport { contextServiceMapProvider } from './providers/context-service-map';\r\nimport { contextServiceProviders } from './providers/context-service-providers';\r\nimport { siteContextParamsProviders } from './providers/site-context-params-providers';\r\nimport { SiteContextStoreModule } from './store/site-context-store.module';\r\n\r\n// @dynamic\r\n@NgModule({\r\n  imports: [StateModule, SiteContextStoreModule],\r\n})\r\nexport class SiteContextModule {\r\n  static forRoot(): ModuleWithProviders<SiteContextModule> {\r\n    return {\r\n      ngModule: SiteContextModule,\r\n      providers: [\r\n        provideDefaultConfigFactory(defaultSiteContextConfigFactory),\r\n        contextServiceMapProvider,\r\n        ...contextServiceProviders,\r\n        ...siteContextParamsProviders,\r\n        provideConfigValidator(baseSiteConfigValidator),\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED: {\n      return action.dismissed;\n    }\n  }\n\n  return state;\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED: {\n      return action.updated;\n    }\n  }\n\n  return state;\n}\n","import {\r\n  AnonymousConsent,\r\n  ANONYMOUS_CONSENT_STATUS,\r\n} from '../../../model/consent.model';\r\nimport { AnonymousConsentsActions } from '../actions/index';\r\n\r\nexport const initialState: AnonymousConsent[] = [];\r\n\r\nexport function toggleConsentStatus(\r\n  consents: AnonymousConsent[],\r\n  templateCode: string,\r\n  status: ANONYMOUS_CONSENT_STATUS\r\n): AnonymousConsent[] {\r\n  if (!consents) {\r\n    return [];\r\n  }\r\n\r\n  return consents.map((consent) => {\r\n    if (consent.templateCode === templateCode) {\r\n      consent = {\r\n        ...consent,\r\n        consentState: status,\r\n      };\r\n    }\r\n    return consent;\r\n  });\r\n}\r\n\r\nexport function reducer(\r\n  state = initialState,\r\n  action: AnonymousConsentsActions.AnonymousConsentsActions\r\n): AnonymousConsent[] {\r\n  switch (action.type) {\r\n    case AnonymousConsentsActions.GIVE_ANONYMOUS_CONSENT: {\r\n      return toggleConsentStatus(\r\n        state,\r\n        action.templateCode,\r\n        ANONYMOUS_CONSENT_STATUS.GIVEN\r\n      );\r\n    }\r\n\r\n    case AnonymousConsentsActions.WITHDRAW_ANONYMOUS_CONSENT: {\r\n      return toggleConsentStatus(\r\n        state,\r\n        action.templateCode,\r\n        ANONYMOUS_CONSENT_STATUS.WITHDRAWN\r\n      );\r\n    }\r\n\r\n    case AnonymousConsentsActions.SET_ANONYMOUS_CONSENTS: {\r\n      return action.payload;\r\n    }\r\n  }\r\n\r\n  return state;\r\n}\r\n","import { InjectionToken, Provider } from '@angular/core';\r\nimport {\r\n  Action,\r\n  ActionReducer,\r\n  ActionReducerMap,\r\n  combineReducers,\r\n  MetaReducer,\r\n} from '@ngrx/store';\r\nimport { AuthActions } from '../../../auth/index';\r\nimport { ConsentTemplate } from '../../../model/consent.model';\r\nimport { SiteContextActions } from '../../../site-context/index';\r\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\r\nimport {\r\n  AnonymousConsentsState,\r\n  ANONYMOUS_CONSENTS,\r\n} from '../anonymous-consents-state';\r\nimport * as fromAnonymousConsentsBanner from './anonymous-consents-banner.reducer';\r\nimport * as fromAnonymousConsentsUpdate from './anonymous-consents-update.reducer';\r\nimport * as fromAnonymousConsents from './anonymous-consents.reducer';\r\n\r\nexport function getReducers(): ActionReducerMap<AnonymousConsentsState> {\r\n  return {\r\n    templates: loaderReducer<ConsentTemplate[]>(ANONYMOUS_CONSENTS),\r\n    consents: fromAnonymousConsents.reducer,\r\n    ui: combineReducers({\r\n      bannerDismissed: fromAnonymousConsentsBanner.reducer,\r\n      updated: fromAnonymousConsentsUpdate.reducer,\r\n    }),\r\n  };\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducerMap<\r\n  AnonymousConsentsState\r\n>> = new InjectionToken<ActionReducerMap<AnonymousConsentsState>>(\r\n  'AnonymousConsentsReducers'\r\n);\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n\r\nexport function clearAnonymousConsentTemplates(\r\n  reducer: ActionReducer<AnonymousConsentsState, Action>\r\n): ActionReducer<AnonymousConsentsState, Action> {\r\n  return function (state, action) {\r\n    if (\r\n      action.type === AuthActions.LOGOUT ||\r\n      action.type === SiteContextActions.LANGUAGE_CHANGE\r\n    ) {\r\n      state = {\r\n        ...state,\r\n        templates: undefined,\r\n      };\r\n    }\r\n    return reducer(state, action);\r\n  };\r\n}\r\n\r\nexport const metaReducers: MetaReducer<any>[] = [\r\n  clearAnonymousConsentTemplates,\r\n];\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { provideDefaultConfigFactory } from '../../config/config.module';\r\nimport { StateConfig, StorageSyncType } from '../../state/index';\r\nimport { StateModule } from '../../state/state.module';\r\nimport { ANONYMOUS_CONSENTS_STORE_FEATURE } from './anonymous-consents-state';\r\nimport { effects } from './effects/index';\r\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\r\n\r\nexport function anonymousConsentsStoreConfigFactory(): StateConfig {\r\n  const config: StateConfig = {\r\n    state: {\r\n      storageSync: {\r\n        keys: {\r\n          [ANONYMOUS_CONSENTS_STORE_FEATURE]: StorageSyncType.LOCAL_STORAGE,\r\n        },\r\n      },\r\n    },\r\n  };\r\n  return config;\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    StateModule,\r\n    StoreModule.forFeature(ANONYMOUS_CONSENTS_STORE_FEATURE, reducerToken, {\r\n      metaReducers,\r\n    }),\r\n    EffectsModule.forFeature(effects),\r\n  ],\r\n  providers: [\r\n    provideDefaultConfigFactory(anonymousConsentsStoreConfigFactory),\r\n    reducerProvider,\r\n  ],\r\n})\r\nexport class AnonymousConsentsStoreModule {}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '../config/config.module';\r\nimport { defaultAnonymousConsentsConfig } from './config/default-anonymous-consents-config';\r\nimport { AnonymousConsentsService } from './facade/anonymous-consents.service';\r\nimport { interceptors } from './http-interceptors/index';\r\nimport { AnonymousConsentsStoreModule } from './store/anonymous-consents-store.module';\r\n\r\n@NgModule({\r\n  imports: [AnonymousConsentsStoreModule],\r\n})\r\nexport class AnonymousConsentsModule {\r\n  static forRoot(): ModuleWithProviders<AnonymousConsentsModule> {\r\n    return {\r\n      ngModule: AnonymousConsentsModule,\r\n      providers: [\r\n        ...interceptors,\r\n        AnonymousConsentsService,\r\n        provideDefaultConfig(defaultAnonymousConsentsConfig),\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { AsmConfig } from './asm-config';\n\nexport const defaultAsmConfig: AsmConfig = {\n  asm: {\n    agentSessionTimer: {\n      startingDelayInSeconds: 600,\n    },\n    customerSearch: {\n      maxResults: 20,\n    },\n  },\n};\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { AsmUi, CustomerSearchPage } from '../models/asm.models';\nimport { UserToken } from '../../auth';\n\nexport const ASM_FEATURE = 'asm';\nexport const CUSTOMER_SEARCH_DATA = '[asm] Customer search data';\nexport const CSAGENT_TOKEN_DATA = '[Auth] Customer Support Agent Token Data';\n\nexport interface StateWithAsm {\n  [ASM_FEATURE]: AsmState;\n}\n\nexport interface AsmState {\n  customerSearchResult: LoaderState<CustomerSearchPage>;\n  asmUi: AsmUi;\n  csagentToken: LoaderState<UserToken>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmAdapter } from './asm.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmConnector {\n  constructor(protected asmAdapter: AsmAdapter) {}\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    return this.asmAdapter.customerSearch(options);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\n\nexport const ASM_UI_UPDATE = '[Asm] UI Update';\n\nexport class AsmUiUpdate implements Action {\n  readonly type = ASM_UI_UPDATE;\n  constructor(public payload: AsmUi) {}\n}\n// action types\nexport type AsmUiAction = AsmUiUpdate;\n","import { StateUtils } from '../../../state/utils/index';\r\nimport {\r\n  CustomerSearchOptions,\r\n  CustomerSearchPage,\r\n} from '../../models/asm.models';\r\nimport { CUSTOMER_SEARCH_DATA } from '../asm-state';\r\n\r\nexport const CUSTOMER_SEARCH = '[Asm] Customer Search';\r\nexport const CUSTOMER_SEARCH_FAIL = '[Asm] Customer Search Fail';\r\nexport const CUSTOMER_SEARCH_SUCCESS = '[Asm] Customer Search Success';\r\nexport const CUSTOMER_SEARCH_RESET = '[Asm] Customer Search Reset';\r\n\r\nexport class CustomerSearch extends StateUtils.LoaderLoadAction {\r\n  readonly type = CUSTOMER_SEARCH;\r\n  constructor(public payload: CustomerSearchOptions) {\r\n    super(CUSTOMER_SEARCH_DATA);\r\n  }\r\n}\r\n\r\nexport class CustomerSearchFail extends StateUtils.LoaderFailAction {\r\n  readonly type = CUSTOMER_SEARCH_FAIL;\r\n  constructor(public payload: any) {\r\n    super(CUSTOMER_SEARCH_DATA);\r\n  }\r\n}\r\n\r\nexport class CustomerSearchSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = CUSTOMER_SEARCH_SUCCESS;\r\n  constructor(public payload: CustomerSearchPage) {\r\n    super(CUSTOMER_SEARCH_DATA);\r\n  }\r\n}\r\n\r\nexport class CustomerSearchReset extends StateUtils.LoaderResetAction {\r\n  readonly type = CUSTOMER_SEARCH_RESET;\r\n  constructor() {\r\n    super(CUSTOMER_SEARCH_DATA);\r\n  }\r\n}\r\n\r\n// action types\r\nexport type CustomerAction =\r\n  | CustomerSearch\r\n  | CustomerSearchFail\r\n  | CustomerSearchSuccess\r\n  | CustomerSearchReset;\r\n","import { StateUtils } from '../../../state/utils/index';\r\nimport { UserToken } from '../../../auth/models/token-types.model';\r\nimport { CSAGENT_TOKEN_DATA } from '../asm-state';\r\nimport { Action } from '@ngrx/store';\r\nimport { LOGOUT_CUSTOMER_SUPPORT_AGENT } from '../../../auth/store/actions/login-logout.action';\r\n\r\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN =\r\n  '[Auth] Load Customer Service Agent Token';\r\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL =\r\n  '[Auth] Load Customer Service Agent Token Fail';\r\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS =\r\n  '[Auth] Load Customer Service Agent Token Success';\r\n\r\nexport class LoadCustomerSupportAgentToken extends StateUtils.LoaderLoadAction {\r\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN;\r\n\r\n  constructor(public payload: { userId: string; password: string }) {\r\n    super(CSAGENT_TOKEN_DATA);\r\n  }\r\n}\r\n\r\nexport class LoadCustomerSupportAgentTokenFail extends StateUtils.LoaderFailAction {\r\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL;\r\n  constructor(public payload: any) {\r\n    super(CSAGENT_TOKEN_DATA);\r\n  }\r\n}\r\n\r\nexport class LoadCustomerSupportAgentTokenSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS;\r\n  constructor(public payload: UserToken) {\r\n    super(CSAGENT_TOKEN_DATA);\r\n  }\r\n}\r\n\r\nexport class LogoutCustomerSupportAgent implements Action {\r\n  readonly type = LOGOUT_CUSTOMER_SUPPORT_AGENT;\r\n}\r\n\r\n// action types\r\nexport type CustomerSupportAgentTokenAction =\r\n  | LoadCustomerSupportAgentToken\r\n  | LoadCustomerSupportAgentTokenFail\r\n  | LoadCustomerSupportAgentTokenSuccess\r\n  | LogoutCustomerSupportAgent;\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { AsmConnector } from '../../connectors/asm.connector';\r\nimport { CustomerSearchPage } from '../../models/asm.models';\r\nimport { AsmActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class CustomerEffects {\r\n  @Effect()\r\n  customerSearch$: Observable<AsmActions.CustomerAction> = this.actions$.pipe(\r\n    ofType(AsmActions.CUSTOMER_SEARCH),\r\n    map((action: AsmActions.CustomerSearch) => action.payload),\r\n    switchMap((options) =>\r\n      this.asmConnector.customerSearch(options).pipe(\r\n        map((customerSearchResults: CustomerSearchPage) => {\r\n          return new AsmActions.CustomerSearchSuccess(customerSearchResults);\r\n        }),\r\n        catchError((error) =>\r\n          of(new AsmActions.CustomerSearchFail(makeErrorSerializable(error)))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(private actions$: Actions, private asmConnector: AsmConnector) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserToken } from '../../../auth/models/token-types.model';\r\nimport { UserAuthenticationTokenService } from '../../../auth/services/user-authentication/user-authentication-token.service';\r\nimport { AsmActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class CustomerSupportAgentTokenEffects {\r\n  @Effect()\r\n  loadCustomerSupportAgentToken$: Observable<\r\n    AsmActions.CustomerSupportAgentTokenAction\r\n  > = this.actions$.pipe(\r\n    ofType(AsmActions.LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN),\r\n    map((action: AsmActions.LoadCustomerSupportAgentToken) => action.payload),\r\n    switchMap(({ userId, password }) =>\r\n      this.userTokenService.loadToken(userId, password).pipe(\r\n        map((token: UserToken) => {\r\n          const date = new Date();\r\n          date.setSeconds(date.getSeconds() + token.expires_in);\r\n          token.expiration_time = date.toJSON();\r\n          return new AsmActions.LoadCustomerSupportAgentTokenSuccess(token);\r\n        }),\r\n        catchError((error) =>\r\n          of(\r\n            new AsmActions.LoadCustomerSupportAgentTokenFail(\r\n              makeErrorSerializable(error)\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userTokenService: UserAuthenticationTokenService\r\n  ) {}\r\n}\r\n","import { CustomerEffects } from './customer.effect';\nimport { CustomerSupportAgentTokenEffects } from './csagent-token.effect';\n\nexport const effects: any[] = [\n  CustomerEffects,\n  CustomerSupportAgentTokenEffects,\n];\n\nexport * from './customer.effect';\n","import { AsmUi } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\nexport const initialState: AsmUi = <AsmUi>{ collapsed: false };\n\nexport function reducer(\n  state = initialState,\n  action: AsmActions.AsmUiAction\n): AsmUi {\n  switch (action.type) {\n    case AsmActions.ASM_UI_UPDATE: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\r\nimport {\r\n  Action,\r\n  ActionReducer,\r\n  ActionReducerMap,\r\n  MetaReducer,\r\n} from '@ngrx/store';\r\nimport { AuthActions } from '../../../auth/store/actions/index';\r\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\r\nimport { CustomerSearchPage } from '../../models/asm.models';\r\nimport {\r\n  AsmState,\r\n  CSAGENT_TOKEN_DATA,\r\n  CUSTOMER_SEARCH_DATA,\r\n} from '../asm-state';\r\nimport * as fromAsmUiReducer from './asm-ui.reducer';\r\nimport { UserToken } from '../../../auth/models/token-types.model';\r\n\r\nexport function getReducers(): ActionReducerMap<AsmState> {\r\n  return {\r\n    customerSearchResult: loaderReducer<CustomerSearchPage>(\r\n      CUSTOMER_SEARCH_DATA\r\n    ),\r\n    asmUi: fromAsmUiReducer.reducer,\r\n    csagentToken: loaderReducer<UserToken>(CSAGENT_TOKEN_DATA),\r\n  };\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducerMap<\r\n  AsmState\r\n>> = new InjectionToken<ActionReducerMap<AsmState>>('AsmReducers');\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n\r\nexport function clearCustomerSupportAgentAsmState(\r\n  reducer: ActionReducer<AsmState, Action>\r\n): ActionReducer<AsmState, Action> {\r\n  return function (state, action) {\r\n    if (action.type === AuthActions.LOGOUT_CUSTOMER_SUPPORT_AGENT) {\r\n      state = {\r\n        ...state,\r\n        customerSearchResult: undefined,\r\n        csagentToken: undefined,\r\n      };\r\n    }\r\n    return reducer(state, action);\r\n  };\r\n}\r\n\r\nexport const metaReducers: MetaReducer<any>[] = [\r\n  clearCustomerSupportAgentAsmState,\r\n];\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { provideDefaultConfigFactory } from '../../config/config.module';\r\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\r\nimport { StateModule } from '../../state/state.module';\r\nimport { ASM_FEATURE } from './asm-state';\r\nimport { effects } from './effects/index';\r\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\r\n\r\nexport function asmStoreConfigFactory(): StateConfig {\r\n  const config: StateConfig = {\r\n    state: {\r\n      storageSync: {\r\n        keys: {\r\n          'asm.asmUi': StorageSyncType.LOCAL_STORAGE,\r\n          'asm.csagentToken.value.access_token': StorageSyncType.LOCAL_STORAGE,\r\n          'asm.csagentToken.value.token_type': StorageSyncType.LOCAL_STORAGE,\r\n          'asm.csagentToken.value.expires_in': StorageSyncType.LOCAL_STORAGE,\r\n          'asm.csagentToken.value.expiration_time':\r\n            StorageSyncType.LOCAL_STORAGE,\r\n          'asm.csagentToken.value.scope': StorageSyncType.LOCAL_STORAGE,\r\n          'asm.csagentToken.value.userId': StorageSyncType.LOCAL_STORAGE,\r\n        },\r\n      },\r\n    },\r\n  };\r\n  return config;\r\n}\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    StateModule,\r\n    StoreModule.forFeature(ASM_FEATURE, reducerToken, { metaReducers }),\r\n    EffectsModule.forFeature(effects),\r\n  ],\r\n  providers: [\r\n    provideDefaultConfigFactory(asmStoreConfigFactory),\r\n    reducerProvider,\r\n  ],\r\n})\r\nexport class AsmStoreModule {}\r\n","import { Translatable } from '../../i18n/translatable';\r\n\r\nexport enum GlobalMessageType {\r\n  MSG_TYPE_CONFIRMATION = '[GlobalMessage] Confirmation',\r\n  MSG_TYPE_ERROR = '[GlobalMessage] Error',\r\n  MSG_TYPE_INFO = '[GlobalMessage] Information',\r\n  MSG_TYPE_WARNING = '[GlobalMessage] Warning',\r\n}\r\n\r\nexport interface GlobalMessage {\r\n  text: Translatable;\r\n  type: GlobalMessageType;\r\n  timeout?: number;\r\n}\r\n","import { GlobalMessageType } from '../models/global-message.model';\r\nimport { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\nexport type GlobalMessageTypeConfig = {\r\n  timeout?: number;\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class GlobalMessageConfig {\r\n  globalMessages: {\r\n    [GlobalMessageType.MSG_TYPE_CONFIRMATION]?: GlobalMessageTypeConfig;\r\n    [GlobalMessageType.MSG_TYPE_INFO]?: GlobalMessageTypeConfig;\r\n    [GlobalMessageType.MSG_TYPE_ERROR]?: GlobalMessageTypeConfig;\r\n    [GlobalMessageType.MSG_TYPE_WARNING]?: GlobalMessageTypeConfig;\r\n  };\r\n}\r\n","import { Action } from '@ngrx/store';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\n\nexport const ADD_MESSAGE = '[Global-message] Add a Message';\nexport const REMOVE_MESSAGE = '[Global-message] Remove a Message';\nexport const REMOVE_MESSAGES_BY_TYPE =\n  '[Global-message] Remove messages by type';\n\nexport class AddMessage implements Action {\n  readonly type = ADD_MESSAGE;\n  constructor(public payload: GlobalMessage) {}\n}\n\nexport class RemoveMessage implements Action {\n  readonly type = REMOVE_MESSAGE;\n  constructor(public payload: { type: GlobalMessageType; index: number }) {}\n}\n\nexport class RemoveMessagesByType implements Action {\n  readonly type = REMOVE_MESSAGES_BY_TYPE;\n  constructor(public payload: GlobalMessageType) {}\n}\n\nexport type GlobalMessageAction =\n  | AddMessage\n  | RemoveMessage\n  | RemoveMessagesByType;\n","import { Translatable } from '../../i18n/translatable';\n\nexport const GLOBAL_MESSAGE_FEATURE = 'global-message';\n\nexport interface StateWithGlobalMessage {\n  [GLOBAL_MESSAGE_FEATURE]: GlobalMessageState;\n}\n\nexport interface GlobalMessageState {\n  entities: GlobalMessageEntities;\n}\n\nexport interface GlobalMessageEntities {\n  [messageType: string]: Translatable[];\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  GlobalMessageState,\n  GLOBAL_MESSAGE_FEATURE,\n  StateWithGlobalMessage,\n} from '../global-message-state';\n\nexport const getGlobalMessageState: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageState\n> = createFeatureSelector<GlobalMessageState>(GLOBAL_MESSAGE_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { Translatable } from '../../../i18n/translatable';\r\nimport { GlobalMessageType } from '../../models/global-message.model';\r\nimport {\r\n  GlobalMessageEntities,\r\n  GlobalMessageState,\r\n  StateWithGlobalMessage,\r\n} from '../global-message-state';\r\nimport { getGlobalMessageState } from './feature.selector';\r\n\r\nexport const getGlobalMessageEntities: MemoizedSelector<\r\n  StateWithGlobalMessage,\r\n  GlobalMessageEntities\r\n> = createSelector(\r\n  getGlobalMessageState,\r\n  (state: GlobalMessageState) => state.entities\r\n);\r\n\r\nexport const getGlobalMessageEntitiesByType = (\r\n  type: GlobalMessageType\r\n): MemoizedSelector<StateWithGlobalMessage, Translatable[]> => {\r\n  return createSelector(\r\n    getGlobalMessageEntities,\r\n    (entities) => entities && entities[type]\r\n  );\r\n};\r\n\r\nexport const getGlobalMessageCountByType = (\r\n  type: GlobalMessageType\r\n): MemoizedSelector<StateWithGlobalMessage, number> => {\r\n  return createSelector(\r\n    getGlobalMessageEntitiesByType(type),\r\n    (entities) => entities && entities.length\r\n  );\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { Translatable } from '../../i18n/translatable';\r\nimport { GlobalMessageType } from '../models/global-message.model';\r\nimport { GlobalMessageActions } from '../store/actions/index';\r\nimport {\r\n  GlobalMessageEntities,\r\n  StateWithGlobalMessage,\r\n} from '../store/global-message-state';\r\nimport { GlobalMessageSelectors } from '../store/selectors/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class GlobalMessageService {\r\n  constructor(protected store: Store<StateWithGlobalMessage>) {}\r\n\r\n  /**\r\n   * Get all global messages\r\n   */\r\n  get(): Observable<GlobalMessageEntities> {\r\n    return this.store.pipe(\r\n      select(GlobalMessageSelectors.getGlobalMessageEntities),\r\n      filter((data) => data !== undefined)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Add one message into store\r\n   * @param text: string | Translatable\r\n   * @param type: GlobalMessageType object\r\n   * @param timeout: number\r\n   */\r\n  add(\r\n    text: string | Translatable,\r\n    type: GlobalMessageType,\r\n    timeout?: number\r\n  ): void {\r\n    this.store.dispatch(\r\n      new GlobalMessageActions.AddMessage({\r\n        text: typeof text === 'string' ? { raw: text } : text,\r\n        type,\r\n        timeout,\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Remove message(s) from store\r\n   * @param type: GlobalMessageType\r\n   * @param index:optional. Without it, messages will be removed by type; otherwise,\r\n   * message will be removed from list by index.\r\n   */\r\n  remove(type: GlobalMessageType, index?: number): void {\r\n    this.store.dispatch(\r\n      index !== undefined\r\n        ? new GlobalMessageActions.RemoveMessage({\r\n            type: type,\r\n            index: index,\r\n          })\r\n        : new GlobalMessageActions.RemoveMessagesByType(type)\r\n    );\r\n  }\r\n}\r\n","export enum HttpResponseStatus {\r\n  UNKNOWN = -1,\r\n  BAD_REQUEST = 400,\r\n  UNAUTHORIZED = 401,\r\n  FORBIDDEN = 403,\r\n  NOT_FOUND = 404,\r\n  CONFLICT = 409,\r\n  BAD_GATEWAY = 502,\r\n  GATEWAY_TIMEOUT = 504,\r\n  INTERNAL_SERVER_ERROR = 500,\r\n}\r\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\r\nimport { GlobalMessageService } from '../../facade/global-message.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { Applicable, Priority } from '../../../util/applicable';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport abstract class HttpErrorHandler implements Applicable {\r\n  constructor(protected globalMessageService: GlobalMessageService) {}\r\n\r\n  /**\r\n   * The http response status number which is handled by this handler.\r\n   * Implementations can set the response status number, i.e. 404, so that\r\n   * the handler can be found by the error interceptor.\r\n   */\r\n  responseStatus?: number;\r\n\r\n  /**\r\n   * Handles the error response for the respose status that is register for the handler\r\n   * @param { HttpRequest<any> } request : http request\r\n   * @param { HttpErrorResponse } errorResponse : Http error response\r\n   */\r\n  abstract handleError(\r\n    request: HttpRequest<any>,\r\n    errorResponse: HttpErrorResponse\r\n  ): void;\r\n\r\n  /**\r\n   * Error handlers are matched by the error `responseStatus` (i.e. 404). On top of the matching status\r\n   * a priority can be added to distinguish multiple handles for the same response status.\r\n   */\r\n  hasMatch(errorResponse: HttpErrorResponse): boolean {\r\n    return errorResponse.status === this.responseStatus;\r\n  }\r\n\r\n  abstract getPriority?(): Priority;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { GlobalMessageType } from '../../../models/global-message.model';\r\nimport { HttpResponseStatus } from '../../../models/response-status.model';\r\nimport { HttpErrorHandler } from '../http-error.handler';\r\nimport { Priority } from '../../../../util/applicable';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BadGatewayHandler extends HttpErrorHandler {\r\n  responseStatus = HttpResponseStatus.BAD_GATEWAY;\r\n\r\n  handleError() {\r\n    this.globalMessageService.add(\r\n      { key: 'httpHandlers.badGateway' },\r\n      GlobalMessageType.MSG_TYPE_ERROR\r\n    );\r\n  }\r\n\r\n  getPriority(): Priority {\r\n    return Priority.LOW;\r\n  }\r\n}\r\n","import { ErrorModel } from '../../model';\r\nimport { Cart } from '../../model/cart.model';\r\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\r\n\r\n/**\r\n * Extract cart identifier for current user. Anonymous calls use `guid` and for logged users `code` is used.\r\n */\r\nexport function getCartIdByUserId(cart: Cart, userId: string): string {\r\n  if (userId === OCC_USER_ID_ANONYMOUS) {\r\n    return cart.guid;\r\n  }\r\n  return cart.code;\r\n}\r\n\r\n/**\r\n * Check if cart is selective (save for later) based on id.\r\n */\r\nexport function isSelectiveCart(cartId = ''): boolean {\r\n  return cartId.startsWith('selectivecart');\r\n}\r\n\r\n/**\r\n * Check if the returned error is of type notFound.\r\n *\r\n * We additionally check if the cart is not a selective cart.\r\n * For selective cart this error can happen only when extension is disabled.\r\n * It should never happen, because in that case, selective cart should also be disabled in our configuration.\r\n * However if that happens we want to handle these errors silently.\r\n */\r\nexport function isCartNotFoundError(error: ErrorModel): boolean {\r\n  return (\r\n    error.reason === 'notFound' &&\r\n    error.subjectType === 'cart' &&\r\n    !isSelectiveCart(error.subject)\r\n  );\r\n}\r\n\r\n/**\r\n * Compute wishlist cart name for customer.\r\n */\r\nexport function getWishlistName(customerId: string): string {\r\n  return `wishlist${customerId}`;\r\n}\r\n\r\n/**\r\n * What is a temporary cart?\r\n * - frontend only cart entity!\r\n * - can be identified in store by `temp-` prefix with some unique id (multiple carts can be created at the same time eg. active cart, wishlist)\r\n *\r\n * Why we need temporary carts?\r\n * - to have information about cart creation process (meta flags: loading, error - for showing loader, error message)\r\n * - to know if there is currently a cart creation process in progress (eg. so, we don't create more than one active cart at the same time)\r\n * - cart identifiers are created in the backend, so those are only known after cart is created\r\n *\r\n * Temporary cart life cycle\r\n * - create cart method invoked\r\n * - new `temp-${uuid}` cart is created with `loading=true` state\r\n * - backend returns created cart\r\n * - normal cart entity is saved under correct id (eg. for logged user under cart `code` key)\r\n * - temporary cart value is set to backend response (anyone observing this cart can read code/guid from it and switch selector to normal cart)\r\n * - in next tick temporary cart is removed\r\n */\r\nexport function isTempCartId(cartId: string): boolean {\r\n  return cartId.startsWith('temp-');\r\n}\r\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { isCartNotFoundError } from '../../../../cart/utils/utils';\r\nimport { ErrorModel } from '../../../../model/misc.model';\r\nimport { Priority } from '../../../../util/applicable';\r\nimport { GlobalMessageType } from '../../../models/global-message.model';\r\nimport { HttpResponseStatus } from '../../../models/response-status.model';\r\nimport { HttpErrorHandler } from '../http-error.handler';\r\n\r\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BadRequestHandler extends HttpErrorHandler {\r\n  responseStatus = HttpResponseStatus.BAD_REQUEST;\r\n\r\n  handleError(request: HttpRequest<any>, response: HttpErrorResponse): void {\r\n    this.handleBadPassword(request, response);\r\n    this.handleBadLoginResponse(request, response);\r\n    this.handleBadCartRequest(request, response);\r\n    this.handleValidationError(request, response);\r\n    this.handleVoucherOperationError(request, response);\r\n  }\r\n\r\n  protected handleBadPassword(\r\n    request: HttpRequest<any>,\r\n    response: HttpErrorResponse\r\n  ): void {\r\n    if (\r\n      response.url?.includes(OAUTH_ENDPOINT) &&\r\n      response.error?.error === 'invalid_grant' &&\r\n      request.body?.get('grant_type') === 'password'\r\n    ) {\r\n      this.globalMessageService.add(\r\n        {\r\n          key: 'httpHandlers.badRequestPleaseLoginAgain',\r\n          params: {\r\n            errorMessage:\r\n              response.error.error_description || response.message || '',\r\n          },\r\n        },\r\n        GlobalMessageType.MSG_TYPE_ERROR\r\n      );\r\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_CONFIRMATION);\r\n    }\r\n  }\r\n\r\n  protected handleBadLoginResponse(\r\n    _request: HttpRequest<any>,\r\n    response: HttpErrorResponse\r\n  ) {\r\n    this.getErrors(response)\r\n      .filter((error) => error.type === 'PasswordMismatchError')\r\n      .forEach(() => {\r\n        this.globalMessageService.add(\r\n          { key: 'httpHandlers.badRequestOldPasswordIncorrect' },\r\n          GlobalMessageType.MSG_TYPE_ERROR\r\n        );\r\n      });\r\n  }\r\n\r\n  protected handleValidationError(\r\n    _request: HttpRequest<any>,\r\n    response: HttpErrorResponse\r\n  ): void {\r\n    this.getErrors(response)\r\n      .filter((e) => e.type === 'ValidationError')\r\n      .forEach((error) => {\r\n        this.globalMessageService.add(\r\n          {\r\n            key: `httpHandlers.validationErrors.${error.reason}.${error.subject}`,\r\n          },\r\n          GlobalMessageType.MSG_TYPE_ERROR\r\n        );\r\n      });\r\n  }\r\n\r\n  protected handleBadCartRequest(\r\n    _request: HttpRequest<any>,\r\n    response: HttpErrorResponse\r\n  ): void {\r\n    this.getErrors(response)\r\n      .filter((e) => isCartNotFoundError(e))\r\n      .forEach(() => {\r\n        this.globalMessageService.add(\r\n          { key: 'httpHandlers.cartNotFound' },\r\n          GlobalMessageType.MSG_TYPE_ERROR\r\n        );\r\n      });\r\n  }\r\n\r\n  protected handleVoucherOperationError(\r\n    _request: HttpRequest<any>,\r\n    response: HttpErrorResponse\r\n  ): void {\r\n    this.getErrors(response)\r\n      .filter(\r\n        (e) =>\r\n          e.message === 'coupon.invalid.code.provided' &&\r\n          e.type === 'VoucherOperationError'\r\n      )\r\n      .forEach(() => {\r\n        this.globalMessageService.add(\r\n          { key: 'httpHandlers.invalidCodeProvided' },\r\n          GlobalMessageType.MSG_TYPE_ERROR\r\n        );\r\n      });\r\n  }\r\n\r\n  protected getErrors(response: HttpErrorResponse): ErrorModel[] {\r\n    return (response.error?.errors || []).filter(\r\n      (error) => error.type !== 'JaloObjectNoLongerValidError'\r\n    );\r\n  }\r\n\r\n  getPriority(): Priority {\r\n    return Priority.LOW;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { GlobalMessageType } from '../../../models/global-message.model';\r\nimport { HttpResponseStatus } from '../../../models/response-status.model';\r\nimport { HttpErrorHandler } from '../http-error.handler';\r\nimport { Priority } from '../../../../util/applicable';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ConflictHandler extends HttpErrorHandler {\r\n  responseStatus = HttpResponseStatus.CONFLICT;\r\n\r\n  handleError() {\r\n    this.globalMessageService.add(\r\n      { key: 'httpHandlers.conflict' },\r\n      GlobalMessageType.MSG_TYPE_ERROR\r\n    );\r\n  }\r\n\r\n  getPriority(): Priority {\r\n    return Priority.LOW;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { GlobalMessageType } from '../../../models/global-message.model';\r\nimport { HttpResponseStatus } from '../../../models/response-status.model';\r\nimport { HttpErrorHandler } from '../http-error.handler';\r\nimport { Priority } from '../../../../util/applicable';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ForbiddenHandler extends HttpErrorHandler {\r\n  responseStatus = HttpResponseStatus.FORBIDDEN;\r\n\r\n  handleError() {\r\n    this.globalMessageService.add(\r\n      { key: 'httpHandlers.forbidden' },\r\n      GlobalMessageType.MSG_TYPE_ERROR\r\n    );\r\n  }\r\n\r\n  getPriority(): Priority {\r\n    return Priority.LOW;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { GlobalMessageType } from '../../../models/global-message.model';\r\nimport { HttpResponseStatus } from '../../../models/response-status.model';\r\nimport { HttpErrorHandler } from '../http-error.handler';\r\nimport { Priority } from '../../../../util/applicable';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class GatewayTimeoutHandler extends HttpErrorHandler {\r\n  responseStatus = HttpResponseStatus.GATEWAY_TIMEOUT;\r\n\r\n  handleError() {\r\n    this.globalMessageService.add(\r\n      { key: 'httpHandlers.gatewayTimeout' },\r\n      GlobalMessageType.MSG_TYPE_ERROR\r\n    );\r\n  }\r\n\r\n  getPriority(): Priority {\r\n    return Priority.LOW;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { GlobalMessageType } from '../../../models/global-message.model';\r\nimport { HttpResponseStatus } from '../../../models/response-status.model';\r\nimport { HttpErrorHandler } from '../http-error.handler';\r\nimport { Priority } from '../../../../util/applicable';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class InternalServerErrorHandler extends HttpErrorHandler {\r\n  responseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\r\n\r\n  handleError() {\r\n    this.globalMessageService.add(\r\n      { key: 'httpHandlers.internalServerError' },\r\n      GlobalMessageType.MSG_TYPE_ERROR\r\n    );\r\n  }\r\n\r\n  getPriority(): Priority {\r\n    return Priority.LOW;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpResponseStatus } from '../../../models/response-status.model';\r\nimport { HttpErrorHandler } from '../http-error.handler';\r\nimport { Priority } from '../../../../util/applicable';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NotFoundHandler extends HttpErrorHandler {\r\n  responseStatus = HttpResponseStatus.NOT_FOUND;\r\n\r\n  // empty error handler to avoid we fallabck to the unknown error handler\r\n  handleError(): void {}\r\n\r\n  getPriority() {\r\n    return Priority.LOW;\r\n  }\r\n}\r\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\r\nimport { Injectable, isDevMode } from '@angular/core';\r\nimport { GlobalMessageService } from '../../../facade/global-message.service';\r\nimport { GlobalMessageType } from '../../../models/global-message.model';\r\nimport { HttpResponseStatus } from '../../../models/response-status.model';\r\nimport { HttpErrorHandler } from './../http-error.handler';\r\nimport { Priority } from '../../../../util/applicable';\r\n\r\n/**\r\n * Handles Oauth client errors when a 401 is returned. This is the case for failing\r\n * authenticaton requests to OCC.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UnauthorizedErrorHandler extends HttpErrorHandler {\r\n  responseStatus = HttpResponseStatus.UNAUTHORIZED;\r\n\r\n  constructor(protected globalMessageService: GlobalMessageService) {\r\n    super(globalMessageService);\r\n  }\r\n\r\n  handleError(_request: HttpRequest<any>, response: HttpErrorResponse): void {\r\n    if (isDevMode()) {\r\n      console.warn(\r\n        `There's a problem with the \"Oauth client\" configuration. You must configure a matching Oauth client in the backend and Spartacus.`\r\n      );\r\n    }\r\n\r\n    if (response.error?.error === 'invalid_client') {\r\n      this.globalMessageService.add(\r\n        response.error?.error_description || {\r\n          key: 'httpHandlers.unauthorized.invalid_client',\r\n        },\r\n        GlobalMessageType.MSG_TYPE_ERROR\r\n      );\r\n    } else {\r\n      this.globalMessageService.add(\r\n        { key: 'httpHandlers.unauthorized.common' },\r\n        GlobalMessageType.MSG_TYPE_ERROR\r\n      );\r\n    }\r\n  }\r\n\r\n  getPriority() {\r\n    return Priority.LOW;\r\n  }\r\n}\r\n","import { Injectable, isDevMode } from '@angular/core';\r\nimport { HttpResponseStatus } from '../../../models/response-status.model';\r\nimport { HttpErrorHandler } from '../http-error.handler';\r\nimport { Priority } from '../../../../util/applicable';\r\n\r\n/**\r\n * Unknown Error Handler works as an fallback, to handle errors that were\r\n * not handled by any other error handlers\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UnknownErrorHandler extends HttpErrorHandler {\r\n  responseStatus = HttpResponseStatus.UNKNOWN;\r\n\r\n  /**\r\n   * hasMatch always returns true, to mach all errors\r\n   */\r\n  hasMatch(_errorResponse): boolean {\r\n    return true;\r\n  }\r\n\r\n  handleError() {\r\n    if (isDevMode()) {\r\n      console.warn(`Unknown http response error: ${this.responseStatus}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fallback priority assures that the handler is used as a last resort\r\n   */\r\n  getPriority() {\r\n    return Priority.FALLBACK;\r\n  }\r\n}\r\n","export const enum Priority {\r\n  /**\r\n   * Used as fallback, when there is no other matches\r\n   */\r\n  FALLBACK = -50,\r\n  /**\r\n   * Used mainly in libraries, easy overridable\r\n   */\r\n  LOW = -10,\r\n  /**\r\n   * Default priority\r\n   */\r\n  NORMAL = 0,\r\n  /**\r\n   * High priority for matches that should take precedence\r\n   */\r\n  HIGH = 10,\r\n}\r\n\r\n/**\r\n * Base interface for implementing applicables in a consistent way\r\n *\r\n * Applicables are mainly used to find best matching one from multi provided\r\n * classes, like handlers, resolvers, etc.\r\n */\r\nexport interface Applicable {\r\n  /**\r\n   * Returns true if applicable can be used to handle specified condition\r\n   */\r\n  hasMatch?(...params): boolean;\r\n\r\n  /**\r\n   * Returns priority or score for specified applicable.\r\n   *\r\n   * If multiple applicables can be applied to specified condition, the one\r\n   * with highest priority or score wins.\r\n   */\r\n  getPriority?(...params): Priority | number;\r\n}\r\n\r\n/**\r\n * Helper logic to resolve best matching Applicable\r\n *\r\n * Finding best match is a two step process:\r\n * 1. Find all matching applicables\r\n *    - all applicables for which hasMatch(...matchParams) will return true\r\n *    - all applicables without hasMatch method (implicit always match)\r\n * 2. Find the applicable with highest priority\r\n *    - applicable with highest getPriority(...priorityParams) will win\r\n *    - applicable without getPriority method is treated as Priotity.NORMAL or 0\r\n *    - applicables with the same priority are sorted by order of providers, the applicable that was provided later wins\r\n *\r\n * @param applicables - array or applicable-like instancese\r\n * @param matchParams - array of parameters passed for hasMatch calls\r\n * @param priorityParams - array of parameters passed for getPriority calls\r\n */\r\nexport function resolveApplicable<T extends Applicable>(\r\n  applicables: T[] = [],\r\n  matchParams: any[] = [],\r\n  priorityParams: any[] = []\r\n): T | undefined {\r\n  const matchedApplicables = applicables.filter(\r\n    (applicable) => !applicable.hasMatch || applicable.hasMatch(...matchParams)\r\n  );\r\n\r\n  if (matchedApplicables.length < 2) {\r\n    return matchedApplicables[0];\r\n  }\r\n\r\n  let lastPriority = -Infinity;\r\n  return matchedApplicables.reduce((acc, curr) => {\r\n    const currPriority = curr.getPriority\r\n      ? curr.getPriority(...priorityParams)\r\n      : Priority.NORMAL;\r\n    if (lastPriority > currPriority) {\r\n      return acc;\r\n    }\r\n    lastPriority = currPriority;\r\n    return curr;\r\n  }, undefined);\r\n}\r\n","import {\r\n  HttpErrorResponse,\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { HttpErrorHandler } from './handlers/http-error.handler';\r\nimport { resolveApplicable } from '../../util/applicable';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class HttpErrorInterceptor implements HttpInterceptor {\r\n  constructor(\r\n    @Inject(HttpErrorHandler) protected handlers: HttpErrorHandler[]\r\n  ) {}\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    return next.handle(request).pipe(\r\n      catchError((response: any) => {\r\n        if (response instanceof HttpErrorResponse) {\r\n          this.handleErrorResponse(request, response);\r\n          return throwError(response);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  protected handleErrorResponse(\r\n    request: HttpRequest<any>,\r\n    response: HttpErrorResponse\r\n  ): void {\r\n    const handler = this.getResponseHandler(response);\r\n    if (handler) {\r\n      handler.handleError(request, response);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * return the error handler that matches the `HttpResponseStatus` code.\r\n   * If no handler is available, the UNKNOWN handler is returned.\r\n   */\r\n  protected getResponseHandler(response: HttpErrorResponse): HttpErrorHandler {\r\n    return resolveApplicable(this.handlers, [response]);\r\n  }\r\n}\r\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { Provider } from '@angular/core';\r\nimport {\r\n  BadGatewayHandler,\r\n  BadRequestHandler,\r\n  ConflictHandler,\r\n  ForbiddenHandler,\r\n  GatewayTimeoutHandler,\r\n  HttpErrorHandler,\r\n  InternalServerErrorHandler,\r\n  NotFoundHandler,\r\n  UnauthorizedErrorHandler,\r\n  UnknownErrorHandler,\r\n} from './handlers/index';\r\nimport { HttpErrorInterceptor } from './http-error.interceptor';\r\n\r\nexport const errorHandlers: Provider[] = [\r\n  {\r\n    provide: HttpErrorHandler,\r\n    useExisting: UnknownErrorHandler,\r\n    multi: true,\r\n  },\r\n  {\r\n    provide: HttpErrorHandler,\r\n    useExisting: BadGatewayHandler,\r\n    multi: true,\r\n  },\r\n  {\r\n    provide: HttpErrorHandler,\r\n    useExisting: BadRequestHandler,\r\n    multi: true,\r\n  },\r\n  {\r\n    provide: HttpErrorHandler,\r\n    useExisting: ConflictHandler,\r\n    multi: true,\r\n  },\r\n  {\r\n    provide: HttpErrorHandler,\r\n    useExisting: ForbiddenHandler,\r\n    multi: true,\r\n  },\r\n  {\r\n    provide: HttpErrorHandler,\r\n    useExisting: GatewayTimeoutHandler,\r\n    multi: true,\r\n  },\r\n  {\r\n    provide: HttpErrorHandler,\r\n    useExisting: InternalServerErrorHandler,\r\n    multi: true,\r\n  },\r\n  {\r\n    provide: HttpErrorHandler,\r\n    useExisting: NotFoundHandler,\r\n    multi: true,\r\n  },\r\n  {\r\n    provide: HttpErrorHandler,\r\n    useExisting: UnauthorizedErrorHandler,\r\n    multi: true,\r\n  },\r\n];\r\n\r\nexport const httpErrorInterceptors: Provider[] = [\r\n  {\r\n    provide: HTTP_INTERCEPTORS,\r\n    useExisting: HttpErrorInterceptor,\r\n    multi: true,\r\n  },\r\n];\r\n","import { Translatable } from '../../../i18n/translatable';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { GlobalMessageState } from '../global-message-state';\n\nexport const initialState: GlobalMessageState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: GlobalMessageActions.GlobalMessageAction\n): GlobalMessageState {\n  switch (action.type) {\n    case GlobalMessageActions.ADD_MESSAGE: {\n      const message: GlobalMessage = action.payload;\n\n      if (state.entities[message.type] === undefined) {\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [message.text],\n          },\n        };\n      } else {\n        const currentMessages: Translatable[] = state.entities[message.type];\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [...currentMessages, message.text],\n          },\n        };\n      }\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGE: {\n      const msgType: GlobalMessageType = action.payload.type;\n      const msgIndex: number = action.payload.index;\n      if (\n        Object.keys(state.entities).length === 0 ||\n        !state.entities[msgType]\n      ) {\n        return state;\n      }\n\n      const messages = [...state.entities[msgType]];\n      messages.splice(msgIndex, 1);\n\n      return {\n        ...state,\n        entities: {\n          ...state.entities,\n          [msgType]: messages,\n        },\n      };\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGES_BY_TYPE: {\n      const entities = {\n        ...state.entities,\n        [action.payload]: [],\n      };\n      return {\n        ...state,\n        entities,\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\r\nimport * as fromGlobalMessage from './global-message.reducer';\r\nimport { GlobalMessageState } from '../global-message-state';\r\nimport { ActionReducer } from '@ngrx/store';\r\n\r\nexport function getReducers(): ActionReducer<GlobalMessageState> {\r\n  return fromGlobalMessage.reducer;\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducer<\r\n  GlobalMessageState\r\n>> = new InjectionToken<ActionReducer<GlobalMessageState>>(\r\n  'GlobalMessageReducers'\r\n);\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { GLOBAL_MESSAGE_FEATURE } from './global-message-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    StateModule,\n    StoreModule.forFeature(GLOBAL_MESSAGE_FEATURE, reducerToken),\n  ],\n  providers: [reducerProvider],\n})\nexport class GlobalMessageStoreModule {}\n","export function shallowEqualObjects(objA: object, objB: object): boolean {\r\n  if (objA === objB) {\r\n    return true;\r\n  }\r\n  if (!objA || !objB) {\r\n    return false;\r\n  }\r\n  const aKeys = Object.keys(objA);\r\n  const bKeys = Object.keys(objB);\r\n  const aKeysLen = aKeys.length;\r\n  const bKeysLen = bKeys.length;\r\n\r\n  if (aKeysLen !== bKeysLen) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < aKeysLen; i++) {\r\n    const key = aKeys[i];\r\n    if (objA[key] !== objB[key]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function deepEqualObjects(objA: object, objB: object): boolean {\r\n  if (objA === objB) {\r\n    return true; // if both objA and objB are null or undefined and exactly the same\r\n  } else if (!(objA instanceof Object) || !(objB instanceof Object)) {\r\n    return false; // if they are not strictly equal, they both need to be Objects\r\n  } else if (objA.constructor !== objB.constructor) {\r\n    // they must have the exact same prototype chain, the closest we can do is\r\n    // test their constructor.\r\n    return false;\r\n  } else {\r\n    for (const key in objA) {\r\n      if (!objA.hasOwnProperty(key)) {\r\n        continue; // other properties were tested using objA.constructor === y.constructor\r\n      }\r\n      if (!objB.hasOwnProperty(key)) {\r\n        return false; // allows to compare objA[ key ] and objB[ key ] when set to undefined\r\n      }\r\n      if (objA[key] === objB[key]) {\r\n        continue; // if they have the same strict value or identity then they are equal\r\n      }\r\n      if (typeof objA[key] !== 'object') {\r\n        return false; // Numbers, Strings, Functions, Booleans must be strictly equal\r\n      }\r\n      if (!deepEqualObjects(objA[key], objB[key])) {\r\n        return false;\r\n      }\r\n    }\r\n    for (const key in objB) {\r\n      if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport function countOfDeepEqualObjects(obj: any, arr: Array<any>): number {\r\n  return arr.reduce((acc, curr) => {\r\n    if (deepEqualObjects(obj, curr)) {\r\n      acc++;\r\n    }\r\n    return acc;\r\n  }, 0);\r\n}\r\n\r\nexport function indexOfFirstOccurrence(\r\n  obj: any,\r\n  arr: Array<any>\r\n): number | undefined {\r\n  for (let index = 0; index < arr.length; index++) {\r\n    if (deepEqualObjects(arr[index], obj)) {\r\n      return index;\r\n    }\r\n  }\r\n}\r\n","import { isPlatformBrowser } from '@angular/common';\r\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { EMPTY, Observable, of } from 'rxjs';\r\nimport {\r\n  concatMap,\r\n  delay,\r\n  filter,\r\n  map,\r\n  pluck,\r\n  switchMap,\r\n  take,\r\n  withLatestFrom,\r\n} from 'rxjs/operators';\r\nimport { Translatable } from '../../../i18n/translatable';\r\nimport {\r\n  countOfDeepEqualObjects,\r\n  indexOfFirstOccurrence,\r\n} from '../../../util/compare-equal-objects';\r\nimport { GlobalMessageConfig } from '../../config/global-message-config';\r\nimport { GlobalMessage } from '../../models/global-message.model';\r\nimport { GlobalMessageActions } from '../actions/index';\r\nimport { StateWithGlobalMessage } from '../global-message-state';\r\nimport { GlobalMessageSelectors } from '../selectors/index';\r\n\r\n@Injectable()\r\nexport class GlobalMessageEffect {\r\n  @Effect()\r\n  removeDuplicated$: Observable<\r\n    GlobalMessageActions.RemoveMessage\r\n  > = this.actions$.pipe(\r\n    ofType(GlobalMessageActions.ADD_MESSAGE),\r\n    pluck('payload'),\r\n    switchMap((message: GlobalMessage) =>\r\n      of(message.text).pipe(\r\n        withLatestFrom(\r\n          this.store.pipe(\r\n            select(\r\n              GlobalMessageSelectors.getGlobalMessageEntitiesByType(\r\n                message.type\r\n              )\r\n            )\r\n          )\r\n        ),\r\n        filter(\r\n          ([text, messages]: [Translatable, Translatable[]]) =>\r\n            countOfDeepEqualObjects(text, messages) > 1\r\n        ),\r\n        map(\r\n          ([text, messages]: [Translatable, Translatable[]]) =>\r\n            new GlobalMessageActions.RemoveMessage({\r\n              type: message.type,\r\n              index: indexOfFirstOccurrence(text, messages),\r\n            })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  hideAfterDelay$: Observable<\r\n    GlobalMessageActions.RemoveMessage\r\n  > = isPlatformBrowser(this.platformId) // we don't want to run this logic when doing SSR\r\n    ? this.actions$.pipe(\r\n        ofType(GlobalMessageActions.ADD_MESSAGE),\r\n        pluck('payload'),\r\n        concatMap((message: GlobalMessage) => {\r\n          const config = this.config.globalMessages[message.type];\r\n          return this.store.pipe(\r\n            select(\r\n              GlobalMessageSelectors.getGlobalMessageCountByType(message.type)\r\n            ),\r\n            take(1),\r\n            filter(\r\n              (count: number) =>\r\n                ((config && config.timeout !== undefined) || message.timeout) &&\r\n                count &&\r\n                count > 0\r\n            ),\r\n            delay(message.timeout || config.timeout),\r\n            switchMap(() =>\r\n              of(\r\n                new GlobalMessageActions.RemoveMessage({\r\n                  type: message.type,\r\n                  index: 0,\r\n                })\r\n              )\r\n            )\r\n          );\r\n        })\r\n      )\r\n    : EMPTY;\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private store: Store<StateWithGlobalMessage>,\r\n    private config: GlobalMessageConfig,\r\n    @Inject(PLATFORM_ID) private platformId: any\r\n  ) {}\r\n}\r\n","import { GlobalMessageType } from '../models/global-message.model';\r\nimport { GlobalMessageConfig } from './global-message-config';\r\n\r\nexport function defaultGlobalMessageConfigFactory(): GlobalMessageConfig {\r\n  return {\r\n    globalMessages: {\r\n      [GlobalMessageType.MSG_TYPE_CONFIRMATION]: {\r\n        timeout: 3000,\r\n      },\r\n      [GlobalMessageType.MSG_TYPE_INFO]: {\r\n        timeout: 3000,\r\n      },\r\n      [GlobalMessageType.MSG_TYPE_ERROR]: {\r\n        timeout: 7000,\r\n      },\r\n      [GlobalMessageType.MSG_TYPE_WARNING]: {\r\n        timeout: 7000,\r\n      },\r\n    },\r\n  };\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport {\r\n  errorHandlers,\r\n  httpErrorInterceptors,\r\n} from './http-interceptors/index';\r\nimport { GlobalMessageStoreModule } from './store/global-message-store.module';\r\nimport { GlobalMessageEffect } from './store/effects/global-message.effect';\r\n\r\nimport { provideDefaultConfigFactory } from '../config/config.module';\r\nimport { defaultGlobalMessageConfigFactory } from './config/default-global-message-config';\r\n\r\n@NgModule({\r\n  imports: [\r\n    GlobalMessageStoreModule,\r\n    EffectsModule.forFeature([GlobalMessageEffect]),\r\n  ],\r\n  providers: [provideDefaultConfigFactory(defaultGlobalMessageConfigFactory)],\r\n})\r\nexport class GlobalMessageModule {\r\n  static forRoot(): ModuleWithProviders<GlobalMessageModule> {\r\n    return {\r\n      ngModule: GlobalMessageModule,\r\n      providers: [...errorHandlers, ...httpErrorInterceptors],\r\n    };\r\n  }\r\n}\r\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmState, ASM_FEATURE, StateWithAsm } from '../asm-state';\n\nexport const getAsmState: MemoizedSelector<\n  StateWithAsm,\n  AsmState\n> = createFeatureSelector<AsmState>(ASM_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getAsmUi: MemoizedSelector<StateWithAsm, AsmUi> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.asmUi\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { CustomerSearchPage } from '../../models/asm.models';\r\nimport { AsmState, StateWithAsm } from '../asm-state';\r\nimport { getAsmState } from './feature.selector';\r\n\r\nexport const getCustomerSearchResultsLoaderState: MemoizedSelector<\r\n  StateWithAsm,\r\n  StateUtils.LoaderState<CustomerSearchPage>\r\n> = createSelector(\r\n  getAsmState,\r\n  (state: AsmState) => state.customerSearchResult\r\n);\r\n\r\nexport const getCustomerSearchResults: MemoizedSelector<\r\n  StateWithAsm,\r\n  CustomerSearchPage\r\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\r\n  StateUtils.loaderValueSelector(state)\r\n);\r\n\r\nexport const getCustomerSearchResultsLoading: MemoizedSelector<\r\n  StateWithAsm,\r\n  boolean\r\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\r\n  StateUtils.loaderLoadingSelector(state)\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { UserToken } from '../../../auth/models/token-types.model';\r\nimport { getAsmState } from './feature.selector';\r\nimport { AsmState, StateWithAsm } from '../asm-state';\r\n\r\nexport const getCustomerSupportAgentTokenState: MemoizedSelector<\r\n  StateWithAsm,\r\n  StateUtils.LoaderState<UserToken>\r\n> = createSelector(getAsmState, (state: AsmState) => state.csagentToken);\r\n\r\nexport const getCustomerSupportAgentToken: MemoizedSelector<\r\n  StateWithAsm,\r\n  UserToken\r\n> = createSelector(getCustomerSupportAgentTokenState, (state) =>\r\n  StateUtils.loaderValueSelector(state)\r\n);\r\n\r\nexport const getCustomerSupportAgentTokenLoading: MemoizedSelector<\r\n  StateWithAsm,\r\n  boolean\r\n> = createSelector(getCustomerSupportAgentTokenState, (state) =>\r\n  StateUtils.loaderLoadingSelector(state)\r\n);\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { take } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { UserToken } from '../../auth/models/token-types.model';\r\nimport { AuthActions } from '../../auth/store/actions';\r\nimport { OCC_USER_ID_CURRENT } from '../../occ/utils/occ-constants';\r\nimport { AsmActions } from '../store/actions/index';\r\nimport { StateWithAsm } from '../store/asm-state';\r\nimport { AsmSelectors } from '../store/selectors/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AsmAuthService {\r\n  constructor(\r\n    protected store: Store<StateWithAsm>,\r\n    protected authService: AuthService\r\n  ) {}\r\n\r\n  /**\r\n   * Loads a user token for a customer support agent\r\n   * @param userId\r\n   * @param password\r\n   */\r\n  authorizeCustomerSupportAgent(userId: string, password: string): void {\r\n    this.store.dispatch(\r\n      new AsmActions.LoadCustomerSupportAgentToken({\r\n        userId: userId,\r\n        password: password,\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Starts an ASM customer emulation session.\r\n   * A customer emulation session is stoped by calling logout().\r\n   * @param customerSupportAgentToken\r\n   * @param customerId\r\n   */\r\n  public startCustomerEmulationSession(\r\n    customerSupportAgentToken: UserToken,\r\n    customerId: string\r\n  ): void {\r\n    this.authService.authorizeWithToken({\r\n      ...customerSupportAgentToken,\r\n      userId: customerId,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Utility function to determine if a given token is a customer emulation session token.\r\n   * @param userToken\r\n   */\r\n  isCustomerEmulationToken(userToken: UserToken): boolean {\r\n    return (\r\n      Boolean(userToken) &&\r\n      Boolean(userToken.userId) &&\r\n      userToken.userId !== OCC_USER_ID_CURRENT\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the customer support agent's token\r\n   */\r\n  getCustomerSupportAgentToken(): Observable<UserToken> {\r\n    return this.store.pipe(select(AsmSelectors.getCustomerSupportAgentToken));\r\n  }\r\n\r\n  /**\r\n   * Returns the customer support agent's token loading status\r\n   */\r\n  getCustomerSupportAgentTokenLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(AsmSelectors.getCustomerSupportAgentTokenLoading)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Logout a customer support agent\r\n   */\r\n  logoutCustomerSupportAgent(): void {\r\n    this.getCustomerSupportAgentToken()\r\n      .pipe(take(1))\r\n      .subscribe((userToken) => {\r\n        this.store.dispatch(new AsmActions.LogoutCustomerSupportAgent());\r\n        this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\r\n      });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../global-message/index';\nimport { AsmAuthService } from '../facade/asm-auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentErrorHandlingService {\n  constructor(\n    protected asmAuthService: AsmAuthService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  terminateCustomerSupportAgentExpiredSession(): void {\n    this.asmAuthService.logoutCustomerSupportAgent();\n    this.globalMessageService.add(\n      {\n        key: 'asm.csagentTokenExpired',\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { CustomerSupportAgentErrorHandlingService } from '../../asm/services/csagent-error-handling.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentAuthErrorInterceptor\n  implements HttpInterceptor {\n  constructor(\n    private csagentErrorHandlingService: CustomerSupportAgentErrorHandlingService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isCustomerSupportAgentRequest = this.isCustomerSupportAgentRequest(\n      request\n    );\n    if (isCustomerSupportAgentRequest) {\n      request = InterceptorUtil.removeHeader(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request\n      );\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          // Unauthorized\n          if (isCustomerSupportAgentRequest && errResponse.status === 401) {\n            this.csagentErrorHandlingService.terminateCustomerSupportAgentExpiredSession();\n            return of(undefined as any);\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isCustomerSupportAgentRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AsmAuthService } from '../facade/asm-auth.service';\nimport { UserToken } from '../../auth/models/token-types.model';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentTokenInterceptor implements HttpInterceptor {\n  constructor(private asmAuthService: AsmAuthService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getCustomerSupportAgentToken(request).pipe(\n      take(1),\n      switchMap((token: UserToken) => {\n        if (token) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getCustomerSupportAgentToken(\n    request: HttpRequest<any>\n  ): Observable<UserToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request.headers\n      )\n    ) {\n      return this.asmAuthService.getCustomerSupportAgentToken();\n    }\n    return of(null);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { Provider } from '@angular/core';\r\nimport { CustomerSupportAgentAuthErrorInterceptor } from './csagent-auth-error.interceptor';\r\nimport { CustomerSupportAgentTokenInterceptor } from './csagent-token.interceptor';\r\n\r\nexport const interceptors: Provider[] = [\r\n  {\r\n    provide: HTTP_INTERCEPTORS,\r\n    useExisting: CustomerSupportAgentTokenInterceptor,\r\n    multi: true,\r\n  },\r\n  {\r\n    provide: HTTP_INTERCEPTORS,\r\n    useExisting: CustomerSupportAgentAuthErrorInterceptor,\r\n    multi: true,\r\n  },\r\n];\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '../config/config.module';\r\nimport { defaultAsmConfig } from './config/default-asm-config';\r\nimport { AsmStoreModule } from './store/asm-store.module';\r\nimport { interceptors } from './http-interceptors/index';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, HttpClientModule, AsmStoreModule],\r\n})\r\nexport class AsmModule {\r\n  static forRoot(): ModuleWithProviders<AsmModule> {\r\n    return {\r\n      ngModule: AsmModule,\r\n      providers: [...interceptors, provideDefaultConfig(defaultAsmConfig)],\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport {\r\n  AsmUi,\r\n  CustomerSearchOptions,\r\n  CustomerSearchPage,\r\n} from '../models/asm.models';\r\nimport { AsmActions } from '../store/actions/index';\r\nimport { StateWithAsm } from '../store/asm-state';\r\nimport { AsmSelectors } from '../store/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AsmService {\r\n  constructor(protected store: Store<StateWithAsm>) {}\r\n\r\n  /**\r\n   * Search for customers\r\n   * @param options\r\n   */\r\n  customerSearch(options: CustomerSearchOptions): void {\r\n    this.store.dispatch(new AsmActions.CustomerSearch(options));\r\n  }\r\n\r\n  /**\r\n   * Reset the customer search result data to the initial state.\r\n   */\r\n  customerSearchReset(): void {\r\n    this.store.dispatch(new AsmActions.CustomerSearchReset());\r\n  }\r\n\r\n  /**\r\n   * Returns the customer search result data.\r\n   */\r\n  getCustomerSearchResults(): Observable<CustomerSearchPage> {\r\n    return this.store.pipe(select(AsmSelectors.getCustomerSearchResults));\r\n  }\r\n\r\n  /**\r\n   * Returns the customer search result loading status.\r\n   */\r\n  getCustomerSearchResultsLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(AsmSelectors.getCustomerSearchResultsLoading)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates the state of the ASM UI\r\n   */\r\n  updateAsmUiState(asmUi: AsmUi): void {\r\n    this.store.dispatch(new AsmActions.AsmUiUpdate(asmUi));\r\n  }\r\n\r\n  /**\r\n   * Get the state of the ASM UI\r\n   */\r\n  getAsmUiState(): Observable<AsmUi> {\r\n    return this.store.pipe(select(AsmSelectors.getAsmUi));\r\n  }\r\n}\r\n","import { PageType } from '../../model/cms.model';\r\nimport { Page } from '../model/page.model';\r\nimport { Applicable } from '../../util/applicable';\r\n\r\n/**\r\n * Abstract class that can be used to resolve meta data for specific pages.\r\n * The `getScore` method is used to select the right resolver for a specific\r\n * page, based on a score. The score is calculated by the (non)matching page\r\n * type and page template.\r\n */\r\nexport abstract class PageMetaResolver implements Applicable {\r\n  /** The `PageType` is used to score the (non)matching page */\r\n  pageType: PageType;\r\n\r\n  /** The page template is used to score the (non)matching page template */\r\n  pageTemplate: string;\r\n\r\n  /**\r\n   * Returns the matching score for a resolver class, based on\r\n   * the page type and page template.\r\n   */\r\n  getScore(page: Page): number {\r\n    let score = 0;\r\n    if (this.pageType) {\r\n      score += page.type === this.pageType ? 1 : -1;\r\n    }\r\n    if (this.pageTemplate) {\r\n      score += page.template === this.pageTemplate ? 1 : -1;\r\n    }\r\n    return score;\r\n  }\r\n\r\n  hasMatch(page: Page): boolean {\r\n    return this.getScore(page) > 0;\r\n  }\r\n\r\n  getPriority(page: Page): number {\r\n    return this.getScore(page);\r\n  }\r\n}\r\n","// Email Standard RFC 5322:\nexport const EMAIL_PATTERN = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // tslint:disable-line\n\nexport const PASSWORD_PATTERN = /^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*()_\\-+{};:.,]).{6,}$/;\n","import { Cart } from '../../model/cart.model';\r\nimport { EntityProcessesLoaderState } from '../../state/utils/entity-processes-loader/entity-processes-loader-state';\r\n\r\nexport const MULTI_CART_FEATURE = 'cart';\r\nexport const MULTI_CART_DATA = '[Multi Cart] Multi Cart Data';\r\n\r\n// TODO(#7241): Drop after event system implementation for cart vouchers\r\n/**\r\n * Add voucher process const\r\n * @deprecated since 2.0\r\n */\r\nexport const ADD_VOUCHER_PROCESS_ID = 'addVoucher';\r\n\r\nexport interface StateWithMultiCart {\r\n  [MULTI_CART_FEATURE]: MultiCartState;\r\n}\r\n\r\nexport interface MultiCartState {\r\n  carts: EntityProcessesLoaderState<Cart>;\r\n  active: string;\r\n  wishList: string;\r\n}\r\n","import {\r\n  createFeatureSelector,\r\n  createSelector,\r\n  MemoizedSelector,\r\n} from '@ngrx/store';\r\nimport { Cart } from '../../../model/cart.model';\r\nimport { OrderEntry } from '../../../model/order.model';\r\nimport { entityValueSelector } from '../../../state/utils/entity-loader/entity-loader.selectors';\r\nimport { EntityProcessesLoaderState } from '../../../state/utils/entity-processes-loader/entity-processes-loader-state';\r\nimport {\r\n  entityHasPendingProcessesSelector,\r\n  entityIsStableSelector,\r\n  entityProcessesLoaderStateSelector,\r\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.selectors';\r\nimport { ProcessesLoaderState } from '../../../state/utils/processes-loader/processes-loader-state';\r\nimport {\r\n  MultiCartState,\r\n  MULTI_CART_FEATURE,\r\n  StateWithMultiCart,\r\n} from '../multi-cart-state';\r\n\r\nexport const getMultiCartState: MemoizedSelector<\r\n  StateWithMultiCart,\r\n  MultiCartState\r\n> = createFeatureSelector<MultiCartState>(MULTI_CART_FEATURE);\r\n\r\nexport const getMultiCartEntities: MemoizedSelector<\r\n  StateWithMultiCart,\r\n  EntityProcessesLoaderState<Cart>\r\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.carts);\r\n\r\nexport const getCartEntitySelectorFactory = (\r\n  cartId: string\r\n): MemoizedSelector<StateWithMultiCart, ProcessesLoaderState<Cart>> => {\r\n  return createSelector(\r\n    getMultiCartEntities,\r\n    (state: EntityProcessesLoaderState<Cart>) =>\r\n      entityProcessesLoaderStateSelector(state, cartId)\r\n  );\r\n};\r\n\r\nexport const getCartSelectorFactory = (\r\n  cartId: string\r\n): MemoizedSelector<StateWithMultiCart, Cart> => {\r\n  return createSelector(\r\n    getMultiCartEntities,\r\n    (state: EntityProcessesLoaderState<Cart>) =>\r\n      entityValueSelector(state, cartId)\r\n  );\r\n};\r\n\r\nexport const getCartIsStableSelectorFactory = (\r\n  cartId: string\r\n): MemoizedSelector<StateWithMultiCart, boolean> => {\r\n  return createSelector(\r\n    getMultiCartEntities,\r\n    (state: EntityProcessesLoaderState<Cart>) =>\r\n      entityIsStableSelector(state, cartId)\r\n  );\r\n};\r\n\r\nexport const getCartHasPendingProcessesSelectorFactory = (\r\n  cartId: string\r\n): MemoizedSelector<StateWithMultiCart, boolean> => {\r\n  return createSelector(\r\n    getMultiCartEntities,\r\n    (state: EntityProcessesLoaderState<Cart>) =>\r\n      entityHasPendingProcessesSelector(state, cartId)\r\n  );\r\n};\r\n\r\nexport const getCartEntriesSelectorFactory = (\r\n  cartId: string\r\n): MemoizedSelector<StateWithMultiCart, OrderEntry[]> => {\r\n  return createSelector(getCartSelectorFactory(cartId), (state: Cart) => {\r\n    return state && state.entries ? state.entries : [];\r\n  });\r\n};\r\n\r\nexport const getCartEntrySelectorFactory = (\r\n  cartId: string,\r\n  productCode: string\r\n): MemoizedSelector<StateWithMultiCart, OrderEntry> => {\r\n  return createSelector(\r\n    getCartEntriesSelectorFactory(cartId),\r\n    (state: OrderEntry[]) => {\r\n      return state\r\n        ? state.find((entry) => entry.product.code === productCode)\r\n        : undefined;\r\n    }\r\n  );\r\n};\r\n\r\nexport const getActiveCartId: MemoizedSelector<\r\n  StateWithMultiCart,\r\n  string\r\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.active);\r\n\r\nexport const getWishListId: MemoizedSelector<\r\n  StateWithMultiCart,\r\n  string\r\n> = createSelector(\r\n  getMultiCartState,\r\n  (state: MultiCartState) => state.wishList\r\n);\r\n","import { OrderEntry } from '../../../model/order.model';\r\nimport {\r\n  EntityProcessesDecrementAction,\r\n  EntityProcessesIncrementAction,\r\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\r\nimport { MULTI_CART_DATA } from '../multi-cart-state';\r\n\r\nexport const CART_ADD_ENTRY = '[Cart-entry] Add Entry';\r\nexport const CART_ADD_ENTRY_SUCCESS = '[Cart-entry] Add Entry Success';\r\nexport const CART_ADD_ENTRY_FAIL = '[Cart-entry] Add Entry Fail';\r\nexport const CART_REMOVE_ENTRY = '[Cart-entry] Remove Entry';\r\nexport const CART_REMOVE_ENTRY_SUCCESS = '[Cart-entry] Remove Entry Success';\r\nexport const CART_REMOVE_ENTRY_FAIL = '[Cart-entry] Remove Entry Fail';\r\n\r\nexport const CART_UPDATE_ENTRY = '[Cart-entry] Update Entry';\r\nexport const CART_UPDATE_ENTRY_SUCCESS = '[Cart-entry] Update Entry Success';\r\nexport const CART_UPDATE_ENTRY_FAIL = '[Cart-entry] Update Entry Fail';\r\n\r\nexport class CartAddEntry extends EntityProcessesIncrementAction {\r\n  readonly type = CART_ADD_ENTRY;\r\n  constructor(\r\n    public payload: {\r\n      cartId: string;\r\n      userId: string;\r\n      productCode: string;\r\n      quantity: number;\r\n    }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class CartAddEntrySuccess extends EntityProcessesDecrementAction {\r\n  readonly type = CART_ADD_ENTRY_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      cartId: string;\r\n      productCode: string;\r\n      quantity: number;\r\n      deliveryModeChanged: boolean;\r\n      entry: OrderEntry;\r\n      quantityAdded: number;\r\n      statusCode: string;\r\n      statusMessage: string;\r\n    }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class CartAddEntryFail extends EntityProcessesDecrementAction {\r\n  readonly type = CART_ADD_ENTRY_FAIL;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      cartId: string;\r\n      productCode: string;\r\n      quantity: number;\r\n      error: any;\r\n    }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class CartRemoveEntry extends EntityProcessesIncrementAction {\r\n  readonly type = CART_REMOVE_ENTRY;\r\n  constructor(\r\n    public payload: { cartId: string; userId: string; entryNumber: string }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class CartRemoveEntrySuccess extends EntityProcessesDecrementAction {\r\n  readonly type = CART_REMOVE_ENTRY_SUCCESS;\r\n  constructor(\r\n    public payload: { userId: string; cartId: string; entryNumber: string }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class CartRemoveEntryFail extends EntityProcessesDecrementAction {\r\n  readonly type = CART_REMOVE_ENTRY_FAIL;\r\n  constructor(\r\n    public payload: {\r\n      error: any;\r\n      cartId: string;\r\n      userId: string;\r\n      entryNumber: string;\r\n    }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class CartUpdateEntry extends EntityProcessesIncrementAction {\r\n  readonly type = CART_UPDATE_ENTRY;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      cartId: string;\r\n      entryNumber: string;\r\n      quantity: number;\r\n    }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class CartUpdateEntrySuccess extends EntityProcessesDecrementAction {\r\n  readonly type = CART_UPDATE_ENTRY_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      cartId: string;\r\n      entryNumber: string;\r\n      quantity: number;\r\n    }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class CartUpdateEntryFail extends EntityProcessesDecrementAction {\r\n  readonly type = CART_UPDATE_ENTRY_FAIL;\r\n  constructor(\r\n    public payload: {\r\n      error: any;\r\n      userId: string;\r\n      cartId: string;\r\n      entryNumber: string;\r\n      quantity: number;\r\n    }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport type CartEntryAction =\r\n  | CartAddEntry\r\n  | CartAddEntrySuccess\r\n  | CartAddEntryFail\r\n  | CartRemoveEntry\r\n  | CartRemoveEntrySuccess\r\n  | CartRemoveEntryFail\r\n  | CartUpdateEntry\r\n  | CartUpdateEntrySuccess\r\n  | CartUpdateEntryFail;\r\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\r\nimport {\r\n  EntityFailAction,\r\n  EntityLoadAction,\r\n  EntityLoaderResetAction,\r\n  EntitySuccessAction,\r\n} from '../../../state/utils/entity-loader/entity-loader.action';\r\nimport {\r\n  EntityProcessesDecrementAction,\r\n  EntityProcessesIncrementAction,\r\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\r\nimport { ADD_VOUCHER_PROCESS_ID, MULTI_CART_DATA } from '../multi-cart-state';\r\n\r\nexport const CART_ADD_VOUCHER = '[Cart-voucher] Add Cart Vouchers';\r\nexport const CART_ADD_VOUCHER_FAIL = '[Cart-voucher] Add Cart Voucher Fail';\r\nexport const CART_ADD_VOUCHER_SUCCESS =\r\n  '[Cart-voucher] Add Cart Voucher Success';\r\nexport const CART_RESET_ADD_VOUCHER = '[Cart-voucher] Reset Add Cart Voucher';\r\n\r\nexport const CART_REMOVE_VOUCHER = '[Cart-voucher] Remove Cart Voucher';\r\nexport const CART_REMOVE_VOUCHER_FAIL =\r\n  '[Cart-voucher] Remove Cart Voucher Fail';\r\nexport const CART_REMOVE_VOUCHER_SUCCESS =\r\n  '[Cart-voucher] Remove Cart Voucher Success';\r\n\r\n// Adding cart voucher actions\r\nexport class CartAddVoucher extends EntityLoadAction {\r\n  readonly type = CART_ADD_VOUCHER;\r\n  constructor(\r\n    public payload: { userId: string; cartId: string; voucherId: string }\r\n  ) {\r\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class CartAddVoucherFail extends EntityFailAction {\r\n  readonly type = CART_ADD_VOUCHER_FAIL;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      cartId: string;\r\n      voucherId: string;\r\n      error: any;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID, payload.error);\r\n  }\r\n}\r\n\r\nexport class CartAddVoucherSuccess extends EntitySuccessAction {\r\n  readonly type = CART_ADD_VOUCHER_SUCCESS;\r\n  constructor(\r\n    public payload: { userId: string; cartId: string; voucherId: string }\r\n  ) {\r\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\r\n  }\r\n}\r\n\r\n// TODO(#7241): Remove when switching to event system for vouchers\r\n/**\r\n * Resets add voucher process\r\n *\r\n * @deprecated since 2.0\r\n */\r\nexport class CartResetAddVoucher extends EntityLoaderResetAction {\r\n  readonly type = CART_RESET_ADD_VOUCHER;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\r\n  }\r\n}\r\n\r\n// Deleting cart voucher\r\nexport class CartRemoveVoucher extends EntityProcessesIncrementAction {\r\n  readonly type = CART_REMOVE_VOUCHER;\r\n  constructor(\r\n    public payload: { userId: string; cartId: string; voucherId: string }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class CartRemoveVoucherFail extends EntityProcessesDecrementAction {\r\n  readonly type = CART_REMOVE_VOUCHER_FAIL;\r\n  constructor(\r\n    public payload: {\r\n      error: any;\r\n      cartId: string;\r\n      userId: string;\r\n      voucherId: string;\r\n    }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class CartRemoveVoucherSuccess extends EntityProcessesDecrementAction {\r\n  readonly type = CART_REMOVE_VOUCHER_SUCCESS;\r\n  constructor(\r\n    public payload: { userId: string; cartId: string; voucherId: string }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\n// action types\r\nexport type CartVoucherAction =\r\n  | CartAddVoucher\r\n  | CartAddVoucherFail\r\n  | CartAddVoucherSuccess\r\n  | CartResetAddVoucher\r\n  | CartRemoveVoucher\r\n  | CartRemoveVoucherFail\r\n  | CartRemoveVoucherSuccess;\r\n","import { Action } from '@ngrx/store';\r\nimport { Cart } from '../../../model/cart.model';\r\nimport {\r\n  EntityFailAction,\r\n  EntityLoadAction,\r\n  EntitySuccessAction,\r\n} from '../../../state/utils/entity-loader/entity-loader.action';\r\nimport {\r\n  EntityProcessesDecrementAction,\r\n  EntityProcessesIncrementAction,\r\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\r\nimport { EntityRemoveAction } from '../../../state/utils/entity/entity.action';\r\nimport { ProcessesLoaderResetAction } from '../../../state/utils/processes-loader/processes-loader.action';\r\nimport { MULTI_CART_DATA } from '../multi-cart-state';\r\n\r\nexport const CREATE_CART = '[Cart] Create Cart';\r\nexport const CREATE_CART_FAIL = '[Cart] Create Cart Fail';\r\nexport const CREATE_CART_SUCCESS = '[Cart] Create Cart Success';\r\n\r\nexport const LOAD_CART = '[Cart] Load Cart';\r\nexport const LOAD_CART_FAIL = '[Cart] Load Cart Fail';\r\nexport const LOAD_CART_SUCCESS = '[Cart] Load Cart Success';\r\n\r\nexport const ADD_EMAIL_TO_CART = '[Cart] Add Email to Cart';\r\nexport const ADD_EMAIL_TO_CART_FAIL = '[Cart] Add Email to Cart Fail';\r\nexport const ADD_EMAIL_TO_CART_SUCCESS = '[Cart] Add Email to Cart Success';\r\n\r\nexport const MERGE_CART = '[Cart] Merge Cart';\r\nexport const MERGE_CART_SUCCESS = '[Cart] Merge Cart Success';\r\n\r\nexport const RESET_CART_DETAILS = '[Cart] Reset Cart Details';\r\n\r\nexport const REMOVE_CART = '[Cart] Remove Cart';\r\n\r\nexport const DELETE_CART = '[Cart] Delete Cart';\r\nexport const DELETE_CART_SUCCESS = '[Cart] Delete Cart Success';\r\nexport const DELETE_CART_FAIL = '[Cart] Delete Cart Fail';\r\n\r\ninterface CreateCartPayload {\r\n  userId: string;\r\n  /** Used as a unique key in ngrx carts store (we don't know cartId at that time) */\r\n  tempCartId: string;\r\n  extraData?: {\r\n    active?: boolean;\r\n  };\r\n  /** Anonymous cart which should be merged to new cart */\r\n  oldCartId?: string;\r\n  /** Cart to which should we merge (not passing this will create new cart) */\r\n  toMergeCartGuid?: string;\r\n}\r\n\r\nexport class CreateCart extends EntityLoadAction {\r\n  readonly type = CREATE_CART;\r\n  constructor(public payload: CreateCartPayload) {\r\n    super(MULTI_CART_DATA, payload.tempCartId);\r\n  }\r\n}\r\n\r\ninterface CreateCartFailPayload extends CreateCartPayload {\r\n  error: any;\r\n}\r\n\r\nexport class CreateCartFail extends EntityFailAction {\r\n  readonly type = CREATE_CART_FAIL;\r\n  constructor(public payload: CreateCartFailPayload) {\r\n    super(MULTI_CART_DATA, payload.tempCartId);\r\n  }\r\n}\r\n\r\ninterface CreateCartSuccessPayload extends CreateCartPayload {\r\n  cart: Cart;\r\n  cartId: string;\r\n}\r\n\r\nexport class CreateCartSuccess extends EntitySuccessAction {\r\n  readonly type = CREATE_CART_SUCCESS;\r\n  constructor(public payload: CreateCartSuccessPayload) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class AddEmailToCart extends EntityProcessesIncrementAction {\r\n  readonly type = ADD_EMAIL_TO_CART;\r\n  constructor(\r\n    public payload: { userId: string; cartId: string; email: string }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class AddEmailToCartFail extends EntityProcessesDecrementAction {\r\n  readonly type = ADD_EMAIL_TO_CART_FAIL;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      cartId: string;\r\n      error: any;\r\n      email: string;\r\n    }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class AddEmailToCartSuccess extends EntityProcessesDecrementAction {\r\n  readonly type = ADD_EMAIL_TO_CART_SUCCESS;\r\n  constructor(\r\n    public payload: { userId: string; cartId: string; email: string }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\ninterface LoadCartPayload {\r\n  userId: string;\r\n  cartId: string;\r\n  extraData?: {\r\n    active?: boolean;\r\n  };\r\n}\r\n\r\nexport class LoadCart extends EntityLoadAction {\r\n  readonly type = LOAD_CART;\r\n  constructor(public payload: LoadCartPayload) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\ninterface LoadCartFailPayload extends LoadCartPayload {\r\n  error: any;\r\n}\r\n\r\nexport class LoadCartFail extends EntityFailAction {\r\n  readonly type = LOAD_CART_FAIL;\r\n  constructor(public payload: LoadCartFailPayload) {\r\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\r\n  }\r\n}\r\n\r\ninterface LoadCartSuccessPayload extends LoadCartPayload {\r\n  cart: Cart;\r\n}\r\n\r\nexport class LoadCartSuccess extends EntitySuccessAction {\r\n  readonly type = LOAD_CART_SUCCESS;\r\n  constructor(public payload: LoadCartSuccessPayload) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\ninterface MergeCartPayload {\r\n  cartId: string;\r\n  userId: string;\r\n  extraData?: { active?: boolean };\r\n  /**\r\n   * MergeCart actions triggers CreateCart which requires this parameter, so that's why it is required.\r\n   */\r\n  tempCartId: string;\r\n}\r\n\r\nexport class MergeCart implements Action {\r\n  readonly type = MERGE_CART;\r\n  constructor(public payload: MergeCartPayload) {}\r\n}\r\n\r\ninterface MergeCartSuccessPayload extends MergeCartPayload {\r\n  /**\r\n   * Previous cart id which was merged with new/user cart.\r\n   * Needed to know which obsolete entity should be removed.\r\n   */\r\n  oldCartId: string;\r\n}\r\n\r\nexport class MergeCartSuccess extends EntityRemoveAction {\r\n  readonly type = MERGE_CART_SUCCESS;\r\n  constructor(public payload: MergeCartSuccessPayload) {\r\n    super(MULTI_CART_DATA, payload.oldCartId);\r\n  }\r\n}\r\n\r\n/**\r\n * On site context change we want to keep current list of entities, but we want to clear the value and flags.\r\n * With ProcessesLoaderResetAction we run it on every entity of this type.\r\n */\r\nexport class ResetCartDetails extends ProcessesLoaderResetAction {\r\n  readonly type = RESET_CART_DETAILS;\r\n  constructor() {\r\n    super(MULTI_CART_DATA);\r\n  }\r\n}\r\n\r\n/**\r\n * Used for cleaning cart in local state, when we get information that it no longer exists in the backend.\r\n * For removing particular cart in both places use DeleteCart actions.\r\n */\r\nexport class RemoveCart extends EntityRemoveAction {\r\n  readonly type = REMOVE_CART;\r\n  constructor(public payload: { cartId: string }) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class DeleteCart implements Action {\r\n  readonly type = DELETE_CART;\r\n  constructor(public payload: { userId: string; cartId: string }) {}\r\n}\r\n\r\nexport class DeleteCartSuccess extends EntityRemoveAction {\r\n  readonly type = DELETE_CART_SUCCESS;\r\n  constructor(public payload: { userId: string; cartId: string }) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class DeleteCartFail implements Action {\r\n  readonly type = DELETE_CART_FAIL;\r\n  constructor(public payload: { userId: string; cartId: string; error: any }) {}\r\n}\r\n\r\nexport type CartAction =\r\n  | CreateCart\r\n  | CreateCartFail\r\n  | CreateCartSuccess\r\n  | LoadCart\r\n  | LoadCartFail\r\n  | LoadCartSuccess\r\n  | MergeCart\r\n  | MergeCartSuccess\r\n  | ResetCartDetails\r\n  | AddEmailToCart\r\n  | AddEmailToCartFail\r\n  | AddEmailToCartSuccess\r\n  | DeleteCart\r\n  | DeleteCartSuccess\r\n  | DeleteCartFail\r\n  | RemoveCart;\r\n","import { Action } from '@ngrx/store';\r\nimport { Cart } from '../../../model/cart.model';\r\nimport { EntitySuccessAction } from '../../../state/utils/entity-loader/entity-loader.action';\r\nimport {\r\n  EntityProcessesDecrementAction,\r\n  EntityProcessesIncrementAction,\r\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\r\nimport { EntityRemoveAllAction } from '../../../state/utils/entity/entity.action';\r\nimport { MULTI_CART_DATA } from '../multi-cart-state';\r\n\r\nexport const SET_TEMP_CART = '[Cart] Set Temp Cart';\r\n\r\nexport const CART_PROCESSES_INCREMENT = '[Cart] Cart Processes Increment';\r\nexport const CART_PROCESSES_DECREMENT = '[Cart] Cart Processes Decrement';\r\n\r\nexport const SET_ACTIVE_CART_ID = '[Cart] Set Active Cart Id';\r\n\r\nexport const CLEAR_CART_STATE = '[Cart] Clear Cart State';\r\n\r\n/**\r\n * To keep track of cart creation process we use cart with `temp-${uuid}` id.\r\n * After creating cart we switch to entity with `code` or `guid`.\r\n * We need `temp-${uuid}` cart entities for loading/error state.\r\n */\r\nexport class SetTempCart extends EntitySuccessAction {\r\n  readonly type = SET_TEMP_CART;\r\n  constructor(public payload: { cart: Cart; tempCartId: string }) {\r\n    super(MULTI_CART_DATA, payload.tempCartId, payload.cart);\r\n  }\r\n}\r\n\r\n// TODO(#7241): Remove when there won't be any usage\r\n/**\r\n * Increases process counter on cart entities\r\n * All actions that cause computations on cart should extend EntityProcessesIncrementAction instead of dispatching this action.\r\n * @deprecated since 2.0\r\n */\r\nexport class CartProcessesIncrement extends EntityProcessesIncrementAction {\r\n  readonly type = CART_PROCESSES_INCREMENT;\r\n  constructor(public payload: string) {\r\n    super(MULTI_CART_DATA, payload);\r\n  }\r\n}\r\n\r\n// TODO(#7241): Remove when there won't be any usage\r\n/**\r\n * Decrement process counter on cart entities\r\n * All actions that cause computations on cart should extend EntityProcessesDecrementAction instead of dispatching this action.\r\n * @deprecated since 2.0\r\n */\r\nexport class CartProcessesDecrement extends EntityProcessesDecrementAction {\r\n  readonly type = CART_PROCESSES_DECREMENT;\r\n  constructor(public payload: string) {\r\n    super(MULTI_CART_DATA, payload);\r\n  }\r\n}\r\n\r\n/**\r\n * Only sets active cart property with id of active cart. Then services take care of loading that cart.\r\n */\r\nexport class SetActiveCartId implements Action {\r\n  readonly type = SET_ACTIVE_CART_ID;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\n/**\r\n * Clear whole cart store state: all entities + reset rest of the cart state.\r\n */\r\nexport class ClearCartState extends EntityRemoveAllAction {\r\n  readonly type = CLEAR_CART_STATE;\r\n  constructor() {\r\n    super(MULTI_CART_DATA);\r\n  }\r\n}\r\n\r\nexport type MultiCartActions =\r\n  | SetTempCart\r\n  | CartProcessesIncrement\r\n  | CartProcessesDecrement\r\n  | SetActiveCartId\r\n  | ClearCartState;\r\n","import { Action } from '@ngrx/store';\r\nimport { Cart } from '../../../model/cart.model';\r\nimport {\r\n  EntityFailAction,\r\n  EntityLoadAction,\r\n  EntitySuccessAction,\r\n} from '../../../state/utils/entity-loader/entity-loader.action';\r\nimport { getCartIdByUserId } from '../../utils/utils';\r\nimport { MULTI_CART_DATA } from '../multi-cart-state';\r\n\r\nexport const CREATE_WISH_LIST = '[Wish List] Create Wish List';\r\nexport const CREATE_WISH_LIST_FAIL = '[Wish List] Create Wish List Fail';\r\nexport const CREATE_WISH_LIST_SUCCESS = '[Wish List] Create Wish List Success';\r\n\r\nexport const LOAD_WISH_LIST = '[Wish List] Load Wish List';\r\nexport const LOAD_WISH_LIST_SUCCESS = '[Wish List] Load Wish List Success';\r\nexport const LOAD_WISH_LIST_FAIL = '[Wish List] Load Wish List Fail';\r\n\r\nexport const RESET_WISH_LIST_DETAILS = '[Wish List] Reset Wish List';\r\n\r\nexport class CreateWishList implements Action {\r\n  readonly type = CREATE_WISH_LIST;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      name: string;\r\n      description?: string;\r\n    }\r\n  ) {}\r\n}\r\n\r\nexport class CreateWishListSuccess extends EntitySuccessAction {\r\n  readonly type = CREATE_WISH_LIST_SUCCESS;\r\n  constructor(public payload: { cart: Cart; userId: string }) {\r\n    super(MULTI_CART_DATA, getCartIdByUserId(payload.cart, payload.userId));\r\n  }\r\n}\r\n\r\nexport class CreateWishListFail extends EntityFailAction {\r\n  readonly type = CREATE_WISH_LIST_FAIL;\r\n  constructor(public payload: { cartId: string; error?: any }) {\r\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\r\n  }\r\n}\r\n\r\ninterface LoadWishListPayload {\r\n  userId: string;\r\n  /**\r\n   * Used to compute wishlist cart name and find it in list of all carts.\r\n   */\r\n  customerId: string;\r\n  /**\r\n   * When we try load wishlist for the first time we don't know cart id.\r\n   * Instead we create temporary cart with id equal to wishlist name to keep track of loading/error state.\r\n   */\r\n  tempCartId: string;\r\n}\r\n\r\nexport class LoadWishList extends EntityLoadAction {\r\n  readonly type = LOAD_WISH_LIST;\r\n  constructor(public payload: LoadWishListPayload) {\r\n    super(MULTI_CART_DATA, payload.tempCartId);\r\n  }\r\n}\r\n\r\ninterface LoadWishListSuccessPayload {\r\n  cart: Cart;\r\n  userId: string;\r\n  /**\r\n   * When LoadWishListSuccess action was dispatched as an completion to LoadWishList action\r\n   * we get temporary cartId that was used to keep track of loading state.\r\n   * In case of loading wish list with known cartId this property will be empty.\r\n   */\r\n  tempCartId?: string;\r\n  /**\r\n   * Used to compute wishlist cart name and find it in list of all carts.\r\n   * In case of loading wish list with known cartId this property will be empty.\r\n   */\r\n  customerId?: string;\r\n  /**\r\n   * Wish list cart id. Extracted from cart content (code property).\r\n   */\r\n  cartId: string;\r\n}\r\n\r\nexport class LoadWishListSuccess extends EntitySuccessAction {\r\n  readonly type = LOAD_WISH_LIST_SUCCESS;\r\n  constructor(public payload: LoadWishListSuccessPayload) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\ninterface LoadWishListFailPayload {\r\n  userId: string;\r\n  /**\r\n   * Used to compute wishlist cart name and find it in list of all carts.\r\n   * In case of loading wish list with known cartId this property will be empty.\r\n   */\r\n  customerId?: string;\r\n  /**\r\n   * Cart id used as a store entity key. This could point either to some\r\n   * temporary cart used to track loading/error state or to normal wish list entity.\r\n   */\r\n  cartId: string;\r\n  error: any;\r\n}\r\n\r\nexport class LoadWishListFail extends EntityFailAction {\r\n  readonly type = LOAD_WISH_LIST_FAIL;\r\n  constructor(public payload: LoadWishListFailPayload) {\r\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\r\n  }\r\n}\r\n\r\nexport type WishListActions =\r\n  | CreateWishList\r\n  | CreateWishListSuccess\r\n  | CreateWishListFail\r\n  | LoadWishList\r\n  | LoadWishListSuccess\r\n  | LoadWishListFail;\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { EMPTY, Observable, timer } from 'rxjs';\r\nimport { debounce, distinctUntilChanged } from 'rxjs/operators';\r\nimport { Cart } from '../../model/cart.model';\r\nimport { OrderEntry } from '../../model/order.model';\r\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\r\nimport { CartActions } from '../store/actions/index';\r\nimport { StateWithMultiCart } from '../store/multi-cart-state';\r\nimport { MultiCartSelectors } from '../store/selectors/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MultiCartService {\r\n  constructor(protected store: Store<StateWithMultiCart>) {}\r\n\r\n  /**\r\n   * Returns cart from store as an observable\r\n   *\r\n   * @param cartId\r\n   */\r\n  getCart(cartId: string): Observable<Cart> {\r\n    return this.store.pipe(\r\n      select(MultiCartSelectors.getCartSelectorFactory(cartId))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns cart entity from store (cart with loading, error, success flags) as an observable\r\n   *\r\n   * @param cartId\r\n   */\r\n  getCartEntity(cartId: string): Observable<ProcessesLoaderState<Cart>> {\r\n    return this.store.pipe(\r\n      select(MultiCartSelectors.getCartEntitySelectorFactory(cartId))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns true when there are no operations on that in progress and it is not currently loading\r\n   *\r\n   * @param cartId\r\n   */\r\n  isStable(cartId: string): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(MultiCartSelectors.getCartIsStableSelectorFactory(cartId)),\r\n      // We dispatch a lot of actions just after finishing some process or loading, so we want this flag not to flicker.\r\n      // This flickering should only be avoided when switching from false to true\r\n      // Start of loading should be showed instantly (no debounce)\r\n      // Extra actions are only dispatched after some loading\r\n      debounce((isStable) => (isStable ? timer(0) : EMPTY)),\r\n      distinctUntilChanged()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Simple random temp cart id generator\r\n   */\r\n  private generateTempCartId(): string {\r\n    const pseudoUuid = Math.random().toString(36).substr(2, 9);\r\n    return `temp-${pseudoUuid}`;\r\n  }\r\n\r\n  /**\r\n   * Create or merge cart\r\n   *\r\n   * @param params Object with userId, oldCartId, toMergeCartGuid and extraData\r\n   */\r\n  createCart({\r\n    userId,\r\n    oldCartId,\r\n    toMergeCartGuid,\r\n    extraData,\r\n  }: {\r\n    userId: string;\r\n    oldCartId?: string;\r\n    toMergeCartGuid?: string;\r\n    extraData?: {\r\n      active?: boolean;\r\n    };\r\n  }): Observable<ProcessesLoaderState<Cart>> {\r\n    // to support creating multiple carts at the same time we need to use different entity for every process\r\n    // simple random uuid generator is used here for entity names\r\n    const tempCartId = this.generateTempCartId();\r\n    this.store.dispatch(\r\n      new CartActions.CreateCart({\r\n        extraData,\r\n        userId,\r\n        oldCartId,\r\n        toMergeCartGuid,\r\n        tempCartId,\r\n      })\r\n    );\r\n    return this.getCartEntity(tempCartId);\r\n  }\r\n\r\n  /**\r\n   * Merge provided cart to current user cart\r\n   *\r\n   * @param params Object with userId, cartId and extraData\r\n   */\r\n  mergeToCurrentCart({\r\n    userId,\r\n    cartId,\r\n    extraData,\r\n  }: {\r\n    userId: string;\r\n    cartId: string;\r\n    extraData?: {\r\n      active?: boolean;\r\n    };\r\n  }) {\r\n    const tempCartId = this.generateTempCartId();\r\n    this.store.dispatch(\r\n      new CartActions.MergeCart({\r\n        userId,\r\n        cartId,\r\n        extraData,\r\n        tempCartId,\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Load cart\r\n   *\r\n   * @param params Object with userId, cartId and extraData\r\n   */\r\n  loadCart({\r\n    cartId,\r\n    userId,\r\n    extraData,\r\n  }: {\r\n    cartId: string;\r\n    userId: string;\r\n    extraData?: any;\r\n  }): void {\r\n    this.store.dispatch(\r\n      new CartActions.LoadCart({\r\n        userId,\r\n        cartId,\r\n        extraData,\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get cart entries as an observable\r\n   * @param cartId\r\n   */\r\n  getEntries(cartId: string): Observable<OrderEntry[]> {\r\n    return this.store.pipe(\r\n      select(MultiCartSelectors.getCartEntriesSelectorFactory(cartId))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Add entry to cart\r\n   *\r\n   * @param userId\r\n   * @param cartId\r\n   * @param productCode\r\n   * @param quantity\r\n   */\r\n  addEntry(\r\n    userId: string,\r\n    cartId: string,\r\n    productCode: string,\r\n    quantity: number\r\n  ): void {\r\n    this.store.dispatch(\r\n      new CartActions.CartAddEntry({\r\n        userId,\r\n        cartId,\r\n        productCode,\r\n        quantity,\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Add multiple entries to cart\r\n   *\r\n   * @param userId\r\n   * @param cartId\r\n   * @param products Array with items (productCode and quantity)\r\n   */\r\n  addEntries(\r\n    userId: string,\r\n    cartId: string,\r\n    products: Array<{ productCode: string; quantity: number }>\r\n  ): void {\r\n    products.forEach((product) => {\r\n      this.store.dispatch(\r\n        new CartActions.CartAddEntry({\r\n          userId,\r\n          cartId,\r\n          productCode: product.productCode,\r\n          quantity: product.quantity,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove entry from cart\r\n   *\r\n   * @param userId\r\n   * @param cartId\r\n   * @param entryNumber\r\n   */\r\n  removeEntry(userId: string, cartId: string, entryNumber: number): void {\r\n    this.store.dispatch(\r\n      new CartActions.CartRemoveEntry({\r\n        userId,\r\n        cartId,\r\n        entryNumber: `${entryNumber}`,\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update entry in cart. For quantity = 0 it removes entry\r\n   *\r\n   * @param userId\r\n   * @param cartId\r\n   * @param entryNumber\r\n   * @param quantity\r\n   */\r\n  updateEntry(\r\n    userId: string,\r\n    cartId: string,\r\n    entryNumber: number,\r\n    quantity: number\r\n  ): void {\r\n    if (quantity > 0) {\r\n      this.store.dispatch(\r\n        new CartActions.CartUpdateEntry({\r\n          userId,\r\n          cartId,\r\n          entryNumber: `${entryNumber}`,\r\n          quantity: quantity,\r\n        })\r\n      );\r\n    } else {\r\n      this.removeEntry(userId, cartId, entryNumber);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get specific entry from cart\r\n   *\r\n   * @param cartId\r\n   * @param productCode\r\n   */\r\n  getEntry(cartId: string, productCode: string): Observable<OrderEntry | null> {\r\n    return this.store.pipe(\r\n      select(\r\n        MultiCartSelectors.getCartEntrySelectorFactory(cartId, productCode)\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Assign email to the cart\r\n   *\r\n   * @param cartId\r\n   * @param userId\r\n   * @param email\r\n   */\r\n  assignEmail(cartId: string, userId: string, email: string): void {\r\n    this.store.dispatch(\r\n      new CartActions.AddEmailToCart({\r\n        userId,\r\n        cartId,\r\n        email,\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete cart\r\n   *\r\n   * @param cartId\r\n   * @param userId\r\n   */\r\n  deleteCart(cartId: string, userId: string) {\r\n    this.store.dispatch(\r\n      new CartActions.DeleteCart({\r\n        userId,\r\n        cartId,\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { EMPTY, Observable, timer } from 'rxjs';\r\nimport {\r\n  debounce,\r\n  distinctUntilChanged,\r\n  filter,\r\n  map,\r\n  shareReplay,\r\n  switchMap,\r\n  take,\r\n  tap,\r\n  withLatestFrom,\r\n} from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/index';\r\nimport { Cart } from '../../model/cart.model';\r\nimport { User } from '../../model/misc.model';\r\nimport { OrderEntry } from '../../model/order.model';\r\nimport {\r\n  OCC_CART_ID_CURRENT,\r\n  OCC_USER_ID_ANONYMOUS,\r\n  OCC_USER_ID_GUEST,\r\n} from '../../occ/utils/occ-constants';\r\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\r\nimport { EMAIL_PATTERN } from '../../util/regex-pattern';\r\nimport { StateWithMultiCart } from '../store/multi-cart-state';\r\nimport { MultiCartSelectors } from '../store/selectors/index';\r\nimport { getCartIdByUserId, isTempCartId } from '../utils/utils';\r\nimport { MultiCartService } from './multi-cart.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ActiveCartService {\r\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\r\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\r\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\r\n  private activeCart$: Observable<Cart>;\r\n\r\n  private userId = OCC_USER_ID_ANONYMOUS;\r\n  private cartId;\r\n  private cartUser: User;\r\n\r\n  private activeCartId$ = this.store.pipe(\r\n    select(MultiCartSelectors.getActiveCartId),\r\n    map((cartId) => {\r\n      if (!cartId) {\r\n        return OCC_CART_ID_CURRENT;\r\n      }\r\n      return cartId;\r\n    })\r\n  );\r\n  private cartSelector$ = this.activeCartId$.pipe(\r\n    switchMap((cartId) => this.multiCartService.getCartEntity(cartId))\r\n  );\r\n\r\n  constructor(\r\n    protected store: Store<StateWithMultiCart>,\r\n    protected authService: AuthService,\r\n    protected multiCartService: MultiCartService\r\n  ) {\r\n    this.authService.getOccUserId().subscribe((userId) => {\r\n      this.userId = userId;\r\n      if (this.userId !== OCC_USER_ID_ANONYMOUS) {\r\n        if (this.isJustLoggedIn(userId)) {\r\n          this.loadOrMerge(this.cartId);\r\n        }\r\n      }\r\n      this.previousUserId = userId;\r\n    });\r\n\r\n    this.activeCartId$.subscribe((cartId) => {\r\n      this.cartId = cartId;\r\n    });\r\n\r\n    this.initActiveCart();\r\n  }\r\n\r\n  private initActiveCart() {\r\n    this.activeCart$ = this.cartSelector$.pipe(\r\n      withLatestFrom(this.activeCartId$),\r\n      map(([cartEntity, activeCartId]: [ProcessesLoaderState<Cart>, string]): {\r\n        cart: Cart;\r\n        cartId: string;\r\n        isStable: boolean;\r\n        loaded: boolean;\r\n      } => {\r\n        return {\r\n          cart: cartEntity.value,\r\n          cartId: activeCartId,\r\n          isStable: !cartEntity.loading && cartEntity.processesCount === 0,\r\n          loaded:\r\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\r\n        };\r\n      }),\r\n      // we want to emit empty carts even if those are not stable\r\n      // on merge cart action we want to switch to empty cart so no one would use old cartId which can be already obsolete\r\n      // so on merge action the resulting stream looks like this: old_cart -> {} -> new_cart\r\n      filter(({ isStable, cart }) => isStable || this.isEmpty(cart)),\r\n      tap(({ cart, cartId, loaded, isStable }) => {\r\n        if (\r\n          isStable &&\r\n          this.isEmpty(cart) &&\r\n          !loaded &&\r\n          !isTempCartId(cartId)\r\n        ) {\r\n          this.load(cartId);\r\n        }\r\n      }),\r\n      map(({ cart }) => (cart ? cart : {})),\r\n      tap((cart) => {\r\n        if (cart) {\r\n          this.cartUser = cart.user;\r\n        }\r\n      }),\r\n      distinctUntilChanged(),\r\n      shareReplay({ bufferSize: 1, refCount: true })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns active cart\r\n   */\r\n  getActive(): Observable<Cart> {\r\n    return this.activeCart$;\r\n  }\r\n\r\n  /**\r\n   * Returns active cart id\r\n   */\r\n  getActiveCartId(): Observable<string> {\r\n    return this.activeCart$.pipe(\r\n      map((cart) => getCartIdByUserId(cart, this.userId)),\r\n      distinctUntilChanged()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns cart entries\r\n   */\r\n  getEntries(): Observable<OrderEntry[]> {\r\n    return this.activeCartId$.pipe(\r\n      switchMap((cartId) => this.multiCartService.getEntries(cartId)),\r\n      distinctUntilChanged()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns cart loading state\r\n   */\r\n  getLoading(): Observable<boolean> {\r\n    return this.cartSelector$.pipe(\r\n      map((cartEntity) => cartEntity.loading),\r\n      distinctUntilChanged()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns true when cart is stable (not loading and not pending processes on cart)\r\n   */\r\n  isStable(): Observable<boolean> {\r\n    // Debounce is used here, to avoid flickering when we switch between different cart entities.\r\n    // For example during `addEntry` method. We might try to load current cart, so `current cart will be then active id.\r\n    // After load fails we might create new cart so we switch to `temp-${uuid}` cart entity used when creating cart.\r\n    // At the end we finally switch to cart `code` for cart id. Between those switches cart `isStable` function should not flicker.\r\n    return this.activeCartId$.pipe(\r\n      switchMap((cartId) => this.multiCartService.isStable(cartId)),\r\n      debounce((state) => (state ? timer(0) : EMPTY)),\r\n      distinctUntilChanged()\r\n    );\r\n  }\r\n\r\n  private loadOrMerge(cartId: string): void {\r\n    // for login user, whenever there's an existing cart, we will load the user\r\n    // current cart and merge it into the existing cart\r\n    if (!cartId || cartId === OCC_CART_ID_CURRENT) {\r\n      this.multiCartService.loadCart({\r\n        userId: this.userId,\r\n        cartId: OCC_CART_ID_CURRENT,\r\n        extraData: {\r\n          active: true,\r\n        },\r\n      });\r\n    } else if (this.isGuestCart()) {\r\n      this.guestCartMerge(cartId);\r\n    } else {\r\n      this.multiCartService.mergeToCurrentCart({\r\n        userId: this.userId,\r\n        cartId,\r\n        extraData: {\r\n          active: true,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  private load(cartId: string): void {\r\n    if (this.userId !== OCC_USER_ID_ANONYMOUS) {\r\n      this.multiCartService.loadCart({\r\n        userId: this.userId,\r\n        cartId: cartId ? cartId : OCC_CART_ID_CURRENT,\r\n        extraData: {\r\n          active: true,\r\n        },\r\n      });\r\n    } else if (cartId && cartId !== OCC_CART_ID_CURRENT) {\r\n      this.multiCartService.loadCart({\r\n        userId: this.userId,\r\n        cartId: cartId,\r\n        extraData: {\r\n          active: true,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  private addEntriesGuestMerge(cartEntries: OrderEntry[]) {\r\n    const entriesToAdd = cartEntries.map((entry) => ({\r\n      productCode: entry.product.code,\r\n      quantity: entry.quantity,\r\n    }));\r\n    this.requireLoadedCartForGuestMerge().subscribe((cartState) => {\r\n      this.multiCartService.addEntries(\r\n        this.userId,\r\n        getCartIdByUserId(cartState.value, this.userId),\r\n        entriesToAdd\r\n      );\r\n    });\r\n  }\r\n\r\n  private requireLoadedCartForGuestMerge() {\r\n    return this.requireLoadedCart(\r\n      this.cartSelector$.pipe(filter(() => !this.isGuestCart()))\r\n    );\r\n  }\r\n\r\n  private isCartCreating(cartState) {\r\n    // cart creating is always represented with loading flags\r\n    // when all loading flags are false it means that we restored wrong cart id\r\n    // could happen on context change or reload right in the middle on cart create call\r\n    return (\r\n      isTempCartId(this.cartId) &&\r\n      (cartState.loading || cartState.success || cartState.error)\r\n    );\r\n  }\r\n\r\n  private requireLoadedCart(\r\n    customCartSelector$?: Observable<ProcessesLoaderState<Cart>>\r\n  ): Observable<ProcessesLoaderState<Cart>> {\r\n    // For guest cart merge we want to filter guest cart in the whole stream\r\n    // We have to wait with load/create/addEntry after guest cart will be deleted.\r\n    // That's why you can provide custom selector with this filter applied.\r\n    const cartSelector$ = customCartSelector$\r\n      ? customCartSelector$\r\n      : this.cartSelector$;\r\n\r\n    return cartSelector$.pipe(\r\n      filter((cartState) => !cartState.loading),\r\n      // Avoid load/create call when there are new cart creating at the moment\r\n      filter((cartState) => !this.isCartCreating(cartState)),\r\n      take(1),\r\n      switchMap((cartState) => {\r\n        // Try to load the cart, because it might have been created on another device between our login and add entry call\r\n        if (\r\n          this.isEmpty(cartState.value) &&\r\n          this.userId !== OCC_USER_ID_ANONYMOUS\r\n        ) {\r\n          this.load(undefined);\r\n        }\r\n        return cartSelector$;\r\n      }),\r\n      filter((cartState) => !cartState.loading),\r\n      // create cart can happen to anonymous user if it is not empty or to any other user if it is loaded and empty\r\n      filter(\r\n        (cartState) =>\r\n          this.userId === OCC_USER_ID_ANONYMOUS ||\r\n          cartState.success ||\r\n          cartState.error\r\n      ),\r\n      take(1),\r\n      switchMap((cartState) => {\r\n        if (this.isEmpty(cartState.value)) {\r\n          this.multiCartService.createCart({\r\n            userId: this.userId,\r\n            extraData: {\r\n              active: true,\r\n            },\r\n          });\r\n        }\r\n        return cartSelector$;\r\n      }),\r\n      filter((cartState) => !cartState.loading),\r\n      filter((cartState) => cartState.success || cartState.error),\r\n      // wait for active cart id to point to code/guid to avoid some work on temp cart entity\r\n      filter((cartState) => !this.isCartCreating(cartState)),\r\n      filter((cartState) => !this.isEmpty(cartState.value)),\r\n      take(1)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Add entry to active cart\r\n   *\r\n   * @param productCode\r\n   * @param quantity\r\n   */\r\n  addEntry(productCode: string, quantity: number): void {\r\n    this.requireLoadedCart().subscribe((cartState) => {\r\n      this.multiCartService.addEntry(\r\n        this.userId,\r\n        getCartIdByUserId(cartState.value, this.userId),\r\n        productCode,\r\n        quantity\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove entry\r\n   *\r\n   * @param entry\r\n   */\r\n  removeEntry(entry: OrderEntry): void {\r\n    this.multiCartService.removeEntry(\r\n      this.userId,\r\n      this.cartId,\r\n      entry.entryNumber\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update entry\r\n   *\r\n   * @param entryNumber\r\n   * @param quantity\r\n   */\r\n  updateEntry(entryNumber: number, quantity: number): void {\r\n    this.multiCartService.updateEntry(\r\n      this.userId,\r\n      this.cartId,\r\n      entryNumber,\r\n      quantity\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns cart entry\r\n   *\r\n   * @param productCode\r\n   */\r\n  getEntry(productCode: string): Observable<OrderEntry> {\r\n    return this.activeCartId$.pipe(\r\n      switchMap((cartId) =>\r\n        this.multiCartService.getEntry(cartId, productCode)\r\n      ),\r\n      distinctUntilChanged()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Assign email to cart\r\n   *\r\n   * @param email\r\n   */\r\n  addEmail(email: string): void {\r\n    this.multiCartService.assignEmail(this.cartId, this.userId, email);\r\n  }\r\n\r\n  /**\r\n   * Get assigned user to cart\r\n   */\r\n  getAssignedUser(): Observable<User> {\r\n    return this.getActive().pipe(map((cart) => cart.user));\r\n  }\r\n\r\n  /**\r\n   * Returns true for guest cart\r\n   */\r\n  isGuestCart(): boolean {\r\n    return (\r\n      this.cartUser &&\r\n      (this.cartUser.name === OCC_USER_ID_GUEST ||\r\n        this.isEmail(this.cartUser.uid.split('|').slice(1).join('|')))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Add multiple entries to a cart\r\n   *\r\n   * @param cartEntries : list of entries to add (OrderEntry[])\r\n   */\r\n  addEntries(cartEntries: OrderEntry[]): void {\r\n    cartEntries.forEach((entry) => {\r\n      this.addEntry(entry.product.code, entry.quantity);\r\n    });\r\n  }\r\n\r\n  private isEmail(str: string): boolean {\r\n    if (str) {\r\n      return str.match(EMAIL_PATTERN) ? true : false;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // TODO: Remove once backend is updated\r\n  /**\r\n   * Temporary method to merge guest cart with user cart because of backend limitation\r\n   * This is for an edge case\r\n   */\r\n  private guestCartMerge(cartId: string): void {\r\n    let cartEntries: OrderEntry[];\r\n    this.getEntries()\r\n      .pipe(take(1))\r\n      .subscribe((entries) => {\r\n        cartEntries = entries;\r\n      });\r\n\r\n    this.multiCartService.deleteCart(cartId, OCC_USER_ID_ANONYMOUS);\r\n\r\n    this.addEntriesGuestMerge(cartEntries);\r\n  }\r\n\r\n  private isEmpty(cart: Cart): boolean {\r\n    return (\r\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\r\n    );\r\n  }\r\n\r\n  private isJustLoggedIn(userId: string): boolean {\r\n    return (\r\n      this.previousUserId !== userId && // *just* logged in\r\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\r\n    );\r\n  }\r\n}\r\n","import { Observable, OperatorFunction } from 'rxjs';\r\nimport { startWith, switchMapTo } from 'rxjs/operators';\r\n\r\n/**\r\n *\r\n * Withdraw from the source observable when notifier emits a value\r\n *\r\n * Withdraw will result in resubscribing to the source observable\r\n * Operator is useful to kill ongoing emission transformation on notifier emission\r\n *\r\n * @param notifier\r\n */\r\nexport function withdrawOn<T>(\r\n  notifier: Observable<any>\r\n): OperatorFunction<T, T> {\r\n  return (source: Observable<T>) =>\r\n    notifier.pipe(startWith(undefined), switchMapTo(source));\r\n}\r\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CartEntryAdapter } from './cart-entry.adapter';\nimport { CartModification } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartEntryConnector {\n  constructor(protected adapter: CartEntryAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification> {\n    return this.adapter.add(userId, cartId, productCode, quantity);\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    return this.adapter.update(userId, cartId, entryNumber, qty, pickupStore);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    return this.adapter.remove(userId, cartId, entryNumber);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { from, Observable } from 'rxjs';\r\nimport { catchError, concatMap, map } from 'rxjs/operators';\r\nimport { CartModification } from '../../../model/cart.model';\r\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { withdrawOn } from '../../../util/withdraw-on';\r\nimport { CartEntryConnector } from '../../connectors/entry/cart-entry.connector';\r\nimport { CartActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class CartEntryEffects {\r\n  private contextChange$ = this.actions$.pipe(\r\n    ofType(\r\n      SiteContextActions.CURRENCY_CHANGE,\r\n      SiteContextActions.LANGUAGE_CHANGE\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  addEntry$: Observable<\r\n    | CartActions.CartAddEntrySuccess\r\n    | CartActions.CartAddEntryFail\r\n    | CartActions.LoadCart\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.CART_ADD_ENTRY),\r\n    map((action: CartActions.CartAddEntry) => action.payload),\r\n    concatMap((payload) => {\r\n      return this.cartEntryConnector\r\n        .add(\r\n          payload.userId,\r\n          payload.cartId,\r\n          payload.productCode,\r\n          payload.quantity\r\n        )\r\n        .pipe(\r\n          map(\r\n            (cartModification: CartModification) =>\r\n              new CartActions.CartAddEntrySuccess({\r\n                ...payload,\r\n                ...(cartModification as Required<CartModification>),\r\n              })\r\n          ),\r\n          catchError((error) =>\r\n            from([\r\n              new CartActions.CartAddEntryFail({\r\n                ...payload,\r\n                error: makeErrorSerializable(error),\r\n              }),\r\n              new CartActions.LoadCart({\r\n                cartId: payload.cartId,\r\n                userId: payload.userId,\r\n              }),\r\n            ])\r\n          )\r\n        );\r\n    }),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  removeEntry$: Observable<\r\n    | CartActions.CartRemoveEntrySuccess\r\n    | CartActions.CartRemoveEntryFail\r\n    | CartActions.LoadCart\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.CART_REMOVE_ENTRY),\r\n    map((action: CartActions.CartRemoveEntry) => action.payload),\r\n    concatMap((payload) =>\r\n      this.cartEntryConnector\r\n        .remove(payload.userId, payload.cartId, payload.entryNumber)\r\n        .pipe(\r\n          map(() => {\r\n            return new CartActions.CartRemoveEntrySuccess({\r\n              ...payload,\r\n            });\r\n          }),\r\n          catchError((error) =>\r\n            from([\r\n              new CartActions.CartRemoveEntryFail({\r\n                ...payload,\r\n                error: makeErrorSerializable(error),\r\n              }),\r\n              new CartActions.LoadCart({\r\n                cartId: payload.cartId,\r\n                userId: payload.userId,\r\n              }),\r\n            ])\r\n          )\r\n        )\r\n    ),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  updateEntry$: Observable<\r\n    | CartActions.CartUpdateEntrySuccess\r\n    | CartActions.CartUpdateEntryFail\r\n    | CartActions.LoadCart\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.CART_UPDATE_ENTRY),\r\n    map((action: CartActions.CartUpdateEntry) => action.payload),\r\n    concatMap((payload) =>\r\n      this.cartEntryConnector\r\n        .update(\r\n          payload.userId,\r\n          payload.cartId,\r\n          payload.entryNumber,\r\n          payload.quantity\r\n        )\r\n        .pipe(\r\n          map(() => {\r\n            return new CartActions.CartUpdateEntrySuccess({\r\n              ...payload,\r\n            });\r\n          }),\r\n          catchError((error) =>\r\n            from([\r\n              new CartActions.CartUpdateEntryFail({\r\n                ...payload,\r\n                error: makeErrorSerializable(error),\r\n              }),\r\n              new CartActions.LoadCart({\r\n                cartId: payload.cartId,\r\n                userId: payload.userId,\r\n              }),\r\n            ])\r\n          )\r\n        )\r\n    ),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private cartEntryConnector: CartEntryConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartVoucherAdapter } from './cart-voucher.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartVoucherConnector {\n  constructor(protected adapter: CartVoucherAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.add(userId, cartId, voucherId);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.remove(userId, cartId, voucherId);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { from, Observable } from 'rxjs';\r\nimport { catchError, map, mergeMap } from 'rxjs/operators';\r\nimport { GlobalMessageService } from '../../../global-message/facade/global-message.service';\r\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { CartVoucherConnector } from '../../connectors/voucher/cart-voucher.connector';\r\nimport { CartActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class CartVoucherEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private cartVoucherConnector: CartVoucherConnector,\r\n    private messageService: GlobalMessageService\r\n  ) {}\r\n\r\n  @Effect()\r\n  addCartVoucher$: Observable<\r\n    | CartActions.CartVoucherAction\r\n    | CartActions.LoadCart\r\n    | CartActions.CartProcessesDecrement\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.CART_ADD_VOUCHER),\r\n    map((action: CartActions.CartAddVoucher) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.cartVoucherConnector\r\n        .add(payload.userId, payload.cartId, payload.voucherId)\r\n        .pipe(\r\n          map(() => {\r\n            this.showGlobalMessage(\r\n              'voucher.applyVoucherSuccess',\r\n              payload.voucherId,\r\n              GlobalMessageType.MSG_TYPE_CONFIRMATION\r\n            );\r\n            return new CartActions.CartAddVoucherSuccess({\r\n              ...payload,\r\n            });\r\n          }),\r\n          catchError((error) =>\r\n            from([\r\n              new CartActions.CartAddVoucherFail({\r\n                ...payload,\r\n                error: makeErrorSerializable(error),\r\n              }),\r\n              new CartActions.CartProcessesDecrement(payload.cartId),\r\n              new CartActions.LoadCart({\r\n                userId: payload.userId,\r\n                cartId: payload.cartId,\r\n              }),\r\n            ])\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  removeCartVoucher$: Observable<\r\n    CartActions.CartVoucherAction | CartActions.LoadCart\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.CART_REMOVE_VOUCHER),\r\n    map((action: CartActions.CartRemoveVoucher) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.cartVoucherConnector\r\n        .remove(payload.userId, payload.cartId, payload.voucherId)\r\n        .pipe(\r\n          map(() => {\r\n            this.showGlobalMessage(\r\n              'voucher.removeVoucherSuccess',\r\n              payload.voucherId,\r\n              GlobalMessageType.MSG_TYPE_INFO\r\n            );\r\n            return new CartActions.CartRemoveVoucherSuccess({\r\n              userId: payload.userId,\r\n              cartId: payload.cartId,\r\n              voucherId: payload.voucherId,\r\n            });\r\n          }),\r\n          catchError((error) =>\r\n            from([\r\n              new CartActions.CartRemoveVoucherFail({\r\n                error: makeErrorSerializable(error),\r\n                cartId: payload.cartId,\r\n                userId: payload.userId,\r\n                voucherId: payload.voucherId,\r\n              }),\r\n              new CartActions.LoadCart({\r\n                userId: payload.userId,\r\n                cartId: payload.cartId,\r\n              }),\r\n            ])\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  private showGlobalMessage(\r\n    text: string,\r\n    param: string,\r\n    messageType: GlobalMessageType\r\n  ) {\r\n    this.messageService.add(\r\n      { key: text, params: { voucherCode: param } },\r\n      messageType\r\n    );\r\n  }\r\n}\r\n","import { Action } from '@ngrx/store';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const VERIFY_ADDRESS = '[Checkout] Verify Address';\nexport const VERIFY_ADDRESS_FAIL = '[Checkout] Verify Address Fail';\nexport const VERIFY_ADDRESS_SUCCESS = '[Checkout] Verify Address Success';\n\nexport const CLEAR_ADDRESS_VERIFICATION_RESULTS =\n  '[Checkout] Clear Address Verification Results';\n\nexport class VerifyAddress implements Action {\n  readonly type = VERIFY_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {}\n}\n\nexport class VerifyAddressFail implements Action {\n  readonly type = VERIFY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class VerifyAddressSuccess implements Action {\n  readonly type = VERIFY_ADDRESS_SUCCESS;\n  constructor(public payload: AddressValidation) {}\n}\n\nexport class ClearAddressVerificationResults implements Action {\n  readonly type = CLEAR_ADDRESS_VERIFICATION_RESULTS;\n  constructor() {}\n}\n\nexport type AddressVerificationActions =\n  | VerifyAddress\n  | VerifyAddressFail\n  | VerifyAddressSuccess\n  | ClearAddressVerificationResults;\n","import { Action } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\n\nexport const LOAD_CARD_TYPES = '[Checkout] Load Card Types';\nexport const LOAD_CARD_TYPES_FAIL = '[Checkout] Load Card Fail';\nexport const LOAD_CARD_TYPES_SUCCESS = '[Checkout] Load Card Success';\n\nexport class LoadCardTypes implements Action {\n  readonly type = LOAD_CARD_TYPES;\n  constructor() {}\n}\n\nexport class LoadCardTypesFail implements Action {\n  readonly type = LOAD_CARD_TYPES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCardTypesSuccess implements Action {\n  readonly type = LOAD_CARD_TYPES_SUCCESS;\n  constructor(public payload: CardType[]) {}\n}\n\nexport type CardTypesAction =\n  | LoadCardTypes\n  | LoadCardTypesFail\n  | LoadCardTypesSuccess;\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode, Order } from '../../model/order.model';\n\nexport const CHECKOUT_FEATURE = 'checkout';\nexport const CHECKOUT_DETAILS = '[Checkout] Checkout Details';\n\nexport const SET_DELIVERY_ADDRESS_PROCESS_ID = 'setDeliveryAddress';\nexport const SET_DELIVERY_MODE_PROCESS_ID = 'setDeliveryMode';\nexport const SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID =\n  'setSupportedDeliveryMode';\nexport const SET_PAYMENT_DETAILS_PROCESS_ID = 'setPaymentDetails';\n\nexport interface StateWithCheckout {\n  [CHECKOUT_FEATURE]: CheckoutState;\n}\n\nexport interface AddressVerificationState {\n  results: AddressValidation | string;\n}\n\nexport interface CardTypesState {\n  entities: { [code: string]: CardType };\n}\n\nexport interface CheckoutStepsState {\n  address: Address;\n  deliveryMode: {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  };\n  paymentDetails: PaymentDetails;\n  orderDetails: Order;\n}\n\nexport interface CheckoutState {\n  steps: LoaderState<CheckoutStepsState>;\n  cardTypes: CardTypesState;\n  addressVerification: AddressVerificationState;\n}\n","import { Action } from '@ngrx/store';\r\nimport { MULTI_CART_DATA } from '../../../cart/store/multi-cart-state';\r\nimport { Address } from '../../../model/address.model';\r\nimport { PaymentDetails } from '../../../model/cart.model';\r\nimport { DeliveryMode, Order } from '../../../model/order.model';\r\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\r\nimport {\r\n  EntityProcessesDecrementAction,\r\n  EntityProcessesIncrementAction,\r\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { CheckoutDetails } from '../../models/checkout.model';\r\nimport {\r\n  CHECKOUT_DETAILS,\r\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\r\n  SET_DELIVERY_MODE_PROCESS_ID,\r\n  SET_PAYMENT_DETAILS_PROCESS_ID,\r\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\r\n} from '../checkout-state';\r\n\r\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS =\r\n  '[Checkout] Clear Checkout Delivery Address';\r\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS =\r\n  '[Checkout] Clear Checkout Delivery Address Success';\r\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL =\r\n  '[Checkout] Clear Checkout Delivery Address Fail';\r\n\r\nexport const CLEAR_CHECKOUT_DELIVERY_MODE =\r\n  '[Checkout] Clear Checkout Delivery Mode';\r\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS =\r\n  '[Checkout] Clear Checkout Delivery Mode Success';\r\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_FAIL =\r\n  '[Checkout] Clear Checkout Delivery Mode Fail';\r\n\r\nexport const ADD_DELIVERY_ADDRESS = '[Checkout] Add Delivery Address';\r\nexport const ADD_DELIVERY_ADDRESS_FAIL = '[Checkout] Add Delivery Address Fail';\r\nexport const ADD_DELIVERY_ADDRESS_SUCCESS =\r\n  '[Checkout] Add Delivery Address Success';\r\n\r\nexport const SET_DELIVERY_ADDRESS = '[Checkout] Set Delivery Address';\r\nexport const SET_DELIVERY_ADDRESS_FAIL = '[Checkout] Set Delivery Address Fail';\r\nexport const SET_DELIVERY_ADDRESS_SUCCESS =\r\n  '[Checkout] Set Delivery Address Success';\r\nexport const RESET_SET_DELIVERY_ADDRESS_PROCESS =\r\n  '[Checkout] Reset Set Delivery Address Process';\r\n\r\nexport const LOAD_SUPPORTED_DELIVERY_MODES =\r\n  '[Checkout] Load Supported Delivery Modes';\r\nexport const LOAD_SUPPORTED_DELIVERY_MODES_FAIL =\r\n  '[Checkout] Load Supported Delivery Modes Fail';\r\nexport const LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS =\r\n  '[Checkout] Load Supported Delivery Modes Success';\r\nexport const CLEAR_SUPPORTED_DELIVERY_MODES =\r\n  '[Checkout] Clear Supported Delivery Modes';\r\n\r\nexport const SET_DELIVERY_MODE = '[Checkout] Set Delivery Mode';\r\nexport const SET_DELIVERY_MODE_FAIL = '[Checkout] Set Delivery Mode Fail';\r\nexport const SET_DELIVERY_MODE_SUCCESS = '[Checkout] Set Delivery Mode Success';\r\nexport const RESET_SET_DELIVERY_MODE_PROCESS =\r\n  '[Checkout] Reset Set Delivery Mode Process';\r\n\r\nexport const SET_SUPPORTED_DELIVERY_MODES =\r\n  '[Checkout] Set Supported Delivery Modes';\r\nexport const SET_SUPPORTED_DELIVERY_MODES_FAIL =\r\n  '[Checkout] Set Supported Delivery Modes Fail';\r\nexport const SET_SUPPORTED_DELIVERY_MODES_SUCCESS =\r\n  '[Checkout] Set Supported Delivery Modes Success';\r\nexport const RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS =\r\n  '[Checkout] Reset Set Supported Delivery Modes Process';\r\n\r\nexport const CREATE_PAYMENT_DETAILS = '[Checkout] Create Payment Details';\r\nexport const CREATE_PAYMENT_DETAILS_FAIL =\r\n  '[Checkout] Create Payment Details Fail';\r\nexport const CREATE_PAYMENT_DETAILS_SUCCESS =\r\n  '[Checkout] Create Payment Details Success';\r\n\r\nexport const SET_PAYMENT_DETAILS = '[Checkout] Set Payment Details';\r\nexport const SET_PAYMENT_DETAILS_FAIL = '[Checkout] Set Payment Details Fail';\r\nexport const SET_PAYMENT_DETAILS_SUCCESS =\r\n  '[Checkout] Set Payment Details Success';\r\nexport const RESET_SET_PAYMENT_DETAILS_PROCESS =\r\n  '[Checkout] Reset Set Payment Details Process';\r\n\r\nexport const PLACE_ORDER = '[Checkout] Place Order';\r\nexport const PLACE_ORDER_FAIL = '[Checkout] Place Order Fail';\r\nexport const PLACE_ORDER_SUCCESS = '[Checkout] Place Order Success';\r\n\r\nexport const CLEAR_CHECKOUT_STEP = '[Checkout] Clear One Checkout Step';\r\nexport const CLEAR_CHECKOUT_DATA = '[Checkout] Clear Checkout Data';\r\n\r\nexport const LOAD_CHECKOUT_DETAILS = '[Checkout] Load Checkout Details';\r\nexport const LOAD_CHECKOUT_DETAILS_FAIL =\r\n  '[Checkout] Load Checkout Details Fail';\r\nexport const LOAD_CHECKOUT_DETAILS_SUCCESS =\r\n  '[Checkout] Load Checkout Details Success';\r\n\r\nexport const CHECKOUT_CLEAR_MISCS_DATA = '[Checkout] Clear Miscs Data';\r\nexport const PAYMENT_PROCESS_SUCCESS = '[Checkout] Payment Process Success';\r\n\r\nexport class AddDeliveryAddress implements Action {\r\n  readonly type = ADD_DELIVERY_ADDRESS;\r\n  constructor(\r\n    public payload: { userId: string; cartId: string; address: Address }\r\n  ) {}\r\n}\r\n\r\nexport class AddDeliveryAddressFail implements Action {\r\n  readonly type = ADD_DELIVERY_ADDRESS_FAIL;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddDeliveryAddressSuccess implements Action {\r\n  readonly type = ADD_DELIVERY_ADDRESS_SUCCESS;\r\n  constructor(public payload: Address) {}\r\n}\r\n\r\nexport class SetDeliveryAddress extends StateUtils.EntityLoadAction {\r\n  readonly type = SET_DELIVERY_ADDRESS;\r\n  constructor(\r\n    public payload: { userId: string; cartId: string; address: Address }\r\n  ) {\r\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class SetDeliveryAddressFail extends StateUtils.EntityFailAction {\r\n  readonly type = SET_DELIVERY_ADDRESS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class SetDeliveryAddressSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = SET_DELIVERY_ADDRESS_SUCCESS;\r\n  constructor(public payload: Address) {\r\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ResetSetDeliveryAddressProcess extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = RESET_SET_DELIVERY_ADDRESS_PROCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class LoadSupportedDeliveryModes extends StateUtils.EntityLoadAction {\r\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES;\r\n  constructor(public payload: { userId: string; cartId: string }) {\r\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class LoadSupportedDeliveryModesFail extends StateUtils.EntityFailAction {\r\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class LoadSupportedDeliveryModesSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS;\r\n  constructor(public payload: DeliveryMode[]) {\r\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ResetLoadSupportedDeliveryModesProcess extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class SetDeliveryMode extends StateUtils.EntityLoadAction {\r\n  readonly type = SET_DELIVERY_MODE;\r\n  constructor(\r\n    public payload: { userId: string; cartId: string; selectedModeId: string }\r\n  ) {\r\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class SetDeliveryModeFail extends StateUtils.EntityFailAction {\r\n  readonly type = SET_DELIVERY_MODE_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class SetDeliveryModeSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = SET_DELIVERY_MODE_SUCCESS;\r\n  constructor(public payload: string) {\r\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ResetSetDeliveryModeProcess extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = RESET_SET_DELIVERY_MODE_PROCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class CreatePaymentDetails extends StateUtils.EntityLoadAction {\r\n  readonly type = CREATE_PAYMENT_DETAILS;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      cartId: string;\r\n      paymentDetails: PaymentDetails;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class CreatePaymentDetailsFail extends StateUtils.EntityFailAction {\r\n  readonly type = CREATE_PAYMENT_DETAILS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class CreatePaymentDetailsSuccess implements Action {\r\n  readonly type = CREATE_PAYMENT_DETAILS_SUCCESS;\r\n  constructor(public payload: PaymentDetails) {}\r\n}\r\n\r\nexport class PaymentProcessSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = PAYMENT_PROCESS_SUCCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class SetPaymentDetails extends StateUtils.EntityLoadAction {\r\n  readonly type = SET_PAYMENT_DETAILS;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      cartId: string;\r\n      paymentDetails: PaymentDetails;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class SetPaymentDetailsFail extends StateUtils.EntityFailAction {\r\n  readonly type = SET_PAYMENT_DETAILS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class SetPaymentDetailsSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = SET_PAYMENT_DETAILS_SUCCESS;\r\n  constructor(public payload: PaymentDetails) {\r\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ResetSetPaymentDetailsProcess extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = RESET_SET_PAYMENT_DETAILS_PROCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class PlaceOrder implements Action {\r\n  readonly type = PLACE_ORDER;\r\n  constructor(public payload: { userId: string; cartId: string }) {}\r\n}\r\n\r\nexport class PlaceOrderFail implements Action {\r\n  readonly type = PLACE_ORDER_FAIL;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class PlaceOrderSuccess implements Action {\r\n  readonly type = PLACE_ORDER_SUCCESS;\r\n  constructor(public payload: Order) {}\r\n}\r\n\r\nexport class ClearSupportedDeliveryModes implements Action {\r\n  readonly type = CLEAR_SUPPORTED_DELIVERY_MODES;\r\n}\r\n\r\nexport class ClearCheckoutStep implements Action {\r\n  readonly type = CLEAR_CHECKOUT_STEP;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class ClearCheckoutData implements Action {\r\n  readonly type = CLEAR_CHECKOUT_DATA;\r\n}\r\n\r\nexport class LoadCheckoutDetails extends StateUtils.LoaderLoadAction {\r\n  readonly type = LOAD_CHECKOUT_DETAILS;\r\n  constructor(public payload: { userId: string; cartId: string }) {\r\n    super(CHECKOUT_DETAILS);\r\n  }\r\n}\r\n\r\nexport class LoadCheckoutDetailsFail extends StateUtils.LoaderFailAction {\r\n  readonly type = LOAD_CHECKOUT_DETAILS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(CHECKOUT_DETAILS, payload);\r\n  }\r\n}\r\n\r\nexport class LoadCheckoutDetailsSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = LOAD_CHECKOUT_DETAILS_SUCCESS;\r\n  constructor(public payload: CheckoutDetails) {\r\n    super(CHECKOUT_DETAILS);\r\n  }\r\n}\r\n\r\nexport class CheckoutClearMiscsData implements Action {\r\n  readonly type = CHECKOUT_CLEAR_MISCS_DATA;\r\n}\r\n\r\nexport class ClearCheckoutDeliveryAddress implements Action {\r\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS;\r\n  constructor(public payload: { userId: string; cartId: string }) {}\r\n}\r\n\r\nexport class ClearCheckoutDeliveryAddressSuccess implements Action {\r\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class ClearCheckoutDeliveryAddressFail implements Action {\r\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class ClearCheckoutDeliveryMode extends EntityProcessesIncrementAction {\r\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE;\r\n  constructor(public payload: { userId: string; cartId: string }) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class ClearCheckoutDeliveryModeSuccess extends EntityProcessesDecrementAction {\r\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS;\r\n  constructor(public payload: { userId: string; cartId: string }) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class ClearCheckoutDeliveryModeFail extends EntityProcessesDecrementAction {\r\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_FAIL;\r\n  constructor(public payload: { userId: string; cartId: string; error: any }) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport type CheckoutAction =\r\n  | AddDeliveryAddress\r\n  | AddDeliveryAddressFail\r\n  | AddDeliveryAddressSuccess\r\n  | SetDeliveryAddress\r\n  | SetDeliveryAddressFail\r\n  | SetDeliveryAddressSuccess\r\n  | ResetSetDeliveryAddressProcess\r\n  | LoadSupportedDeliveryModes\r\n  | LoadSupportedDeliveryModesFail\r\n  | LoadSupportedDeliveryModesSuccess\r\n  | SetDeliveryMode\r\n  | SetDeliveryModeFail\r\n  | SetDeliveryModeSuccess\r\n  | ResetSetDeliveryModeProcess\r\n  | ClearSupportedDeliveryModes\r\n  | CreatePaymentDetails\r\n  | CreatePaymentDetailsFail\r\n  | CreatePaymentDetailsSuccess\r\n  | SetPaymentDetails\r\n  | SetPaymentDetailsFail\r\n  | SetPaymentDetailsSuccess\r\n  | ResetSetPaymentDetailsProcess\r\n  | PlaceOrder\r\n  | PlaceOrderFail\r\n  | PlaceOrderSuccess\r\n  | ClearCheckoutStep\r\n  | ClearCheckoutData\r\n  | ClearCheckoutDeliveryAddress\r\n  | ClearCheckoutDeliveryAddressFail\r\n  | ClearCheckoutDeliveryAddressSuccess\r\n  | ClearCheckoutDeliveryMode\r\n  | ClearCheckoutDeliveryModeFail\r\n  | ClearCheckoutDeliveryModeSuccess\r\n  | LoadCheckoutDetails\r\n  | LoadCheckoutDetailsFail\r\n  | LoadCheckoutDetailsSuccess\r\n  | CheckoutClearMiscsData;\r\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\nimport { CartAdapter } from './cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartConnector {\n  constructor(protected adapter: CartAdapter) {}\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    return this.adapter.load(userId, cartId);\n  }\n\n  public create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    return this.adapter.create(userId, oldCartId, toMergeCartGuid);\n  }\n\n  public delete(userId: string, cartId: string): Observable<{}> {\n    return this.adapter.delete(userId, cartId);\n  }\n\n  public addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}> {\n    return this.adapter.addEmail(userId, cartId, email);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { from, Observable, of } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  concatMap,\r\n  filter,\r\n  groupBy,\r\n  map,\r\n  mergeMap,\r\n  switchMap,\r\n  withLatestFrom,\r\n} from 'rxjs/operators';\r\nimport { CheckoutActions } from '../../../checkout/store/actions';\r\nimport { Cart } from '../../../model/cart.model';\r\nimport { OCC_CART_ID_CURRENT } from '../../../occ/utils/occ-constants';\r\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { withdrawOn } from '../../../util/withdraw-on';\r\nimport { CartConnector } from '../../connectors/cart/cart.connector';\r\nimport { getCartIdByUserId, isCartNotFoundError } from '../../utils/utils';\r\nimport { CartActions } from '../actions/index';\r\nimport { StateWithMultiCart } from '../multi-cart-state';\r\nimport { getCartHasPendingProcessesSelectorFactory } from '../selectors/multi-cart.selector';\r\n\r\n@Injectable()\r\nexport class CartEffects {\r\n  private contextChange$ = this.actions$.pipe(\r\n    ofType(\r\n      SiteContextActions.CURRENCY_CHANGE,\r\n      SiteContextActions.LANGUAGE_CHANGE\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  loadCart$: Observable<\r\n    | CartActions.LoadCartFail\r\n    | CartActions.LoadCartSuccess\r\n    | CartActions.RemoveCart\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.LOAD_CART),\r\n    map((action: CartActions.LoadCart) => action.payload),\r\n    groupBy((payload) => payload.cartId),\r\n    mergeMap((group$) =>\r\n      group$.pipe(\r\n        switchMap((payload) => {\r\n          return of(payload).pipe(\r\n            withLatestFrom(\r\n              this.store.pipe(\r\n                select(\r\n                  getCartHasPendingProcessesSelectorFactory(payload.cartId)\r\n                )\r\n              )\r\n            )\r\n          );\r\n        }),\r\n        filter(([_, hasPendingProcesses]) => !hasPendingProcesses),\r\n        map(([payload]) => payload),\r\n        switchMap((payload) => {\r\n          return this.cartConnector.load(payload.userId, payload.cartId).pipe(\r\n            mergeMap((cart: Cart) => {\r\n              let actions = [];\r\n              if (cart) {\r\n                actions.push(\r\n                  new CartActions.LoadCartSuccess({\r\n                    ...payload,\r\n                    cart,\r\n                    cartId: getCartIdByUserId(cart, payload.userId),\r\n                  })\r\n                );\r\n\r\n                if (payload.cartId === OCC_CART_ID_CURRENT) {\r\n                  // Removing cart from entity object under `current` key as it is no longer needed.\r\n                  // Current cart is loaded under it's code entity.\r\n                  actions.push(\r\n                    new CartActions.RemoveCart({ cartId: OCC_CART_ID_CURRENT })\r\n                  );\r\n                }\r\n              } else {\r\n                actions = [\r\n                  new CartActions.LoadCartFail({\r\n                    ...payload,\r\n                    error: {},\r\n                  }),\r\n                ];\r\n              }\r\n              return actions;\r\n            }),\r\n            catchError((error) => {\r\n              if (error?.error?.errors) {\r\n                const couponExpiredErrors = error.error.errors.filter(\r\n                  (err) => err.reason === 'invalid'\r\n                );\r\n                if (couponExpiredErrors.length > 0) {\r\n                  // Reload in case of expired coupon.\r\n                  return of(new CartActions.LoadCart({ ...payload }));\r\n                }\r\n\r\n                const cartNotFoundErrors = error.error.errors.filter(\r\n                  (err) =>\r\n                    isCartNotFoundError(err) ||\r\n                    err.reason === 'UnknownResourceError'\r\n                );\r\n                if (cartNotFoundErrors.length > 0) {\r\n                  // Remove cart as it doesn't exist on backend (selective cart always exists).\r\n                  return of(\r\n                    new CartActions.RemoveCart({ cartId: payload.cartId })\r\n                  );\r\n                }\r\n              }\r\n              return of(\r\n                new CartActions.LoadCartFail({\r\n                  ...payload,\r\n                  error: makeErrorSerializable(error),\r\n                })\r\n              );\r\n            })\r\n          );\r\n        })\r\n      )\r\n    ),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  createCart$: Observable<\r\n    | CartActions.MergeCartSuccess\r\n    | CartActions.CreateCartSuccess\r\n    | CartActions.CreateCartFail\r\n    | CartActions.SetTempCart\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.CREATE_CART),\r\n    map((action: CartActions.CreateCart) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.cartConnector\r\n        .create(payload.userId, payload.oldCartId, payload.toMergeCartGuid)\r\n        .pipe(\r\n          switchMap((cart: Cart) => {\r\n            const conditionalActions = [];\r\n            if (payload.oldCartId) {\r\n              conditionalActions.push(\r\n                new CartActions.MergeCartSuccess({\r\n                  extraData: payload.extraData,\r\n                  userId: payload.userId,\r\n                  tempCartId: payload.tempCartId,\r\n                  cartId: getCartIdByUserId(cart, payload.userId),\r\n                  oldCartId: payload.oldCartId,\r\n                })\r\n              );\r\n            }\r\n            return [\r\n              new CartActions.CreateCartSuccess({\r\n                ...payload,\r\n                cart,\r\n                cartId: getCartIdByUserId(cart, payload.userId),\r\n              }),\r\n              new CartActions.SetTempCart({\r\n                cart,\r\n                tempCartId: payload.tempCartId,\r\n              }),\r\n              ...conditionalActions,\r\n            ];\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new CartActions.CreateCartFail({\r\n                ...payload,\r\n                error: makeErrorSerializable(error),\r\n              })\r\n            )\r\n          )\r\n        );\r\n    }),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  mergeCart$: Observable<CartActions.CreateCart> = this.actions$.pipe(\r\n    ofType(CartActions.MERGE_CART),\r\n    map((action: CartActions.MergeCart) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.cartConnector.load(payload.userId, OCC_CART_ID_CURRENT).pipe(\r\n        mergeMap((currentCart) => {\r\n          return [\r\n            new CartActions.CreateCart({\r\n              userId: payload.userId,\r\n              oldCartId: payload.cartId,\r\n              toMergeCartGuid: currentCart ? currentCart.guid : undefined,\r\n              extraData: payload.extraData,\r\n              tempCartId: payload.tempCartId,\r\n            }),\r\n          ];\r\n        })\r\n      );\r\n    }),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  // TODO(#7241): Remove when AddVoucherSuccess actions will extend processes actions\r\n  @Effect()\r\n  refresh$: Observable<\r\n    CartActions.LoadCart | CartActions.CartProcessesDecrement\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.CART_ADD_VOUCHER_SUCCESS),\r\n    map((action: CartActions.CartAddVoucherSuccess) => action.payload),\r\n    concatMap((payload) =>\r\n      from([\r\n        new CartActions.CartProcessesDecrement(payload.cartId),\r\n        new CartActions.LoadCart({\r\n          userId: payload.userId,\r\n          cartId: payload.cartId,\r\n        }),\r\n      ])\r\n    )\r\n  );\r\n\r\n  // TODO: Switch to automatic cart reload on processes count reaching 0 for cart entity\r\n  @Effect()\r\n  refreshWithoutProcesses$: Observable<\r\n    CartActions.LoadCart\r\n  > = this.actions$.pipe(\r\n    ofType(\r\n      CartActions.CART_ADD_ENTRY_SUCCESS,\r\n      CartActions.CART_REMOVE_ENTRY_SUCCESS,\r\n      CartActions.CART_UPDATE_ENTRY_SUCCESS,\r\n      CartActions.CART_REMOVE_VOUCHER_SUCCESS,\r\n      CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS\r\n    ),\r\n    map(\r\n      (\r\n        action:\r\n          | CartActions.CartAddEntrySuccess\r\n          | CartActions.CartUpdateEntrySuccess\r\n          | CartActions.CartRemoveEntrySuccess\r\n          | CartActions.CartRemoveVoucherSuccess\r\n          | CheckoutActions.ClearCheckoutDeliveryModeSuccess\r\n      ) => action.payload\r\n    ),\r\n    map(\r\n      (payload) =>\r\n        new CartActions.LoadCart({\r\n          userId: payload.userId,\r\n          cartId: payload.cartId,\r\n        })\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  resetCartDetailsOnSiteContextChange$: Observable<\r\n    CartActions.ResetCartDetails\r\n  > = this.actions$.pipe(\r\n    ofType(\r\n      SiteContextActions.LANGUAGE_CHANGE,\r\n      SiteContextActions.CURRENCY_CHANGE\r\n    ),\r\n    mergeMap(() => {\r\n      return [new CartActions.ResetCartDetails()];\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  addEmail$: Observable<\r\n    | CartActions.AddEmailToCartSuccess\r\n    | CartActions.AddEmailToCartFail\r\n    | CartActions.LoadCart\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.ADD_EMAIL_TO_CART),\r\n    map((action: CartActions.AddEmailToCart) => action.payload),\r\n    mergeMap((payload) =>\r\n      this.cartConnector\r\n        .addEmail(payload.userId, payload.cartId, payload.email)\r\n        .pipe(\r\n          mergeMap(() => {\r\n            return [\r\n              new CartActions.AddEmailToCartSuccess({\r\n                ...payload,\r\n              }),\r\n              new CartActions.LoadCart({\r\n                userId: payload.userId,\r\n                cartId: payload.cartId,\r\n              }),\r\n            ];\r\n          }),\r\n          catchError((error) =>\r\n            from([\r\n              new CartActions.AddEmailToCartFail({\r\n                ...payload,\r\n                error: makeErrorSerializable(error),\r\n              }),\r\n              new CartActions.LoadCart({\r\n                userId: payload.userId,\r\n                cartId: payload.cartId,\r\n              }),\r\n            ])\r\n          )\r\n        )\r\n    ),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  deleteCart$: Observable<\r\n    | CartActions.DeleteCartSuccess\r\n    | CartActions.DeleteCartFail\r\n    | CartActions.LoadCart\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.DELETE_CART),\r\n    map((action: CartActions.DeleteCart) => action.payload),\r\n    mergeMap((payload) =>\r\n      this.cartConnector.delete(payload.userId, payload.cartId).pipe(\r\n        map(() => {\r\n          return new CartActions.DeleteCartSuccess({ ...payload });\r\n        }),\r\n        catchError((error) =>\r\n          from([\r\n            new CartActions.DeleteCartFail({\r\n              ...payload,\r\n              error: makeErrorSerializable(error),\r\n            }),\r\n            // Error might happen in higher backend layer and cart could still be removed.\r\n            // When load fail with NotFound error then RemoveCart action will kick in and clear that cart in our state.\r\n            new CartActions.LoadCart({\r\n              ...payload,\r\n            }),\r\n          ])\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private cartConnector: CartConnector,\r\n    private store: Store<StateWithMultiCart>\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { SaveCartAdapter } from './save-cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SaveCartConnector {\n  constructor(protected adapter: SaveCartAdapter) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    return this.adapter.saveCart(\n      userId,\n      cartId,\n      saveCartName,\n      saveCartDescription\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { EMPTY, from, Observable } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  concatMap,\r\n  map,\r\n  switchMap,\r\n  withLatestFrom,\r\n} from 'rxjs/operators';\r\nimport { AuthService } from '../../../auth/facade/auth.service';\r\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { CartConnector } from '../../connectors/cart/cart.connector';\r\nimport { SaveCartConnector } from '../../connectors/save-cart/save-cart.connecter';\r\nimport { getCartIdByUserId, getWishlistName } from '../../utils/utils';\r\nimport { CartActions } from '../actions';\r\nimport { StateWithMultiCart } from '../multi-cart-state';\r\nimport { MultiCartSelectors } from '../selectors';\r\n\r\n@Injectable()\r\nexport class WishListEffects {\r\n  @Effect()\r\n  createWishList$: Observable<\r\n    CartActions.CreateWishListSuccess | CartActions.CreateWishListFail\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.CREATE_WISH_LIST),\r\n    map((action: CartActions.CreateWishList) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.cartConnector.create(payload.userId).pipe(\r\n        switchMap((cart) => {\r\n          return this.saveCartConnector\r\n            .saveCart(\r\n              payload.userId,\r\n              cart.code,\r\n              payload.name,\r\n              payload.description\r\n            )\r\n            .pipe(\r\n              switchMap((saveCartResult) => [\r\n                new CartActions.CreateWishListSuccess({\r\n                  cart: saveCartResult.savedCartData,\r\n                  userId: payload.userId,\r\n                }),\r\n              ]),\r\n              catchError((error) =>\r\n                from([\r\n                  new CartActions.CreateWishListFail({\r\n                    cartId: cart.code,\r\n                    error: makeErrorSerializable(error),\r\n                  }),\r\n                ])\r\n              )\r\n            );\r\n        })\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  loadWishList$: Observable<\r\n    | CartActions.LoadWishListSuccess\r\n    | CartActions.RemoveCart\r\n    | CartActions.CreateWishList\r\n    | CartActions.LoadWishListFail\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.LOAD_WISH_LIST),\r\n    map((action: CartActions.LoadWishList) => action.payload),\r\n    concatMap((payload) => {\r\n      const { userId, customerId, tempCartId } = payload;\r\n      return this.cartConnector.loadAll(userId).pipe(\r\n        switchMap((carts) => {\r\n          if (carts) {\r\n            const wishList = carts.find(\r\n              (cart) => cart.name === getWishlistName(customerId)\r\n            );\r\n            if (Boolean(wishList)) {\r\n              return [\r\n                new CartActions.LoadWishListSuccess({\r\n                  cart: wishList,\r\n                  userId,\r\n                  tempCartId,\r\n                  customerId,\r\n                  cartId: getCartIdByUserId(wishList, userId),\r\n                }),\r\n                new CartActions.RemoveCart({ cartId: tempCartId }),\r\n              ];\r\n            } else {\r\n              return [\r\n                new CartActions.CreateWishList({\r\n                  userId,\r\n                  name: getWishlistName(customerId),\r\n                }),\r\n              ];\r\n            }\r\n          }\r\n        }),\r\n        catchError((error) =>\r\n          from([\r\n            new CartActions.LoadWishListFail({\r\n              userId,\r\n              cartId: tempCartId,\r\n              customerId,\r\n              error: makeErrorSerializable(error),\r\n            }),\r\n          ])\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  resetWishList$: Observable<\r\n    CartActions.LoadWishListSuccess | CartActions.LoadWishListFail\r\n  > = this.actions$.pipe(\r\n    ofType(\r\n      SiteContextActions.LANGUAGE_CHANGE,\r\n      SiteContextActions.CURRENCY_CHANGE\r\n    ),\r\n    withLatestFrom(\r\n      this.authService.getOccUserId(),\r\n      this.store.pipe(select(MultiCartSelectors.getWishListId))\r\n    ),\r\n    switchMap(([, userId, wishListId]) => {\r\n      if (Boolean(wishListId)) {\r\n        return this.cartConnector.load(userId, wishListId).pipe(\r\n          switchMap((wishList) => [\r\n            new CartActions.LoadWishListSuccess({\r\n              cart: wishList,\r\n              userId,\r\n              cartId: getCartIdByUserId(wishList, userId),\r\n            }),\r\n          ]),\r\n          catchError((error) =>\r\n            from([\r\n              new CartActions.LoadWishListFail({\r\n                userId,\r\n                cartId: wishListId,\r\n                error: makeErrorSerializable(error),\r\n              }),\r\n            ])\r\n          )\r\n        );\r\n      }\r\n      return EMPTY;\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private cartConnector: CartConnector,\r\n    private saveCartConnector: SaveCartConnector,\r\n    private authService: AuthService,\r\n    private store: Store<StateWithMultiCart>\r\n  ) {}\r\n}\r\n","import { Cart } from '../../../model/cart.model';\r\nimport { LoaderAction } from '../../../state/utils/loader/loader.action';\r\nimport { CartActions } from '../actions/index';\r\n\r\nexport const activeCartInitialState = '';\r\nexport const wishListInitialState = '';\r\n\r\nexport function activeCartReducer(\r\n  state = activeCartInitialState,\r\n  action: CartActions.CartAction | CartActions.MultiCartActions\r\n): string {\r\n  switch (action.type) {\r\n    case CartActions.LOAD_CART_SUCCESS:\r\n    case CartActions.CREATE_CART_SUCCESS:\r\n    // point to `temp-${uuid}` cart when we are creating/merging cart\r\n    case CartActions.CREATE_CART:\r\n      if (action?.payload?.extraData?.active) {\r\n        return action.meta.entityId as string;\r\n      } else {\r\n        return state;\r\n      }\r\n    case CartActions.SET_ACTIVE_CART_ID:\r\n      return action.payload;\r\n    case CartActions.REMOVE_CART:\r\n    case CartActions.DELETE_CART_SUCCESS:\r\n      if (action.payload?.cartId === state) {\r\n        return activeCartInitialState;\r\n      }\r\n      return state;\r\n    case CartActions.CLEAR_CART_STATE:\r\n      return activeCartInitialState;\r\n  }\r\n  return state;\r\n}\r\n\r\nexport const cartEntitiesInitialState = undefined;\r\n\r\nexport function cartEntitiesReducer(\r\n  state = cartEntitiesInitialState,\r\n  action: LoaderAction\r\n): Cart {\r\n  switch (action.type) {\r\n    case CartActions.LOAD_CART_SUCCESS:\r\n    case CartActions.CREATE_CART_SUCCESS:\r\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\r\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\r\n    case CartActions.SET_TEMP_CART:\r\n      return action.payload.cart;\r\n  }\r\n  return state;\r\n}\r\n\r\nexport function wishListReducer(\r\n  state = wishListInitialState,\r\n  action: CartActions.WishListActions | CartActions.ClearCartState\r\n): string {\r\n  switch (action.type) {\r\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\r\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\r\n      return action.meta.entityId as string;\r\n    case CartActions.CLEAR_CART_STATE:\r\n      return wishListInitialState;\r\n  }\r\n  return state;\r\n}\r\n","import { InjectionToken, Provider } from '@angular/core';\r\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\r\nimport { AuthActions } from '../../../auth/store/actions/index';\r\nimport { Cart } from '../../../model/cart.model';\r\nimport { entityProcessesLoaderReducer } from '../../../state/utils/entity-processes-loader/entity-processes-loader.reducer';\r\nimport { MultiCartState, MULTI_CART_DATA } from '../multi-cart-state';\r\nimport {\r\n  activeCartReducer,\r\n  cartEntitiesReducer,\r\n  wishListReducer,\r\n} from './multi-cart.reducer';\r\n\r\nexport function clearMultiCartState(\r\n  reducer: ActionReducer<any>\r\n): ActionReducer<any> {\r\n  return function (state, action) {\r\n    if (action.type === AuthActions.LOGOUT) {\r\n      state = undefined;\r\n    }\r\n    return reducer(state, action);\r\n  };\r\n}\r\n\r\nexport const multiCartMetaReducers: MetaReducer<any>[] = [clearMultiCartState];\r\n\r\nexport const multiCartReducerToken: InjectionToken<ActionReducerMap<\r\n  MultiCartState\r\n>> = new InjectionToken<ActionReducerMap<MultiCartState>>('MultiCartReducers');\r\n\r\nexport function getMultiCartReducers(): ActionReducerMap<MultiCartState> {\r\n  return {\r\n    carts: entityProcessesLoaderReducer<Cart>(\r\n      MULTI_CART_DATA,\r\n      cartEntitiesReducer\r\n    ),\r\n    active: activeCartReducer,\r\n    wishList: wishListReducer,\r\n  };\r\n}\r\n\r\nexport const multiCartReducerProvider: Provider = {\r\n  provide: multiCartReducerToken,\r\n  useFactory: getMultiCartReducers,\r\n};\r\n","import { OrderEntry } from '../../model/order.model';\r\n\r\n/**\r\n * Base cart event. Most cart events should have `cartId` and `userId`.\r\n */\r\nexport interface CartEvent {\r\n  cartId: string;\r\n  userId: string;\r\n}\r\n\r\n// =====================================================================\r\n\r\nexport class CartAddEntryEvent implements CartEvent {\r\n  cartId: string;\r\n  userId: string;\r\n  productCode: string;\r\n  quantity: number;\r\n}\r\n\r\nexport class CartAddEntrySuccessEvent implements CartEvent {\r\n  cartId: string;\r\n  userId: string;\r\n  productCode: string;\r\n  quantity: number;\r\n  entry: OrderEntry;\r\n  quantityAdded: number;\r\n  deliveryModeChanged: boolean;\r\n}\r\n\r\nexport class CartAddEntryFailEvent implements CartEvent {\r\n  cartId: string;\r\n  userId: string;\r\n  productCode: string;\r\n  quantity: number;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ofType } from '@ngrx/effects';\r\nimport { ActionsSubject } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map, withLatestFrom } from 'rxjs/operators';\r\nimport { EventService } from '../../event/event.service';\r\nimport { ActionToEventMapping } from '../../state/event/action-to-event-mapping';\r\nimport { createFrom } from '../../util/create-from';\r\nimport { ActiveCartService } from '../facade/active-cart.service';\r\nimport { CartActions } from '../store';\r\nimport {\r\n  CartAddEntryEvent,\r\n  CartAddEntryFailEvent,\r\n  CartAddEntrySuccessEvent,\r\n} from './cart.events';\r\n\r\n/**\r\n * Registers events for the active cart\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class CartEventBuilder {\r\n  constructor(\r\n    protected actionsSubject: ActionsSubject,\r\n    protected event: EventService,\r\n    protected activeCartService: ActiveCartService\r\n  ) {\r\n    this.register();\r\n  }\r\n\r\n  /**\r\n   * Registers events for the active cart\r\n   */\r\n  protected register() {\r\n    this.registerAddEntry();\r\n  }\r\n\r\n  /**\r\n   * Register events for adding entry to the active cart\r\n   */\r\n  protected registerAddEntry() {\r\n    this.registerMapped({\r\n      action: CartActions.CART_ADD_ENTRY,\r\n      event: CartAddEntryEvent,\r\n    });\r\n    this.registerMapped({\r\n      action: CartActions.CART_ADD_ENTRY_SUCCESS,\r\n      event: CartAddEntrySuccessEvent,\r\n    });\r\n    this.registerMapped({\r\n      action: CartActions.CART_ADD_ENTRY_FAIL,\r\n      event: CartAddEntryFailEvent,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registers a stream of target events mapped from the source actions that contain the cart id equal to the active cart id.\r\n   *\r\n   * @param mapping mapping declaration - from `action` string type to `event` class type\r\n   *   (an with optional `factory` function - by default `action.payload` will be assigned to the properties of the event instance).\r\n   */\r\n  protected registerMapped<T>(mapping: ActionToEventMapping<T>): () => void {\r\n    const eventStream$ = this.getAction(mapping.action).pipe(\r\n      withLatestFrom(this.activeCartService.getActiveCartId()),\r\n      filter(\r\n        ([action, activeCartId]) => action.payload['cartId'] === activeCartId // assuming that action's payload contains the cart id\r\n      ),\r\n      map(([action]) => createFrom(mapping.event, action.payload))\r\n    );\r\n\r\n    return this.event.register(mapping.event, eventStream$);\r\n  }\r\n\r\n  /**\r\n   * Returns a stream of actions only of a given type(s)\r\n   *\r\n   * @param actionType type(s) of actions\r\n   */\r\n  protected getAction(\r\n    actionType: string | string[]\r\n  ): Observable<{ type: string; payload?: any }> {\r\n    return this.actionsSubject.pipe(ofType(...[].concat(actionType)));\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CartEventBuilder } from './cart-event.builder';\r\n\r\n@NgModule({})\r\nexport class CartEventModule {\r\n  constructor(_CartEventBuilder: CartEventBuilder) {}\r\n}\r\n","import { CmsComponent } from '../../model';\r\nimport { StateUtils } from '../../state/index';\r\nimport { NodeItem } from '../model/node-item.model';\r\nimport { Page } from '../model/page.model';\r\n\r\nexport const CMS_FEATURE = 'cms';\r\nexport const NAVIGATION_DETAIL_ENTITY = '[Cms] Navigation Entity';\r\nexport const COMPONENT_ENTITY = '[Cms] Component Entity';\r\n\r\nexport interface StateWithCms {\r\n  [CMS_FEATURE]: CmsState;\r\n}\r\n\r\nexport type ComponentsState = StateUtils.EntityState<ComponentsContext>;\r\n\r\nexport interface ComponentsContext {\r\n  component: CmsComponent;\r\n  /**\r\n   * Page context stores an information for which context does the component exist.\r\n   * For example, if `SiteLogoComponent` was successfully loaded for a product page with an ID of 1776948, then this object will contain:\r\n   *\r\n   * ```ts\r\n   * ProductPage-1776948: {\r\n   *  success: true,\r\n   *  loading: false,\r\n   *  error: false,\r\n   *  // The `value` property indicates that the component exists for the given page context.\r\n   *  value: true\r\n   * }\r\n   * ```\r\n   *\r\n   * If the same `SiteLogoComponent` component was tried to be loaded on homepage (page context id is `homepage`),\r\n   * and it doesn't exist for some reason (maybe it has a restriction), then this object will contain:\r\n   *\r\n   * ```ts\r\n   * ProductPage-1776948: {\r\n   *  success: true,\r\n   *  loading: false,\r\n   *  error: false,\r\n   *  // The `value` property indicates that the component exists for the given page context.\r\n   *  value: true\r\n   * },\r\n   * ContentPage-homepage: {\r\n   *  success: true,\r\n   *  loading: false,\r\n   *  error: false,\r\n   *  // The `value` in this case is `false` indicating that the component was tried to be loaded, but it doesn't exist or has a restriction.\r\n   *  value: false\r\n   * }\r\n   * ```\r\n   *\r\n   */\r\n  pageContext: {\r\n    [context: string]: StateUtils.LoaderState<boolean>;\r\n  };\r\n}\r\n\r\nexport type IndexType = {\r\n  content: StateUtils.EntityLoaderState<string>;\r\n  product: StateUtils.EntityLoaderState<string>;\r\n  category: StateUtils.EntityLoaderState<string>;\r\n  catalog: StateUtils.EntityLoaderState<string>;\r\n};\r\n\r\nexport interface NavigationNodes {\r\n  [nodeId: string]: NodeItem;\r\n}\r\n\r\nexport interface PageState {\r\n  pageData: StateUtils.EntityState<Page>;\r\n  index: IndexType;\r\n}\r\n\r\nexport interface CmsState {\r\n  page: PageState;\r\n  components: ComponentsState;\r\n  navigation: StateUtils.EntityLoaderState<NodeItem>;\r\n}\r\n","import { CmsComponent } from '../../../model/cms.model';\r\nimport { PageContext } from '../../../routing/index';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { COMPONENT_ENTITY } from '../cms-state';\r\n\r\nexport const LOAD_CMS_COMPONENT = '[Cms] Load Component';\r\nexport const LOAD_CMS_COMPONENT_FAIL = '[Cms] Load Component Fail';\r\nexport const LOAD_CMS_COMPONENT_SUCCESS = '[Cms] Load Component Success';\r\nexport const CMS_GET_COMPONENT_FROM_PAGE = '[Cms] Get Component from Page';\r\n\r\nexport class LoadCmsComponent extends StateUtils.EntityLoadAction {\r\n  readonly type = LOAD_CMS_COMPONENT;\r\n  constructor(\r\n    public payload: {\r\n      uid: string;\r\n      pageContext: PageContext;\r\n    }\r\n  ) {\r\n    super(COMPONENT_ENTITY, payload.uid);\r\n  }\r\n}\r\n\r\nexport class LoadCmsComponentFail extends StateUtils.EntityFailAction {\r\n  readonly type = LOAD_CMS_COMPONENT_FAIL;\r\n  constructor(\r\n    public payload: { uid: string; error?: any; pageContext: PageContext }\r\n  ) {\r\n    super(COMPONENT_ENTITY, payload.uid, payload.error);\r\n  }\r\n}\r\n\r\nexport class LoadCmsComponentSuccess<\r\n  T extends CmsComponent\r\n> extends StateUtils.EntitySuccessAction {\r\n  readonly type = LOAD_CMS_COMPONENT_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      component: T;\r\n      uid?: string;\r\n      pageContext: PageContext;\r\n    }\r\n  ) {\r\n    super(COMPONENT_ENTITY, payload.uid || payload.component.uid || '');\r\n  }\r\n}\r\n\r\nexport class CmsGetComponentFromPage<\r\n  T extends CmsComponent\r\n> extends StateUtils.EntitySuccessAction {\r\n  readonly type = CMS_GET_COMPONENT_FROM_PAGE;\r\n  constructor(\r\n    public payload:\r\n      | { component: T; pageContext: PageContext }\r\n      | { component: T; pageContext: PageContext }[]\r\n  ) {\r\n    super(\r\n      COMPONENT_ENTITY,\r\n      [].concat(payload).map((cmp) => cmp.component.uid)\r\n    );\r\n  }\r\n}\r\n\r\n// action types\r\nexport type CmsComponentAction<T extends CmsComponent> =\r\n  | LoadCmsComponent\r\n  | LoadCmsComponentFail\r\n  | LoadCmsComponentSuccess<T>\r\n  | CmsGetComponentFromPage<T>;\r\n","import { StateUtils } from '../../../state/utils/index';\r\nimport { NAVIGATION_DETAIL_ENTITY } from '../cms-state';\r\n\r\nexport const LOAD_CMS_NAVIGATION_ITEMS = '[Cms] Load NavigationEntry items';\r\nexport const LOAD_CMS_NAVIGATION_ITEMS_FAIL =\r\n  '[Cms] Load NavigationEntry items Fail';\r\nexport const LOAD_CMS_NAVIGATION_ITEMS_SUCCESS =\r\n  '[Cms] Load NavigationEntry items Success';\r\n\r\nexport class LoadCmsNavigationItems extends StateUtils.EntityLoadAction {\r\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS;\r\n  constructor(public payload: { nodeId: string; items: any[] }) {\r\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\r\n  }\r\n}\r\n\r\nexport class LoadCmsNavigationItemsFail extends StateUtils.EntityFailAction {\r\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_FAIL;\r\n  constructor(nodeId: string, public payload: any) {\r\n    super(NAVIGATION_DETAIL_ENTITY, nodeId, payload);\r\n  }\r\n}\r\n\r\nexport class LoadCmsNavigationItemsSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_SUCCESS;\r\n  constructor(public payload: { nodeId: string; components: any[] }) {\r\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\r\n  }\r\n}\r\n\r\n// action types\r\nexport type CmsNavigationEntryItemAction =\r\n  | LoadCmsNavigationItems\r\n  | LoadCmsNavigationItemsFail\r\n  | LoadCmsNavigationItemsSuccess;\r\n","import { PageContext } from '../../../routing/index';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { Page } from '../../model/page.model';\r\n\r\nexport const LOAD_CMS_PAGE_DATA = '[Cms] Load Page Data';\r\nexport const LOAD_CMS_PAGE_DATA_FAIL = '[Cms] Load Page Data Fail';\r\nexport const LOAD_CMS_PAGE_DATA_SUCCESS = '[Cms] Load Page Data Success';\r\nexport const CMS_SET_PAGE_SUCCESS_INDEX = '[Cms] Set Page Success Index';\r\nexport const CMS_SET_PAGE_FAIL_INDEX = '[Cms] Set Page Fail Index';\r\n\r\nexport class LoadCmsPageData extends StateUtils.EntityLoadAction {\r\n  readonly type = LOAD_CMS_PAGE_DATA;\r\n  constructor(public payload: PageContext) {\r\n    super(payload.type, payload.id);\r\n  }\r\n}\r\n\r\nexport class LoadCmsPageDataFail extends StateUtils.EntityFailAction {\r\n  readonly type = LOAD_CMS_PAGE_DATA_FAIL;\r\n  constructor(pageContext: PageContext, error: any) {\r\n    super(pageContext.type, pageContext.id, error);\r\n  }\r\n}\r\n\r\nexport class LoadCmsPageDataSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = LOAD_CMS_PAGE_DATA_SUCCESS;\r\n  constructor(pageContext: PageContext, payload: Page) {\r\n    super(pageContext.type, pageContext.id, payload);\r\n  }\r\n}\r\n\r\nexport class CmsSetPageSuccessIndex extends StateUtils.EntitySuccessAction {\r\n  readonly type = CMS_SET_PAGE_SUCCESS_INDEX;\r\n  constructor(pageContext: PageContext, payload: Page) {\r\n    super(pageContext.type, pageContext.id, payload);\r\n  }\r\n}\r\n\r\nexport class CmsSetPageFailIndex extends StateUtils.EntityFailAction {\r\n  readonly type = CMS_SET_PAGE_FAIL_INDEX;\r\n  constructor(pageContext: PageContext, public payload: string) {\r\n    super(pageContext.type, pageContext.id);\r\n  }\r\n}\r\n\r\n// action types\r\nexport type CmsPageAction =\r\n  | LoadCmsPageData\r\n  | LoadCmsPageDataFail\r\n  | LoadCmsPageDataSuccess\r\n  | CmsSetPageFailIndex;\r\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsState, CMS_FEATURE, StateWithCms } from '../cms-state';\n\nexport const getCmsState: MemoizedSelector<\n  StateWithCms,\n  CmsState\n> = createFeatureSelector<CmsState>(CMS_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { CmsComponent } from '../../../model/cms.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { ComponentsContext, ComponentsState, StateWithCms } from '../cms-state';\r\nimport { getCmsState } from './feature.selectors';\r\n\r\nexport const getComponentsState: MemoizedSelector<\r\n  StateWithCms,\r\n  ComponentsState\r\n> = createSelector(getCmsState, (state) => state.components);\r\n\r\nexport const componentsContextSelectorFactory = (\r\n  uid: string\r\n): MemoizedSelector<StateWithCms, ComponentsContext> => {\r\n  return createSelector(getComponentsState, (componentsState) =>\r\n    StateUtils.entitySelector(componentsState, uid)\r\n  );\r\n};\r\n\r\nexport const componentsLoaderStateSelectorFactory = (\r\n  uid: string,\r\n  context: string\r\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<boolean>> => {\r\n  return createSelector(\r\n    componentsContextSelectorFactory(uid),\r\n    (componentsContext) =>\r\n      (componentsContext &&\r\n        componentsContext.pageContext &&\r\n        componentsContext.pageContext[context]) ||\r\n      StateUtils.initialLoaderState\r\n  );\r\n};\r\n\r\n/**\r\n * This selector will return:\r\n *   - true: component for this context exists\r\n *   - false: component for this context doesn't exist\r\n *   - undefined: if the exists status for component is unknown\r\n *\r\n * @param uid\r\n * @param context\r\n */\r\nexport const componentsContextExistsSelectorFactory = (\r\n  uid: string,\r\n  context: string\r\n): MemoizedSelector<StateWithCms, boolean | undefined> => {\r\n  return createSelector(\r\n    componentsLoaderStateSelectorFactory(uid, context),\r\n    (loaderState) => StateUtils.loaderValueSelector(loaderState)\r\n  );\r\n};\r\n\r\nexport const componentsDataSelectorFactory = (\r\n  uid: string\r\n): MemoizedSelector<StateWithCms, CmsComponent | undefined> => {\r\n  return createSelector(componentsContextSelectorFactory(uid), (state) =>\r\n    state ? state.component : undefined\r\n  );\r\n};\r\n\r\n/**\r\n * This selector will return:\r\n *   - CmsComponent instance: if we have component data for specified context\r\n *   - null: if there is no component data for specified context\r\n *   - undefined: if status of component data for specified context is unknown\r\n *\r\n * @param uid\r\n * @param context\r\n */\r\nexport const componentsSelectorFactory = (\r\n  uid: string,\r\n  context: string\r\n): MemoizedSelector<StateWithCms, CmsComponent | null | undefined> => {\r\n  return createSelector(\r\n    componentsDataSelectorFactory(uid),\r\n    componentsContextExistsSelectorFactory(uid, context),\r\n    (componentState, exists) => {\r\n      switch (exists) {\r\n        case true:\r\n          return componentState;\r\n        case false:\r\n          return null;\r\n        case undefined:\r\n          return undefined;\r\n      }\r\n    }\r\n  );\r\n};\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { NodeItem } from '../../model/node-item.model';\r\nimport { CmsState, StateWithCms } from '../cms-state';\r\nimport { getCmsState } from './feature.selectors';\r\n\r\nexport const getNavigationEntryItemState: MemoizedSelector<\r\n  StateWithCms,\r\n  StateUtils.EntityLoaderState<NodeItem>\r\n> = createSelector(getCmsState, (state: CmsState) => state.navigation);\r\n\r\nexport const getSelectedNavigationEntryItemState = (\r\n  nodeId: string\r\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<NodeItem>> => {\r\n  return createSelector(getNavigationEntryItemState, (nodes) =>\r\n    StateUtils.entityLoaderStateSelector(nodes, nodeId)\r\n  );\r\n};\r\n\r\nexport const getNavigationEntryItems = (\r\n  nodeId: string\r\n): MemoizedSelector<StateWithCms, NodeItem> => {\r\n  return createSelector(\r\n    getSelectedNavigationEntryItemState(nodeId),\r\n    (itemState) => StateUtils.loaderValueSelector(itemState)\r\n  );\r\n};\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { PageType } from '../../../model/cms.model';\r\nimport { PageContext } from '../../../routing';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { ContentSlotData } from '../../model/content-slot-data.model';\r\nimport { Page } from '../../model/page.model';\r\nimport { CmsState, IndexType, PageState, StateWithCms } from '../cms-state';\r\nimport { getCmsState } from './feature.selectors';\r\n\r\nconst getPageEntitiesSelector = (state: PageState) => state.pageData.entities;\r\nconst getIndexByType = (\r\n  index: IndexType,\r\n  type: PageType\r\n): StateUtils.EntityLoaderState<string> => {\r\n  switch (type) {\r\n    case PageType.CONTENT_PAGE: {\r\n      return index.content;\r\n    }\r\n    case PageType.PRODUCT_PAGE: {\r\n      return index.product;\r\n    }\r\n    case PageType.CATEGORY_PAGE: {\r\n      return index.category;\r\n    }\r\n    case PageType.CATALOG_PAGE: {\r\n      return index.catalog;\r\n    }\r\n  }\r\n  return { entities: {} };\r\n};\r\n\r\nconst getPageComponentTypesSelector: (page: Page) => string[] = (\r\n  page: Page\r\n) => {\r\n  const componentTypes = new Set<string>();\r\n  if (page && page.slots) {\r\n    for (const slot of Object.keys(page.slots)) {\r\n      for (const component of page.slots[slot].components || []) {\r\n        componentTypes.add(component.flexType);\r\n      }\r\n    }\r\n  }\r\n  return Array.from(componentTypes);\r\n};\r\n\r\nexport const getPageState: MemoizedSelector<\r\n  StateWithCms,\r\n  PageState\r\n> = createSelector(getCmsState, (state: CmsState) => state.page);\r\n\r\nexport const getPageStateIndex: MemoizedSelector<\r\n  StateWithCms,\r\n  IndexType\r\n> = createSelector(getPageState, (page: PageState) => page.index);\r\n\r\nexport const getPageStateIndexEntityLoaderState = (\r\n  pageContext: PageContext\r\n): MemoizedSelector<StateWithCms, StateUtils.EntityLoaderState<string>> =>\r\n  createSelector(getPageStateIndex, (index: IndexType) =>\r\n    getIndexByType(index, pageContext.type)\r\n  );\r\n\r\nexport const getPageStateIndexLoaderState = (\r\n  pageContext: PageContext\r\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<string>> =>\r\n  createSelector(\r\n    getPageStateIndexEntityLoaderState(pageContext),\r\n    (indexState) =>\r\n      StateUtils.entityLoaderStateSelector(indexState, pageContext.id)\r\n  );\r\n\r\nexport const getPageStateIndexValue = (\r\n  pageContext: PageContext\r\n): MemoizedSelector<StateWithCms, string> =>\r\n  createSelector(getPageStateIndexLoaderState(pageContext), (entity) =>\r\n    StateUtils.loaderValueSelector<string>(entity)\r\n  );\r\n\r\nexport const getPageEntities: MemoizedSelector<\r\n  StateWithCms,\r\n  { [id: string]: Page }\r\n> = createSelector(getPageState, getPageEntitiesSelector);\r\n\r\nexport const getPageData = (\r\n  pageContext: PageContext\r\n): MemoizedSelector<StateWithCms, Page> =>\r\n  createSelector(\r\n    getPageEntities,\r\n    getPageStateIndexValue(pageContext),\r\n    (entities: { [id: string]: Page }, indexValue: string) =>\r\n      entities[indexValue]\r\n  );\r\n\r\nexport const getPageComponentTypes = (\r\n  pageContext: PageContext\r\n): MemoizedSelector<StateWithCms, string[]> =>\r\n  createSelector(getPageData(pageContext), (pageData) =>\r\n    getPageComponentTypesSelector(pageData)\r\n  );\r\n\r\nexport const getCurrentSlotSelectorFactory = (\r\n  pageContext: PageContext,\r\n  position: string\r\n): MemoizedSelector<StateWithCms, ContentSlotData> => {\r\n  return createSelector(getPageData(pageContext), (entity) => {\r\n    if (entity) {\r\n      return entity.slots[position] || { components: [] };\r\n    }\r\n  });\r\n};\r\n","import { PageType } from '../../model/cms.model';\nimport { PageContext } from '../../routing/models/page-context.model';\n\nexport const CURRENT_CONTEXT_KEY = 'current';\n\n/**\n *\n * Serializes the provided page context.\n * The pattern used for serialization is: `pageContext.type-pageContext.id`.\n *\n * @param pageContext to serialize\n * @param ignoreContentPageId if set to true, and the PageType is of type ContentPage, then the serialized page context will not contain the ID.\n * Otherwise, the page context if fully serialized.\n */\nexport function serializePageContext(\n  pageContext: PageContext,\n  ignoreContentPageId?: boolean\n): string {\n  if (!pageContext) {\n    return CURRENT_CONTEXT_KEY;\n  }\n\n  if (ignoreContentPageId && pageContext.type === PageType.CONTENT_PAGE) {\n    return `${pageContext.type}`;\n  }\n\n  return `${pageContext.type}-${pageContext.id}`;\n}\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { combineLatest, Observable, of, queueScheduler, using } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  filter,\r\n  observeOn,\r\n  pluck,\r\n  shareReplay,\r\n  switchMap,\r\n  take,\r\n  tap,\r\n} from 'rxjs/operators';\r\nimport { CmsComponent } from '../../model/cms.model';\r\nimport { RoutingService } from '../../routing/facade/routing.service';\r\nimport { PageContext } from '../../routing/models/page-context.model';\r\nimport { LoaderState } from '../../state/utils/loader/loader-state';\r\nimport { ContentSlotData } from '../model/content-slot-data.model';\r\nimport { NodeItem } from '../model/node-item.model';\r\nimport { Page } from '../model/page.model';\r\nimport { CmsActions } from '../store/actions/index';\r\nimport { StateWithCms } from '../store/cms-state';\r\nimport { CmsSelectors } from '../store/selectors/index';\r\nimport { serializePageContext } from '../utils/cms-utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CmsService {\r\n  private components: {\r\n    [uid: string]: {\r\n      [pageContext: string]: Observable<CmsComponent>;\r\n    };\r\n  } = {};\r\n\r\n  constructor(\r\n    protected store: Store<StateWithCms>,\r\n    protected routingService: RoutingService\r\n  ) {}\r\n\r\n  /**\r\n   * Get current CMS page data\r\n   */\r\n  getCurrentPage(): Observable<Page> {\r\n    return this.routingService\r\n      .getPageContext()\r\n      .pipe(\r\n        switchMap((pageContext) =>\r\n          this.store.select(CmsSelectors.getPageData(pageContext))\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Get CMS component data by uid\r\n   *\r\n   * This method can be safely and optimally used to load multiple components data at the same time.\r\n   * Calling getComponentData multiple times for different components will always result in optimized\r\n   * back-end request: all components requested at the same time (in one event loop) will be loaded in one network call.\r\n   *\r\n   * In case the component data is not present, the method will load it.\r\n   * Otherwise, if the page context is not provided, the current page context from the router state will be used instead.\r\n   *\r\n   * @param uid CMS component uid\r\n   * @param pageContext if provided, it will be used to lookup the component data.\r\n   */\r\n  getComponentData<T extends CmsComponent | null>(\r\n    uid: string,\r\n    pageContext?: PageContext\r\n  ): Observable<T> {\r\n    const context = serializePageContext(pageContext, true);\r\n    if (!this.components[uid]) {\r\n      // create the component data structure, if it doesn't already exist\r\n      this.components[uid] = {};\r\n    }\r\n\r\n    const component = this.components[uid];\r\n    if (!component[context]) {\r\n      // create the component data and assign it to the component's context\r\n      component[context] = this.createComponentData(uid, pageContext);\r\n    }\r\n\r\n    return component[context] as Observable<T>;\r\n  }\r\n\r\n  private createComponentData<T extends CmsComponent>(\r\n    uid: string,\r\n    pageContext?: PageContext\r\n  ): Observable<T> {\r\n    if (!pageContext) {\r\n      return this.routingService.getPageContext().pipe(\r\n        filter((currentContext) => !!currentContext),\r\n        switchMap((currentContext) =>\r\n          this.getComponentData<T>(uid, currentContext)\r\n        )\r\n      );\r\n    }\r\n\r\n    const context = serializePageContext(pageContext, true);\r\n\r\n    const loading$ = combineLatest([\r\n      this.routingService.getNextPageContext(),\r\n      this.store.pipe(\r\n        select(CmsSelectors.componentsLoaderStateSelectorFactory(uid, context))\r\n      ),\r\n    ]).pipe(\r\n      observeOn(queueScheduler),\r\n      tap(([nextContext, loadingState]) => {\r\n        const attemptedLoad =\r\n          loadingState.loading || loadingState.success || loadingState.error;\r\n        // if the requested context is the same as the one that's currently being navigated to\r\n        // (as it might already been triggered and might be available shortly from page data)\r\n        // TODO(issue:3649), TODO(issue:3668) - this optimization could be removed\r\n        const couldBeLoadedWithPageData = nextContext\r\n          ? serializePageContext(nextContext, true) === context\r\n          : false;\r\n\r\n        if (!attemptedLoad && !couldBeLoadedWithPageData) {\r\n          this.store.dispatch(\r\n            new CmsActions.LoadCmsComponent({ uid, pageContext })\r\n          );\r\n        }\r\n      })\r\n    );\r\n\r\n    const component$ = this.store.pipe(\r\n      select(CmsSelectors.componentsSelectorFactory(uid, context)),\r\n      filter((component) => component !== undefined)\r\n    ) as Observable<T | null>;\r\n\r\n    return using(\r\n      () => loading$.subscribe(),\r\n      () => component$\r\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\r\n  }\r\n\r\n  /**\r\n   * Given the position, get the content slot data\r\n   * @param position : content slot position\r\n   */\r\n  getContentSlot(position: string): Observable<ContentSlotData> {\r\n    return this.routingService\r\n      .getPageContext()\r\n      .pipe(\r\n        switchMap((pageContext) =>\r\n          this.store.pipe(\r\n            select(\r\n              CmsSelectors.getCurrentSlotSelectorFactory(pageContext, position)\r\n            ),\r\n            filter(Boolean)\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Given navigation node uid, get items (with id and type) inside the navigation entries\r\n   * @param navigationNodeUid : uid of the navigation node\r\n   */\r\n  getNavigationEntryItems(navigationNodeUid: string): Observable<NodeItem> {\r\n    return this.store.pipe(\r\n      select(CmsSelectors.getNavigationEntryItems(navigationNodeUid))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Load navigation items data\r\n   * @param rootUid : the uid of the root navigation node\r\n   * @param itemList : list of items (with id and type)\r\n   */\r\n  loadNavigationItems(\r\n    rootUid: string,\r\n    itemList: { id: string; superType: string }[]\r\n  ): void {\r\n    this.store.dispatch(\r\n      new CmsActions.LoadCmsNavigationItems({\r\n        nodeId: rootUid,\r\n        items: itemList,\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Refresh the content of the latest cms page\r\n   */\r\n  refreshLatestPage(): void {\r\n    this.routingService\r\n      .getPageContext()\r\n      .pipe(take(1))\r\n      .subscribe((pageContext) =>\r\n        this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Refresh the cms page content by page Id\r\n   * @param pageId\r\n   */\r\n  refreshPageById(pageId: string): void {\r\n    const pageContext: PageContext = { id: pageId };\r\n    this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\r\n  }\r\n\r\n  /**\r\n   * Refresh cms component's content\r\n   * @param uid component uid\r\n   * @param pageContext an optional parameter that enables the caller to specify for which context the component should be refreshed.\r\n   * If not specified, 'current' page context is used.\r\n   */\r\n  refreshComponent(uid: string, pageContext?: PageContext): void {\r\n    this.store.dispatch(new CmsActions.LoadCmsComponent({ uid, pageContext }));\r\n  }\r\n\r\n  /**\r\n   * Given pageContext, return the CMS page data\r\n   * @param pageContext\r\n   */\r\n  getPageState(pageContext: PageContext): Observable<Page> {\r\n    return this.store.pipe(select(CmsSelectors.getPageData(pageContext)));\r\n  }\r\n\r\n  /**\r\n   * Given pageContext, return the CMS page data\r\n   * @param pageContext\r\n   */\r\n  getPageComponentTypes(pageContext: PageContext): Observable<string[]> {\r\n    return this.store.pipe(\r\n      select(CmsSelectors.getPageComponentTypes(pageContext))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Given pageContext, return whether the CMS page data exists or not\r\n   * @param pageContext\r\n   */\r\n  hasPage(pageContext: PageContext, forceReload = false): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(CmsSelectors.getPageStateIndexLoaderState(pageContext)),\r\n      tap((entity: LoaderState<string>) => {\r\n        const attemptedLoad = entity.loading || entity.success || entity.error;\r\n        const shouldReload = forceReload && !entity.loading;\r\n        if (!attemptedLoad || shouldReload) {\r\n          this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\r\n          forceReload = false;\r\n        }\r\n      }),\r\n      filter((entity) => {\r\n        if (!entity.hasOwnProperty('value')) {\r\n          // if we have incomplete state from SSR failed load transfer state,\r\n          // we should wait for reload and actual value\r\n          return false;\r\n        }\r\n        return entity.success || (entity.error && !entity.loading);\r\n      }),\r\n      pluck('success'),\r\n      catchError(() => of(false))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Given pageContext, return the CMS page data\r\n   **/\r\n  getPage(pageContext: PageContext, forceReload = false): Observable<Page> {\r\n    return this.hasPage(pageContext, forceReload).pipe(\r\n      switchMap((hasPage) =>\r\n        hasPage ? this.getPageState(pageContext) : of(null)\r\n      )\r\n    );\r\n  }\r\n\r\n  getPageIndex(pageContext: PageContext): Observable<string> {\r\n    return this.store.pipe(\r\n      select(CmsSelectors.getPageStateIndexValue(pageContext))\r\n    );\r\n  }\r\n\r\n  setPageFailIndex(pageContext: PageContext, value: string): void {\r\n    this.store.dispatch(new CmsActions.CmsSetPageFailIndex(pageContext, value));\r\n  }\r\n}\r\n","import { CmsComponent } from '../../model/cms.model';\r\nimport { ContentSlotData } from './content-slot-data.model';\r\n\r\nexport interface Page {\r\n  pageId?: string;\r\n  name?: string;\r\n  type?: string;\r\n  title?: string;\r\n  template?: string;\r\n  loadTime?: number;\r\n  slots?: { [key: string]: ContentSlotData };\r\n  properties?: any;\r\n  label?: string;\r\n}\r\n\r\n/**\r\n * Represents the cms structure for pages, slots and components.\r\n */\r\nexport interface CmsStructureModel {\r\n  page?: Page;\r\n  components?: CmsComponent[];\r\n}\r\n\r\n/**\r\n * Represents the page meta data that can be used\r\n * to resolve page data and seo related data.\r\n */\r\nexport interface PageMeta {\r\n  /**\r\n   * the page title is used for the page title tag which\r\n   * is visible in the browser navigation as well as in the\r\n   * Search Engine Result Page\r\n   */\r\n  title?: string;\r\n\r\n  /**\r\n   * the page heading is typically used in the UI\r\n   */\r\n  heading?: string;\r\n\r\n  /**\r\n   * the page description is used in the Search Engine Result Page\r\n   */\r\n  description?: string;\r\n\r\n  /**\r\n   * the robots information drives search engines to index the page and\r\n   * follow links in the page\r\n   */\r\n  robots?: PageRobotsMeta[];\r\n\r\n  /**\r\n   * image that can be added to the og:image metatag\r\n   */\r\n  image?: string;\r\n\r\n  /**\r\n   * the list of breadcrumbs that can be rendered in the page UI.\r\n   */\r\n  breadcrumbs?: BreadcrumbMeta[];\r\n}\r\n\r\nexport interface BreadcrumbMeta {\r\n  label: string;\r\n  link: string;\r\n}\r\n\r\nexport enum PageRobotsMeta {\r\n  INDEX = 'INDEX',\r\n  NOINDEX = 'NOINDEX',\r\n  FOLLOW = 'FOLLOW',\r\n  NOFOLLOW = 'NOFOLLOW',\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { CmsService } from '../../cms/facade/cms.service';\r\nimport { Page, PageRobotsMeta } from '../../cms/model/page.model';\r\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\r\nimport {\r\n  PageRobotsResolver,\r\n  PageTitleResolver,\r\n} from '../../cms/page/page.resolvers';\r\nimport { PageType } from '../../model/cms.model';\r\n\r\n/**\r\n * Resolves the page metadata for the Cart page (Using the `PageType.CONTENT_PAGE`\r\n * and the `CartPageTemplate`). If the cart page matches this template, the more\r\n * generic `ContentPageMetaResolver` is overriden by this resolver.\r\n *\r\n * The page title and robots are resolved in this implementation only.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CartPageMetaResolver extends PageMetaResolver\r\n  implements PageTitleResolver, PageRobotsResolver {\r\n  protected cms$: Observable<Page> = this.cms\r\n    .getCurrentPage()\r\n    .pipe(filter((page) => !!page));\r\n\r\n  constructor(protected cms: CmsService) {\r\n    super();\r\n    this.pageType = PageType.CONTENT_PAGE;\r\n    this.pageTemplate = 'CartPageTemplate';\r\n  }\r\n\r\n  /**\r\n   * Resolves the page title, which is driven by the backend.\r\n   */\r\n  resolveTitle(): Observable<string> {\r\n    return this.cms$.pipe(map((p) => p.title));\r\n  }\r\n\r\n  /**\r\n   * Returns robots for the cart pages, which default to NOINDEX and NOFOLLOW.\r\n   */\r\n  resolveRobots(): Observable<PageRobotsMeta[]> {\r\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { distinctUntilKeyChanged, filter, map } from 'rxjs/operators';\r\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context';\r\nimport { SiteContextParamsService } from '../../site-context/services/site-context-params.service';\r\nimport { StatePersistenceService } from '../../state/services/state-persistence.service';\r\nimport { CartActions, MultiCartSelectors } from '../store';\r\nimport { StateWithMultiCart } from '../store/multi-cart-state';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MultiCartStatePersistenceService {\r\n  constructor(\r\n    protected statePersistenceService: StatePersistenceService,\r\n    protected store: Store<StateWithMultiCart>,\r\n    protected siteContextParamsService: SiteContextParamsService\r\n  ) {}\r\n\r\n  public sync() {\r\n    this.statePersistenceService.syncWithStorage({\r\n      key: 'cart',\r\n      state$: this.getCartState(),\r\n      context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]),\r\n      onRead: (state) => this.onRead(state),\r\n    });\r\n  }\r\n\r\n  protected getCartState(): Observable<{ active: string }> {\r\n    return this.store.pipe(\r\n      select(MultiCartSelectors.getMultiCartState),\r\n      filter((state) => !!state),\r\n      distinctUntilKeyChanged('active'),\r\n      map((state) => {\r\n        return {\r\n          active: state.active,\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  protected onRead(state: { active: string }) {\r\n    this.store.dispatch(new CartActions.ClearCartState());\r\n    if (state) {\r\n      this.store.dispatch(new CartActions.SetActiveCartId(state.active));\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { CartActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class MultiCartEffects {\r\n  @Effect()\r\n  setTempCart$ = this.actions$.pipe(\r\n    ofType(CartActions.SET_TEMP_CART),\r\n    map((action: CartActions.SetTempCart) => {\r\n      return new CartActions.RemoveCart({ cartId: action.payload.tempCartId });\r\n    })\r\n  );\r\n\r\n  // TODO(#7241): Remove when we drop ADD_VOUCHER process and we sort out checkout and cart dependencies\r\n  @Effect()\r\n  processesIncrement$: Observable<\r\n    CartActions.CartProcessesIncrement\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.CART_ADD_VOUCHER),\r\n    map((action: CartActions.CartAddVoucher) => action.payload),\r\n    map((payload) => new CartActions.CartProcessesIncrement(payload.cartId))\r\n  );\r\n\r\n  constructor(private actions$: Actions) {}\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { StateModule } from '../../state/state.module';\r\nimport { CartEntryEffects } from './effects/cart-entry.effect';\r\nimport { CartVoucherEffects } from './effects/cart-voucher.effect';\r\nimport { CartEffects } from './effects/cart.effect';\r\nimport { MultiCartEffects } from './effects/multi-cart.effect';\r\nimport { WishListEffects } from './effects/wish-list.effect';\r\nimport { MULTI_CART_FEATURE } from './multi-cart-state';\r\nimport {\r\n  multiCartMetaReducers,\r\n  multiCartReducerProvider,\r\n  multiCartReducerToken,\r\n} from './reducers/index';\r\n\r\nconst effects: any[] = [\r\n  CartEffects,\r\n  CartEntryEffects,\r\n  CartVoucherEffects,\r\n  WishListEffects,\r\n  MultiCartEffects,\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    StateModule,\r\n    StoreModule.forFeature(MULTI_CART_FEATURE, multiCartReducerToken, {\r\n      metaReducers: multiCartMetaReducers,\r\n    }),\r\n    EffectsModule.forFeature(effects),\r\n  ],\r\n  providers: [multiCartReducerProvider],\r\n})\r\nexport class MultiCartStoreModule {}\r\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\r\nimport { ConfigInitializerService } from '../config/config-initializer/config-initializer.service';\r\nimport { CartEventModule } from './event/cart-event.module';\r\nimport { CartPageMetaResolver } from './services/cart-page-meta.resolver';\r\nimport { MultiCartStatePersistenceService } from './services/multi-cart-state-persistence.service';\r\nimport { MultiCartStoreModule } from './store/multi-cart-store.module';\r\n\r\nexport function cartStatePersistenceFactory(\r\n  cartStatePersistenceService: MultiCartStatePersistenceService,\r\n  configInit: ConfigInitializerService\r\n) {\r\n  const result = () =>\r\n    configInit.getStableConfig('context').then(() => {\r\n      cartStatePersistenceService.sync();\r\n    });\r\n  return result;\r\n}\r\n\r\n@NgModule({\r\n  imports: [MultiCartStoreModule, CartEventModule],\r\n})\r\nexport class CartModule {\r\n  static forRoot(): ModuleWithProviders<CartModule> {\r\n    return {\r\n      ngModule: CartModule,\r\n      providers: [\r\n        {\r\n          provide: PageMetaResolver,\r\n          useExisting: CartPageMetaResolver,\r\n          multi: true,\r\n        },\r\n        {\r\n          provide: APP_INITIALIZER,\r\n          useFactory: cartStatePersistenceFactory,\r\n          deps: [MultiCartStatePersistenceService, ConfigInitializerService],\r\n          multi: true,\r\n        },\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class CartConfig {\r\n  cart?: {\r\n    selectiveCart?: {\r\n      enabled?: boolean;\r\n    };\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/index';\r\nimport * as fromProcessStore from '../../process/store/process-state';\r\nimport {\r\n  getProcessErrorFactory,\r\n  getProcessLoadingFactory,\r\n  getProcessSuccessFactory,\r\n} from '../../process/store/selectors/process.selectors';\r\nimport { CartActions } from '../store/actions/index';\r\nimport { ADD_VOUCHER_PROCESS_ID } from '../store/multi-cart-state';\r\nimport { ActiveCartService } from './active-cart.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CartVoucherService {\r\n  constructor(\r\n    protected store: Store<fromProcessStore.StateWithProcess<void>>,\r\n    protected authService: AuthService,\r\n    protected activeCartService: ActiveCartService\r\n  ) {}\r\n\r\n  addVoucher(voucherId: string, cartId?: string): void {\r\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\r\n      this.store.dispatch(\r\n        new CartActions.CartAddVoucher({\r\n          userId: occUserId,\r\n          cartId: cartIdentifier,\r\n          voucherId: voucherId,\r\n        })\r\n      )\r\n    );\r\n  }\r\n\r\n  removeVoucher(voucherId: string, cartId?: string): void {\r\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\r\n      this.store.dispatch(\r\n        new CartActions.CartRemoveVoucher({\r\n          userId: occUserId,\r\n          cartId: cartIdentifier,\r\n          voucherId: voucherId,\r\n        })\r\n      )\r\n    );\r\n  }\r\n\r\n  // TODO(#7241): Remove when switching to event system for add voucher\r\n  /**\r\n   * Get add voucher process error flag\r\n   * @deprecated since 2.0\r\n   */\r\n  getAddVoucherResultError(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessErrorFactory(ADD_VOUCHER_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  // TODO(#7241): Remove when switching to event system for add voucher\r\n  /**\r\n   * Get add voucher process success flag\r\n   * @deprecated since 2.0\r\n   */\r\n  getAddVoucherResultSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(ADD_VOUCHER_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  // TODO(#7241): Remove when switching to event system for add voucher\r\n  /**\r\n   * Get add voucher process loading flag\r\n   * @deprecated since 2.0\r\n   */\r\n  getAddVoucherResultLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(ADD_VOUCHER_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  // TODO(#7241): Remove when switching to event system for add voucher\r\n  /**\r\n   * Reset add voucher process\r\n   * @deprecated since 2.0\r\n   */\r\n  resetAddVoucherProcessingState(): void {\r\n    this.store.dispatch(new CartActions.CartResetAddVoucher());\r\n  }\r\n\r\n  private combineUserAndCartId(cartId: string): Observable<[string, string]> {\r\n    if (cartId) {\r\n      return this.authService.getOccUserId().pipe(\r\n        take(1),\r\n        map((userId) => [userId, cartId])\r\n      );\r\n    } else {\r\n      return combineLatest([\r\n        this.authService.getOccUserId(),\r\n        this.activeCartService.getActiveCartId(),\r\n      ]).pipe(take(1));\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { Title, User, UserSignUp } from '../../model/misc.model';\r\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/index';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport {\r\n  getProcessErrorFactory,\r\n  getProcessLoadingFactory,\r\n  getProcessSuccessFactory,\r\n} from '../../process/store/selectors/process.selectors';\r\nimport { UserActions } from '../store/actions/index';\r\nimport { UsersSelectors } from '../store/selectors/index';\r\nimport {\r\n  REGISTER_USER_PROCESS_ID,\r\n  REMOVE_USER_PROCESS_ID,\r\n  StateWithUser,\r\n  UPDATE_EMAIL_PROCESS_ID,\r\n  UPDATE_PASSWORD_PROCESS_ID,\r\n  UPDATE_USER_DETAILS_PROCESS_ID,\r\n} from '../store/user-state';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserService {\r\n  constructor(\r\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\r\n    protected authService: AuthService\r\n  ) {}\r\n\r\n  /**\r\n   * Returns a user\r\n   */\r\n  get(): Observable<User> {\r\n    return this.store.pipe(\r\n      select(UsersSelectors.getDetails),\r\n      tap((details) => {\r\n        if (Object.keys(details).length === 0) {\r\n          this.load();\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Loads the user's details\r\n   */\r\n  load(): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      if (userId !== OCC_USER_ID_ANONYMOUS) {\r\n        this.store.dispatch(new UserActions.LoadUserDetails(userId));\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Register a new user\r\n   *\r\n   * @param submitFormData as UserRegisterFormData\r\n   */\r\n  register(userRegisterFormData: UserSignUp): void {\r\n    this.store.dispatch(new UserActions.RegisterUser(userRegisterFormData));\r\n  }\r\n\r\n  /**\r\n   * Register a new user from guest\r\n   *\r\n   * @param guid\r\n   * @param password\r\n   */\r\n  registerGuest(guid: string, password: string): void {\r\n    this.store.dispatch(new UserActions.RegisterGuest({ guid, password }));\r\n  }\r\n\r\n  /**\r\n   * Returns the register user process loading flag\r\n   */\r\n  getRegisterUserResultLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(REGISTER_USER_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the register user process success flag\r\n   */\r\n  getRegisterUserResultSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(REGISTER_USER_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the register user process error flag\r\n   */\r\n  getRegisterUserResultError(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessErrorFactory(REGISTER_USER_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resets the register user process flags\r\n   */\r\n  resetRegisterUserProcessState(): void {\r\n    return this.store.dispatch(new UserActions.ResetRegisterUserProcess());\r\n  }\r\n\r\n  /**\r\n   * Remove user account, that's also called close user's account\r\n   */\r\n  remove(): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(new UserActions.RemoveUser(userId));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the remove user loading flag\r\n   */\r\n  getRemoveUserResultLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(REMOVE_USER_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the remove user failure outcome.\r\n   */\r\n  getRemoveUserResultError(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessErrorFactory(REMOVE_USER_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the remove user process success outcome.\r\n   */\r\n  getRemoveUserResultSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(REMOVE_USER_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resets the remove user process state. The state needs to be reset after the process\r\n   * concludes, regardless if it's a success or an error\r\n   */\r\n  resetRemoveUserProcessState(): void {\r\n    this.store.dispatch(new UserActions.RemoveUserReset());\r\n  }\r\n\r\n  /**\r\n   * Returns titles\r\n   */\r\n  getTitles(): Observable<Title[]> {\r\n    return this.store.pipe(select(UsersSelectors.getAllTitles));\r\n  }\r\n\r\n  /**\r\n   * Retrieves titles\r\n   */\r\n  loadTitles(): void {\r\n    this.store.dispatch(new UserActions.LoadTitles());\r\n  }\r\n\r\n  /**\r\n   * Return whether user's password is successfully reset\r\n   */\r\n  isPasswordReset(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getResetPassword));\r\n  }\r\n\r\n  /**\r\n   * Updates the user's details\r\n   * @param userDetails to be updated\r\n   */\r\n  updatePersonalDetails(userDetails: User): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.UpdateUserDetails({\r\n          username: userId,\r\n          userDetails,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the update user's personal details loading flag\r\n   */\r\n  getUpdatePersonalDetailsResultLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(UPDATE_USER_DETAILS_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the update user's personal details error flag\r\n   */\r\n  getUpdatePersonalDetailsResultError(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessErrorFactory(UPDATE_USER_DETAILS_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the update user's personal details success flag\r\n   */\r\n  getUpdatePersonalDetailsResultSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(UPDATE_USER_DETAILS_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resets the update user details processing state\r\n   */\r\n  resetUpdatePersonalDetailsProcessingState(): void {\r\n    this.store.dispatch(new UserActions.ResetUpdateUserDetails());\r\n  }\r\n\r\n  /**\r\n   * Reset new password.  Part of the forgot password flow.\r\n   * @param token\r\n   * @param password\r\n   */\r\n  resetPassword(token: string, password: string): void {\r\n    this.store.dispatch(new UserActions.ResetPassword({ token, password }));\r\n  }\r\n\r\n  /*\r\n   * Request an email to reset a forgotten password.\r\n   */\r\n  requestForgotPasswordEmail(userEmailAddress: string): void {\r\n    this.store.dispatch(\r\n      new UserActions.ForgotPasswordEmailRequest(userEmailAddress)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates the user's email\r\n   */\r\n  updateEmail(password: string, newUid: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.UpdateEmailAction({\r\n          uid: userId,\r\n          password,\r\n          newUid,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the update user's email success flag\r\n   */\r\n  getUpdateEmailResultSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(UPDATE_EMAIL_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the update user's email error flag\r\n   */\r\n  getUpdateEmailResultError(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessErrorFactory(UPDATE_EMAIL_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the update user's email loading flag\r\n   */\r\n  getUpdateEmailResultLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(UPDATE_EMAIL_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resets the update user's email processing state\r\n   */\r\n  resetUpdateEmailResultState(): void {\r\n    this.store.dispatch(new UserActions.ResetUpdateEmailAction());\r\n  }\r\n\r\n  /**\r\n   * Updates the password for the user\r\n   * @param oldPassword the current password that will be changed\r\n   * @param newPassword the new password\r\n   */\r\n  updatePassword(oldPassword: string, newPassword: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.UpdatePassword({\r\n          userId,\r\n          oldPassword,\r\n          newPassword,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the update password loading flag\r\n   */\r\n  getUpdatePasswordResultLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(UPDATE_PASSWORD_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the update password failure outcome.\r\n   */\r\n  getUpdatePasswordResultError(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessErrorFactory(UPDATE_PASSWORD_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the update password process success outcome.\r\n   */\r\n  getUpdatePasswordResultSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(UPDATE_PASSWORD_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resets the update password process state. The state needs to be reset after the process\r\n   * concludes, regardless if it's a success or an error\r\n   */\r\n  resetUpdatePasswordProcessState(): void {\r\n    this.store.dispatch(new UserActions.UpdatePasswordReset());\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CartConfig } from '../config/cart-config';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CartConfigService {\r\n  constructor(protected config: CartConfig) {}\r\n\r\n  isSelectiveCartEnabled(): boolean {\r\n    return Boolean(this.config?.cart?.selectiveCart?.enabled);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\r\nimport { filter, map, shareReplay, switchMap, take, tap } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { Cart } from '../../model/cart.model';\r\nimport { OrderEntry } from '../../model/order.model';\r\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\r\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\r\nimport { LoaderState } from '../../state/utils/loader/loader-state';\r\nimport { UserService } from '../../user/facade/user.service';\r\nimport { CartConfigService } from '../services/cart-config.service';\r\nimport { StateWithMultiCart } from '../store/multi-cart-state';\r\nimport { MultiCartService } from './multi-cart.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SelectiveCartService {\r\n  private customerId: string;\r\n  private userId: string;\r\n  private cartId: string;\r\n  private selectiveCart$: Observable<Cart>;\r\n  private cartId$: BehaviorSubject<string> = new BehaviorSubject<string>(\r\n    undefined\r\n  );\r\n\r\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\r\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\r\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\r\n\r\n  private cartSelector$ = this.cartId$.pipe(\r\n    switchMap((cartId) => {\r\n      this.cartId = cartId;\r\n      return this.multiCartService.getCartEntity(cartId);\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    protected store: Store<StateWithMultiCart>,\r\n    protected userService: UserService,\r\n    protected authService: AuthService,\r\n    protected multiCartService: MultiCartService,\r\n    protected baseSiteService: BaseSiteService,\r\n    protected cartConfigService: CartConfigService\r\n  ) {\r\n    combineLatest([\r\n      this.userService.get(),\r\n      this.baseSiteService.getActive(),\r\n    ]).subscribe(([user, activeBaseSite]) => {\r\n      if (user && user.customerId && activeBaseSite) {\r\n        this.customerId = user.customerId;\r\n        this.cartId$.next(`selectivecart${activeBaseSite}${this.customerId}`);\r\n      } else if (user && !user.customerId) {\r\n        this.cartId$.next(undefined);\r\n      }\r\n    });\r\n\r\n    this.authService.getOccUserId().subscribe((userId) => {\r\n      this.userId = userId;\r\n\r\n      if (this.isJustLoggedIn(userId)) {\r\n        this.load();\r\n      }\r\n\r\n      this.previousUserId = userId;\r\n    });\r\n\r\n    this.selectiveCart$ = this.cartSelector$.pipe(\r\n      map((cartEntity: LoaderState<Cart>): {\r\n        cart: Cart;\r\n        loading: boolean;\r\n        loaded: boolean;\r\n      } => {\r\n        return {\r\n          cart: cartEntity.value,\r\n          loading: cartEntity.loading,\r\n          loaded:\r\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\r\n        };\r\n      }),\r\n      filter(({ loading }) => !loading),\r\n      tap(({ cart, loaded }) => {\r\n        if (this.cartId && this.isEmpty(cart) && !loaded) {\r\n          this.load();\r\n        }\r\n      }),\r\n      map(({ cart }) => (cart ? cart : {})),\r\n      shareReplay({ bufferSize: 1, refCount: true })\r\n    );\r\n  }\r\n\r\n  getCart(): Observable<Cart> {\r\n    return this.selectiveCart$;\r\n  }\r\n\r\n  getEntries(): Observable<OrderEntry[]> {\r\n    return this.multiCartService.getEntries(this.cartId);\r\n  }\r\n\r\n  getLoaded(): Observable<boolean> {\r\n    return this.cartSelector$.pipe(\r\n      map((cart) => (cart.success || cart.error) && !cart.loading)\r\n    );\r\n  }\r\n\r\n  private load() {\r\n    if (this.isLoggedIn(this.userId) && this.cartId) {\r\n      this.multiCartService.loadCart({\r\n        userId: this.userId,\r\n        cartId: this.cartId,\r\n      });\r\n    }\r\n  }\r\n\r\n  addEntry(productCode: string, quantity: number): void {\r\n    let loadAttempted = false;\r\n    this.cartSelector$\r\n      .pipe(\r\n        filter(() => !loadAttempted),\r\n        switchMap((cartState) => {\r\n          if (this.isEmpty(cartState.value) && !cartState.loading) {\r\n            loadAttempted = true;\r\n            this.load();\r\n          }\r\n          return of(cartState);\r\n        }),\r\n        filter((cartState) => !this.isEmpty(cartState.value)),\r\n        take(1)\r\n      )\r\n      .subscribe(() => {\r\n        this.multiCartService.addEntry(\r\n          this.userId,\r\n          this.cartId,\r\n          productCode,\r\n          quantity\r\n        );\r\n      });\r\n  }\r\n\r\n  removeEntry(entry: OrderEntry): void {\r\n    this.multiCartService.removeEntry(\r\n      this.userId,\r\n      this.cartId,\r\n      entry.entryNumber\r\n    );\r\n  }\r\n\r\n  updateEntry(entryNumber: number, quantity: number): void {\r\n    this.multiCartService.updateEntry(\r\n      this.userId,\r\n      this.cartId,\r\n      entryNumber,\r\n      quantity\r\n    );\r\n  }\r\n\r\n  getEntry(productCode: string): Observable<OrderEntry> {\r\n    return this.multiCartService.getEntry(this.cartId, productCode);\r\n  }\r\n\r\n  /**\r\n   * Indicates if selectiveCart feature is enabled based on cart configuration.\r\n   */\r\n  isEnabled(): boolean {\r\n    return this.cartConfigService.isSelectiveCartEnabled();\r\n  }\r\n\r\n  private isEmpty(cart: Cart): boolean {\r\n    return (\r\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\r\n    );\r\n  }\r\n\r\n  private isJustLoggedIn(userId: string): boolean {\r\n    return (\r\n      this.isLoggedIn(userId) &&\r\n      this.previousUserId !== userId && // *just* logged in\r\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\r\n    );\r\n  }\r\n\r\n  private isLoggedIn(userId: string): boolean {\r\n    return typeof userId !== 'undefined' && userId !== OCC_USER_ID_ANONYMOUS;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport {\r\n  distinctUntilChanged,\r\n  filter,\r\n  map,\r\n  switchMap,\r\n  take,\r\n  tap,\r\n  withLatestFrom,\r\n} from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { Cart, OrderEntry } from '../../model/index';\r\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\r\nimport { UserService } from '../../user/facade/user.service';\r\nimport { CartActions } from '../store/actions/index';\r\nimport { StateWithMultiCart } from '../store/multi-cart-state';\r\nimport { MultiCartSelectors } from '../store/selectors/index';\r\nimport { getWishlistName } from '../utils/utils';\r\nimport { MultiCartService } from './multi-cart.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class WishListService {\r\n  constructor(\r\n    protected store: Store<StateWithMultiCart>,\r\n    protected authService: AuthService,\r\n    protected userService: UserService,\r\n    protected multiCartService: MultiCartService\r\n  ) {}\r\n\r\n  createWishList(userId: string, name?: string, description?: string): void {\r\n    this.store.dispatch(\r\n      new CartActions.CreateWishList({ userId, name, description })\r\n    );\r\n  }\r\n\r\n  getWishList(): Observable<Cart> {\r\n    return combineLatest([\r\n      this.getWishListId(),\r\n      this.userService.get(),\r\n      this.authService.getOccUserId(),\r\n    ]).pipe(\r\n      distinctUntilChanged(),\r\n      tap(([wishListId, user, userId]) => {\r\n        if (\r\n          !Boolean(wishListId) &&\r\n          userId !== OCC_USER_ID_ANONYMOUS &&\r\n          Boolean(user) &&\r\n          Boolean(user.customerId)\r\n        ) {\r\n          this.loadWishList(userId, user.customerId);\r\n        }\r\n      }),\r\n      filter(([wishListId]) => Boolean(wishListId)),\r\n      switchMap(([wishListId]) => this.multiCartService.getCart(wishListId))\r\n    );\r\n  }\r\n\r\n  loadWishList(userId: string, customerId: string): void {\r\n    this.store.dispatch(\r\n      new CartActions.LoadWishList({\r\n        userId,\r\n        customerId,\r\n        tempCartId: getWishlistName(customerId),\r\n      })\r\n    );\r\n  }\r\n\r\n  addEntry(productCode: string): void {\r\n    this.getWishListId()\r\n      .pipe(\r\n        distinctUntilChanged(),\r\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\r\n        tap(([wishListId, userId, user]) => {\r\n          if (\r\n            !Boolean(wishListId) &&\r\n            Boolean(user) &&\r\n            Boolean(user.customerId)\r\n          ) {\r\n            this.loadWishList(userId, user.customerId);\r\n          }\r\n        }),\r\n        filter(([wishListId]) => Boolean(wishListId)),\r\n        take(1)\r\n      )\r\n      .subscribe(([wishListId, userId]) =>\r\n        this.multiCartService.addEntry(userId, wishListId, productCode, 1)\r\n      );\r\n  }\r\n\r\n  removeEntry(entry: OrderEntry): void {\r\n    this.getWishListId()\r\n      .pipe(\r\n        distinctUntilChanged(),\r\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\r\n        tap(([wishListId, userId, user]) => {\r\n          if (\r\n            !Boolean(wishListId) &&\r\n            Boolean(user) &&\r\n            Boolean(user.customerId)\r\n          ) {\r\n            this.loadWishList(userId, user.customerId);\r\n          }\r\n        }),\r\n        filter(([wishListId]) => Boolean(wishListId)),\r\n        take(1)\r\n      )\r\n      .subscribe(([wishListId, userId]) =>\r\n        this.multiCartService.removeEntry(userId, wishListId, entry.entryNumber)\r\n      );\r\n  }\r\n\r\n  getWishListLoading(): Observable<boolean> {\r\n    return this.getWishListId().pipe(\r\n      switchMap((wishListId) =>\r\n        this.multiCartService\r\n          .isStable(wishListId)\r\n          .pipe(map((stable) => !stable))\r\n      )\r\n    );\r\n  }\r\n\r\n  protected getWishListId(): Observable<string> {\r\n    return this.store.pipe(select(MultiCartSelectors.getWishListId));\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\n\nexport abstract class TranslationService {\n  /**\n   * Translates given key with options.\n   * If key is missing, it tries to load the chunk and emits a value when chunk is loaded.\n   * If key is missing after loaded chunk, a fallback value is emitted\n   *\n   * @param key translation key\n   * @param options values for interpolation in translation\n   * @param whitespaceUntilLoaded if true, immediately emits a non-breaking space\n   */\n  translate: (\n    key: string,\n    options?: any,\n    whitespaceUntilLoaded?: boolean\n  ) => Observable<string>;\n\n  /**\n   * Loads chunks with translations\n   *\n   * @param chunkNames array of chunk names to be loaded\n   */\n  loadChunks: (chunkNames: string | string[]) => Promise<any>;\n}\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\r\nimport { PageRobotsMeta } from '../../cms/model/page.model';\r\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\r\nimport {\r\n  PageRobotsResolver,\r\n  PageTitleResolver,\r\n} from '../../cms/page/page.resolvers';\r\nimport { TranslationService } from '../../i18n/translation.service';\r\nimport { PageType } from '../../model/cms.model';\r\n\r\n/**\r\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`\r\n * and the `MultiStepCheckoutSummaryPageTemplate`. If the checkout page matches this template,\r\n * the more generic `ContentPageMetaResolver` is overriden by this resolver.\r\n *\r\n * The page title and robots are resolved in this implementation only.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CheckoutPageMetaResolver extends PageMetaResolver\r\n  implements PageTitleResolver, PageRobotsResolver {\r\n  protected cart$ = this.activeCartService.getActive();\r\n\r\n  constructor(\r\n    protected translation: TranslationService,\r\n    protected activeCartService: ActiveCartService\r\n  ) {\r\n    super();\r\n    this.pageType = PageType.CONTENT_PAGE;\r\n    this.pageTemplate = 'MultiStepCheckoutSummaryPageTemplate';\r\n  }\r\n\r\n  resolveTitle(): Observable<string> {\r\n    return this.cart$.pipe(\r\n      switchMap((c) =>\r\n        this.translation.translate('pageMetaResolver.checkout.title', {\r\n          count: c.totalItems,\r\n        })\r\n      )\r\n    );\r\n  }\r\n\r\n  resolveRobots(): Observable<PageRobotsMeta[]> {\r\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\r\n  }\r\n}\r\n","import { CheckoutActions } from '../actions/index';\nimport { AddressVerificationState } from '../checkout-state';\n\nexport const initialState: AddressVerificationState = {\n  results: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: CheckoutActions.AddressVerificationActions\n): AddressVerificationState {\n  switch (action.type) {\n    case CheckoutActions.VERIFY_ADDRESS_SUCCESS: {\n      const results = action.payload;\n\n      return {\n        ...state,\n        results,\n      };\n    }\n\n    case CheckoutActions.VERIFY_ADDRESS_FAIL: {\n      return {\n        ...state,\n        results: 'FAIL',\n      };\n    }\n\n    case CheckoutActions.CLEAR_ADDRESS_VERIFICATION_RESULTS: {\n      return {\n        ...state,\n        results: {},\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getAddressVerificationResults = (\n  state: AddressVerificationState\n) => state.results;\n","import { CardType } from '../../../model/cart.model';\nimport { CheckoutActions } from '../actions/index';\nimport { CardTypesState } from '../checkout-state';\n\nexport const initialState: CardTypesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CardTypesAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CardTypesState {\n  switch (action.type) {\n    case CheckoutActions.LOAD_CARD_TYPES_SUCCESS: {\n      const cardTypes: CardType[] = action.payload;\n      const entities = cardTypes.reduce(\n        (cardTypesEntities: { [code: string]: CardType }, name: CardType) => {\n          return {\n            ...cardTypesEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getCardTypesEntites = (state: CardTypesState) => state.entities;\n","import { Address } from '../../../model/address.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { CheckoutStepsState } from '../checkout-state';\nimport { CheckoutActions } from './../actions/index';\n\nexport const initialState: CheckoutStepsState = {\n  address: {},\n  deliveryMode: {\n    supported: {},\n    selected: '',\n  },\n  paymentDetails: {},\n  orderDetails: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CheckoutAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CheckoutStepsState {\n  switch (action.type) {\n    case CheckoutActions.ADD_DELIVERY_ADDRESS_SUCCESS:\n    case CheckoutActions.SET_DELIVERY_ADDRESS_SUCCESS: {\n      const address: Address = action.payload;\n\n      return {\n        ...state,\n        address,\n      };\n    }\n\n    case CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS: {\n      const supportedModes = action.payload;\n      if (!supportedModes) {\n        return state;\n      }\n\n      const supported = supportedModes.reduce(\n        (modes: { [code: string]: DeliveryMode }, mode: DeliveryMode) => {\n          return {\n            ...modes,\n            [mode.code]: mode,\n          };\n        },\n        {\n          ...state.deliveryMode.supported,\n        }\n      );\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported,\n        },\n      };\n    }\n\n    case CheckoutActions.SET_DELIVERY_MODE_SUCCESS: {\n      const selected = action.payload;\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected,\n        },\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_SUCCESS:\n    case CheckoutActions.SET_PAYMENT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        paymentDetails: action.payload,\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_FAIL: {\n      const paymentDetails = action.payload;\n      if (paymentDetails['hasError']) {\n        return {\n          ...state,\n          paymentDetails,\n        };\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.PLACE_ORDER_SUCCESS: {\n      const orderDetails: Order = action.payload;\n\n      return {\n        ...state,\n        orderDetails,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DATA: {\n      return initialState;\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_STEP: {\n      const stepNumber = action.payload;\n      switch (stepNumber) {\n        case 1: {\n          return {\n            ...state,\n            address: {},\n          };\n        }\n\n        case 2: {\n          return {\n            ...state,\n            deliveryMode: {\n              ...state.deliveryMode,\n              supported: {},\n              selected: '',\n            },\n          };\n        }\n\n        case 3: {\n          return {\n            ...state,\n            paymentDetails: {},\n          };\n        }\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.CLEAR_SUPPORTED_DELIVERY_MODES:\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported: {},\n        },\n      };\n    }\n    case CheckoutActions.LOAD_CHECKOUT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        address: action.payload.deliveryAddress,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected:\n            action.payload.deliveryMode && action.payload.deliveryMode.code,\n        },\n        paymentDetails: action.payload.paymentInfo,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS: {\n      return {\n        ...state,\n        address: {},\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected: '',\n        },\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\r\n\r\nimport { ActionReducerMap } from '@ngrx/store';\r\n\r\nimport {\r\n  CheckoutState,\r\n  CHECKOUT_DETAILS,\r\n  CheckoutStepsState,\r\n} from '../checkout-state';\r\n\r\nimport * as fromAddressVerification from './address-verification.reducer';\r\nimport * as fromCardTypes from './card-types.reducer';\r\nimport * as fromCheckout from './checkout.reducer';\r\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\r\n\r\nexport function getReducers(): ActionReducerMap<CheckoutState> {\r\n  return {\r\n    steps: loaderReducer<CheckoutStepsState>(\r\n      CHECKOUT_DETAILS,\r\n      fromCheckout.reducer\r\n    ),\r\n    cardTypes: fromCardTypes.reducer,\r\n    addressVerification: fromAddressVerification.reducer,\r\n  };\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducerMap<\r\n  CheckoutState\r\n>> = new InjectionToken<ActionReducerMap<CheckoutState>>('CheckoutReducers');\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n","import { Injectable } from '@angular/core';\nimport { UserAddressAdapter } from './user-address.adapter';\nimport { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressConnector {\n  constructor(protected adapter: UserAddressAdapter) {}\n\n  getAll(userId: string): Observable<Address[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    return this.adapter.add(userId, address);\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    return this.adapter.update(userId, addressId, address);\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    return this.adapter.verify(userId, address);\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    return this.adapter.delete(userId, addressId);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, mergeMap } from 'rxjs/operators';\r\nimport { UserAddressConnector } from '../../../user/connectors/address/user-address.connector';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { CheckoutActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class AddressVerificationEffect {\r\n  @Effect()\r\n  verifyAddress$: Observable<\r\n    CheckoutActions.VerifyAddressSuccess | CheckoutActions.VerifyAddressFail\r\n  > = this.actions$.pipe(\r\n    ofType<CheckoutActions.VerifyAddress>(CheckoutActions.VERIFY_ADDRESS),\r\n    map((action) => action.payload),\r\n    mergeMap((payload) =>\r\n      this.userAddressConnector.verify(payload.userId, payload.address).pipe(\r\n        map((data) => new CheckoutActions.VerifyAddressSuccess(data)),\r\n        catchError((error) =>\r\n          of(\r\n            new CheckoutActions.VerifyAddressFail(makeErrorSerializable(error))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userAddressConnector: UserAddressConnector\r\n  ) {}\r\n}\r\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutPaymentAdapter } from './checkout-payment.adapter';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentConnector {\n  constructor(protected adapter: CheckoutPaymentAdapter) {}\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    return this.adapter.create(userId, cartId, paymentDetails);\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.adapter.set(userId, cartId, paymentDetailsId);\n  }\n\n  getCardTypes(): Observable<CardType[]> {\n    return this.adapter.loadCardTypes();\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\r\nimport { CheckoutActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class CardTypesEffects {\r\n  @Effect()\r\n  loadCardTypes$: Observable<\r\n    CheckoutActions.LoadCardTypesSuccess | CheckoutActions.LoadCardTypesFail\r\n  > = this.actions$.pipe(\r\n    ofType(CheckoutActions.LOAD_CARD_TYPES),\r\n    switchMap(() => {\r\n      return this.checkoutPaymentConnector.getCardTypes().pipe(\r\n        map((cardTypes) => new CheckoutActions.LoadCardTypesSuccess(cardTypes)),\r\n        catchError((error) =>\r\n          of(\r\n            new CheckoutActions.LoadCardTypesFail(makeErrorSerializable(error))\r\n          )\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private checkoutPaymentConnector: CheckoutPaymentConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from './checkout.adapter';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConnector {\n  constructor(protected adapter: CheckoutAdapter) {}\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    return this.adapter.placeOrder(userId, cartId);\n  }\n\n  public loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    return this.adapter.loadCheckoutDetails(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryAddress(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryMode(userId, cartId);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutDeliveryAdapter } from './checkout-delivery.adapter';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryConnector {\n  constructor(protected adapter: CheckoutDeliveryAdapter) {}\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    return this.adapter.createAddress(userId, cartId, address);\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.adapter.setAddress(userId, cartId, addressId);\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.adapter.setMode(userId, cartId, deliveryModeId);\n  }\n\n  public getMode(userId: string, cartId: string): Observable<DeliveryMode> {\n    return this.adapter.getMode(userId, cartId);\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.adapter.getSupportedModes(userId, cartId);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { from, Observable, of } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  concatMap,\r\n  filter,\r\n  map,\r\n  mergeMap,\r\n  switchMap,\r\n} from 'rxjs/operators';\r\nimport { AuthActions } from '../../../auth/store/actions/index';\r\nimport { CartActions } from '../../../cart/store/actions/index';\r\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\r\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\r\nimport { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';\r\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\r\nimport { UserActions } from '../../../user/store/actions/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { withdrawOn } from '../../../util/withdraw-on';\r\nimport { CheckoutConnector } from '../../connectors/checkout/checkout.connector';\r\nimport { CheckoutDeliveryConnector } from '../../connectors/delivery/checkout-delivery.connector';\r\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\r\nimport { CheckoutActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class CheckoutEffects {\r\n  private contextChange$ = this.actions$.pipe(\r\n    ofType(\r\n      SiteContextActions.CURRENCY_CHANGE,\r\n      SiteContextActions.LANGUAGE_CHANGE\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  addDeliveryAddress$: Observable<\r\n    | UserActions.LoadUserAddresses\r\n    | CheckoutActions.SetDeliveryAddress\r\n    | CheckoutActions.AddDeliveryAddressFail\r\n  > = this.actions$.pipe(\r\n    ofType(CheckoutActions.ADD_DELIVERY_ADDRESS),\r\n    map((action: CheckoutActions.AddDeliveryAddress) => action.payload),\r\n    mergeMap((payload) =>\r\n      this.checkoutDeliveryConnector\r\n        .createAddress(payload.userId, payload.cartId, payload.address)\r\n        .pipe(\r\n          mergeMap((address) => {\r\n            address['titleCode'] = payload.address.titleCode;\r\n            if (payload.address.region && payload.address.region.isocodeShort) {\r\n              Object.assign(address.region, {\r\n                isocodeShort: payload.address.region.isocodeShort,\r\n              });\r\n            }\r\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\r\n              return [\r\n                new CheckoutActions.SetDeliveryAddress({\r\n                  userId: payload.userId,\r\n                  cartId: payload.cartId,\r\n                  address: address,\r\n                }),\r\n              ];\r\n            } else {\r\n              return [\r\n                new UserActions.LoadUserAddresses(payload.userId),\r\n                new CheckoutActions.SetDeliveryAddress({\r\n                  userId: payload.userId,\r\n                  cartId: payload.cartId,\r\n                  address: address,\r\n                }),\r\n              ];\r\n            }\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new CheckoutActions.AddDeliveryAddressFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        )\r\n    ),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  setDeliveryAddress$: Observable<\r\n    | CheckoutActions.SetDeliveryAddressSuccess\r\n    | CheckoutActions.ClearSupportedDeliveryModes\r\n    | CheckoutActions.ClearCheckoutDeliveryMode\r\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\r\n    | CheckoutActions.LoadSupportedDeliveryModes\r\n    | CheckoutActions.SetDeliveryAddressFail\r\n  > = this.actions$.pipe(\r\n    ofType(CheckoutActions.SET_DELIVERY_ADDRESS),\r\n    map((action: any) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.checkoutDeliveryConnector\r\n        .setAddress(payload.userId, payload.cartId, payload.address.id)\r\n        .pipe(\r\n          mergeMap(() => [\r\n            new CheckoutActions.SetDeliveryAddressSuccess(payload.address),\r\n            new CheckoutActions.ClearCheckoutDeliveryMode({\r\n              userId: payload.userId,\r\n              cartId: payload.cartId,\r\n            }),\r\n            new CheckoutActions.ClearSupportedDeliveryModes(),\r\n            new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\r\n            new CheckoutActions.LoadSupportedDeliveryModes({\r\n              userId: payload.userId,\r\n              cartId: payload.cartId,\r\n            }),\r\n          ]),\r\n          catchError((error) =>\r\n            of(\r\n              new CheckoutActions.SetDeliveryAddressFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    }),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  loadSupportedDeliveryModes$: Observable<\r\n    | CheckoutActions.LoadSupportedDeliveryModesSuccess\r\n    | CheckoutActions.LoadSupportedDeliveryModesFail\r\n  > = this.actions$.pipe(\r\n    ofType(CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES),\r\n    map((action: any) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.checkoutDeliveryConnector\r\n        .getSupportedModes(payload.userId, payload.cartId)\r\n        .pipe(\r\n          map((data) => {\r\n            return new CheckoutActions.LoadSupportedDeliveryModesSuccess(data);\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new CheckoutActions.LoadSupportedDeliveryModesFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    }),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  clearCheckoutMiscsDataOnLanguageChange$: Observable<\r\n    | CheckoutActions.CheckoutClearMiscsData\r\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\r\n  > = this.actions$.pipe(\r\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\r\n    mergeMap(() => [\r\n      new CheckoutActions.CheckoutClearMiscsData(),\r\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\r\n    ])\r\n  );\r\n\r\n  @Effect()\r\n  clearDeliveryModesOnCurrencyChange$: Observable<\r\n    CheckoutActions.ClearSupportedDeliveryModes\r\n  > = this.actions$.pipe(\r\n    ofType(SiteContextActions.CURRENCY_CHANGE),\r\n    map(() => new CheckoutActions.ClearSupportedDeliveryModes())\r\n  );\r\n\r\n  @Effect()\r\n  clearCheckoutDataOnLogout$: Observable<\r\n    CheckoutActions.ClearCheckoutData\r\n  > = this.actions$.pipe(\r\n    ofType(AuthActions.LOGOUT),\r\n    map(() => new CheckoutActions.ClearCheckoutData())\r\n  );\r\n\r\n  @Effect()\r\n  clearCheckoutDataOnLogin$: Observable<\r\n    CheckoutActions.ClearCheckoutData\r\n  > = this.actions$.pipe(\r\n    ofType(AuthActions.LOGIN),\r\n    map(() => new CheckoutActions.ClearCheckoutData())\r\n  );\r\n\r\n  @Effect()\r\n  setDeliveryMode$: Observable<\r\n    | CheckoutActions.SetDeliveryModeSuccess\r\n    | CheckoutActions.SetDeliveryModeFail\r\n    | CartActions.LoadCart\r\n  > = this.actions$.pipe(\r\n    ofType(CheckoutActions.SET_DELIVERY_MODE),\r\n    map((action: any) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.checkoutDeliveryConnector\r\n        .setMode(payload.userId, payload.cartId, payload.selectedModeId)\r\n        .pipe(\r\n          mergeMap(() => {\r\n            return [\r\n              new CheckoutActions.SetDeliveryModeSuccess(\r\n                payload.selectedModeId\r\n              ),\r\n              new CartActions.LoadCart({\r\n                userId: payload.userId,\r\n                cartId: payload.cartId,\r\n              }),\r\n            ];\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new CheckoutActions.SetDeliveryModeFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    }),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  createPaymentDetails$: Observable<\r\n    | UserActions.LoadUserPaymentMethods\r\n    | CheckoutActions.CreatePaymentDetailsSuccess\r\n    | CheckoutActions.CreatePaymentDetailsFail\r\n  > = this.actions$.pipe(\r\n    ofType(CheckoutActions.CREATE_PAYMENT_DETAILS),\r\n    map((action: any) => action.payload),\r\n    mergeMap((payload) => {\r\n      // get information for creating a subscription directly with payment provider\r\n      return this.checkoutPaymentConnector\r\n        .create(payload.userId, payload.cartId, payload.paymentDetails)\r\n        .pipe(\r\n          mergeMap((details) => {\r\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\r\n              return [new CheckoutActions.CreatePaymentDetailsSuccess(details)];\r\n            } else {\r\n              return [\r\n                new UserActions.LoadUserPaymentMethods(payload.userId),\r\n                new CheckoutActions.CreatePaymentDetailsSuccess(details),\r\n              ];\r\n            }\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new CheckoutActions.CreatePaymentDetailsFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    }),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  setPaymentDetails$: Observable<\r\n    | CheckoutActions.SetPaymentDetailsSuccess\r\n    | CheckoutActions.SetPaymentDetailsFail\r\n  > = this.actions$.pipe(\r\n    ofType(CheckoutActions.SET_PAYMENT_DETAILS),\r\n    map((action: any) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.checkoutPaymentConnector\r\n        .set(payload.userId, payload.cartId, payload.paymentDetails.id)\r\n        .pipe(\r\n          map(\r\n            () =>\r\n              new CheckoutActions.SetPaymentDetailsSuccess(\r\n                payload.paymentDetails\r\n              )\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              new CheckoutActions.SetPaymentDetailsFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    }),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  placeOrder$: Observable<\r\n    | CheckoutActions.PlaceOrderSuccess\r\n    | GlobalMessageActions.AddMessage\r\n    | CheckoutActions.PlaceOrderFail\r\n    | CartActions.RemoveCart\r\n  > = this.actions$.pipe(\r\n    ofType(CheckoutActions.PLACE_ORDER),\r\n    map((action: any) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.checkoutConnector\r\n        .placeOrder(payload.userId, payload.cartId)\r\n        .pipe(\r\n          switchMap((data) => [\r\n            new CartActions.RemoveCart({ cartId: payload.cartId }),\r\n            new CheckoutActions.PlaceOrderSuccess(data),\r\n          ]),\r\n          catchError((error) =>\r\n            of(new CheckoutActions.PlaceOrderFail(makeErrorSerializable(error)))\r\n          )\r\n        );\r\n    }),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  loadCheckoutDetails$: Observable<\r\n    | CheckoutActions.LoadCheckoutDetailsSuccess\r\n    | CheckoutActions.LoadCheckoutDetailsFail\r\n  > = this.actions$.pipe(\r\n    ofType(CheckoutActions.LOAD_CHECKOUT_DETAILS),\r\n    map((action: CheckoutActions.LoadCheckoutDetails) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.checkoutConnector\r\n        .loadCheckoutDetails(payload.userId, payload.cartId)\r\n        .pipe(\r\n          map(\r\n            (data: CheckoutDetails) =>\r\n              new CheckoutActions.LoadCheckoutDetailsSuccess(data)\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              new CheckoutActions.LoadCheckoutDetailsFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    }),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  reloadDetailsOnMergeCart$: Observable<\r\n    CheckoutActions.LoadCheckoutDetails\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.MERGE_CART_SUCCESS),\r\n    map((action: CartActions.MergeCartSuccess) => action.payload),\r\n    map((payload) => {\r\n      return new CheckoutActions.LoadCheckoutDetails({\r\n        userId: payload.userId,\r\n        cartId: payload.cartId,\r\n      });\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  clearCheckoutDeliveryAddress$: Observable<\r\n    | CheckoutActions.ClearCheckoutDeliveryAddressFail\r\n    | CheckoutActions.ClearCheckoutDeliveryAddressSuccess\r\n  > = this.actions$.pipe(\r\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS),\r\n    map(\r\n      (action: CheckoutActions.ClearCheckoutDeliveryAddress) => action.payload\r\n    ),\r\n    filter((payload) => Boolean(payload.cartId)),\r\n    switchMap((payload) => {\r\n      return this.checkoutConnector\r\n        .clearCheckoutDeliveryAddress(payload.userId, payload.cartId)\r\n        .pipe(\r\n          map(() => new CheckoutActions.ClearCheckoutDeliveryAddressSuccess()),\r\n          catchError((error) =>\r\n            of(\r\n              new CheckoutActions.ClearCheckoutDeliveryAddressFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    }),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  clearCheckoutDeliveryMode$: Observable<\r\n    | CheckoutActions.ClearCheckoutDeliveryModeFail\r\n    | CheckoutActions.ClearCheckoutDeliveryModeSuccess\r\n    | CartActions.LoadCart\r\n  > = this.actions$.pipe(\r\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE),\r\n    map((action: CheckoutActions.ClearCheckoutDeliveryMode) => action.payload),\r\n    filter((payload) => Boolean(payload.cartId)),\r\n    concatMap((payload) => {\r\n      return this.checkoutConnector\r\n        .clearCheckoutDeliveryMode(payload.userId, payload.cartId)\r\n        .pipe(\r\n          map(\r\n            () =>\r\n              new CheckoutActions.ClearCheckoutDeliveryModeSuccess({\r\n                ...payload,\r\n              })\r\n          ),\r\n          catchError((error) =>\r\n            from([\r\n              new CheckoutActions.ClearCheckoutDeliveryModeFail({\r\n                ...payload,\r\n                error: makeErrorSerializable(error),\r\n              }),\r\n              new CartActions.LoadCart({\r\n                cartId: payload.cartId,\r\n                userId: payload.userId,\r\n              }),\r\n            ])\r\n          )\r\n        );\r\n    }),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private checkoutDeliveryConnector: CheckoutDeliveryConnector,\r\n    private checkoutPaymentConnector: CheckoutPaymentConnector,\r\n    private checkoutConnector: CheckoutConnector\r\n  ) {}\r\n}\r\n","import { AddressVerificationEffect } from './address-verification.effect';\nimport { CardTypesEffects } from './card-types.effect';\nimport { CheckoutEffects } from './checkout.effect';\n\nexport const effects: any[] = [\n  CheckoutEffects,\n  AddressVerificationEffect,\n  CardTypesEffects,\n];\n\nexport * from './address-verification.effect';\nexport * from './card-types.effect';\nexport * from './checkout.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { CHECKOUT_FEATURE } from './checkout-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(CHECKOUT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class CheckoutStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\r\nimport { CheckoutPageMetaResolver } from './services/checkout-page-meta.resolver';\r\nimport { CheckoutStoreModule } from './store/checkout-store.module';\r\n\r\n@NgModule({\r\n  imports: [CheckoutStoreModule],\r\n})\r\nexport class CheckoutModule {\r\n  static forRoot(): ModuleWithProviders<CheckoutModule> {\r\n    return {\r\n      ngModule: CheckoutModule,\r\n      providers: [\r\n        {\r\n          provide: PageMetaResolver,\r\n          useExisting: CheckoutPageMetaResolver,\r\n          multi: true,\r\n        },\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import {\r\n  createFeatureSelector,\r\n  createSelector,\r\n  MemoizedSelector,\r\n} from '@ngrx/store';\r\nimport { Address } from '../../../model/address.model';\r\nimport { PaymentDetails } from '../../../model/cart.model';\r\nimport { DeliveryMode, Order } from '../../../model/order.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport {\r\n  CheckoutState,\r\n  CheckoutStepsState,\r\n  CHECKOUT_FEATURE,\r\n  StateWithCheckout,\r\n} from '../checkout-state';\r\n\r\nconst getDeliveryAddressSelector = (state: CheckoutStepsState) => state.address;\r\nconst getDeliveryModeSelector = (state: CheckoutStepsState) =>\r\n  state.deliveryMode;\r\nconst getPaymentDetailsSelector = (state: CheckoutStepsState) =>\r\n  state.paymentDetails;\r\nconst getOrderDetailsSelector = (state: CheckoutStepsState) =>\r\n  state.orderDetails;\r\n\r\nexport const getCheckoutState: MemoizedSelector<\r\n  StateWithCheckout,\r\n  CheckoutState\r\n> = createFeatureSelector<CheckoutState>(CHECKOUT_FEATURE);\r\n\r\nexport const getCheckoutStepsState: MemoizedSelector<\r\n  StateWithCheckout,\r\n  LoaderState<CheckoutStepsState>\r\n> = createSelector(\r\n  getCheckoutState,\r\n  (checkoutState: CheckoutState) => checkoutState.steps\r\n);\r\n\r\nexport const getCheckoutSteps: MemoizedSelector<\r\n  StateWithCheckout,\r\n  CheckoutStepsState\r\n> = createSelector(getCheckoutStepsState, (state) =>\r\n  StateUtils.loaderValueSelector(state)\r\n);\r\n\r\nexport const getDeliveryAddress: MemoizedSelector<\r\n  StateWithCheckout,\r\n  Address\r\n> = createSelector(getCheckoutSteps, getDeliveryAddressSelector);\r\n\r\nexport const getDeliveryMode: MemoizedSelector<\r\n  StateWithCheckout,\r\n  {\r\n    supported: { [code: string]: DeliveryMode };\r\n    selected: string;\r\n  }\r\n> = createSelector(getCheckoutSteps, getDeliveryModeSelector);\r\n\r\nexport const getSupportedDeliveryModes: MemoizedSelector<\r\n  StateWithCheckout,\r\n  DeliveryMode[]\r\n> = createSelector(getDeliveryMode, (deliveryMode) => {\r\n  return (\r\n    deliveryMode &&\r\n    Object.keys(deliveryMode.supported).map(\r\n      (code) => deliveryMode.supported[code]\r\n    )\r\n  );\r\n});\r\n\r\nexport const getSelectedDeliveryModeCode: MemoizedSelector<\r\n  StateWithCheckout,\r\n  string\r\n> = createSelector(getDeliveryMode, (deliveryMode) => {\r\n  return deliveryMode && deliveryMode.selected;\r\n});\r\n\r\nexport const getSelectedDeliveryMode: MemoizedSelector<\r\n  StateWithCheckout,\r\n  DeliveryMode\r\n> = createSelector(getDeliveryMode, (deliveryMode) => {\r\n  if (deliveryMode.selected !== '') {\r\n    if (Object.keys(deliveryMode.supported).length === 0) {\r\n      return null;\r\n    }\r\n    return deliveryMode.supported[deliveryMode.selected];\r\n  }\r\n});\r\n\r\nexport const getPaymentDetails: MemoizedSelector<\r\n  StateWithCheckout,\r\n  PaymentDetails\r\n> = createSelector(getCheckoutSteps, getPaymentDetailsSelector);\r\n\r\nexport const getCheckoutOrderDetails: MemoizedSelector<\r\n  StateWithCheckout,\r\n  Order\r\n> = createSelector(getCheckoutSteps, getOrderDetailsSelector);\r\n\r\nexport const getCheckoutDetailsLoaded: MemoizedSelector<\r\n  StateWithCheckout,\r\n  boolean\r\n> = createSelector(\r\n  getCheckoutStepsState,\r\n  (state) =>\r\n    StateUtils.loaderSuccessSelector(state) &&\r\n    !StateUtils.loaderLoadingSelector(state)\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AddressValidation } from '../../../model/address.model';\nimport {\n  AddressVerificationState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/address-verification.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getAddressVerificationResultsState: MemoizedSelector<\n  StateWithCheckout,\n  AddressVerificationState\n> = createSelector(\n  getCheckoutState,\n  (state: CheckoutState) => state.addressVerification\n);\n\nexport const getAddressVerificationResults: MemoizedSelector<\n  StateWithCheckout,\n  string | AddressValidation\n> = createSelector(\n  getAddressVerificationResultsState,\n  fromReducer.getAddressVerificationResults\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { CardType } from '../../../model/cart.model';\r\nimport {\r\n  CardTypesState,\r\n  CheckoutState,\r\n  StateWithCheckout,\r\n} from '../checkout-state';\r\nimport * as fromReducer from './../reducers/card-types.reducer';\r\nimport { getCheckoutState } from './checkout.selectors';\r\n\r\nexport const getCardTypesState: MemoizedSelector<\r\n  StateWithCheckout,\r\n  CardTypesState\r\n> = createSelector(getCheckoutState, (state: CheckoutState) => state.cardTypes);\r\n\r\nexport const getCardTypesEntites: MemoizedSelector<\r\n  StateWithCheckout,\r\n  { [code: string]: CardType }\r\n> = createSelector(getCardTypesState, fromReducer.getCardTypesEntites);\r\n\r\nexport const getAllCardTypes: MemoizedSelector<\r\n  StateWithCheckout,\r\n  CardType[]\r\n> = createSelector(getCardTypesEntites, (entites) => {\r\n  return Object.keys(entites).map((code) => entites[code]);\r\n});\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\r\nimport { Order } from '../../model/order.model';\r\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\r\nimport { CheckoutActions } from '../store/actions/index';\r\nimport { StateWithCheckout } from '../store/checkout-state';\r\nimport { CheckoutSelectors } from '../store/selectors/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CheckoutService {\r\n  constructor(\r\n    protected checkoutStore: Store<StateWithCheckout>,\r\n    protected authService: AuthService,\r\n    protected activeCartService: ActiveCartService\r\n  ) {}\r\n\r\n  /**\r\n   * Places an order\r\n   */\r\n  placeOrder(): void {\r\n    if (this.actionAllowed()) {\r\n      let userId;\r\n      this.authService\r\n        .getOccUserId()\r\n        .subscribe((occUserId) => (userId = occUserId))\r\n        .unsubscribe();\r\n\r\n      let cartId;\r\n      this.activeCartService\r\n        .getActiveCartId()\r\n        .subscribe((activeCartId) => (cartId = activeCartId))\r\n        .unsubscribe();\r\n\r\n      if (userId && cartId) {\r\n        this.checkoutStore.dispatch(\r\n          new CheckoutActions.PlaceOrder({\r\n            userId,\r\n            cartId,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear checkout data\r\n   */\r\n  clearCheckoutData(): void {\r\n    this.checkoutStore.dispatch(new CheckoutActions.ClearCheckoutData());\r\n  }\r\n\r\n  /**\r\n   * Clear checkout step\r\n   * @param stepNumber : the step number to be cleared\r\n   */\r\n  clearCheckoutStep(stepNumber: number): void {\r\n    this.checkoutStore.dispatch(\r\n      new CheckoutActions.ClearCheckoutStep(stepNumber)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Load checkout details data\r\n   * @param cartId : string Cart ID of loaded cart\r\n   */\r\n  loadCheckoutDetails(cartId: string) {\r\n    let userId;\r\n    this.authService\r\n      .getOccUserId()\r\n      .subscribe((occUserId) => (userId = occUserId))\r\n      .unsubscribe();\r\n    if (userId) {\r\n      this.checkoutStore.dispatch(\r\n        new CheckoutActions.LoadCheckoutDetails({\r\n          userId,\r\n          cartId,\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get status of checkout details loaded\r\n   */\r\n  getCheckoutDetailsLoaded(): Observable<boolean> {\r\n    return this.checkoutStore.pipe(\r\n      select(CheckoutSelectors.getCheckoutDetailsLoaded)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get order details\r\n   */\r\n  getOrderDetails(): Observable<Order> {\r\n    return this.checkoutStore.pipe(\r\n      select(CheckoutSelectors.getCheckoutOrderDetails)\r\n    );\r\n  }\r\n\r\n  protected actionAllowed(): boolean {\r\n    let userId;\r\n    this.authService\r\n      .getOccUserId()\r\n      .subscribe((occUserId) => (userId = occUserId))\r\n      .unsubscribe();\r\n    return (\r\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\r\n      this.activeCartService.isGuestCart()\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport {\r\n  filter,\r\n  pluck,\r\n  shareReplay,\r\n  tap,\r\n  withLatestFrom,\r\n} from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\r\nimport { Address, AddressValidation } from '../../model/address.model';\r\nimport { DeliveryMode } from '../../model/order.model';\r\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\r\nimport { LoaderState } from '../../state/utils/loader/loader-state';\r\nimport { CheckoutActions } from '../store/actions/index';\r\nimport {\r\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\r\n  SET_DELIVERY_MODE_PROCESS_ID,\r\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\r\n  StateWithCheckout,\r\n} from '../store/checkout-state';\r\nimport { CheckoutSelectors } from '../store/selectors/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CheckoutDeliveryService {\r\n  constructor(\r\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\r\n    protected authService: AuthService,\r\n    protected activeCartService: ActiveCartService\r\n  ) {}\r\n\r\n  /**\r\n   * Get supported delivery modes\r\n   */\r\n  getSupportedDeliveryModes(): Observable<DeliveryMode[]> {\r\n    return this.checkoutStore.pipe(\r\n      select(CheckoutSelectors.getSupportedDeliveryModes),\r\n      withLatestFrom(\r\n        this.checkoutStore.pipe(\r\n          select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\r\n        )\r\n      ),\r\n      tap(([, loadingState]) => {\r\n        if (\r\n          !(loadingState.loading || loadingState.success || loadingState.error)\r\n        ) {\r\n          this.loadSupportedDeliveryModes();\r\n        }\r\n      }),\r\n      pluck(0),\r\n      shareReplay({ bufferSize: 1, refCount: true })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get selected delivery mode\r\n   */\r\n  getSelectedDeliveryMode(): Observable<DeliveryMode> {\r\n    return this.checkoutStore.pipe(\r\n      select(CheckoutSelectors.getSelectedDeliveryMode)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get selected delivery mode code\r\n   */\r\n  getSelectedDeliveryModeCode(): Observable<string> {\r\n    return this.checkoutStore.pipe(\r\n      select(CheckoutSelectors.getSelectedDeliveryModeCode)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get delivery address\r\n   */\r\n  getDeliveryAddress(): Observable<Address> {\r\n    return this.checkoutStore.pipe(\r\n      select(CheckoutSelectors.getDeliveryAddress)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get status about successfully set Delivery Address\r\n   */\r\n  getSetDeliveryAddressProcess(): Observable<LoaderState<void>> {\r\n    return this.checkoutStore.pipe(\r\n      select(getProcessStateFactory(SET_DELIVERY_ADDRESS_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Clear info about process of setting Delivery Address\r\n   */\r\n  resetSetDeliveryAddressProcess(): void {\r\n    this.checkoutStore.dispatch(\r\n      new CheckoutActions.ResetSetDeliveryAddressProcess()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get status about of set Delivery Mode process\r\n   */\r\n  getSetDeliveryModeProcess(): Observable<LoaderState<void>> {\r\n    return this.checkoutStore.pipe(\r\n      select(getProcessStateFactory(SET_DELIVERY_MODE_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Clear info about process of setting Delivery Mode\r\n   */\r\n  resetSetDeliveryModeProcess(): void {\r\n    this.checkoutStore.dispatch(\r\n      new CheckoutActions.ResetSetDeliveryModeProcess()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Clear info about process of setting Supported Delivery Modes\r\n   */\r\n  resetLoadSupportedDeliveryModesProcess(): void {\r\n    this.checkoutStore.dispatch(\r\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get status about of set supported Delivery Modes process\r\n   */\r\n  getLoadSupportedDeliveryModeProcess(): Observable<LoaderState<void>> {\r\n    return this.checkoutStore.pipe(\r\n      select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Clear supported delivery modes loaded in last checkout process\r\n   */\r\n  clearCheckoutDeliveryModes(): void {\r\n    this.checkoutStore.dispatch(\r\n      new CheckoutActions.ClearSupportedDeliveryModes()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get address verification results\r\n   */\r\n  getAddressVerificationResults(): Observable<AddressValidation | string> {\r\n    return this.checkoutStore.pipe(\r\n      select(CheckoutSelectors.getAddressVerificationResults),\r\n      filter((results) => Object.keys(results).length !== 0)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create and set a delivery address using the address param\r\n   * @param address : the Address to be created and set\r\n   */\r\n  createAndSetAddress(address: Address): void {\r\n    if (this.actionAllowed()) {\r\n      let userId;\r\n      this.authService\r\n        .getOccUserId()\r\n        .subscribe((occUserId) => (userId = occUserId))\r\n        .unsubscribe();\r\n\r\n      let cartId;\r\n      this.activeCartService\r\n        .getActiveCartId()\r\n        .subscribe((activeCartId) => (cartId = activeCartId))\r\n        .unsubscribe();\r\n      if (userId && cartId) {\r\n        this.checkoutStore.dispatch(\r\n          new CheckoutActions.AddDeliveryAddress({\r\n            userId,\r\n            cartId,\r\n            address: address,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load supported delivery modes\r\n   */\r\n  loadSupportedDeliveryModes(): void {\r\n    if (this.actionAllowed()) {\r\n      let userId;\r\n      this.authService\r\n        .getOccUserId()\r\n        .subscribe((occUserId) => (userId = occUserId))\r\n        .unsubscribe();\r\n\r\n      let cartId;\r\n      this.activeCartService\r\n        .getActiveCartId()\r\n        .subscribe((activeCartId) => (cartId = activeCartId))\r\n        .unsubscribe();\r\n      if (userId && cartId) {\r\n        this.checkoutStore.dispatch(\r\n          new CheckoutActions.LoadSupportedDeliveryModes({\r\n            userId,\r\n            cartId,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set delivery mode\r\n   * @param mode : The delivery mode to be set\r\n   */\r\n  setDeliveryMode(mode: string): void {\r\n    if (this.actionAllowed()) {\r\n      let userId;\r\n      this.authService\r\n        .getOccUserId()\r\n        .subscribe((occUserId) => (userId = occUserId))\r\n        .unsubscribe();\r\n\r\n      let cartId;\r\n      this.activeCartService\r\n        .getActiveCartId()\r\n        .subscribe((activeCartId) => (cartId = activeCartId))\r\n        .unsubscribe();\r\n      if (userId && cartId) {\r\n        this.checkoutStore.dispatch(\r\n          new CheckoutActions.SetDeliveryMode({\r\n            userId,\r\n            cartId,\r\n            selectedModeId: mode,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifies the address\r\n   * @param address : the address to be verified\r\n   */\r\n  verifyAddress(address: Address): void {\r\n    if (this.actionAllowed()) {\r\n      let userId;\r\n      this.authService\r\n        .getOccUserId()\r\n        .subscribe((occUserId) => (userId = occUserId))\r\n        .unsubscribe();\r\n      if (userId) {\r\n        this.checkoutStore.dispatch(\r\n          new CheckoutActions.VerifyAddress({\r\n            userId,\r\n            address,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set delivery address\r\n   * @param address : The address to be set\r\n   */\r\n  setDeliveryAddress(address: Address): void {\r\n    if (this.actionAllowed()) {\r\n      let userId;\r\n      this.authService\r\n        .getOccUserId()\r\n        .subscribe((occUserId) => (userId = occUserId))\r\n        .unsubscribe();\r\n\r\n      let cartId;\r\n      this.activeCartService\r\n        .getActiveCartId()\r\n        .subscribe((activeCartId) => (cartId = activeCartId))\r\n        .unsubscribe();\r\n      if (cartId && userId) {\r\n        this.checkoutStore.dispatch(\r\n          new CheckoutActions.SetDeliveryAddress({\r\n            userId,\r\n            cartId,\r\n            address: address,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear address verification results\r\n   */\r\n  clearAddressVerificationResults(): void {\r\n    this.checkoutStore.dispatch(\r\n      new CheckoutActions.ClearAddressVerificationResults()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Clear address already setup in last checkout process\r\n   */\r\n  clearCheckoutDeliveryAddress(): void {\r\n    let userId;\r\n    this.authService\r\n      .getOccUserId()\r\n      .subscribe((occUserId) => (userId = occUserId))\r\n      .unsubscribe();\r\n\r\n    let cartId;\r\n    this.activeCartService\r\n      .getActiveCartId()\r\n      .subscribe((activeCartId) => (cartId = activeCartId))\r\n      .unsubscribe();\r\n    if (userId && cartId) {\r\n      this.checkoutStore.dispatch(\r\n        new CheckoutActions.ClearCheckoutDeliveryAddress({\r\n          userId,\r\n          cartId,\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear selected delivery mode setup in last checkout process\r\n   */\r\n  clearCheckoutDeliveryMode(): void {\r\n    let userId;\r\n    this.authService\r\n      .getOccUserId()\r\n      .subscribe((occUserId) => (userId = occUserId))\r\n      .unsubscribe();\r\n\r\n    let cartId;\r\n    this.activeCartService\r\n      .getActiveCartId()\r\n      .subscribe((activeCartId) => (cartId = activeCartId))\r\n      .unsubscribe();\r\n    if (userId && cartId) {\r\n      this.checkoutStore.dispatch(\r\n        new CheckoutActions.ClearCheckoutDeliveryMode({\r\n          userId,\r\n          cartId,\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear address and delivery mode already setup in last checkout process\r\n   */\r\n  clearCheckoutDeliveryDetails(): void {\r\n    this.clearCheckoutDeliveryAddress();\r\n    this.clearCheckoutDeliveryMode();\r\n    this.clearCheckoutDeliveryModes();\r\n  }\r\n\r\n  protected actionAllowed(): boolean {\r\n    let userId;\r\n    this.authService\r\n      .getOccUserId()\r\n      .subscribe((occUserId) => (userId = occUserId))\r\n      .unsubscribe();\r\n    return (\r\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\r\n      this.activeCartService.isGuestCart()\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\r\nimport { CardType, PaymentDetails } from '../../model/cart.model';\r\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\r\nimport { LoaderState } from '../../state/utils/loader/loader-state';\r\nimport { CheckoutActions } from '../store/actions/index';\r\nimport {\r\n  SET_PAYMENT_DETAILS_PROCESS_ID,\r\n  StateWithCheckout,\r\n} from '../store/checkout-state';\r\nimport { CheckoutSelectors } from '../store/selectors/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CheckoutPaymentService {\r\n  constructor(\r\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\r\n    protected authService: AuthService,\r\n    protected activeCartService: ActiveCartService\r\n  ) {}\r\n\r\n  /**\r\n   * Get card types\r\n   */\r\n  getCardTypes(): Observable<CardType[]> {\r\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getAllCardTypes));\r\n  }\r\n\r\n  /**\r\n   * Get payment details\r\n   */\r\n  getPaymentDetails(): Observable<PaymentDetails> {\r\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getPaymentDetails));\r\n  }\r\n\r\n  /**\r\n   * Get status about set Payment Details process\r\n   */\r\n  getSetPaymentDetailsResultProcess(): Observable<LoaderState<void>> {\r\n    return this.checkoutStore.pipe(\r\n      select(getProcessStateFactory(SET_PAYMENT_DETAILS_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Clear info about process of setting Payment Details\r\n   */\r\n  resetSetPaymentDetailsProcess(): void {\r\n    this.checkoutStore.dispatch(\r\n      new CheckoutActions.ResetSetPaymentDetailsProcess()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Load the supported card types\r\n   */\r\n  loadSupportedCardTypes(): void {\r\n    this.checkoutStore.dispatch(new CheckoutActions.LoadCardTypes());\r\n  }\r\n\r\n  /**\r\n   * Create payment details using the given paymentDetails param\r\n   * @param paymentDetails: the PaymentDetails to be created\r\n   */\r\n  createPaymentDetails(paymentDetails: PaymentDetails): void {\r\n    if (this.actionAllowed()) {\r\n      let userId;\r\n      this.authService\r\n        .getOccUserId()\r\n        .subscribe((occUserId) => (userId = occUserId))\r\n        .unsubscribe();\r\n\r\n      let cartId;\r\n      this.activeCartService\r\n        .getActiveCartId()\r\n        .subscribe((activeCartId) => (cartId = activeCartId))\r\n        .unsubscribe();\r\n\r\n      if (userId && cartId) {\r\n        this.checkoutStore.dispatch(\r\n          new CheckoutActions.CreatePaymentDetails({\r\n            userId,\r\n            cartId,\r\n            paymentDetails,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set payment details\r\n   * @param paymentDetails : the PaymentDetails to be set\r\n   */\r\n  setPaymentDetails(paymentDetails: PaymentDetails): void {\r\n    if (this.actionAllowed()) {\r\n      let userId;\r\n      this.authService\r\n        .getOccUserId()\r\n        .subscribe((occUserId) => (userId = occUserId))\r\n        .unsubscribe();\r\n\r\n      let cart;\r\n      this.activeCartService\r\n        .getActive()\r\n        .subscribe((activeCart) => (cart = activeCart))\r\n        .unsubscribe();\r\n      if (userId && cart) {\r\n        this.checkoutStore.dispatch(\r\n          new CheckoutActions.SetPaymentDetails({\r\n            userId,\r\n            cartId: cart.code,\r\n            paymentDetails: paymentDetails,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets payment loading to true without having the flicker issue (GH-3102)\r\n   */\r\n  paymentProcessSuccess() {\r\n    this.checkoutStore.dispatch(new CheckoutActions.PaymentProcessSuccess());\r\n  }\r\n\r\n  protected actionAllowed(): boolean {\r\n    let userId;\r\n    this.authService\r\n      .getOccUserId()\r\n      .subscribe((occUserId) => (userId = occUserId))\r\n      .unsubscribe();\r\n    return (\r\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\r\n      this.activeCartService.isGuestCart()\r\n    );\r\n  }\r\n}\r\n","import { CmsConfig } from './cms-config';\n\nexport const defaultCmsModuleConfig: CmsConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        component: 'cms/components/${id}',\n        components: 'cms/components',\n        pages: 'cms/pages',\n        page: 'cms/pages/${id}',\n      },\n      legacy: false,\n    },\n  },\n  cmsComponents: {},\n};\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { TranslationService } from '../../i18n/translation.service';\r\nimport { PageType } from '../../model/cms.model';\r\nimport { CmsService } from '../facade/cms.service';\r\nimport { BreadcrumbMeta, Page } from '../model/page.model';\r\nimport { PageMetaResolver } from './page-meta.resolver';\r\nimport { PageBreadcrumbResolver, PageTitleResolver } from './page.resolvers';\r\n\r\n/**\r\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`.\r\n * More specific resolvers for content pages can be implemented by making them more\r\n * specific, for example by using the page template (see `CartPageMetaResolver`).\r\n *\r\n * The page title, and breadcrumbs are resolved in this implementation only.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ContentPageMetaResolver extends PageMetaResolver\r\n  implements PageTitleResolver, PageBreadcrumbResolver {\r\n  /** helper to provie access to the current CMS page */\r\n  protected cms$: Observable<Page> = this.cms\r\n    .getCurrentPage()\r\n    .pipe(filter((p) => Boolean(p)));\r\n\r\n  constructor(\r\n    protected cms: CmsService,\r\n    protected translation: TranslationService\r\n  ) {\r\n    super();\r\n    this.pageType = PageType.CONTENT_PAGE;\r\n  }\r\n\r\n  /**\r\n   * Resolves the page title for the ContentPage by taking the title\r\n   * from the backend data.\r\n   */\r\n  resolveTitle(): Observable<string> {\r\n    return this.cms$.pipe(map((p) => p.title));\r\n  }\r\n\r\n  /**\r\n   * Resolves a single breacrumb item to the home page for each `ContentPage`.\r\n   * The home page label is resolved from the translation service.\r\n   */\r\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\r\n    return this.translation\r\n      .translate('common.home')\r\n      .pipe(map((label) => [{ label: label, link: '/' }] as BreadcrumbMeta[]));\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { ContentPageMetaResolver } from './content-page-meta.resolver';\n\n@NgModule({\n  providers: [\n    {\n      provide: PageMetaResolver,\n      useExisting: ContentPageMetaResolver,\n      multi: true,\n    },\n  ],\n})\nexport class CmsPageTitleModule {}\n","import { Observable, OperatorFunction, SchedulerLike } from 'rxjs';\r\nimport { debounceTime, map, tap } from 'rxjs/operators';\r\n\r\nexport function bufferDebounceTime<T>(\r\n  time: number = 0,\r\n  scheduler?: SchedulerLike\r\n): OperatorFunction<T, T[]> {\r\n  return (source: Observable<T>) => {\r\n    let bufferedValues: T[] = [];\r\n\r\n    return source.pipe(\r\n      tap((value) => bufferedValues.push(value)),\r\n      debounceTime(time, scheduler),\r\n      map(() => bufferedValues),\r\n      tap(() => (bufferedValues = []))\r\n    );\r\n  };\r\n}\r\n","export function getCookie(cookie: string, name: string) {\n  const regExp = new RegExp('(?:^|;\\\\s*)' + name + '=([^;]*)', 'g');\n  const result: RegExpExecArray = regExp.exec(cookie);\n\n  return (result && decodeURIComponent(result[1])) || '';\n}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { provideConfigFactory } from './config.module';\nimport { getCookie } from './utils/get-cookie';\n\nexport const TEST_CONFIG_COOKIE_NAME = new InjectionToken<string>(\n  'TEST_CONFIG_COOKIE_NAME'\n);\n\nexport function parseConfigJSON(config: string) {\n  try {\n    return JSON.parse(decodeURIComponent(config));\n  } catch (_) {\n    return {};\n  }\n}\n\nexport function configFromCookieFactory(\n  cookieName: string,\n  platform: any,\n  document: Document\n) {\n  if (isPlatformBrowser(platform) && cookieName) {\n    const config = getCookie(document.cookie, cookieName);\n    return parseConfigJSON(config);\n  }\n  return {};\n}\n\nexport interface TestConfigModuleOptions {\n  cookie: string;\n}\n\n/**\n * Designed/intended to provide dynamic configuration for testing scenarios ONLY (e.g. e2e tests).\n *\n * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n */\n@NgModule({})\nexport class TestConfigModule {\n  /**\n   * Injects JSON config from the cookie of the given name.\n   *\n   * Be aware of the cookie limitations (4096 bytes).\n   *\n   * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n   */\n  static forRoot(\n    options: TestConfigModuleOptions\n  ): ModuleWithProviders<TestConfigModule> {\n    return {\n      ngModule: TestConfigModule,\n      providers: [\n        {\n          provide: TEST_CONFIG_COOKIE_NAME,\n          useValue: options && options.cookie,\n        },\n        provideConfigFactory(configFromCookieFactory, [\n          TEST_CONFIG_COOKIE_NAME,\n          PLATFORM_ID,\n          DOCUMENT,\n        ]),\n      ],\n    };\n  }\n}\n","import {\r\n  APP_INITIALIZER,\r\n  isDevMode,\r\n  ModuleWithProviders,\r\n  NgModule,\r\n  Optional,\r\n} from '@angular/core';\r\nimport { ConfigInitializerService } from '../config-initializer/config-initializer.service';\r\nimport {\r\n  ConfigValidator,\r\n  ConfigValidatorToken,\r\n  validateConfig,\r\n} from './config-validator';\r\n\r\nexport function configValidatorFactory(\r\n  configInitializer: ConfigInitializerService,\r\n  validators: ConfigValidator[]\r\n) {\r\n  const validate = () => {\r\n    if (isDevMode()) {\r\n      configInitializer\r\n        .getStableConfig()\r\n        .then((config) => validateConfig(config, validators || []));\r\n    }\r\n  };\r\n  return validate;\r\n}\r\n\r\n/**\r\n * Should stay private in 1.x\r\n * as forRoot() is used internally by ConfigInitializerModule\r\n *\r\n * issue: #5279\r\n */\r\n@NgModule()\r\nexport class ConfigValidatorModule {\r\n  static forRoot(): ModuleWithProviders<ConfigValidatorModule> {\r\n    return {\r\n      ngModule: ConfigValidatorModule,\r\n      providers: [\r\n        {\r\n          provide: APP_INITIALIZER,\r\n          multi: true,\r\n          useFactory: configValidatorFactory,\r\n          deps: [\r\n            ConfigInitializerService,\r\n            [new Optional(), ConfigValidatorToken],\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import {\r\n  APP_INITIALIZER,\r\n  ModuleWithProviders,\r\n  NgModule,\r\n  Optional,\r\n} from '@angular/core';\r\nimport { ConfigInitializerService } from './config-initializer.service';\r\nimport {\r\n  CONFIG_INITIALIZER,\r\n  CONFIG_INITIALIZER_FORROOT_GUARD,\r\n  ConfigInitializer,\r\n} from './config-initializer';\r\n\r\nexport function configInitializerFactory(\r\n  configInitializer: ConfigInitializerService,\r\n  initializers: ConfigInitializer[]\r\n) {\r\n  const isReady = () => configInitializer.initialize(initializers);\r\n  return isReady;\r\n}\r\n\r\n@NgModule({})\r\nexport class ConfigInitializerModule {\r\n  static forRoot(): ModuleWithProviders<ConfigInitializerModule> {\r\n    return {\r\n      ngModule: ConfigInitializerModule,\r\n      providers: [\r\n        {\r\n          provide: CONFIG_INITIALIZER_FORROOT_GUARD,\r\n          useValue: true,\r\n        },\r\n        {\r\n          provide: APP_INITIALIZER,\r\n          multi: true,\r\n          useFactory: configInitializerFactory,\r\n          deps: [\r\n            ConfigInitializerService,\r\n            [new Optional(), CONFIG_INITIALIZER],\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { ContentSlotComponentData } from '../model/content-slot-component-data.model';\r\nimport { CmsConfig } from './cms-config';\r\nimport { Injectable } from '@angular/core';\r\nimport { Config } from '../../config';\r\n\r\n/**\r\n * The `CmsPageConfig` is used to build pages by configuration.\r\n * The interfaces are designed to have a clean configuration for\r\n * static CMS structure. Ordinary attributes that are not\r\n * required for configurable pages have been left out and\r\n * will not be serialized in the adapter logic.\r\n */\r\nexport interface CmsPageConfig {\r\n  /**\r\n   * When the `ignoreBackend` is set to true, the CMS backend\r\n   * will not be consumed. This saves network latency and is\r\n   * useful for commodity commerce pages.\r\n   * */\r\n  ignoreBackend?: boolean;\r\n\r\n  pageId?: string;\r\n\r\n  type?: string;\r\n\r\n  /**\r\n   * The page title is typically used to display the page heading\r\n   * as well as for the page title tag. The latter is used for browser\r\n   * navigation as well as SEO and social share platforms.\r\n   */\r\n  title?: string;\r\n\r\n  /**\r\n   * the template is used to bind to the layout\r\n   * configuration and css layout class\r\n   */\r\n  template?: string;\r\n\r\n  /**\r\n   * The page slots represent various sections on the page that\r\n   * can contain components.\r\n   */\r\n  slots: { [key: string]: CmsPageSlotConfig };\r\n}\r\n\r\n/**\r\n * The `CmsPageSlotsConfig` (plural) holds `CmsPageSlotConfig` objects.\r\n */\r\nexport interface CmsPageSlotsConfig {\r\n  [key: string]: CmsPageSlotConfig;\r\n}\r\n\r\n/**\r\n * The `CmsPageSlotConfig` is a simplified configuration model\r\n * that can be used to configure slots in static configuration,\r\n * rather than loading from a backend.\r\n */\r\nexport interface CmsPageSlotConfig {\r\n  componentIds?: string[];\r\n  properties?: any;\r\n}\r\n\r\n/**\r\n * The `CmsStructureConfig` is used to build pages in Spartacus by configuration\r\n * instead of using a backend CMS system. The configuration can be used to build\r\n * complete pages or parts of a page. The `CmsStructureConfig` is optimized to\r\n * only require the necessary properties. Adapter logic is applied to serialize\r\n * the `CmsStructureConfig` into the required UI model.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class CmsStructureConfig extends CmsConfig {\r\n  cmsStructure: {\r\n    components?: { [key: string]: ContentSlotComponentData | any };\r\n    pages?: CmsPageConfig[];\r\n    slots?: CmsPageSlotsConfig;\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport {\r\n  CmsPageConfig,\r\n  CmsPageSlotsConfig,\r\n  CmsStructureConfig,\r\n} from '../config/cms-structure.config';\r\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\r\nimport { CmsStructureModel } from '../model/page.model';\r\n\r\n/**\r\n * Service that provides access to CMS structure from a static\r\n * configuration or configuration file. This class uses static\r\n * configuration is designed in async fashion so that configurations\r\n * can be loaded from a file or stream.\r\n *\r\n * The intent of the `CmsStructureConfigService` however is to provide\r\n * fast loading pages and default cms structure for commodity commerce.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport abstract class CmsStructureConfigService {\r\n  constructor(protected cmsDataConfig: CmsStructureConfig) {}\r\n\r\n  /**\r\n   * Merge the cms structure to the pageStructure. The page structure\r\n   * can either hold complete page structures or global structures that\r\n   * might apply to all pages (such has header coponents).\r\n   */\r\n  mergePageStructure(\r\n    pageId: string,\r\n    pageStructure: CmsStructureModel\r\n  ): Observable<CmsStructureModel> {\r\n    return this.mergePage(pageId, pageStructure).pipe(\r\n      switchMap((page) => this.mergeSlots(page))\r\n    );\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Returns boolean observable to indicate whether the page should not be\r\n   * loaded from the backend. This is useful for pages which are comoditized\r\n   * and follow best practice.\r\n   *\r\n   * By default, configurable pages are driven by static configuration,\r\n   * in order to allow for fast loading pages (preventing network delays).\r\n   */\r\n  shouldIgnoreBackend(pageId: string): Observable<boolean> {\r\n    return this.getPageFromConfig(pageId).pipe(\r\n      map((page) => !!page && !!page.ignoreBackend)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * returns an Observable component data from the static configuration.\r\n   */\r\n  getComponentFromConfig(\r\n    componentId: string\r\n  ): Observable<ContentSlotComponentData | any> {\r\n    return of(this.getComponentById(componentId));\r\n  }\r\n\r\n  /**\r\n   * returns an Observable components data from the static configuration.\r\n   */\r\n  getComponentsFromConfig(\r\n    ids: string[]\r\n  ): Observable<ContentSlotComponentData[]> {\r\n    return of(ids.map((id) => this.getComponentById(id)));\r\n  }\r\n\r\n  /**\r\n   * returns an observable with the `PageConfig`.\r\n   */\r\n  protected getPageFromConfig(pageId: string): Observable<CmsPageConfig> {\r\n    return of(\r\n      this.cmsDataConfig.cmsStructure && this.cmsDataConfig.cmsStructure.pages\r\n        ? this.cmsDataConfig.cmsStructure.pages.find((p) => p.pageId === pageId)\r\n        : null\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Merge page data from the configuration into the given structure, if any.\r\n   * If the given page structure is empty, a page is created and the page slots are\r\n   * are merged into the page.\r\n   */\r\n  protected mergePage(\r\n    pageId: string,\r\n    pageStructure: CmsStructureModel\r\n  ): Observable<CmsStructureModel> {\r\n    return this.getPageFromConfig(pageId).pipe(\r\n      switchMap((page) => {\r\n        if (page) {\r\n          // serialize page data\r\n          if (!pageStructure.page) {\r\n            pageStructure.page = {\r\n              ...page,\r\n            };\r\n            pageStructure.page.slots = {};\r\n          }\r\n          if (!pageStructure.page.slots) {\r\n            pageStructure.page.slots = {};\r\n          }\r\n          return this.mergeSlots(pageStructure, page.slots);\r\n        } else {\r\n          return of(pageStructure);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Adds any pre-configured slots for pages that do not use them.\r\n   * If pages have a slot for the given position, the configiuration\r\n   * is ingored. Even if the slot does not have inner structure (such as\r\n   * components), so that the cms structure is able to override the (static)\r\n   * configuration.\r\n   */\r\n  protected mergeSlots(\r\n    pageStructure: CmsStructureModel,\r\n    slots?: CmsPageSlotsConfig\r\n  ): Observable<CmsStructureModel> {\r\n    // if no slots have been given, we use the global configured slots\r\n    if (\r\n      !slots &&\r\n      this.cmsDataConfig.cmsStructure &&\r\n      this.cmsDataConfig.cmsStructure.slots\r\n    ) {\r\n      slots = this.cmsDataConfig.cmsStructure.slots;\r\n    }\r\n\r\n    if (!slots) {\r\n      return of(pageStructure);\r\n    }\r\n\r\n    for (const position of Object.keys(slots)) {\r\n      if (!Object.keys(pageStructure.page.slots).includes(position)) {\r\n        // the global slot isn't yet part of the page structure\r\n        pageStructure.page.slots[position] = {};\r\n\r\n        for (const component of this.getComponentsByPosition(slots, position)) {\r\n          if (!pageStructure.page.slots[position].components) {\r\n            pageStructure.page.slots[position].components = [];\r\n          }\r\n          pageStructure.page.slots[position].components.push({\r\n            uid: component.uid,\r\n            flexType: component.flexType,\r\n            typeCode: component.typeCode,\r\n          });\r\n          if (!pageStructure.components) {\r\n            pageStructure.components = [];\r\n          }\r\n\r\n          pageStructure.components.push(component);\r\n        }\r\n      }\r\n    }\r\n\r\n    return of(pageStructure);\r\n  }\r\n\r\n  protected getComponentsByPosition(\r\n    slots: CmsPageSlotsConfig,\r\n    position: string\r\n  ): ContentSlotComponentData[] {\r\n    const components = [];\r\n    if (slots[position] && slots[position].componentIds) {\r\n      for (const componentId of slots[position].componentIds) {\r\n        if (\r\n          this.cmsDataConfig.cmsStructure &&\r\n          this.cmsDataConfig.cmsStructure.components\r\n        ) {\r\n          const component = this.cmsDataConfig.cmsStructure.components[\r\n            componentId\r\n          ];\r\n          if (component) {\r\n            components.push({ uid: componentId, ...component });\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return components;\r\n  }\r\n\r\n  protected getComponentById(componentId: string): ContentSlotComponentData {\r\n    return this.cmsDataConfig.cmsStructure &&\r\n      this.cmsDataConfig.cmsStructure.components\r\n      ? this.cmsDataConfig.cmsStructure.components[componentId]\r\n      : undefined;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport { CmsComponent } from '../../../model/cms.model';\r\nimport { OccConfig } from '../../../occ/config/occ-config';\r\nimport { PageContext } from '../../../routing/models/page-context.model';\r\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\r\nimport { CmsComponentAdapter } from './cms-component.adapter';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CmsComponentConnector {\r\n  constructor(\r\n    protected cmsStructureConfigService: CmsStructureConfigService,\r\n    protected adapter: CmsComponentAdapter,\r\n    protected config: OccConfig\r\n  ) {}\r\n\r\n  get<T extends CmsComponent>(\r\n    id: string,\r\n    pageContext: PageContext\r\n  ): Observable<T> {\r\n    return this.cmsStructureConfigService\r\n      .getComponentFromConfig(id)\r\n      .pipe(\r\n        switchMap((configuredComponent) =>\r\n          configuredComponent\r\n            ? of(configuredComponent)\r\n            : this.adapter.load(id, pageContext)\r\n        )\r\n      );\r\n  }\r\n\r\n  getList(ids: string[], pageContext: PageContext): Observable<CmsComponent[]> {\r\n    return this.cmsStructureConfigService.getComponentsFromConfig(ids).pipe(\r\n      switchMap((configuredComponents) => {\r\n        // check if we have some components that are not loaded from configuration\r\n        const missingIds = configuredComponents.reduce(\r\n          (acc, component, index) => {\r\n            if (component === undefined) {\r\n              acc.push(ids[index]);\r\n            }\r\n            return acc;\r\n          },\r\n          []\r\n        );\r\n\r\n        if (missingIds.length > 0) {\r\n          return (this.config.backend.occ.legacy\r\n            ? this.adapter.findComponentsByIdsLegacy(missingIds, pageContext)\r\n            : this.adapter.findComponentsByIds(missingIds, pageContext)\r\n          ).pipe(\r\n            map((loadedComponents) => [\r\n              ...configuredComponents.filter(Boolean),\r\n              ...loadedComponents,\r\n            ])\r\n          );\r\n        } else {\r\n          return of(configuredComponents);\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Action } from '@ngrx/store';\r\nimport { from, Observable } from 'rxjs';\r\nimport { catchError, groupBy, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { AuthActions } from '../../../auth/store/actions/index';\r\nimport { CmsComponent } from '../../../model/cms.model';\r\nimport { PageContext } from '../../../routing/index';\r\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\r\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { withdrawOn } from '../../../util/withdraw-on';\r\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\r\nimport { serializePageContext } from '../../utils/cms-utils';\r\nimport { CmsActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class ComponentsEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private cmsComponentConnector: CmsComponentConnector\r\n  ) {}\r\n\r\n  private contextChange$: Observable<Action> = this.actions$.pipe(\r\n    ofType(\r\n      SiteContextActions.LANGUAGE_CHANGE,\r\n      AuthActions.LOGOUT,\r\n      AuthActions.LOGIN\r\n    )\r\n  );\r\n\r\n  loadComponent$ = createEffect(\r\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\r\n      | CmsActions.LoadCmsComponentSuccess<CmsComponent>\r\n      | CmsActions.LoadCmsComponentFail\r\n    > =>\r\n      this.actions$.pipe(\r\n        ofType<CmsActions.LoadCmsComponent>(CmsActions.LOAD_CMS_COMPONENT),\r\n        groupBy((actions) => serializePageContext(actions.payload.pageContext)),\r\n        mergeMap((actionGroup) =>\r\n          actionGroup.pipe(\r\n            bufferDebounceTime(debounce, scheduler),\r\n            mergeMap((actions) =>\r\n              this.loadComponentsEffect(\r\n                actions.map((action) => action.payload.uid),\r\n                actions[0].payload.pageContext\r\n              )\r\n            )\r\n          )\r\n        ),\r\n        withdrawOn(this.contextChange$)\r\n      )\r\n  );\r\n\r\n  private loadComponentsEffect(\r\n    componentUids: string[],\r\n    pageContext: PageContext\r\n  ): Observable<\r\n    | CmsActions.LoadCmsComponentSuccess<CmsComponent>\r\n    | CmsActions.LoadCmsComponentFail\r\n  > {\r\n    return this.cmsComponentConnector.getList(componentUids, pageContext).pipe(\r\n      switchMap((components) => {\r\n        const actions: (\r\n          | CmsActions.LoadCmsComponentSuccess<CmsComponent>\r\n          | CmsActions.LoadCmsComponentFail\r\n        )[] = [];\r\n        const uidsLeft = new Set<string>(componentUids);\r\n        for (const component of components) {\r\n          actions.push(\r\n            new CmsActions.LoadCmsComponentSuccess({\r\n              component,\r\n              uid: component.uid,\r\n              pageContext,\r\n            })\r\n          );\r\n          uidsLeft.delete(component.uid);\r\n        }\r\n        // we have to emit LoadCmsComponentFail for all component's uids that\r\n        // are missing from the response\r\n        uidsLeft.forEach((uid) => {\r\n          actions.push(\r\n            new CmsActions.LoadCmsComponentFail({\r\n              uid,\r\n              pageContext,\r\n            })\r\n          );\r\n        });\r\n        return from(actions);\r\n      }),\r\n      catchError((error) =>\r\n        from(\r\n          componentUids.map(\r\n            (uid) =>\r\n              new CmsActions.LoadCmsComponentFail({\r\n                uid,\r\n                error: makeErrorSerializable(error),\r\n                pageContext,\r\n              })\r\n          )\r\n        )\r\n      )\r\n    );\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * The MIT License\r\n * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\r\n *\r\n * See:\r\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/glob.ts\r\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/aio/tests/deployment/shared/helpers.ts#L17\r\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/generator.ts#L86\r\n */\r\n\r\nconst QUESTION_MARK = '[^/]';\r\nconst WILD_SINGLE = '[^/]*';\r\nconst WILD_OPEN = '(?:.+\\\\/)?';\r\nconst TO_ESCAPE_BASE = [\r\n  { replace: /\\./g, with: '\\\\.' },\r\n  { replace: /\\+/g, with: '\\\\+' },\r\n  { replace: /\\*/g, with: WILD_SINGLE },\r\n];\r\nconst TO_ESCAPE_WILDCARD_QM = [\r\n  ...TO_ESCAPE_BASE,\r\n  { replace: /\\?/g, with: QUESTION_MARK },\r\n];\r\nconst TO_ESCAPE_LITERAL_QM = [\r\n  ...TO_ESCAPE_BASE,\r\n  { replace: /\\?/g, with: '\\\\?' },\r\n];\r\n\r\n/**\r\n * Converts the glob-like pattern into regex string.\r\n *\r\n * Patterns use a limited glob format:\r\n * `**` matches 0 or more path segments\r\n * `*` matches 0 or more characters excluding `/`\r\n * `?` matches exactly one character excluding `/` (but when @param literalQuestionMark is true, `?` is treated as normal character)\r\n * The `!` prefix marks the pattern as being negative, meaning that only URLs that don't match the pattern will be included\r\n *\r\n * @param glob glob-like pattern\r\n * @param literalQuestionMark when true, it tells that `?` is treated as a normal character\r\n */\r\nexport function globToRegex(glob: string, literalQuestionMark = false): string {\r\n  const toEscape = literalQuestionMark\r\n    ? TO_ESCAPE_LITERAL_QM\r\n    : TO_ESCAPE_WILDCARD_QM;\r\n  const segments = glob.split('/').reverse();\r\n  let regex = '';\r\n  while (segments.length > 0) {\r\n    const segment = segments.pop();\r\n    if (segment === '**') {\r\n      if (segments.length > 0) {\r\n        regex += WILD_OPEN;\r\n      } else {\r\n        regex += '.*';\r\n      }\r\n    } else {\r\n      const processed = toEscape.reduce(\r\n        (seg, escape) => seg.replace(escape.replace, escape.with),\r\n        segment\r\n      );\r\n      regex += processed;\r\n      if (segments.length > 0) {\r\n        regex += '\\\\/';\r\n      }\r\n    }\r\n  }\r\n  return regex;\r\n}\r\n\r\n/**\r\n * For given list of glob-like patterns, returns a matcher function.\r\n *\r\n * The matcher returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\r\n */\r\nexport function getGlobMatcher(patterns: string[]): (url: string) => boolean {\r\n  const processedPatterns: {\r\n    positive: boolean;\r\n    regex: RegExp;\r\n  }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\r\n    positive,\r\n    regex: new RegExp(regex),\r\n  }));\r\n\r\n  const includePatterns = processedPatterns.filter((spec) => spec.positive);\r\n  const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\r\n\r\n  return (url: string) =>\r\n    includePatterns.some((pattern) => pattern.regex.test(url)) &&\r\n    !excludePatterns.some((pattern) => pattern.regex.test(url));\r\n}\r\n\r\n/**\r\n * Converts list of glob-like patterns into list of RegExps with information whether the glob pattern is positive or negative\r\n */\r\nexport function processGlobPatterns(\r\n  urls: string[]\r\n): { positive: boolean; regex: string }[] {\r\n  return urls.map((url) => {\r\n    const positive = !url.startsWith('!');\r\n    url = positive ? url : url.substr(1);\r\n    return { positive, regex: `^${globToRegex(url)}$` };\r\n  });\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { processGlobPatterns } from './glob-utils';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class GlobService {\r\n  /**\r\n   * For given list of glob-like patterns, returns a validator function.\r\n   *\r\n   * The validator returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\r\n   */\r\n  getValidator(patterns: string[]): (url: string) => boolean {\r\n    const processedPatterns: {\r\n      positive: boolean;\r\n      regex: RegExp;\r\n    }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\r\n      positive,\r\n      regex: new RegExp(regex),\r\n    }));\r\n\r\n    const includePatterns = processedPatterns.filter((spec) => spec.positive);\r\n    const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\r\n\r\n    return (url: string) =>\r\n      includePatterns.some((pattern) => pattern.regex.test(url)) &&\r\n      !excludePatterns.some((pattern) => pattern.regex.test(url));\r\n  }\r\n}\r\n","import { Injectable, isDevMode } from '@angular/core';\r\nimport {\r\n  Route,\r\n  UrlMatcher,\r\n  UrlMatchResult,\r\n  UrlSegment,\r\n  UrlSegmentGroup,\r\n} from '@angular/router';\r\nimport { GlobService } from '../../util/glob.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UrlMatcherService {\r\n  constructor(protected globService: GlobService) {}\r\n\r\n  /**\r\n   * Returns a matcher that is always fails\r\n   */\r\n  getFalsy(): UrlMatcher {\r\n    return function falsyUrlMatcher(): null {\r\n      return null;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns a matcher for given list of paths\r\n   */\r\n  getFromPaths(paths: string[]): UrlMatcher {\r\n    const matchers = paths.map((path) => this.getFromPath(path));\r\n    const matcher = this.getCombined(matchers);\r\n    if (isDevMode()) {\r\n      matcher['_paths'] = paths; // property added for easier debugging of routes\r\n    }\r\n    return matcher;\r\n  }\r\n\r\n  /**\r\n   * Returns a matcher that combines the given matchers\r\n   * */\r\n  getCombined(matchers: UrlMatcher[]): UrlMatcher {\r\n    const matcher = function combinedUrlMatchers(\r\n      segments: UrlSegment[],\r\n      segmentGroup: UrlSegmentGroup,\r\n      route: Route\r\n    ): UrlMatchResult | null {\r\n      for (let i = 0; i < matchers.length; i++) {\r\n        const result = matchers[i](segments, segmentGroup, route);\r\n        if (result) {\r\n          return result;\r\n        }\r\n      }\r\n      return null;\r\n    };\r\n    if (isDevMode()) {\r\n      matcher['_matchers'] = matchers; // property added for easier debugging of routes\r\n    }\r\n    return matcher;\r\n  }\r\n\r\n  /**\r\n   * Similar to Angular's defaultUrlMatcher. Differences:\r\n   * - the `path` comes from function's argument, not from `route.path`\r\n   * - the empty path `''` is handled here, but in Angular is handled one level higher in the match() function\r\n   */\r\n  protected getFromPath(path: string = ''): UrlMatcher {\r\n    const matcher = function pathUrlMatcher(\r\n      segments: UrlSegment[],\r\n      segmentGroup: UrlSegmentGroup,\r\n      route: Route\r\n    ): UrlMatchResult | null {\r\n      /**\r\n       * @license\r\n       * The MIT License\r\n       * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\r\n       *\r\n       * See:\r\n       * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/router/src/shared.ts#L121\r\n       */\r\n\r\n      // use function's argument, not the `route.path`\r\n      if (path === '') {\r\n        if (\r\n          route.pathMatch === 'full' &&\r\n          (segmentGroup.hasChildren() || segments.length > 0)\r\n        ) {\r\n          return null;\r\n        }\r\n        return { consumed: [], posParams: {} };\r\n      }\r\n\r\n      const parts = path.split('/'); // use function's argument, not the `route.path`\r\n\r\n      if (parts.length > segments.length) {\r\n        // The actual URL is shorter than the config, no match\r\n        return null;\r\n      }\r\n\r\n      if (\r\n        route.pathMatch === 'full' &&\r\n        (segmentGroup.hasChildren() || parts.length < segments.length)\r\n      ) {\r\n        // The config is longer than the actual URL but we are looking for a full match, return null\r\n        return null;\r\n      }\r\n\r\n      const posParams: { [key: string]: UrlSegment } = {};\r\n\r\n      // Check each config part against the actual URL\r\n      for (let index = 0; index < parts.length; index++) {\r\n        const part = parts[index];\r\n        const segment = segments[index];\r\n        const isParameter = part.startsWith(':');\r\n        if (isParameter) {\r\n          posParams[part.substring(1)] = segment;\r\n        } else if (part !== segment.path) {\r\n          // The actual URL part does not match the config, no match\r\n          return null;\r\n        }\r\n      }\r\n\r\n      return { consumed: segments.slice(0, parts.length), posParams };\r\n    };\r\n    if (isDevMode()) {\r\n      matcher['_path'] = path; // property added for easier debugging of routes\r\n    }\r\n    return matcher;\r\n  }\r\n\r\n  /**\r\n   * Returns URL matcher that accepts almost everything (like `**` route), but not paths accepted by the given matcher\r\n   */\r\n  getOpposite(originalMatcher: UrlMatcher): UrlMatcher {\r\n    const matcher = function oppositeUrlMatcher(\r\n      segments: UrlSegment[],\r\n      group: UrlSegmentGroup,\r\n      route: Route\r\n    ) {\r\n      return originalMatcher(segments, group, route)\r\n        ? null\r\n        : { consumed: segments, posParams: {} };\r\n    };\r\n    if (isDevMode()) {\r\n      matcher['_originalMatcher'] = originalMatcher; // property added for easier debugging of routes\r\n    }\r\n    return matcher;\r\n  }\r\n\r\n  /**\r\n   * Returns URL matcher for the given list of glob-like patterns. Each pattern must start with `/` or `!/`.\r\n   */\r\n  getFromGlob(globPatterns: string[]): UrlMatcher {\r\n    const globValidator = this.globService.getValidator(globPatterns);\r\n\r\n    const matcher = function globUrlMatcher(\r\n      segments: UrlSegment[]\r\n    ): UrlMatchResult | null {\r\n      const fullPath = `/${segments.map((s) => s.path).join('/')}`;\r\n\r\n      return globValidator(fullPath)\r\n        ? { consumed: segments, posParams: {} }\r\n        : null;\r\n    };\r\n    if (isDevMode()) {\r\n      matcher['_globPatterns'] = globPatterns; // property added for easier debugging of routes\r\n    }\r\n    return matcher;\r\n  }\r\n}\r\n","import { Injectable, InjectionToken, Injector, isDevMode } from '@angular/core';\r\nimport { Route, Router, Routes, UrlMatcher } from '@angular/router';\r\nimport { UrlMatcherService } from '../services/url-matcher.service';\r\nimport { UrlMatcherFactory } from '../url-matcher/url-matcher-factory';\r\nimport { RouteConfig } from './routes-config';\r\nimport { RoutingConfigService } from './routing-config.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ConfigurableRoutesService {\r\n  constructor(\r\n    protected injector: Injector,\r\n    protected routingConfigService: RoutingConfigService,\r\n    protected urlMatcherService: UrlMatcherService\r\n  ) {}\r\n\r\n  protected initCalled = false; // guard not to call init() more than once\r\n\r\n  /**\r\n   * Enhances existing Angular routes using the routing config of Spartacus.\r\n   * Can be called only once.\r\n   */\r\n  init(): void {\r\n    if (!this.initCalled) {\r\n      this.initCalled = true;\r\n\r\n      this.configure();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enhances existing Angular routes using the routing config of Spartacus.\r\n   */\r\n  protected configure(): void {\r\n    // Router could not be injected in constructor due to cyclic dependency with APP_INITIALIZER:\r\n    const router = this.injector.get(Router);\r\n    router.resetConfig(this.configureRoutes(router.config));\r\n  }\r\n\r\n  /**\r\n   * Sets the property `path` or `matcher` for the given routes, based on the Spartacus' routing configuration.\r\n   *\r\n   * @param routes list of Angular `Route` objects\r\n   */\r\n  protected configureRoutes(routes: Routes): Routes {\r\n    return routes.map((route) => {\r\n      const configuredRoute = this.configureRoute(route);\r\n\r\n      if (route.children && route.children.length) {\r\n        configuredRoute.children = this.configureRoutes(route.children);\r\n      }\r\n      return configuredRoute;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets the property `path` or `matcher` of the `Route`, based on the Spartacus' routing configuration.\r\n   * Uses the property `data.cxRoute` to determine the name of the route.\r\n   * It's the same name used as a key in the routing configuration: `routing.routes[ROUTE NAME]`.\r\n   *\r\n   * @param route Angular `Route` object\r\n   */\r\n  protected configureRoute(route: Route): Route {\r\n    const routeName = this.getRouteName(route);\r\n    if (routeName) {\r\n      const routeConfig = this.routingConfigService.getRouteConfig(routeName);\r\n      this.validateRouteConfig(routeConfig, routeName, route);\r\n\r\n      if (routeConfig?.disabled) {\r\n        delete route.path;\r\n        return {\r\n          ...route,\r\n          matcher: this.urlMatcherService.getFalsy(),\r\n        };\r\n      } else if (routeConfig?.matchers) {\r\n        delete route.path;\r\n        return {\r\n          ...route,\r\n          matcher: this.resolveUrlMatchers(route, routeConfig?.matchers),\r\n        };\r\n      } else if (routeConfig?.paths?.length === 1) {\r\n        delete route.matcher;\r\n        return { ...route, path: routeConfig?.paths[0] };\r\n      } else {\r\n        delete route.path;\r\n        return {\r\n          ...route,\r\n          matcher: this.urlMatcherService.getFromPaths(\r\n            routeConfig?.paths || []\r\n          ),\r\n        };\r\n      }\r\n    }\r\n    return route; // if route doesn't have a name, just pass the original route\r\n  }\r\n\r\n  /**\r\n   * Creates a single `UrlMatcher` based on given matchers and factories of matchers.\r\n   *\r\n   * @param route Route object\r\n   * @param matchersOrFactories `UrlMatcher`s or injection tokens with a factory functions\r\n   *  that create UrlMatchers based on the given route.\r\n   */\r\n  protected resolveUrlMatchers(\r\n    route: Route,\r\n    matchersOrFactories: RouteConfig['matchers']\r\n  ): UrlMatcher {\r\n    const matchers: UrlMatcher[] = matchersOrFactories.map(\r\n      (matcherOrFactory) => {\r\n        return typeof matcherOrFactory === 'function'\r\n          ? matcherOrFactory // matcher\r\n          : this.resolveUrlMatcherFactory(route, matcherOrFactory); // factory injection token\r\n      }\r\n    );\r\n    return this.urlMatcherService.getCombined(matchers);\r\n  }\r\n\r\n  /**\r\n   * Creates an `UrlMatcher` based on the given route, using the factory function coming from the given injection token.\r\n   *\r\n   * @param route Route object\r\n   * @param factoryToken injection token with a factory function that will create an UrlMatcher using given route\r\n   */\r\n  protected resolveUrlMatcherFactory(\r\n    route: Route,\r\n    factoryToken: InjectionToken<UrlMatcherFactory>\r\n  ): UrlMatcher {\r\n    const factory = this.injector.get(factoryToken);\r\n    return factory(route);\r\n  }\r\n\r\n  /**\r\n   * Returns the name of the Route stored in its property `data.cxRoute`\r\n   * @param route\r\n   */\r\n  protected getRouteName(route: Route): string {\r\n    return route.data && route.data.cxRoute;\r\n  }\r\n\r\n  protected validateRouteConfig(\r\n    routeConfig: RouteConfig,\r\n    routeName: string,\r\n    route: Route\r\n  ) {\r\n    if (isDevMode()) {\r\n      // - null value of routeConfig or routeConfig.paths means explicit switching off the route - it's valid config\r\n      // - routeConfig with defined `matchers` is valid, even if `paths` are undefined\r\n      if (\r\n        routeConfig === null ||\r\n        routeConfig.paths === null ||\r\n        routeConfig?.matchers\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      // undefined value of routeConfig or routeConfig.paths is a misconfiguration\r\n      if (!routeConfig?.paths) {\r\n        this.warn(\r\n          `Could not configure the named route '${routeName}'`,\r\n          route,\r\n          `due to undefined config or undefined 'paths' property for this route`\r\n        );\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  private warn(...args) {\r\n    if (isDevMode()) {\r\n      console.warn(...args);\r\n    }\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { UrlCommands } from './url-command';\n\n@Pipe({\n  name: 'cxUrl',\n})\nexport class UrlPipe implements PipeTransform {\n  constructor(private urlService: SemanticPathService) {}\n\n  transform(commands: UrlCommands): any[] {\n    return this.urlService.transform(commands);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { Product } from '../../../model/product.model';\n@Pipe({\n  name: 'cxProductUrl',\n})\nexport class ProductURLPipe implements PipeTransform {\n  constructor(private semanticPath: SemanticPathService) {}\n  transform(product: Product) {\n    return this.semanticPath.transform({ cxRoute: 'product', params: product });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlPipe } from './url.pipe';\nimport { ProductURLPipe } from './product-url.pipe';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [UrlPipe, ProductURLPipe],\n  exports: [UrlPipe, ProductURLPipe],\n})\nexport class UrlModule {}\n","import { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class ExternalRoutesConfig {\r\n  routing?: {\r\n    internal?: string[];\r\n  };\r\n}\r\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({ providedIn: 'root' })\nexport class ExternalRoutesGuard implements CanActivate {\n  constructor(\n    protected winRef: WindowRef,\n    @Inject(PLATFORM_ID) protected platformId: Object\n  ) {}\n\n  /**\n   * Redirects to different storefront system for anticipated URL\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    if (isPlatformBrowser(this.platformId)) {\n      this.redirect(route, state);\n    }\n    return false;\n  }\n\n  /**\n   * Redirects to anticipated URL using full page reload, not Angular routing\n   */\n  protected redirect(_: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const window = this.winRef.nativeWindow;\n\n    if (window && window.location) {\n      window.location.href = state.url;\n    }\n  }\n}\n","import { ExternalRoutesService } from './external-routes.service';\n\nexport function addExternalRoutesFactory(service: ExternalRoutesService) {\n  const result = () => {\n    service.addRoutes();\n  };\n  return result;\n}\n","import { Injectable, Injector } from '@angular/core';\r\nimport { Router, Routes, UrlMatcher } from '@angular/router';\r\nimport { UrlMatcherService } from '../services/url-matcher.service';\r\nimport { ExternalRoutesConfig } from './external-routes-config';\r\nimport { ExternalRoutesGuard } from './external-routes.guard';\r\n\r\n/**\r\n * Service that helps redirecting to different storefront systems for configured URLs\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ExternalRoutesService {\r\n  constructor(\r\n    protected config: ExternalRoutesConfig,\r\n    protected urlMatcherService: UrlMatcherService,\r\n    protected injector: Injector\r\n  ) {}\r\n\r\n  protected get internalUrlPatterns(): ExternalRoutesConfig['routing']['internal'] {\r\n    return (\r\n      (this.config && this.config.routing && this.config.routing.internal) || []\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Prepends routes (to the Router.config) that are responsible for redirecting to a different storefront system\r\n   */\r\n  addRoutes(): void {\r\n    const router: Router = this.injector.get(Router);\r\n    const newRoutes = this.getRoutes();\r\n    if (newRoutes.length) {\r\n      router.resetConfig([...newRoutes, ...router.config]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns routes that are responsible for redirection to different storefront systems\r\n   */\r\n  protected getRoutes(): Routes {\r\n    if (!this.internalUrlPatterns.length) {\r\n      return [];\r\n    }\r\n    const routes: Routes = [];\r\n\r\n    routes.push({\r\n      pathMatch: 'full',\r\n      matcher: this.getUrlMatcher(),\r\n      canActivate: [ExternalRoutesGuard],\r\n      component: {} as any,\r\n    });\r\n\r\n    return routes;\r\n  }\r\n\r\n  /**\r\n   * Returns the URL matcher for the external route\r\n   */\r\n  protected getUrlMatcher(): UrlMatcher {\r\n    const matcher = this.urlMatcherService.getFromGlob(\r\n      this.internalUrlPatterns\r\n    );\r\n    return this.urlMatcherService.getOpposite(matcher); // the external route should be activated only when it's NOT an internal route\r\n  }\r\n}\r\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { addExternalRoutesFactory } from './external-routes.providers';\r\nimport { ExternalRoutesService } from './external-routes.service';\r\n\r\n/**\r\n * Prepends the external route that redirects to a different storefront system for configured URLs\r\n */\r\n@NgModule()\r\nexport class ExternalRoutesModule {\r\n  static forRoot(): ModuleWithProviders<ExternalRoutesModule> {\r\n    return {\r\n      ngModule: ExternalRoutesModule,\r\n      providers: [\r\n        {\r\n          provide: APP_INITIALIZER,\r\n          multi: true,\r\n          useFactory: addExternalRoutesFactory,\r\n          deps: [ExternalRoutesService],\r\n        },\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { PageType } from '../../model/cms.model';\n\nexport class PageContext {\n  id: string;\n  type?: PageType;\n\n  constructor(id: string, type?: PageType) {\n    this.id = id;\n    this.type = type;\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { RoutingConfig } from '../configurable-routes/config/routing-config';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ProtectedRoutesService {\r\n  private nonProtectedPaths: string[][] = []; // arrays of paths' segments list\r\n\r\n  protected get routingConfig(): RoutingConfig['routing'] {\r\n    return this.config && this.config.routing;\r\n  }\r\n\r\n  /**\r\n   * Returns 'protected' property (boolean) from routing config\r\n   *\r\n   * @returns boolean\r\n   */\r\n  public get shouldProtect(): boolean {\r\n    return this.routingConfig.protected;\r\n  }\r\n\r\n  constructor(protected config: RoutingConfig) {\r\n    if (this.shouldProtect) {\r\n      // pre-process config for performance:\r\n      this.nonProtectedPaths = this.getNonProtectedPaths().map((path) =>\r\n        this.getSegments(path)\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tells if the url is protected\r\n   */\r\n  isUrlProtected(urlSegments: string[]): boolean {\r\n    return (\r\n      this.shouldProtect &&\r\n      !this.matchAnyPath(urlSegments, this.nonProtectedPaths)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Tells whether the url matches at least one of the paths\r\n   */\r\n  protected matchAnyPath(\r\n    urlSegments: string[],\r\n    pathsSegments: string[][]\r\n  ): boolean {\r\n    return pathsSegments.some((pathSegments) =>\r\n      this.matchPath(urlSegments, pathSegments)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Tells whether the url matches the path\r\n   */\r\n  protected matchPath(urlSegments: string[], pathSegments: string[]): boolean {\r\n    if (urlSegments.length !== pathSegments.length) {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0; i < pathSegments.length; i++) {\r\n      const pathSeg = pathSegments[i];\r\n      const urlSeg = urlSegments[i];\r\n\r\n      // compare only static segments:\r\n      if (!pathSeg.startsWith(':') && pathSeg !== urlSeg) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Returns a list of paths that are not protected\r\n   */\r\n  protected getNonProtectedPaths(): string[] {\r\n    return Object.values(this.routingConfig.routes).reduce(\r\n      (acc, routeConfig) =>\r\n        routeConfig.protected === false && // must be explicitly false, ignore undefined\r\n        routeConfig.paths &&\r\n        routeConfig.paths.length\r\n          ? acc.concat(routeConfig.paths)\r\n          : acc,\r\n      []\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Splits the url by slashes\r\n   */\r\n  protected getSegments(url: string): string[] {\r\n    return (url || '').split('/');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\nimport { AuthGuard } from '../../auth/guards/auth.guard';\r\nimport { ProtectedRoutesService } from './protected-routes.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ProtectedRoutesGuard implements CanActivate {\r\n  constructor(\r\n    protected service: ProtectedRoutesService,\r\n    protected authGuard: AuthGuard\r\n  ) {}\r\n\r\n  /**\r\n   * When the anticipated url is protected, it switches to the AuthGuard. Otherwise emits true.\r\n   */\r\n  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\r\n    let urlSegments: string[] = route.url.map((seg) => seg.path);\r\n\r\n    // For the root path `/` ActivatedRoute contains an empty array of segments:\r\n    urlSegments = urlSegments.length ? urlSegments : [''];\r\n\r\n    if (this.service.isUrlProtected(urlSegments)) {\r\n      return this.authGuard.canActivate();\r\n    }\r\n    return of(true);\r\n  }\r\n}\r\n","import { Location } from '@angular/common';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Action } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { AuthActions } from '../../../auth/store/actions/index';\r\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\r\nimport { CmsRoute } from '../../models/cms-route';\r\nimport { RoutingActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class RouterEffects {\r\n  @Effect({ dispatch: false })\r\n  navigate$: Observable<any> = this.actions$.pipe(\r\n    ofType(RoutingActions.ROUTER_GO),\r\n    map((action: RoutingActions.RouteGoAction) => action.payload),\r\n    tap(({ path, query: queryParams, extras }) => {\r\n      this.router.navigate(path, { queryParams, ...extras });\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  navigateBuUrl$: Observable<any> = this.actions$.pipe(\r\n    ofType(RoutingActions.ROUTER_GO_BY_URL),\r\n    map((action: RoutingActions.RouteGoAction) => action.payload),\r\n    tap((url) => {\r\n      this.router.navigateByUrl(url);\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  clearCmsRoutes$: Observable<Action> = this.actions$.pipe(\r\n    ofType(\r\n      SiteContextActions.LANGUAGE_CHANGE,\r\n      AuthActions.LOGOUT,\r\n      AuthActions.LOGIN\r\n    ),\r\n    tap(() => {\r\n      const filteredConfig = this.router.config.filter(\r\n        (route: CmsRoute) => !(route.data && route.data.cxCmsRouteContext)\r\n      );\r\n      if (filteredConfig.length !== this.router.config.length) {\r\n        this.router.resetConfig(filteredConfig);\r\n      }\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  navigateBack$: Observable<Action> = this.actions$.pipe(\r\n    ofType(RoutingActions.ROUTER_BACK),\r\n    tap(() => this.location.back())\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  navigateForward$: Observable<Action> = this.actions$.pipe(\r\n    ofType(RoutingActions.ROUTER_FORWARD),\r\n    tap(() => this.location.forward())\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private router: Router,\r\n    private location: Location\r\n  ) {}\r\n}\r\n","import { RouterEffects } from './router.effect';\n\nexport const effects: any[] = [RouterEffects];\n\nexport * from './router.effect';\n","import { InjectionToken, Provider } from '@angular/core';\r\nimport { RouterStateSnapshot } from '@angular/router';\r\nimport * as fromNgrxRouter from '@ngrx/router-store';\r\nimport { ActionReducerMap } from '@ngrx/store';\r\nimport { PageType } from '../../../model/cms.model';\r\nimport { CmsActivatedRouteSnapshot } from '../../models/cms-route';\r\nimport { PageContext } from '../../models/page-context.model';\r\nimport {\r\n  ActivatedRouterStateSnapshot,\r\n  RouterState,\r\n  State,\r\n} from '../routing-state';\r\n\r\nexport const initialState: RouterState = {\r\n  navigationId: 0,\r\n  state: {\r\n    url: '',\r\n    queryParams: {},\r\n    params: {},\r\n    context: {\r\n      id: '',\r\n    },\r\n    cmsRequired: false,\r\n  },\r\n  nextState: undefined,\r\n};\r\n\r\nexport function getReducers(): ActionReducerMap<State> {\r\n  return {\r\n    router: reducer,\r\n  };\r\n}\r\n\r\nexport function reducer(\r\n  state: RouterState = initialState,\r\n  action: any\r\n): RouterState {\r\n  switch (action.type) {\r\n    case fromNgrxRouter.ROUTER_NAVIGATION: {\r\n      return {\r\n        ...state,\r\n        nextState: action.payload.routerState,\r\n        navigationId: action.payload.event.id,\r\n      };\r\n    }\r\n\r\n    case fromNgrxRouter.ROUTER_ERROR:\r\n    case fromNgrxRouter.ROUTER_CANCEL: {\r\n      return {\r\n        ...state,\r\n        nextState: undefined,\r\n      };\r\n    }\r\n\r\n    case fromNgrxRouter.ROUTER_NAVIGATED: {\r\n      return {\r\n        state: action.payload.routerState,\r\n        navigationId: action.payload.event.id,\r\n        nextState: undefined,\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducerMap<\r\n  State\r\n>> = new InjectionToken<ActionReducerMap<State>>('RouterReducers');\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n\r\n/* The serializer is there to parse the RouterStateSnapshot,\r\nand to reduce the amount of properties to be passed to the reducer.\r\n */\r\nexport class CustomSerializer\r\n  implements\r\n    fromNgrxRouter.RouterStateSerializer<ActivatedRouterStateSnapshot> {\r\n  serialize(routerState: RouterStateSnapshot): ActivatedRouterStateSnapshot {\r\n    const { url } = routerState;\r\n    const { queryParams } = routerState.root;\r\n\r\n    let state: CmsActivatedRouteSnapshot = routerState.root as CmsActivatedRouteSnapshot;\r\n    let cmsRequired = false;\r\n    let context: PageContext;\r\n\r\n    while (state.firstChild) {\r\n      state = state.firstChild as CmsActivatedRouteSnapshot;\r\n\r\n      // we use context information embedded in Cms driven routes from any parent route\r\n      if (state.data && state.data.cxCmsRouteContext) {\r\n        context = state.data.cxCmsRouteContext;\r\n      }\r\n\r\n      // we assume, that any route that has CmsPageGuard or it's child\r\n      // is cmsRequired\r\n      if (\r\n        !cmsRequired &&\r\n        (context ||\r\n          (state.routeConfig &&\r\n            state.routeConfig.canActivate &&\r\n            state.routeConfig.canActivate.find(\r\n              (x) => x && x.guardName === 'CmsPageGuard'\r\n            )))\r\n      ) {\r\n        cmsRequired = true;\r\n      }\r\n    }\r\n    const { params } = state;\r\n\r\n    // we give smartedit preview page a PageContext\r\n    if (state.url.length > 0 && state.url[0].path === 'cx-preview') {\r\n      context = {\r\n        id: 'smartedit-preview',\r\n        type: PageType.CONTENT_PAGE,\r\n      };\r\n    } else {\r\n      if (params['productCode']) {\r\n        context = { id: params['productCode'], type: PageType.PRODUCT_PAGE };\r\n      } else if (params['categoryCode']) {\r\n        context = { id: params['categoryCode'], type: PageType.CATEGORY_PAGE };\r\n      } else if (params['brandCode']) {\r\n        context = { id: params['brandCode'], type: PageType.CATEGORY_PAGE };\r\n      } else if (state.data.pageLabel !== undefined) {\r\n        context = { id: state.data.pageLabel, type: PageType.CONTENT_PAGE };\r\n      } else if (!context) {\r\n        if (state.url.length > 0) {\r\n          const pageLabel =\r\n            '/' + state.url.map((urlSegment) => urlSegment.path).join('/');\r\n          context = {\r\n            id: pageLabel,\r\n            type: PageType.CONTENT_PAGE,\r\n          };\r\n        } else {\r\n          context = {\r\n            id: 'homepage',\r\n            type: PageType.CONTENT_PAGE,\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    return { url, queryParams, params, context, cmsRequired };\r\n  }\r\n}\r\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport {\r\n  RouterState,\r\n  RouterStateSerializer,\r\n  StoreRouterConnectingModule,\r\n} from '@ngrx/router-store';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { ConfigurableRoutesService } from './configurable-routes/configurable-routes.service';\r\nimport { effects } from './store/effects/index';\r\nimport {\r\n  CustomSerializer,\r\n  reducerProvider,\r\n  reducerToken,\r\n} from './store/reducers/router.reducer';\r\nimport { ROUTING_FEATURE } from './store/routing-state';\r\n\r\nexport function initConfigurableRoutes(\r\n  service: ConfigurableRoutesService\r\n): () => void {\r\n  const result = () => service.init(); // workaround for AOT compilation (see https://stackoverflow.com/a/51977115)\r\n  return result;\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    StoreModule.forFeature(ROUTING_FEATURE, reducerToken),\r\n    EffectsModule.forFeature(effects),\r\n    StoreRouterConnectingModule.forRoot({\r\n      routerState: RouterState.Minimal,\r\n      stateKey: ROUTING_FEATURE, // name of reducer key\r\n    }),\r\n  ],\r\n})\r\nexport class RoutingModule {\r\n  static forRoot(): ModuleWithProviders<RoutingModule> {\r\n    return {\r\n      ngModule: RoutingModule,\r\n      providers: [\r\n        reducerProvider,\r\n        {\r\n          provide: RouterStateSerializer,\r\n          useClass: CustomSerializer,\r\n        },\r\n        {\r\n          provide: APP_INITIALIZER,\r\n          useFactory: initConfigurableRoutes,\r\n          deps: [ConfigurableRoutesService],\r\n          multi: true,\r\n        },\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { inject, InjectionToken } from '@angular/core';\r\nimport { Route } from '@angular/router';\r\nimport { RoutingConfigService } from '../configurable-routes';\r\nimport { UrlMatcherService } from '../services/url-matcher.service';\r\nimport { UrlMatcherFactory } from './url-matcher-factory';\r\n\r\nexport function getDefaultUrlMatcherFactory(\r\n  routingConfigService: RoutingConfigService,\r\n  urlMatcherService: UrlMatcherService\r\n): UrlMatcherFactory {\r\n  const factory = (route: Route) => {\r\n    const routeName = route.data && route.data['cxRoute'];\r\n    const routeConfig = routingConfigService.getRouteConfig(routeName);\r\n    const paths = (routeConfig && routeConfig.paths) || [];\r\n    return urlMatcherService.getFromPaths(paths);\r\n  };\r\n  return factory;\r\n}\r\n\r\n/**\r\n * Injection token with url matcher factory for spartacus routes containing property `data.cxRoute`.\r\n * The provided url matcher matches the configured `paths` from routing config.\r\n *\r\n * If this matcher doesn't fit the requirements, it can be replaced with custom matcher\r\n * or additional matchers can be added for a specific route. See for example PRODUCT_DETAILS_URL_MATCHER.\r\n *\r\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\r\n */\r\nexport const DEFAULT_URL_MATCHER = new InjectionToken<UrlMatcherFactory>(\r\n  'DEFAULT_URL_MATCHER',\r\n  {\r\n    providedIn: 'root',\r\n    factory: () =>\r\n      getDefaultUrlMatcherFactory(\r\n        inject(RoutingConfigService),\r\n        inject(UrlMatcherService)\r\n      ),\r\n  }\r\n);\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, filter, map, mergeMap, take } from 'rxjs/operators';\r\nimport { RoutingService } from '../../../routing/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\r\nimport { CmsActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class NavigationEntryItemEffects {\r\n  @Effect()\r\n  loadNavigationItems$: Observable<\r\n    | CmsActions.LoadCmsNavigationItemsSuccess\r\n    | CmsActions.LoadCmsNavigationItemsFail\r\n  > = this.actions$.pipe(\r\n    ofType(CmsActions.LOAD_CMS_NAVIGATION_ITEMS),\r\n    map((action: CmsActions.LoadCmsNavigationItems) => action.payload),\r\n    map((payload) => {\r\n      return {\r\n        ids: this.getIdListByItemType(payload.items),\r\n        nodeId: payload.nodeId,\r\n      };\r\n    }),\r\n    mergeMap((data) => {\r\n      if (data.ids.componentIds.length > 0) {\r\n        return this.routingService.getRouterState().pipe(\r\n          filter((routerState) => routerState !== undefined),\r\n          map((routerState) => routerState.state.context),\r\n          take(1),\r\n          mergeMap((pageContext) =>\r\n            // download all items in one request\r\n            this.cmsComponentConnector\r\n              .getList(data.ids.componentIds, pageContext)\r\n              .pipe(\r\n                map(\r\n                  (components) =>\r\n                    new CmsActions.LoadCmsNavigationItemsSuccess({\r\n                      nodeId: data.nodeId,\r\n                      components: components,\r\n                    })\r\n                ),\r\n                catchError((error) =>\r\n                  of(\r\n                    new CmsActions.LoadCmsNavigationItemsFail(\r\n                      data.nodeId,\r\n                      makeErrorSerializable(error)\r\n                    )\r\n                  )\r\n                )\r\n              )\r\n          )\r\n        );\r\n      } else if (data.ids.pageIds.length > 0) {\r\n        // TODO: future work\r\n        // dispatch action to load cms page one by one\r\n      } else if (data.ids.mediaIds.length > 0) {\r\n        // TODO: future work\r\n        // send request to get list of media\r\n      } else {\r\n        return of(\r\n          new CmsActions.LoadCmsNavigationItemsFail(\r\n            data.nodeId,\r\n            'navigation nodes are empty'\r\n          )\r\n        );\r\n      }\r\n    })\r\n  );\r\n\r\n  // We only consider 3 item types: cms page, cms component, and media.\r\n  getIdListByItemType(\r\n    itemList: any[]\r\n  ): { pageIds: string[]; componentIds: string[]; mediaIds: string[] } {\r\n    const pageIds: string[] = [];\r\n    const componentIds: string[] = [];\r\n    const mediaIds: string[] = [];\r\n\r\n    itemList.forEach((item) => {\r\n      if (item.superType === 'AbstractCMSComponent') {\r\n        componentIds.push(item.id);\r\n      } else if (item.superType === 'AbstractPage') {\r\n        pageIds.push(item.id);\r\n      } else if (item.superType === 'AbstractMedia') {\r\n        mediaIds.push(item.id);\r\n      }\r\n    });\r\n    return { pageIds: pageIds, componentIds: componentIds, mediaIds: mediaIds };\r\n  }\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private cmsComponentConnector: CmsComponentConnector,\r\n    private routingService: RoutingService\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { catchError, switchMap } from 'rxjs/operators';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { CmsPageAdapter } from './cms-page.adapter';\r\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\r\nimport { PageContext } from '../../../routing/models/page-context.model';\r\nimport { CmsStructureModel } from '../../model/page.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CmsPageConnector {\r\n  constructor(\r\n    protected cmsPageAdapter: CmsPageAdapter,\r\n    protected cmsStructureConfigService: CmsStructureConfigService\r\n  ) {}\r\n\r\n  /**\r\n   * Returns an observable with the page structure. The page structure is\r\n   * typically loaded from a backend, but can also be returned from static\r\n   * configuration (see `CmsStructureConfigService`).\r\n   */\r\n  get(pageContext: PageContext): Observable<CmsStructureModel> {\r\n    return this.cmsStructureConfigService\r\n      .shouldIgnoreBackend(pageContext.id)\r\n      .pipe(\r\n        switchMap((loadFromConfig) => {\r\n          if (!loadFromConfig) {\r\n            return this.cmsPageAdapter.load(pageContext).pipe(\r\n              catchError((error) => {\r\n                if (\r\n                  error instanceof HttpErrorResponse &&\r\n                  error.status === 400\r\n                ) {\r\n                  return of({});\r\n                } else {\r\n                  return throwError(error);\r\n                }\r\n              })\r\n            );\r\n          } else {\r\n            return of({});\r\n          }\r\n        }),\r\n        switchMap((page) => this.mergeDefaultPageStructure(pageContext, page))\r\n      );\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Merge default page structure inot the given `CmsStructureModel`.\r\n   * This is benefitial for a fast setup of the UI without necessary\r\n   * finegrained CMS setup.\r\n   */\r\n  private mergeDefaultPageStructure(\r\n    pageContext: PageContext,\r\n    pageStructure: CmsStructureModel\r\n  ): Observable<CmsStructureModel> {\r\n    return this.cmsStructureConfigService.mergePageStructure(\r\n      pageContext.id,\r\n      pageStructure\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Action } from '@ngrx/store';\r\nimport { Observable, of } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  filter,\r\n  groupBy,\r\n  map,\r\n  mergeMap,\r\n  switchMap,\r\n  take,\r\n} from 'rxjs/operators';\r\nimport { AuthActions } from '../../../auth/store/actions/index';\r\nimport { RoutingService } from '../../../routing/index';\r\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { CmsPageConnector } from '../../connectors/page/cms-page.connector';\r\nimport { CmsStructureModel } from '../../model/page.model';\r\nimport { serializePageContext } from '../../utils/cms-utils';\r\nimport { CmsActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class PageEffects {\r\n  @Effect()\r\n  refreshPage$: Observable<Action> = this.actions$.pipe(\r\n    ofType(\r\n      SiteContextActions.LANGUAGE_CHANGE,\r\n      AuthActions.LOGOUT,\r\n      AuthActions.LOGIN\r\n    ),\r\n    switchMap(() =>\r\n      this.routingService.getRouterState().pipe(\r\n        filter(\r\n          (routerState) =>\r\n            routerState &&\r\n            routerState.state &&\r\n            routerState.state.cmsRequired &&\r\n            !routerState.nextState\r\n        ),\r\n        take(1),\r\n        map((routerState) => routerState.state.context),\r\n        mergeMap((context) => of(new CmsActions.LoadCmsPageData(context)))\r\n      )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  loadPageData$: Observable<Action> = this.actions$.pipe(\r\n    ofType(CmsActions.LOAD_CMS_PAGE_DATA),\r\n    map((action: CmsActions.LoadCmsPageData) => action.payload),\r\n    groupBy((pageContext) => serializePageContext(pageContext)),\r\n    mergeMap((group) =>\r\n      group.pipe(\r\n        switchMap((pageContext) =>\r\n          this.cmsPageConnector.get(pageContext).pipe(\r\n            mergeMap((cmsStructure: CmsStructureModel) => {\r\n              const actions: Action[] = [\r\n                new CmsActions.CmsGetComponentFromPage(\r\n                  cmsStructure.components.map((component) => ({\r\n                    component,\r\n                    pageContext,\r\n                  }))\r\n                ),\r\n                new CmsActions.LoadCmsPageDataSuccess(\r\n                  pageContext,\r\n                  cmsStructure.page\r\n                ),\r\n              ];\r\n\r\n              const pageLabel = cmsStructure.page.label;\r\n              // For content pages the page label returned from backend can be different than page ID initially assumed from route.\r\n              // In such a case let's save the success response not only for initially assumed page ID, but also for correct page label.\r\n              if (pageLabel && pageLabel !== pageContext.id) {\r\n                actions.unshift(\r\n                  new CmsActions.CmsSetPageSuccessIndex(\r\n                    { id: pageLabel, type: pageContext.type },\r\n                    cmsStructure.page\r\n                  )\r\n                );\r\n              }\r\n\r\n              return actions;\r\n            }),\r\n            catchError((error) =>\r\n              of(\r\n                new CmsActions.LoadCmsPageDataFail(\r\n                  pageContext,\r\n                  makeErrorSerializable(error)\r\n                )\r\n              )\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private cmsPageConnector: CmsPageConnector,\r\n    private routingService: RoutingService\r\n  ) {}\r\n}\r\n","import { ComponentsEffects } from './components.effect';\r\nimport { NavigationEntryItemEffects } from './navigation-entry-item.effect';\r\nimport { PageEffects } from './page.effect';\r\n\r\nexport const effects: any[] = [\r\n  PageEffects,\r\n  ComponentsEffects,\r\n  NavigationEntryItemEffects,\r\n];\r\n\r\nexport * from './components.effect';\r\nexport * from './navigation-entry-item.effect';\r\nexport * from './page.effect';\r\n","import { loaderReducer } from '../../../state/utils/loader/loader.reducer';\r\nimport { serializePageContext } from '../../utils/cms-utils';\r\nimport { CmsActions } from '../actions/index';\r\nimport { ComponentsContext } from '../cms-state';\r\n\r\nexport const initialState: ComponentsContext = {\r\n  component: undefined,\r\n  pageContext: {},\r\n};\r\n\r\nfunction componentExistsReducer<T>(\r\n  state: boolean | undefined,\r\n  action: CmsActions.CmsComponentAction<T>\r\n): boolean {\r\n  switch (action.type) {\r\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL:\r\n      return false;\r\n\r\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE:\r\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS:\r\n      return true;\r\n  }\r\n  return state;\r\n}\r\n\r\nexport function reducer<T>(\r\n  state = initialState,\r\n  action: CmsActions.CmsComponentAction<T>\r\n): ComponentsContext {\r\n  switch (action.type) {\r\n    case CmsActions.LOAD_CMS_COMPONENT: {\r\n      const pageContextReducer = loaderReducer<boolean>(\r\n        action.meta.entityType,\r\n        componentExistsReducer\r\n      );\r\n      const context = serializePageContext(action.payload.pageContext, true);\r\n      return {\r\n        ...state,\r\n        pageContext: {\r\n          ...state.pageContext,\r\n          [context]: pageContextReducer(state.pageContext[context], action),\r\n        },\r\n      };\r\n    }\r\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL: {\r\n      const pageContextReducer = loaderReducer<boolean>(\r\n        action.meta.entityType,\r\n        componentExistsReducer\r\n      );\r\n      const context = serializePageContext(action.payload.pageContext, true);\r\n      return {\r\n        ...state,\r\n        pageContext: {\r\n          ...state.pageContext,\r\n          [context]: pageContextReducer(state.pageContext[context], action),\r\n        },\r\n      };\r\n    }\r\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS: {\r\n      const pageContextReducer = loaderReducer<boolean>(\r\n        action.meta.entityType,\r\n        componentExistsReducer\r\n      );\r\n      const context = serializePageContext(action.payload.pageContext, true);\r\n      return {\r\n        ...state,\r\n        component: action.payload.component as T,\r\n        pageContext: {\r\n          ...state.pageContext,\r\n          [context]: pageContextReducer(state.pageContext[context], action),\r\n        },\r\n      };\r\n    }\r\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE: {\r\n      const pageContextReducer = loaderReducer<boolean>(\r\n        action.meta.entityType,\r\n        componentExistsReducer\r\n      );\r\n      if (!Array.isArray(action.payload)) {\r\n        const context = serializePageContext(action.payload.pageContext, true);\r\n        return {\r\n          ...state,\r\n          component: action.payload.component as T,\r\n          pageContext: {\r\n            ...state.pageContext,\r\n            [context]: pageContextReducer(state.pageContext[context], action),\r\n          },\r\n        };\r\n      }\r\n    }\r\n  }\r\n  return state;\r\n}\r\n","import { NodeItem } from '../../model/node-item.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: NodeItem = undefined;\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.CmsNavigationEntryItemAction\n): NodeItem {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_NAVIGATION_ITEMS_SUCCESS: {\n      if (action.payload.components) {\n        const components = action.payload.components;\n        const newItem: NodeItem = components.reduce(\n          (compItems: { [uid_type: string]: any }, component: any) => {\n            return {\n              ...compItems,\n              [`${component.uid}_AbstractCMSComponent`]: component,\n            };\n          },\n          {\n            ...{},\n          }\n        );\n\n        return {\n          ...state,\n          ...newItem,\n        };\n      }\n    }\n  }\n\n  return state;\n}\n","import { EntityState } from '../../../state/utils/entity/entity-state';\nimport { Page } from '../../model/page.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: EntityState<Page> = { entities: {} };\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.LoadCmsPageDataSuccess\n): EntityState<Page> {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n      const page: Page = action.payload;\n      return { ...state, entities: { ...state.entities, [page.pageId]: page } };\n    }\n  }\n  return state;\n}\n","import { CmsActions } from '../actions/index';\n\nexport const initialState = undefined;\n\nexport function reducer(\n  entityType: string\n): (\n  state: string,\n  action:\n    | CmsActions.LoadCmsPageDataSuccess\n    | CmsActions.LoadCmsPageDataFail\n    | CmsActions.CmsSetPageFailIndex\n) => string {\n  return (\n    state = initialState,\n    action:\n      | CmsActions.LoadCmsPageDataSuccess\n      | CmsActions.LoadCmsPageDataFail\n      | CmsActions.CmsSetPageSuccessIndex\n      | CmsActions.CmsSetPageFailIndex\n  ): string => {\n    if (action.meta && action.meta.entityType === entityType) {\n      switch (action.type) {\n        case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n          return action.payload.pageId;\n        }\n\n        case CmsActions.LOAD_CMS_PAGE_DATA_FAIL: {\n          return initialState;\n        }\n\n        case CmsActions.CMS_SET_PAGE_FAIL_INDEX: {\n          return action.payload;\n        }\n\n        case CmsActions.CMS_SET_PAGE_SUCCESS_INDEX: {\n          return action.payload.pageId;\n        }\n      }\n    }\n    return state;\n  };\n}\n","import { InjectionToken, Provider } from '@angular/core';\r\nimport {\r\n  Action,\r\n  ActionReducer,\r\n  ActionReducerMap,\r\n  combineReducers,\r\n  MetaReducer,\r\n} from '@ngrx/store';\r\nimport { AuthActions } from '../../../auth/store/actions/index';\r\nimport { PageType } from '../../../model/cms.model';\r\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\r\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\r\nimport { entityReducer } from '../../../state/utils/entity/entity.reducer';\r\nimport { NodeItem } from '../../model/node-item.model';\r\nimport {\r\n  CmsState,\r\n  COMPONENT_ENTITY,\r\n  NAVIGATION_DETAIL_ENTITY,\r\n  StateWithCms,\r\n} from '../cms-state';\r\nimport * as fromComponentsReducer from './components.reducer';\r\nimport * as fromNavigation from './navigation-entry-item.reducer';\r\nimport * as fromPageReducer from './page-data.reducer';\r\nimport * as fromPageIndexReducer from './page-index.reducer';\r\n\r\nexport function getReducers(): ActionReducerMap<CmsState> {\r\n  return {\r\n    page: combineReducers({\r\n      pageData: fromPageReducer.reducer,\r\n      index: combineReducers({\r\n        content: entityLoaderReducer<string>(\r\n          PageType.CONTENT_PAGE,\r\n          fromPageIndexReducer.reducer(PageType.CONTENT_PAGE)\r\n        ),\r\n        product: entityLoaderReducer<string>(\r\n          PageType.PRODUCT_PAGE,\r\n          fromPageIndexReducer.reducer(PageType.PRODUCT_PAGE)\r\n        ),\r\n        category: entityLoaderReducer<string>(\r\n          PageType.CATEGORY_PAGE,\r\n          fromPageIndexReducer.reducer(PageType.CATEGORY_PAGE)\r\n        ),\r\n        catalog: entityLoaderReducer<string>(\r\n          PageType.CATALOG_PAGE,\r\n          fromPageIndexReducer.reducer(PageType.CATALOG_PAGE)\r\n        ),\r\n      }),\r\n    }),\r\n    components: entityReducer(COMPONENT_ENTITY, fromComponentsReducer.reducer),\r\n    navigation: entityLoaderReducer<NodeItem>(\r\n      NAVIGATION_DETAIL_ENTITY,\r\n      fromNavigation.reducer\r\n    ),\r\n  };\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducerMap<\r\n  CmsState\r\n>> = new InjectionToken<ActionReducerMap<CmsState>>('CmsReducers');\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n\r\nexport function clearCmsState(\r\n  reducer: ActionReducer<StateWithCms, Action>\r\n): ActionReducer<StateWithCms, Action> {\r\n  return function (state, action) {\r\n    if (\r\n      action.type === SiteContextActions.LANGUAGE_CHANGE ||\r\n      action.type === AuthActions.LOGOUT ||\r\n      action.type === AuthActions.LOGIN\r\n    ) {\r\n      state = undefined;\r\n    }\r\n    return reducer(state, action);\r\n  };\r\n}\r\n\r\nexport const metaReducers: MetaReducer<StateWithCms>[] = [clearCmsState];\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { provideDefaultConfigFactory } from '../../config/config.module';\r\nimport {\r\n  StateConfig,\r\n  StateTransferType,\r\n} from '../../state/config/state-config';\r\nimport { StateModule } from '../../state/state.module';\r\nimport { CMS_FEATURE } from './cms-state';\r\nimport { effects } from './effects/index';\r\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\r\n\r\nexport function cmsStoreConfigFactory(): StateConfig {\r\n  // if we want to reuse CMS_FEATURE const in config, we have to use factory instead of plain object\r\n  const config: StateConfig = {\r\n    state: {\r\n      ssrTransfer: {\r\n        keys: { [CMS_FEATURE]: StateTransferType.TRANSFER_STATE },\r\n      },\r\n    },\r\n  };\r\n  return config;\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    StateModule,\r\n    StoreModule.forFeature(CMS_FEATURE, reducerToken, { metaReducers }),\r\n    EffectsModule.forFeature(effects),\r\n  ],\r\n  providers: [\r\n    provideDefaultConfigFactory(cmsStoreConfigFactory),\r\n    reducerProvider,\r\n  ],\r\n})\r\nexport class CmsStoreModule {}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '../config/config.module';\r\nimport { defaultCmsModuleConfig } from './config/default-cms-config';\r\nimport { CmsService } from './facade/cms.service';\r\nimport { CmsPageTitleModule } from './page/page.module';\r\nimport { CmsStoreModule } from './store/cms-store.module';\r\n\r\n@NgModule({\r\n  imports: [CmsStoreModule, CmsPageTitleModule],\r\n})\r\nexport class CmsModule {\r\n  static forRoot(): ModuleWithProviders<CmsModule> {\r\n    return {\r\n      ngModule: CmsModule,\r\n      providers: [CmsService, provideDefaultConfig(defaultCmsModuleConfig)],\r\n    };\r\n  }\r\n}\r\n","import { Inject, Injectable, Optional } from '@angular/core';\r\nimport { combineLatest, Observable, of } from 'rxjs';\r\nimport { debounceTime, filter, map, switchMap } from 'rxjs/operators';\r\nimport { resolveApplicable } from '../../util/applicable';\r\nimport { Page, PageMeta } from '../model/page.model';\r\nimport { PageMetaResolver } from '../page/page-meta.resolver';\r\nimport { CmsService } from './cms.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PageMetaService {\r\n  constructor(\r\n    @Optional()\r\n    @Inject(PageMetaResolver)\r\n    protected resolvers: PageMetaResolver[],\r\n    protected cms: CmsService\r\n  ) {\r\n    this.resolvers = this.resolvers || [];\r\n  }\r\n  /**\r\n   * The list of resolver interfaces will be evaluated for the pageResolvers.\r\n   *\r\n   * TOOD: optimize browser vs SSR resolvers; image, robots and description\r\n   *       aren't needed during browsing.\r\n   * TODO: we can make the list of resolver types configurable\r\n   */\r\n  protected resolverMethods: { [key: string]: string } = {\r\n    title: 'resolveTitle',\r\n    heading: 'resolveHeading',\r\n    description: 'resolveDescription',\r\n    breadcrumbs: 'resolveBreadcrumbs',\r\n    image: 'resolveImage',\r\n    robots: 'resolveRobots',\r\n  };\r\n\r\n  getMeta(): Observable<PageMeta> {\r\n    return this.cms.getCurrentPage().pipe(\r\n      filter(Boolean),\r\n      switchMap((page: Page) => {\r\n        const metaResolver = this.getMetaResolver(page);\r\n\r\n        if (metaResolver) {\r\n          return this.resolve(metaResolver);\r\n        } else {\r\n          // we do not have a page resolver\r\n          return of(null);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If a `PageResolver` has implemented a resolver interface, the resolved data\r\n   * is merged into the `PageMeta` object.\r\n   * @param metaResolver\r\n   */\r\n  protected resolve(metaResolver: PageMetaResolver): Observable<PageMeta> {\r\n    const resolveMethods: Observable<PageMeta>[] = Object.keys(\r\n      this.resolverMethods\r\n    )\r\n      .filter((key) => metaResolver[this.resolverMethods[key]])\r\n      .map((key) =>\r\n        metaResolver[this.resolverMethods[key]]().pipe(\r\n          map((data) => ({\r\n            [key]: data,\r\n          }))\r\n        )\r\n      );\r\n\r\n    return combineLatest(resolveMethods).pipe(\r\n      debounceTime(0), // avoid partial data emissions when all methods resolve at the same time\r\n      map((data) => Object.assign({}, ...data))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the resolver with the best match, based on a score\r\n   * generated by the resolver.\r\n   *\r\n   * Resolvers match by default on `PageType` and `page.template`.\r\n   */\r\n  protected getMetaResolver(page: Page): PageMetaResolver {\r\n    return resolveApplicable(this.resolvers, [page], [page]);\r\n  }\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { combineLatest } from 'rxjs';\r\nimport { filter, take, takeWhile } from 'rxjs/operators';\r\nimport { CmsService } from '../../cms/facade/cms.service';\r\nimport { Page } from '../../cms/model/page.model';\r\nimport { PageType } from '../../model/cms.model';\r\nimport { RoutingService } from '../../routing/facade/routing.service';\r\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\r\nimport { WindowRef } from '../../window/window-ref';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SmartEditService {\r\n  private _cmsTicketId: string;\r\n  private isPreviewPage = false;\r\n  private _currentPageId: string;\r\n  private _launchedInSmartEdit = false;\r\n\r\n  private defaultPreviewProductCode: string;\r\n  private defaultPreviewCategoryCode: string;\r\n\r\n  constructor(\r\n    protected cmsService: CmsService,\r\n    protected routingService: RoutingService,\r\n    protected baseSiteService: BaseSiteService,\r\n    protected zone: NgZone,\r\n    protected winRef: WindowRef\r\n  ) {\r\n    this.getCmsTicket();\r\n\r\n    if (winRef.nativeWindow) {\r\n      const window = winRef.nativeWindow as any;\r\n      // rerender components and slots after editing\r\n      window.smartedit = window.smartedit || {};\r\n      window.smartedit.renderComponent = (\r\n        componentId,\r\n        componentType,\r\n        parentId\r\n      ) => {\r\n        return this.renderComponent(componentId, componentType, parentId);\r\n      };\r\n\r\n      // reprocess page\r\n      window.smartedit.reprocessPage = this.reprocessPage;\r\n    }\r\n  }\r\n\r\n  get cmsTicketId(): string {\r\n    return this._cmsTicketId;\r\n  }\r\n\r\n  protected getCmsTicket() {\r\n    combineLatest([\r\n      this.cmsService.getCurrentPage(),\r\n      this.routingService.getRouterState(),\r\n    ])\r\n      .pipe(\r\n        takeWhile(([cmsPage]) => cmsPage === undefined),\r\n        filter(([, routerState]) => {\r\n          if (routerState.nextState && !this._cmsTicketId) {\r\n            this._cmsTicketId =\r\n              routerState.nextState.queryParams['cmsTicketId'];\r\n            if (this._cmsTicketId) {\r\n              return true;\r\n            }\r\n          }\r\n          return false;\r\n        }),\r\n        take(1)\r\n      )\r\n      .subscribe(() => {\r\n        this._launchedInSmartEdit = true;\r\n        this.getDefaultPreviewCode();\r\n      });\r\n  }\r\n\r\n  protected getDefaultPreviewCode() {\r\n    this.baseSiteService\r\n      .getBaseSiteData()\r\n      .pipe(\r\n        filter((site) => Object.keys(site).length !== 0),\r\n        take(1)\r\n      )\r\n      .subscribe((site) => {\r\n        this.defaultPreviewCategoryCode = site.defaultPreviewCategoryCode;\r\n        this.defaultPreviewProductCode = site.defaultPreviewProductCode;\r\n\r\n        this.addPageContract();\r\n      });\r\n  }\r\n\r\n  protected addPageContract() {\r\n    this.cmsService.getCurrentPage().subscribe((cmsPage) => {\r\n      if (cmsPage && this._cmsTicketId) {\r\n        this._currentPageId = cmsPage.pageId;\r\n\r\n        // before adding contract to page, we need redirect to that page\r\n        this.goToPreviewPage(cmsPage);\r\n\r\n        // remove old page contract\r\n        const previousContract = [];\r\n        Array.from(this.winRef.document.body.classList).forEach((attr) =>\r\n          previousContract.push(attr)\r\n        );\r\n        previousContract.forEach((attr) =>\r\n          this.winRef.document.body.classList.remove(attr)\r\n        );\r\n\r\n        // add new page contract\r\n        if (cmsPage.properties && cmsPage.properties.smartedit) {\r\n          const seClasses = cmsPage.properties.smartedit.classes.split(' ');\r\n          seClasses.forEach((classItem) => {\r\n            this.winRef.document.body.classList.add(classItem);\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  protected goToPreviewPage(cmsPage: Page) {\r\n    // only the first page is the smartedit preview page\r\n    if (!this.isPreviewPage) {\r\n      this.isPreviewPage = true;\r\n      if (\r\n        cmsPage.type === PageType.PRODUCT_PAGE &&\r\n        this.defaultPreviewProductCode\r\n      ) {\r\n        this.routingService.go({\r\n          cxRoute: 'product',\r\n          params: { code: this.defaultPreviewProductCode, name: '' },\r\n        });\r\n      } else if (\r\n        cmsPage.type === PageType.CATEGORY_PAGE &&\r\n        this.defaultPreviewCategoryCode\r\n      ) {\r\n        this.routingService.go({\r\n          cxRoute: 'category',\r\n          params: { code: this.defaultPreviewCategoryCode },\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  protected renderComponent(\r\n    componentId: string,\r\n    componentType?: string,\r\n    parentId?: string\r\n  ): boolean {\r\n    if (componentId) {\r\n      this.zone.run(() => {\r\n        // without parentId, it is slot\r\n        if (!parentId) {\r\n          if (this._currentPageId) {\r\n            this.cmsService.refreshPageById(this._currentPageId);\r\n          } else {\r\n            this.cmsService.refreshLatestPage();\r\n          }\r\n        } else if (componentType) {\r\n          this.cmsService.refreshComponent(componentId);\r\n        }\r\n      });\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected reprocessPage() {\r\n    // TODO: reprocess page API\r\n  }\r\n\r\n  /**\r\n   * Whether the app launched in smart edit\r\n   */\r\n  isLaunchedInSmartEdit(): boolean {\r\n    return this._launchedInSmartEdit;\r\n  }\r\n}\r\n","import { Injectable, Renderer2 } from '@angular/core';\r\nimport { SmartEditService } from '../../smart-edit/services/smart-edit.service';\r\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\r\nimport { ContentSlotData } from '../model/content-slot-data.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DynamicAttributeService {\r\n  constructor(protected smartEditService: SmartEditService) {}\r\n\r\n  /**\r\n   * Add dynamic attributes to DOM. These attributes are extracted from the properties of cms items received from backend.\r\n   * There can by many different groups of properties, one of them is smartedit. But EC allows addons to create different groups.\r\n   * For example, personalization may add 'script' group etc.\r\n   * @param element: slot or cms component element\r\n   * @param renderer\r\n   * @param cmsRenderingContext: an object containing properties in each cms item response data\r\n   */\r\n  addDynamicAttributes(\r\n    element: Element,\r\n    renderer: Renderer2,\r\n    cmsRenderingContext: {\r\n      componentData?: ContentSlotComponentData;\r\n      slotData?: ContentSlotData;\r\n    }\r\n  ): void {\r\n    const properties =\r\n      cmsRenderingContext.componentData?.properties ||\r\n      cmsRenderingContext.slotData?.properties;\r\n\r\n    if (properties && this.smartEditService.isLaunchedInSmartEdit()) {\r\n      // check each group of properties, e.g. smartedit\r\n      Object.keys(properties).forEach((group) => {\r\n        const name = 'data-' + group + '-';\r\n        const groupProps = properties[group];\r\n\r\n        // check each property in the group\r\n        Object.keys(groupProps).forEach((propName) => {\r\n          const propValue = groupProps[propName];\r\n          if (propName === 'classes') {\r\n            const classes = propValue.split(' ');\r\n            classes.forEach((classItem) => {\r\n              element.classList.add(classItem);\r\n            });\r\n          } else {\r\n            renderer.setAttribute(\r\n              element,\r\n              name +\r\n                propName\r\n                  .split(/(?=[A-Z])/)\r\n                  .join('-')\r\n                  .toLowerCase(),\r\n              propValue\r\n            );\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class FeaturesConfig {\r\n  features?: {\r\n    [featureToggle: string]: string | boolean;\r\n  };\r\n}\r\n","import { FeaturesConfig } from '../config/features-config';\n\nfunction isFeatureConfig(config: any): config is FeaturesConfig {\n  return typeof config === 'object' && config.features;\n}\n\nfunction isInLevel(level, version) {\n  if (level === '*') {\n    return true;\n  }\n  const levelParts = level.split('.');\n  const versionParts = version.split('.');\n\n  for (let i = 0; i < versionParts.length; i++) {\n    const versionNumberPart = Number(versionParts[i]);\n    const levelNumberPart = Number(levelParts[i]) || 0;\n\n    if (versionNumberPart !== levelNumberPart) {\n      return levelNumberPart > versionNumberPart;\n    }\n  }\n  return true;\n}\n\nexport function isFeatureLevel(config: unknown, level: string): boolean {\n  if (isFeatureConfig(config)) {\n    return level[0] === '!'\n      ? !isInLevel(config.features.level, level.substr(1, level.length))\n      : isInLevel(config.features.level, level);\n  }\n}\n\nexport function isFeatureEnabled(config: unknown, feature: string): boolean {\n  if (isFeatureConfig(config)) {\n    const featureConfig =\n      feature[0] === '!'\n        ? config.features[feature.substr(1, feature.length)]\n        : config.features[feature];\n\n    const result =\n      typeof featureConfig === 'string'\n        ? isFeatureLevel(config, featureConfig)\n        : featureConfig;\n\n    return feature[0] === '!' ? !result : result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { FeaturesConfig } from '../config/features-config';\nimport {\n  isFeatureEnabled,\n  isFeatureLevel,\n} from '../utils/feature-config-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureConfigService {\n  constructor(protected config: FeaturesConfig) {}\n\n  isLevel(version: string): boolean {\n    return isFeatureLevel(this.config, version);\n  }\n\n  isEnabled(feature: string) {\n    return isFeatureEnabled(this.config, feature);\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeatureLevel]',\n})\nexport class FeatureLevelDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeatureLevel(level: string | number) {\n    if (this.featureConfig.isLevel(level.toString()) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isLevel(level.toString()) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeature]',\n})\nexport class FeatureDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeature(feature: string) {\n    if (this.featureConfig.isEnabled(feature) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isEnabled(feature) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { FeaturesConfig } from './config/features-config';\r\nimport { provideDefaultConfig } from '../config/config.module';\r\nimport { FeatureLevelDirective } from './directives/feature-level.directive';\r\nimport { FeatureDirective } from './directives/feature.directive';\r\n\r\n@NgModule({\r\n  declarations: [FeatureLevelDirective, FeatureDirective],\r\n  exports: [FeatureLevelDirective, FeatureDirective],\r\n})\r\nexport class FeaturesConfigModule {\r\n  static forRoot(\r\n    defaultLevel?: string\r\n  ): ModuleWithProviders<FeaturesConfigModule> {\r\n    return {\r\n      ngModule: FeaturesConfigModule,\r\n      providers: [\r\n        provideDefaultConfig(<FeaturesConfig>{\r\n          features: {\r\n            level: defaultLevel || '*',\r\n          },\r\n        }),\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { isDevMode, Pipe, PipeTransform } from '@angular/core';\r\nimport { DatePipe, getLocaleId } from '@angular/common';\r\nimport { LanguageService } from '../site-context/facade/language.service';\r\n\r\n// type CxDatePipe, not DatePipe, due to conflict with Angular's DatePipe - problem occurs for the backward compatibility compiler of Ivy\r\n@Pipe({ name: 'cxDate' })\r\nexport class CxDatePipe extends DatePipe implements PipeTransform {\r\n  constructor(protected language: LanguageService) {\r\n    super(null);\r\n  }\r\n\r\n  transform(value: any, format?: string, timezone?: string): string | null {\r\n    return super.transform(value, format, timezone, this.getLang());\r\n  }\r\n\r\n  private getLang() {\r\n    const lang = this.getActiveLang();\r\n    try {\r\n      getLocaleId(lang);\r\n      return lang;\r\n    } catch {\r\n      this.reportMissingLocaleData(lang);\r\n      return 'en';\r\n    }\r\n  }\r\n\r\n  private getActiveLang(): string {\r\n    let result;\r\n    this.language\r\n      .getActive()\r\n      .subscribe((lang) => (result = lang))\r\n      .unsubscribe();\r\n    return result;\r\n  }\r\n\r\n  private reportMissingLocaleData(lang: string) {\r\n    if (isDevMode()) {\r\n      console.warn(\r\n        `cxDate pipe: No locale data registered for '${lang}' (see https://angular.io/api/common/registerLocaleData).`\r\n      );\r\n    }\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectorRef,\r\n  OnDestroy,\r\n  Pipe,\r\n  PipeTransform,\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { TranslationService } from './translation.service';\r\nimport { shallowEqualObjects } from '../util/compare-equal-objects';\r\nimport { Translatable, TranslatableParams } from './translatable';\r\n\r\n@Pipe({ name: 'cxTranslate', pure: false })\r\nexport class TranslatePipe implements PipeTransform, OnDestroy {\r\n  private lastKey: string;\r\n  private lastOptions: object;\r\n  private translatedValue: string;\r\n  private sub: Subscription;\r\n\r\n  constructor(\r\n    protected service: TranslationService,\r\n    protected cd: ChangeDetectorRef\r\n  ) {}\r\n\r\n  transform(\r\n    input: Translatable | string,\r\n    options: TranslatableParams = {}\r\n  ): string {\r\n    if ((input as Translatable).raw) {\r\n      return (input as Translatable).raw;\r\n    }\r\n\r\n    const key = typeof input === 'string' ? input : input.key;\r\n    if (typeof input !== 'string') {\r\n      options = { ...options, ...input.params };\r\n    }\r\n\r\n    this.translate(key, options);\r\n    return this.translatedValue;\r\n  }\r\n\r\n  private translate(key: any, options: object) {\r\n    if (\r\n      key !== this.lastKey ||\r\n      !shallowEqualObjects(options, this.lastOptions)\r\n    ) {\r\n      this.lastKey = key;\r\n      this.lastOptions = options;\r\n\r\n      if (this.sub) {\r\n        this.sub.unsubscribe();\r\n      }\r\n      this.sub = this.service\r\n        .translate(key, options, true)\r\n        .subscribe((val) => this.markForCheck(val));\r\n    }\r\n  }\r\n\r\n  private markForCheck(value: string) {\r\n    this.translatedValue = value;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.sub) {\r\n      this.sub.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import { TranslationResources } from '../translation-resources';\r\nimport { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class I18nConfig {\r\n  i18n?: {\r\n    /**\r\n     * When there are missing translation resources for the active language, the fallback language will be used.\r\n     */\r\n    fallbackLang?: string | false;\r\n\r\n    /**\r\n     * Configuration for lazy loading of translation files.\r\n     * For eager loading of translations please use config option `i18n.resources`\r\n     */\r\n\r\n    backend?: {\r\n      /**\r\n       * The path to JSON translations. It should contain placeholders:\r\n       * - `{{lng}}` for language\r\n       * - `{{ns}}` for the name of chunk.\r\n       *\r\n       * Example:\r\n       * `assets/i18n-assets/{{lng}}/{{ns}}.json`\r\n       */\r\n\r\n      loadPath?: string;\r\n    };\r\n\r\n    /**\r\n     * Reference to translation resources that are eagerly bundled with JS app.\r\n     * For lazy loading of translations please use config option `i18n.backend` instead.\r\n     */\r\n    resources?: TranslationResources;\r\n\r\n    /**\r\n     * Logs i18n events (like loading translation resources) to the console. Don't use in production!\r\n     */\r\n    debug?: boolean;\r\n\r\n    /**\r\n     * Mapping that assigns keys' namespaces to specific chunks. The main purpose of chunks is to lazy load them.\r\n     */\r\n    chunks?: {\r\n      [chunk: string]: string[];\r\n    };\r\n  };\r\n}\r\n","import { Injectable, isDevMode } from '@angular/core';\r\nimport { I18nConfig } from './config/i18n-config';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TranslationChunkService {\r\n  protected duplicates: { [key: string]: string[] } = {};\r\n  protected chunks: { [key: string]: string } = {};\r\n  constructor(protected config: I18nConfig) {\r\n    const chunks = (config.i18n && config.i18n.chunks) || {};\r\n    Object.keys(chunks).forEach((chunk) => {\r\n      chunks[chunk].forEach((key) => {\r\n        if (this.chunks.hasOwnProperty(key)) {\r\n          if (!this.duplicates[key]) {\r\n            this.duplicates[key] = [this.chunks[key]];\r\n          }\r\n          this.duplicates[key].push(chunk);\r\n        } else {\r\n          this.chunks[key] = chunk;\r\n        }\r\n      });\r\n    });\r\n    if (Object.keys(this.duplicates).length > 0 && isDevMode()) {\r\n      this.warnDuplicates(this.duplicates);\r\n    }\r\n  }\r\n\r\n  protected readonly KEY_SEPARATOR = '.';\r\n\r\n  getChunkNameForKey(key: string): string {\r\n    const mainKey = (key || '').split(this.KEY_SEPARATOR)[0];\r\n    const chunk = this.chunks && this.chunks[mainKey];\r\n\r\n    if (!chunk) {\r\n      return mainKey; // fallback to main key as a chunk\r\n    }\r\n    return chunk;\r\n  }\r\n\r\n  private warnDuplicates(items: { [key: string]: string[] }): void {\r\n    const dupes: string[] = [];\r\n    Object.keys(items).forEach((key) => {\r\n      dupes.push(\r\n        `* '${key}' found in chunks: ${items[key].join(', ')}. Used '${\r\n          this.chunks[key]\r\n        }.${key}'.`\r\n      );\r\n    });\r\n    console.warn(\r\n      `Duplicated keys has been found in the config of i18n chunks:\\n${dupes.join(\r\n        '\\n'\r\n      )}`\r\n    );\r\n  }\r\n}\r\n","import { I18nConfig } from './i18n-config';\n\nexport const defaultI18nConfig: I18nConfig = {\n  i18n: {\n    fallbackLang: false,\n    debug: false,\n  },\n};\n","import { HttpClient } from '@angular/common/http';\r\nimport i18next, { InitOptions } from 'i18next';\r\nimport i18nextXhrBackend from 'i18next-xhr-backend';\r\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\r\nimport { LanguageService } from '../../site-context/facade/language.service';\r\nimport { TranslationResources } from '../translation-resources';\r\n\r\nexport function i18nextInit(\r\n  configInit: ConfigInitializerService,\r\n  languageService: LanguageService,\r\n  httpClient: HttpClient,\r\n  serverRequestOrigin: string\r\n): () => Promise<any> {\r\n  return () =>\r\n    configInit.getStableConfig('i18n').then((config) => {\r\n      let i18nextConfig: InitOptions = {\r\n        ns: [], // don't preload any namespaces\r\n        fallbackLng: config.i18n.fallbackLang,\r\n        debug: config.i18n.debug,\r\n        interpolation: {\r\n          escapeValue: false,\r\n        },\r\n      };\r\n      if (config.i18n.backend) {\r\n        i18next.use(i18nextXhrBackend);\r\n        const loadPath = getLoadPath(\r\n          config.i18n.backend.loadPath,\r\n          serverRequestOrigin\r\n        );\r\n        const backend = {\r\n          loadPath,\r\n          ajax: i18nextGetHttpClient(httpClient),\r\n        };\r\n        i18nextConfig = { ...i18nextConfig, backend };\r\n      }\r\n\r\n      return i18next.init(i18nextConfig, () => {\r\n        // Don't use i18next's 'resources' config key for adding static translations,\r\n        // because it will disable loading chunks from backend. We add resources here, in the init's callback.\r\n        i18nextAddTranslations(config.i18n.resources);\r\n        syncI18nextWithSiteContext(languageService);\r\n      });\r\n    });\r\n}\r\n\r\nexport function i18nextAddTranslations(resources: TranslationResources = {}) {\r\n  Object.keys(resources).forEach((lang) => {\r\n    Object.keys(resources[lang]).forEach((chunkName) => {\r\n      i18next.addResourceBundle(\r\n        lang,\r\n        chunkName,\r\n        resources[lang][chunkName],\r\n        true,\r\n        true\r\n      );\r\n    });\r\n  });\r\n}\r\n\r\nexport function syncI18nextWithSiteContext(language: LanguageService) {\r\n  // always update language of i18next on site context (language) change\r\n  language.getActive().subscribe((lang) => i18next.changeLanguage(lang));\r\n}\r\n\r\n/**\r\n * Returns a function appropriate for i18next to make http calls for JSON files.\r\n * See docs for `i18next-xhr-backend`: https://github.com/i18next/i18next-xhr-backend#backend-options\r\n *\r\n * It uses Angular HttpClient under the hood, so it works in SSR.\r\n * @param httpClient Angular http client\r\n */\r\nexport function i18nextGetHttpClient(\r\n  httpClient: HttpClient\r\n): (url: string, options: object, callback: Function, data: object) => void {\r\n  return (url: string, _options: object, callback: Function, _data: object) => {\r\n    httpClient.get(url, { responseType: 'text' }).subscribe(\r\n      (data) => callback(data, { status: 200 }),\r\n      (error) => callback(null, { status: error.status })\r\n    );\r\n  };\r\n}\r\n\r\n/**\r\n * Resolves the relative path to the absolute one in SSR, using the server request's origin.\r\n * It's needed, because Angular Universal doesn't support relative URLs in HttpClient. See Angular issues:\r\n * - https://github.com/angular/angular/issues/19224\r\n * - https://github.com/angular/universal/issues/858\r\n */\r\nexport function getLoadPath(path: string, serverRequestOrigin: string): string {\r\n  if (!path) {\r\n    return undefined;\r\n  }\r\n  if (serverRequestOrigin && !path.match(/^http(s)?:\\/\\//)) {\r\n    if (path.startsWith('/')) {\r\n      path = path.slice(1);\r\n    }\r\n    if (path.startsWith('./')) {\r\n      path = path.slice(2);\r\n    }\r\n    const result = `${serverRequestOrigin}/${path}`;\r\n    return result;\r\n  }\r\n  return path;\r\n}\r\n","import { HttpClient } from '@angular/common/http';\nimport { APP_INITIALIZER, Optional, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { SERVER_REQUEST_ORIGIN } from '../../ssr/ssr.providers';\nimport { i18nextInit } from './i18next-init';\n\nexport const i18nextProviders: Provider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: i18nextInit,\n    deps: [\n      ConfigInitializerService,\n      LanguageService,\n      HttpClient,\n      [new Optional(), SERVER_REQUEST_ORIGIN],\n    ],\n    multi: true,\n  },\n];\n","import { Injectable, isDevMode } from '@angular/core';\r\nimport i18next from 'i18next';\r\nimport { Observable } from 'rxjs';\r\nimport { I18nConfig } from '../config/i18n-config';\r\nimport { TranslationChunkService } from '../translation-chunk.service';\r\nimport { TranslationService } from '../translation.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class I18nextTranslationService implements TranslationService {\r\n  private readonly NON_BREAKING_SPACE = String.fromCharCode(160);\r\n  protected readonly NAMESPACE_SEPARATOR = ':';\r\n\r\n  constructor(\r\n    protected config: I18nConfig,\r\n    protected translationChunk: TranslationChunkService\r\n  ) {}\r\n\r\n  translate(\r\n    key: string,\r\n    options: any = {},\r\n    whitespaceUntilLoaded: boolean = false\r\n  ): Observable<string> {\r\n    // If we've already loaded the chunk (or failed to load), we should immediately emit the value\r\n    // (or the fallback value in case the key is missing).\r\n\r\n    // Moreover, we SHOULD emit a value (or a fallback value) synchronously (not in a promise/setTimeout).\r\n    // Otherwise, we the will trigger additional deferred change detection in a view that consumes the returned observable,\r\n    // which together with `switchMap` operator may lead to an infinite loop.\r\n\r\n    const chunkName = this.translationChunk.getChunkNameForKey(key);\r\n    const namespacedKey = this.getNamespacedKey(key, chunkName);\r\n\r\n    return new Observable<string>((subscriber) => {\r\n      const translate = () => {\r\n        if (!i18next.isInitialized) {\r\n          return;\r\n        }\r\n        if (i18next.exists(namespacedKey, options)) {\r\n          subscriber.next(i18next.t(namespacedKey, options));\r\n        } else {\r\n          if (whitespaceUntilLoaded) {\r\n            subscriber.next(this.NON_BREAKING_SPACE);\r\n          }\r\n          i18next.loadNamespaces(chunkName, () => {\r\n            if (!i18next.exists(namespacedKey, options)) {\r\n              this.reportMissingKey(key, chunkName);\r\n              subscriber.next(this.getFallbackValue(namespacedKey));\r\n            } else {\r\n              subscriber.next(i18next.t(namespacedKey, options));\r\n            }\r\n          });\r\n        }\r\n      };\r\n\r\n      translate();\r\n      i18next.on('languageChanged', translate);\r\n      return () => i18next.off('languageChanged', translate);\r\n    });\r\n  }\r\n\r\n  loadChunks(chunkNames: string | string[]): Promise<any> {\r\n    return i18next.loadNamespaces(chunkNames);\r\n  }\r\n\r\n  /**\r\n   * Returns a fallback value in case when the given key is missing\r\n   * @param key\r\n   */\r\n  protected getFallbackValue(key: string): string {\r\n    return isDevMode() ? `[${key}]` : this.NON_BREAKING_SPACE;\r\n  }\r\n\r\n  private reportMissingKey(key: string, chunkName: string) {\r\n    if (isDevMode()) {\r\n      console.warn(\r\n        `Translation key missing '${key}' in the chunk '${chunkName}'`\r\n      );\r\n    }\r\n  }\r\n\r\n  private getNamespacedKey(key: string, chunk: string): string {\r\n    return chunk + this.NAMESPACE_SEPARATOR + key;\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '../config/config.module';\r\nimport { defaultI18nConfig } from './config/default-i18n-config';\r\nimport { CxDatePipe } from './date.pipe';\r\nimport { i18nextProviders } from './i18next/i18next-providers';\r\nimport { I18nextTranslationService } from './i18next/i18next-translation.service';\r\nimport { TranslatePipe } from './translate.pipe';\r\nimport { TranslationService } from './translation.service';\r\n\r\n@NgModule({\r\n  declarations: [TranslatePipe, CxDatePipe],\r\n  exports: [TranslatePipe, CxDatePipe],\r\n})\r\nexport class I18nModule {\r\n  static forRoot(): ModuleWithProviders<I18nModule> {\r\n    return {\r\n      ngModule: I18nModule,\r\n      providers: [\r\n        provideDefaultConfig(defaultI18nConfig),\r\n        { provide: TranslationService, useExisting: I18nextTranslationService },\r\n        ...i18nextProviders,\r\n      ],\r\n    };\r\n  }\r\n}\r\n","export function mockTranslate(key: string, options: any = {}) {\r\n  const optionsString = Object.keys(options)\r\n    .sort()\r\n    .map((optionName) => `${optionName}:${options[optionName]}`)\r\n    .join(' ');\r\n  return optionsString ? `${key} ${optionsString}` : key;\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { mockTranslate } from './mock-translate';\nimport { Translatable } from '../translatable';\n\n@Pipe({ name: 'cxTranslate' })\nexport class MockTranslatePipe implements PipeTransform {\n  transform(input: Translatable | string, options: object = {}): string {\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n    return mockTranslate(key, options);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { TranslationService } from '../translation.service';\r\nimport { mockTranslate } from './mock-translate';\r\n\r\n@Injectable()\r\nexport class MockTranslationService implements TranslationService {\r\n  translate(\r\n    key: string,\r\n    options: any = {},\r\n    _whitespaceUntilLoaded: boolean = false\r\n  ): Observable<string> {\r\n    return new Observable<string>((subscriber) => {\r\n      const value = mockTranslate(key, options);\r\n      subscriber.next(value);\r\n      subscriber.complete();\r\n    });\r\n  }\r\n\r\n  loadChunks(_chunks: string | string[]): Promise<any> {\r\n    return Promise.resolve();\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\n@Pipe({ name: 'cxDate' })\nexport class MockDatePipe extends DatePipe implements PipeTransform {\n  transform(value: any, format?: string, timezone?: string): string {\n    return super.transform(value, format, timezone, 'en');\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { MockTranslatePipe } from './mock-translate.pipe';\nimport { TranslationService } from '../translation.service';\nimport { MockTranslationService } from './mock-translation.service';\nimport { MockDatePipe } from './mock-date.pipe';\n\n@NgModule({\n  declarations: [MockTranslatePipe, MockDatePipe],\n  exports: [MockTranslatePipe, MockDatePipe],\n  providers: [\n    { provide: TranslationService, useClass: MockTranslationService },\n  ],\n})\nexport class I18nTestingModule {}\n","import { OccConfig } from '../../occ/config/occ-config';\r\nimport { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class KymaConfig extends OccConfig {\r\n  authentication?: {\r\n    kyma_client_id?: string;\r\n    kyma_client_secret?: string;\r\n  };\r\n}\r\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\n\nexport const KYMA_FEATURE = 'kyma';\nexport const OPEN_ID_TOKEN_DATA = '[Kyma Auth] Open ID Token Data';\n\nexport interface StateWithKyma {\n  [KYMA_FEATURE]: KymaState;\n}\n\nexport interface KymaState {\n  openIdToken: LoaderState<OpenIdToken>;\n}\n","import { StateUtils } from '../../../state/utils/index';\r\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\r\nimport { OPEN_ID_TOKEN_DATA } from '../kyma-state';\r\n\r\nexport const LOAD_OPEN_ID_TOKEN = '[Kyma] Load Open ID Token';\r\nexport const LOAD_OPEN_ID_TOKEN_FAIL = '[Kyma] Load Open ID Token Fail';\r\nexport const LOAD_OPEN_ID_TOKEN_SUCCESS = '[Kyma] Load Open ID Token Success';\r\n\r\nexport class LoadOpenIdToken extends StateUtils.LoaderLoadAction {\r\n  readonly type = LOAD_OPEN_ID_TOKEN;\r\n  constructor(public payload: { username: string; password: string }) {\r\n    super(OPEN_ID_TOKEN_DATA);\r\n  }\r\n}\r\n\r\nexport class LoadOpenIdTokenFail extends StateUtils.LoaderFailAction {\r\n  readonly type = LOAD_OPEN_ID_TOKEN_FAIL;\r\n  constructor(public payload: any) {\r\n    super(OPEN_ID_TOKEN_DATA, payload);\r\n  }\r\n}\r\n\r\nexport class LoadOpenIdTokenSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = LOAD_OPEN_ID_TOKEN_SUCCESS;\r\n  constructor(public payload: OpenIdToken) {\r\n    super(OPEN_ID_TOKEN_DATA);\r\n  }\r\n}\r\n\r\nexport type OpenIdTokenActions =\r\n  | LoadOpenIdToken\r\n  | LoadOpenIdTokenFail\r\n  | LoadOpenIdTokenSuccess;\r\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { KymaState, KYMA_FEATURE, StateWithKyma } from '../kyma-state';\n\nexport const getKymaState: MemoizedSelector<\n  StateWithKyma,\n  KymaState\n> = createFeatureSelector<KymaState>(KYMA_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\r\nimport { StateWithKyma } from '../kyma-state';\r\nimport { getKymaState } from './feature.selector';\r\n\r\nexport const getOpenIdTokenState: MemoizedSelector<\r\n  StateWithKyma,\r\n  LoaderState<OpenIdToken>\r\n> = createSelector(getKymaState, (state) => state.openIdToken);\r\n\r\nexport const getOpenIdTokenValue: MemoizedSelector<\r\n  StateWithKyma,\r\n  OpenIdToken\r\n> = createSelector(getOpenIdTokenState, StateUtils.loaderValueSelector);\r\n\r\nexport const getOpenIdTokenLoading: MemoizedSelector<\r\n  StateWithKyma,\r\n  boolean\r\n> = createSelector(getOpenIdTokenState, StateUtils.loaderLoadingSelector);\r\n\r\nexport const getOpenIdTokenSuccess: MemoizedSelector<\r\n  StateWithKyma,\r\n  boolean\r\n> = createSelector(getOpenIdTokenState, StateUtils.loaderSuccessSelector);\r\n\r\nexport const getOpenIdTokenError: MemoizedSelector<\r\n  StateWithKyma,\r\n  boolean\r\n> = createSelector(getOpenIdTokenState, StateUtils.loaderErrorSelector);\r\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\nimport { KymaActions } from '../store/actions/index';\nimport { StateWithKyma } from '../store/kyma-state';\nimport { KymaSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KymaService {\n  constructor(protected store: Store<StateWithKyma>) {}\n\n  /**\n   * Authorizes using the Kyma OAuth client with scope `openid`.\n   *\n   * @param username a username\n   * @param password a password\n   */\n  authorizeOpenId(username: string, password: string): void {\n    this.store.dispatch(\n      new KymaActions.LoadOpenIdToken({ username, password })\n    );\n  }\n\n  /**\n   * Returns the `OpenIdToken`, which was previously retrieved using `authorizeOpenId` method.\n   */\n  getOpenIdToken(): Observable<OpenIdToken> {\n    return this.store.pipe(select(KymaSelectors.getOpenIdTokenValue));\n  }\n}\n","import { KymaConfig } from './kyma-config';\r\n\r\nexport const defaultKymaConfig: KymaConfig = {\r\n  authentication: {\r\n    kyma_client_id: 'client4kyma',\r\n    kyma_client_secret: 'secret',\r\n  },\r\n};\r\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { KymaConfig } from '../../config/kyma-config';\r\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\r\n\r\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OpenIdAuthenticationTokenService {\r\n  constructor(private config: KymaConfig, private http: HttpClient) {}\r\n\r\n  loadOpenIdAuthenticationToken(\r\n    username: string,\r\n    password: string\r\n  ): Observable<OpenIdToken> {\r\n    const url = this.getOAuthEndpoint();\r\n    const params = new HttpParams()\r\n      .set(\r\n        'client_id',\r\n        encodeURIComponent(this.config.authentication.kyma_client_id)\r\n      )\r\n      .set(\r\n        'client_secret',\r\n        encodeURIComponent(this.config.authentication.kyma_client_secret)\r\n      )\r\n      .set('grant_type', 'password') // authorization_code, client_credentials, password\r\n      .set('username', username)\r\n      .set('password', password)\r\n      .set('scope', 'openid');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n\r\n    return this.http\r\n      .post<OpenIdToken>(url, params, { headers })\r\n      .pipe(catchError((error) => throwError(error)));\r\n  }\r\n\r\n  private getOAuthEndpoint(): string {\r\n    return (this.config.backend.occ.baseUrl || '') + OAUTH_ENDPOINT;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, exhaustMap, map, withLatestFrom } from 'rxjs/operators';\r\nimport { AuthActions } from '../../../auth/store/actions/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { OpenIdAuthenticationTokenService } from '../../services/open-id-token/open-id-token.service';\r\nimport { KymaActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class OpenIdTokenEffect {\r\n  @Effect()\r\n  triggerOpenIdTokenLoading$: Observable<\r\n    KymaActions.LoadOpenIdToken\r\n  > = this.actions$.pipe(\r\n    ofType<KymaActions.LoadOpenIdTokenSuccess>(\r\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\r\n    ),\r\n    withLatestFrom(\r\n      this.actions$.pipe(\r\n        ofType<AuthActions.LoadUserToken>(AuthActions.LOAD_USER_TOKEN)\r\n      )\r\n    ),\r\n    map(\r\n      ([, loginAction]) =>\r\n        new KymaActions.LoadOpenIdToken({\r\n          username: loginAction.payload.userId,\r\n          password: loginAction.payload.password,\r\n        })\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  loadOpenIdToken$: Observable<\r\n    KymaActions.OpenIdTokenActions\r\n  > = this.actions$.pipe(\r\n    ofType(KymaActions.LOAD_OPEN_ID_TOKEN),\r\n    map((action: KymaActions.LoadOpenIdToken) => action.payload),\r\n    exhaustMap((payload) =>\r\n      this.openIdTokenService\r\n        .loadOpenIdAuthenticationToken(payload.username, payload.password)\r\n        .pipe(\r\n          map((token) => new KymaActions.LoadOpenIdTokenSuccess(token)),\r\n          catchError((error) =>\r\n            of(\r\n              new KymaActions.LoadOpenIdTokenFail(makeErrorSerializable(error))\r\n            )\r\n          )\r\n        )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private openIdTokenService: OpenIdAuthenticationTokenService\r\n  ) {}\r\n}\r\n","import { OpenIdTokenEffect } from './open-id-token.effect';\n\nexport const effects: any[] = [OpenIdTokenEffect];\n\nexport * from './open-id-token.effect';\n","import { InjectionToken, Provider } from '@angular/core';\r\nimport {\r\n  Action,\r\n  ActionReducer,\r\n  ActionReducerMap,\r\n  MetaReducer,\r\n} from '@ngrx/store';\r\nimport { AuthActions } from '../../../auth/store/actions/index';\r\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\r\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\r\nimport { KymaState, OPEN_ID_TOKEN_DATA } from '../kyma-state';\r\n\r\nexport function getReducers(): ActionReducerMap<KymaState> {\r\n  return {\r\n    openIdToken: loaderReducer<OpenIdToken>(OPEN_ID_TOKEN_DATA),\r\n  };\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducerMap<\r\n  KymaState\r\n>> = new InjectionToken<ActionReducerMap<KymaState>>('KymaReducers');\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n\r\nexport function clearKymaState(\r\n  reducer: ActionReducer<KymaState, Action>\r\n): ActionReducer<KymaState, Action> {\r\n  return function (state, action) {\r\n    if (action.type === AuthActions.LOGOUT) {\r\n      state = {\r\n        ...state,\r\n        openIdToken: undefined,\r\n      };\r\n    }\r\n    return reducer(state, action);\r\n  };\r\n}\r\n\r\nexport const metaReducers: MetaReducer<any>[] = [clearKymaState];\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { provideDefaultConfigFactory } from '../../config/config.module';\r\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\r\nimport { StateModule } from '../../state/state.module';\r\nimport { effects } from './effects/index';\r\nimport { KYMA_FEATURE } from './kyma-state';\r\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\r\n\r\nexport function kymaStoreConfigFactory(): StateConfig {\r\n  // if we want to reuse KYMA_FEATURE const in config, we have to use factory instead of plain object\r\n  const config: StateConfig = {\r\n    state: {\r\n      storageSync: {\r\n        keys: {\r\n          'kyma.openIdToken.value': StorageSyncType.LOCAL_STORAGE,\r\n        },\r\n      },\r\n    },\r\n  };\r\n  return config;\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    StateModule,\r\n    StoreModule.forFeature(KYMA_FEATURE, reducerToken, { metaReducers }),\r\n    EffectsModule.forFeature(effects),\r\n  ],\r\n  providers: [\r\n    provideDefaultConfigFactory(kymaStoreConfigFactory),\r\n    reducerProvider,\r\n  ],\r\n})\r\nexport class KymaStoreModule {}\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '../config/config.module';\r\nimport { defaultKymaConfig } from './config/default-kyma-config';\r\nimport { KymaStoreModule } from './store/kyma-store.module';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, HttpClientModule, KymaStoreModule],\r\n  providers: [provideDefaultConfig(defaultKymaConfig)],\r\n})\r\nexport class KymaModule {}\r\n","import { PersonalizationConfig } from './personalization-config';\n\nexport const defaultPersonalizationConfig: PersonalizationConfig = {\n  personalization: {\n    enabled: false,\n    httpHeaderName: {\n      id: 'Occ-Personalization-Id',\n      timestamp: 'Occ-Personalization-Time',\n    },\n    context: {\n      slotPosition: 'PlaceholderContentSlot',\n      componentId: 'PersonalizationScriptComponent',\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class PersonalizationConfig {\r\n  personalization: {\r\n    enabled?: boolean;\r\n    httpHeaderName?: {\r\n      id: string;\r\n      timestamp: string;\r\n    };\r\n    context?: {\r\n      slotPosition?: string;\r\n      componentId?: string;\r\n    };\r\n  };\r\n}\r\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpResponse,\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\r\nimport { PersonalizationConfig } from '../config/personalization-config';\r\nimport { WindowRef } from '../../window/window-ref';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\nconst PERSONALIZATION_ID_KEY = 'personalization-id';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OccPersonalizationIdInterceptor implements HttpInterceptor {\r\n  private personalizationId: string;\r\n  private requestHeader: string;\r\n  private enabled = false;\r\n\r\n  constructor(\r\n    private config: PersonalizationConfig,\r\n    private occEndpoints: OccEndpointsService,\r\n    private winRef: WindowRef,\r\n    @Inject(PLATFORM_ID) private platform: any\r\n  ) {\r\n    if (isPlatformBrowser(this.platform)) {\r\n      this.enabled =\r\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\r\n        false;\r\n\r\n      if (this.enabled) {\r\n        this.requestHeader = this.config.personalization.httpHeaderName.id.toLowerCase();\r\n        this.personalizationId = this.winRef.localStorage.getItem(\r\n          PERSONALIZATION_ID_KEY\r\n        );\r\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_ID_KEY)) {\r\n        this.winRef.localStorage.removeItem(PERSONALIZATION_ID_KEY);\r\n      }\r\n    }\r\n  }\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    if (!this.enabled) {\r\n      return next.handle(request);\r\n    }\r\n\r\n    if (\r\n      this.personalizationId &&\r\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\r\n    ) {\r\n      request = request.clone({\r\n        setHeaders: {\r\n          [this.requestHeader]: this.personalizationId,\r\n        },\r\n      });\r\n    }\r\n\r\n    return next.handle(request).pipe(\r\n      tap((event) => {\r\n        if (event instanceof HttpResponse) {\r\n          if (event.headers.keys().includes(this.requestHeader)) {\r\n            const receivedId = event.headers.get(this.requestHeader);\r\n            if (this.personalizationId !== receivedId) {\r\n              this.personalizationId = receivedId;\r\n              this.winRef.localStorage.setItem(\r\n                PERSONALIZATION_ID_KEY,\r\n                this.personalizationId\r\n              );\r\n            }\r\n          }\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpResponse,\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\r\nimport { PersonalizationConfig } from '../config/personalization-config';\r\nimport { WindowRef } from '../../window/window-ref';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\nconst PERSONALIZATION_TIME_KEY = 'personalization-time';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OccPersonalizationTimeInterceptor implements HttpInterceptor {\r\n  private timestamp: string;\r\n  private requestHeader: string;\r\n  private enabled = false;\r\n\r\n  constructor(\r\n    private config: PersonalizationConfig,\r\n    private occEndpoints: OccEndpointsService,\r\n    private winRef: WindowRef,\r\n    @Inject(PLATFORM_ID) private platform: any\r\n  ) {\r\n    if (isPlatformBrowser(this.platform)) {\r\n      this.enabled =\r\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\r\n        false;\r\n\r\n      if (this.enabled) {\r\n        this.requestHeader = this.config.personalization.httpHeaderName.timestamp.toLowerCase();\r\n        this.timestamp = this.winRef.localStorage.getItem(\r\n          PERSONALIZATION_TIME_KEY\r\n        );\r\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_TIME_KEY)) {\r\n        this.winRef.localStorage.removeItem(PERSONALIZATION_TIME_KEY);\r\n      }\r\n    }\r\n  }\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    if (!this.enabled) {\r\n      return next.handle(request);\r\n    }\r\n\r\n    if (\r\n      this.timestamp &&\r\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\r\n    ) {\r\n      request = request.clone({\r\n        setHeaders: {\r\n          [this.requestHeader]: this.timestamp,\r\n        },\r\n      });\r\n    }\r\n\r\n    return next.handle(request).pipe(\r\n      tap((event) => {\r\n        if (event instanceof HttpResponse) {\r\n          if (event.headers.keys().includes(this.requestHeader)) {\r\n            const receivedTimestamp = event.headers.get(this.requestHeader);\r\n            if (this.timestamp !== receivedTimestamp) {\r\n              this.timestamp = receivedTimestamp;\r\n              this.winRef.localStorage.setItem(\r\n                PERSONALIZATION_TIME_KEY,\r\n                this.timestamp\r\n              );\r\n            }\r\n          }\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { OccPersonalizationIdInterceptor } from './occ-personalization-id.interceptor';\nimport { OccPersonalizationTimeInterceptor } from './occ-personalization-time.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationIdInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationTimeInterceptor,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '../config/config.module';\r\nimport { defaultPersonalizationConfig } from './config/default-personalization-config';\r\n\r\nimport { interceptors } from './http-interceptors/index';\r\n\r\n@NgModule({})\r\nexport class PersonalizationModule {\r\n  static forRoot(): ModuleWithProviders<PersonalizationModule> {\r\n    return {\r\n      ngModule: PersonalizationModule,\r\n      providers: [\r\n        provideDefaultConfig(defaultPersonalizationConfig),\r\n        ...interceptors,\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { CmsService } from '../../cms/facade/cms.service';\r\nimport { ContentSlotComponentData } from '../../cms/model/content-slot-component-data.model';\r\nimport { ContentSlotData } from '../../cms/model/content-slot-data.model';\r\nimport { Page } from '../../cms/model/page.model';\r\nimport { PersonalizationConfig } from '../config/personalization-config';\r\nimport { PersonalizationContext } from '../model/personalization-context.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PersonalizationContextService {\r\n  constructor(\r\n    protected config: PersonalizationConfig,\r\n    protected cmsService: CmsService\r\n  ) {}\r\n\r\n  getPersonalizationContext(): Observable<PersonalizationContext> {\r\n    return this.cmsService.getCurrentPage().pipe(\r\n      filter(Boolean),\r\n      map(\r\n        (page: Page) =>\r\n          page.slots[this.config.personalization.context.slotPosition]\r\n      ),\r\n      filter(Boolean),\r\n      map((slot: ContentSlotData) =>\r\n        slot.components.find(\r\n          (i) => i.uid === this.config.personalization.context.componentId\r\n        )\r\n      ),\r\n      filter(Boolean),\r\n      map((component: ContentSlotComponentData) =>\r\n        this.buildPersonalizationContext(component.properties.script.data)\r\n      )\r\n    );\r\n  }\r\n\r\n  private buildPersonalizationContext(data: string): PersonalizationContext {\r\n    const context = JSON.parse(atob(data));\r\n    context.actions.forEach((action) => {\r\n      Object.keys(action).forEach((key) => {\r\n        action[key] = atob(action[key]);\r\n      });\r\n    });\r\n    for (let i = 0; i < context.segments.length; i++) {\r\n      context.segments[i] = atob(context.segments[i]);\r\n    }\r\n    return context;\r\n  }\r\n}\r\n","import { InjectionToken, Provider } from '@angular/core';\r\nimport { ActionReducer, ActionReducerMap } from '@ngrx/store';\r\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\r\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\r\nimport { PROCESS_FEATURE } from '../process-state';\r\n\r\nexport function getReducers<T>(): ActionReducer<EntityLoaderState<T>> {\r\n  return entityLoaderReducer(PROCESS_FEATURE);\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducerMap<\r\n  EntityLoaderState<any>\r\n>> = new InjectionToken<ActionReducerMap<EntityLoaderState<any>>>(\r\n  'ProcessReducers'\r\n);\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { PROCESS_FEATURE } from './process-state';\nimport { reducerProvider, reducerToken } from './reducers/index';\n\n@NgModule({\n  imports: [StateModule, StoreModule.forFeature(PROCESS_FEATURE, reducerToken)],\n  providers: [reducerProvider],\n})\nexport class ProcessStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ProcessStoreModule } from './store/process-store.module';\n\n@NgModule({\n  imports: [ProcessStoreModule],\n})\nexport class ProcessModule {\n  static forRoot(): ModuleWithProviders<ProcessModule> {\n    return {\n      ngModule: ProcessModule,\n      providers: [],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Product } from '../../../model/product.model';\r\nimport { ProductAdapter } from './product.adapter';\r\nimport { ScopedProductData } from './scoped-product-data';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductConnector {\r\n  constructor(protected adapter: ProductAdapter) {}\r\n\r\n  get(productCode: string, scope = ''): Observable<Product> {\r\n    return this.adapter.load(productCode, scope);\r\n  }\r\n\r\n  getMany(products: ScopedProductData[]): ScopedProductData[] {\r\n    if (!this.adapter.loadMany) {\r\n      return products.map((product) => ({\r\n        ...product,\r\n        data$: this.adapter.load(product.code, product.scope),\r\n      }));\r\n    }\r\n\r\n    return this.adapter.loadMany(products);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { ProductReferencesAdapter } from './product-references.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReferencesConnector {\n  constructor(protected adapter: ProductReferencesAdapter) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.adapter.load(productCode, referenceType, pageSize);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReviewsAdapter } from './product-reviews.adapter';\nimport { Review } from '../../../model/product.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReviewsConnector {\n  constructor(protected adapter: ProductReviewsAdapter) {}\n\n  get(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.adapter.load(productCode, maxCount);\n  }\n\n  add(productCode: string, review: any): Observable<Review> {\n    return this.adapter.post(productCode, review);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductSearchAdapter } from './product-search.adapter';\nimport { SearchConfig } from '../../model/search-config';\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSearchConnector {\n  constructor(protected adapter: ProductSearchAdapter) {}\n\n  search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage> {\n    return this.adapter.search(query, searchConfig);\n  }\n\n  getSuggestions(term: string, pageSize?: number): Observable<Suggestion[]> {\n    return this.adapter.loadSuggestions(term, pageSize);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReference } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REFERENCES = '[Product] Load Product References Data';\nexport const LOAD_PRODUCT_REFERENCES_FAIL =\n  '[Product] Load Product References Data Fail';\nexport const LOAD_PRODUCT_REFERENCES_SUCCESS =\n  '[Product] Load Product References Data Success';\nexport const CLEAN_PRODUCT_REFERENCES = '[Product] Clean Product References';\n\nexport class LoadProductReferences implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES;\n  constructor(\n    public payload: {\n      productCode: string;\n      referenceType?: string;\n      pageSize?: number;\n    }\n  ) {}\n}\n\nexport class LoadProductReferencesFail implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReferencesSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_SUCCESS;\n  constructor(\n    public payload: {\n      productCode: string;\n      list: ProductReference[];\n    }\n  ) {}\n}\n\nexport class CleanProductReferences implements Action {\n  readonly type = CLEAN_PRODUCT_REFERENCES;\n}\n\n// action types\nexport type ProductReferencesAction =\n  | LoadProductReferences\n  | LoadProductReferencesFail\n  | LoadProductReferencesSuccess\n  | CleanProductReferences;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { Review } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REVIEWS = '[Product] Load Product Reviews Data';\nexport const LOAD_PRODUCT_REVIEWS_FAIL =\n  '[Product] Load Product Reviews Data Fail';\nexport const LOAD_PRODUCT_REVIEWS_SUCCESS =\n  '[Product] Load Product Reviews Data Success';\nexport const POST_PRODUCT_REVIEW = '[Product] Post Product Review';\nexport const POST_PRODUCT_REVIEW_FAIL = '[Product] Post Product Review Fail';\nexport const POST_PRODUCT_REVIEW_SUCCESS =\n  '[Product] Post Product Review Success';\n\nexport class LoadProductReviews implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadProductReviewsFail implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReviewsSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_SUCCESS;\n  constructor(public payload: { productCode: string; list: Review[] }) {}\n}\n\nexport class PostProductReview implements Action {\n  readonly type = POST_PRODUCT_REVIEW;\n  constructor(public payload: { productCode: string; review: Review }) {}\n}\n\nexport class PostProductReviewFail implements Action {\n  readonly type = POST_PRODUCT_REVIEW_FAIL;\n  constructor(public payload: string) {}\n}\n\nexport class PostProductReviewSuccess implements Action {\n  readonly type = POST_PRODUCT_REVIEW_SUCCESS;\n  constructor(public payload: Review) {}\n}\n\n// action types\nexport type ProductReviewsAction =\n  | LoadProductReviews\n  | LoadProductReviewsFail\n  | LoadProductReviewsSuccess\n  | PostProductReview\n  | PostProductReviewFail\n  | PostProductReviewSuccess;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport {\n  ClearSearch,\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { SearchConfig } from '../../model/search-config';\n\nexport const SEARCH_PRODUCTS = '[Product] Search Products';\nexport const SEARCH_PRODUCTS_FAIL = '[Product] Search Products Fail';\nexport const SEARCH_PRODUCTS_SUCCESS = '[Product] Search Products Success';\nexport const GET_PRODUCT_SUGGESTIONS = '[Product] Get Product Suggestions';\nexport const GET_PRODUCT_SUGGESTIONS_SUCCESS =\n  '[Product] Get Product Suggestions Success';\nexport const GET_PRODUCT_SUGGESTIONS_FAIL =\n  '[Product] Get Product Suggestions Fail';\nexport const CLEAR_PRODUCT_SEARCH_RESULT =\n  '[Product] Clear Product Search Result';\n\nexport class SearchProducts implements Action {\n  readonly type = SEARCH_PRODUCTS;\n  constructor(\n    public payload: { queryText: string; searchConfig: SearchConfig },\n    public auxiliary?: boolean\n  ) {}\n}\n\nexport class SearchProductsFail implements Action {\n  readonly type = SEARCH_PRODUCTS_FAIL;\n  constructor(public payload: ErrorModel, public auxiliary?: boolean) {}\n}\n\nexport class SearchProductsSuccess implements Action {\n  readonly type = SEARCH_PRODUCTS_SUCCESS;\n  constructor(public payload: ProductSearchPage, public auxiliary?: boolean) {}\n}\n\nexport class GetProductSuggestions implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS;\n  constructor(public payload: { term: string; searchConfig: SearchConfig }) {}\n}\n\nexport class GetProductSuggestionsSuccess implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_SUCCESS;\n  constructor(public payload: Suggestion[]) {}\n}\n\nexport class GetProductSuggestionsFail implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class ClearProductSearchResult implements Action {\n  readonly type = CLEAR_PRODUCT_SEARCH_RESULT;\n  constructor(\n    public payload: ClearSearch = {\n      clearPageResults: false,\n      clearSearchboxResults: false,\n    }\n  ) {}\n}\n\n// action types\nexport type ProductSearchAction =\n  | SearchProducts\n  | SearchProductsFail\n  | SearchProductsSuccess\n  | GetProductSuggestions\n  | GetProductSuggestionsSuccess\n  | GetProductSuggestionsFail\n  | ClearProductSearchResult;\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../model/product-search.model';\nimport { Product, ProductReference, Review } from '../../model/product.model';\nimport { EntityScopedLoaderState } from '../../state/utils/scoped-loader/scoped-loader.state';\n\nexport const PRODUCT_FEATURE = 'product';\nexport const PRODUCT_DETAIL_ENTITY = '[Product] Detail Entity';\n\nexport interface StateWithProduct {\n  [PRODUCT_FEATURE]: ProductsState;\n}\n\nexport interface ProductsState {\n  details: EntityScopedLoaderState<Product>;\n  search: ProductsSearchState;\n  reviews: ProductReviewsState;\n  references: ProductReferencesState;\n}\n\nexport interface ProductsSearchState {\n  results: ProductSearchPage;\n  suggestions: Suggestion[];\n  auxResults: ProductSearchPage;\n}\n\nexport interface ProductReviewsState {\n  productCode: string;\n  list: Review[];\n}\n\nexport interface ProductReferencesState {\n  productCode: string;\n  list: ProductReference[];\n}\n","import {\n  ENTITY_FAIL_ACTION,\n  ENTITY_LOAD_ACTION,\n  ENTITY_RESET_ACTION,\n  ENTITY_SUCCESS_ACTION,\n  entityFailMeta,\n  EntityLoaderMeta,\n  entityLoadMeta,\n  entityResetMeta,\n  entitySuccessMeta,\n} from '../entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\n\nexport namespace EntityScopedLoaderActions {\n  export interface EntityScopedLoaderMeta extends EntityLoaderMeta {\n    scope?: string;\n  }\n\n  export interface EntityScopedLoaderAction extends Action {\n    readonly payload?: any;\n    readonly meta?: EntityScopedLoaderMeta;\n  }\n\n  export function entityScopedLoadMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityLoadMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedFailMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string,\n    error?: any\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityFailMeta(entityType, id, error),\n      scope,\n    };\n  }\n\n  export function entityScopedSuccessMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entitySuccessMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedResetMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityResetMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export class EntityScopedLoadAction implements EntityScopedLoaderAction {\n    type = ENTITY_LOAD_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedLoadMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedFailAction implements EntityScopedLoaderAction {\n    type = ENTITY_FAIL_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      error?: any\n    ) {\n      this.meta = entityScopedFailMeta(entityType, id, scope, error);\n    }\n  }\n\n  export class EntityScopedSuccessAction implements EntityScopedLoaderAction {\n    type = ENTITY_SUCCESS_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      public payload?: any\n    ) {\n      this.meta = entityScopedSuccessMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedResetAction implements EntityScopedLoaderAction {\n    type = ENTITY_RESET_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedResetMeta(entityType, id, scope);\n    }\n  }\n}\n","import { Product } from '../../../model/product.model';\nimport { PRODUCT_DETAIL_ENTITY } from '../product-state';\nimport { EntityLoaderMeta } from '../../../state/utils/entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\nimport { EntityScopedLoaderActions } from '../../../state/utils/scoped-loader/entity-scoped-loader.actions';\n\nexport const LOAD_PRODUCT = '[Product] Load Product Data';\nexport const LOAD_PRODUCT_FAIL = '[Product] Load Product Data Fail';\nexport const LOAD_PRODUCT_SUCCESS = '[Product] Load Product Data Success';\n\nexport interface ProductMeta extends EntityLoaderMeta {\n  scope?: string;\n}\n\nexport interface EntityScopedLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProductMeta;\n}\n\nexport class LoadProduct extends EntityScopedLoaderActions.EntityScopedLoadAction {\n  readonly type = LOAD_PRODUCT;\n  constructor(public payload: string, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload, scope);\n  }\n}\n\nexport class LoadProductFail extends EntityScopedLoaderActions.EntityScopedFailAction {\n  readonly type = LOAD_PRODUCT_FAIL;\n  constructor(productCode: string, public payload: any, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, productCode, scope, payload);\n  }\n}\n\nexport class LoadProductSuccess extends EntityScopedLoaderActions.EntityScopedSuccessAction {\n  readonly type = LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload.code, scope);\n  }\n}\n\n// action types\nexport type ProductAction = LoadProduct | LoadProductFail | LoadProductSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductsState,\n  PRODUCT_FEATURE,\n  StateWithProduct,\n} from '../product-state';\n\nexport const getProductsState: MemoizedSelector<\n  StateWithProduct,\n  ProductsState\n> = createFeatureSelector<ProductsState>(PRODUCT_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { ProductReference } from '../../../model/product.model';\r\nimport {\r\n  ProductReferencesState,\r\n  ProductsState,\r\n  StateWithProduct,\r\n} from '../product-state';\r\nimport { getProductsState } from './feature.selector';\r\n\r\nexport const getProductReferencesState: MemoizedSelector<\r\n  StateWithProduct,\r\n  ProductReferencesState\r\n> = createSelector(\r\n  getProductsState,\r\n  (state: ProductsState) => state.references\r\n);\r\n\r\nexport const getSelectedProductReferencesFactory = (\r\n  productCode: string,\r\n  referenceType: string\r\n): MemoizedSelector<StateWithProduct, ProductReference[]> => {\r\n  return createSelector(getProductReferencesState, (referenceTypeData) => {\r\n    if (referenceTypeData.productCode === productCode) {\r\n      if (!!referenceTypeData.list) {\r\n        if (referenceType) {\r\n          return referenceTypeData.list.filter(\r\n            (item) => item.referenceType === referenceType\r\n          );\r\n        }\r\n\r\n        return referenceTypeData.list;\r\n      } else {\r\n        return [];\r\n      }\r\n    }\r\n  });\r\n};\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { Review } from '../../../model/product.model';\r\nimport {\r\n  ProductReviewsState,\r\n  ProductsState,\r\n  StateWithProduct,\r\n} from '../product-state';\r\nimport { getProductsState } from './feature.selector';\r\n\r\nexport const getProductReviewsState: MemoizedSelector<\r\n  StateWithProduct,\r\n  ProductReviewsState\r\n> = createSelector(getProductsState, (state: ProductsState) => state.reviews);\r\n\r\nexport const getSelectedProductReviewsFactory = (\r\n  productCode\r\n): MemoizedSelector<StateWithProduct, Review[]> => {\r\n  return createSelector(getProductReviewsState, (reviewData) => {\r\n    if (reviewData.productCode === productCode) {\r\n      return reviewData.list;\r\n    }\r\n  });\r\n};\r\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductsSearchState } from '../product-state';\n\nexport const initialState: ProductsSearchState = {\n  results: {},\n  suggestions: [],\n  auxResults: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductSearchAction\n): ProductsSearchState {\n  switch (action.type) {\n    case ProductActions.SEARCH_PRODUCTS_SUCCESS: {\n      const results = action.payload;\n      const res = action.auxiliary ? { auxResults: results } : { results };\n      return {\n        ...state,\n        ...res,\n      };\n    }\n\n    case ProductActions.GET_PRODUCT_SUGGESTIONS_SUCCESS: {\n      const suggestions: Suggestion[] = action.payload;\n\n      return {\n        ...state,\n        suggestions,\n      };\n    }\n\n    case ProductActions.CLEAR_PRODUCT_SEARCH_RESULT: {\n      return {\n        ...state,\n        results: action.payload.clearPageResults ? {} : state.results,\n        suggestions: action.payload.clearSearchboxResults\n          ? []\n          : state.suggestions,\n        auxResults: action.payload.clearSearchboxResults\n          ? {}\n          : state.auxResults,\n      };\n    }\n  }\n  return state;\n}\n\nexport const getSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.results;\nexport const getAuxSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.auxResults;\nexport const getProductSuggestions = (\n  state: ProductsSearchState\n): Suggestion[] => state.suggestions;\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport {\r\n  ProductSearchPage,\r\n  Suggestion,\r\n} from '../../../model/product-search.model';\r\nimport {\r\n  ProductsSearchState,\r\n  ProductsState,\r\n  StateWithProduct,\r\n} from '../product-state';\r\nimport * as fromProductSearch from '../reducers/product-search.reducer';\r\nimport { getProductsState } from './feature.selector';\r\n\r\nexport const getProductsSearchState: MemoizedSelector<\r\n  StateWithProduct,\r\n  ProductsSearchState\r\n> = createSelector(getProductsState, (state: ProductsState) => state.search);\r\n\r\nexport const getSearchResults: MemoizedSelector<\r\n  StateWithProduct,\r\n  ProductSearchPage\r\n> = createSelector(getProductsSearchState, fromProductSearch.getSearchResults);\r\n\r\nexport const getAuxSearchResults: MemoizedSelector<\r\n  StateWithProduct,\r\n  ProductSearchPage\r\n> = createSelector(\r\n  getProductsSearchState,\r\n  fromProductSearch.getAuxSearchResults\r\n);\r\n\r\nexport const getProductSuggestions: MemoizedSelector<\r\n  StateWithProduct,\r\n  Suggestion[]\r\n> = createSelector(\r\n  getProductsSearchState,\r\n  fromProductSearch.getProductSuggestions\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { Product } from '../../../model/product.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { ProductsState, StateWithProduct } from '../product-state';\r\nimport { getProductsState } from './feature.selector';\r\n\r\nexport const getProductState: MemoizedSelector<\r\n  StateWithProduct,\r\n  StateUtils.EntityLoaderState<Product>\r\n> = createSelector(getProductsState, (state: ProductsState) => state.details);\r\n\r\nexport const getSelectedProductStateFactory = (\r\n  code: string,\r\n  scope = ''\r\n): MemoizedSelector<StateWithProduct, StateUtils.LoaderState<Product>> => {\r\n  return createSelector(\r\n    getProductState,\r\n    (details) =>\r\n      StateUtils.entityLoaderStateSelector(details, code)[scope] ||\r\n      StateUtils.initialLoaderState\r\n  );\r\n};\r\n\r\nexport const getSelectedProductFactory = (\r\n  code: string,\r\n  scope = ''\r\n): MemoizedSelector<StateWithProduct, Product> => {\r\n  return createSelector(\r\n    getSelectedProductStateFactory(code, scope),\r\n    (productState) => StateUtils.loaderValueSelector(productState)\r\n  );\r\n};\r\n\r\nexport const getSelectedProductLoadingFactory = (\r\n  code: string,\r\n  scope = ''\r\n): MemoizedSelector<StateWithProduct, boolean> => {\r\n  return createSelector(\r\n    getSelectedProductStateFactory(code, scope),\r\n    (productState) => StateUtils.loaderLoadingSelector(productState)\r\n  );\r\n};\r\n\r\nexport const getSelectedProductSuccessFactory = (\r\n  code: string,\r\n  scope = ''\r\n): MemoizedSelector<StateWithProduct, boolean> => {\r\n  return createSelector(\r\n    getSelectedProductStateFactory(code, scope),\r\n    (productState) => StateUtils.loaderSuccessSelector(productState)\r\n  );\r\n};\r\n\r\nexport const getSelectedProductErrorFactory = (\r\n  code: string,\r\n  scope = ''\r\n): MemoizedSelector<StateWithProduct, boolean> => {\r\n  return createSelector(\r\n    getSelectedProductStateFactory(code, scope),\r\n    (productState) => StateUtils.loaderErrorSelector(productState)\r\n  );\r\n};\r\n\r\nexport const getAllProductCodes: MemoizedSelector<\r\n  StateWithProduct,\r\n  string[]\r\n> = createSelector(getProductState, (details) => {\r\n  return Object.keys(details.entities);\r\n});\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { ProductReference } from '../../model/product.model';\r\nimport { ProductActions } from '../store/actions/index';\r\nimport { StateWithProduct } from '../store/product-state';\r\nimport { ProductSelectors } from '../store/selectors/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductReferenceService {\r\n  constructor(protected store: Store<StateWithProduct>) {}\r\n\r\n  get(\r\n    productCode: string,\r\n    referenceType?: string,\r\n    pageSize?: number\r\n  ): Observable<ProductReference[]> {\r\n    return this.store.pipe(\r\n      select(\r\n        ProductSelectors.getSelectedProductReferencesFactory(\r\n          productCode,\r\n          referenceType\r\n        )\r\n      ),\r\n      tap((references) => {\r\n        if (references === undefined && productCode !== undefined) {\r\n          this.store.dispatch(\r\n            new ProductActions.LoadProductReferences({\r\n              productCode,\r\n              referenceType,\r\n              pageSize,\r\n            })\r\n          );\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  cleanReferences(): void {\r\n    this.store.dispatch(new ProductActions.CleanProductReferences());\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Review } from '../../model/product.model';\r\nimport { ProductActions } from '../store/actions/index';\r\nimport { StateWithProduct } from '../store/product-state';\r\nimport { ProductSelectors } from '../store/selectors/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductReviewService {\r\n  constructor(protected store: Store<StateWithProduct>) {}\r\n\r\n  getByProductCode(productCode: string): Observable<Review[]> {\r\n    return this.store.pipe(\r\n      select(ProductSelectors.getSelectedProductReviewsFactory(productCode)),\r\n      tap((reviews) => {\r\n        if (reviews === undefined && productCode !== undefined) {\r\n          this.store.dispatch(\r\n            new ProductActions.LoadProductReviews(productCode)\r\n          );\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  add(productCode: string, review: Review): void {\r\n    this.store.dispatch(\r\n      new ProductActions.PostProductReview({\r\n        productCode: productCode,\r\n        review,\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { ProductSearchPage } from '../../model/product-search.model';\r\nimport { SearchConfig } from '../model/search-config';\r\nimport { ProductActions } from '../store/actions/index';\r\nimport { StateWithProduct } from '../store/product-state';\r\nimport { ProductSelectors } from '../store/selectors/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductSearchService {\r\n  constructor(protected store: Store<StateWithProduct>) {}\r\n\r\n  search(query: string, searchConfig?: SearchConfig): void {\r\n    this.store.dispatch(\r\n      new ProductActions.SearchProducts({\r\n        queryText: query,\r\n        searchConfig: searchConfig,\r\n      })\r\n    );\r\n  }\r\n\r\n  getResults(): Observable<ProductSearchPage> {\r\n    return this.store.pipe(select(ProductSelectors.getSearchResults));\r\n  }\r\n\r\n  clearResults(): void {\r\n    this.store.dispatch(\r\n      new ProductActions.ClearProductSearchResult({\r\n        clearPageResults: true,\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { isPlatformBrowser } from '@angular/common';\r\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport { Actions, ofType } from '@ngrx/effects';\r\nimport { select, Store } from '@ngrx/store';\r\nimport {\r\n  combineLatest,\r\n  defer,\r\n  merge,\r\n  Observable,\r\n  of,\r\n  SchedulerLike,\r\n  using,\r\n} from 'rxjs';\r\nimport {\r\n  auditTime,\r\n  debounceTime,\r\n  delay,\r\n  distinctUntilChanged,\r\n  filter,\r\n  map,\r\n  mapTo,\r\n  shareReplay,\r\n  tap,\r\n  withLatestFrom,\r\n} from 'rxjs/operators';\r\nimport { deepMerge } from '../../config/utils/deep-merge';\r\nimport { Product } from '../../model/product.model';\r\nimport { LoadingScopesService } from '../../occ/services/loading-scopes.service';\r\nimport { withdrawOn } from '../../util/withdraw-on';\r\nimport { ProductActions } from '../store/actions/index';\r\nimport { StateWithProduct } from '../store/product-state';\r\nimport { ProductSelectors } from '../store/selectors/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductLoadingService {\r\n  protected products: {\r\n    [code: string]: { [scope: string]: Observable<Product> };\r\n  } = {};\r\n\r\n  constructor(\r\n    protected store: Store<StateWithProduct>,\r\n    protected loadingScopes: LoadingScopesService,\r\n    protected actions$: Actions,\r\n    @Inject(PLATFORM_ID) protected platformId: any\r\n  ) {}\r\n\r\n  get(productCode: string, scopes: string[]): Observable<Product> {\r\n    scopes = this.loadingScopes.expand('product', scopes);\r\n\r\n    this.initProductScopes(productCode, scopes);\r\n    return this.products[productCode][this.getScopesIndex(scopes)];\r\n  }\r\n\r\n  protected initProductScopes(productCode: string, scopes: string[]): void {\r\n    if (!this.products[productCode]) {\r\n      this.products[productCode] = {};\r\n    }\r\n\r\n    for (const scope of scopes) {\r\n      if (!this.products[productCode][scope]) {\r\n        this.products[productCode][scope] = this.getProductForScope(\r\n          productCode,\r\n          scope\r\n        );\r\n      }\r\n    }\r\n\r\n    if (scopes.length > 1) {\r\n      this.products[productCode][this.getScopesIndex(scopes)] = combineLatest(\r\n        scopes.map((scope) => this.products[productCode][scope])\r\n      ).pipe(\r\n        auditTime(0),\r\n        map((productParts) =>\r\n          productParts.every(Boolean)\r\n            ? deepMerge({}, ...productParts)\r\n            : undefined\r\n        ),\r\n        distinctUntilChanged()\r\n      );\r\n    }\r\n  }\r\n\r\n  protected getScopesIndex(scopes: string[]): string {\r\n    return scopes.join('ɵ');\r\n  }\r\n\r\n  /**\r\n   * Creates observable for providing specified product data for the scope\r\n   *\r\n   * @param productCode\r\n   * @param scope\r\n   */\r\n  protected getProductForScope(\r\n    productCode: string,\r\n    scope: string\r\n  ): Observable<Product> {\r\n    const shouldLoad$ = this.store.pipe(\r\n      select(\r\n        ProductSelectors.getSelectedProductStateFactory(productCode, scope)\r\n      ),\r\n      map(\r\n        (productState) =>\r\n          !productState.loading && !productState.success && !productState.error\r\n      ),\r\n      distinctUntilChanged(),\r\n      filter((x) => x)\r\n    );\r\n\r\n    const isLoading$ = this.store.pipe(\r\n      select(\r\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\r\n      )\r\n    );\r\n\r\n    const productLoadLogic$ = merge(\r\n      shouldLoad$,\r\n      ...this.getProductReloadTriggers(productCode, scope)\r\n    ).pipe(\r\n      debounceTime(0),\r\n      withLatestFrom(isLoading$),\r\n      tap(([, isLoading]) => {\r\n        if (!isLoading) {\r\n          this.store.dispatch(\r\n            new ProductActions.LoadProduct(productCode, scope)\r\n          );\r\n        }\r\n      })\r\n    );\r\n\r\n    const productData$ = this.store.pipe(\r\n      select(ProductSelectors.getSelectedProductFactory(productCode, scope))\r\n    );\r\n\r\n    return using(\r\n      () => productLoadLogic$.subscribe(),\r\n      () => productData$\r\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\r\n  }\r\n\r\n  /**\r\n   * Returns reload triggers for product per scope\r\n   *\r\n   * @param productCode\r\n   * @param scope\r\n   */\r\n  protected getProductReloadTriggers(\r\n    productCode: string,\r\n    scope: string\r\n  ): Observable<boolean>[] {\r\n    const triggers = [];\r\n\r\n    // max age trigger add\r\n    const maxAge = this.loadingScopes.getMaxAge('product', scope);\r\n    if (maxAge && isPlatformBrowser(this.platformId)) {\r\n      // we want to grab load product success and load product fail for this product and scope\r\n      const loadFinish$ = this.actions$.pipe(\r\n        filter(\r\n          (\r\n            action:\r\n              | ProductActions.LoadProductSuccess\r\n              | ProductActions.LoadProductFail\r\n          ) =>\r\n            (action.type === ProductActions.LOAD_PRODUCT_SUCCESS ||\r\n              action.type === ProductActions.LOAD_PRODUCT_FAIL) &&\r\n            action.meta.entityId === productCode &&\r\n            action.meta.scope === scope\r\n        )\r\n      );\r\n\r\n      const loadStart$ = this.actions$.pipe(\r\n        ofType(ProductActions.LOAD_PRODUCT),\r\n        filter(\r\n          (action: ProductActions.LoadProduct) =>\r\n            action.payload === productCode && action.meta.scope === scope\r\n        )\r\n      );\r\n\r\n      triggers.push(this.getMaxAgeTrigger(loadStart$, loadFinish$, maxAge));\r\n    }\r\n\r\n    return triggers;\r\n  }\r\n\r\n  /**\r\n   * Generic method that returns stream triggering reload by maxAge\r\n   *\r\n   * Could be refactored to separate service in future to use in other\r\n   * max age reload implementations\r\n   *\r\n   * @param loadStart$ Stream that emits on load start\r\n   * @param loadFinish$ Stream that emits on load finish\r\n   * @param maxAge max age\r\n   */\r\n  private getMaxAgeTrigger(\r\n    loadStart$: Observable<any>,\r\n    loadFinish$: Observable<any>,\r\n    maxAge: number,\r\n    scheduler?: SchedulerLike\r\n  ): Observable<boolean> {\r\n    let timestamp = 0;\r\n\r\n    const now = () => (scheduler ? scheduler.now() : Date.now());\r\n\r\n    const timestamp$ = loadFinish$.pipe(tap(() => (timestamp = now())));\r\n\r\n    const shouldReload$: Observable<boolean> = defer(() => {\r\n      const age = now() - timestamp;\r\n\r\n      const timestampRefresh$ = timestamp$.pipe(\r\n        delay(maxAge, scheduler),\r\n        mapTo(true),\r\n        withdrawOn(loadStart$)\r\n      );\r\n\r\n      if (age > maxAge) {\r\n        // we should emit first value immediately\r\n        return merge(of(true), timestampRefresh$);\r\n      } else if (age === 0) {\r\n        // edge case, we should emit max age timeout after next load success\r\n        // could happen with artificial schedulers\r\n        return timestampRefresh$;\r\n      } else {\r\n        // we should emit first value when age will expire\r\n        return merge(\r\n          of(true).pipe(delay(maxAge - age, scheduler)),\r\n          timestampRefresh$\r\n        );\r\n      }\r\n    });\r\n\r\n    return shouldReload$;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Product } from '../../model/product.model';\r\nimport { ProductActions } from '../store/actions/index';\r\nimport { StateWithProduct } from '../store/product-state';\r\nimport { ProductSelectors } from '../store/selectors/index';\r\nimport { ProductLoadingService } from '../services/product-loading.service';\r\nimport { ProductScope } from '../model/product-scope';\r\nimport { DEFAULT_SCOPE } from '../../occ/occ-models/occ-endpoints.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductService {\r\n  constructor(\r\n    protected store: Store<StateWithProduct>,\r\n    protected productLoading: ProductLoadingService\r\n  ) {}\r\n\r\n  /**\r\n   * Returns the product observable. The product will be loaded\r\n   * whenever there's no value observed.\r\n   *\r\n   * The underlying product loader ensures that the product is\r\n   * only loaded once, even in case of parallel observers.\r\n   *\r\n   * You should provide product data scope you are interested in to not load all\r\n   * the data if not needed. You can provide more than one scope.\r\n   *\r\n   * @param productCode Product code to load\r\n   * @param scopes Scope or scopes of the product data\r\n   */\r\n  get(\r\n    productCode: string,\r\n    scopes: (ProductScope | string)[] | ProductScope | string = DEFAULT_SCOPE\r\n  ): Observable<Product> {\r\n    return productCode\r\n      ? this.productLoading.get(productCode, [].concat(scopes))\r\n      : of(undefined);\r\n  }\r\n\r\n  /**\r\n   * Returns boolean observable for product's loading state\r\n   */\r\n  isLoading(\r\n    productCode: string,\r\n    scope: ProductScope | string = ''\r\n  ): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(\r\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns boolean observable for product's load success state\r\n   */\r\n  isSuccess(\r\n    productCode: string,\r\n    scope: ProductScope | string = ''\r\n  ): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(\r\n        ProductSelectors.getSelectedProductSuccessFactory(productCode, scope)\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns boolean observable for product's load error state\r\n   */\r\n  hasError(\r\n    productCode: string,\r\n    scope: ProductScope | string = ''\r\n  ): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(\r\n        ProductSelectors.getSelectedProductErrorFactory(productCode, scope)\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Reloads the product. The product is loaded implicetly\r\n   * whenever selected by the `get`, but in some cases an\r\n   * explicit reload might be needed.\r\n   */\r\n  reload(productCode: string, scope: ProductScope | string = ''): void {\r\n    this.store.dispatch(new ProductActions.LoadProduct(productCode, scope));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage, Suggestion } from '../../model/index';\nimport { SearchConfig } from '../model/index';\nimport { ProductActions } from '../store/actions/index';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductSearchService } from './product-search.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchboxService extends ProductSearchService {\n  /**\n   * dispatch the search for the search box\n   */\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts(\n        {\n          queryText: query,\n          searchConfig: searchConfig,\n        },\n        true\n      )\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getAuxSearchResults));\n  }\n\n  /**\n   * clears the products and suggestions\n   */\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearSearchboxResults: true,\n      })\n    );\n  }\n\n  getSuggestionResults(): Observable<Suggestion[]> {\n    return this.store.pipe(select(ProductSelectors.getProductSuggestions));\n  }\n\n  searchSuggestions(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.GetProductSuggestions({\n        term: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { combineLatest, Observable, of } from 'rxjs';\r\nimport { filter, map, switchMap } from 'rxjs/operators';\r\nimport { CmsService } from '../../cms/facade/cms.service';\r\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\r\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\r\nimport {\r\n  PageBreadcrumbResolver,\r\n  PageTitleResolver,\r\n} from '../../cms/page/page.resolvers';\r\nimport { TranslationService } from '../../i18n/translation.service';\r\nimport { PageType } from '../../model/cms.model';\r\nimport { ProductSearchPage } from '../../model/product-search.model';\r\nimport { ProductSearchService } from '../facade/product-search.service';\r\n\r\n/**\r\n * Resolves the page data for the Product Listing Page.\r\n *\r\n * The page title, and breadcrumbs are resolved in this implementation only.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CategoryPageMetaResolver extends PageMetaResolver\r\n  implements PageTitleResolver, PageBreadcrumbResolver {\r\n  // reusable observable for search page data\r\n  protected searchPage$: Observable<\r\n    ProductSearchPage | Page\r\n  > = this.cms.getCurrentPage().pipe(\r\n    filter(Boolean),\r\n    switchMap((page: Page) =>\r\n      // only the existence of a plp component tells us if products\r\n      // are rendered or if this is an ordinary content page\r\n      this.hasProductListComponent(page)\r\n        ? this.productSearchService.getResults().pipe(filter(Boolean))\r\n        : of(page)\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    protected productSearchService: ProductSearchService,\r\n    protected cms: CmsService,\r\n    protected translation: TranslationService\r\n  ) {\r\n    super();\r\n    this.pageType = PageType.CATEGORY_PAGE;\r\n  }\r\n\r\n  resolveTitle(): Observable<string> {\r\n    return this.searchPage$.pipe(\r\n      filter((page: ProductSearchPage) => !!page.pagination),\r\n      switchMap((p: ProductSearchPage) =>\r\n        this.translation.translate('pageMetaResolver.category.title', {\r\n          count: p.pagination.totalResults,\r\n          query: p.breadcrumbs?.length\r\n            ? p.breadcrumbs[0].facetValueName\r\n            : undefined,\r\n        })\r\n      )\r\n    );\r\n  }\r\n\r\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\r\n    return combineLatest([\r\n      this.searchPage$.pipe(),\r\n      this.translation.translate('common.home'),\r\n    ]).pipe(\r\n      map(([p, label]: [ProductSearchPage, string]) =>\r\n        p.breadcrumbs\r\n          ? this.resolveBreadcrumbData(<ProductSearchPage>p, label)\r\n          : null\r\n      )\r\n    );\r\n  }\r\n\r\n  protected resolveBreadcrumbData(\r\n    page: ProductSearchPage,\r\n    label: string\r\n  ): BreadcrumbMeta[] {\r\n    const breadcrumbs: BreadcrumbMeta[] = [];\r\n    breadcrumbs.push({ label: label, link: '/' });\r\n\r\n    for (const br of page.breadcrumbs) {\r\n      if (br.facetCode === 'category' || br.facetCode === 'allCategories') {\r\n        breadcrumbs.push({\r\n          label: br.facetValueName,\r\n          link: `/c/${br.facetValueCode}`,\r\n        });\r\n      }\r\n      if (br.facetCode === 'brand') {\r\n        breadcrumbs.push({\r\n          label: br.facetValueName,\r\n          link: `/Brands/${br.facetValueName}/c/${br.facetValueCode}`,\r\n        });\r\n      }\r\n    }\r\n    return breadcrumbs;\r\n  }\r\n\r\n  protected hasProductListComponent(page: Page): boolean {\r\n    return !!Object.keys(page.slots).find(\r\n      (key) =>\r\n        !!page.slots[key].components.find(\r\n          (comp) =>\r\n            comp.typeCode === 'CMSProductListComponent' ||\r\n            comp.typeCode === 'ProductGridComponent'\r\n        )\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { filter, map, switchMap } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\r\nimport {\r\n  PageBreadcrumbResolver,\r\n  PageMetaResolver,\r\n  PageTitleResolver,\r\n} from '../../cms/page';\r\nimport { TranslationService } from '../../i18n/translation.service';\r\nimport { PageType } from '../../model/cms.model';\r\nimport { ProductSearchService } from '../../product/facade/product-search.service';\r\nimport { SemanticPathService } from '../../routing/configurable-routes/url-translation/semantic-path.service';\r\n\r\n/**\r\n * Resolves page meta data for the search result page, in case it's used\r\n * to query coupons. This is done by adding a `couponcode` query parameter\r\n * to the search page route.\r\n *\r\n * The page resolves an alternative page title and breadcrumb.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CouponSearchPageResolver extends PageMetaResolver\r\n  implements PageTitleResolver, PageBreadcrumbResolver {\r\n  protected total$: Observable<\r\n    number\r\n  > = this.productSearchService.getResults().pipe(\r\n    filter((data) => !!data?.pagination),\r\n    map((results) => results.pagination.totalResults)\r\n  );\r\n\r\n  constructor(\r\n    protected productSearchService: ProductSearchService,\r\n    protected translation: TranslationService,\r\n    protected authService: AuthService,\r\n    protected route: ActivatedRoute,\r\n    protected semanticPathService: SemanticPathService\r\n  ) {\r\n    super();\r\n    this.pageType = PageType.CONTENT_PAGE;\r\n    this.pageTemplate = 'SearchResultsListPageTemplate';\r\n  }\r\n\r\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\r\n    return combineLatest([\r\n      this.translation.translate('common.home'),\r\n      this.translation.translate('myCoupons.myCoupons'),\r\n      this.authService.isUserLoggedIn(),\r\n    ]).pipe(\r\n      map(([homeLabel, couponLabel, isLoggedIn]: [string, string, boolean]) => {\r\n        const breadcrumbs = [];\r\n        breadcrumbs.push({ label: homeLabel, link: '/' });\r\n        if (isLoggedIn) {\r\n          breadcrumbs.push({\r\n            label: couponLabel,\r\n            link: this.semanticPathService.transform({\r\n              cxRoute: 'coupons',\r\n            }),\r\n          });\r\n        }\r\n        return breadcrumbs;\r\n      })\r\n    );\r\n  }\r\n\r\n  resolveTitle(): Observable<string> {\r\n    return this.total$.pipe(\r\n      switchMap((total: number) =>\r\n        this.translation.translate('pageMetaResolver.search.findProductTitle', {\r\n          count: total,\r\n          coupon: this.couponCode,\r\n        })\r\n      )\r\n    );\r\n  }\r\n\r\n  getScore(page: Page): number {\r\n    return super.getScore(page) + (this.couponCode ? 1 : -1);\r\n  }\r\n\r\n  protected get couponCode(): string {\r\n    return this.route.snapshot?.queryParams?.couponcode;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { combineLatest, Observable, of } from 'rxjs';\r\nimport { filter, map, switchMap } from 'rxjs/operators';\r\nimport { BreadcrumbMeta, PageRobotsMeta } from '../../cms/model/page.model';\r\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\r\nimport {\r\n  PageBreadcrumbResolver,\r\n  PageDescriptionResolver,\r\n  PageHeadingResolver,\r\n  PageImageResolver,\r\n  PageRobotsResolver,\r\n  PageTitleResolver,\r\n} from '../../cms/page/page.resolvers';\r\nimport { TranslationService } from '../../i18n/translation.service';\r\nimport { PageType } from '../../model/cms.model';\r\nimport { Product } from '../../model/product.model';\r\nimport { RoutingService } from '../../routing/facade/routing.service';\r\nimport { ProductService } from '../facade/product.service';\r\nimport { ProductScope } from '../model/product-scope';\r\n\r\n/**\r\n * Resolves the page data for the Product Detail Page\r\n * based on the `PageType.PRODUCT_PAGE`.\r\n *\r\n * The page title, heading, description, breadcrumbs and\r\n * first GALLERY image are resolved if available in the data.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductPageMetaResolver extends PageMetaResolver\r\n  implements\r\n    PageHeadingResolver,\r\n    PageTitleResolver,\r\n    PageDescriptionResolver,\r\n    PageBreadcrumbResolver,\r\n    PageImageResolver,\r\n    PageRobotsResolver {\r\n  // reusable observable for product data based on the current page\r\n  protected product$ = this.routingService.getRouterState().pipe(\r\n    map((state) => state.state.params['productCode']),\r\n    filter((code) => !!code),\r\n    switchMap((code) => this.productService.get(code, ProductScope.DETAILS)),\r\n    filter(Boolean)\r\n  );\r\n\r\n  constructor(\r\n    protected routingService: RoutingService,\r\n    protected productService: ProductService,\r\n    protected translation: TranslationService\r\n  ) {\r\n    super();\r\n    this.pageType = PageType.PRODUCT_PAGE;\r\n  }\r\n\r\n  /**\r\n   * Resolves the page heading for the Product Detail Page.\r\n   * The page heading is used in the UI (`<h1>`), where as the page\r\n   * title is used by the browser and crawlers.\r\n   */\r\n  resolveHeading(): Observable<string> {\r\n    return this.product$.pipe(\r\n      switchMap((p: Product) =>\r\n        this.translation.translate('pageMetaResolver.product.heading', {\r\n          heading: p.name,\r\n        })\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resolves the page title for the Product Detail Page. The page title\r\n   * is resolved with the product name, the first category and the manufactorer.\r\n   * The page title used by the browser (history, tabs) and crawlers.\r\n   */\r\n  resolveTitle(): Observable<string> {\r\n    return this.product$.pipe(\r\n      switchMap((p: Product) => {\r\n        let title = p.name;\r\n        title += this.resolveFirstCategory(p);\r\n        title += this.resolveManufacturer(p);\r\n        return this.translation.translate('pageMetaResolver.product.title', {\r\n          title: title,\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resolves the page description for the Product Detail Page. The description\r\n   * is based on the `product.summary`.\r\n   */\r\n  resolveDescription(): Observable<string> {\r\n    return this.product$.pipe(\r\n      switchMap((p: Product) =>\r\n        this.translation.translate('pageMetaResolver.product.description', {\r\n          description: p.summary,\r\n        })\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resolves breadcrumbs for the Product Detail Page. The breadcrumbs are driven by\r\n   * a static home page crum and a crumb for each category.\r\n   */\r\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\r\n    return combineLatest([\r\n      this.product$.pipe(),\r\n      this.translation.translate('common.home'),\r\n    ]).pipe(\r\n      map(([p, label]: [Product, string]) => {\r\n        const breadcrumbs = [];\r\n        breadcrumbs.push({ label: label, link: '/' });\r\n        for (const { name, code, url } of p.categories || []) {\r\n          breadcrumbs.push({\r\n            label: name || code,\r\n            link: url,\r\n          });\r\n        }\r\n        return breadcrumbs;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resolves the main page image for the Product Detail Page. The product image\r\n   * is based on the PRIMARY product image. The zoom format is used by default.\r\n   */\r\n  resolveImage(): Observable<string> {\r\n    return this.product$.pipe(\r\n      map((p: Product) =>\r\n        (<any>p.images?.PRIMARY)?.zoom?.url\r\n          ? (<any>p.images.PRIMARY).zoom.url\r\n          : null\r\n      )\r\n    );\r\n  }\r\n\r\n  protected resolveFirstCategory(product: Product): string {\r\n    let firstCategory;\r\n    if (product.categories?.length > 0) {\r\n      firstCategory = product.categories[0];\r\n    }\r\n    return firstCategory\r\n      ? ` | ${firstCategory.name || firstCategory.code}`\r\n      : '';\r\n  }\r\n\r\n  protected resolveManufacturer(product: Product): string {\r\n    return product.manufacturer ? ` | ${product.manufacturer}` : '';\r\n  }\r\n\r\n  /**\r\n   * Resolves the robot information for the Product Detail Page. The\r\n   * robot instruction defaults to FOLLOW and INDEX for all product pages,\r\n   * regardless of whether they're purchasable or not.\r\n   */\r\n  resolveRobots(): Observable<PageRobotsMeta[]> {\r\n    return of([PageRobotsMeta.FOLLOW, PageRobotsMeta.INDEX]);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { filter, map, switchMap } from 'rxjs/operators';\r\nimport { PageMetaResolver } from '../../cms';\r\nimport { TranslationService } from '../../i18n/translation.service';\r\nimport { PageType } from '../../model/cms.model';\r\nimport { RoutingService } from '../../routing/facade/routing.service';\r\nimport { ProductSearchService } from '../facade/product-search.service';\r\n\r\n/**\r\n * Resolves the page data for the Search Result Page based on the\r\n * `PageType.CATEGORY_PAGE` and the `SearchResultsListPageTemplate` template.\r\n *\r\n * Only the page title is resolved in the standard implemenation.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SearchPageMetaResolver extends PageMetaResolver\r\n  implements PageMetaResolver {\r\n  protected total$: Observable<\r\n    number\r\n  > = this.productSearchService.getResults().pipe(\r\n    filter((data) => !!data?.pagination),\r\n    map((results) => results.pagination.totalResults)\r\n  );\r\n\r\n  protected query$: Observable<\r\n    string\r\n  > = this.routingService\r\n    .getRouterState()\r\n    .pipe(map((state) => state.state.params['query']));\r\n\r\n  constructor(\r\n    protected routingService: RoutingService,\r\n    protected productSearchService: ProductSearchService,\r\n    protected translation: TranslationService\r\n  ) {\r\n    super();\r\n    this.pageType = PageType.CONTENT_PAGE;\r\n    this.pageTemplate = 'SearchResultsListPageTemplate';\r\n  }\r\n\r\n  resolveTitle(): Observable<string> {\r\n    const sources = [this.total$, this.query$];\r\n    return combineLatest(sources).pipe(\r\n      switchMap(([t, q]: [number, string]) =>\r\n        this.translation.translate('pageMetaResolver.search.title', {\r\n          count: t,\r\n          query: q,\r\n        })\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, mergeMap } from 'rxjs/operators';\r\nimport { ErrorModel } from '../../../model/misc.model';\r\nimport { ProductReferencesConnector } from '../../connectors/references/product-references.connector';\r\nimport { ProductActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class ProductReferencesEffects {\r\n  @Effect()\r\n  loadProductReferences$: Observable<\r\n    | ProductActions.LoadProductReferencesSuccess\r\n    | ProductActions.LoadProductReferencesFail\r\n  > = this.actions$.pipe(\r\n    ofType(ProductActions.LOAD_PRODUCT_REFERENCES),\r\n    map((action: ProductActions.LoadProductReferences) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.productReferencesConnector\r\n        .get(payload.productCode, payload.referenceType, payload.pageSize)\r\n        .pipe(\r\n          map((data) => {\r\n            return new ProductActions.LoadProductReferencesSuccess({\r\n              productCode: payload.productCode,\r\n              list: data,\r\n            });\r\n          }),\r\n          catchError((_error) =>\r\n            of(\r\n              new ProductActions.LoadProductReferencesFail({\r\n                message: payload.productCode,\r\n              } as ErrorModel)\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private productReferencesConnector: ProductReferencesConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\r\nimport { ErrorModel } from '../../../model/misc.model';\r\nimport { ProductReviewsConnector } from '../../connectors/reviews/product-reviews.connector';\r\nimport { ProductActions } from '../actions/index';\r\nimport {\r\n  GlobalMessageService,\r\n  GlobalMessageType,\r\n} from '../../../global-message/index';\r\n\r\n@Injectable()\r\nexport class ProductReviewsEffects {\r\n  @Effect()\r\n  loadProductReviews$: Observable<\r\n    | ProductActions.LoadProductReviewsSuccess\r\n    | ProductActions.LoadProductReviewsFail\r\n  > = this.actions$.pipe(\r\n    ofType(ProductActions.LOAD_PRODUCT_REVIEWS),\r\n    map((action: ProductActions.LoadProductReviews) => action.payload),\r\n    mergeMap((productCode) => {\r\n      return this.productReviewsConnector.get(productCode).pipe(\r\n        map((data) => {\r\n          return new ProductActions.LoadProductReviewsSuccess({\r\n            productCode,\r\n            list: data,\r\n          });\r\n        }),\r\n        catchError((_error) =>\r\n          of(\r\n            new ProductActions.LoadProductReviewsFail({\r\n              message: productCode,\r\n            } as ErrorModel)\r\n          )\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  postProductReview: Observable<\r\n    | ProductActions.PostProductReviewSuccess\r\n    | ProductActions.PostProductReviewFail\r\n  > = this.actions$.pipe(\r\n    ofType(ProductActions.POST_PRODUCT_REVIEW),\r\n    map((action: ProductActions.PostProductReview) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.productReviewsConnector\r\n        .add(payload.productCode, payload.review)\r\n        .pipe(\r\n          map((reviewResponse) => {\r\n            return new ProductActions.PostProductReviewSuccess(reviewResponse);\r\n          }),\r\n          catchError((_error) =>\r\n            of(new ProductActions.PostProductReviewFail(payload.productCode))\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  showGlobalMessageOnPostProductReviewSuccess$ = this.actions$.pipe(\r\n    ofType(ProductActions.POST_PRODUCT_REVIEW_SUCCESS),\r\n    tap(() => {\r\n      this.globalMessageService.add(\r\n        { key: 'productReview.thankYouForReview' },\r\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private productReviewsConnector: ProductReviewsConnector,\r\n    private globalMessageService: GlobalMessageService\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, groupBy, map, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { ProductSearchConnector } from '../../connectors/search/product-search.connector';\r\nimport { ProductActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class ProductsSearchEffects {\r\n  @Effect()\r\n  searchProducts$: Observable<\r\n    ProductActions.SearchProductsSuccess | ProductActions.SearchProductsFail\r\n  > = this.actions$.pipe(\r\n    ofType(ProductActions.SEARCH_PRODUCTS),\r\n    groupBy((action: ProductActions.SearchProducts) => action.auxiliary),\r\n    mergeMap((group) =>\r\n      group.pipe(\r\n        switchMap((action: ProductActions.SearchProducts) => {\r\n          return this.productSearchConnector\r\n            .search(action.payload.queryText, action.payload.searchConfig)\r\n            .pipe(\r\n              map((data) => {\r\n                return new ProductActions.SearchProductsSuccess(\r\n                  data,\r\n                  action.auxiliary\r\n                );\r\n              }),\r\n              catchError((error) =>\r\n                of(\r\n                  new ProductActions.SearchProductsFail(\r\n                    makeErrorSerializable(error),\r\n                    action.auxiliary\r\n                  )\r\n                )\r\n              )\r\n            );\r\n        })\r\n      )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  getProductSuggestions$: Observable<\r\n    | ProductActions.GetProductSuggestionsSuccess\r\n    | ProductActions.GetProductSuggestionsFail\r\n  > = this.actions$.pipe(\r\n    ofType(ProductActions.GET_PRODUCT_SUGGESTIONS),\r\n    map((action: ProductActions.GetProductSuggestions) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.productSearchConnector\r\n        .getSuggestions(payload.term, payload.searchConfig.pageSize)\r\n        .pipe(\r\n          map((suggestions) => {\r\n            if (suggestions === undefined) {\r\n              return new ProductActions.GetProductSuggestionsSuccess([]);\r\n            }\r\n            return new ProductActions.GetProductSuggestionsSuccess(suggestions);\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new ProductActions.GetProductSuggestionsFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private productSearchConnector: ProductSearchConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { merge, Observable, of } from 'rxjs';\r\nimport { catchError, map, mergeMap } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { ProductConnector } from '../../connectors/product/product.connector';\r\nimport { ProductActions } from '../actions/index';\r\nimport { ScopedProductData } from '../../connectors/product/scoped-product-data';\r\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\r\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\r\nimport { Action } from '@ngrx/store';\r\nimport { withdrawOn } from '../../../util/withdraw-on';\r\n\r\n@Injectable()\r\nexport class ProductEffects {\r\n  // we want to cancel all ongoing requests when currency or language changes,\r\n  private contextChange$: Observable<Action> = this.actions$.pipe(\r\n    ofType(\r\n      SiteContextActions.CURRENCY_CHANGE,\r\n      SiteContextActions.LANGUAGE_CHANGE\r\n    )\r\n  );\r\n\r\n  loadProduct$ = createEffect(\r\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\r\n      ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\r\n    > =>\r\n      this.actions$.pipe(\r\n        ofType(ProductActions.LOAD_PRODUCT),\r\n        map((action: ProductActions.LoadProduct) => ({\r\n          code: action.payload,\r\n          scope: action.meta.scope,\r\n        })),\r\n        // we are grouping all load actions that happens at the same time\r\n        // to optimize loading and pass them all to productConnector.getMany\r\n        bufferDebounceTime(debounce, scheduler),\r\n        mergeMap((products) =>\r\n          merge(\r\n            ...this.productConnector\r\n              .getMany(products)\r\n              .map(this.productLoadEffect)\r\n          )\r\n        ),\r\n        withdrawOn(this.contextChange$)\r\n      )\r\n  );\r\n\r\n  private productLoadEffect(\r\n    productLoad: ScopedProductData\r\n  ): Observable<\r\n    ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\r\n  > {\r\n    return productLoad.data$.pipe(\r\n      map(\r\n        (data) =>\r\n          new ProductActions.LoadProductSuccess(\r\n            { code: productLoad.code, ...data },\r\n            productLoad.scope\r\n          )\r\n      ),\r\n      catchError((error) => {\r\n        return of(\r\n          new ProductActions.LoadProductFail(\r\n            productLoad.code,\r\n            makeErrorSerializable(error),\r\n            productLoad.scope\r\n          )\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private productConnector: ProductConnector\r\n  ) {}\r\n}\r\n","import { ProductReferencesEffects } from './product-references.effect';\nimport { ProductReviewsEffects } from './product-reviews.effect';\nimport { ProductsSearchEffects } from './product-search.effect';\nimport { ProductEffects } from './product.effect';\n\nexport const effects: any[] = [\n  ProductsSearchEffects,\n  ProductEffects,\n  ProductReviewsEffects,\n  ProductReferencesEffects,\n];\n\nexport * from './product-references.effect';\nexport * from './product-reviews.effect';\nexport * from './product-search.effect';\nexport * from './product.effect';\n","import { ProductReference } from '../../../model/product.model';\r\nimport { ProductActions } from '../actions/index';\r\nimport { ProductReferencesState } from '../product-state';\r\n\r\nexport const initialState: ProductReferencesState = {\r\n  productCode: '',\r\n  list: [],\r\n};\r\n\r\nexport function reducer(\r\n  state = initialState,\r\n  action: ProductActions.ProductReferencesAction\r\n): ProductReferencesState {\r\n  switch (action.type) {\r\n    case ProductActions.LOAD_PRODUCT_REFERENCES_SUCCESS: {\r\n      const productCode = action.payload.productCode;\r\n      const list = action.payload.list;\r\n\r\n      return {\r\n        ...state,\r\n        list: [...state.list, ...(list ? list : [])].reduce(\r\n          (\r\n            productReferences: ProductReference[],\r\n            productReference: ProductReference\r\n          ) => {\r\n            if (\r\n              !productReferences.some(\r\n                (obj) =>\r\n                  obj.referenceType === productReference.referenceType &&\r\n                  obj.target.code === productReference.target.code\r\n              )\r\n            ) {\r\n              productReferences.push(productReference);\r\n            }\r\n            return productReferences;\r\n          },\r\n          []\r\n        ),\r\n        productCode,\r\n      };\r\n    }\r\n\r\n    case ProductActions.CLEAN_PRODUCT_REFERENCES: {\r\n      return initialState;\r\n    }\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nexport const getProductReferenceList = (\r\n  state: ProductReferencesState\r\n): ProductReference[] => state.list;\r\nexport const getProductReferenceProductCode = (\r\n  state: ProductReferencesState\r\n): string => state.productCode;\r\n","import { Review } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReviewsState } from '../product-state';\n\nexport const initialState: ProductReviewsState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReviewsAction\n): ProductReviewsState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REVIEWS_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        productCode,\n        list,\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getReviewList = (state: ProductReviewsState): Review[] =>\n  state.list;\nexport const getReviewProductCode = (state: ProductReviewsState): string =>\n  state.productCode;\n","import { loaderReducer } from '../loader/loader.reducer';\r\nimport { EntityScopedLoaderAction } from '../../../product/store/actions/product.action';\r\nimport { ScopedLoaderState } from './scoped-loader.state';\r\nimport { Action } from '@ngrx/store';\r\n\r\nexport const initialScopedLoaderState: ScopedLoaderState<any> = {};\r\n\r\n/**\r\n * Higher order reducer designed to add scope support for loader reducer\r\n *\r\n * @param entityType\r\n * @param reducer\r\n */\r\nexport function scopedLoaderReducer<T>(\r\n  entityType: string,\r\n  reducer?: (state: T, action: Action) => T\r\n): (\r\n  state: ScopedLoaderState<T>,\r\n  action: EntityScopedLoaderAction\r\n) => ScopedLoaderState<T> {\r\n  const loader = loaderReducer<T>(entityType, reducer);\r\n\r\n  return (\r\n    state: ScopedLoaderState<T> = initialScopedLoaderState,\r\n    action: EntityScopedLoaderAction\r\n  ): ScopedLoaderState<T> => {\r\n    if (action && action.meta && action.meta.entityType === entityType) {\r\n      return {\r\n        ...state,\r\n        [action.meta.scope ?? '']: loader(state[action.meta.scope], action),\r\n      };\r\n    }\r\n    return state;\r\n  };\r\n}\r\n","import {\r\n  EntityScopedLoaderState,\r\n  ScopedLoaderState,\r\n} from './scoped-loader.state';\r\nimport { scopedLoaderReducer } from './scoped-loader.reducer';\r\n\r\nimport { entityReducer } from '../entity/entity.reducer';\r\nimport { LoaderAction } from '../loader/loader.action';\r\nimport { EntityScopedLoaderActions } from './entity-scoped-loader.actions';\r\n\r\n/**\r\n * Higher order reducer that wraps scopedLoaderReducer and EntityReducer enhancing\r\n * single state reducer to support multiple entities with generic loading flags and scopes\r\n */\r\nexport function entityScopedLoaderReducer<T>(\r\n  entityType: string,\r\n  reducer?: (state: T, action: LoaderAction) => T\r\n): (\r\n  state: EntityScopedLoaderState<T>,\r\n  action: EntityScopedLoaderActions.EntityScopedLoaderAction\r\n) => EntityScopedLoaderState<T> {\r\n  return entityReducer<ScopedLoaderState<T>>(\r\n    entityType,\r\n    scopedLoaderReducer<T>(entityType, reducer)\r\n  );\r\n}\r\n","import { InjectionToken, Provider } from '@angular/core';\r\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\r\nimport { Product } from '../../../model/product.model';\r\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\r\nimport { PRODUCT_DETAIL_ENTITY, ProductsState } from '../product-state';\r\nimport * as fromProductReferences from './product-references.reducer';\r\nimport * as fromProductReviews from './product-reviews.reducer';\r\nimport * as fromProductsSearch from './product-search.reducer';\r\nimport { entityScopedLoaderReducer } from '../../../state/utils/scoped-loader/entity-scoped-loader.reducer';\r\n\r\nexport function getReducers(): ActionReducerMap<ProductsState> {\r\n  return {\r\n    search: fromProductsSearch.reducer,\r\n    details: entityScopedLoaderReducer<Product>(PRODUCT_DETAIL_ENTITY),\r\n    reviews: fromProductReviews.reducer,\r\n    references: fromProductReferences.reducer,\r\n  };\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducerMap<\r\n  ProductsState\r\n>> = new InjectionToken<ActionReducerMap<ProductsState>>('ProductReducers');\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n\r\nexport function clearProductsState(\r\n  reducer: ActionReducer<any>\r\n): ActionReducer<any> {\r\n  return function (state, action) {\r\n    if (\r\n      action.type === SiteContextActions.CURRENCY_CHANGE ||\r\n      action.type === SiteContextActions.LANGUAGE_CHANGE\r\n    ) {\r\n      state = undefined;\r\n    }\r\n    return reducer(state, action);\r\n  };\r\n}\r\n\r\nexport const metaReducers: MetaReducer<any>[] = [clearProductsState];\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { provideDefaultConfigFactory } from '../../config/config.module';\r\nimport {\r\n  StateConfig,\r\n  StateTransferType,\r\n} from '../../state/config/state-config';\r\nimport { effects } from './effects/index';\r\nimport { PRODUCT_FEATURE } from './product-state';\r\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\r\n\r\nexport function productStoreConfigFactory(): StateConfig {\r\n  // if we want to reuse PRODUCT_FEATURE const in config, we have to use factory instead of plain object\r\n  const config: StateConfig = {\r\n    state: {\r\n      ssrTransfer: {\r\n        keys: { [PRODUCT_FEATURE]: StateTransferType.TRANSFER_STATE },\r\n      },\r\n    },\r\n  };\r\n  return config;\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    StoreModule.forFeature(PRODUCT_FEATURE, reducerToken, { metaReducers }),\r\n    EffectsModule.forFeature(effects),\r\n  ],\r\n  providers: [\r\n    provideDefaultConfigFactory(productStoreConfigFactory),\r\n    reducerProvider,\r\n  ],\r\n})\r\nexport class ProductStoreModule {}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\r\nimport { CategoryPageMetaResolver } from './services/category-page-meta.resolver';\r\nimport { CouponSearchPageResolver } from './services/coupon-search-page-meta.resolver';\r\nimport { ProductPageMetaResolver } from './services/product-page-meta.resolver';\r\nimport { SearchPageMetaResolver } from './services/search-page-meta.resolver';\r\nimport { ProductStoreModule } from './store/product-store.module';\r\n\r\nconst pageTitleResolvers = [\r\n  {\r\n    provide: PageMetaResolver,\r\n    useExisting: ProductPageMetaResolver,\r\n    multi: true,\r\n  },\r\n  {\r\n    provide: PageMetaResolver,\r\n    useExisting: CategoryPageMetaResolver,\r\n    multi: true,\r\n  },\r\n  {\r\n    provide: PageMetaResolver,\r\n    useExisting: SearchPageMetaResolver,\r\n    multi: true,\r\n  },\r\n  {\r\n    provide: PageMetaResolver,\r\n    useExisting: CouponSearchPageResolver,\r\n    multi: true,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [ProductStoreModule],\r\n})\r\nexport class ProductModule {\r\n  static forRoot(): ModuleWithProviders<ProductModule> {\r\n    return {\r\n      ngModule: ProductModule,\r\n      providers: [...pageTitleResolvers],\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { SmartEditService } from '../services/smart-edit.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CmsTicketInterceptor implements HttpInterceptor {\n  constructor(private service: SmartEditService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes('/cms/') && this.service.cmsTicketId) {\n      request = request.clone({\n        setParams: {\n          cmsTicketId: this.service.cmsTicketId,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { CmsTicketInterceptor } from './cms-ticket.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CmsTicketInterceptor,\n    multi: true,\n  },\n];\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({})\nexport class SmartEditModule {\n  static forRoot(): ModuleWithProviders<SmartEditModule> {\n    return {\n      ngModule: SmartEditModule,\n      providers: [...interceptors],\n    };\n  }\n}\n","import { NgModuleFactory, StaticProvider, Type } from '@angular/core';\nimport { SERVER_REQUEST_ORIGIN, SERVER_REQUEST_URL } from './ssr.providers';\n\n/**\n * These are the allowed options for the engine\n */\nexport interface NgSetupOptions {\n  bootstrap: Type<{}> | NgModuleFactory<{}>;\n  providers?: StaticProvider[];\n}\n\n/**\n * These are the allowed options for the render\n */\nexport interface RenderOptions extends NgSetupOptions {\n  req: {\n    protocol: string;\n    originalUrl: string;\n    get: (_: string) => string;\n  }; // Request;\n  res?: any; // Response;\n  url?: string;\n  document?: string;\n}\n\nexport type NgExpressEngineInstance = (\n  filePath: string,\n  options: RenderOptions,\n  callback: (err?: Error | null | undefined, html?: string | undefined) => void\n) => void;\n\nexport type NgExpressEngine = (\n  setupOptions: NgSetupOptions\n) => NgExpressEngineInstance;\n\n/**\n * The wrapper over the standard ngExpressEngine, that provides tokens for Spartacus\n * @param ngExpressEngine\n */\nexport class NgExpressEngineDecorator {\n  /**\n   * Returns the higher order ngExpressEngine with provided tokens for Spartacus\n   *\n   * @param ngExpressEngine\n   */\n  static get(ngExpressEngine: NgExpressEngine): NgExpressEngine {\n    const result = function cxNgExpressEngine(\n      setupOptions: NgSetupOptions\n    ): NgExpressEngineInstance {\n      return (filePath, options, callback) => {\n        const engineInstance = ngExpressEngine({\n          ...setupOptions,\n          providers: [\n            ...getServerRequestProviders(options),\n            ...(setupOptions.providers || []),\n          ],\n        });\n        return engineInstance(filePath, options, callback);\n      };\n    };\n    return result;\n  }\n}\n\n/**\n * Returns Spartacus' providers to be passed to the Angular express engine (in SSR)\n *\n * @param options\n */\nexport function getServerRequestProviders(\n  options: RenderOptions\n): StaticProvider[] {\n  return [\n    {\n      provide: SERVER_REQUEST_URL,\n      useValue: getRequestUrl(options.req),\n    },\n    {\n      provide: SERVER_REQUEST_ORIGIN,\n      useValue: getRequestOrigin(options.req),\n    },\n  ];\n}\n\nfunction getRequestUrl(req: any): string {\n  return getRequestOrigin(req) + req.originalUrl;\n}\n\nfunction getRequestOrigin(req: any): string {\n  return req.protocol + '://' + req.get('host');\n}\n","import { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class StoreFinderConfig {\r\n  googleMaps?: {\r\n    apiUrl?: string;\r\n    apiKey?: string;\r\n    scale?: number;\r\n    selectedMarkerScale?: number;\r\n    radius?: number;\r\n  };\r\n}\r\n","import { StateUtils } from '../../state/utils';\r\nimport { StoreEntities } from '../model';\r\n\r\nexport const STORE_FINDER_FEATURE = 'stores';\r\nexport const STORE_FINDER_DATA = '[StoreFinder] Store Finder Data';\r\n\r\nexport interface StateWithStoreFinder {\r\n  [STORE_FINDER_FEATURE]: StoresState;\r\n}\r\n\r\nexport interface StoresState {\r\n  findStores: StateUtils.LoaderState<FindStoresState>;\r\n  viewAllStores: StateUtils.LoaderState<ViewAllStoresState>;\r\n}\r\n\r\nexport interface FindStoresState {\r\n  findStoresEntities: StoreEntities;\r\n}\r\n\r\nexport interface ViewAllStoresState {\r\n  viewAllStoresEntities: StoreEntities;\r\n}\r\n","import { GeoPoint } from '../../../model/misc.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { StoreFinderSearchConfig } from '../../model/search-config';\r\nimport { STORE_FINDER_DATA } from '../store-finder-state';\r\n\r\nexport const FIND_STORES_ON_HOLD = '[StoreFinder] On Hold';\r\nexport const FIND_STORES = '[StoreFinder] Find Stores';\r\nexport const FIND_STORES_FAIL = '[StoreFinder] Find Stores Fail';\r\nexport const FIND_STORES_SUCCESS = '[StoreFinder] Find Stores Success';\r\n\r\nexport const FIND_STORE_BY_ID = '[StoreFinder] Find a Store by Id';\r\nexport const FIND_STORE_BY_ID_FAIL = '[StoreFinder] Find a Store by Id Fail';\r\nexport const FIND_STORE_BY_ID_SUCCESS =\r\n  '[StoreFinder] Find a Store by Id Success';\r\n\r\nexport class FindStoresOnHold extends StateUtils.LoaderLoadAction {\r\n  readonly type = FIND_STORES_ON_HOLD;\r\n  constructor() {\r\n    super(STORE_FINDER_DATA);\r\n  }\r\n}\r\n\r\nexport class FindStores extends StateUtils.LoaderLoadAction {\r\n  readonly type = FIND_STORES;\r\n  constructor(\r\n    public payload: {\r\n      queryText: string;\r\n      searchConfig?: StoreFinderSearchConfig;\r\n      longitudeLatitude?: GeoPoint;\r\n      useMyLocation?: boolean;\r\n      countryIsoCode?: string;\r\n      radius?: number;\r\n    }\r\n  ) {\r\n    super(STORE_FINDER_DATA);\r\n  }\r\n}\r\n\r\nexport class FindStoresFail extends StateUtils.LoaderFailAction {\r\n  readonly type = FIND_STORES_FAIL;\r\n  constructor(public payload: any) {\r\n    super(STORE_FINDER_DATA, payload);\r\n  }\r\n}\r\n\r\nexport class FindStoresSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = FIND_STORES_SUCCESS;\r\n  constructor(public payload: any) {\r\n    super(STORE_FINDER_DATA);\r\n  }\r\n}\r\n\r\nexport class FindStoreById extends StateUtils.LoaderLoadAction {\r\n  readonly type = FIND_STORE_BY_ID;\r\n  constructor(public payload: { storeId: string }) {\r\n    super(STORE_FINDER_DATA);\r\n  }\r\n}\r\n\r\nexport class FindStoreByIdFail extends StateUtils.LoaderFailAction {\r\n  readonly type = FIND_STORE_BY_ID_FAIL;\r\n  constructor(public payload: any) {\r\n    super(STORE_FINDER_DATA, payload);\r\n  }\r\n}\r\n\r\nexport class FindStoreByIdSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = FIND_STORE_BY_ID_SUCCESS;\r\n  constructor(public payload: any) {\r\n    super(STORE_FINDER_DATA);\r\n  }\r\n}\r\n\r\nexport type FindStoresAction =\r\n  | FindStoresOnHold\r\n  | FindStores\r\n  | FindStoresFail\r\n  | FindStoresSuccess\r\n  | FindStoreById\r\n  | FindStoreByIdFail\r\n  | FindStoreByIdSuccess;\r\n","import { StateUtils } from '../../../state/utils/index';\r\nimport { STORE_FINDER_DATA } from '../store-finder-state';\r\n\r\nexport const VIEW_ALL_STORES = '[StoreFinder] View All Stores';\r\nexport const VIEW_ALL_STORES_FAIL = '[StoreFinder] View All Stores Fail';\r\nexport const VIEW_ALL_STORES_SUCCESS = '[StoreFinder] View All Stores Success';\r\n\r\nexport class ViewAllStores extends StateUtils.LoaderLoadAction {\r\n  readonly type = VIEW_ALL_STORES;\r\n  constructor() {\r\n    super(STORE_FINDER_DATA);\r\n  }\r\n}\r\n\r\nexport class ViewAllStoresFail extends StateUtils.LoaderFailAction {\r\n  readonly type = VIEW_ALL_STORES_FAIL;\r\n  constructor(public payload: any) {\r\n    super(STORE_FINDER_DATA, payload);\r\n  }\r\n}\r\n\r\nexport class ViewAllStoresSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = VIEW_ALL_STORES_SUCCESS;\r\n  constructor(public payload: any) {\r\n    super(STORE_FINDER_DATA);\r\n  }\r\n}\r\n\r\nexport type ViewAllStoresAction =\r\n  | ViewAllStores\r\n  | ViewAllStoresFail\r\n  | ViewAllStoresSuccess;\r\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  STORE_FINDER_FEATURE,\n} from '../store-finder-state';\n\nexport const getStoreFinderState: MemoizedSelector<\n  StateWithStoreFinder,\n  StoresState\n> = createFeatureSelector<StoresState>(STORE_FINDER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport {\r\n  FindStoresState,\r\n  StateWithStoreFinder,\r\n  StoresState,\r\n} from '../store-finder-state';\r\nimport { getStoreFinderState } from './feature.selector';\r\n\r\nexport const getFindStoresState: MemoizedSelector<\r\n  StateWithStoreFinder,\r\n  LoaderState<FindStoresState>\r\n> = createSelector(\r\n  getStoreFinderState,\r\n  (storesState: StoresState) => storesState.findStores\r\n);\r\n\r\nexport const getFindStoresEntities: MemoizedSelector<\r\n  StateWithStoreFinder,\r\n  FindStoresState\r\n> = createSelector(getFindStoresState, (state) =>\r\n  StateUtils.loaderValueSelector(state)\r\n);\r\n\r\nexport const getStoresLoading: MemoizedSelector<\r\n  StateWithStoreFinder,\r\n  boolean\r\n> = createSelector(getFindStoresState, (state) =>\r\n  StateUtils.loaderLoadingSelector(state)\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport {\r\n  StateWithStoreFinder,\r\n  StoresState,\r\n  ViewAllStoresState,\r\n} from '../store-finder-state';\r\nimport { getStoreFinderState } from './feature.selector';\r\n\r\nexport const getViewAllStoresState: MemoizedSelector<\r\n  StateWithStoreFinder,\r\n  LoaderState<ViewAllStoresState>\r\n> = createSelector(\r\n  getStoreFinderState,\r\n  (storesState: StoresState) => storesState.viewAllStores\r\n);\r\n\r\nexport const getViewAllStoresEntities: MemoizedSelector<\r\n  StateWithStoreFinder,\r\n  ViewAllStoresState\r\n> = createSelector(getViewAllStoresState, (state) =>\r\n  StateUtils.loaderValueSelector(state)\r\n);\r\n\r\nexport const getViewAllStoresLoading: MemoizedSelector<\r\n  StateWithStoreFinder,\r\n  boolean\r\n> = createSelector(getViewAllStoresState, (state) =>\r\n  StateUtils.loaderLoadingSelector(state)\r\n);\r\n","import { Injectable } from '@angular/core';\r\nimport { Action, select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { GeoPoint } from '../../model/misc.model';\r\nimport { WindowRef } from '../../window/window-ref';\r\nimport { StoreFinderActions } from '../store/actions/index';\r\nimport { StoreFinderSelectors } from '../store/selectors/index';\r\nimport {\r\n  FindStoresState,\r\n  StateWithStoreFinder,\r\n  ViewAllStoresState,\r\n} from '../store/store-finder-state';\r\nimport { StoreFinderSearchConfig } from './../model/search-config';\r\nimport {\r\n  GlobalMessageService,\r\n  GlobalMessageType,\r\n} from '../../global-message/index';\r\nimport { RoutingService } from '../../routing/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class StoreFinderService {\r\n  private geolocationWatchId: number = null;\r\n\r\n  constructor(\r\n    protected store: Store<StateWithStoreFinder>,\r\n    protected winRef: WindowRef,\r\n    protected globalMessageService: GlobalMessageService,\r\n    protected routingService: RoutingService\r\n  ) {}\r\n\r\n  /**\r\n   * Returns boolean observable for store's loading state\r\n   */\r\n  getStoresLoading(): Observable<boolean> {\r\n    return this.store.pipe(select(StoreFinderSelectors.getStoresLoading));\r\n  }\r\n\r\n  /**\r\n   * Returns observable for store's entities\r\n   */\r\n  getFindStoresEntities(): Observable<FindStoresState> {\r\n    return this.store.pipe(select(StoreFinderSelectors.getFindStoresEntities));\r\n  }\r\n\r\n  /**\r\n   * Returns boolean observable for view all store's loading state\r\n   */\r\n  getViewAllStoresLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(StoreFinderSelectors.getViewAllStoresLoading)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns observable for view all store's entities\r\n   */\r\n  getViewAllStoresEntities(): Observable<ViewAllStoresState> {\r\n    return this.store.pipe(\r\n      select(StoreFinderSelectors.getViewAllStoresEntities)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Store finding action functionality\r\n   * @param queryText text query\r\n   * @param searchConfig search configuration\r\n   * @param longitudeLatitude longitude and latitude coordinates\r\n   * @param countryIsoCode country ISO code\r\n   * @param useMyLocation current location coordinates\r\n   * @param radius radius of the scope from the center point\r\n   */\r\n  findStoresAction(\r\n    queryText: string,\r\n    searchConfig?: StoreFinderSearchConfig,\r\n    longitudeLatitude?: GeoPoint,\r\n    countryIsoCode?: string,\r\n    useMyLocation?: boolean,\r\n    radius?: number\r\n  ) {\r\n    if (useMyLocation && this.winRef.nativeWindow) {\r\n      this.clearWatchGeolocation(new StoreFinderActions.FindStoresOnHold());\r\n      this.geolocationWatchId = this.winRef.nativeWindow.navigator.geolocation.watchPosition(\r\n        (pos: Position) => {\r\n          const position: GeoPoint = {\r\n            longitude: pos.coords.longitude,\r\n            latitude: pos.coords.latitude,\r\n          };\r\n\r\n          this.clearWatchGeolocation(\r\n            new StoreFinderActions.FindStores({\r\n              queryText: queryText,\r\n              searchConfig: searchConfig,\r\n              longitudeLatitude: position,\r\n              countryIsoCode: countryIsoCode,\r\n              radius: radius,\r\n            })\r\n          );\r\n        },\r\n        () => {\r\n          this.globalMessageService.add(\r\n            { key: 'storeFinder.geolocationNotEnabled' },\r\n            GlobalMessageType.MSG_TYPE_ERROR\r\n          );\r\n          this.routingService.go(['/store-finder']);\r\n        }\r\n      );\r\n    } else {\r\n      this.clearWatchGeolocation(\r\n        new StoreFinderActions.FindStores({\r\n          queryText: queryText,\r\n          searchConfig: searchConfig,\r\n          longitudeLatitude: longitudeLatitude,\r\n          countryIsoCode: countryIsoCode,\r\n          radius: radius,\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * View all stores\r\n   */\r\n  viewAllStores() {\r\n    this.clearWatchGeolocation(new StoreFinderActions.ViewAllStores());\r\n  }\r\n\r\n  /**\r\n   * View all stores by id\r\n   * @param storeId store id\r\n   */\r\n  viewStoreById(storeId: string) {\r\n    this.clearWatchGeolocation(\r\n      new StoreFinderActions.FindStoreById({ storeId })\r\n    );\r\n  }\r\n\r\n  private clearWatchGeolocation(callbackAction: Action) {\r\n    if (this.geolocationWatchId !== null) {\r\n      this.winRef.nativeWindow.navigator.geolocation.clearWatch(\r\n        this.geolocationWatchId\r\n      );\r\n      this.geolocationWatchId = null;\r\n    }\r\n    this.store.dispatch(callbackAction);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { PointOfService } from '../../model/point-of-service.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class StoreDataService {\r\n  readonly DECIMAL_BASE: 10;\r\n  readonly weekDays = {\r\n    0: 'Sun',\r\n    1: 'Mon',\r\n    2: 'Tue',\r\n    3: 'Wed',\r\n    4: 'Thu',\r\n    5: 'Fri',\r\n    6: 'Sat',\r\n  };\r\n\r\n  /**\r\n   * Returns store latitude\r\n   * @param location store location\r\n   */\r\n  getStoreLatitude(location: PointOfService): number {\r\n    return location.geoPoint.latitude;\r\n  }\r\n\r\n  /**\r\n   * Returns store longitude\r\n   * @param location store location\r\n   */\r\n  getStoreLongitude(location: PointOfService): number {\r\n    return location.geoPoint.longitude;\r\n  }\r\n\r\n  /**\r\n   * Returns store closing time\r\n   * @param location store location\r\n   * @param date date to compare\r\n   */\r\n  getStoreClosingTime(location: PointOfService, date: Date): string {\r\n    const requestedDaySchedule = this.getSchedule(location, date);\r\n\r\n    if (requestedDaySchedule) {\r\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\r\n        return 'closed';\r\n      }\r\n\r\n      if (requestedDaySchedule.closingTime) {\r\n        return requestedDaySchedule.closingTime.formattedHour;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns store opening time\r\n   * @param location store location\r\n   * @param date date to compare\r\n   */\r\n  getStoreOpeningTime(location: PointOfService, date: Date): string {\r\n    const requestedDaySchedule = this.getSchedule(location, date);\r\n\r\n    if (requestedDaySchedule) {\r\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\r\n        return 'closed';\r\n      }\r\n\r\n      if (requestedDaySchedule.openingTime) {\r\n        return requestedDaySchedule.openingTime.formattedHour;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extracts schedule from the given location for the given date\r\n   * @param location location\r\n   * @param date date\r\n   *\r\n   * @returns payload describing the store's schedule for the given day.\r\n   */\r\n  protected getSchedule(location: PointOfService, date: Date): any {\r\n    const weekday = this.weekDays[date.getDay()];\r\n    return location.openingHours.weekDayOpeningList.find(\r\n      (weekDayOpeningListItem) => weekDayOpeningListItem.weekDay === weekday\r\n    );\r\n  }\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ExternalJsFileLoader {\r\n  constructor(@Inject(DOCUMENT) protected document: any) {}\r\n\r\n  /**\r\n   * Loads a javascript from an external URL\r\n   * @param src URL for the script to be loaded\r\n   * @param params additional parameters to be attached to the given URL\r\n   * @param callback a function to be invoked after the script has been loaded\r\n   */\r\n  public load(src: string, params?: Object, callback?: EventListener): void {\r\n    const script = this.document.createElement('script');\r\n    script.type = 'text/javascript';\r\n    if (params) {\r\n      script.src = src + this.parseParams(params);\r\n    } else {\r\n      script.src = src;\r\n    }\r\n\r\n    script.async = true;\r\n    script.defer = true;\r\n    if (callback) {\r\n      script.addEventListener('load', callback);\r\n    }\r\n\r\n    document.head.appendChild(script);\r\n  }\r\n\r\n  /**\r\n   * Parses the given object with parameters to a string \"param1=value1&param2=value2\"\r\n   * @param params object containing parameters\r\n   */\r\n  private parseParams(params: Object): string {\r\n    let result = '';\r\n    const keysArray = Object.keys(params);\r\n    if (keysArray.length > 0) {\r\n      result =\r\n        '?' +\r\n        keysArray\r\n          .map((key) => encodeURI(key) + '=' + encodeURI(params[key]))\r\n          .join('&');\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","/// <reference types=\"@types/googlemaps\" />\r\nimport { ExternalJsFileLoader } from './external-js-file-loader.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { StoreDataService } from '../facade/store-data.service';\r\nimport { StoreFinderConfig } from '../config/store-finder-config';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class GoogleMapRendererService {\r\n  private googleMap: google.maps.Map = null;\r\n  private markers: google.maps.Marker[];\r\n\r\n  constructor(\r\n    protected config: StoreFinderConfig,\r\n    protected externalJsFileLoader: ExternalJsFileLoader,\r\n    protected storeDataService: StoreDataService\r\n  ) {}\r\n\r\n  /**\r\n   * Renders google map on the given element and draws markers on it.\r\n   * If map already exists it will use an existing map otherwise it will create one\r\n   * @param mapElement HTML element inside of which the map will be displayed\r\n   * @param locations array containign geo data to be displayed on the map\r\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\r\n   */\r\n  renderMap(\r\n    mapElement: HTMLElement,\r\n    locations: any[],\r\n    selectMarkerHandler?: Function\r\n  ): void {\r\n    if (this.googleMap === null) {\r\n      this.externalJsFileLoader.load(\r\n        this.config.googleMaps.apiUrl,\r\n        { key: this.config.googleMaps.apiKey },\r\n        () => {\r\n          this.drawMap(mapElement, locations, selectMarkerHandler);\r\n        }\r\n      );\r\n    } else {\r\n      this.drawMap(mapElement, locations, selectMarkerHandler);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Centers the map to the given point\r\n   * @param latitute latitude of the new center\r\n   * @param longitude longitude of the new center\r\n   */\r\n  centerMap(latitute: number, longitude: number): void {\r\n    this.googleMap.panTo({ lat: latitute, lng: longitude });\r\n    this.googleMap.setZoom(this.config.googleMaps.selectedMarkerScale);\r\n  }\r\n\r\n  /**\r\n   * Defines and returns {@link google.maps.LatLng} representing a point where the map will be centered\r\n   * @param locations list of locations\r\n   */\r\n  private defineMapCenter(locations: any[]): google.maps.LatLng {\r\n    return new google.maps.LatLng(\r\n      this.storeDataService.getStoreLatitude(locations[0]),\r\n      this.storeDataService.getStoreLongitude(locations[0])\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Creates google map inside if the given HTML element centered to the given point\r\n   * @param mapElement {@link HTMLElement} inside of which the map will be created\r\n   * @param mapCenter {@link google.maps.LatLng} the point where the map will be centered\r\n   */\r\n  private initMap(\r\n    mapElement: HTMLElement,\r\n    mapCenter: google.maps.LatLng\r\n  ): void {\r\n    type GestureHandlingOptions = 'cooperative' | 'greedy' | 'none' | 'auto';\r\n    const gestureOption: GestureHandlingOptions = 'greedy';\r\n\r\n    const mapProp = {\r\n      center: mapCenter,\r\n      zoom: this.config.googleMaps.scale,\r\n      mapTypeId: google.maps.MapTypeId.ROADMAP,\r\n      gestureHandling: gestureOption,\r\n    };\r\n    this.googleMap = new google.maps.Map(mapElement, mapProp);\r\n  }\r\n\r\n  /**\r\n   * Erases the current map's markers and create a new one based on the given locations\r\n   * @param locations array of locations to be displayed on the map\r\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\r\n   */\r\n  private createMarkers(\r\n    locations: any[],\r\n    selectMarkerHandler?: Function\r\n  ): void {\r\n    this.markers = [];\r\n    locations.forEach((element, index) => {\r\n      const marker = new google.maps.Marker({\r\n        position: new google.maps.LatLng(\r\n          this.storeDataService.getStoreLatitude(element),\r\n          this.storeDataService.getStoreLongitude(element)\r\n        ),\r\n        label: index + 1 + '',\r\n      });\r\n      this.markers.push(marker);\r\n      marker.setMap(this.googleMap);\r\n      marker.addListener('mouseover', function () {\r\n        marker.setAnimation(google.maps.Animation.BOUNCE);\r\n      });\r\n      marker.addListener('mouseout', function () {\r\n        marker.setAnimation(null);\r\n      });\r\n      if (selectMarkerHandler) {\r\n        marker.addListener('click', function () {\r\n          selectMarkerHandler(index);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize and draw the map\r\n   * @param mapElement {@link HTMLElement} inside of which the map will be drawn\r\n   * @param locations array of locations to be displayed on the map\r\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\r\n   */\r\n  private drawMap(\r\n    mapElement: HTMLElement,\r\n    locations: any[],\r\n    selectMarkerHandler: Function\r\n  ) {\r\n    this.initMap(mapElement, this.defineMapCenter(locations));\r\n    this.createMarkers(locations, selectMarkerHandler);\r\n  }\r\n}\r\n","import { StoreFinderConfig } from './store-finder-config';\r\n\r\nexport const defaultStoreFinderConfig: StoreFinderConfig = {\r\n  googleMaps: {\r\n    apiUrl: 'https://maps.googleapis.com/maps/api/js',\r\n    apiKey: '',\r\n    scale: 5,\r\n    selectedMarkerScale: 17,\r\n    radius: 50000,\r\n  },\r\n};\r\n","import { ActionReducerMap, MetaReducer } from '@ngrx/store';\r\n\r\nimport { InjectionToken, Provider } from '@angular/core';\r\nimport { StoresState, STORE_FINDER_DATA } from '../store-finder-state';\r\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\r\n\r\nexport function getReducers(): ActionReducerMap<StoresState> {\r\n  return {\r\n    findStores: loaderReducer(STORE_FINDER_DATA),\r\n    viewAllStores: loaderReducer(STORE_FINDER_DATA),\r\n  };\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducerMap<\r\n  StoresState\r\n>> = new InjectionToken<ActionReducerMap<StoresState>>('StoreFinderReducers');\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n\r\nexport const metaReducers: MetaReducer<any>[] = [];\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\r\nimport { StoreFinderActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class FindStoresEffect {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private storeFinderConnector: StoreFinderConnector\r\n  ) {}\r\n\r\n  @Effect()\r\n  findStores$: Observable<\r\n    StoreFinderActions.FindStoresSuccess | StoreFinderActions.FindStoresFail\r\n  > = this.actions$.pipe(\r\n    ofType(StoreFinderActions.FIND_STORES),\r\n    map((action: StoreFinderActions.FindStores) => action.payload),\r\n    mergeMap((payload) =>\r\n      this.storeFinderConnector\r\n        .search(\r\n          payload.queryText,\r\n          payload.searchConfig,\r\n          payload.longitudeLatitude,\r\n          payload.radius\r\n        )\r\n        .pipe(\r\n          map((data) => {\r\n            if (payload.countryIsoCode) {\r\n              data.stores = data.stores.filter(\r\n                (store) =>\r\n                  store.address.country.isocode === payload.countryIsoCode\r\n              );\r\n              data.stores.sort((a, b) =>\r\n                a.name < b.name ? -1 : a.name > b.name ? 1 : 0\r\n              );\r\n            }\r\n\r\n            return new StoreFinderActions.FindStoresSuccess(data);\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new StoreFinderActions.FindStoresFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  findStoreById$: Observable<\r\n    | StoreFinderActions.FindStoreByIdSuccess\r\n    | StoreFinderActions.FindStoreByIdFail\r\n  > = this.actions$.pipe(\r\n    ofType(StoreFinderActions.FIND_STORE_BY_ID),\r\n    map((action: StoreFinderActions.FindStoreById) => action.payload),\r\n    switchMap((payload) =>\r\n      this.storeFinderConnector.get(payload.storeId).pipe(\r\n        map((data) => new StoreFinderActions.FindStoreByIdSuccess(data)),\r\n        catchError((error) =>\r\n          of(\r\n            new StoreFinderActions.FindStoreByIdFail(\r\n              makeErrorSerializable(error)\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\r\nimport { StoreFinderActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class ViewAllStoresEffect {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private storeFinderConnector: StoreFinderConnector\r\n  ) {}\r\n\r\n  @Effect()\r\n  viewAllStores$: Observable<\r\n    | StoreFinderActions.ViewAllStoresSuccess\r\n    | StoreFinderActions.ViewAllStoresFail\r\n  > = this.actions$.pipe(\r\n    ofType(StoreFinderActions.VIEW_ALL_STORES),\r\n    switchMap(() => {\r\n      return this.storeFinderConnector.getCounts().pipe(\r\n        map((data) => {\r\n          data.sort((a, b) => (a.name < b.name ? -1 : a.name > b.name ? 1 : 0));\r\n          return new StoreFinderActions.ViewAllStoresSuccess(data);\r\n        }),\r\n        catchError((error) =>\r\n          of(\r\n            new StoreFinderActions.ViewAllStoresFail(\r\n              makeErrorSerializable(error)\r\n            )\r\n          )\r\n        )\r\n      );\r\n    })\r\n  );\r\n}\r\n","import { FindStoresEffect } from './find-stores.effect';\nimport { ViewAllStoresEffect } from './view-all-stores.effect';\n\nexport const effects: any[] = [FindStoresEffect, ViewAllStoresEffect];\n\nexport * from './find-stores.effect';\nexport * from './view-all-stores.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { STORE_FINDER_FEATURE } from './store-finder-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(STORE_FINDER_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class StoreFinderStoreModule {}\n","import { NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '../config/config.module';\r\nimport { defaultStoreFinderConfig } from './config/default-store-finder-config';\r\nimport { StoreFinderStoreModule } from './store/store-finder-store.module';\r\n\r\n@NgModule({\r\n  imports: [StoreFinderStoreModule],\r\n  providers: [provideDefaultConfig(defaultStoreFinderConfig)],\r\n})\r\nexport class StoreFinderCoreModule {}\r\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport { UserAdapter } from './user.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConnector {\n  constructor(protected adapter: UserAdapter) {}\n\n  get(userId: string): Observable<User> {\n    return this.adapter.load(userId);\n  }\n\n  update(username: string, user: User): Observable<{}> {\n    return this.adapter.update(username, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    return this.adapter.register(user);\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    return this.adapter.registerGuest(guid, password);\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    return this.adapter.requestForgotPasswordEmail(userEmailAddress);\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    return this.adapter.resetPassword(token, newPassword);\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    return this.adapter.updateEmail(userId, currentPassword, newUserId);\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    return this.adapter.updatePassword(userId, oldPassword, newPassword);\n  }\n\n  remove(userId: string): Observable<{}> {\n    return this.adapter.remove(userId);\n  }\n\n  getTitles(): Observable<Title[]> {\n    return this.adapter.loadTitles();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserConsentAdapter } from './user-consent.adapter';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentConnector {\n  constructor(protected adapter: UserConsentAdapter) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    return this.adapter.loadConsents(userId);\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    return this.adapter.giveConsent(\n      userId,\n      consentTemplateId,\n      consentTemplateVersion\n    );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    return this.adapter.withdrawConsent(userId, consentCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserPaymentAdapter } from './user-payment.adapter';\nimport { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentConnector {\n  constructor(protected adapter: UserPaymentAdapter) {}\n\n  getAll(userId: string): Observable<PaymentDetails[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.delete(userId, paymentMethodID);\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.setDefault(userId, paymentMethodID);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport { UserOrderAdapter } from './user-order.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderConnector {\n  constructor(protected adapter: UserOrderAdapter) {}\n\n  public get(userId: string, orderCode: string): Observable<Order> {\n    return this.adapter.load(userId, orderCode);\n  }\n\n  public getHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    return this.adapter.loadHistory(userId, pageSize, currentPage, sort);\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking> {\n    return this.adapter.getConsignmentTracking(\n      orderCode,\n      consignmentCode,\n      userId\n    );\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    return this.adapter.cancel(userId, orderCode, cancelRequestInput);\n  }\n\n  public return(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    return this.adapter.createReturnRequest(userId, returnRequestInput);\n  }\n\n  public getReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    return this.adapter.loadReturnRequestDetail(userId, returnRequestCode);\n  }\n\n  public getReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    return this.adapter.loadReturnRequestList(\n      userId,\n      pageSize,\n      currentPage,\n      sort\n    );\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    return this.adapter.cancelReturnRequest(\n      userId,\n      returnRequestCode,\n      returnRequestModification\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport { CustomerCouponAdapter } from './customer-coupon.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponConnector {\n  constructor(protected adapter: CustomerCouponAdapter) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    return this.adapter.getCustomerCoupons(userId, pageSize, currentPage, sort);\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    return this.adapter.turnOnNotification(userId, couponCode);\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    return this.adapter.turnOffNotification(userId, couponCode);\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    return this.adapter.claimCustomerCoupon(userId, couponCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserInterestsAdapter } from './user-interests.adapter';\nimport { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsConnector {\n  constructor(protected adapter: UserInterestsAdapter) {}\n  getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    return this.adapter.getInterests(\n      userId,\n      pageSize,\n      currentPage,\n      sort,\n      productCode,\n      notificationType\n    );\n  }\n\n  removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    return this.adapter.removeInterest(userId, item);\n  }\n\n  addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    return this.adapter.addInterest(userId, productCode, notificationType);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { merge, Observable } from 'rxjs';\r\nimport { distinctUntilChanged, map } from 'rxjs/operators';\r\nimport { AnonymousConsentsService } from '../../anonymous-consents/index';\r\nimport { AnonymousConsent, Consent } from '../../model/index';\r\nimport { UserConsentService } from './user-consent.service';\r\n\r\n/**\r\n * Unified facade for both anonymous and registered user consents.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class ConsentService {\r\n  constructor(\r\n    protected anonymousConsentsService: AnonymousConsentsService,\r\n    protected userConsentService: UserConsentService\r\n  ) {}\r\n\r\n  /**\r\n   * Returns either anonymous consent or registered consent as they are emmited.\r\n   * @param templateCode for which to return either anonymous or registered consent.\r\n   */\r\n  getConsent(templateCode: string): Observable<AnonymousConsent | Consent> {\r\n    return merge(\r\n      this.userConsentService.getConsent(templateCode),\r\n      this.anonymousConsentsService.getConsent(templateCode)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Checks if the `templateId`'s template has a given consent.\r\n   * The method returns `false` if the consent doesn't exist or if it's withdrawn. Otherwise, `true` is returned.\r\n   *\r\n   * @param templateId of a template which's consent should be checked\r\n   */\r\n  checkConsentGivenByTemplateId(templateId: string): Observable<boolean> {\r\n    return this.getConsent(templateId).pipe(\r\n      map((consent) => {\r\n        if (!consent) {\r\n          return false;\r\n        }\r\n\r\n        return this.isAnonymousConsentType(consent)\r\n          ? this.anonymousConsentsService.isConsentGiven(consent)\r\n          : this.userConsentService.isConsentGiven(consent);\r\n      }),\r\n      distinctUntilChanged()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Checks if the `templateId`'s template has a withdrawn consent.\r\n   * The method returns `true` if the consent doesn't exist or if it's withdrawn. Otherwise, `false` is returned.\r\n   *\r\n   * @param templateId of a template which's consent should be checked\r\n   */\r\n  checkConsentWithdrawnByTemplateId(templateId: string): Observable<boolean> {\r\n    return this.getConsent(templateId).pipe(\r\n      map((consent) => {\r\n        if (!consent) {\r\n          return true;\r\n        }\r\n\r\n        return this.isAnonymousConsentType(consent)\r\n          ? this.anonymousConsentsService.isConsentWithdrawn(consent)\r\n          : this.userConsentService.isConsentWithdrawn(consent);\r\n      }),\r\n      distinctUntilChanged()\r\n    );\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentGiven(consent)` or `this.userConsentService.isConsentGiven`\r\n   *\r\n   * @param consent a consent to check\r\n   */\r\n  isConsentGiven(consent: AnonymousConsent | Consent): boolean {\r\n    return this.isAnonymousConsentType(consent)\r\n      ? this.anonymousConsentsService.isConsentGiven(consent)\r\n      : this.userConsentService.isConsentGiven(consent);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentWithdrawn(consent)` or `this.userConsentService.isConsentWithdrawn`\r\n   *\r\n   * @param consent a consent to check\r\n   */\r\n  isConsentWithdrawn(consent: AnonymousConsent | Consent): boolean {\r\n    return this.isAnonymousConsentType(consent)\r\n      ? this.anonymousConsentsService.isConsentWithdrawn(consent)\r\n      : this.userConsentService.isConsentWithdrawn(consent);\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the provided consent is of type `AnonymousConsent`. Otherwise, `false` is returned.\r\n   */\r\n  isAnonymousConsentType(\r\n    consent: AnonymousConsent | Consent\r\n  ): consent is AnonymousConsent {\r\n    if (!consent) {\r\n      return false;\r\n    }\r\n\r\n    return (consent as AnonymousConsent).templateCode !== undefined;\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the provided consent is of type `Consent`. Otherwise, `false` is returned.\r\n   */\r\n  isConsentType(consent: AnonymousConsent | Consent): consent is Consent {\r\n    if (!consent) {\r\n      return false;\r\n    }\r\n\r\n    return (consent as Consent).code !== undefined;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { Address, Country, Region } from '../../model/address.model';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport { UserActions } from '../store/actions/index';\r\nimport { UsersSelectors } from '../store/selectors/index';\r\nimport { StateWithUser } from '../store/user-state';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserAddressService {\r\n  constructor(\r\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\r\n    protected authService: AuthService\r\n  ) {}\r\n\r\n  /**\r\n   * Retrieves user's addresses\r\n   */\r\n  loadAddresses(): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(new UserActions.LoadUserAddresses(userId));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds user address\r\n   * @param address a user address\r\n   */\r\n  addUserAddress(address: Address): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.AddUserAddress({\r\n          userId,\r\n          address,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets user address as default\r\n   * @param addressId a user address ID\r\n   */\r\n  setAddressAsDefault(addressId: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.UpdateUserAddress({\r\n          userId,\r\n          addressId,\r\n          address: { defaultAddress: true },\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates existing user address\r\n   * @param addressId a user address ID\r\n   * @param address a user address\r\n   */\r\n  updateUserAddress(addressId: string, address: Address): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.UpdateUserAddress({\r\n          userId,\r\n          addressId,\r\n          address,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Deletes existing user address\r\n   * @param addressId a user address ID\r\n   */\r\n  deleteUserAddress(addressId: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.DeleteUserAddress({\r\n          userId,\r\n          addressId,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns addresses\r\n   */\r\n  getAddresses(): Observable<Address[]> {\r\n    return this.store.pipe(select(UsersSelectors.getAddresses));\r\n  }\r\n\r\n  /**\r\n   * Returns a loading flag for addresses\r\n   */\r\n  getAddressesLoading(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getAddressesLoading));\r\n  }\r\n\r\n  getAddressesLoadedSuccess(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getAddressesLoadedSuccess));\r\n  }\r\n  /**\r\n   * Retrieves delivery countries\r\n   */\r\n  loadDeliveryCountries(): void {\r\n    this.store.dispatch(new UserActions.LoadDeliveryCountries());\r\n  }\r\n\r\n  /**\r\n   * Returns all delivery countries\r\n   */\r\n  getDeliveryCountries(): Observable<Country[]> {\r\n    return this.store.pipe(select(UsersSelectors.getAllDeliveryCountries));\r\n  }\r\n\r\n  /**\r\n   * Returns a country based on the provided `isocode`\r\n   * @param isocode an isocode for a country\r\n   */\r\n  getCountry(isocode: string): Observable<Country> {\r\n    return this.store.pipe(\r\n      select(UsersSelectors.countrySelectorFactory(isocode))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Retrieves regions for specified country by `countryIsoCode`\r\n   * @param countryIsoCode\r\n   */\r\n  loadRegions(countryIsoCode: string): void {\r\n    this.store.dispatch(new UserActions.LoadRegions(countryIsoCode));\r\n  }\r\n\r\n  /**\r\n   * Clear regions in store - useful when changing country\r\n   */\r\n  clearRegions(): void {\r\n    this.store.dispatch(new UserActions.ClearRegions());\r\n  }\r\n\r\n  /**\r\n   * Returns all regions\r\n   */\r\n  getRegions(countryIsoCode: string): Observable<Region[]> {\r\n    return this.store.pipe(\r\n      select(UsersSelectors.getRegionsDataAndLoading),\r\n      map(({ regions, country, loading, loaded }) => {\r\n        if (!countryIsoCode && (loading || loaded)) {\r\n          this.clearRegions();\r\n          return [];\r\n        } else if (loading && !loaded) {\r\n          // don't interrupt loading\r\n          return [];\r\n        } else if (!loading && countryIsoCode !== country && countryIsoCode) {\r\n          // country changed - clear store and load new regions\r\n          if (country) {\r\n            this.clearRegions();\r\n          }\r\n          this.loadRegions(countryIsoCode);\r\n          return [];\r\n        }\r\n        return regions;\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\r\nimport {\r\n  CancellationRequestEntryInputList,\r\n  Order,\r\n  OrderHistoryList,\r\n} from '../../model/order.model';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport {\r\n  getProcessLoadingFactory,\r\n  getProcessSuccessFactory,\r\n} from '../../process/store/selectors/process.selectors';\r\nimport { UserActions } from '../store/actions/index';\r\nimport { UsersSelectors } from '../store/selectors/index';\r\nimport { CANCEL_ORDER_PROCESS_ID, StateWithUser } from '../store/user-state';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserOrderService {\r\n  constructor(\r\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\r\n    protected authService: AuthService\r\n  ) {}\r\n\r\n  /**\r\n   * Returns an order's detail\r\n   */\r\n  getOrderDetails(): Observable<Order> {\r\n    return this.store.pipe(select(UsersSelectors.getOrderDetails));\r\n  }\r\n\r\n  /**\r\n   * Retrieves order's details\r\n   *\r\n   * @param orderCode an order code\r\n   */\r\n  loadOrderDetails(orderCode: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.LoadOrderDetails({\r\n          userId,\r\n          orderCode,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clears order's details\r\n   */\r\n  clearOrderDetails(): void {\r\n    this.store.dispatch(new UserActions.ClearOrderDetails());\r\n  }\r\n\r\n  /**\r\n   * Returns order history list\r\n   */\r\n  getOrderHistoryList(pageSize: number): Observable<OrderHistoryList> {\r\n    return this.store.pipe(\r\n      select(UsersSelectors.getOrdersState),\r\n      tap((orderListState) => {\r\n        const attemptedLoad =\r\n          orderListState.loading ||\r\n          orderListState.success ||\r\n          orderListState.error;\r\n        if (!attemptedLoad) {\r\n          this.loadOrderList(pageSize);\r\n        }\r\n      }),\r\n      map((orderListState) => orderListState.value)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a loaded flag for order history list\r\n   */\r\n  getOrderHistoryListLoaded(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getOrdersLoaded));\r\n  }\r\n\r\n  /**\r\n   * Retrieves an order list\r\n   * @param pageSize page size\r\n   * @param currentPage current page\r\n   * @param sort sort\r\n   */\r\n  loadOrderList(pageSize: number, currentPage?: number, sort?: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.LoadUserOrders({\r\n          userId,\r\n          pageSize,\r\n          currentPage,\r\n          sort,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Cleaning order list\r\n   */\r\n  clearOrderList(): void {\r\n    this.store.dispatch(new UserActions.ClearUserOrders());\r\n  }\r\n\r\n  /**\r\n   *  Returns a consignment tracking detail\r\n   */\r\n  getConsignmentTracking(): Observable<ConsignmentTracking> {\r\n    return this.store.pipe(select(UsersSelectors.getConsignmentTracking));\r\n  }\r\n\r\n  /**\r\n   * Retrieves consignment tracking details\r\n   * @param orderCode an order code\r\n   * @param consignmentCode a consignment code\r\n   */\r\n  loadConsignmentTracking(orderCode: string, consignmentCode: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.LoadConsignmentTracking({\r\n          userId,\r\n          orderCode,\r\n          consignmentCode,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Cleaning consignment tracking\r\n   */\r\n  clearConsignmentTracking(): void {\r\n    this.store.dispatch(new UserActions.ClearConsignmentTracking());\r\n  }\r\n\r\n  /*\r\n   * Cancel an order\r\n   */\r\n  cancelOrder(\r\n    orderCode: string,\r\n    cancelRequestInput: CancellationRequestEntryInputList\r\n  ): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.CancelOrder({\r\n          userId,\r\n          orderCode,\r\n          cancelRequestInput,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the cancel order loading flag\r\n   */\r\n  getCancelOrderLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(CANCEL_ORDER_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the cancel order success flag\r\n   */\r\n  getCancelOrderSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(CANCEL_ORDER_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resets the cancel order process flags\r\n   */\r\n  resetCancelOrderProcessState(): void {\r\n    return this.store.dispatch(new UserActions.ResetCancelOrderProcess());\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { filter, map, tap } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport {\r\n  getProcessErrorFactory,\r\n  getProcessLoadingFactory,\r\n  getProcessSuccessFactory,\r\n} from '../../process/store/selectors/process.selectors';\r\nimport { UserActions } from '../store/actions/index';\r\nimport { UsersSelectors } from '../store/selectors/index';\r\nimport {\r\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\r\n  StateWithUser,\r\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\r\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\r\n} from '../store/user-state';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CustomerCouponService {\r\n  constructor(\r\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\r\n    protected authService: AuthService\r\n  ) {}\r\n\r\n  /**\r\n   * Retrieves customer's coupons\r\n   * @param pageSize page size\r\n   * @param currentPage current page\r\n   * @param sort sort\r\n   */\r\n  loadCustomerCoupons(\r\n    pageSize: number,\r\n    currentPage?: number,\r\n    sort?: string\r\n  ): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.LoadCustomerCoupons({\r\n          userId,\r\n          pageSize: pageSize,\r\n          currentPage: currentPage,\r\n          sort: sort,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns customer coupon search result\r\n   * @param pageSize page size\r\n   */\r\n  getCustomerCoupons(pageSize: number): Observable<CustomerCouponSearchResult> {\r\n    return combineLatest([\r\n      this.store.pipe(select(UsersSelectors.getCustomerCouponsState)),\r\n      this.getClaimCustomerCouponResultLoading(),\r\n    ]).pipe(\r\n      filter(([, loading]) => !loading),\r\n      tap(([customerCouponsState]) => {\r\n        const attemptedLoad =\r\n          customerCouponsState.loading ||\r\n          customerCouponsState.success ||\r\n          customerCouponsState.error;\r\n        if (!attemptedLoad) {\r\n          this.loadCustomerCoupons(pageSize);\r\n        }\r\n      }),\r\n      map(([customerCouponsState]) => customerCouponsState.value)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a loaded flag for customer coupons\r\n   */\r\n  getCustomerCouponsLoaded(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoaded));\r\n  }\r\n\r\n  /**\r\n   * Returns a loading flag for customer coupons\r\n   */\r\n  getCustomerCouponsLoading(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoading));\r\n  }\r\n\r\n  /**\r\n   * Subscribe a CustomerCoupon Notification\r\n   * @param couponCode a customer coupon code\r\n   */\r\n  subscribeCustomerCoupon(couponCode: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.SubscribeCustomerCoupon({\r\n          userId,\r\n          couponCode: couponCode,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the subscribe customer coupon notification process loading flag\r\n   */\r\n  getSubscribeCustomerCouponResultLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the subscribe customer coupon notification process success flag\r\n   */\r\n  getSubscribeCustomerCouponResultSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the subscribe customer coupon notification process error flag\r\n   */\r\n  getSubscribeCustomerCouponResultError(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessErrorFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe a CustomerCoupon Notification\r\n   * @param couponCode a customer coupon code\r\n   */\r\n  unsubscribeCustomerCoupon(couponCode: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.UnsubscribeCustomerCoupon({\r\n          userId,\r\n          couponCode: couponCode,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the unsubscribe customer coupon notification process loading flag\r\n   */\r\n  getUnsubscribeCustomerCouponResultLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the unsubscribe customer coupon notification process success flag\r\n   */\r\n  getUnsubscribeCustomerCouponResultSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the unsubscribe customer coupon notification process error flag\r\n   */\r\n  getUnsubscribeCustomerCouponResultError(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessErrorFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Claim a CustomerCoupon\r\n   * @param couponCode a customer coupon code\r\n   */\r\n  claimCustomerCoupon(couponCode: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.ClaimCustomerCoupon({\r\n          userId,\r\n          couponCode,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the claim customer coupon notification process success flag\r\n   */\r\n  getClaimCustomerCouponResultSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the claim customer coupon notification process loading flag\r\n   */\r\n  getClaimCustomerCouponResultLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { Country } from '../../model/address.model';\r\nimport { PaymentDetails } from '../../model/cart.model';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport { UserActions } from '../store/actions/index';\r\nimport { UsersSelectors } from '../store/selectors/index';\r\nimport { StateWithUser } from '../store/user-state';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserPaymentService {\r\n  constructor(\r\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\r\n    protected authService: AuthService\r\n  ) {}\r\n\r\n  /**\r\n   * Loads all user's payment methods.\r\n   */\r\n  loadPaymentMethods(): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(new UserActions.LoadUserPaymentMethods(userId));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns all user's payment methods\r\n   */\r\n  getPaymentMethods(): Observable<PaymentDetails[]> {\r\n    return this.store.pipe(select(UsersSelectors.getPaymentMethods));\r\n  }\r\n\r\n  /**\r\n   * Returns a loading flag for payment methods\r\n   */\r\n  getPaymentMethodsLoading(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getPaymentMethodsLoading));\r\n  }\r\n\r\n  getPaymentMethodsLoadedSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(UsersSelectors.getPaymentMethodsLoadedSuccess)\r\n    );\r\n  }\r\n  /**\r\n   * Sets the payment as a default one\r\n   * @param paymentMethodId a payment method ID\r\n   */\r\n  setPaymentMethodAsDefault(paymentMethodId: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.SetDefaultUserPaymentMethod({\r\n          userId,\r\n          paymentMethodId,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Deletes the payment method\r\n   *\r\n   * @param paymentMethodId a payment method ID\r\n   */\r\n  deletePaymentMethod(paymentMethodId: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.DeleteUserPaymentMethod({\r\n          userId,\r\n          paymentMethodId,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns all billing countries\r\n   */\r\n  getAllBillingCountries(): Observable<Country[]> {\r\n    return this.store.pipe(select(UsersSelectors.getAllBillingCountries));\r\n  }\r\n\r\n  /**\r\n   * Retrieves billing countries\r\n   */\r\n  loadBillingCountries(): void {\r\n    this.store.dispatch(new UserActions.LoadBillingCountries());\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport {\r\n  ReturnRequest,\r\n  ReturnRequestEntryInputList,\r\n  ReturnRequestList,\r\n  ReturnRequestModification,\r\n} from '../../model/order.model';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport {\r\n  getProcessLoadingFactory,\r\n  getProcessSuccessFactory,\r\n} from '../../process/store/selectors/process.selectors';\r\nimport { UserActions } from '../store/actions/index';\r\nimport { UsersSelectors } from '../store/selectors/index';\r\nimport { CANCEL_RETURN_PROCESS_ID, StateWithUser } from '../store/user-state';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OrderReturnRequestService {\r\n  constructor(\r\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\r\n    protected authService: AuthService\r\n  ) {}\r\n\r\n  /**\r\n   * Create order return request\r\n   * @param orderCode an order code\r\n   * @param returnRequestInput order return request entry input\r\n   */\r\n  createOrderReturnRequest(\r\n    returnRequestInput: ReturnRequestEntryInputList\r\n  ): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.CreateOrderReturnRequest({\r\n          userId,\r\n          returnRequestInput,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return an order return request\r\n   */\r\n  getOrderReturnRequest(): Observable<ReturnRequest> {\r\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequest));\r\n  }\r\n\r\n  /**\r\n   * Gets order return request list\r\n   */\r\n  getOrderReturnRequestList(pageSize: number): Observable<ReturnRequestList> {\r\n    return this.store.pipe(\r\n      select(UsersSelectors.getOrderReturnRequestListState),\r\n      tap((returnListState) => {\r\n        const attemptedLoad =\r\n          returnListState.loading ||\r\n          returnListState.success ||\r\n          returnListState.error;\r\n        if (!attemptedLoad) {\r\n          this.loadOrderReturnRequestList(pageSize);\r\n        }\r\n      }),\r\n      map((returnListState) => returnListState.value)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Loads order return request detail\r\n   * @param returnRequestCode\r\n   */\r\n  loadOrderReturnRequestDetail(returnRequestCode: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.LoadOrderReturnRequest({\r\n          userId,\r\n          returnRequestCode,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Loads order return request list\r\n   * @param pageSize page size\r\n   * @param currentPage current page\r\n   * @param sort sort\r\n   */\r\n  loadOrderReturnRequestList(\r\n    pageSize: number,\r\n    currentPage?: number,\r\n    sort?: string\r\n  ): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.LoadOrderReturnRequestList({\r\n          userId,\r\n          pageSize,\r\n          currentPage,\r\n          sort,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Cleaning order return request list\r\n   */\r\n  clearOrderReturnRequestList(): void {\r\n    this.store.dispatch(new UserActions.ClearOrderReturnRequestList());\r\n  }\r\n\r\n  /**\r\n   * Get the order return request loading flag\r\n   */\r\n  getReturnRequestLoading(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestLoading));\r\n  }\r\n\r\n  /**\r\n   * Get the order return request success flag\r\n   */\r\n  getReturnRequestSuccess(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestSuccess));\r\n  }\r\n\r\n  /**\r\n   * Cleaning order return request details\r\n   */\r\n  clearOrderReturnRequestDetail(): void {\r\n    this.store.dispatch(new UserActions.ClearOrderReturnRequest());\r\n  }\r\n\r\n  /*\r\n   * Cancel order return request\r\n   */\r\n  cancelOrderReturnRequest(\r\n    returnRequestCode: string,\r\n    returnRequestModification: ReturnRequestModification\r\n  ): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.CancelOrderReturnRequest({\r\n          userId,\r\n          returnRequestCode,\r\n          returnRequestModification,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the cancel return request loading flag\r\n   */\r\n  getCancelReturnRequestLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(CANCEL_RETURN_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the cancel return request success flag\r\n   */\r\n  getCancelReturnRequestSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(CANCEL_RETURN_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resets the cancel return request process flags\r\n   */\r\n  resetCancelReturnRequestProcessState(): void {\r\n    return this.store.dispatch(new UserActions.ResetCancelReturnProcess());\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { NotificationPreference } from '../../model/notification-preference.model';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport { getProcessLoadingFactory } from '../../process/store/selectors/process.selectors';\r\nimport { UserActions } from '../store/actions/index';\r\nimport { UsersSelectors } from '../store/selectors/index';\r\nimport {\r\n  StateWithUser,\r\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\r\n} from '../store/user-state';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserNotificationPreferenceService {\r\n  constructor(\r\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\r\n    protected authService: AuthService\r\n  ) {}\r\n\r\n  /**\r\n   * Returns all notification preferences.\r\n   */\r\n  getPreferences(): Observable<NotificationPreference[]> {\r\n    return this.store.pipe(select(UsersSelectors.getPreferences));\r\n  }\r\n\r\n  /**\r\n   * Returns all enabled notification preferences.\r\n   */\r\n  getEnabledPreferences(): Observable<NotificationPreference[]> {\r\n    return this.store.pipe(select(UsersSelectors.getEnabledPreferences));\r\n  }\r\n\r\n  /**\r\n   * Loads all notification preferences.\r\n   */\r\n  loadPreferences(): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(new UserActions.LoadNotificationPreferences(userId));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear all notification preferences.\r\n   */\r\n  clearPreferences(): void {\r\n    this.store.dispatch(new UserActions.ClearNotificationPreferences());\r\n  }\r\n\r\n  /**\r\n   * Returns a loading flag for notification preferences.\r\n   */\r\n  getPreferencesLoading(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getPreferencesLoading));\r\n  }\r\n\r\n  /**\r\n   * Updating notification preferences.\r\n   * @param preferences a preference list\r\n   */\r\n  updatePreferences(preferences: NotificationPreference[]): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.UpdateNotificationPreferences({\r\n          userId,\r\n          preferences: preferences,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns a loading flag for updating preferences.\r\n   */\r\n  getUpdatePreferencesResultLoading(): Observable<boolean> {\r\n    return this.store.select(\r\n      getProcessLoadingFactory(UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resets the update notification preferences process state. The state needs to be\r\n   * reset after the process concludes, regardless if it's a success or an error.\r\n   */\r\n  resetNotificationPreferences(): void {\r\n    this.store.dispatch(new UserActions.ResetNotificationPreferences());\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport {\r\n  NotificationType,\r\n  ProductInterestEntryRelation,\r\n  ProductInterestSearchResult,\r\n} from '../../model/product-interest.model';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport {\r\n  getProcessErrorFactory,\r\n  getProcessLoadingFactory,\r\n  getProcessSuccessFactory,\r\n} from '../../process/store/selectors/process.selectors';\r\nimport { UserActions } from '../store/actions/index';\r\nimport { UsersSelectors } from '../store/selectors/index';\r\nimport {\r\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\r\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\r\n  StateWithUser,\r\n} from '../store/user-state';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserInterestsService {\r\n  constructor(\r\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\r\n    protected authService: AuthService\r\n  ) {}\r\n\r\n  /**\r\n   * Retrieves an product interest list\r\n   * @param pageSize page size\r\n   * @param currentPage current page\r\n   * @param sort sort\r\n   */\r\n  loadProductInterests(\r\n    pageSize?: number,\r\n    currentPage?: number,\r\n    sort?: string,\r\n    productCode?: string,\r\n    notificationType?: NotificationType\r\n  ): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.LoadProductInterests({\r\n          userId,\r\n          pageSize: pageSize,\r\n          currentPage: currentPage,\r\n          sort: sort,\r\n          productCode: productCode,\r\n          notificationType: notificationType,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns product interests\r\n   */\r\n  getProductInterests(): Observable<ProductInterestSearchResult> {\r\n    return this.store.pipe(select(UsersSelectors.getInterests));\r\n  }\r\n\r\n  /**\r\n   * Returns product interests\r\n   * @param pageSize the page size\r\n   */\r\n  getAndLoadProductInterests(\r\n    pageSize?: number\r\n  ): Observable<ProductInterestSearchResult> {\r\n    return this.store.pipe(\r\n      select(UsersSelectors.getInterestsState),\r\n      tap((interestListState) => {\r\n        const attemptedLoad =\r\n          interestListState.loading ||\r\n          interestListState.success ||\r\n          interestListState.error;\r\n        if (!attemptedLoad) {\r\n          this.loadProductInterests(pageSize);\r\n        }\r\n      }),\r\n      map((interestListState) => interestListState.value)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a loading flag for product interests\r\n   */\r\n  getProdutInterestsLoading(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getInterestsLoading));\r\n  }\r\n\r\n  /**\r\n   * Removes a ProductInterestRelation\r\n   * @param item product interest relation item\r\n   * @param singleDelete flag to delete only one interest\r\n   */\r\n  removeProdutInterest(\r\n    item: ProductInterestEntryRelation,\r\n    singleDelete?: boolean\r\n  ): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.RemoveProductInterest({\r\n          userId,\r\n          item: item,\r\n          singleDelete: singleDelete,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns a loading flag for removing product interests.\r\n   */\r\n  getRemoveProdutInterestLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a success flag for removing a product interests.\r\n   */\r\n  getRemoveProdutInterestSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Add a new product interest.\r\n   *\r\n   * @param productCode the product code\r\n   * @param notificationType the notification type\r\n   */\r\n  addProductInterest(\r\n    productCode: string,\r\n    notificationType: NotificationType\r\n  ): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.AddProductInterest({\r\n          userId,\r\n          productCode: productCode,\r\n          notificationType: notificationType,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns a success flag for adding a product interest.\r\n   */\r\n  getAddProductInterestSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a error flag for adding a product interest.\r\n   */\r\n  getAddProductInterestError(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessErrorFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Reset product interest adding state.\r\n   */\r\n  resetAddInterestState(): void {\r\n    this.store.dispatch(new UserActions.ResetAddInterestState());\r\n  }\r\n\r\n  /**\r\n   * Reset product interest removing state.\r\n   */\r\n  resetRemoveInterestState(): void {\r\n    this.store.dispatch(new UserActions.ResetRemoveInterestState());\r\n  }\r\n\r\n  /**\r\n   * Clears product interests\r\n   */\r\n  clearProductInterests(): void {\r\n    this.store.dispatch(new UserActions.ClearProductInterests());\r\n  }\r\n}\r\n","import { UserActions } from '../actions/index';\nimport { BillingCountriesState } from '../user-state';\n\nexport const initialState: BillingCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.BillingCountriesAction | UserActions.ClearUserMiscsData\n): BillingCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_BILLING_COUNTRIES_SUCCESS: {\n      const billingCountries = action.payload;\n      const entities = billingCountries.reduce(\n        (countryEntities: { [isocode: string]: any }, name: any) => {\n          return {\n            ...countryEntities,\n            [name.isocode]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { ConsignmentTracking } from '../../../model/index';\nimport { UserActions } from '../actions/index';\nimport { ConsignmentTrackingState } from '../user-state';\n\nexport const initialState: ConsignmentTrackingState = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ConsignmentTrackingAction\n): ConsignmentTrackingState {\n  switch (action.type) {\n    case UserActions.LOAD_CONSIGNMENT_TRACKING_SUCCESS: {\n      const tracking: ConsignmentTracking = action.payload;\n      return {\n        tracking,\n      };\n    }\n    case UserActions.CLEAR_CONSIGNMENT_TRACKING: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Country } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { DeliveryCountriesState } from '../user-state';\n\nexport const initialState: DeliveryCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.DeliveryCountriesAction | UserActions.ClearUserMiscsData\n): DeliveryCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_DELIVERY_COUNTRIES_SUCCESS: {\n      const deliveryCountries = action.payload;\n      const entities = deliveryCountries.reduce(\n        (countryEntities: { [isocode: string]: Country }, country: Country) => {\n          return {\n            ...countryEntities,\n            [country.isocode]: country,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { NotificationPreference } from '../../../model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: NotificationPreference[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.NotificationPreferenceAction\n): NotificationPreference[] {\n  switch (action.type) {\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_SUCCESS:\n    case UserActions.UPDATE_NOTIFICATION_PREFERENCES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { Order } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Order = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderDetailsAction\n): Order {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_DETAILS_SUCCESS: {\n      const order: Order = action.payload;\n      return order;\n    }\n  }\n  return state;\n}\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: PaymentDetails[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserPaymentMethodsAction\n): PaymentDetails[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_PAYMENT_METHODS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n\n    case UserActions.LOAD_USER_PAYMENT_METHODS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Region } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { RegionsState } from '../user-state';\n\nexport const initialState: RegionsState = {\n  entities: [],\n  country: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.RegionsAction | UserActions.ClearUserMiscsData\n): RegionsState {\n  switch (action.type) {\n    case UserActions.LOAD_REGIONS_SUCCESS: {\n      const entities: Region[] = action.payload.entities;\n      const country: string = action.payload.country;\n      if (entities || country) {\n        return {\n          ...state,\n          entities,\n          country,\n        };\n      }\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { UserActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ResetPasswordAction\n): boolean {\n  switch (action.type) {\n    case UserActions.RESET_PASSWORD_SUCCESS: {\n      return true;\n    }\n  }\n  return state;\n}\n","import { Title } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\nimport { TitlesState } from '../user-state';\n\nexport const initialState: TitlesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.TitlesAction | UserActions.ClearUserMiscsData\n): TitlesState {\n  switch (action.type) {\n    case UserActions.LOAD_TITLES_SUCCESS: {\n      const titles = action.payload;\n      const entities = titles.reduce(\n        (titleEntities: { [code: string]: Title }, name: Title) => {\n          return {\n            ...titleEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { Address } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Address[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserAddressesAction\n): Address[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ADDRESSES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_USER_ADDRESSES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n  return state;\n}\n","import { ConsentTemplate } from '../../../model/consent.model';\r\nimport { UserActions } from '../actions/index';\r\n\r\nexport const initialState: ConsentTemplate[] = [];\r\n\r\nexport function reducer(\r\n  state = initialState,\r\n  action: UserActions.UserConsentsAction\r\n): ConsentTemplate[] {\r\n  switch (action.type) {\r\n    case UserActions.LOAD_USER_CONSENTS_SUCCESS: {\r\n      const consents = action.payload;\r\n      return consents ? consents : initialState;\r\n    }\r\n\r\n    case UserActions.GIVE_USER_CONSENT_SUCCESS: {\r\n      const updatedConsentTemplate = action.consentTemplate;\r\n      return state.map((consentTemplate) =>\r\n        consentTemplate.id === updatedConsentTemplate.id\r\n          ? updatedConsentTemplate\r\n          : consentTemplate\r\n      );\r\n    }\r\n  }\r\n\r\n  return state;\r\n}\r\n","import { User } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: User = <User>{};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserDetailsAction | UserActions.EmailActions\n): User {\n  switch (action.type) {\n    case UserActions.LOAD_USER_DETAILS_SUCCESS: {\n      return action.payload;\n    }\n\n    case UserActions.UPDATE_USER_DETAILS_SUCCESS: {\n      const updatedDetails: User = {\n        ...state,\n        ...action.userUpdates,\n      };\n      return {\n        ...updatedDetails,\n        name: `${updatedDetails.firstName} ${updatedDetails.lastName}`,\n      };\n    }\n  }\n\n  return state;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: OrderHistoryList = {\n  orders: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserOrdersAction\n): OrderHistoryList {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ORDERS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_USER_ORDERS_FAIL: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import * as fromActions from '../actions/customer-coupon.action';\nimport {\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n} from '../../../model/customer-coupon.model';\n\nexport const initialState: CustomerCouponSearchResult = {\n  coupons: [],\n  sorts: [],\n  pagination: {},\n};\nexport function reducer(\n  state = initialState,\n  action: fromActions.CustomerCouponAction\n): CustomerCouponSearchResult {\n  switch (action.type) {\n    case fromActions.LOAD_CUSTOMER_COUPONS_SUCCESS: {\n      return action.payload;\n    }\n\n    case fromActions.SUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCustomerCoupon = action.payload.coupon;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCustomerCoupon.couponId\n          ? (customerCoupons[index] = updatedCustomerCoupon)\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n\n    case fromActions.UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCouponCode = action.payload;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCouponCode\n          ? (customerCoupons[index] = {\n              ...customerCoupon,\n              notificationOn: false,\n            })\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n  }\n  return state;\n}\n","import { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const initialState: ProductInterestSearchResult = {\n  results: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ProductInterestsAction\n): ProductInterestSearchResult {\n  switch (action.type) {\n    case UserActions.LOAD_PRODUCT_INTERESTS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_PRODUCT_INTERESTS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { ReturnRequestList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ReturnRequestList = {\n  returnRequests: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderReturnRequestAction\n): ReturnRequestList {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\r\nimport {\r\n  ActionReducer,\r\n  ActionReducerMap,\r\n  combineReducers,\r\n  MetaReducer,\r\n} from '@ngrx/store';\r\nimport { AuthActions } from '../../../auth/store/actions/index';\r\nimport { Address } from '../../../model/address.model';\r\nimport { PaymentDetails } from '../../../model/cart.model';\r\nimport { ConsentTemplate } from '../../../model/consent.model';\r\nimport { NotificationPreference } from '../../../model/notification-preference.model';\r\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\r\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\r\nimport {\r\n  OrderHistoryList,\r\n  ReturnRequestList,\r\n  ReturnRequest,\r\n  Order,\r\n} from '../../../model/order.model';\r\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\r\nimport {\r\n  REGIONS,\r\n  RegionsState,\r\n  UserState,\r\n  USER_ADDRESSES,\r\n  USER_CONSENTS,\r\n  USER_ORDERS,\r\n  USER_PAYMENT_METHODS,\r\n  CUSTOMER_COUPONS,\r\n  NOTIFICATION_PREFERENCES,\r\n  PRODUCT_INTERESTS,\r\n  USER_RETURN_REQUESTS,\r\n  USER_ORDER_DETAILS,\r\n  USER_RETURN_REQUEST_DETAILS,\r\n} from '../user-state';\r\nimport * as fromBillingCountriesReducer from './billing-countries.reducer';\r\nimport * as fromConsignmentTrackingReducer from './consignment-tracking.reducer';\r\nimport * as fromDeliveryCountries from './delivery-countries.reducer';\r\nimport * as fromNotificationPreferenceReducer from './notification-preference.reducer';\r\nimport * as fromOrderDetailsReducer from './order-details.reducer';\r\nimport * as fromPaymentReducer from './payment-methods.reducer';\r\nimport * as fromRegionsReducer from './regions.reducer';\r\nimport * as fromResetPasswordReducer from './reset-password.reducer';\r\nimport * as fromTitlesReducer from './titles.reducer';\r\nimport * as fromAddressesReducer from './user-addresses.reducer';\r\nimport * as fromUserConsentsReducer from './user-consents.reducer';\r\nimport * as fromUserDetailsReducer from './user-details.reducer';\r\nimport * as fromUserOrdersReducer from './user-orders.reducer';\r\nimport * as fromCustomerCouponReducer from './customer-coupon.reducer';\r\nimport * as fromInterestsReducer from './product-interests.reducer';\r\nimport * as fromOrderReturnRequestReducer from './order-return-request.reducer';\r\n\r\nexport function getReducers(): ActionReducerMap<UserState> {\r\n  return {\r\n    account: combineReducers({\r\n      details: fromUserDetailsReducer.reducer,\r\n    }),\r\n    addresses: loaderReducer<Address[]>(\r\n      USER_ADDRESSES,\r\n      fromAddressesReducer.reducer\r\n    ),\r\n    billingCountries: fromBillingCountriesReducer.reducer,\r\n    consents: loaderReducer<ConsentTemplate[]>(\r\n      USER_CONSENTS,\r\n      fromUserConsentsReducer.reducer\r\n    ),\r\n    payments: loaderReducer<PaymentDetails[]>(\r\n      USER_PAYMENT_METHODS,\r\n      fromPaymentReducer.reducer\r\n    ),\r\n    orders: loaderReducer<OrderHistoryList>(\r\n      USER_ORDERS,\r\n      fromUserOrdersReducer.reducer\r\n    ),\r\n    order: loaderReducer<Order>(\r\n      USER_ORDER_DETAILS,\r\n      fromOrderDetailsReducer.reducer\r\n    ),\r\n    orderReturn: loaderReducer<ReturnRequest>(USER_RETURN_REQUEST_DETAILS),\r\n    orderReturnList: loaderReducer<ReturnRequestList>(\r\n      USER_RETURN_REQUESTS,\r\n      fromOrderReturnRequestReducer.reducer\r\n    ),\r\n    countries: fromDeliveryCountries.reducer,\r\n    titles: fromTitlesReducer.reducer,\r\n    regions: loaderReducer<RegionsState>(REGIONS, fromRegionsReducer.reducer),\r\n    resetPassword: fromResetPasswordReducer.reducer,\r\n    consignmentTracking: fromConsignmentTrackingReducer.reducer,\r\n    customerCoupons: loaderReducer<CustomerCouponSearchResult>(\r\n      CUSTOMER_COUPONS,\r\n      fromCustomerCouponReducer.reducer\r\n    ),\r\n    notificationPreferences: loaderReducer<NotificationPreference[]>(\r\n      NOTIFICATION_PREFERENCES,\r\n      fromNotificationPreferenceReducer.reducer\r\n    ),\r\n    productInterests: loaderReducer<ProductInterestSearchResult>(\r\n      PRODUCT_INTERESTS,\r\n      fromInterestsReducer.reducer\r\n    ),\r\n  };\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducerMap<\r\n  UserState\r\n>> = new InjectionToken<ActionReducerMap<UserState>>('UserReducers');\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n\r\nexport function clearUserState(\r\n  reducer: ActionReducer<any>\r\n): ActionReducer<any> {\r\n  return function (state, action) {\r\n    if (action.type === AuthActions.LOGOUT) {\r\n      state = undefined;\r\n    }\r\n\r\n    return reducer(state, action);\r\n  };\r\n}\r\n\r\nexport const metaReducers: MetaReducer<any>[] = [clearUserState];\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { CountryType } from '../../../model/address.model';\r\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class BillingCountriesEffect {\r\n  @Effect()\r\n  loadBillingCountries$: Observable<\r\n    UserActions.BillingCountriesAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_BILLING_COUNTRIES),\r\n    switchMap(() => {\r\n      return this.siteConnector.getCountries(CountryType.BILLING).pipe(\r\n        map(\r\n          (countries) => new UserActions.LoadBillingCountriesSuccess(countries)\r\n        ),\r\n        catchError((error) =>\r\n          of(\r\n            new UserActions.LoadBillingCountriesFail(\r\n              makeErrorSerializable(error)\r\n            )\r\n          )\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private siteConnector: SiteConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ClearMiscsDataEffect {\n  @Effect()\n  clearMiscsData$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    map(() => {\n      return new UserActions.ClearUserMiscsData();\n    })\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class ConsignmentTrackingEffects {\r\n  @Effect()\r\n  loadConsignmentTracking$: Observable<\r\n    UserActions.ConsignmentTrackingAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_CONSIGNMENT_TRACKING),\r\n    map((action: UserActions.LoadConsignmentTracking) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.userOrderConnector\r\n        .getConsignmentTracking(\r\n          payload.orderCode,\r\n          payload.consignmentCode,\r\n          payload.userId\r\n        )\r\n        .pipe(\r\n          map(\r\n            (tracking: ConsignmentTracking) =>\r\n              new UserActions.LoadConsignmentTrackingSuccess(tracking)\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.LoadConsignmentTrackingFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userOrderConnector: UserOrderConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { CountryType } from '../../../model/address.model';\r\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class DeliveryCountriesEffects {\r\n  @Effect()\r\n  loadDeliveryCountries$: Observable<\r\n    UserActions.DeliveryCountriesAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_DELIVERY_COUNTRIES),\r\n    switchMap(() => {\r\n      return this.siteConnector.getCountries(CountryType.SHIPPING).pipe(\r\n        map(\r\n          (countries) => new UserActions.LoadDeliveryCountriesSuccess(countries)\r\n        ),\r\n        catchError((error) =>\r\n          of(\r\n            new UserActions.LoadDeliveryCountriesFail(\r\n              makeErrorSerializable(error)\r\n            )\r\n          )\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private siteConnector: SiteConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, concatMap, map, switchMap } from 'rxjs/operators';\r\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\r\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserConnector } from '../../connectors/user/user.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class ForgotPasswordEffects {\r\n  @Effect()\r\n  requestForgotPasswordEmail$: Observable<\r\n    | UserActions.ForgotPasswordEmailRequestSuccess\r\n    | GlobalMessageActions.AddMessage\r\n    | UserActions.ForgotPasswordEmailRequestFail\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.FORGOT_PASSWORD_EMAIL_REQUEST),\r\n    map((action: UserActions.ForgotPasswordEmailRequest) => {\r\n      return action.payload;\r\n    }),\r\n    concatMap((userEmailAddress) => {\r\n      return this.userAccountConnector\r\n        .requestForgotPasswordEmail(userEmailAddress)\r\n        .pipe(\r\n          switchMap(() => [\r\n            new UserActions.ForgotPasswordEmailRequestSuccess(),\r\n            new GlobalMessageActions.AddMessage({\r\n              text: { key: 'forgottenPassword.passwordResetEmailSent' },\r\n              type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\r\n            }),\r\n          ]),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.ForgotPasswordEmailRequestFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userAccountConnector: UserConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserNotificationPreferenceConnector } from '../../connectors/notification-preference/user-notification-preference.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class NotificationPreferenceEffects {\r\n  @Effect()\r\n  loadPreferences$: Observable<\r\n    UserActions.NotificationPreferenceAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_NOTIFICATION_PREFERENCES),\r\n    map((action: UserActions.LoadNotificationPreferences) => action.payload),\r\n    switchMap((payload) =>\r\n      this.connector.loadAll(payload).pipe(\r\n        map(\r\n          (preferences) =>\r\n            new UserActions.LoadNotificationPreferencesSuccess(preferences)\r\n        ),\r\n        catchError((error) =>\r\n          of(\r\n            new UserActions.LoadNotificationPreferencesFail(\r\n              makeErrorSerializable(error)\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  updatePreferences$: Observable<\r\n    UserActions.NotificationPreferenceAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.UPDATE_NOTIFICATION_PREFERENCES),\r\n    map((action: UserActions.UpdateNotificationPreferences) => action.payload),\r\n    mergeMap((payload) =>\r\n      this.connector.update(payload.userId, payload.preferences).pipe(\r\n        map(\r\n          () =>\r\n            new UserActions.UpdateNotificationPreferencesSuccess(\r\n              payload.preferences\r\n            )\r\n        ),\r\n        catchError((error) =>\r\n          of(\r\n            new UserActions.UpdateNotificationPreferencesFail(\r\n              makeErrorSerializable(error)\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private connector: UserNotificationPreferenceConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { Order } from '../../../model/order.model';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\r\nimport { UserActions } from '../actions/index';\r\nimport {\r\n  GlobalMessageService,\r\n  GlobalMessageType,\r\n} from '../../../global-message/index';\r\n\r\n@Injectable()\r\nexport class OrderDetailsEffect {\r\n  @Effect()\r\n  loadOrderDetails$: Observable<\r\n    UserActions.OrderDetailsAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_ORDER_DETAILS),\r\n    map((action: UserActions.LoadOrderDetails) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.orderConnector.get(payload.userId, payload.orderCode).pipe(\r\n        map((order: Order) => {\r\n          return new UserActions.LoadOrderDetailsSuccess(order);\r\n        }),\r\n        catchError((error) =>\r\n          of(new UserActions.LoadOrderDetailsFail(makeErrorSerializable(error)))\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  cancelOrder$: Observable<UserActions.OrderDetailsAction> = this.actions$.pipe(\r\n    ofType(UserActions.CANCEL_ORDER),\r\n    map((action: UserActions.CancelOrder) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.orderConnector\r\n        .cancel(payload.userId, payload.orderCode, payload.cancelRequestInput)\r\n        .pipe(\r\n          map(() => new UserActions.CancelOrderSuccess()),\r\n          catchError((error) => {\r\n            error.error?.errors.forEach((err) =>\r\n              this.globalMessageService.add(\r\n                err.message,\r\n                GlobalMessageType.MSG_TYPE_ERROR\r\n              )\r\n            );\r\n\r\n            return of(\r\n              new UserActions.CancelOrderFail(makeErrorSerializable(error))\r\n            );\r\n          })\r\n        );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private orderConnector: UserOrderConnector,\r\n    private globalMessageService: GlobalMessageService\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class OrderReturnRequestEffect {\r\n  @Effect()\r\n  createReturnRequest$: Observable<\r\n    UserActions.OrderReturnRequestAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.CREATE_ORDER_RETURN_REQUEST),\r\n    map((action: UserActions.CreateOrderReturnRequest) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.orderConnector\r\n        .return(payload.userId, payload.returnRequestInput)\r\n        .pipe(\r\n          map(\r\n            (returnRequest: ReturnRequest) =>\r\n              new UserActions.CreateOrderReturnRequestSuccess(returnRequest)\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.CreateOrderReturnRequestFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  loadReturnRequest$: Observable<\r\n    UserActions.OrderReturnRequestAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST),\r\n    map((action: UserActions.LoadOrderReturnRequest) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.orderConnector\r\n        .getReturnRequestDetail(payload.userId, payload.returnRequestCode)\r\n        .pipe(\r\n          map(\r\n            (returnRequest: ReturnRequest) =>\r\n              new UserActions.LoadOrderReturnRequestSuccess(returnRequest)\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.LoadOrderReturnRequestFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  cancelReturnRequest$: Observable<\r\n    UserActions.OrderReturnRequestAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.CANCEL_ORDER_RETURN_REQUEST),\r\n    map((action: UserActions.CancelOrderReturnRequest) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.orderConnector\r\n        .cancelReturnRequest(\r\n          payload.userId,\r\n          payload.returnRequestCode,\r\n          payload.returnRequestModification\r\n        )\r\n        .pipe(\r\n          map(() => new UserActions.CancelOrderReturnRequestSuccess()),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.CancelOrderReturnRequestFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  loadReturnRequestList$: Observable<\r\n    UserActions.OrderReturnRequestAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST_LIST),\r\n    map((action: UserActions.LoadOrderReturnRequestList) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.orderConnector\r\n        .getReturnRequestList(\r\n          payload.userId,\r\n          payload.pageSize,\r\n          payload.currentPage,\r\n          payload.sort\r\n        )\r\n        .pipe(\r\n          map(\r\n            (returnRequestList: ReturnRequestList) =>\r\n              new UserActions.LoadOrderReturnRequestListSuccess(\r\n                returnRequestList\r\n              )\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.LoadOrderReturnRequestListFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private orderConnector: UserOrderConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Action } from '@ngrx/store';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { PaymentDetails } from '../../../model/cart.model';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserPaymentConnector } from '../../connectors/payment/user-payment.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class UserPaymentMethodsEffects {\r\n  @Effect()\r\n  loadUserPaymentMethods$: Observable<Action> = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_USER_PAYMENT_METHODS),\r\n    map((action: UserActions.LoadUserPaymentMethods) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.userPaymentMethodConnector.getAll(payload).pipe(\r\n        map((payments: PaymentDetails[]) => {\r\n          return new UserActions.LoadUserPaymentMethodsSuccess(payments);\r\n        }),\r\n        catchError((error) =>\r\n          of(\r\n            new UserActions.LoadUserPaymentMethodsFail(\r\n              makeErrorSerializable(error)\r\n            )\r\n          )\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  setDefaultUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\r\n    ofType(UserActions.SET_DEFAULT_USER_PAYMENT_METHOD),\r\n    map((action: UserActions.SetDefaultUserPaymentMethod) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.userPaymentMethodConnector\r\n        .setDefault(payload.userId, payload.paymentMethodId)\r\n        .pipe(\r\n          switchMap((data) => [\r\n            new UserActions.SetDefaultUserPaymentMethodSuccess(data),\r\n            new UserActions.LoadUserPaymentMethods(payload.userId),\r\n          ]),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.SetDefaultUserPaymentMethodFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n  @Effect()\r\n  deleteUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\r\n    ofType(UserActions.DELETE_USER_PAYMENT_METHOD),\r\n    map((action: UserActions.DeleteUserPaymentMethod) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.userPaymentMethodConnector\r\n        .delete(payload.userId, payload.paymentMethodId)\r\n        .pipe(\r\n          switchMap((data) => [\r\n            new UserActions.DeleteUserPaymentMethodSuccess(data),\r\n            new UserActions.LoadUserPaymentMethods(payload.userId),\r\n          ]),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.DeleteUserPaymentMethodFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userPaymentMethodConnector: UserPaymentConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Action } from '@ngrx/store';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserActions } from '../actions/index';\r\nimport { REGIONS } from '../user-state';\r\n\r\n@Injectable()\r\nexport class RegionsEffects {\r\n  @Effect()\r\n  loadRegions$: Observable<UserActions.RegionsAction> = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_REGIONS),\r\n    map((action: UserActions.LoadRegions) => {\r\n      return action.payload;\r\n    }),\r\n    switchMap((countryCode: string) => {\r\n      return this.siteConnector.getRegions(countryCode).pipe(\r\n        map(\r\n          (regions) =>\r\n            new UserActions.LoadRegionsSuccess({\r\n              entities: regions,\r\n              country: countryCode,\r\n            })\r\n        ),\r\n        catchError((error) =>\r\n          of(new UserActions.LoadRegionsFail(makeErrorSerializable(error)))\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  resetRegions$: Observable<Action> = this.actions$.pipe(\r\n    ofType(UserActions.CLEAR_USER_MISCS_DATA, UserActions.CLEAR_REGIONS),\r\n    map(() => {\r\n      return new StateUtils.LoaderResetAction(REGIONS);\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private siteConnector: SiteConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { from, Observable } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\r\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserConnector } from '../../connectors/user/user.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class ResetPasswordEffects {\r\n  @Effect()\r\n  resetPassword$: Observable<\r\n    | UserActions.ResetPasswordSuccess\r\n    | GlobalMessageActions.AddMessage\r\n    | UserActions.ResetPasswordFail\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.RESET_PASSWORD),\r\n    map((action: UserActions.ResetPassword) => action.payload),\r\n    switchMap(({ token, password }) => {\r\n      return this.userAccountConnector.resetPassword(token, password).pipe(\r\n        switchMap(() => [\r\n          new UserActions.ResetPasswordSuccess(),\r\n          new GlobalMessageActions.AddMessage({\r\n            text: { key: 'forgottenPassword.passwordResetSuccess' },\r\n            type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\r\n          }),\r\n        ]),\r\n        catchError((error) => {\r\n          const actions: Array<\r\n            UserActions.ResetPasswordFail | GlobalMessageActions.AddMessage\r\n          > = [new UserActions.ResetPasswordFail(makeErrorSerializable(error))];\r\n          if (error?.error?.errors) {\r\n            error.error.errors.forEach((err) => {\r\n              if (err.message) {\r\n                actions.push(\r\n                  new GlobalMessageActions.AddMessage({\r\n                    text: { raw: err.message },\r\n                    type: GlobalMessageType.MSG_TYPE_ERROR,\r\n                  })\r\n                );\r\n              }\r\n            });\r\n          }\r\n          return from(actions);\r\n        })\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userAccountConnector: UserConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserConnector } from '../../connectors/user/user.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class TitlesEffects {\r\n  @Effect()\r\n  loadTitles$: Observable<UserActions.TitlesAction> = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_TITLES),\r\n    switchMap(() => {\r\n      return this.userAccountConnector.getTitles().pipe(\r\n        map((titles) => {\r\n          return new UserActions.LoadTitlesSuccess(titles);\r\n        }),\r\n        catchError((error) =>\r\n          of(new UserActions.LoadTitlesFail(makeErrorSerializable(error)))\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userAccountConnector: UserConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, concatMap, map } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserConnector } from '../../connectors/user/user.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class UpdateEmailEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userAccountConnector: UserConnector\r\n  ) {}\r\n\r\n  @Effect()\r\n  updateEmail$: Observable<\r\n    UserActions.UpdateEmailSuccessAction | UserActions.UpdateEmailErrorAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.UPDATE_EMAIL),\r\n    map((action: UserActions.UpdateEmailAction) => action.payload),\r\n    concatMap((payload) =>\r\n      this.userAccountConnector\r\n        .updateEmail(payload.uid, payload.password, payload.newUid)\r\n        .pipe(\r\n          map(() => new UserActions.UpdateEmailSuccessAction(payload.newUid)),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.UpdateEmailErrorAction(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        )\r\n    )\r\n  );\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, concatMap, map } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserConnector } from '../../connectors/user/user.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class UpdatePasswordEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userAccountConnector: UserConnector\r\n  ) {}\r\n\r\n  @Effect()\r\n  updatePassword$: Observable<\r\n    UserActions.UpdatePasswordSuccess | UserActions.UpdatePasswordFail\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.UPDATE_PASSWORD),\r\n    map((action: UserActions.UpdatePassword) => action.payload),\r\n    concatMap((payload) =>\r\n      this.userAccountConnector\r\n        .updatePassword(\r\n          payload.userId,\r\n          payload.oldPassword,\r\n          payload.newPassword\r\n        )\r\n        .pipe(\r\n          map(() => new UserActions.UpdatePasswordSuccess()),\r\n          catchError((error) =>\r\n            of(new UserActions.UpdatePasswordFail(makeErrorSerializable(error)))\r\n          )\r\n        )\r\n    )\r\n  );\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\r\nimport {\r\n  GlobalMessageService,\r\n  GlobalMessageType,\r\n} from '../../../global-message/index';\r\nimport { Address } from '../../../model/address.model';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserAddressConnector } from '../../connectors/address/user-address.connector';\r\nimport { UserAddressService } from '../../facade/user-address.service';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class UserAddressesEffects {\r\n  @Effect()\r\n  loadUserAddresses$: Observable<\r\n    UserActions.UserAddressesAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_USER_ADDRESSES),\r\n    map((action: UserActions.LoadUserAddresses) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.userAddressConnector.getAll(payload).pipe(\r\n        map((addresses: Address[]) => {\r\n          return new UserActions.LoadUserAddressesSuccess(addresses);\r\n        }),\r\n        catchError((error) =>\r\n          of(\r\n            new UserActions.LoadUserAddressesFail(makeErrorSerializable(error))\r\n          )\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  addUserAddress$: Observable<\r\n    UserActions.UserAddressesAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.ADD_USER_ADDRESS),\r\n    map((action: UserActions.AddUserAddress) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.userAddressConnector\r\n        .add(payload.userId, payload.address)\r\n        .pipe(\r\n          map((data: any) => {\r\n            return new UserActions.AddUserAddressSuccess(data);\r\n          }),\r\n          catchError((error) =>\r\n            of(new UserActions.AddUserAddressFail(makeErrorSerializable(error)))\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  updateUserAddress$: Observable<\r\n    UserActions.UserAddressesAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.UPDATE_USER_ADDRESS),\r\n    map((action: UserActions.UpdateUserAddress) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.userAddressConnector\r\n        .update(payload.userId, payload.addressId, payload.address)\r\n        .pipe(\r\n          map((data) => {\r\n            // don't show the message if just setting address as default\r\n            if (\r\n              payload.address &&\r\n              Object.keys(payload.address).length === 1 &&\r\n              payload.address.defaultAddress\r\n            ) {\r\n              return new UserActions.LoadUserAddresses(payload.userId);\r\n            } else {\r\n              return new UserActions.UpdateUserAddressSuccess(data);\r\n            }\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.UpdateUserAddressFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  deleteUserAddress$: Observable<\r\n    UserActions.UserAddressesAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.DELETE_USER_ADDRESS),\r\n    map((action: UserActions.DeleteUserAddress) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.userAddressConnector\r\n        .delete(payload.userId, payload.addressId)\r\n        .pipe(\r\n          map((data) => {\r\n            return new UserActions.DeleteUserAddressSuccess(data);\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.DeleteUserAddressFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  /**\r\n   *  Reload addresses and notify about add success\r\n   */\r\n  @Effect({ dispatch: false })\r\n  showGlobalMessageOnAddSuccess$ = this.actions$.pipe(\r\n    ofType(UserActions.ADD_USER_ADDRESS_SUCCESS),\r\n    tap(() => {\r\n      this.loadAddresses();\r\n      this.showGlobalMessage('addressForm.userAddressAddSuccess');\r\n    })\r\n  );\r\n\r\n  /**\r\n   *  Reload addresses and notify about update success\r\n   */\r\n  @Effect({ dispatch: false })\r\n  showGlobalMessageOnUpdateSuccess$ = this.actions$.pipe(\r\n    ofType(UserActions.UPDATE_USER_ADDRESS_SUCCESS),\r\n    tap(() => {\r\n      this.loadAddresses();\r\n      this.showGlobalMessage('addressForm.userAddressUpdateSuccess');\r\n    })\r\n  );\r\n\r\n  /**\r\n   *  Reload addresses and notify about delete success\r\n   */\r\n  @Effect({ dispatch: false })\r\n  showGlobalMessageOnDeleteSuccess$ = this.actions$.pipe(\r\n    ofType(UserActions.DELETE_USER_ADDRESS_SUCCESS),\r\n    tap(() => {\r\n      this.loadAddresses();\r\n      this.showGlobalMessage('addressForm.userAddressDeleteSuccess');\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userAddressConnector: UserAddressConnector,\r\n    private userAddressService: UserAddressService,\r\n    private messageService: GlobalMessageService\r\n  ) {}\r\n\r\n  /**\r\n   * Show global confirmation message with provided text\r\n   */\r\n  private showGlobalMessage(text: string) {\r\n    this.messageService.add(\r\n      { key: text },\r\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\r\n    );\r\n  }\r\n\r\n  private loadAddresses() {\r\n    this.userAddressService.loadAddresses();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, concatMap, map } from 'rxjs/operators';\r\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\r\nimport { GlobalMessageActions } from '../../../global-message/store/actions';\r\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserConsentConnector } from '../../connectors/consent/user-consent.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class UserConsentsEffect {\r\n  @Effect()\r\n  resetConsents$: Observable<\r\n    UserActions.ResetLoadUserConsents\r\n  > = this.actions$.pipe(\r\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\r\n    map(() => new UserActions.ResetLoadUserConsents())\r\n  );\r\n\r\n  @Effect()\r\n  getConsents$: Observable<UserActions.UserConsentsAction> = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_USER_CONSENTS),\r\n    map((action: UserActions.LoadUserConsents) => action.payload),\r\n    concatMap((userId) =>\r\n      this.userConsentConnector.loadConsents(userId).pipe(\r\n        map((consents) => new UserActions.LoadUserConsentsSuccess(consents)),\r\n        catchError((error) =>\r\n          of(new UserActions.LoadUserConsentsFail(makeErrorSerializable(error)))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  giveConsent$: Observable<\r\n    UserActions.UserConsentsAction | GlobalMessageActions.RemoveMessagesByType\r\n  > = this.actions$.pipe(\r\n    ofType<UserActions.GiveUserConsent | UserActions.TransferAnonymousConsent>(\r\n      UserActions.GIVE_USER_CONSENT,\r\n      UserActions.TRANSFER_ANONYMOUS_CONSENT\r\n    ),\r\n    concatMap((action) =>\r\n      this.userConsentConnector\r\n        .giveConsent(\r\n          action.payload.userId,\r\n          action.payload.consentTemplateId,\r\n          action.payload.consentTemplateVersion\r\n        )\r\n        .pipe(\r\n          map((consent) => new UserActions.GiveUserConsentSuccess(consent)),\r\n          catchError((error) => {\r\n            const errors: Array<\r\n              | UserActions.UserConsentsAction\r\n              | GlobalMessageActions.RemoveMessagesByType\r\n            > = [\r\n              new UserActions.GiveUserConsentFail(makeErrorSerializable(error)),\r\n            ];\r\n            if (\r\n              action.type === UserActions.TRANSFER_ANONYMOUS_CONSENT &&\r\n              error.status === 409\r\n            ) {\r\n              errors.push(\r\n                new GlobalMessageActions.RemoveMessagesByType(\r\n                  GlobalMessageType.MSG_TYPE_ERROR\r\n                )\r\n              );\r\n            }\r\n            return of(...errors);\r\n          })\r\n        )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  withdrawConsent$: Observable<\r\n    UserActions.UserConsentsAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.WITHDRAW_USER_CONSENT),\r\n    map((action: UserActions.WithdrawUserConsent) => action.payload),\r\n    concatMap(({ userId, consentCode }) =>\r\n      this.userConsentConnector.withdrawConsent(userId, consentCode).pipe(\r\n        map(() => new UserActions.WithdrawUserConsentSuccess()),\r\n        catchError((error) =>\r\n          of(\r\n            new UserActions.WithdrawUserConsentFail(\r\n              makeErrorSerializable(error)\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userConsentConnector: UserConsentConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, concatMap, map, mergeMap } from 'rxjs/operators';\r\nimport { User } from '../../../model/misc.model';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserConnector } from '../../connectors/user/user.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class UserDetailsEffects {\r\n  @Effect()\r\n  loadUserDetails$: Observable<\r\n    UserActions.UserDetailsAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_USER_DETAILS),\r\n    map((action: UserActions.LoadUserDetails) => action.payload),\r\n    mergeMap((userId) => {\r\n      return this.userConnector.get(userId).pipe(\r\n        map((user: User) => {\r\n          return new UserActions.LoadUserDetailsSuccess(user);\r\n        }),\r\n        catchError((error) =>\r\n          of(new UserActions.LoadUserDetailsFail(makeErrorSerializable(error)))\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  updateUserDetails$: Observable<\r\n    UserActions.UpdateUserDetailsSuccess | UserActions.UpdateUserDetailsFail\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.UPDATE_USER_DETAILS),\r\n    map((action: UserActions.UpdateUserDetails) => action.payload),\r\n    concatMap((payload) =>\r\n      this.userConnector.update(payload.username, payload.userDetails).pipe(\r\n        map(\r\n          () => new UserActions.UpdateUserDetailsSuccess(payload.userDetails)\r\n        ),\r\n        catchError((error) =>\r\n          of(\r\n            new UserActions.UpdateUserDetailsFail(makeErrorSerializable(error))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userConnector: UserConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { OrderHistoryList } from '../../../model/order.model';\r\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class UserOrdersEffect {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private orderConnector: UserOrderConnector\r\n  ) {}\r\n\r\n  @Effect()\r\n  loadUserOrders$: Observable<\r\n    UserActions.UserOrdersAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_USER_ORDERS),\r\n    map((action: UserActions.LoadUserOrders) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.orderConnector\r\n        .getHistory(\r\n          payload.userId,\r\n          payload.pageSize,\r\n          payload.currentPage,\r\n          payload.sort\r\n        )\r\n        .pipe(\r\n          map((orders: OrderHistoryList) => {\r\n            return new UserActions.LoadUserOrdersSuccess(orders);\r\n          }),\r\n          catchError((error) =>\r\n            of(new UserActions.LoadUserOrdersFail(makeErrorSerializable(error)))\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  resetUserOrders$: Observable<\r\n    UserActions.ClearUserOrders\r\n  > = this.actions$.pipe(\r\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\r\n    map(() => {\r\n      return new UserActions.ClearUserOrders();\r\n    })\r\n  );\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { AuthActions } from '../../../auth/store/actions/index';\r\nimport { UserSignUp } from '../../../model/misc.model';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserConnector } from '../../connectors/user/user.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class UserRegisterEffects {\r\n  @Effect()\r\n  registerUser$: Observable<\r\n    UserActions.UserRegisterOrRemoveAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.REGISTER_USER),\r\n    map((action: UserActions.RegisterUser) => action.payload),\r\n    mergeMap((user: UserSignUp) =>\r\n      this.userConnector.register(user).pipe(\r\n        map(() => new UserActions.RegisterUserSuccess()),\r\n        catchError((error) =>\r\n          of(new UserActions.RegisterUserFail(makeErrorSerializable(error)))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  registerGuest$: Observable<\r\n    UserActions.UserRegisterOrRemoveAction | AuthActions.LoadUserToken\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.REGISTER_GUEST),\r\n    map((action: UserActions.RegisterGuest) => action.payload),\r\n    mergeMap(({ guid, password }) =>\r\n      this.userConnector.registerGuest(guid, password).pipe(\r\n        switchMap((user) => [\r\n          new AuthActions.LoadUserToken({\r\n            userId: user.uid,\r\n            password: password,\r\n          }),\r\n          new UserActions.RegisterGuestSuccess(),\r\n        ]),\r\n        catchError((error) =>\r\n          of(new UserActions.RegisterGuestFail(makeErrorSerializable(error)))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  removeUser$: Observable<\r\n    UserActions.UserRegisterOrRemoveAction | AuthActions.Logout\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.REMOVE_USER),\r\n    map((action: UserActions.RemoveUser) => action.payload),\r\n    mergeMap((userId: string) => {\r\n      return this.userConnector.remove(userId).pipe(\r\n        switchMap(() => [\r\n          new UserActions.RemoveUserSuccess(),\r\n          new AuthActions.Logout(),\r\n        ]),\r\n        catchError((error) =>\r\n          of(new UserActions.RemoveUserFail(makeErrorSerializable(error)))\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userConnector: UserConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, mergeMap } from 'rxjs/operators';\r\nimport * as fromCustomerCouponsAction from '../actions/customer-coupon.action';\r\nimport { CustomerCouponConnector } from '../../connectors/customer-coupon/customer-coupon.connector';\r\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\n\r\n@Injectable()\r\nexport class CustomerCouponEffects {\r\n  @Effect()\r\n  loadCustomerCoupons$: Observable<\r\n    fromCustomerCouponsAction.CustomerCouponAction\r\n  > = this.actions$.pipe(\r\n    ofType(fromCustomerCouponsAction.LOAD_CUSTOMER_COUPONS),\r\n    map(\r\n      (action: fromCustomerCouponsAction.LoadCustomerCoupons) => action.payload\r\n    ),\r\n    mergeMap((payload) => {\r\n      return this.customerCouponConnector\r\n        .getCustomerCoupons(\r\n          payload.userId,\r\n          payload.pageSize,\r\n          payload.currentPage,\r\n          payload.sort\r\n        )\r\n        .pipe(\r\n          map((coupons: CustomerCouponSearchResult) => {\r\n            return new fromCustomerCouponsAction.LoadCustomerCouponsSuccess(\r\n              coupons\r\n            );\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new fromCustomerCouponsAction.LoadCustomerCouponsFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  subscribeCustomerCoupon$: Observable<\r\n    fromCustomerCouponsAction.CustomerCouponAction\r\n  > = this.actions$.pipe(\r\n    ofType(fromCustomerCouponsAction.SUBSCRIBE_CUSTOMER_COUPON),\r\n    map(\r\n      (action: fromCustomerCouponsAction.SubscribeCustomerCoupon) =>\r\n        action.payload\r\n    ),\r\n    mergeMap((payload) => {\r\n      return this.customerCouponConnector\r\n        .turnOnNotification(payload.userId, payload.couponCode)\r\n        .pipe(\r\n          map((data: any) => {\r\n            return new fromCustomerCouponsAction.SubscribeCustomerCouponSuccess(\r\n              data\r\n            );\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new fromCustomerCouponsAction.SubscribeCustomerCouponFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  unsubscribeCustomerCoupon$: Observable<\r\n    fromCustomerCouponsAction.CustomerCouponAction\r\n  > = this.actions$.pipe(\r\n    ofType(fromCustomerCouponsAction.UNSUBSCRIBE_CUSTOMER_COUPON),\r\n    map(\r\n      (action: fromCustomerCouponsAction.UnsubscribeCustomerCoupon) =>\r\n        action.payload\r\n    ),\r\n    mergeMap((payload) => {\r\n      return this.customerCouponConnector\r\n        .turnOffNotification(payload.userId, payload.couponCode)\r\n        .pipe(\r\n          map(() => {\r\n            return new fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess(\r\n              payload.couponCode\r\n            );\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new fromCustomerCouponsAction.UnsubscribeCustomerCouponFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  claimCustomerCoupon$: Observable<\r\n    fromCustomerCouponsAction.CustomerCouponAction\r\n  > = this.actions$.pipe(\r\n    ofType(fromCustomerCouponsAction.CLAIM_CUSTOMER_COUPON),\r\n    map(\r\n      (action: fromCustomerCouponsAction.ClaimCustomerCoupon) => action.payload\r\n    ),\r\n    mergeMap((payload) => {\r\n      return this.customerCouponConnector\r\n        .claimCustomerCoupon(payload.userId, payload.couponCode)\r\n        .pipe(\r\n          map((data) => {\r\n            return new fromCustomerCouponsAction.ClaimCustomerCouponSuccess(\r\n              data\r\n            );\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new fromCustomerCouponsAction.ClaimCustomerCouponFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private customerCouponConnector: CustomerCouponConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Effect, Actions, ofType } from '@ngrx/effects';\r\nimport { Action } from '@ngrx/store';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, switchMap, catchError } from 'rxjs/operators';\r\nimport { UserActions } from '../actions/index';\r\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\r\nimport { UserInterestsConnector } from '../../connectors/interests/user-interests.connector';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\n\r\n@Injectable()\r\nexport class ProductInterestsEffect {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userInterestsConnector: UserInterestsConnector\r\n  ) {}\r\n\r\n  @Effect()\r\n  loadProductInteres$: Observable<\r\n    UserActions.ProductInterestsAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_PRODUCT_INTERESTS),\r\n    map((action: UserActions.LoadProductInterests) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.userInterestsConnector\r\n        .getInterests(\r\n          payload.userId,\r\n          payload.pageSize,\r\n          payload.currentPage,\r\n          payload.sort,\r\n          payload.productCode,\r\n          payload.notificationType\r\n        )\r\n        .pipe(\r\n          map((interests: ProductInterestSearchResult) => {\r\n            return new UserActions.LoadProductInterestsSuccess(interests);\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.LoadProductInterestsFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  removeProductInterest$: Observable<Action> = this.actions$.pipe(\r\n    ofType(UserActions.REMOVE_PRODUCT_INTEREST),\r\n    map((action: UserActions.RemoveProductInterest) => action.payload),\r\n    switchMap((payload) =>\r\n      this.userInterestsConnector\r\n        .removeInterest(payload.userId, payload.item)\r\n        .pipe(\r\n          switchMap((data) => [\r\n            new UserActions.LoadProductInterests(\r\n              payload.singleDelete\r\n                ? {\r\n                    userId: payload.userId,\r\n                    productCode: payload.item.product.code,\r\n                    notificationType:\r\n                      payload.item.productInterestEntry[0].interestType,\r\n                  }\r\n                : { userId: payload.userId }\r\n            ),\r\n            new UserActions.RemoveProductInterestSuccess(data),\r\n          ]),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.RemoveProductInterestFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  addProductInterest$: Observable<Action> = this.actions$.pipe(\r\n    ofType(UserActions.ADD_PRODUCT_INTEREST),\r\n    map((action: UserActions.AddProductInterest) => action.payload),\r\n    switchMap((payload) =>\r\n      this.userInterestsConnector\r\n        .addInterest(\r\n          payload.userId,\r\n          payload.productCode,\r\n          payload.notificationType\r\n        )\r\n        .pipe(\r\n          switchMap((res: any) => [\r\n            new UserActions.LoadProductInterests({\r\n              userId: payload.userId,\r\n              productCode: payload.productCode,\r\n              notificationType: payload.notificationType,\r\n            }),\r\n            new UserActions.AddProductInterestSuccess(res),\r\n          ]),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.AddProductInterestFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        )\r\n    )\r\n  );\r\n}\r\n","import { BillingCountriesEffect } from './billing-countries.effect';\nimport { ClearMiscsDataEffect } from './clear-miscs-data.effect';\nimport { ConsignmentTrackingEffects } from './consignment-tracking.effect';\nimport { DeliveryCountriesEffects } from './delivery-countries.effect';\nimport { ForgotPasswordEffects } from './forgot-password.effect';\nimport { NotificationPreferenceEffects } from './notification-preference.effect';\nimport { OrderDetailsEffect } from './order-details.effect';\nimport { OrderReturnRequestEffect } from './order-return-request.effect';\nimport { UserPaymentMethodsEffects } from './payment-methods.effect';\nimport { RegionsEffects } from './regions.effect';\nimport { ResetPasswordEffects } from './reset-password.effect';\nimport { TitlesEffects } from './titles.effect';\nimport { UpdateEmailEffects } from './update-email.effect';\nimport { UpdatePasswordEffects } from './update-password.effect';\nimport { UserAddressesEffects } from './user-addresses.effect';\nimport { UserConsentsEffect } from './user-consents.effect';\nimport { UserDetailsEffects } from './user-details.effect';\nimport { UserOrdersEffect } from './user-orders.effect';\nimport { UserRegisterEffects } from './user-register.effect';\nimport { CustomerCouponEffects } from './customer-coupon.effect';\nimport { ProductInterestsEffect } from './product-interests.effect';\n\nexport const effects: any[] = [\n  ClearMiscsDataEffect,\n  DeliveryCountriesEffects,\n  RegionsEffects,\n  TitlesEffects,\n  UserDetailsEffects,\n  UserAddressesEffects,\n  UserPaymentMethodsEffects,\n  UserRegisterEffects,\n  UserOrdersEffect,\n  OrderDetailsEffect,\n  BillingCountriesEffect,\n  ResetPasswordEffects,\n  ForgotPasswordEffects,\n  UpdateEmailEffects,\n  UpdatePasswordEffects,\n  UserConsentsEffect,\n  ConsignmentTrackingEffects,\n  CustomerCouponEffects,\n  NotificationPreferenceEffects,\n  ProductInterestsEffect,\n  OrderReturnRequestEffect,\n];\n\nexport * from './billing-countries.effect';\nexport * from './clear-miscs-data.effect';\nexport * from './consignment-tracking.effect';\nexport * from './delivery-countries.effect';\nexport * from './notification-preference.effect';\nexport * from './order-details.effect';\nexport * from './order-return-request.effect';\nexport * from './payment-methods.effect';\nexport * from './regions.effect';\nexport * from './reset-password.effect';\nexport * from './titles.effect';\nexport * from './user-addresses.effect';\nexport * from './user-consents.effect';\nexport * from './user-details.effect';\nexport * from './user-orders.effect';\nexport * from './user-register.effect';\nexport * from './customer-coupon.effect';\nexport * from './product-interests.effect';\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { metaReducers, reducerToken, reducerProvider } from './reducers/index';\r\nimport { effects } from './effects/index';\r\nimport { USER_FEATURE } from './user-state';\r\nimport { StateModule } from '../../state/state.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    StateModule,\r\n    StoreModule.forFeature(USER_FEATURE, reducerToken, { metaReducers }),\r\n    EffectsModule.forFeature(effects),\r\n    RouterModule,\r\n  ],\r\n  providers: [reducerProvider],\r\n})\r\nexport class UserStoreModule {}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { UserStoreModule } from './store/user-store.module';\r\n\r\n@NgModule({\r\n  imports: [UserStoreModule],\r\n})\r\nexport class UserModule {\r\n  static forRoot(): ModuleWithProviders<UserModule> {\r\n    return {\r\n      ngModule: UserModule,\r\n    };\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of core\r\n */\r\nexport * from './src/anonymous-consents/index';\r\nexport * from './src/asm/index';\r\nexport * from './src/auth/index';\r\nexport * from './src/cart/index';\r\nexport * from './src/checkout/index';\r\nexport * from './src/cms/index';\r\nexport * from './src/config/index';\r\nexport * from './src/event/index';\r\nexport * from './src/features-config/index';\r\nexport * from './src/global-message/index';\r\nexport * from './src/i18n/index';\r\nexport * from './src/kyma/index';\r\nexport * from './src/model/index';\r\nexport * from './src/occ/index';\r\nexport * from './src/personalization/index';\r\nexport * from './src/process/index';\r\nexport * from './src/product/index';\r\nexport * from './src/routing/index';\r\nexport * from './src/site-context/index';\r\nexport * from './src/smart-edit/index';\r\nexport * from './src/ssr/index';\r\nexport * from './src/state/index';\r\nexport * from './src/store-finder/index';\r\nexport * from './src/user/index';\r\nexport * from './src/util/index';\r\nexport * from './src/window/index';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {AnonymousConsentsInterceptor as ɵy} from './src/anonymous-consents/http-interceptors/anonymous-consents-interceptor';\nexport {interceptors as ɵx} from './src/anonymous-consents/http-interceptors/index';\nexport {AnonymousConsentsStoreModule as ɵg,anonymousConsentsStoreConfigFactory as ɵf} from './src/anonymous-consents/store/anonymous-consents-store.module';\nexport {AnonymousConsentsEffects as ɵs} from './src/anonymous-consents/store/effects/anonymous-consents.effect';\nexport {effects as ɵr} from './src/anonymous-consents/store/effects/index';\nexport {reducer as ɵv} from './src/anonymous-consents/store/reducers/anonymous-consents-banner.reducer';\nexport {reducer as ɵw} from './src/anonymous-consents/store/reducers/anonymous-consents-update.reducer';\nexport {reducer as ɵu} from './src/anonymous-consents/store/reducers/anonymous-consents.reducer';\nexport {clearAnonymousConsentTemplates as ɵp,getReducers as ɵm,metaReducers as ɵq,reducerProvider as ɵo,reducerToken as ɵn} from './src/anonymous-consents/store/reducers/index';\nexport {defaultAsmConfig as ɵbo} from './src/asm/config/default-asm-config';\nexport {CustomerSupportAgentAuthErrorInterceptor as ɵbm} from './src/asm/http-interceptors/csagent-auth-error.interceptor';\nexport {interceptors as ɵbl} from './src/asm/http-interceptors/index';\nexport {CustomerSupportAgentErrorHandlingService as ɵbn} from './src/asm/services/csagent-error-handling.service';\nexport {AsmStoreModule as ɵba,asmStoreConfigFactory as ɵz} from './src/asm/store/asm-store.module';\nexport {CustomerSupportAgentTokenEffects as ɵbi} from './src/asm/store/effects/csagent-token.effect';\nexport {CustomerEffects as ɵbh} from './src/asm/store/effects/customer.effect';\nexport {effects as ɵbg} from './src/asm/store/effects/index';\nexport {reducer as ɵbk} from './src/asm/store/reducers/asm-ui.reducer';\nexport {clearCustomerSupportAgentAsmState as ɵbe,getReducers as ɵbb,metaReducers as ɵbf,reducerProvider as ɵbd,reducerToken as ɵbc} from './src/asm/store/reducers/index';\nexport {defaultAuthConfig as ɵcb} from './src/auth/config/default-auth-config';\nexport {AuthErrorInterceptor as ɵcf} from './src/auth/http-interceptors/auth-error.interceptor';\nexport {ClientTokenInterceptor as ɵcd} from './src/auth/http-interceptors/client-token.interceptor';\nexport {interceptors as ɵcc} from './src/auth/http-interceptors/index';\nexport {TokenRevocationInterceptor as ɵcj} from './src/auth/http-interceptors/token-revocation.interceptor';\nexport {UserTokenInterceptor as ɵce} from './src/auth/http-interceptors/user-token.interceptor';\nexport {ClientAuthenticationTokenService as ɵbz} from './src/auth/services/client-authentication/client-authentication-token.service';\nexport {ClientErrorHandlingService as ɵci} from './src/auth/services/client-error/client-error-handling.service';\nexport {UserAuthenticationTokenService as ɵbj} from './src/auth/services/user-authentication/user-authentication-token.service';\nexport {UserErrorHandlingService as ɵcg} from './src/auth/services/user-error/user-error-handling.service';\nexport {AuthStoreModule as ɵbq,authStoreConfigFactory as ɵbp} from './src/auth/store/auth-store.module';\nexport {ClientTokenEffect as ɵbx} from './src/auth/store/effects/client-token.effect';\nexport {effects as ɵbw} from './src/auth/store/effects/index';\nexport {UserTokenEffects as ɵby} from './src/auth/store/effects/user-token.effect';\nexport {clearAuthState as ɵbu,getReducers as ɵbr,metaReducers as ɵbv,reducerProvider as ɵbt,reducerToken as ɵbs} from './src/auth/store/reducers/index';\nexport {reducer as ɵca} from './src/auth/store/reducers/user-token.reducer';\nexport {cartStatePersistenceFactory as ɵa} from './src/cart/cart.module';\nexport {SaveCartAdapter as ɵcv} from './src/cart/connectors/save-cart/save-cart.adapter';\nexport {SaveCartConnector as ɵcu} from './src/cart/connectors/save-cart/save-cart.connecter';\nexport {CartPageMetaResolver as ɵdd} from './src/cart/services/cart-page-meta.resolver';\nexport {CartEntryEffects as ɵcr} from './src/cart/store/effects/cart-entry.effect';\nexport {CartVoucherEffects as ɵcs} from './src/cart/store/effects/cart-voucher.effect';\nexport {CartEffects as ɵcq} from './src/cart/store/effects/cart.effect';\nexport {MultiCartEffects as ɵcw} from './src/cart/store/effects/multi-cart.effect';\nexport {WishListEffects as ɵct} from './src/cart/store/effects/wish-list.effect';\nexport {MultiCartStoreModule as ɵck} from './src/cart/store/multi-cart-store.module';\nexport {clearMultiCartState as ɵcl,getMultiCartReducers as ɵco,multiCartMetaReducers as ɵcm,multiCartReducerProvider as ɵcp,multiCartReducerToken as ɵcn} from './src/cart/store/reducers/index';\nexport {activeCartReducer as ɵda,cartEntitiesReducer as ɵdb,wishListReducer as ɵdc} from './src/cart/store/reducers/multi-cart.reducer';\nexport {CheckoutStoreModule as ɵdf} from './src/checkout/store/checkout-store.module';\nexport {AddressVerificationEffect as ɵdk} from './src/checkout/store/effects/address-verification.effect';\nexport {CardTypesEffects as ɵdl} from './src/checkout/store/effects/card-types.effect';\nexport {CheckoutEffects as ɵdm} from './src/checkout/store/effects/checkout.effect';\nexport {effects as ɵdj} from './src/checkout/store/effects/index';\nexport {reducer as ɵdp} from './src/checkout/store/reducers/address-verification.reducer';\nexport {reducer as ɵdo} from './src/checkout/store/reducers/card-types.reducer';\nexport {reducer as ɵdn} from './src/checkout/store/reducers/checkout.reducer';\nexport {getReducers as ɵdg,reducerProvider as ɵdi,reducerToken as ɵdh} from './src/checkout/store/reducers/index';\nexport {PageMetaResolver as ɵgk} from './src/cms';\nexport {PageMetaResolver as ɵgm} from './src/cms/page';\nexport {CmsStoreModule as ɵdr,cmsStoreConfigFactory as ɵdq} from './src/cms/store/cms-store.module';\nexport {ComponentsEffects as ɵdy} from './src/cms/store/effects/components.effect';\nexport {effects as ɵdx} from './src/cms/store/effects/index';\nexport {NavigationEntryItemEffects as ɵdz} from './src/cms/store/effects/navigation-entry-item.effect';\nexport {PageEffects as ɵea} from './src/cms/store/effects/page.effect';\nexport {reducer as ɵef} from './src/cms/store/reducers/components.reducer';\nexport {clearCmsState as ɵdv,getReducers as ɵds,metaReducers as ɵdw,reducerProvider as ɵdu,reducerToken as ɵdt} from './src/cms/store/reducers/index';\nexport {reducer as ɵeg} from './src/cms/store/reducers/navigation-entry-item.reducer';\nexport {reducer as ɵec} from './src/cms/store/reducers/page-data.reducer';\nexport {reducer as ɵee} from './src/cms/store/reducers/page-index.reducer';\nexport {Config as ɵeb} from './src/config';\nexport {CONFIG_INITIALIZER_FORROOT_GUARD as ɵd} from './src/config/config-initializer/config-initializer';\nexport {TEST_CONFIG_COOKIE_NAME as ɵb,configFromCookieFactory as ɵc} from './src/config/test-config.module';\nexport {defaultGlobalMessageConfigFactory as ɵen} from './src/global-message/config/default-global-message-config';\nexport {HttpErrorInterceptor as ɵeo} from './src/global-message/http-interceptors/http-error.interceptor';\nexport {GlobalMessageEffect as ɵem} from './src/global-message/store/effects/global-message.effect';\nexport {GlobalMessageStoreModule as ɵeh} from './src/global-message/store/global-message-store.module';\nexport {reducer as ɵel} from './src/global-message/store/reducers/global-message.reducer';\nexport {getReducers as ɵei,reducerProvider as ɵek,reducerToken as ɵej} from './src/global-message/store/reducers/index';\nexport {defaultI18nConfig as ɵep} from './src/i18n/config/default-i18n-config';\nexport {i18nextInit as ɵer} from './src/i18n/i18next/i18next-init';\nexport {i18nextProviders as ɵeq} from './src/i18n/i18next/i18next-providers';\nexport {MockTranslationService as ɵes} from './src/i18n/testing/mock-translation.service';\nexport {defaultKymaConfig as ɵfc} from './src/kyma/config/default-kyma-config';\nexport {effects as ɵfa} from './src/kyma/store/effects/index';\nexport {OpenIdTokenEffect as ɵfb} from './src/kyma/store/effects/open-id-token.effect';\nexport {KymaStoreModule as ɵeu,kymaStoreConfigFactory as ɵet} from './src/kyma/store/kyma-store.module';\nexport {clearKymaState as ɵey,getReducers as ɵev,metaReducers as ɵez,reducerProvider as ɵex,reducerToken as ɵew} from './src/kyma/store/reducers/index';\nexport {defaultOccAsmConfig as ɵfd} from './src/occ/adapters/asm/default-occ-asm-config';\nexport {defaultOccCartConfig as ɵfe} from './src/occ/adapters/cart/default-occ-cart-config';\nexport {OccSaveCartAdapter as ɵff} from './src/occ/adapters/cart/occ-save-cart.adapter';\nexport {defaultOccProductConfig as ɵfg} from './src/occ/adapters/product/default-occ-product-config';\nexport {defaultOccSiteContextConfig as ɵfh} from './src/occ/adapters/site-context/default-occ-site-context-config';\nexport {defaultOccStoreFinderConfig as ɵfi} from './src/occ/adapters/store-finder/default-occ-store-finder-config';\nexport {defaultOccUserConfig as ɵfj} from './src/occ/adapters/user/default-occ-user-config';\nexport {initConfig as ɵe} from './src/occ/config-loader/occ-config-loader.module';\nexport {defaultPersonalizationConfig as ɵfl} from './src/personalization/config/default-personalization-config';\nexport {interceptors as ɵfm} from './src/personalization/http-interceptors/index';\nexport {OccPersonalizationIdInterceptor as ɵfn} from './src/personalization/http-interceptors/occ-personalization-id.interceptor';\nexport {OccPersonalizationTimeInterceptor as ɵfo} from './src/personalization/http-interceptors/occ-personalization-time.interceptor';\nexport {ProcessStoreModule as ɵfp} from './src/process/store/process-store.module';\nexport {getReducers as ɵfq,reducerProvider as ɵfs,reducerToken as ɵfr} from './src/process/store/reducers/index';\nexport {CouponSearchPageResolver as ɵgl} from './src/product/services/coupon-search-page-meta.resolver';\nexport {effects as ɵga} from './src/product/store/effects/index';\nexport {ProductReferencesEffects as ɵgb} from './src/product/store/effects/product-references.effect';\nexport {ProductReviewsEffects as ɵgc} from './src/product/store/effects/product-reviews.effect';\nexport {ProductsSearchEffects as ɵgd} from './src/product/store/effects/product-search.effect';\nexport {ProductEffects as ɵge} from './src/product/store/effects/product.effect';\nexport {ProductStoreModule as ɵfu,productStoreConfigFactory as ɵft} from './src/product/store/product-store.module';\nexport {clearProductsState as ɵfy,getReducers as ɵfv,metaReducers as ɵfz,reducerProvider as ɵfx,reducerToken as ɵfw} from './src/product/store/reducers/index';\nexport {reducer as ɵgj} from './src/product/store/reducers/product-references.reducer';\nexport {reducer as ɵgi} from './src/product/store/reducers/product-reviews.reducer';\nexport {reducer as ɵgf} from './src/product/store/reducers/product-search.reducer';\nexport {UrlParsingService as ɵch} from './src/routing/configurable-routes/url-translation/url-parsing.service';\nexport {addExternalRoutesFactory as ɵgn} from './src/routing/external-routes/external-routes.providers';\nexport {effects as ɵgt} from './src/routing/store/effects/index';\nexport {RouterEffects as ɵgu} from './src/routing/store/effects/router.effect';\nexport {CustomSerializer as ɵgs,getReducers as ɵgo,reducer as ɵgp,reducerProvider as ɵgr,reducerToken as ɵgq} from './src/routing/store/reducers/router.reducer';\nexport {baseSiteConfigValidator as ɵhn} from './src/site-context/config/base-site-config-validator';\nexport {defaultSiteContextConfigFactory as ɵhh} from './src/site-context/config/default-site-context-config';\nexport {contextServiceProviders as ɵhj,initializeContext as ɵhi} from './src/site-context/providers/context-service-providers';\nexport {siteContextParamsProviders as ɵhm} from './src/site-context/providers/site-context-params-providers';\nexport {SiteContextParamsService as ɵde} from './src/site-context/services/site-context-params.service';\nexport {SiteContextRoutesHandler as ɵhk} from './src/site-context/services/site-context-routes-handler';\nexport {SiteContextUrlSerializer as ɵhl} from './src/site-context/services/site-context-url-serializer';\nexport {BaseSiteEffects as ɵhd} from './src/site-context/store/effects/base-site.effect';\nexport {CurrenciesEffects as ɵhc} from './src/site-context/store/effects/currencies.effect';\nexport {effects as ɵha} from './src/site-context/store/effects/index';\nexport {LanguagesEffects as ɵhb} from './src/site-context/store/effects/languages.effect';\nexport {reducer as ɵhg} from './src/site-context/store/reducers/base-site.reducer';\nexport {reducer as ɵhf} from './src/site-context/store/reducers/currencies.reducer';\nexport {getReducers as ɵgx,reducerProvider as ɵgz,reducerToken as ɵgy} from './src/site-context/store/reducers/index';\nexport {reducer as ɵhe} from './src/site-context/store/reducers/languages.reducer';\nexport {SiteContextStoreModule as ɵgw,siteContextStoreConfigFactory as ɵgv} from './src/site-context/store/site-context-store.module';\nexport {CmsTicketInterceptor as ɵhp} from './src/smart-edit/http-interceptors/cms-ticket.interceptor';\nexport {interceptors as ɵho} from './src/smart-edit/http-interceptors/index';\nexport {STORAGE_SYNC_META_REDUCER as ɵi,TRANSFER_STATE_META_REDUCER as ɵh,stateMetaReducers as ɵj} from './src/state/reducers/index';\nexport {getStorageSyncReducer as ɵk} from './src/state/reducers/storage-sync.reducer';\nexport {getTransferStateReducer as ɵl} from './src/state/reducers/transfer-state.reducer';\nexport {entityLoaderReducer as ɵed} from './src/state/utils/entity-loader/entity-loader.reducer';\nexport {entityProcessesLoaderReducer as ɵcx} from './src/state/utils/entity-processes-loader/entity-processes-loader.reducer';\nexport {entityReducer as ɵcy} from './src/state/utils/entity/entity.reducer';\nexport {loaderReducer as ɵt} from './src/state/utils/loader/loader.reducer';\nexport {processesLoaderReducer as ɵcz} from './src/state/utils/processes-loader';\nexport {entityScopedLoaderReducer as ɵgg} from './src/state/utils/scoped-loader/entity-scoped-loader.reducer';\nexport {scopedLoaderReducer as ɵgh} from './src/state/utils/scoped-loader/scoped-loader.reducer';\nexport {defaultStoreFinderConfig as ɵhx} from './src/store-finder/config/default-store-finder-config';\nexport {FindStoresEffect as ɵhv} from './src/store-finder/store/effects/find-stores.effect';\nexport {effects as ɵhu} from './src/store-finder/store/effects/index';\nexport {ViewAllStoresEffect as ɵhw} from './src/store-finder/store/effects/view-all-stores.effect';\nexport {getReducers as ɵhr,reducerProvider as ɵht,reducerToken as ɵhs} from './src/store-finder/store/reducers/index';\nexport {StoreFinderStoreModule as ɵhq} from './src/store-finder/store/store-finder-store.module';\nexport {UserNotificationPreferenceAdapter as ɵfk} from './src/user/connectors/notification-preference/user-notification-preference.adapter';\nexport {UserNotificationPreferenceConnector as ɵja} from './src/user/connectors/notification-preference/user-notification-preference.connector';\nexport {BillingCountriesEffect as ɵif} from './src/user/store/effects/billing-countries.effect';\nexport {ClearMiscsDataEffect as ɵig} from './src/user/store/effects/clear-miscs-data.effect';\nexport {ConsignmentTrackingEffects as ɵih} from './src/user/store/effects/consignment-tracking.effect';\nexport {CustomerCouponEffects as ɵiv} from './src/user/store/effects/customer-coupon.effect';\nexport {DeliveryCountriesEffects as ɵii} from './src/user/store/effects/delivery-countries.effect';\nexport {ForgotPasswordEffects as ɵix} from './src/user/store/effects/forgot-password.effect';\nexport {effects as ɵie} from './src/user/store/effects/index';\nexport {NotificationPreferenceEffects as ɵij} from './src/user/store/effects/notification-preference.effect';\nexport {OrderDetailsEffect as ɵik} from './src/user/store/effects/order-details.effect';\nexport {OrderReturnRequestEffect as ɵil} from './src/user/store/effects/order-return-request.effect';\nexport {UserPaymentMethodsEffects as ɵim} from './src/user/store/effects/payment-methods.effect';\nexport {ProductInterestsEffect as ɵiw} from './src/user/store/effects/product-interests.effect';\nexport {RegionsEffects as ɵin} from './src/user/store/effects/regions.effect';\nexport {ResetPasswordEffects as ɵio} from './src/user/store/effects/reset-password.effect';\nexport {TitlesEffects as ɵip} from './src/user/store/effects/titles.effect';\nexport {UpdateEmailEffects as ɵiy} from './src/user/store/effects/update-email.effect';\nexport {UpdatePasswordEffects as ɵiz} from './src/user/store/effects/update-password.effect';\nexport {UserAddressesEffects as ɵiq} from './src/user/store/effects/user-addresses.effect';\nexport {UserConsentsEffect as ɵir} from './src/user/store/effects/user-consents.effect';\nexport {UserDetailsEffects as ɵis} from './src/user/store/effects/user-details.effect';\nexport {UserOrdersEffect as ɵit} from './src/user/store/effects/user-orders.effect';\nexport {UserRegisterEffects as ɵiu} from './src/user/store/effects/user-register.effect';\nexport {reducer as ɵjd} from './src/user/store/reducers/billing-countries.reducer';\nexport {reducer as ɵjn} from './src/user/store/reducers/consignment-tracking.reducer';\nexport {reducer as ɵjo} from './src/user/store/reducers/customer-coupon.reducer';\nexport {reducer as ɵjj} from './src/user/store/reducers/delivery-countries.reducer';\nexport {clearUserState as ɵic,getReducers as ɵhz,metaReducers as ɵid,reducerProvider as ɵib,reducerToken as ɵia} from './src/user/store/reducers/index';\nexport {reducer as ɵjp} from './src/user/store/reducers/notification-preference.reducer';\nexport {reducer as ɵjh} from './src/user/store/reducers/order-details.reducer';\nexport {reducer as ɵji} from './src/user/store/reducers/order-return-request.reducer';\nexport {reducer as ɵjf} from './src/user/store/reducers/payment-methods.reducer';\nexport {reducer as ɵjq} from './src/user/store/reducers/product-interests.reducer';\nexport {reducer as ɵjl} from './src/user/store/reducers/regions.reducer';\nexport {reducer as ɵjm} from './src/user/store/reducers/reset-password.reducer';\nexport {reducer as ɵjk} from './src/user/store/reducers/titles.reducer';\nexport {reducer as ɵjc} from './src/user/store/reducers/user-addresses.reducer';\nexport {reducer as ɵje} from './src/user/store/reducers/user-consents.reducer';\nexport {reducer as ɵjb} from './src/user/store/reducers/user-details.reducer';\nexport {reducer as ɵjg} from './src/user/store/reducers/user-orders.reducer';\nexport {UserStoreModule as ɵhy} from './src/user/store/user-store.module';"],"names":["loaderResetMeta","StateUtils.LoaderLoadAction","StateUtils.LoaderFailAction","StateUtils.LoaderSuccessAction","AuthActions.LoadUserToken","AuthSelectors.getUserToken","AuthActions.RefreshUserToken","AuthActions.LoadUserTokenSuccess","AuthActions.Logout","AuthActions.RevokeUserToken","AuthSelectors.getClientTokenState","AuthActions.LoadClientToken","RoutingSelector.getRouterState","RoutingSelector.getPageContext","RoutingSelector.getNextPageContext","RoutingSelector.isNavigating","RoutingActions.RouteGoByUrlAction","RoutingActions.RouteBackAction","RoutingActions.RouteForwardAction","RoutingActions.RouteGoAction","SiteContextSelectors.getActiveBaseSite","SiteContextActions.SetActiveBaseSite","SiteContextSelectors.getBaseSiteData","SiteContextActions.LoadBaseSite","AuthActions.LOAD_CLIENT_TOKEN","AuthActions.LoadClientTokenSuccess","AuthActions.LoadClientTokenFail","AuthActions.LOAD_USER_TOKEN","AuthActions.LoadUserTokenFail","AuthActions.LOAD_USER_TOKEN_SUCCESS","AuthActions.Login","AuthActions.REFRESH_USER_TOKEN","AuthActions.RefreshUserTokenSuccess","AuthActions.RefreshUserTokenFail","AuthActions.REVOKE_USER_TOKEN","AuthActions.RevokeUserTokenSuccess","AuthActions.RevokeUserTokenFail","AuthActions.REFRESH_USER_TOKEN_SUCCESS","AuthActions.LOAD_USER_TOKEN_FAIL","AuthActions.REFRESH_USER_TOKEN_FAIL","fromUserTokenReducer.reducer","AuthActions.LOGOUT","StateUtils.LoaderResetAction","StateUtils.loaderValueSelector","StateUtils.loaderLoadingSelector","StateUtils.loaderSuccessSelector","StateUtils.loaderErrorSelector","AnonymousConsentsActions.LoadAnonymousConsentTemplates","AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue","AnonymousConsentsSelectors.getAnonymousConsentTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading","AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess","AnonymousConsentsSelectors.getAnonymousConsentTemplatesError","AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates","AnonymousConsentsSelectors.getAnonymousConsents","AnonymousConsentsActions.SetAnonymousConsents","AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode","AnonymousConsentsActions.GiveAnonymousConsent","AnonymousConsentsActions.WithdrawAnonymousConsent","AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed","AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed","AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate","AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated","SiteContextSelectors.getAllCurrencies","SiteContextActions.LoadCurrencies","SiteContextSelectors.getActiveCurrency","SiteContextActions.SetActiveCurrency","SiteContextSelectors.getAllLanguages","SiteContextActions.LoadLanguages","SiteContextSelectors.getActiveLanguage","SiteContextActions.SetActiveLanguage","headers","interceptors","StateUtils.entityLoaderStateSelector","StateUtils.EntityLoadAction","StateUtils.EntityFailAction","StateUtils.EntitySuccessAction","StateUtils.EntityLoaderResetAction","UserActions.LoadUserConsents","UsersSelectors.getConsentsValue","UsersSelectors.getConsentsLoading","UsersSelectors.getConsentsSuccess","UsersSelectors.getConsentsError","UserActions.ResetLoadUserConsents","UsersSelectors.getConsentByTemplateId","UserActions.GiveUserConsent","UserActions.ResetGiveUserConsentProcess","UserActions.WithdrawUserConsent","UserActions.ResetWithdrawUserConsentProcess","AnonymousConsentsActions.LOAD_ANONYMOUS_CONSENT_TEMPLATES","AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess","AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail","UserActions.REGISTER_USER_SUCCESS","UserActions.TransferAnonymousConsent","effects","SiteContextActions.LOAD_LANGUAGES","SiteContextActions.LoadLanguagesSuccess","SiteContextActions.LoadLanguagesFail","SiteContextActions.SET_ACTIVE_LANGUAGE","SiteContextActions.LanguageChange","SiteContextActions.LOAD_CURRENCIES","SiteContextActions.LoadCurrenciesSuccess","SiteContextActions.LoadCurrenciesFail","SiteContextActions.SET_ACTIVE_CURRENCY","SiteContextActions.CurrencyChange","SiteContextActions.LOAD_BASE_SITE","SiteContextActions.LoadBaseSiteSuccess","SiteContextActions.LoadBaseSiteFail","initialState","reducer","SiteContextActions.LOAD_BASE_SITE_SUCCESS","SiteContextActions.SET_ACTIVE_BASE_SITE","SiteContextActions.LOAD_CURRENCIES_SUCCESS","SiteContextActions.LOAD_LANGUAGES_SUCCESS","getReducers","fromLanguages.reducer","fromCurrencies.reducer","fromBaseSite.reducer","reducerToken","reducerProvider","AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED","AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED","AnonymousConsentsActions.GIVE_ANONYMOUS_CONSENT","AnonymousConsentsActions.WITHDRAW_ANONYMOUS_CONSENT","AnonymousConsentsActions.SET_ANONYMOUS_CONSENTS","fromAnonymousConsents.reducer","fromAnonymousConsentsBanner.reducer","fromAnonymousConsentsUpdate.reducer","SiteContextActions.LANGUAGE_CHANGE","metaReducers","AsmActions.CUSTOMER_SEARCH","AsmActions.CustomerSearchSuccess","AsmActions.CustomerSearchFail","AsmActions.LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN","AsmActions.LoadCustomerSupportAgentTokenSuccess","AsmActions.LoadCustomerSupportAgentTokenFail","AsmActions.ASM_UI_UPDATE","fromAsmUiReducer.reducer","AuthActions.LOGOUT_CUSTOMER_SUPPORT_AGENT","GlobalMessageSelectors.getGlobalMessageEntities","GlobalMessageActions.AddMessage","GlobalMessageActions.RemoveMessage","GlobalMessageActions.RemoveMessagesByType","OAUTH_ENDPOINT","GlobalMessageActions.ADD_MESSAGE","GlobalMessageActions.REMOVE_MESSAGE","GlobalMessageActions.REMOVE_MESSAGES_BY_TYPE","fromGlobalMessage.reducer","GlobalMessageSelectors.getGlobalMessageEntitiesByType","GlobalMessageSelectors.getGlobalMessageCountByType","AsmActions.LoadCustomerSupportAgentToken","AsmSelectors.getCustomerSupportAgentToken","AsmSelectors.getCustomerSupportAgentTokenLoading","AsmActions.LogoutCustomerSupportAgent","AsmActions.CustomerSearch","AsmActions.CustomerSearchReset","AsmSelectors.getCustomerSearchResults","AsmSelectors.getCustomerSearchResultsLoading","AsmActions.AsmUiUpdate","AsmSelectors.getAsmUi","MultiCartSelectors.getCartSelectorFactory","MultiCartSelectors.getCartEntitySelectorFactory","MultiCartSelectors.getCartIsStableSelectorFactory","CartActions.CreateCart","CartActions.MergeCart","CartActions.LoadCart","MultiCartSelectors.getCartEntriesSelectorFactory","CartActions.CartAddEntry","CartActions.CartRemoveEntry","CartActions.CartUpdateEntry","MultiCartSelectors.getCartEntrySelectorFactory","CartActions.AddEmailToCart","CartActions.DeleteCart","MultiCartSelectors.getActiveCartId","SiteContextActions.CURRENCY_CHANGE","CartActions.CART_ADD_ENTRY","CartActions.CartAddEntrySuccess","CartActions.CartAddEntryFail","CartActions.CART_REMOVE_ENTRY","CartActions.CartRemoveEntrySuccess","CartActions.CartRemoveEntryFail","CartActions.CART_UPDATE_ENTRY","CartActions.CartUpdateEntrySuccess","CartActions.CartUpdateEntryFail","CartActions.CART_ADD_VOUCHER","CartActions.CartAddVoucherSuccess","CartActions.CartAddVoucherFail","CartActions.CartProcessesDecrement","CartActions.CART_REMOVE_VOUCHER","CartActions.CartRemoveVoucherSuccess","CartActions.CartRemoveVoucherFail","CartActions.LOAD_CART","CartActions.LoadCartSuccess","CartActions.RemoveCart","CartActions.LoadCartFail","CartActions.CREATE_CART","CartActions.MergeCartSuccess","CartActions.CreateCartSuccess","CartActions.SetTempCart","CartActions.CreateCartFail","CartActions.MERGE_CART","CartActions.CART_ADD_VOUCHER_SUCCESS","CartActions.CART_ADD_ENTRY_SUCCESS","CartActions.CART_REMOVE_ENTRY_SUCCESS","CartActions.CART_UPDATE_ENTRY_SUCCESS","CartActions.CART_REMOVE_VOUCHER_SUCCESS","CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS","CartActions.ResetCartDetails","CartActions.ADD_EMAIL_TO_CART","CartActions.AddEmailToCartSuccess","CartActions.AddEmailToCartFail","CartActions.DELETE_CART","CartActions.DeleteCartSuccess","CartActions.DeleteCartFail","CartActions.CREATE_WISH_LIST","CartActions.CreateWishListSuccess","CartActions.CreateWishListFail","CartActions.LOAD_WISH_LIST","CartActions.LoadWishListSuccess","CartActions.CreateWishList","CartActions.LoadWishListFail","MultiCartSelectors.getWishListId","CartActions.LOAD_CART_SUCCESS","CartActions.CREATE_CART_SUCCESS","CartActions.SET_ACTIVE_CART_ID","CartActions.REMOVE_CART","CartActions.DELETE_CART_SUCCESS","CartActions.CLEAR_CART_STATE","CartActions.CREATE_WISH_LIST_SUCCESS","CartActions.LOAD_WISH_LIST_SUCCESS","CartActions.SET_TEMP_CART","CartActions.CART_ADD_ENTRY_FAIL","StateUtils.entitySelector","StateUtils.initialLoaderState","CmsSelectors.getPageData","CmsSelectors.componentsLoaderStateSelectorFactory","CmsActions.LoadCmsComponent","CmsSelectors.componentsSelectorFactory","CmsSelectors.getCurrentSlotSelectorFactory","CmsSelectors.getNavigationEntryItems","CmsActions.LoadCmsNavigationItems","CmsActions.LoadCmsPageData","CmsSelectors.getPageComponentTypes","CmsSelectors.getPageStateIndexLoaderState","CmsSelectors.getPageStateIndexValue","CmsActions.CmsSetPageFailIndex","MultiCartSelectors.getMultiCartState","CartActions.ClearCartState","CartActions.SetActiveCartId","CartActions.CartProcessesIncrement","CartActions.CartAddVoucher","CartActions.CartRemoveVoucher","CartActions.CartResetAddVoucher","UsersSelectors.getDetails","UserActions.LoadUserDetails","UserActions.RegisterUser","UserActions.RegisterGuest","UserActions.ResetRegisterUserProcess","UserActions.RemoveUser","UserActions.RemoveUserReset","UsersSelectors.getAllTitles","UserActions.LoadTitles","UsersSelectors.getResetPassword","UserActions.UpdateUserDetails","UserActions.ResetUpdateUserDetails","UserActions.ResetPassword","UserActions.ForgotPasswordEmailRequest","UserActions.UpdateEmailAction","UserActions.ResetUpdateEmailAction","UserActions.UpdatePassword","UserActions.UpdatePasswordReset","CartActions.LoadWishList","CheckoutActions.VERIFY_ADDRESS_SUCCESS","CheckoutActions.VERIFY_ADDRESS_FAIL","CheckoutActions.CLEAR_ADDRESS_VERIFICATION_RESULTS","CheckoutActions.LOAD_CARD_TYPES_SUCCESS","CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA","CheckoutActions.ADD_DELIVERY_ADDRESS_SUCCESS","CheckoutActions.SET_DELIVERY_ADDRESS_SUCCESS","CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS","CheckoutActions.SET_DELIVERY_MODE_SUCCESS","CheckoutActions.CREATE_PAYMENT_DETAILS_SUCCESS","CheckoutActions.SET_PAYMENT_DETAILS_SUCCESS","CheckoutActions.CREATE_PAYMENT_DETAILS_FAIL","CheckoutActions.PLACE_ORDER_SUCCESS","CheckoutActions.CLEAR_CHECKOUT_DATA","CheckoutActions.CLEAR_CHECKOUT_STEP","CheckoutActions.CLEAR_SUPPORTED_DELIVERY_MODES","CheckoutActions.LOAD_CHECKOUT_DETAILS_SUCCESS","CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS","CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE","fromCheckout.reducer","fromCardTypes.reducer","fromAddressVerification.reducer","CheckoutActions.VERIFY_ADDRESS","CheckoutActions.VerifyAddressSuccess","CheckoutActions.VerifyAddressFail","CheckoutActions.LOAD_CARD_TYPES","CheckoutActions.LoadCardTypesSuccess","CheckoutActions.LoadCardTypesFail","CheckoutActions.ADD_DELIVERY_ADDRESS","CheckoutActions.SetDeliveryAddress","UserActions.LoadUserAddresses","CheckoutActions.AddDeliveryAddressFail","CheckoutActions.SET_DELIVERY_ADDRESS","CheckoutActions.SetDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryMode","CheckoutActions.ClearSupportedDeliveryModes","CheckoutActions.ResetLoadSupportedDeliveryModesProcess","CheckoutActions.LoadSupportedDeliveryModes","CheckoutActions.SetDeliveryAddressFail","CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES","CheckoutActions.LoadSupportedDeliveryModesSuccess","CheckoutActions.LoadSupportedDeliveryModesFail","CheckoutActions.CheckoutClearMiscsData","CheckoutActions.ClearCheckoutData","AuthActions.LOGIN","CheckoutActions.SET_DELIVERY_MODE","CheckoutActions.SetDeliveryModeSuccess","CheckoutActions.SetDeliveryModeFail","CheckoutActions.CREATE_PAYMENT_DETAILS","CheckoutActions.CreatePaymentDetailsSuccess","UserActions.LoadUserPaymentMethods","CheckoutActions.CreatePaymentDetailsFail","CheckoutActions.SET_PAYMENT_DETAILS","CheckoutActions.SetPaymentDetailsSuccess","CheckoutActions.SetPaymentDetailsFail","CheckoutActions.PLACE_ORDER","CheckoutActions.PlaceOrderSuccess","CheckoutActions.PlaceOrderFail","CheckoutActions.LOAD_CHECKOUT_DETAILS","CheckoutActions.LoadCheckoutDetailsSuccess","CheckoutActions.LoadCheckoutDetailsFail","CartActions.MERGE_CART_SUCCESS","CheckoutActions.LoadCheckoutDetails","CheckoutActions.ClearCheckoutDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryAddressFail","CheckoutActions.ClearCheckoutDeliveryModeSuccess","CheckoutActions.ClearCheckoutDeliveryModeFail","getAddressVerificationResults","fromReducer.getAddressVerificationResults","getCardTypesEntites","fromReducer.getCardTypesEntites","CheckoutActions.PlaceOrder","CheckoutActions.ClearCheckoutStep","CheckoutSelectors.getCheckoutDetailsLoaded","CheckoutSelectors.getCheckoutOrderDetails","CheckoutSelectors.getSupportedDeliveryModes","CheckoutSelectors.getSelectedDeliveryMode","CheckoutSelectors.getSelectedDeliveryModeCode","CheckoutSelectors.getDeliveryAddress","CheckoutActions.ResetSetDeliveryAddressProcess","CheckoutActions.ResetSetDeliveryModeProcess","CheckoutSelectors.getAddressVerificationResults","CheckoutActions.AddDeliveryAddress","CheckoutActions.SetDeliveryMode","CheckoutActions.VerifyAddress","CheckoutActions.ClearAddressVerificationResults","CheckoutActions.ClearCheckoutDeliveryAddress","CheckoutSelectors.getAllCardTypes","CheckoutSelectors.getPaymentDetails","CheckoutActions.ResetSetPaymentDetailsProcess","CheckoutActions.LoadCardTypes","CheckoutActions.CreatePaymentDetails","CheckoutActions.SetPaymentDetails","CheckoutActions.PaymentProcessSuccess","CmsActions.LOAD_CMS_COMPONENT","CmsActions.LoadCmsComponentSuccess","CmsActions.LoadCmsComponentFail","RoutingActions.ROUTER_GO","RoutingActions.ROUTER_GO_BY_URL","RoutingActions.ROUTER_BACK","RoutingActions.ROUTER_FORWARD","fromNgrxRouter.ROUTER_NAVIGATION","fromNgrxRouter.ROUTER_ERROR","fromNgrxRouter.ROUTER_CANCEL","fromNgrxRouter.ROUTER_NAVIGATED","CmsActions.LOAD_CMS_NAVIGATION_ITEMS","CmsActions.LoadCmsNavigationItemsSuccess","CmsActions.LoadCmsNavigationItemsFail","CmsActions.LOAD_CMS_PAGE_DATA","CmsActions.CmsGetComponentFromPage","CmsActions.LoadCmsPageDataSuccess","CmsActions.CmsSetPageSuccessIndex","CmsActions.LoadCmsPageDataFail","CmsActions.LOAD_CMS_COMPONENT_FAIL","CmsActions.CMS_GET_COMPONENT_FROM_PAGE","CmsActions.LOAD_CMS_COMPONENT_SUCCESS","CmsActions.LOAD_CMS_NAVIGATION_ITEMS_SUCCESS","CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS","CmsActions.LOAD_CMS_PAGE_DATA_FAIL","CmsActions.CMS_SET_PAGE_FAIL_INDEX","CmsActions.CMS_SET_PAGE_SUCCESS_INDEX","fromPageReducer.reducer","fromPageIndexReducer.reducer","fromComponentsReducer.reducer","fromNavigation.reducer","KymaActions.LoadOpenIdToken","KymaSelectors.getOpenIdTokenValue","KymaActions.LOAD_OPEN_ID_TOKEN","KymaActions.LoadOpenIdTokenSuccess","KymaActions.LoadOpenIdTokenFail","ProductActions.SEARCH_PRODUCTS_SUCCESS","ProductActions.GET_PRODUCT_SUGGESTIONS_SUCCESS","ProductActions.CLEAR_PRODUCT_SEARCH_RESULT","getSearchResults","fromProductSearch.getSearchResults","getAuxSearchResults","fromProductSearch.getAuxSearchResults","getProductSuggestions","fromProductSearch.getProductSuggestions","ProductSelectors.getSelectedProductReferencesFactory","ProductActions.LoadProductReferences","ProductActions.CleanProductReferences","ProductSelectors.getSelectedProductReviewsFactory","ProductActions.LoadProductReviews","ProductActions.PostProductReview","ProductActions.SearchProducts","ProductSelectors.getSearchResults","ProductActions.ClearProductSearchResult","ProductSelectors.getSelectedProductStateFactory","ProductSelectors.getSelectedProductLoadingFactory","ProductActions.LoadProduct","ProductSelectors.getSelectedProductFactory","ProductActions.LOAD_PRODUCT_SUCCESS","ProductActions.LOAD_PRODUCT_FAIL","ProductActions.LOAD_PRODUCT","ProductSelectors.getSelectedProductSuccessFactory","ProductSelectors.getSelectedProductErrorFactory","ProductSelectors.getAuxSearchResults","ProductSelectors.getProductSuggestions","ProductActions.GetProductSuggestions","ProductActions.LOAD_PRODUCT_REFERENCES","ProductActions.LoadProductReferencesSuccess","ProductActions.LoadProductReferencesFail","ProductActions.LOAD_PRODUCT_REVIEWS","ProductActions.LoadProductReviewsSuccess","ProductActions.LoadProductReviewsFail","ProductActions.POST_PRODUCT_REVIEW","ProductActions.PostProductReviewSuccess","ProductActions.PostProductReviewFail","ProductActions.POST_PRODUCT_REVIEW_SUCCESS","ProductActions.SEARCH_PRODUCTS","ProductActions.SearchProductsSuccess","ProductActions.SearchProductsFail","ProductActions.GET_PRODUCT_SUGGESTIONS","ProductActions.GetProductSuggestionsSuccess","ProductActions.GetProductSuggestionsFail","ProductActions.LoadProductSuccess","ProductActions.LoadProductFail","ProductActions.LOAD_PRODUCT_REFERENCES_SUCCESS","ProductActions.CLEAN_PRODUCT_REFERENCES","ProductActions.LOAD_PRODUCT_REVIEWS_SUCCESS","fromProductsSearch.reducer","fromProductReviews.reducer","fromProductReferences.reducer","StoreFinderSelectors.getStoresLoading","StoreFinderSelectors.getFindStoresEntities","StoreFinderSelectors.getViewAllStoresLoading","StoreFinderSelectors.getViewAllStoresEntities","StoreFinderActions.FindStoresOnHold","StoreFinderActions.FindStores","StoreFinderActions.ViewAllStores","StoreFinderActions.FindStoreById","StoreFinderActions.FIND_STORES","StoreFinderActions.FindStoresSuccess","StoreFinderActions.FindStoresFail","StoreFinderActions.FIND_STORE_BY_ID","StoreFinderActions.FindStoreByIdSuccess","StoreFinderActions.FindStoreByIdFail","StoreFinderActions.VIEW_ALL_STORES","StoreFinderActions.ViewAllStoresSuccess","StoreFinderActions.ViewAllStoresFail","UserActions.AddUserAddress","UserActions.UpdateUserAddress","UserActions.DeleteUserAddress","UsersSelectors.getAddresses","UsersSelectors.getAddressesLoading","UsersSelectors.getAddressesLoadedSuccess","UserActions.LoadDeliveryCountries","UsersSelectors.getAllDeliveryCountries","UsersSelectors.countrySelectorFactory","UserActions.LoadRegions","UserActions.ClearRegions","UsersSelectors.getRegionsDataAndLoading","UsersSelectors.getOrderDetails","UserActions.LoadOrderDetails","UserActions.ClearOrderDetails","UsersSelectors.getOrdersState","UsersSelectors.getOrdersLoaded","UserActions.LoadUserOrders","UserActions.ClearUserOrders","UsersSelectors.getConsignmentTracking","UserActions.LoadConsignmentTracking","UserActions.ClearConsignmentTracking","UserActions.CancelOrder","UserActions.ResetCancelOrderProcess","UserActions.LoadCustomerCoupons","UsersSelectors.getCustomerCouponsState","UsersSelectors.getCustomerCouponsLoaded","UsersSelectors.getCustomerCouponsLoading","UserActions.SubscribeCustomerCoupon","UserActions.UnsubscribeCustomerCoupon","UserActions.ClaimCustomerCoupon","UsersSelectors.getPaymentMethods","UsersSelectors.getPaymentMethodsLoading","UsersSelectors.getPaymentMethodsLoadedSuccess","UserActions.SetDefaultUserPaymentMethod","UserActions.DeleteUserPaymentMethod","UsersSelectors.getAllBillingCountries","UserActions.LoadBillingCountries","UserActions.CreateOrderReturnRequest","UsersSelectors.getOrderReturnRequest","UsersSelectors.getOrderReturnRequestListState","UserActions.LoadOrderReturnRequest","UserActions.LoadOrderReturnRequestList","UserActions.ClearOrderReturnRequestList","UsersSelectors.getOrderReturnRequestLoading","UsersSelectors.getOrderReturnRequestSuccess","UserActions.ClearOrderReturnRequest","UserActions.CancelOrderReturnRequest","UserActions.ResetCancelReturnProcess","UsersSelectors.getPreferences","UsersSelectors.getEnabledPreferences","UserActions.LoadNotificationPreferences","UserActions.ClearNotificationPreferences","UsersSelectors.getPreferencesLoading","UserActions.UpdateNotificationPreferences","UserActions.ResetNotificationPreferences","UserActions.LoadProductInterests","UsersSelectors.getInterests","UsersSelectors.getInterestsState","UsersSelectors.getInterestsLoading","UserActions.RemoveProductInterest","UserActions.AddProductInterest","UserActions.ResetAddInterestState","UserActions.ResetRemoveInterestState","UserActions.ClearProductInterests","UserActions.LOAD_BILLING_COUNTRIES_SUCCESS","UserActions.CLEAR_USER_MISCS_DATA","UserActions.LOAD_CONSIGNMENT_TRACKING_SUCCESS","UserActions.CLEAR_CONSIGNMENT_TRACKING","UserActions.LOAD_DELIVERY_COUNTRIES_SUCCESS","UserActions.LOAD_NOTIFICATION_PREFERENCES_FAIL","UserActions.LOAD_NOTIFICATION_PREFERENCES_SUCCESS","UserActions.UPDATE_NOTIFICATION_PREFERENCES_SUCCESS","UserActions.LOAD_ORDER_DETAILS_SUCCESS","UserActions.LOAD_USER_PAYMENT_METHODS_SUCCESS","UserActions.LOAD_USER_PAYMENT_METHODS_FAIL","UserActions.LOAD_REGIONS_SUCCESS","UserActions.RESET_PASSWORD_SUCCESS","UserActions.LOAD_TITLES_SUCCESS","UserActions.LOAD_USER_ADDRESSES_FAIL","UserActions.LOAD_USER_ADDRESSES_SUCCESS","UserActions.LOAD_USER_CONSENTS_SUCCESS","UserActions.GIVE_USER_CONSENT_SUCCESS","UserActions.LOAD_USER_DETAILS_SUCCESS","UserActions.UPDATE_USER_DETAILS_SUCCESS","UserActions.LOAD_USER_ORDERS_SUCCESS","UserActions.LOAD_USER_ORDERS_FAIL","fromActions.LOAD_CUSTOMER_COUPONS_SUCCESS","fromActions.SUBSCRIBE_CUSTOMER_COUPON_SUCCESS","fromActions.UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS","UserActions.LOAD_PRODUCT_INTERESTS_SUCCESS","UserActions.LOAD_PRODUCT_INTERESTS_FAIL","UserActions.LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS","fromUserDetailsReducer.reducer","fromAddressesReducer.reducer","fromBillingCountriesReducer.reducer","fromUserConsentsReducer.reducer","fromPaymentReducer.reducer","fromUserOrdersReducer.reducer","fromOrderDetailsReducer.reducer","fromOrderReturnRequestReducer.reducer","fromDeliveryCountries.reducer","fromTitlesReducer.reducer","fromRegionsReducer.reducer","fromResetPasswordReducer.reducer","fromConsignmentTrackingReducer.reducer","fromCustomerCouponReducer.reducer","fromNotificationPreferenceReducer.reducer","fromInterestsReducer.reducer","UserActions.LOAD_BILLING_COUNTRIES","UserActions.LoadBillingCountriesSuccess","UserActions.LoadBillingCountriesFail","UserActions.ClearUserMiscsData","UserActions.LOAD_CONSIGNMENT_TRACKING","UserActions.LoadConsignmentTrackingSuccess","UserActions.LoadConsignmentTrackingFail","UserActions.LOAD_DELIVERY_COUNTRIES","UserActions.LoadDeliveryCountriesSuccess","UserActions.LoadDeliveryCountriesFail","UserActions.FORGOT_PASSWORD_EMAIL_REQUEST","UserActions.ForgotPasswordEmailRequestSuccess","UserActions.ForgotPasswordEmailRequestFail","UserActions.LOAD_NOTIFICATION_PREFERENCES","UserActions.LoadNotificationPreferencesSuccess","UserActions.LoadNotificationPreferencesFail","UserActions.UPDATE_NOTIFICATION_PREFERENCES","UserActions.UpdateNotificationPreferencesSuccess","UserActions.UpdateNotificationPreferencesFail","UserActions.LOAD_ORDER_DETAILS","UserActions.LoadOrderDetailsSuccess","UserActions.LoadOrderDetailsFail","UserActions.CANCEL_ORDER","UserActions.CancelOrderSuccess","UserActions.CancelOrderFail","UserActions.CREATE_ORDER_RETURN_REQUEST","UserActions.CreateOrderReturnRequestSuccess","UserActions.CreateOrderReturnRequestFail","UserActions.LOAD_ORDER_RETURN_REQUEST","UserActions.LoadOrderReturnRequestSuccess","UserActions.LoadOrderReturnRequestFail","UserActions.CANCEL_ORDER_RETURN_REQUEST","UserActions.CancelOrderReturnRequestSuccess","UserActions.CancelOrderReturnRequestFail","UserActions.LOAD_ORDER_RETURN_REQUEST_LIST","UserActions.LoadOrderReturnRequestListSuccess","UserActions.LoadOrderReturnRequestListFail","UserActions.LOAD_USER_PAYMENT_METHODS","UserActions.LoadUserPaymentMethodsSuccess","UserActions.LoadUserPaymentMethodsFail","UserActions.SET_DEFAULT_USER_PAYMENT_METHOD","UserActions.SetDefaultUserPaymentMethodSuccess","UserActions.SetDefaultUserPaymentMethodFail","UserActions.DELETE_USER_PAYMENT_METHOD","UserActions.DeleteUserPaymentMethodSuccess","UserActions.DeleteUserPaymentMethodFail","UserActions.LOAD_REGIONS","UserActions.LoadRegionsSuccess","UserActions.LoadRegionsFail","UserActions.CLEAR_REGIONS","UserActions.RESET_PASSWORD","UserActions.ResetPasswordSuccess","UserActions.ResetPasswordFail","UserActions.LOAD_TITLES","UserActions.LoadTitlesSuccess","UserActions.LoadTitlesFail","UserActions.UPDATE_EMAIL","UserActions.UpdateEmailSuccessAction","UserActions.UpdateEmailErrorAction","UserActions.UPDATE_PASSWORD","UserActions.UpdatePasswordSuccess","UserActions.UpdatePasswordFail","UserActions.LOAD_USER_ADDRESSES","UserActions.LoadUserAddressesSuccess","UserActions.LoadUserAddressesFail","UserActions.ADD_USER_ADDRESS","UserActions.AddUserAddressSuccess","UserActions.AddUserAddressFail","UserActions.UPDATE_USER_ADDRESS","UserActions.UpdateUserAddressSuccess","UserActions.UpdateUserAddressFail","UserActions.DELETE_USER_ADDRESS","UserActions.DeleteUserAddressSuccess","UserActions.DeleteUserAddressFail","UserActions.ADD_USER_ADDRESS_SUCCESS","UserActions.UPDATE_USER_ADDRESS_SUCCESS","UserActions.DELETE_USER_ADDRESS_SUCCESS","UserActions.LOAD_USER_CONSENTS","UserActions.LoadUserConsentsSuccess","UserActions.LoadUserConsentsFail","UserActions.GIVE_USER_CONSENT","UserActions.TRANSFER_ANONYMOUS_CONSENT","UserActions.GiveUserConsentSuccess","UserActions.GiveUserConsentFail","UserActions.WITHDRAW_USER_CONSENT","UserActions.WithdrawUserConsentSuccess","UserActions.WithdrawUserConsentFail","UserActions.LOAD_USER_DETAILS","UserActions.LoadUserDetailsSuccess","UserActions.LoadUserDetailsFail","UserActions.UPDATE_USER_DETAILS","UserActions.UpdateUserDetailsSuccess","UserActions.UpdateUserDetailsFail","UserActions.LOAD_USER_ORDERS","UserActions.LoadUserOrdersSuccess","UserActions.LoadUserOrdersFail","UserActions.REGISTER_USER","UserActions.RegisterUserSuccess","UserActions.RegisterUserFail","UserActions.REGISTER_GUEST","UserActions.RegisterGuestSuccess","UserActions.RegisterGuestFail","UserActions.REMOVE_USER","UserActions.RemoveUserSuccess","UserActions.RemoveUserFail","fromCustomerCouponsAction.LOAD_CUSTOMER_COUPONS","fromCustomerCouponsAction.LoadCustomerCouponsSuccess","fromCustomerCouponsAction.LoadCustomerCouponsFail","fromCustomerCouponsAction.SUBSCRIBE_CUSTOMER_COUPON","fromCustomerCouponsAction.SubscribeCustomerCouponSuccess","fromCustomerCouponsAction.SubscribeCustomerCouponFail","fromCustomerCouponsAction.UNSUBSCRIBE_CUSTOMER_COUPON","fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess","fromCustomerCouponsAction.UnsubscribeCustomerCouponFail","fromCustomerCouponsAction.CLAIM_CUSTOMER_COUPON","fromCustomerCouponsAction.ClaimCustomerCouponSuccess","fromCustomerCouponsAction.ClaimCustomerCouponFail","UserActions.LOAD_PRODUCT_INTERESTS","UserActions.LoadProductInterestsSuccess","UserActions.LoadProductInterestsFail","UserActions.REMOVE_PRODUCT_INTEREST","UserActions.RemoveProductInterestSuccess","UserActions.RemoveProductInterestFail","UserActions.ADD_PRODUCT_INTEREST","UserActions.AddProductInterestSuccess","UserActions.AddProductInterestFail"],"mappings":"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"}