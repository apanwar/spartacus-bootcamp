import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, map, mergeMap, switchMap } from 'rxjs/operators';
import { makeErrorSerializable } from '../../../util/serialization-utils';
import { UserNotificationPreferenceConnector } from '../../connectors/notification-preference/user-notification-preference.connector';
import { UserActions } from '../actions/index';
let NotificationPreferenceEffects = class NotificationPreferenceEffects {
    constructor(actions$, connector) {
        this.actions$ = actions$;
        this.connector = connector;
        this.loadPreferences$ = this.actions$.pipe(ofType(UserActions.LOAD_NOTIFICATION_PREFERENCES), map((action) => action.payload), switchMap((payload) => this.connector.loadAll(payload).pipe(map((preferences) => new UserActions.LoadNotificationPreferencesSuccess(preferences)), catchError((error) => of(new UserActions.LoadNotificationPreferencesFail(makeErrorSerializable(error)))))));
        this.updatePreferences$ = this.actions$.pipe(ofType(UserActions.UPDATE_NOTIFICATION_PREFERENCES), map((action) => action.payload), mergeMap((payload) => this.connector.update(payload.userId, payload.preferences).pipe(map(() => new UserActions.UpdateNotificationPreferencesSuccess(payload.preferences)), catchError((error) => of(new UserActions.UpdateNotificationPreferencesFail(makeErrorSerializable(error)))))));
    }
};
NotificationPreferenceEffects.ctorParameters = () => [
    { type: Actions },
    { type: UserNotificationPreferenceConnector }
];
__decorate([
    Effect()
], NotificationPreferenceEffects.prototype, "loadPreferences$", void 0);
__decorate([
    Effect()
], NotificationPreferenceEffects.prototype, "updatePreferences$", void 0);
NotificationPreferenceEffects = __decorate([
    Injectable()
], NotificationPreferenceEffects);
export { NotificationPreferenceEffects };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLXByZWZlcmVuY2UuZWZmZWN0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL3VzZXIvc3RvcmUvZWZmZWN0cy9ub3RpZmljYXRpb24tcHJlZmVyZW5jZS5lZmZlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hELE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxNQUFNLGlGQUFpRixDQUFDO0FBQ3RJLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUcvQyxJQUFhLDZCQUE2QixHQUExQyxNQUFhLDZCQUE2QjtJQWlEeEMsWUFDVSxRQUFpQixFQUNqQixTQUE4QztRQUQ5QyxhQUFRLEdBQVIsUUFBUSxDQUFTO1FBQ2pCLGNBQVMsR0FBVCxTQUFTLENBQXFDO1FBakR4RCxxQkFBZ0IsR0FFWixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDcEIsTUFBTSxDQUFDLFdBQVcsQ0FBQyw2QkFBNkIsQ0FBQyxFQUNqRCxHQUFHLENBQUMsQ0FBQyxNQUErQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQ3hFLFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQ3BCLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDbEMsR0FBRyxDQUNELENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FDZCxJQUFJLFdBQVcsQ0FBQyxrQ0FBa0MsQ0FBQyxXQUFXLENBQUMsQ0FDbEUsRUFDRCxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUNuQixFQUFFLENBQ0EsSUFBSSxXQUFXLENBQUMsK0JBQStCLENBQzdDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUM3QixDQUNGLENBQ0YsQ0FDRixDQUNGLENBQ0YsQ0FBQztRQUdGLHVCQUFrQixHQUVkLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNwQixNQUFNLENBQUMsV0FBVyxDQUFDLCtCQUErQixDQUFDLEVBQ25ELEdBQUcsQ0FBQyxDQUFDLE1BQWlELEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFDMUUsUUFBUSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FDbkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUM3RCxHQUFHLENBQ0QsR0FBRyxFQUFFLENBQ0gsSUFBSSxXQUFXLENBQUMsb0NBQW9DLENBQ2xELE9BQU8sQ0FBQyxXQUFXLENBQ3BCLENBQ0osRUFDRCxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUNuQixFQUFFLENBQ0EsSUFBSSxXQUFXLENBQUMsaUNBQWlDLENBQy9DLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUM3QixDQUNGLENBQ0YsQ0FDRixDQUNGLENBQ0YsQ0FBQztJQUtDLENBQUM7Q0FDTCxDQUFBOztZQUhxQixPQUFPO1lBQ04sbUNBQW1DOztBQWpEeEQ7SUFEQyxNQUFNLEVBQUU7dUVBcUJQO0FBR0Y7SUFEQyxNQUFNLEVBQUU7eUVBdUJQO0FBL0NTLDZCQUE2QjtJQUR6QyxVQUFVLEVBQUU7R0FDQSw2QkFBNkIsQ0FxRHpDO1NBckRZLDZCQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQWN0aW9ucywgRWZmZWN0LCBvZlR5cGUgfSBmcm9tICdAbmdyeC9lZmZlY3RzJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgY2F0Y2hFcnJvciwgbWFwLCBtZXJnZU1hcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBtYWtlRXJyb3JTZXJpYWxpemFibGUgfSBmcm9tICcuLi8uLi8uLi91dGlsL3NlcmlhbGl6YXRpb24tdXRpbHMnO1xyXG5pbXBvcnQgeyBVc2VyTm90aWZpY2F0aW9uUHJlZmVyZW5jZUNvbm5lY3RvciB9IGZyb20gJy4uLy4uL2Nvbm5lY3RvcnMvbm90aWZpY2F0aW9uLXByZWZlcmVuY2UvdXNlci1ub3RpZmljYXRpb24tcHJlZmVyZW5jZS5jb25uZWN0b3InO1xyXG5pbXBvcnQgeyBVc2VyQWN0aW9ucyB9IGZyb20gJy4uL2FjdGlvbnMvaW5kZXgnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTm90aWZpY2F0aW9uUHJlZmVyZW5jZUVmZmVjdHMge1xyXG4gIEBFZmZlY3QoKVxyXG4gIGxvYWRQcmVmZXJlbmNlcyQ6IE9ic2VydmFibGU8XHJcbiAgICBVc2VyQWN0aW9ucy5Ob3RpZmljYXRpb25QcmVmZXJlbmNlQWN0aW9uXHJcbiAgPiA9IHRoaXMuYWN0aW9ucyQucGlwZShcclxuICAgIG9mVHlwZShVc2VyQWN0aW9ucy5MT0FEX05PVElGSUNBVElPTl9QUkVGRVJFTkNFUyksXHJcbiAgICBtYXAoKGFjdGlvbjogVXNlckFjdGlvbnMuTG9hZE5vdGlmaWNhdGlvblByZWZlcmVuY2VzKSA9PiBhY3Rpb24ucGF5bG9hZCksXHJcbiAgICBzd2l0Y2hNYXAoKHBheWxvYWQpID0+XHJcbiAgICAgIHRoaXMuY29ubmVjdG9yLmxvYWRBbGwocGF5bG9hZCkucGlwZShcclxuICAgICAgICBtYXAoXHJcbiAgICAgICAgICAocHJlZmVyZW5jZXMpID0+XHJcbiAgICAgICAgICAgIG5ldyBVc2VyQWN0aW9ucy5Mb2FkTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNTdWNjZXNzKHByZWZlcmVuY2VzKVxyXG4gICAgICAgICksXHJcbiAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3IpID0+XHJcbiAgICAgICAgICBvZihcclxuICAgICAgICAgICAgbmV3IFVzZXJBY3Rpb25zLkxvYWROb3RpZmljYXRpb25QcmVmZXJlbmNlc0ZhaWwoXHJcbiAgICAgICAgICAgICAgbWFrZUVycm9yU2VyaWFsaXphYmxlKGVycm9yKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgKVxyXG4gICAgICApXHJcbiAgICApXHJcbiAgKTtcclxuXHJcbiAgQEVmZmVjdCgpXHJcbiAgdXBkYXRlUHJlZmVyZW5jZXMkOiBPYnNlcnZhYmxlPFxyXG4gICAgVXNlckFjdGlvbnMuTm90aWZpY2F0aW9uUHJlZmVyZW5jZUFjdGlvblxyXG4gID4gPSB0aGlzLmFjdGlvbnMkLnBpcGUoXHJcbiAgICBvZlR5cGUoVXNlckFjdGlvbnMuVVBEQVRFX05PVElGSUNBVElPTl9QUkVGRVJFTkNFUyksXHJcbiAgICBtYXAoKGFjdGlvbjogVXNlckFjdGlvbnMuVXBkYXRlTm90aWZpY2F0aW9uUHJlZmVyZW5jZXMpID0+IGFjdGlvbi5wYXlsb2FkKSxcclxuICAgIG1lcmdlTWFwKChwYXlsb2FkKSA9PlxyXG4gICAgICB0aGlzLmNvbm5lY3Rvci51cGRhdGUocGF5bG9hZC51c2VySWQsIHBheWxvYWQucHJlZmVyZW5jZXMpLnBpcGUoXHJcbiAgICAgICAgbWFwKFxyXG4gICAgICAgICAgKCkgPT5cclxuICAgICAgICAgICAgbmV3IFVzZXJBY3Rpb25zLlVwZGF0ZU5vdGlmaWNhdGlvblByZWZlcmVuY2VzU3VjY2VzcyhcclxuICAgICAgICAgICAgICBwYXlsb2FkLnByZWZlcmVuY2VzXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApLFxyXG4gICAgICAgIGNhdGNoRXJyb3IoKGVycm9yKSA9PlxyXG4gICAgICAgICAgb2YoXHJcbiAgICAgICAgICAgIG5ldyBVc2VyQWN0aW9ucy5VcGRhdGVOb3RpZmljYXRpb25QcmVmZXJlbmNlc0ZhaWwoXHJcbiAgICAgICAgICAgICAgbWFrZUVycm9yU2VyaWFsaXphYmxlKGVycm9yKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgKVxyXG4gICAgICApXHJcbiAgICApXHJcbiAgKTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGFjdGlvbnMkOiBBY3Rpb25zLFxyXG4gICAgcHJpdmF0ZSBjb25uZWN0b3I6IFVzZXJOb3RpZmljYXRpb25QcmVmZXJlbmNlQ29ubmVjdG9yXHJcbiAgKSB7fVxyXG59XHJcbiJdfQ==