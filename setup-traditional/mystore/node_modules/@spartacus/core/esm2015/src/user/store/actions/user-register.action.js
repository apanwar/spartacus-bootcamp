import { PROCESS_FEATURE } from '../../../process/store/process-state';
import { StateUtils } from '../../../state/utils/index';
import { REGISTER_USER_PROCESS_ID, REMOVE_USER_PROCESS_ID, } from '../user-state';
export const REGISTER_USER = '[User] Register User';
export const REGISTER_USER_FAIL = '[User] Register User Fail';
export const REGISTER_USER_SUCCESS = '[User] Register User Success';
export const RESET_REGISTER_USER_PROCESS = '[User] Reset Register User Process';
export const REGISTER_GUEST = '[User] Register Guest';
export const REGISTER_GUEST_FAIL = '[User] Register Guest Fail';
export const REGISTER_GUEST_SUCCESS = '[User] Register Guest Success';
export const REMOVE_USER = '[User] Remove User';
export const REMOVE_USER_FAIL = '[User] Remove User Fail';
export const REMOVE_USER_SUCCESS = '[User] Remove User Success';
export const REMOVE_USER_RESET = '[User] Reset Remove User Process State';
export class RegisterUser extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);
        this.payload = payload;
        this.type = REGISTER_USER;
    }
}
export class RegisterUserFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID, payload);
        this.payload = payload;
        this.type = REGISTER_USER_FAIL;
    }
}
export class RegisterUserSuccess extends StateUtils.EntitySuccessAction {
    constructor() {
        super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);
        this.type = REGISTER_USER_SUCCESS;
    }
}
export class ResetRegisterUserProcess extends StateUtils.EntityLoaderResetAction {
    constructor() {
        super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);
        this.type = RESET_REGISTER_USER_PROCESS;
    }
}
export class RegisterGuest {
    constructor(payload) {
        this.payload = payload;
        this.type = REGISTER_GUEST;
    }
}
export class RegisterGuestFail {
    constructor(payload) {
        this.payload = payload;
        this.type = REGISTER_GUEST_FAIL;
    }
}
export class RegisterGuestSuccess {
    constructor() {
        this.type = REGISTER_GUEST_SUCCESS;
    }
}
export class RemoveUser extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);
        this.payload = payload;
        this.type = REMOVE_USER;
    }
}
export class RemoveUserFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID, payload);
        this.payload = payload;
        this.type = REMOVE_USER_FAIL;
    }
}
export class RemoveUserSuccess extends StateUtils.EntitySuccessAction {
    constructor() {
        super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);
        this.type = REMOVE_USER_SUCCESS;
    }
}
export class RemoveUserReset extends StateUtils.EntityLoaderResetAction {
    constructor() {
        super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);
        this.type = REMOVE_USER_RESET;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1yZWdpc3Rlci5hY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvdXNlci9zdG9yZS9hY3Rpb25zL3VzZXItcmVnaXN0ZXIuYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUN2RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDeEQsT0FBTyxFQUNMLHdCQUF3QixFQUN4QixzQkFBc0IsR0FDdkIsTUFBTSxlQUFlLENBQUM7QUFFdkIsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLHNCQUFzQixDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLDJCQUEyQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLDhCQUE4QixDQUFDO0FBQ3BFLE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFHLG9DQUFvQyxDQUFDO0FBRWhGLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx1QkFBdUIsQ0FBQztBQUN0RCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyw0QkFBNEIsQ0FBQztBQUNoRSxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRywrQkFBK0IsQ0FBQztBQUV0RSxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsb0JBQW9CLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcseUJBQXlCLENBQUM7QUFDMUQsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsNEJBQTRCLENBQUM7QUFDaEUsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsd0NBQXdDLENBQUM7QUFFMUUsTUFBTSxPQUFPLFlBQWEsU0FBUSxVQUFVLENBQUMsZ0JBQWdCO0lBRTNELFlBQW1CLE9BQW1CO1FBQ3BDLEtBQUssQ0FBQyxlQUFlLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztRQURoQyxZQUFPLEdBQVAsT0FBTyxDQUFZO1FBRDdCLFNBQUksR0FBRyxhQUFhLENBQUM7SUFHOUIsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLGdCQUFpQixTQUFRLFVBQVUsQ0FBQyxnQkFBZ0I7SUFFL0QsWUFBbUIsT0FBWTtRQUM3QixLQUFLLENBQUMsZUFBZSxFQUFFLHdCQUF3QixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRHpDLFlBQU8sR0FBUCxPQUFPLENBQUs7UUFEdEIsU0FBSSxHQUFHLGtCQUFrQixDQUFDO0lBR25DLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxtQkFBb0IsU0FBUSxVQUFVLENBQUMsbUJBQW1CO0lBRXJFO1FBQ0UsS0FBSyxDQUFDLGVBQWUsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO1FBRjFDLFNBQUksR0FBRyxxQkFBcUIsQ0FBQztJQUd0QyxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sd0JBQXlCLFNBQVEsVUFBVSxDQUFDLHVCQUF1QjtJQUU5RTtRQUNFLEtBQUssQ0FBQyxlQUFlLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztRQUYxQyxTQUFJLEdBQUcsMkJBQTJCLENBQUM7SUFHNUMsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLGFBQWE7SUFFeEIsWUFBbUIsT0FBMkM7UUFBM0MsWUFBTyxHQUFQLE9BQU8sQ0FBb0M7UUFEckQsU0FBSSxHQUFHLGNBQWMsQ0FBQztJQUNrQyxDQUFDO0NBQ25FO0FBRUQsTUFBTSxPQUFPLGlCQUFpQjtJQUU1QixZQUFtQixPQUFZO1FBQVosWUFBTyxHQUFQLE9BQU8sQ0FBSztRQUR0QixTQUFJLEdBQUcsbUJBQW1CLENBQUM7SUFDRixDQUFDO0NBQ3BDO0FBRUQsTUFBTSxPQUFPLG9CQUFvQjtJQUFqQztRQUNXLFNBQUksR0FBRyxzQkFBc0IsQ0FBQztJQUN6QyxDQUFDO0NBQUE7QUFFRCxNQUFNLE9BQU8sVUFBVyxTQUFRLFVBQVUsQ0FBQyxnQkFBZ0I7SUFFekQsWUFBbUIsT0FBZTtRQUNoQyxLQUFLLENBQUMsZUFBZSxFQUFFLHNCQUFzQixDQUFDLENBQUM7UUFEOUIsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUR6QixTQUFJLEdBQUcsV0FBVyxDQUFDO0lBRzVCLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxjQUFlLFNBQVEsVUFBVSxDQUFDLGdCQUFnQjtJQUU3RCxZQUFtQixPQUFZO1FBQzdCLEtBQUssQ0FBQyxlQUFlLEVBQUUsc0JBQXNCLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFEdkMsWUFBTyxHQUFQLE9BQU8sQ0FBSztRQUR0QixTQUFJLEdBQUcsZ0JBQWdCLENBQUM7SUFHakMsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLGlCQUFrQixTQUFRLFVBQVUsQ0FBQyxtQkFBbUI7SUFFbkU7UUFDRSxLQUFLLENBQUMsZUFBZSxFQUFFLHNCQUFzQixDQUFDLENBQUM7UUFGeEMsU0FBSSxHQUFHLG1CQUFtQixDQUFDO0lBR3BDLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxlQUFnQixTQUFRLFVBQVUsQ0FBQyx1QkFBdUI7SUFFckU7UUFDRSxLQUFLLENBQUMsZUFBZSxFQUFFLHNCQUFzQixDQUFDLENBQUM7UUFGeEMsU0FBSSxHQUFHLGlCQUFpQixDQUFDO0lBR2xDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvbiB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcclxuaW1wb3J0IHsgVXNlclNpZ25VcCB9IGZyb20gJy4uLy4uLy4uL21vZGVsL21pc2MubW9kZWwnO1xyXG5pbXBvcnQgeyBQUk9DRVNTX0ZFQVRVUkUgfSBmcm9tICcuLi8uLi8uLi9wcm9jZXNzL3N0b3JlL3Byb2Nlc3Mtc3RhdGUnO1xyXG5pbXBvcnQgeyBTdGF0ZVV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvaW5kZXgnO1xyXG5pbXBvcnQge1xyXG4gIFJFR0lTVEVSX1VTRVJfUFJPQ0VTU19JRCxcclxuICBSRU1PVkVfVVNFUl9QUk9DRVNTX0lELFxyXG59IGZyb20gJy4uL3VzZXItc3RhdGUnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFJFR0lTVEVSX1VTRVIgPSAnW1VzZXJdIFJlZ2lzdGVyIFVzZXInO1xyXG5leHBvcnQgY29uc3QgUkVHSVNURVJfVVNFUl9GQUlMID0gJ1tVc2VyXSBSZWdpc3RlciBVc2VyIEZhaWwnO1xyXG5leHBvcnQgY29uc3QgUkVHSVNURVJfVVNFUl9TVUNDRVNTID0gJ1tVc2VyXSBSZWdpc3RlciBVc2VyIFN1Y2Nlc3MnO1xyXG5leHBvcnQgY29uc3QgUkVTRVRfUkVHSVNURVJfVVNFUl9QUk9DRVNTID0gJ1tVc2VyXSBSZXNldCBSZWdpc3RlciBVc2VyIFByb2Nlc3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFJFR0lTVEVSX0dVRVNUID0gJ1tVc2VyXSBSZWdpc3RlciBHdWVzdCc7XHJcbmV4cG9ydCBjb25zdCBSRUdJU1RFUl9HVUVTVF9GQUlMID0gJ1tVc2VyXSBSZWdpc3RlciBHdWVzdCBGYWlsJztcclxuZXhwb3J0IGNvbnN0IFJFR0lTVEVSX0dVRVNUX1NVQ0NFU1MgPSAnW1VzZXJdIFJlZ2lzdGVyIEd1ZXN0IFN1Y2Nlc3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFJFTU9WRV9VU0VSID0gJ1tVc2VyXSBSZW1vdmUgVXNlcic7XHJcbmV4cG9ydCBjb25zdCBSRU1PVkVfVVNFUl9GQUlMID0gJ1tVc2VyXSBSZW1vdmUgVXNlciBGYWlsJztcclxuZXhwb3J0IGNvbnN0IFJFTU9WRV9VU0VSX1NVQ0NFU1MgPSAnW1VzZXJdIFJlbW92ZSBVc2VyIFN1Y2Nlc3MnO1xyXG5leHBvcnQgY29uc3QgUkVNT1ZFX1VTRVJfUkVTRVQgPSAnW1VzZXJdIFJlc2V0IFJlbW92ZSBVc2VyIFByb2Nlc3MgU3RhdGUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFJlZ2lzdGVyVXNlciBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5TG9hZEFjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IFJFR0lTVEVSX1VTRVI7XHJcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IFVzZXJTaWduVXApIHtcclxuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgUkVHSVNURVJfVVNFUl9QUk9DRVNTX0lEKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSZWdpc3RlclVzZXJGYWlsIGV4dGVuZHMgU3RhdGVVdGlscy5FbnRpdHlGYWlsQWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gUkVHSVNURVJfVVNFUl9GQUlMO1xyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBhbnkpIHtcclxuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgUkVHSVNURVJfVVNFUl9QUk9DRVNTX0lELCBwYXlsb2FkKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSZWdpc3RlclVzZXJTdWNjZXNzIGV4dGVuZHMgU3RhdGVVdGlscy5FbnRpdHlTdWNjZXNzQWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gUkVHSVNURVJfVVNFUl9TVUNDRVNTO1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBSRUdJU1RFUl9VU0VSX1BST0NFU1NfSUQpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFJlc2V0UmVnaXN0ZXJVc2VyUHJvY2VzcyBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5TG9hZGVyUmVzZXRBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBSRVNFVF9SRUdJU1RFUl9VU0VSX1BST0NFU1M7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcihQUk9DRVNTX0ZFQVRVUkUsIFJFR0lTVEVSX1VTRVJfUFJPQ0VTU19JRCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUmVnaXN0ZXJHdWVzdCBpbXBsZW1lbnRzIEFjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IFJFR0lTVEVSX0dVRVNUO1xyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiB7IGd1aWQ6IHN0cmluZzsgcGFzc3dvcmQ6IHN0cmluZyB9KSB7fVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUmVnaXN0ZXJHdWVzdEZhaWwgaW1wbGVtZW50cyBBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBSRUdJU1RFUl9HVUVTVF9GQUlMO1xyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBhbnkpIHt9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSZWdpc3Rlckd1ZXN0U3VjY2VzcyBpbXBsZW1lbnRzIEFjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IFJFR0lTVEVSX0dVRVNUX1NVQ0NFU1M7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSZW1vdmVVc2VyIGV4dGVuZHMgU3RhdGVVdGlscy5FbnRpdHlMb2FkQWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gUkVNT1ZFX1VTRVI7XHJcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IHN0cmluZykge1xyXG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBSRU1PVkVfVVNFUl9QUk9DRVNTX0lEKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSZW1vdmVVc2VyRmFpbCBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5RmFpbEFjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IFJFTU9WRV9VU0VSX0ZBSUw7XHJcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IGFueSkge1xyXG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBSRU1PVkVfVVNFUl9QUk9DRVNTX0lELCBwYXlsb2FkKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSZW1vdmVVc2VyU3VjY2VzcyBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5U3VjY2Vzc0FjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IFJFTU9WRV9VU0VSX1NVQ0NFU1M7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcihQUk9DRVNTX0ZFQVRVUkUsIFJFTU9WRV9VU0VSX1BST0NFU1NfSUQpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFJlbW92ZVVzZXJSZXNldCBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5TG9hZGVyUmVzZXRBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBSRU1PVkVfVVNFUl9SRVNFVDtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgUkVNT1ZFX1VTRVJfUFJPQ0VTU19JRCk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBhY3Rpb24gdHlwZXNcclxuZXhwb3J0IHR5cGUgVXNlclJlZ2lzdGVyT3JSZW1vdmVBY3Rpb24gPVxyXG4gIHwgUmVnaXN0ZXJVc2VyXHJcbiAgfCBSZWdpc3RlclVzZXJGYWlsXHJcbiAgfCBSZWdpc3RlclVzZXJTdWNjZXNzXHJcbiAgfCBSZXNldFJlZ2lzdGVyVXNlclByb2Nlc3NcclxuICB8IFJlZ2lzdGVyR3Vlc3RcclxuICB8IFJlZ2lzdGVyR3Vlc3RGYWlsXHJcbiAgfCBSZWdpc3Rlckd1ZXN0U3VjY2Vzc1xyXG4gIHwgUmVtb3ZlVXNlclxyXG4gIHwgUmVtb3ZlVXNlckZhaWxcclxuICB8IFJlbW92ZVVzZXJTdWNjZXNzXHJcbiAgfCBSZW1vdmVVc2VyUmVzZXQ7XHJcbiJdfQ==