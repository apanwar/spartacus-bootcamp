import { StateUtils } from '../../../state/utils/index';
import { PROCESS_FEATURE } from '../../../process/store/process-state';
import { EntityFailAction, EntityLoadAction, EntityLoaderResetAction, EntitySuccessAction, } from '../../../state/utils/entity-loader/entity-loader.action';
import { UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, NOTIFICATION_PREFERENCES, } from '../user-state';
export const LOAD_NOTIFICATION_PREFERENCES = '[User] Load Notification Preferences';
export const LOAD_NOTIFICATION_PREFERENCES_FAIL = '[User] Load Notification Preferences Fail';
export const LOAD_NOTIFICATION_PREFERENCES_SUCCESS = '[User] Load Notification Preferences Success';
export const UPDATE_NOTIFICATION_PREFERENCES = '[User] Update Notification Preferences';
export const UPDATE_NOTIFICATION_PREFERENCES_FAIL = '[User] Update Notification Preferences Fail';
export const UPDATE_NOTIFICATION_PREFERENCES_SUCCESS = '[User] Update Notification Preferences Success';
export const RESET_NOTIFICATION_PREFERENCES = '[User] Reset Notification Preferences';
export const CLEAR_NOTIFICATION_PREFERENCES = '[User] Clear Notification Preferences';
export class LoadNotificationPreferences extends StateUtils.LoaderLoadAction {
    constructor(payload) {
        super(NOTIFICATION_PREFERENCES);
        this.payload = payload;
        this.type = LOAD_NOTIFICATION_PREFERENCES;
    }
}
export class LoadNotificationPreferencesFail extends StateUtils.LoaderFailAction {
    constructor(payload) {
        super(NOTIFICATION_PREFERENCES, payload);
        this.payload = payload;
        this.type = LOAD_NOTIFICATION_PREFERENCES_FAIL;
    }
}
export class LoadNotificationPreferencesSuccess extends StateUtils.LoaderSuccessAction {
    constructor(payload) {
        super(NOTIFICATION_PREFERENCES);
        this.payload = payload;
        this.type = LOAD_NOTIFICATION_PREFERENCES_SUCCESS;
    }
}
export class UpdateNotificationPreferences extends EntityLoadAction {
    constructor(payload) {
        super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);
        this.payload = payload;
        this.type = UPDATE_NOTIFICATION_PREFERENCES;
    }
}
export class UpdateNotificationPreferencesFail extends EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, payload);
        this.payload = payload;
        this.type = UPDATE_NOTIFICATION_PREFERENCES_FAIL;
    }
}
export class UpdateNotificationPreferencesSuccess extends EntitySuccessAction {
    constructor(payload) {
        super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);
        this.payload = payload;
        this.type = UPDATE_NOTIFICATION_PREFERENCES_SUCCESS;
    }
}
export class ResetNotificationPreferences extends EntityLoaderResetAction {
    constructor() {
        super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);
        this.type = RESET_NOTIFICATION_PREFERENCES;
    }
}
export class ClearNotificationPreferences extends StateUtils.LoaderResetAction {
    constructor() {
        super(NOTIFICATION_PREFERENCES);
        this.type = CLEAR_NOTIFICATION_PREFERENCES;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLXByZWZlcmVuY2UuYWN0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL3VzZXIvc3RvcmUvYWN0aW9ucy9ub3RpZmljYXRpb24tcHJlZmVyZW5jZS5hY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUN2RSxPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQix1QkFBdUIsRUFDdkIsbUJBQW1CLEdBQ3BCLE1BQU0seURBQXlELENBQUM7QUFDakUsT0FBTyxFQUNMLDBDQUEwQyxFQUMxQyx3QkFBd0IsR0FDekIsTUFBTSxlQUFlLENBQUM7QUFHdkIsTUFBTSxDQUFDLE1BQU0sNkJBQTZCLEdBQ3hDLHNDQUFzQyxDQUFDO0FBQ3pDLE1BQU0sQ0FBQyxNQUFNLGtDQUFrQyxHQUM3QywyQ0FBMkMsQ0FBQztBQUM5QyxNQUFNLENBQUMsTUFBTSxxQ0FBcUMsR0FDaEQsOENBQThDLENBQUM7QUFDakQsTUFBTSxDQUFDLE1BQU0sK0JBQStCLEdBQzFDLHdDQUF3QyxDQUFDO0FBQzNDLE1BQU0sQ0FBQyxNQUFNLG9DQUFvQyxHQUMvQyw2Q0FBNkMsQ0FBQztBQUNoRCxNQUFNLENBQUMsTUFBTSx1Q0FBdUMsR0FDbEQsZ0RBQWdELENBQUM7QUFDbkQsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQ3pDLHVDQUF1QyxDQUFDO0FBQzFDLE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUN6Qyx1Q0FBdUMsQ0FBQztBQUUxQyxNQUFNLE9BQU8sMkJBQTRCLFNBQVEsVUFBVSxDQUFDLGdCQUFnQjtJQUUxRSxZQUFtQixPQUFlO1FBQ2hDLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBRGYsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUR6QixTQUFJLEdBQUcsNkJBQTZCLENBQUM7SUFHOUMsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLCtCQUFnQyxTQUFRLFVBQVUsQ0FBQyxnQkFBZ0I7SUFFOUUsWUFBbUIsT0FBWTtRQUM3QixLQUFLLENBQUMsd0JBQXdCLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFEeEIsWUFBTyxHQUFQLE9BQU8sQ0FBSztRQUR0QixTQUFJLEdBQUcsa0NBQWtDLENBQUM7SUFHbkQsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLGtDQUFtQyxTQUFRLFVBQVUsQ0FBQyxtQkFBbUI7SUFFcEYsWUFBbUIsT0FBaUM7UUFDbEQsS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFEZixZQUFPLEdBQVAsT0FBTyxDQUEwQjtRQUQzQyxTQUFJLEdBQUcscUNBQXFDLENBQUM7SUFHdEQsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLDZCQUE4QixTQUFRLGdCQUFnQjtJQUVqRSxZQUNTLE9BQWtFO1FBRXpFLEtBQUssQ0FBQyxlQUFlLEVBQUUsMENBQTBDLENBQUMsQ0FBQztRQUY1RCxZQUFPLEdBQVAsT0FBTyxDQUEyRDtRQUZsRSxTQUFJLEdBQUcsK0JBQStCLENBQUM7SUFLaEQsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLGlDQUFrQyxTQUFRLGdCQUFnQjtJQUVyRSxZQUFtQixPQUFZO1FBQzdCLEtBQUssQ0FBQyxlQUFlLEVBQUUsMENBQTBDLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFEM0QsWUFBTyxHQUFQLE9BQU8sQ0FBSztRQUR0QixTQUFJLEdBQUcsb0NBQW9DLENBQUM7SUFHckQsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLG9DQUFxQyxTQUFRLG1CQUFtQjtJQUUzRSxZQUFtQixPQUFpQztRQUNsRCxLQUFLLENBQUMsZUFBZSxFQUFFLDBDQUEwQyxDQUFDLENBQUM7UUFEbEQsWUFBTyxHQUFQLE9BQU8sQ0FBMEI7UUFEM0MsU0FBSSxHQUFHLHVDQUF1QyxDQUFDO0lBR3hELENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyw0QkFBNkIsU0FBUSx1QkFBdUI7SUFFdkU7UUFDRSxLQUFLLENBQUMsZUFBZSxFQUFFLDBDQUEwQyxDQUFDLENBQUM7UUFGNUQsU0FBSSxHQUFHLDhCQUE4QixDQUFDO0lBRy9DLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyw0QkFBNkIsU0FBUSxVQUFVLENBQUMsaUJBQWlCO0lBRTVFO1FBQ0UsS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFGekIsU0FBSSxHQUFHLDhCQUE4QixDQUFDO0lBRy9DLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YXRlVXRpbHMgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9pbmRleCc7XHJcbmltcG9ydCB7IFBST0NFU1NfRkVBVFVSRSB9IGZyb20gJy4uLy4uLy4uL3Byb2Nlc3Mvc3RvcmUvcHJvY2Vzcy1zdGF0ZSc7XHJcbmltcG9ydCB7XHJcbiAgRW50aXR5RmFpbEFjdGlvbixcclxuICBFbnRpdHlMb2FkQWN0aW9uLFxyXG4gIEVudGl0eUxvYWRlclJlc2V0QWN0aW9uLFxyXG4gIEVudGl0eVN1Y2Nlc3NBY3Rpb24sXHJcbn0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvZW50aXR5LWxvYWRlci9lbnRpdHktbG9hZGVyLmFjdGlvbic7XHJcbmltcG9ydCB7XHJcbiAgVVBEQVRFX05PVElGSUNBVElPTl9QUkVGRVJFTkNFU19QUk9DRVNTX0lELFxyXG4gIE5PVElGSUNBVElPTl9QUkVGRVJFTkNFUyxcclxufSBmcm9tICcuLi91c2VyLXN0YXRlJztcclxuaW1wb3J0IHsgTm90aWZpY2F0aW9uUHJlZmVyZW5jZSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL25vdGlmaWNhdGlvbi1wcmVmZXJlbmNlLm1vZGVsJztcclxuXHJcbmV4cG9ydCBjb25zdCBMT0FEX05PVElGSUNBVElPTl9QUkVGRVJFTkNFUyA9XHJcbiAgJ1tVc2VyXSBMb2FkIE5vdGlmaWNhdGlvbiBQcmVmZXJlbmNlcyc7XHJcbmV4cG9ydCBjb25zdCBMT0FEX05PVElGSUNBVElPTl9QUkVGRVJFTkNFU19GQUlMID1cclxuICAnW1VzZXJdIExvYWQgTm90aWZpY2F0aW9uIFByZWZlcmVuY2VzIEZhaWwnO1xyXG5leHBvcnQgY29uc3QgTE9BRF9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVNfU1VDQ0VTUyA9XHJcbiAgJ1tVc2VyXSBMb2FkIE5vdGlmaWNhdGlvbiBQcmVmZXJlbmNlcyBTdWNjZXNzJztcclxuZXhwb3J0IGNvbnN0IFVQREFURV9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVMgPVxyXG4gICdbVXNlcl0gVXBkYXRlIE5vdGlmaWNhdGlvbiBQcmVmZXJlbmNlcyc7XHJcbmV4cG9ydCBjb25zdCBVUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX0ZBSUwgPVxyXG4gICdbVXNlcl0gVXBkYXRlIE5vdGlmaWNhdGlvbiBQcmVmZXJlbmNlcyBGYWlsJztcclxuZXhwb3J0IGNvbnN0IFVQREFURV9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVNfU1VDQ0VTUyA9XHJcbiAgJ1tVc2VyXSBVcGRhdGUgTm90aWZpY2F0aW9uIFByZWZlcmVuY2VzIFN1Y2Nlc3MnO1xyXG5leHBvcnQgY29uc3QgUkVTRVRfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTID1cclxuICAnW1VzZXJdIFJlc2V0IE5vdGlmaWNhdGlvbiBQcmVmZXJlbmNlcyc7XHJcbmV4cG9ydCBjb25zdCBDTEVBUl9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVMgPVxyXG4gICdbVXNlcl0gQ2xlYXIgTm90aWZpY2F0aW9uIFByZWZlcmVuY2VzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBMb2FkTm90aWZpY2F0aW9uUHJlZmVyZW5jZXMgZXh0ZW5kcyBTdGF0ZVV0aWxzLkxvYWRlckxvYWRBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX05PVElGSUNBVElPTl9QUkVGRVJFTkNFUztcclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogc3RyaW5nKSB7XHJcbiAgICBzdXBlcihOT1RJRklDQVRJT05fUFJFRkVSRU5DRVMpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExvYWROb3RpZmljYXRpb25QcmVmZXJlbmNlc0ZhaWwgZXh0ZW5kcyBTdGF0ZVV0aWxzLkxvYWRlckZhaWxBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX05PVElGSUNBVElPTl9QUkVGRVJFTkNFU19GQUlMO1xyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBhbnkpIHtcclxuICAgIHN1cGVyKE5PVElGSUNBVElPTl9QUkVGRVJFTkNFUywgcGF5bG9hZCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTG9hZE5vdGlmaWNhdGlvblByZWZlcmVuY2VzU3VjY2VzcyBleHRlbmRzIFN0YXRlVXRpbHMuTG9hZGVyU3VjY2Vzc0FjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX1NVQ0NFU1M7XHJcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IE5vdGlmaWNhdGlvblByZWZlcmVuY2VbXSkge1xyXG4gICAgc3VwZXIoTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBVcGRhdGVOb3RpZmljYXRpb25QcmVmZXJlbmNlcyBleHRlbmRzIEVudGl0eUxvYWRBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBVUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTO1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHVibGljIHBheWxvYWQ6IHsgdXNlcklkOiBzdHJpbmc7IHByZWZlcmVuY2VzOiBOb3RpZmljYXRpb25QcmVmZXJlbmNlW10gfVxyXG4gICkge1xyXG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBVUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX1BST0NFU1NfSUQpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFVwZGF0ZU5vdGlmaWNhdGlvblByZWZlcmVuY2VzRmFpbCBleHRlbmRzIEVudGl0eUZhaWxBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBVUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX0ZBSUw7XHJcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IGFueSkge1xyXG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBVUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX1BST0NFU1NfSUQsIHBheWxvYWQpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFVwZGF0ZU5vdGlmaWNhdGlvblByZWZlcmVuY2VzU3VjY2VzcyBleHRlbmRzIEVudGl0eVN1Y2Nlc3NBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBVUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX1NVQ0NFU1M7XHJcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IE5vdGlmaWNhdGlvblByZWZlcmVuY2VbXSkge1xyXG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBVUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX1BST0NFU1NfSUQpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFJlc2V0Tm90aWZpY2F0aW9uUHJlZmVyZW5jZXMgZXh0ZW5kcyBFbnRpdHlMb2FkZXJSZXNldEFjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IFJFU0VUX05PVElGSUNBVElPTl9QUkVGRVJFTkNFUztcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgVVBEQVRFX05PVElGSUNBVElPTl9QUkVGRVJFTkNFU19QUk9DRVNTX0lEKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDbGVhck5vdGlmaWNhdGlvblByZWZlcmVuY2VzIGV4dGVuZHMgU3RhdGVVdGlscy5Mb2FkZXJSZXNldEFjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IENMRUFSX05PVElGSUNBVElPTl9QUkVGRVJFTkNFUztcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKE5PVElGSUNBVElPTl9QUkVGRVJFTkNFUyk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBOb3RpZmljYXRpb25QcmVmZXJlbmNlQWN0aW9uID1cclxuICB8IExvYWROb3RpZmljYXRpb25QcmVmZXJlbmNlc1xyXG4gIHwgTG9hZE5vdGlmaWNhdGlvblByZWZlcmVuY2VzRmFpbFxyXG4gIHwgTG9hZE5vdGlmaWNhdGlvblByZWZlcmVuY2VzU3VjY2Vzc1xyXG4gIHwgVXBkYXRlTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNcclxuICB8IFVwZGF0ZU5vdGlmaWNhdGlvblByZWZlcmVuY2VzRmFpbFxyXG4gIHwgVXBkYXRlTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNTdWNjZXNzXHJcbiAgfCBSZXNldE5vdGlmaWNhdGlvblByZWZlcmVuY2VzXHJcbiAgfCBDbGVhck5vdGlmaWNhdGlvblByZWZlcmVuY2VzO1xyXG4iXX0=