import { createSelector } from '@ngrx/store';
import { StateUtils } from '../../../state/utils/index';
import { getUserState } from './feature.selector';
const ɵ0 = (state) => state.regions;
export const getRegionsLoaderState = createSelector(getUserState, ɵ0);
const ɵ1 = (state) => {
    return StateUtils.loaderValueSelector(state).entities;
};
export const getAllRegions = createSelector(getRegionsLoaderState, ɵ1);
const ɵ2 = (state) => ({
    loaded: StateUtils.loaderSuccessSelector(state),
    loading: StateUtils.loaderLoadingSelector(state),
    regions: StateUtils.loaderValueSelector(state).entities,
    country: StateUtils.loaderValueSelector(state).country,
});
export const getRegionsDataAndLoading = createSelector(getRegionsLoaderState, ɵ2);
const ɵ3 = (state) => StateUtils.loaderValueSelector(state).country;
export const getRegionsCountry = createSelector(getRegionsLoaderState, ɵ3);
const ɵ4 = (state) => StateUtils.loaderLoadingSelector(state);
export const getRegionsLoading = createSelector(getRegionsLoaderState, ɵ4);
const ɵ5 = (state) => StateUtils.loaderSuccessSelector(state);
export const getRegionsLoaded = createSelector(getRegionsLoaderState, ɵ5);
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaW9ucy5zZWxlY3RvcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvdXNlci9zdG9yZS9zZWxlY3RvcnMvcmVnaW9ucy5zZWxlY3RvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBb0IsTUFBTSxhQUFhLENBQUM7QUFFL0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBR3hELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztXQUtqQixDQUFDLEtBQWdCLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPO0FBSHBFLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUc5QixjQUFjLENBQUMsWUFBWSxLQUFzQyxDQUFDO1dBT3BFLENBQUMsS0FBZ0MsRUFBRSxFQUFFO0lBQ25DLE9BQU8sVUFBVSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUN4RCxDQUFDO0FBUEgsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUd0QixjQUFjLENBQ2hCLHFCQUFxQixLQUl0QixDQUFDO1dBWUEsQ0FBQyxLQUFnQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLE1BQU0sRUFBRSxVQUFVLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDO0lBQy9DLE9BQU8sRUFBRSxVQUFVLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDO0lBQ2hELE9BQU8sRUFBRSxVQUFVLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUTtJQUN2RCxPQUFPLEVBQUUsVUFBVSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU87Q0FDdkQsQ0FBQztBQWZKLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQVFqQyxjQUFjLENBQ2hCLHFCQUFxQixLQU90QixDQUFDO1dBT0EsQ0FBQyxLQUFnQyxFQUFFLEVBQUUsQ0FDbkMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU87QUFOakQsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBRzFCLGNBQWMsQ0FDaEIscUJBQXFCLEtBR3RCLENBQUM7V0FLd0MsQ0FBQyxLQUFnQyxFQUFFLEVBQUUsQ0FDN0UsVUFBVSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQztBQUp6QyxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FHMUIsY0FBYyxDQUFDLHFCQUFxQixLQUV2QyxDQUFDO1dBS3dDLENBQUMsS0FBZ0MsRUFBRSxFQUFFLENBQzdFLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUM7QUFKekMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBR3pCLGNBQWMsQ0FBQyxxQkFBcUIsS0FFdkMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yLCBNZW1vaXplZFNlbGVjdG9yIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5pbXBvcnQgeyBSZWdpb24gfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9hZGRyZXNzLm1vZGVsJztcclxuaW1wb3J0IHsgU3RhdGVVdGlscyB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2luZGV4JztcclxuaW1wb3J0IHsgTG9hZGVyU3RhdGUgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9sb2FkZXIvbG9hZGVyLXN0YXRlJztcclxuaW1wb3J0IHsgUmVnaW9uc1N0YXRlLCBTdGF0ZVdpdGhVc2VyLCBVc2VyU3RhdGUgfSBmcm9tICcuLi91c2VyLXN0YXRlJztcclxuaW1wb3J0IHsgZ2V0VXNlclN0YXRlIH0gZnJvbSAnLi9mZWF0dXJlLnNlbGVjdG9yJztcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRSZWdpb25zTG9hZGVyU3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8XHJcbiAgU3RhdGVXaXRoVXNlcixcclxuICBMb2FkZXJTdGF0ZTxSZWdpb25zU3RhdGU+XHJcbj4gPSBjcmVhdGVTZWxlY3RvcihnZXRVc2VyU3RhdGUsIChzdGF0ZTogVXNlclN0YXRlKSA9PiBzdGF0ZS5yZWdpb25zKTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRBbGxSZWdpb25zOiBNZW1vaXplZFNlbGVjdG9yPFxyXG4gIFN0YXRlV2l0aFVzZXIsXHJcbiAgUmVnaW9uW11cclxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxyXG4gIGdldFJlZ2lvbnNMb2FkZXJTdGF0ZSxcclxuICAoc3RhdGU6IExvYWRlclN0YXRlPFJlZ2lvbnNTdGF0ZT4pID0+IHtcclxuICAgIHJldHVybiBTdGF0ZVV0aWxzLmxvYWRlclZhbHVlU2VsZWN0b3Ioc3RhdGUpLmVudGl0aWVzO1xyXG4gIH1cclxuKTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRSZWdpb25zRGF0YUFuZExvYWRpbmc6IE1lbW9pemVkU2VsZWN0b3I8XHJcbiAgU3RhdGVXaXRoVXNlcixcclxuICB7XHJcbiAgICBsb2FkZWQ6IGJvb2xlYW47XHJcbiAgICBsb2FkaW5nOiBib29sZWFuO1xyXG4gICAgcmVnaW9uczogUmVnaW9uW107XHJcbiAgICBjb3VudHJ5OiBzdHJpbmc7XHJcbiAgfVxyXG4+ID0gY3JlYXRlU2VsZWN0b3IoXHJcbiAgZ2V0UmVnaW9uc0xvYWRlclN0YXRlLFxyXG4gIChzdGF0ZTogTG9hZGVyU3RhdGU8UmVnaW9uc1N0YXRlPikgPT4gKHtcclxuICAgIGxvYWRlZDogU3RhdGVVdGlscy5sb2FkZXJTdWNjZXNzU2VsZWN0b3Ioc3RhdGUpLFxyXG4gICAgbG9hZGluZzogU3RhdGVVdGlscy5sb2FkZXJMb2FkaW5nU2VsZWN0b3Ioc3RhdGUpLFxyXG4gICAgcmVnaW9uczogU3RhdGVVdGlscy5sb2FkZXJWYWx1ZVNlbGVjdG9yKHN0YXRlKS5lbnRpdGllcyxcclxuICAgIGNvdW50cnk6IFN0YXRlVXRpbHMubG9hZGVyVmFsdWVTZWxlY3RvcihzdGF0ZSkuY291bnRyeSxcclxuICB9KVxyXG4pO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFJlZ2lvbnNDb3VudHJ5OiBNZW1vaXplZFNlbGVjdG9yPFxyXG4gIFN0YXRlV2l0aFVzZXIsXHJcbiAgc3RyaW5nXHJcbj4gPSBjcmVhdGVTZWxlY3RvcihcclxuICBnZXRSZWdpb25zTG9hZGVyU3RhdGUsXHJcbiAgKHN0YXRlOiBMb2FkZXJTdGF0ZTxSZWdpb25zU3RhdGU+KSA9PlxyXG4gICAgU3RhdGVVdGlscy5sb2FkZXJWYWx1ZVNlbGVjdG9yKHN0YXRlKS5jb3VudHJ5XHJcbik7XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0UmVnaW9uc0xvYWRpbmc6IE1lbW9pemVkU2VsZWN0b3I8XHJcbiAgU3RhdGVXaXRoVXNlcixcclxuICBib29sZWFuXHJcbj4gPSBjcmVhdGVTZWxlY3RvcihnZXRSZWdpb25zTG9hZGVyU3RhdGUsIChzdGF0ZTogTG9hZGVyU3RhdGU8UmVnaW9uc1N0YXRlPikgPT5cclxuICBTdGF0ZVV0aWxzLmxvYWRlckxvYWRpbmdTZWxlY3RvcihzdGF0ZSlcclxuKTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRSZWdpb25zTG9hZGVkOiBNZW1vaXplZFNlbGVjdG9yPFxyXG4gIFN0YXRlV2l0aFVzZXIsXHJcbiAgYm9vbGVhblxyXG4+ID0gY3JlYXRlU2VsZWN0b3IoZ2V0UmVnaW9uc0xvYWRlclN0YXRlLCAoc3RhdGU6IExvYWRlclN0YXRlPFJlZ2lvbnNTdGF0ZT4pID0+XHJcbiAgU3RhdGVVdGlscy5sb2FkZXJTdWNjZXNzU2VsZWN0b3Ioc3RhdGUpXHJcbik7XHJcbiJdfQ==