import { LoaderFailAction, LoaderLoadAction, LoaderSuccessAction, LoaderResetAction, } from '../../../state/utils/loader/loader.action';
import { PROCESS_FEATURE } from '../../../process/store/process-state';
import { StateUtils } from '../../../state/utils/index';
import { USER_ORDER_DETAILS, CANCEL_ORDER_PROCESS_ID } from '../user-state';
export const LOAD_ORDER_DETAILS = '[User] Load Order Details';
export const LOAD_ORDER_DETAILS_FAIL = '[User] Load Order Details Fail';
export const LOAD_ORDER_DETAILS_SUCCESS = '[User] Load Order Details Success';
export const CLEAR_ORDER_DETAILS = '[User] Clear Order Details';
export const CANCEL_ORDER = '[User] Cancel Order';
export const CANCEL_ORDER_FAIL = '[User] Cancel Order Fail';
export const CANCEL_ORDER_SUCCESS = '[User] Cancel Order Success';
export const RESET_CANCEL_ORDER_PROCESS = '[User] Reset Cancel Order Process';
export class LoadOrderDetails extends LoaderLoadAction {
    constructor(payload) {
        super(USER_ORDER_DETAILS);
        this.payload = payload;
        this.type = LOAD_ORDER_DETAILS;
    }
}
export class LoadOrderDetailsFail extends LoaderFailAction {
    constructor(payload) {
        super(USER_ORDER_DETAILS, payload);
        this.payload = payload;
        this.type = LOAD_ORDER_DETAILS_FAIL;
    }
}
export class LoadOrderDetailsSuccess extends LoaderSuccessAction {
    constructor(payload) {
        super(USER_ORDER_DETAILS);
        this.payload = payload;
        this.type = LOAD_ORDER_DETAILS_SUCCESS;
    }
}
export class ClearOrderDetails extends LoaderResetAction {
    constructor() {
        super(USER_ORDER_DETAILS);
        this.type = CLEAR_ORDER_DETAILS;
    }
}
export class CancelOrder extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);
        this.payload = payload;
        this.type = CANCEL_ORDER;
    }
}
export class CancelOrderFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID, payload);
        this.payload = payload;
        this.type = CANCEL_ORDER_FAIL;
    }
}
export class CancelOrderSuccess extends StateUtils.EntitySuccessAction {
    constructor() {
        super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);
        this.type = CANCEL_ORDER_SUCCESS;
    }
}
export class ResetCancelOrderProcess extends StateUtils.EntityLoaderResetAction {
    constructor() {
        super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);
        this.type = RESET_CANCEL_ORDER_PROCESS;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItZGV0YWlscy5hY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvdXNlci9zdG9yZS9hY3Rpb25zL29yZGVyLWRldGFpbHMuYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE9BQU8sRUFDTCxnQkFBZ0IsRUFDaEIsZ0JBQWdCLEVBQ2hCLG1CQUFtQixFQUNuQixpQkFBaUIsR0FDbEIsTUFBTSwyQ0FBMkMsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDdkUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU1RSxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRywyQkFBMkIsQ0FBQztBQUM5RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxnQ0FBZ0MsQ0FBQztBQUN4RSxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxtQ0FBbUMsQ0FBQztBQUM5RSxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyw0QkFBNEIsQ0FBQztBQUVoRSxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcscUJBQXFCLENBQUM7QUFDbEQsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsMEJBQTBCLENBQUM7QUFDNUQsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsNkJBQTZCLENBQUM7QUFDbEUsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsbUNBQW1DLENBQUM7QUFFOUUsTUFBTSxPQUFPLGdCQUFpQixTQUFRLGdCQUFnQjtJQUVwRCxZQUNTLE9BR047UUFFRCxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUxuQixZQUFPLEdBQVAsT0FBTyxDQUdiO1FBTE0sU0FBSSxHQUFHLGtCQUFrQixDQUFDO0lBUW5DLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxnQkFBZ0I7SUFFeEQsWUFBbUIsT0FBWTtRQUM3QixLQUFLLENBQUMsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFEbEIsWUFBTyxHQUFQLE9BQU8sQ0FBSztRQUR0QixTQUFJLEdBQUcsdUJBQXVCLENBQUM7SUFHeEMsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLHVCQUF3QixTQUFRLG1CQUFtQjtJQUU5RCxZQUFtQixPQUFjO1FBQy9CLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBRFQsWUFBTyxHQUFQLE9BQU8sQ0FBTztRQUR4QixTQUFJLEdBQUcsMEJBQTBCLENBQUM7SUFHM0MsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLGlCQUFrQixTQUFRLGlCQUFpQjtJQUV0RDtRQUNFLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBRm5CLFNBQUksR0FBRyxtQkFBbUIsQ0FBQztJQUdwQyxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sV0FBWSxTQUFRLFVBQVUsQ0FBQyxnQkFBZ0I7SUFFMUQsWUFDUyxPQUlOO1FBRUQsS0FBSyxDQUFDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO1FBTnpDLFlBQU8sR0FBUCxPQUFPLENBSWI7UUFOTSxTQUFJLEdBQUcsWUFBWSxDQUFDO0lBUzdCLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxlQUFnQixTQUFRLFVBQVUsQ0FBQyxnQkFBZ0I7SUFFOUQsWUFBbUIsT0FBWTtRQUM3QixLQUFLLENBQUMsZUFBZSxFQUFFLHVCQUF1QixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRHhDLFlBQU8sR0FBUCxPQUFPLENBQUs7UUFEdEIsU0FBSSxHQUFHLGlCQUFpQixDQUFDO0lBR2xDLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxVQUFVLENBQUMsbUJBQW1CO0lBRXBFO1FBQ0UsS0FBSyxDQUFDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO1FBRnpDLFNBQUksR0FBRyxvQkFBb0IsQ0FBQztJQUdyQyxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sdUJBQXdCLFNBQVEsVUFBVSxDQUFDLHVCQUF1QjtJQUU3RTtRQUNFLEtBQUssQ0FBQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztRQUZ6QyxTQUFJLEdBQUcsMEJBQTBCLENBQUM7SUFHM0MsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBPcmRlcixcclxuICBDYW5jZWxsYXRpb25SZXF1ZXN0RW50cnlJbnB1dExpc3QsXHJcbn0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvb3JkZXIubW9kZWwnO1xyXG5pbXBvcnQge1xyXG4gIExvYWRlckZhaWxBY3Rpb24sXHJcbiAgTG9hZGVyTG9hZEFjdGlvbixcclxuICBMb2FkZXJTdWNjZXNzQWN0aW9uLFxyXG4gIExvYWRlclJlc2V0QWN0aW9uLFxyXG59IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2xvYWRlci9sb2FkZXIuYWN0aW9uJztcclxuaW1wb3J0IHsgUFJPQ0VTU19GRUFUVVJFIH0gZnJvbSAnLi4vLi4vLi4vcHJvY2Vzcy9zdG9yZS9wcm9jZXNzLXN0YXRlJztcclxuaW1wb3J0IHsgU3RhdGVVdGlscyB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2luZGV4JztcclxuaW1wb3J0IHsgVVNFUl9PUkRFUl9ERVRBSUxTLCBDQU5DRUxfT1JERVJfUFJPQ0VTU19JRCB9IGZyb20gJy4uL3VzZXItc3RhdGUnO1xyXG5cclxuZXhwb3J0IGNvbnN0IExPQURfT1JERVJfREVUQUlMUyA9ICdbVXNlcl0gTG9hZCBPcmRlciBEZXRhaWxzJztcclxuZXhwb3J0IGNvbnN0IExPQURfT1JERVJfREVUQUlMU19GQUlMID0gJ1tVc2VyXSBMb2FkIE9yZGVyIERldGFpbHMgRmFpbCc7XHJcbmV4cG9ydCBjb25zdCBMT0FEX09SREVSX0RFVEFJTFNfU1VDQ0VTUyA9ICdbVXNlcl0gTG9hZCBPcmRlciBEZXRhaWxzIFN1Y2Nlc3MnO1xyXG5leHBvcnQgY29uc3QgQ0xFQVJfT1JERVJfREVUQUlMUyA9ICdbVXNlcl0gQ2xlYXIgT3JkZXIgRGV0YWlscyc7XHJcblxyXG5leHBvcnQgY29uc3QgQ0FOQ0VMX09SREVSID0gJ1tVc2VyXSBDYW5jZWwgT3JkZXInO1xyXG5leHBvcnQgY29uc3QgQ0FOQ0VMX09SREVSX0ZBSUwgPSAnW1VzZXJdIENhbmNlbCBPcmRlciBGYWlsJztcclxuZXhwb3J0IGNvbnN0IENBTkNFTF9PUkRFUl9TVUNDRVNTID0gJ1tVc2VyXSBDYW5jZWwgT3JkZXIgU3VjY2Vzcyc7XHJcbmV4cG9ydCBjb25zdCBSRVNFVF9DQU5DRUxfT1JERVJfUFJPQ0VTUyA9ICdbVXNlcl0gUmVzZXQgQ2FuY2VsIE9yZGVyIFByb2Nlc3MnO1xyXG5cclxuZXhwb3J0IGNsYXNzIExvYWRPcmRlckRldGFpbHMgZXh0ZW5kcyBMb2FkZXJMb2FkQWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gTE9BRF9PUkRFUl9ERVRBSUxTO1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHVibGljIHBheWxvYWQ6IHtcclxuICAgICAgdXNlcklkOiBzdHJpbmc7XHJcbiAgICAgIG9yZGVyQ29kZTogc3RyaW5nO1xyXG4gICAgfVxyXG4gICkge1xyXG4gICAgc3VwZXIoVVNFUl9PUkRFUl9ERVRBSUxTKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMb2FkT3JkZXJEZXRhaWxzRmFpbCBleHRlbmRzIExvYWRlckZhaWxBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX09SREVSX0RFVEFJTFNfRkFJTDtcclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogYW55KSB7XHJcbiAgICBzdXBlcihVU0VSX09SREVSX0RFVEFJTFMsIHBheWxvYWQpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExvYWRPcmRlckRldGFpbHNTdWNjZXNzIGV4dGVuZHMgTG9hZGVyU3VjY2Vzc0FjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfT1JERVJfREVUQUlMU19TVUNDRVNTO1xyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBPcmRlcikge1xyXG4gICAgc3VwZXIoVVNFUl9PUkRFUl9ERVRBSUxTKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDbGVhck9yZGVyRGV0YWlscyBleHRlbmRzIExvYWRlclJlc2V0QWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gQ0xFQVJfT1JERVJfREVUQUlMUztcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKFVTRVJfT1JERVJfREVUQUlMUyk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ2FuY2VsT3JkZXIgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eUxvYWRBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBDQU5DRUxfT1JERVI7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgcGF5bG9hZDoge1xyXG4gICAgICB1c2VySWQ6IHN0cmluZztcclxuICAgICAgb3JkZXJDb2RlOiBzdHJpbmc7XHJcbiAgICAgIGNhbmNlbFJlcXVlc3RJbnB1dDogQ2FuY2VsbGF0aW9uUmVxdWVzdEVudHJ5SW5wdXRMaXN0O1xyXG4gICAgfVxyXG4gICkge1xyXG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBDQU5DRUxfT1JERVJfUFJPQ0VTU19JRCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ2FuY2VsT3JkZXJGYWlsIGV4dGVuZHMgU3RhdGVVdGlscy5FbnRpdHlGYWlsQWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gQ0FOQ0VMX09SREVSX0ZBSUw7XHJcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IGFueSkge1xyXG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBDQU5DRUxfT1JERVJfUFJPQ0VTU19JRCwgcGF5bG9hZCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ2FuY2VsT3JkZXJTdWNjZXNzIGV4dGVuZHMgU3RhdGVVdGlscy5FbnRpdHlTdWNjZXNzQWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gQ0FOQ0VMX09SREVSX1NVQ0NFU1M7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcihQUk9DRVNTX0ZFQVRVUkUsIENBTkNFTF9PUkRFUl9QUk9DRVNTX0lEKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSZXNldENhbmNlbE9yZGVyUHJvY2VzcyBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5TG9hZGVyUmVzZXRBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBSRVNFVF9DQU5DRUxfT1JERVJfUFJPQ0VTUztcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgQ0FOQ0VMX09SREVSX1BST0NFU1NfSUQpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHR5cGUgT3JkZXJEZXRhaWxzQWN0aW9uID1cclxuICB8IExvYWRPcmRlckRldGFpbHNcclxuICB8IExvYWRPcmRlckRldGFpbHNGYWlsXHJcbiAgfCBMb2FkT3JkZXJEZXRhaWxzU3VjY2Vzc1xyXG4gIHwgQ2xlYXJPcmRlckRldGFpbHNcclxuICB8IENhbmNlbE9yZGVyXHJcbiAgfCBDYW5jZWxPcmRlckZhaWxcclxuICB8IENhbmNlbE9yZGVyU3VjY2VzcztcclxuIl19