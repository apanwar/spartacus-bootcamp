import { InjectionToken } from '@angular/core';
import { combineReducers, } from '@ngrx/store';
import { AuthActions } from '../../../auth/index';
import { SiteContextActions } from '../../../site-context/index';
import { loaderReducer } from '../../../state/utils/loader/loader.reducer';
import { ANONYMOUS_CONSENTS, } from '../anonymous-consents-state';
import * as fromAnonymousConsentsBanner from './anonymous-consents-banner.reducer';
import * as fromAnonymousConsentsUpdate from './anonymous-consents-update.reducer';
import * as fromAnonymousConsents from './anonymous-consents.reducer';
export function getReducers() {
    return {
        templates: loaderReducer(ANONYMOUS_CONSENTS),
        consents: fromAnonymousConsents.reducer,
        ui: combineReducers({
            bannerDismissed: fromAnonymousConsentsBanner.reducer,
            updated: fromAnonymousConsentsUpdate.reducer,
        }),
    };
}
export const reducerToken = new InjectionToken('AnonymousConsentsReducers');
export const reducerProvider = {
    provide: reducerToken,
    useFactory: getReducers,
};
export function clearAnonymousConsentTemplates(reducer) {
    return function (state, action) {
        if (action.type === AuthActions.LOGOUT ||
            action.type === SiteContextActions.LANGUAGE_CHANGE) {
            state = Object.assign(Object.assign({}, state), { templates: undefined });
        }
        return reducer(state, action);
    };
}
export const metaReducers = [
    clearAnonymousConsentTemplates,
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvYW5vbnltb3VzLWNvbnNlbnRzL3N0b3JlL3JlZHVjZXJzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQVksTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUlMLGVBQWUsR0FFaEIsTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWxELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUMzRSxPQUFPLEVBRUwsa0JBQWtCLEdBQ25CLE1BQU0sNkJBQTZCLENBQUM7QUFDckMsT0FBTyxLQUFLLDJCQUEyQixNQUFNLHFDQUFxQyxDQUFDO0FBQ25GLE9BQU8sS0FBSywyQkFBMkIsTUFBTSxxQ0FBcUMsQ0FBQztBQUNuRixPQUFPLEtBQUsscUJBQXFCLE1BQU0sOEJBQThCLENBQUM7QUFFdEUsTUFBTSxVQUFVLFdBQVc7SUFDekIsT0FBTztRQUNMLFNBQVMsRUFBRSxhQUFhLENBQW9CLGtCQUFrQixDQUFDO1FBQy9ELFFBQVEsRUFBRSxxQkFBcUIsQ0FBQyxPQUFPO1FBQ3ZDLEVBQUUsRUFBRSxlQUFlLENBQUM7WUFDbEIsZUFBZSxFQUFFLDJCQUEyQixDQUFDLE9BQU87WUFDcEQsT0FBTyxFQUFFLDJCQUEyQixDQUFDLE9BQU87U0FDN0MsQ0FBQztLQUNILENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUVwQixJQUFJLGNBQWMsQ0FDckIsMkJBQTJCLENBQzVCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQWE7SUFDdkMsT0FBTyxFQUFFLFlBQVk7SUFDckIsVUFBVSxFQUFFLFdBQVc7Q0FDeEIsQ0FBQztBQUVGLE1BQU0sVUFBVSw4QkFBOEIsQ0FDNUMsT0FBc0Q7SUFFdEQsT0FBTyxVQUFVLEtBQUssRUFBRSxNQUFNO1FBQzVCLElBQ0UsTUFBTSxDQUFDLElBQUksS0FBSyxXQUFXLENBQUMsTUFBTTtZQUNsQyxNQUFNLENBQUMsSUFBSSxLQUFLLGtCQUFrQixDQUFDLGVBQWUsRUFDbEQ7WUFDQSxLQUFLLG1DQUNBLEtBQUssS0FDUixTQUFTLEVBQUUsU0FBUyxHQUNyQixDQUFDO1NBQ0g7UUFDRCxPQUFPLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDaEMsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBdUI7SUFDOUMsOEJBQThCO0NBQy9CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtcclxuICBBY3Rpb24sXHJcbiAgQWN0aW9uUmVkdWNlcixcclxuICBBY3Rpb25SZWR1Y2VyTWFwLFxyXG4gIGNvbWJpbmVSZWR1Y2VycyxcclxuICBNZXRhUmVkdWNlcixcclxufSBmcm9tICdAbmdyeC9zdG9yZSc7XHJcbmltcG9ydCB7IEF1dGhBY3Rpb25zIH0gZnJvbSAnLi4vLi4vLi4vYXV0aC9pbmRleCc7XHJcbmltcG9ydCB7IENvbnNlbnRUZW1wbGF0ZSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2NvbnNlbnQubW9kZWwnO1xyXG5pbXBvcnQgeyBTaXRlQ29udGV4dEFjdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9zaXRlLWNvbnRleHQvaW5kZXgnO1xyXG5pbXBvcnQgeyBsb2FkZXJSZWR1Y2VyIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvbG9hZGVyL2xvYWRlci5yZWR1Y2VyJztcclxuaW1wb3J0IHtcclxuICBBbm9ueW1vdXNDb25zZW50c1N0YXRlLFxyXG4gIEFOT05ZTU9VU19DT05TRU5UUyxcclxufSBmcm9tICcuLi9hbm9ueW1vdXMtY29uc2VudHMtc3RhdGUnO1xyXG5pbXBvcnQgKiBhcyBmcm9tQW5vbnltb3VzQ29uc2VudHNCYW5uZXIgZnJvbSAnLi9hbm9ueW1vdXMtY29uc2VudHMtYmFubmVyLnJlZHVjZXInO1xyXG5pbXBvcnQgKiBhcyBmcm9tQW5vbnltb3VzQ29uc2VudHNVcGRhdGUgZnJvbSAnLi9hbm9ueW1vdXMtY29uc2VudHMtdXBkYXRlLnJlZHVjZXInO1xyXG5pbXBvcnQgKiBhcyBmcm9tQW5vbnltb3VzQ29uc2VudHMgZnJvbSAnLi9hbm9ueW1vdXMtY29uc2VudHMucmVkdWNlcic7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVkdWNlcnMoKTogQWN0aW9uUmVkdWNlck1hcDxBbm9ueW1vdXNDb25zZW50c1N0YXRlPiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHRlbXBsYXRlczogbG9hZGVyUmVkdWNlcjxDb25zZW50VGVtcGxhdGVbXT4oQU5PTllNT1VTX0NPTlNFTlRTKSxcclxuICAgIGNvbnNlbnRzOiBmcm9tQW5vbnltb3VzQ29uc2VudHMucmVkdWNlcixcclxuICAgIHVpOiBjb21iaW5lUmVkdWNlcnMoe1xyXG4gICAgICBiYW5uZXJEaXNtaXNzZWQ6IGZyb21Bbm9ueW1vdXNDb25zZW50c0Jhbm5lci5yZWR1Y2VyLFxyXG4gICAgICB1cGRhdGVkOiBmcm9tQW5vbnltb3VzQ29uc2VudHNVcGRhdGUucmVkdWNlcixcclxuICAgIH0pLFxyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCByZWR1Y2VyVG9rZW46IEluamVjdGlvblRva2VuPEFjdGlvblJlZHVjZXJNYXA8XHJcbiAgQW5vbnltb3VzQ29uc2VudHNTdGF0ZVxyXG4+PiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxBY3Rpb25SZWR1Y2VyTWFwPEFub255bW91c0NvbnNlbnRzU3RhdGU+PihcclxuICAnQW5vbnltb3VzQ29uc2VudHNSZWR1Y2VycydcclxuKTtcclxuXHJcbmV4cG9ydCBjb25zdCByZWR1Y2VyUHJvdmlkZXI6IFByb3ZpZGVyID0ge1xyXG4gIHByb3ZpZGU6IHJlZHVjZXJUb2tlbixcclxuICB1c2VGYWN0b3J5OiBnZXRSZWR1Y2VycyxcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGVhckFub255bW91c0NvbnNlbnRUZW1wbGF0ZXMoXHJcbiAgcmVkdWNlcjogQWN0aW9uUmVkdWNlcjxBbm9ueW1vdXNDb25zZW50c1N0YXRlLCBBY3Rpb24+XHJcbik6IEFjdGlvblJlZHVjZXI8QW5vbnltb3VzQ29uc2VudHNTdGF0ZSwgQWN0aW9uPiB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdGF0ZSwgYWN0aW9uKSB7XHJcbiAgICBpZiAoXHJcbiAgICAgIGFjdGlvbi50eXBlID09PSBBdXRoQWN0aW9ucy5MT0dPVVQgfHxcclxuICAgICAgYWN0aW9uLnR5cGUgPT09IFNpdGVDb250ZXh0QWN0aW9ucy5MQU5HVUFHRV9DSEFOR0VcclxuICAgICkge1xyXG4gICAgICBzdGF0ZSA9IHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICB0ZW1wbGF0ZXM6IHVuZGVmaW5lZCxcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiByZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBtZXRhUmVkdWNlcnM6IE1ldGFSZWR1Y2VyPGFueT5bXSA9IFtcclxuICBjbGVhckFub255bW91c0NvbnNlbnRUZW1wbGF0ZXMsXHJcbl07XHJcbiJdfQ==