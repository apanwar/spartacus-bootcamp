import { StateUtils } from '../../../state/utils/index';
import { ANONYMOUS_CONSENTS } from '../anonymous-consents-state';
export const LOAD_ANONYMOUS_CONSENT_TEMPLATES = '[Anonymous Consents] Load Anonymous Consent Templates';
export const LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS = '[Anonymous Consents] Load Anonymous Consent Templates Success';
export const LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL = '[Anonymous Consents] Load Anonymous Consent Templates Fail';
export const RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES = '[Anonymous Consents] Reset Load Anonymous Consent Templates';
export const GET_ALL_ANONYMOUS_CONSENTS = '[Anonymous Consents] Get All Anonymous Consents';
export const GET_ANONYMOUS_CONSENT = '[Anonymous Consents] Get Anonymous Consent';
export const SET_ANONYMOUS_CONSENTS = '[Anonymous Consents] Set Anonymous Consents';
export const GIVE_ANONYMOUS_CONSENT = '[Anonymous Consents] Give Anonymous Consent';
export const WITHDRAW_ANONYMOUS_CONSENT = '[Anonymous Consents] Withdraw Anonymous Consent';
export const TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED = '[Anonymous Consents] Toggle Anonymous Consents Banner Dismissed';
export const TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED = '[Anonymous Consents] Anonymous Consent Templates Updated';
export class LoadAnonymousConsentTemplates extends StateUtils.LoaderLoadAction {
    constructor() {
        super(ANONYMOUS_CONSENTS);
        this.type = LOAD_ANONYMOUS_CONSENT_TEMPLATES;
    }
}
export class LoadAnonymousConsentTemplatesSuccess extends StateUtils.LoaderSuccessAction {
    constructor(payload) {
        super(ANONYMOUS_CONSENTS);
        this.payload = payload;
        this.type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS;
    }
}
export class LoadAnonymousConsentTemplatesFail extends StateUtils.LoaderFailAction {
    constructor(payload) {
        super(ANONYMOUS_CONSENTS, payload);
        this.type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL;
    }
}
export class ResetLoadAnonymousConsentTemplates extends StateUtils.LoaderResetAction {
    constructor() {
        super(ANONYMOUS_CONSENTS);
        this.type = RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES;
    }
}
export class GetAllAnonymousConsents {
    constructor() {
        this.type = GET_ALL_ANONYMOUS_CONSENTS;
    }
}
export class GetAnonymousConsent {
    constructor(templateCode) {
        this.templateCode = templateCode;
        this.type = GET_ANONYMOUS_CONSENT;
    }
}
export class SetAnonymousConsents {
    constructor(payload) {
        this.payload = payload;
        this.type = SET_ANONYMOUS_CONSENTS;
    }
}
export class GiveAnonymousConsent {
    constructor(templateCode) {
        this.templateCode = templateCode;
        this.type = GIVE_ANONYMOUS_CONSENT;
    }
}
export class WithdrawAnonymousConsent {
    constructor(templateCode) {
        this.templateCode = templateCode;
        this.type = WITHDRAW_ANONYMOUS_CONSENT;
    }
}
export class ToggleAnonymousConsentsBannerDissmissed {
    constructor(dismissed) {
        this.dismissed = dismissed;
        this.type = TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED;
    }
}
export class ToggleAnonymousConsentTemplatesUpdated {
    constructor(updated) {
        this.updated = updated;
        this.type = TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5vbnltb3VzLWNvbnNlbnRzLmFjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9hbm9ueW1vdXMtY29uc2VudHMvc3RvcmUvYWN0aW9ucy9hbm9ueW1vdXMtY29uc2VudHMuYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUVqRSxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FDM0MsdURBQXVELENBQUM7QUFDMUQsTUFBTSxDQUFDLE1BQU0sd0NBQXdDLEdBQ25ELCtEQUErRCxDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLHFDQUFxQyxHQUNoRCw0REFBNEQsQ0FBQztBQUMvRCxNQUFNLENBQUMsTUFBTSxzQ0FBc0MsR0FDakQsNkRBQTZELENBQUM7QUFFaEUsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQ3JDLGlEQUFpRCxDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUNoQyw0Q0FBNEMsQ0FBQztBQUMvQyxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FDakMsNkNBQTZDLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQ2pDLDZDQUE2QyxDQUFDO0FBQ2hELE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUNyQyxpREFBaUQsQ0FBQztBQUVwRCxNQUFNLENBQUMsTUFBTSwwQ0FBMEMsR0FDckQsaUVBQWlFLENBQUM7QUFDcEUsTUFBTSxDQUFDLE1BQU0sMENBQTBDLEdBQ3JELDBEQUEwRCxDQUFDO0FBRTdELE1BQU0sT0FBTyw2QkFBOEIsU0FBUSxVQUFVLENBQUMsZ0JBQWdCO0lBRTVFO1FBQ0UsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFGbkIsU0FBSSxHQUFHLGdDQUFnQyxDQUFDO0lBR2pELENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxvQ0FBcUMsU0FBUSxVQUFVLENBQUMsbUJBQW1CO0lBRXRGLFlBQW1CLE9BQTBCO1FBQzNDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBRFQsWUFBTyxHQUFQLE9BQU8sQ0FBbUI7UUFEcEMsU0FBSSxHQUFHLHdDQUF3QyxDQUFDO0lBR3pELENBQUM7Q0FDRjtBQUNELE1BQU0sT0FBTyxpQ0FBa0MsU0FBUSxVQUFVLENBQUMsZ0JBQWdCO0lBRWhGLFlBQVksT0FBWTtRQUN0QixLQUFLLENBQUMsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFGNUIsU0FBSSxHQUFHLHFDQUFxQyxDQUFDO0lBR3RELENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxrQ0FBbUMsU0FBUSxVQUFVLENBQUMsaUJBQWlCO0lBRWxGO1FBQ0UsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFGbkIsU0FBSSxHQUFHLHNDQUFzQyxDQUFDO0lBR3ZELENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyx1QkFBdUI7SUFFbEM7UUFEUyxTQUFJLEdBQUcsMEJBQTBCLENBQUM7SUFDNUIsQ0FBQztDQUNqQjtBQUVELE1BQU0sT0FBTyxtQkFBbUI7SUFFOUIsWUFBbUIsWUFBb0I7UUFBcEIsaUJBQVksR0FBWixZQUFZLENBQVE7UUFEOUIsU0FBSSxHQUFHLHFCQUFxQixDQUFDO0lBQ0ksQ0FBQztDQUM1QztBQUVELE1BQU0sT0FBTyxvQkFBb0I7SUFFL0IsWUFBbUIsT0FBMkI7UUFBM0IsWUFBTyxHQUFQLE9BQU8sQ0FBb0I7UUFEckMsU0FBSSxHQUFHLHNCQUFzQixDQUFDO0lBQ1UsQ0FBQztDQUNuRDtBQUVELE1BQU0sT0FBTyxvQkFBb0I7SUFFL0IsWUFBbUIsWUFBb0I7UUFBcEIsaUJBQVksR0FBWixZQUFZLENBQVE7UUFEOUIsU0FBSSxHQUFHLHNCQUFzQixDQUFDO0lBQ0csQ0FBQztDQUM1QztBQUVELE1BQU0sT0FBTyx3QkFBd0I7SUFFbkMsWUFBbUIsWUFBb0I7UUFBcEIsaUJBQVksR0FBWixZQUFZLENBQVE7UUFEOUIsU0FBSSxHQUFHLDBCQUEwQixDQUFDO0lBQ0QsQ0FBQztDQUM1QztBQUVELE1BQU0sT0FBTyx1Q0FBdUM7SUFFbEQsWUFBbUIsU0FBa0I7UUFBbEIsY0FBUyxHQUFULFNBQVMsQ0FBUztRQUQ1QixTQUFJLEdBQUcsMENBQTBDLENBQUM7SUFDbkIsQ0FBQztDQUMxQztBQUVELE1BQU0sT0FBTyxzQ0FBc0M7SUFFakQsWUFBbUIsT0FBZ0I7UUFBaEIsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUQxQixTQUFJLEdBQUcsMENBQTBDLENBQUM7SUFDckIsQ0FBQztDQUN4QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQW5vbnltb3VzQ29uc2VudCxcclxuICBDb25zZW50VGVtcGxhdGUsXHJcbn0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY29uc2VudC5tb2RlbCc7XHJcbmltcG9ydCB7IFN0YXRlVXRpbHMgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9pbmRleCc7XHJcbmltcG9ydCB7IEFOT05ZTU9VU19DT05TRU5UUyB9IGZyb20gJy4uL2Fub255bW91cy1jb25zZW50cy1zdGF0ZSc7XHJcblxyXG5leHBvcnQgY29uc3QgTE9BRF9BTk9OWU1PVVNfQ09OU0VOVF9URU1QTEFURVMgPVxyXG4gICdbQW5vbnltb3VzIENvbnNlbnRzXSBMb2FkIEFub255bW91cyBDb25zZW50IFRlbXBsYXRlcyc7XHJcbmV4cG9ydCBjb25zdCBMT0FEX0FOT05ZTU9VU19DT05TRU5UX1RFTVBMQVRFU19TVUNDRVNTID1cclxuICAnW0Fub255bW91cyBDb25zZW50c10gTG9hZCBBbm9ueW1vdXMgQ29uc2VudCBUZW1wbGF0ZXMgU3VjY2Vzcyc7XHJcbmV4cG9ydCBjb25zdCBMT0FEX0FOT05ZTU9VU19DT05TRU5UX1RFTVBMQVRFU19GQUlMID1cclxuICAnW0Fub255bW91cyBDb25zZW50c10gTG9hZCBBbm9ueW1vdXMgQ29uc2VudCBUZW1wbGF0ZXMgRmFpbCc7XHJcbmV4cG9ydCBjb25zdCBSRVNFVF9MT0FEX0FOT05ZTU9VU19DT05TRU5UX1RFTVBMQVRFUyA9XHJcbiAgJ1tBbm9ueW1vdXMgQ29uc2VudHNdIFJlc2V0IExvYWQgQW5vbnltb3VzIENvbnNlbnQgVGVtcGxhdGVzJztcclxuXHJcbmV4cG9ydCBjb25zdCBHRVRfQUxMX0FOT05ZTU9VU19DT05TRU5UUyA9XHJcbiAgJ1tBbm9ueW1vdXMgQ29uc2VudHNdIEdldCBBbGwgQW5vbnltb3VzIENvbnNlbnRzJztcclxuZXhwb3J0IGNvbnN0IEdFVF9BTk9OWU1PVVNfQ09OU0VOVCA9XHJcbiAgJ1tBbm9ueW1vdXMgQ29uc2VudHNdIEdldCBBbm9ueW1vdXMgQ29uc2VudCc7XHJcbmV4cG9ydCBjb25zdCBTRVRfQU5PTllNT1VTX0NPTlNFTlRTID1cclxuICAnW0Fub255bW91cyBDb25zZW50c10gU2V0IEFub255bW91cyBDb25zZW50cyc7XHJcbmV4cG9ydCBjb25zdCBHSVZFX0FOT05ZTU9VU19DT05TRU5UID1cclxuICAnW0Fub255bW91cyBDb25zZW50c10gR2l2ZSBBbm9ueW1vdXMgQ29uc2VudCc7XHJcbmV4cG9ydCBjb25zdCBXSVRIRFJBV19BTk9OWU1PVVNfQ09OU0VOVCA9XHJcbiAgJ1tBbm9ueW1vdXMgQ29uc2VudHNdIFdpdGhkcmF3IEFub255bW91cyBDb25zZW50JztcclxuXHJcbmV4cG9ydCBjb25zdCBUT0dHTEVfQU5PTllNT1VTX0NPTlNFTlRTX0JBTk5FUl9ESVNNSVNTRUQgPVxyXG4gICdbQW5vbnltb3VzIENvbnNlbnRzXSBUb2dnbGUgQW5vbnltb3VzIENvbnNlbnRzIEJhbm5lciBEaXNtaXNzZWQnO1xyXG5leHBvcnQgY29uc3QgVE9HR0xFX0FOT05ZTU9VU19DT05TRU5UX1RFTVBMQVRFU19VUERBVEVEID1cclxuICAnW0Fub255bW91cyBDb25zZW50c10gQW5vbnltb3VzIENvbnNlbnQgVGVtcGxhdGVzIFVwZGF0ZWQnO1xyXG5cclxuZXhwb3J0IGNsYXNzIExvYWRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzIGV4dGVuZHMgU3RhdGVVdGlscy5Mb2FkZXJMb2FkQWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gTE9BRF9BTk9OWU1PVVNfQ09OU0VOVF9URU1QTEFURVM7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcihBTk9OWU1PVVNfQ09OU0VOVFMpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExvYWRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzU3VjY2VzcyBleHRlbmRzIFN0YXRlVXRpbHMuTG9hZGVyU3VjY2Vzc0FjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfQU5PTllNT1VTX0NPTlNFTlRfVEVNUExBVEVTX1NVQ0NFU1M7XHJcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IENvbnNlbnRUZW1wbGF0ZVtdKSB7XHJcbiAgICBzdXBlcihBTk9OWU1PVVNfQ09OU0VOVFMpO1xyXG4gIH1cclxufVxyXG5leHBvcnQgY2xhc3MgTG9hZEFub255bW91c0NvbnNlbnRUZW1wbGF0ZXNGYWlsIGV4dGVuZHMgU3RhdGVVdGlscy5Mb2FkZXJGYWlsQWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gTE9BRF9BTk9OWU1PVVNfQ09OU0VOVF9URU1QTEFURVNfRkFJTDtcclxuICBjb25zdHJ1Y3RvcihwYXlsb2FkOiBhbnkpIHtcclxuICAgIHN1cGVyKEFOT05ZTU9VU19DT05TRU5UUywgcGF5bG9hZCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUmVzZXRMb2FkQW5vbnltb3VzQ29uc2VudFRlbXBsYXRlcyBleHRlbmRzIFN0YXRlVXRpbHMuTG9hZGVyUmVzZXRBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBSRVNFVF9MT0FEX0FOT05ZTU9VU19DT05TRU5UX1RFTVBMQVRFUztcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKEFOT05ZTU9VU19DT05TRU5UUyk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgR2V0QWxsQW5vbnltb3VzQ29uc2VudHMge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBHRVRfQUxMX0FOT05ZTU9VU19DT05TRU5UUztcclxuICBjb25zdHJ1Y3RvcigpIHt9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBHZXRBbm9ueW1vdXNDb25zZW50IHtcclxuICByZWFkb25seSB0eXBlID0gR0VUX0FOT05ZTU9VU19DT05TRU5UO1xyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZUNvZGU6IHN0cmluZykge31cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNldEFub255bW91c0NvbnNlbnRzIHtcclxuICByZWFkb25seSB0eXBlID0gU0VUX0FOT05ZTU9VU19DT05TRU5UUztcclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogQW5vbnltb3VzQ29uc2VudFtdKSB7fVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgR2l2ZUFub255bW91c0NvbnNlbnQge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBHSVZFX0FOT05ZTU9VU19DT05TRU5UO1xyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZUNvZGU6IHN0cmluZykge31cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFdpdGhkcmF3QW5vbnltb3VzQ29uc2VudCB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IFdJVEhEUkFXX0FOT05ZTU9VU19DT05TRU5UO1xyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZUNvZGU6IHN0cmluZykge31cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRvZ2dsZUFub255bW91c0NvbnNlbnRzQmFubmVyRGlzc21pc3NlZCB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IFRPR0dMRV9BTk9OWU1PVVNfQ09OU0VOVFNfQkFOTkVSX0RJU01JU1NFRDtcclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgZGlzbWlzc2VkOiBib29sZWFuKSB7fVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVG9nZ2xlQW5vbnltb3VzQ29uc2VudFRlbXBsYXRlc1VwZGF0ZWQge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBUT0dHTEVfQU5PTllNT1VTX0NPTlNFTlRfVEVNUExBVEVTX1VQREFURUQ7XHJcbiAgY29uc3RydWN0b3IocHVibGljIHVwZGF0ZWQ6IGJvb2xlYW4pIHt9XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEFub255bW91c0NvbnNlbnRzQWN0aW9ucyA9XHJcbiAgfCBMb2FkQW5vbnltb3VzQ29uc2VudFRlbXBsYXRlc1xyXG4gIHwgTG9hZEFub255bW91c0NvbnNlbnRUZW1wbGF0ZXNTdWNjZXNzXHJcbiAgfCBMb2FkQW5vbnltb3VzQ29uc2VudFRlbXBsYXRlc0ZhaWxcclxuICB8IFJlc2V0TG9hZEFub255bW91c0NvbnNlbnRUZW1wbGF0ZXNcclxuICB8IEdldEFsbEFub255bW91c0NvbnNlbnRzXHJcbiAgfCBTZXRBbm9ueW1vdXNDb25zZW50c1xyXG4gIHwgR2V0QW5vbnltb3VzQ29uc2VudFxyXG4gIHwgR2l2ZUFub255bW91c0NvbnNlbnRcclxuICB8IFdpdGhkcmF3QW5vbnltb3VzQ29uc2VudFxyXG4gIHwgVG9nZ2xlQW5vbnltb3VzQ29uc2VudHNCYW5uZXJEaXNzbWlzc2VkXHJcbiAgfCBUb2dnbGVBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzVXBkYXRlZDtcclxuIl19