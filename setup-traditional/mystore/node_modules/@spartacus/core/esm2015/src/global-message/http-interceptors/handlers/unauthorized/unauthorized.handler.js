import { __decorate } from "tslib";
import { Injectable, isDevMode } from '@angular/core';
import { GlobalMessageService } from '../../../facade/global-message.service';
import { GlobalMessageType } from '../../../models/global-message.model';
import { HttpResponseStatus } from '../../../models/response-status.model';
import { HttpErrorHandler } from './../http-error.handler';
import * as i0 from "@angular/core";
import * as i1 from "../../../facade/global-message.service";
/**
 * Handles Oauth client errors when a 401 is returned. This is the case for failing
 * authenticaton requests to OCC.
 */
let UnauthorizedErrorHandler = class UnauthorizedErrorHandler extends HttpErrorHandler {
    constructor(globalMessageService) {
        super(globalMessageService);
        this.globalMessageService = globalMessageService;
        this.responseStatus = HttpResponseStatus.UNAUTHORIZED;
    }
    handleError(_request, response) {
        var _a, _b;
        if (isDevMode()) {
            console.warn(`There's a problem with the "Oauth client" configuration. You must configure a matching Oauth client in the backend and Spartacus.`);
        }
        if (((_a = response.error) === null || _a === void 0 ? void 0 : _a.error) === 'invalid_client') {
            this.globalMessageService.add(((_b = response.error) === null || _b === void 0 ? void 0 : _b.error_description) || {
                key: 'httpHandlers.unauthorized.invalid_client',
            }, GlobalMessageType.MSG_TYPE_ERROR);
        }
        else {
            this.globalMessageService.add({ key: 'httpHandlers.unauthorized.common' }, GlobalMessageType.MSG_TYPE_ERROR);
        }
    }
    getPriority() {
        return -10 /* LOW */;
    }
};
UnauthorizedErrorHandler.ctorParameters = () => [
    { type: GlobalMessageService }
];
UnauthorizedErrorHandler.ɵprov = i0.ɵɵdefineInjectable({ factory: function UnauthorizedErrorHandler_Factory() { return new UnauthorizedErrorHandler(i0.ɵɵinject(i1.GlobalMessageService)); }, token: UnauthorizedErrorHandler, providedIn: "root" });
UnauthorizedErrorHandler = __decorate([
    Injectable({
        providedIn: 'root',
    })
], UnauthorizedErrorHandler);
export { UnauthorizedErrorHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5hdXRob3JpemVkLmhhbmRsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvZ2xvYmFsLW1lc3NhZ2UvaHR0cC1pbnRlcmNlcHRvcnMvaGFuZGxlcnMvdW5hdXRob3JpemVkL3VuYXV0aG9yaXplZC5oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUM5RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUN6RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUMzRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7O0FBRzNEOzs7R0FHRztBQUlILElBQWEsd0JBQXdCLEdBQXJDLE1BQWEsd0JBQXlCLFNBQVEsZ0JBQWdCO0lBRzVELFlBQXNCLG9CQUEwQztRQUM5RCxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQURSLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFGaEUsbUJBQWMsR0FBRyxrQkFBa0IsQ0FBQyxZQUFZLENBQUM7SUFJakQsQ0FBQztJQUVELFdBQVcsQ0FBQyxRQUEwQixFQUFFLFFBQTJCOztRQUNqRSxJQUFJLFNBQVMsRUFBRSxFQUFFO1lBQ2YsT0FBTyxDQUFDLElBQUksQ0FDVixtSUFBbUksQ0FDcEksQ0FBQztTQUNIO1FBRUQsSUFBSSxPQUFBLFFBQVEsQ0FBQyxLQUFLLDBDQUFFLEtBQUssTUFBSyxnQkFBZ0IsRUFBRTtZQUM5QyxJQUFJLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUMzQixPQUFBLFFBQVEsQ0FBQyxLQUFLLDBDQUFFLGlCQUFpQixLQUFJO2dCQUNuQyxHQUFHLEVBQUUsMENBQTBDO2FBQ2hELEVBQ0QsaUJBQWlCLENBQUMsY0FBYyxDQUNqQyxDQUFDO1NBQ0g7YUFBTTtZQUNMLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQzNCLEVBQUUsR0FBRyxFQUFFLGtDQUFrQyxFQUFFLEVBQzNDLGlCQUFpQixDQUFDLGNBQWMsQ0FDakMsQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVELFdBQVc7UUFDVCxxQkFBb0I7SUFDdEIsQ0FBQztDQUNGLENBQUE7O1lBN0I2QyxvQkFBb0I7OztBQUhyRCx3QkFBd0I7SUFIcEMsVUFBVSxDQUFDO1FBQ1YsVUFBVSxFQUFFLE1BQU07S0FDbkIsQ0FBQztHQUNXLHdCQUF3QixDQWdDcEM7U0FoQ1ksd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UsIEh0dHBSZXF1ZXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBpc0Rldk1vZGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgR2xvYmFsTWVzc2FnZVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9mYWNhZGUvZ2xvYmFsLW1lc3NhZ2Uuc2VydmljZSc7XHJcbmltcG9ydCB7IEdsb2JhbE1lc3NhZ2VUeXBlIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWxzL2dsb2JhbC1tZXNzYWdlLm1vZGVsJztcclxuaW1wb3J0IHsgSHR0cFJlc3BvbnNlU3RhdHVzIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWxzL3Jlc3BvbnNlLXN0YXR1cy5tb2RlbCc7XHJcbmltcG9ydCB7IEh0dHBFcnJvckhhbmRsZXIgfSBmcm9tICcuLy4uL2h0dHAtZXJyb3IuaGFuZGxlcic7XHJcbmltcG9ydCB7IFByaW9yaXR5IH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbC9hcHBsaWNhYmxlJztcclxuXHJcbi8qKlxyXG4gKiBIYW5kbGVzIE9hdXRoIGNsaWVudCBlcnJvcnMgd2hlbiBhIDQwMSBpcyByZXR1cm5lZC4gVGhpcyBpcyB0aGUgY2FzZSBmb3IgZmFpbGluZ1xyXG4gKiBhdXRoZW50aWNhdG9uIHJlcXVlc3RzIHRvIE9DQy5cclxuICovXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBVbmF1dGhvcml6ZWRFcnJvckhhbmRsZXIgZXh0ZW5kcyBIdHRwRXJyb3JIYW5kbGVyIHtcclxuICByZXNwb25zZVN0YXR1cyA9IEh0dHBSZXNwb25zZVN0YXR1cy5VTkFVVEhPUklaRUQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBnbG9iYWxNZXNzYWdlU2VydmljZTogR2xvYmFsTWVzc2FnZVNlcnZpY2UpIHtcclxuICAgIHN1cGVyKGdsb2JhbE1lc3NhZ2VTZXJ2aWNlKTtcclxuICB9XHJcblxyXG4gIGhhbmRsZUVycm9yKF9yZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LCByZXNwb25zZTogSHR0cEVycm9yUmVzcG9uc2UpOiB2b2lkIHtcclxuICAgIGlmIChpc0Rldk1vZGUoKSkge1xyXG4gICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgYFRoZXJlJ3MgYSBwcm9ibGVtIHdpdGggdGhlIFwiT2F1dGggY2xpZW50XCIgY29uZmlndXJhdGlvbi4gWW91IG11c3QgY29uZmlndXJlIGEgbWF0Y2hpbmcgT2F1dGggY2xpZW50IGluIHRoZSBiYWNrZW5kIGFuZCBTcGFydGFjdXMuYFxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChyZXNwb25zZS5lcnJvcj8uZXJyb3IgPT09ICdpbnZhbGlkX2NsaWVudCcpIHtcclxuICAgICAgdGhpcy5nbG9iYWxNZXNzYWdlU2VydmljZS5hZGQoXHJcbiAgICAgICAgcmVzcG9uc2UuZXJyb3I/LmVycm9yX2Rlc2NyaXB0aW9uIHx8IHtcclxuICAgICAgICAgIGtleTogJ2h0dHBIYW5kbGVycy51bmF1dGhvcml6ZWQuaW52YWxpZF9jbGllbnQnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgR2xvYmFsTWVzc2FnZVR5cGUuTVNHX1RZUEVfRVJST1JcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZ2xvYmFsTWVzc2FnZVNlcnZpY2UuYWRkKFxyXG4gICAgICAgIHsga2V5OiAnaHR0cEhhbmRsZXJzLnVuYXV0aG9yaXplZC5jb21tb24nIH0sXHJcbiAgICAgICAgR2xvYmFsTWVzc2FnZVR5cGUuTVNHX1RZUEVfRVJST1JcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFByaW9yaXR5KCkge1xyXG4gICAgcmV0dXJuIFByaW9yaXR5LkxPVztcclxuICB9XHJcbn1cclxuIl19