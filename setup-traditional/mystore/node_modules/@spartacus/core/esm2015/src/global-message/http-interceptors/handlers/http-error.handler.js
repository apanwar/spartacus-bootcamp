import { __decorate } from "tslib";
import { GlobalMessageService } from '../../facade/global-message.service';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../../facade/global-message.service";
let HttpErrorHandler = class HttpErrorHandler {
    constructor(globalMessageService) {
        this.globalMessageService = globalMessageService;
    }
    /**
     * Error handlers are matched by the error `responseStatus` (i.e. 404). On top of the matching status
     * a priority can be added to distinguish multiple handles for the same response status.
     */
    hasMatch(errorResponse) {
        return errorResponse.status === this.responseStatus;
    }
};
HttpErrorHandler.ctorParameters = () => [
    { type: GlobalMessageService }
];
HttpErrorHandler.ɵprov = i0.ɵɵdefineInjectable({ factory: function HttpErrorHandler_Factory() { return new HttpErrorHandler(i0.ɵɵinject(i1.GlobalMessageService)); }, token: HttpErrorHandler, providedIn: "root" });
HttpErrorHandler = __decorate([
    Injectable({
        providedIn: 'root',
    })
], HttpErrorHandler);
export { HttpErrorHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1lcnJvci5oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2dsb2JhbC1tZXNzYWdlL2h0dHAtaW50ZXJjZXB0b3JzL2hhbmRsZXJzL2h0dHAtZXJyb3IuaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDM0UsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBTTNDLElBQXNCLGdCQUFnQixHQUF0QyxNQUFzQixnQkFBZ0I7SUFDcEMsWUFBc0Isb0JBQTBDO1FBQTFDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7SUFBRyxDQUFDO0lBbUJwRTs7O09BR0c7SUFDSCxRQUFRLENBQUMsYUFBZ0M7UUFDdkMsT0FBTyxhQUFhLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDdEQsQ0FBQztDQUdGLENBQUE7O1lBNUI2QyxvQkFBb0I7OztBQUQ1QyxnQkFBZ0I7SUFIckMsVUFBVSxDQUFDO1FBQ1YsVUFBVSxFQUFFLE1BQU07S0FDbkIsQ0FBQztHQUNvQixnQkFBZ0IsQ0E2QnJDO1NBN0JxQixnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSwgSHR0cFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEdsb2JhbE1lc3NhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vZmFjYWRlL2dsb2JhbC1tZXNzYWdlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEFwcGxpY2FibGUsIFByaW9yaXR5IH0gZnJvbSAnLi4vLi4vLi4vdXRpbC9hcHBsaWNhYmxlJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCcsXHJcbn0pXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBIdHRwRXJyb3JIYW5kbGVyIGltcGxlbWVudHMgQXBwbGljYWJsZSB7XHJcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGdsb2JhbE1lc3NhZ2VTZXJ2aWNlOiBHbG9iYWxNZXNzYWdlU2VydmljZSkge31cclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGh0dHAgcmVzcG9uc2Ugc3RhdHVzIG51bWJlciB3aGljaCBpcyBoYW5kbGVkIGJ5IHRoaXMgaGFuZGxlci5cclxuICAgKiBJbXBsZW1lbnRhdGlvbnMgY2FuIHNldCB0aGUgcmVzcG9uc2Ugc3RhdHVzIG51bWJlciwgaS5lLiA0MDQsIHNvIHRoYXRcclxuICAgKiB0aGUgaGFuZGxlciBjYW4gYmUgZm91bmQgYnkgdGhlIGVycm9yIGludGVyY2VwdG9yLlxyXG4gICAqL1xyXG4gIHJlc3BvbnNlU3RhdHVzPzogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBIYW5kbGVzIHRoZSBlcnJvciByZXNwb25zZSBmb3IgdGhlIHJlc3Bvc2Ugc3RhdHVzIHRoYXQgaXMgcmVnaXN0ZXIgZm9yIHRoZSBoYW5kbGVyXHJcbiAgICogQHBhcmFtIHsgSHR0cFJlcXVlc3Q8YW55PiB9IHJlcXVlc3QgOiBodHRwIHJlcXVlc3RcclxuICAgKiBAcGFyYW0geyBIdHRwRXJyb3JSZXNwb25zZSB9IGVycm9yUmVzcG9uc2UgOiBIdHRwIGVycm9yIHJlc3BvbnNlXHJcbiAgICovXHJcbiAgYWJzdHJhY3QgaGFuZGxlRXJyb3IoXHJcbiAgICByZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LFxyXG4gICAgZXJyb3JSZXNwb25zZTogSHR0cEVycm9yUmVzcG9uc2VcclxuICApOiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBFcnJvciBoYW5kbGVycyBhcmUgbWF0Y2hlZCBieSB0aGUgZXJyb3IgYHJlc3BvbnNlU3RhdHVzYCAoaS5lLiA0MDQpLiBPbiB0b3Agb2YgdGhlIG1hdGNoaW5nIHN0YXR1c1xyXG4gICAqIGEgcHJpb3JpdHkgY2FuIGJlIGFkZGVkIHRvIGRpc3Rpbmd1aXNoIG11bHRpcGxlIGhhbmRsZXMgZm9yIHRoZSBzYW1lIHJlc3BvbnNlIHN0YXR1cy5cclxuICAgKi9cclxuICBoYXNNYXRjaChlcnJvclJlc3BvbnNlOiBIdHRwRXJyb3JSZXNwb25zZSk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIGVycm9yUmVzcG9uc2Uuc3RhdHVzID09PSB0aGlzLnJlc3BvbnNlU3RhdHVzO1xyXG4gIH1cclxuXHJcbiAgYWJzdHJhY3QgZ2V0UHJpb3JpdHk/KCk6IFByaW9yaXR5O1xyXG59XHJcbiJdfQ==