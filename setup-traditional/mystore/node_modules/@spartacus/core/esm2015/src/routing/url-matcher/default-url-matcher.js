import { inject, InjectionToken } from '@angular/core';
import { RoutingConfigService } from '../configurable-routes';
import { UrlMatcherService } from '../services/url-matcher.service';
export function getDefaultUrlMatcherFactory(routingConfigService, urlMatcherService) {
    const factory = (route) => {
        const routeName = route.data && route.data['cxRoute'];
        const routeConfig = routingConfigService.getRouteConfig(routeName);
        const paths = (routeConfig && routeConfig.paths) || [];
        return urlMatcherService.getFromPaths(paths);
    };
    return factory;
}
/**
 * Injection token with url matcher factory for spartacus routes containing property `data.cxRoute`.
 * The provided url matcher matches the configured `paths` from routing config.
 *
 * If this matcher doesn't fit the requirements, it can be replaced with custom matcher
 * or additional matchers can be added for a specific route. See for example PRODUCT_DETAILS_URL_MATCHER.
 *
 * Note: Matchers will "match" a route, but do not contribute to the creation of the route, nor do they guard routes.
 */
export const DEFAULT_URL_MATCHER = new InjectionToken('DEFAULT_URL_MATCHER', {
    providedIn: 'root',
    factory: () => getDefaultUrlMatcherFactory(inject(RoutingConfigService), inject(UrlMatcherService)),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC11cmwtbWF0Y2hlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9yb3V0aW5nL3VybC1tYXRjaGVyL2RlZmF1bHQtdXJsLW1hdGNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFHcEUsTUFBTSxVQUFVLDJCQUEyQixDQUN6QyxvQkFBMEMsRUFDMUMsaUJBQW9DO0lBRXBDLE1BQU0sT0FBTyxHQUFHLENBQUMsS0FBWSxFQUFFLEVBQUU7UUFDL0IsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3RELE1BQU0sV0FBVyxHQUFHLG9CQUFvQixDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNuRSxNQUFNLEtBQUssR0FBRyxDQUFDLFdBQVcsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3ZELE9BQU8saUJBQWlCLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9DLENBQUMsQ0FBQztJQUNGLE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFFRDs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLElBQUksY0FBYyxDQUNuRCxxQkFBcUIsRUFDckI7SUFDRSxVQUFVLEVBQUUsTUFBTTtJQUNsQixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQ1osMkJBQTJCLENBQ3pCLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxFQUM1QixNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FDMUI7Q0FDSixDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbmplY3QsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgUm91dGluZ0NvbmZpZ1NlcnZpY2UgfSBmcm9tICcuLi9jb25maWd1cmFibGUtcm91dGVzJztcclxuaW1wb3J0IHsgVXJsTWF0Y2hlclNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy91cmwtbWF0Y2hlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVXJsTWF0Y2hlckZhY3RvcnkgfSBmcm9tICcuL3VybC1tYXRjaGVyLWZhY3RvcnknO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRVcmxNYXRjaGVyRmFjdG9yeShcclxuICByb3V0aW5nQ29uZmlnU2VydmljZTogUm91dGluZ0NvbmZpZ1NlcnZpY2UsXHJcbiAgdXJsTWF0Y2hlclNlcnZpY2U6IFVybE1hdGNoZXJTZXJ2aWNlXHJcbik6IFVybE1hdGNoZXJGYWN0b3J5IHtcclxuICBjb25zdCBmYWN0b3J5ID0gKHJvdXRlOiBSb3V0ZSkgPT4ge1xyXG4gICAgY29uc3Qgcm91dGVOYW1lID0gcm91dGUuZGF0YSAmJiByb3V0ZS5kYXRhWydjeFJvdXRlJ107XHJcbiAgICBjb25zdCByb3V0ZUNvbmZpZyA9IHJvdXRpbmdDb25maWdTZXJ2aWNlLmdldFJvdXRlQ29uZmlnKHJvdXRlTmFtZSk7XHJcbiAgICBjb25zdCBwYXRocyA9IChyb3V0ZUNvbmZpZyAmJiByb3V0ZUNvbmZpZy5wYXRocykgfHwgW107XHJcbiAgICByZXR1cm4gdXJsTWF0Y2hlclNlcnZpY2UuZ2V0RnJvbVBhdGhzKHBhdGhzKTtcclxuICB9O1xyXG4gIHJldHVybiBmYWN0b3J5O1xyXG59XHJcblxyXG4vKipcclxuICogSW5qZWN0aW9uIHRva2VuIHdpdGggdXJsIG1hdGNoZXIgZmFjdG9yeSBmb3Igc3BhcnRhY3VzIHJvdXRlcyBjb250YWluaW5nIHByb3BlcnR5IGBkYXRhLmN4Um91dGVgLlxyXG4gKiBUaGUgcHJvdmlkZWQgdXJsIG1hdGNoZXIgbWF0Y2hlcyB0aGUgY29uZmlndXJlZCBgcGF0aHNgIGZyb20gcm91dGluZyBjb25maWcuXHJcbiAqXHJcbiAqIElmIHRoaXMgbWF0Y2hlciBkb2Vzbid0IGZpdCB0aGUgcmVxdWlyZW1lbnRzLCBpdCBjYW4gYmUgcmVwbGFjZWQgd2l0aCBjdXN0b20gbWF0Y2hlclxyXG4gKiBvciBhZGRpdGlvbmFsIG1hdGNoZXJzIGNhbiBiZSBhZGRlZCBmb3IgYSBzcGVjaWZpYyByb3V0ZS4gU2VlIGZvciBleGFtcGxlIFBST0RVQ1RfREVUQUlMU19VUkxfTUFUQ0hFUi5cclxuICpcclxuICogTm90ZTogTWF0Y2hlcnMgd2lsbCBcIm1hdGNoXCIgYSByb3V0ZSwgYnV0IGRvIG5vdCBjb250cmlidXRlIHRvIHRoZSBjcmVhdGlvbiBvZiB0aGUgcm91dGUsIG5vciBkbyB0aGV5IGd1YXJkIHJvdXRlcy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX1VSTF9NQVRDSEVSID0gbmV3IEluamVjdGlvblRva2VuPFVybE1hdGNoZXJGYWN0b3J5PihcclxuICAnREVGQVVMVF9VUkxfTUFUQ0hFUicsXHJcbiAge1xyXG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG4gICAgZmFjdG9yeTogKCkgPT5cclxuICAgICAgZ2V0RGVmYXVsdFVybE1hdGNoZXJGYWN0b3J5KFxyXG4gICAgICAgIGluamVjdChSb3V0aW5nQ29uZmlnU2VydmljZSksXHJcbiAgICAgICAgaW5qZWN0KFVybE1hdGNoZXJTZXJ2aWNlKVxyXG4gICAgICApLFxyXG4gIH1cclxuKTtcclxuIl19