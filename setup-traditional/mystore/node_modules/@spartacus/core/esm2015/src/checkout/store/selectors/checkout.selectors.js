import { createFeatureSelector, createSelector, } from '@ngrx/store';
import { StateUtils } from '../../../state/utils/index';
import { CHECKOUT_FEATURE, } from '../checkout-state';
const getDeliveryAddressSelector = (state) => state.address;
const ɵ0 = getDeliveryAddressSelector;
const getDeliveryModeSelector = (state) => state.deliveryMode;
const ɵ1 = getDeliveryModeSelector;
const getPaymentDetailsSelector = (state) => state.paymentDetails;
const ɵ2 = getPaymentDetailsSelector;
const getOrderDetailsSelector = (state) => state.orderDetails;
const ɵ3 = getOrderDetailsSelector;
export const getCheckoutState = createFeatureSelector(CHECKOUT_FEATURE);
const ɵ4 = (checkoutState) => checkoutState.steps;
export const getCheckoutStepsState = createSelector(getCheckoutState, ɵ4);
const ɵ5 = (state) => StateUtils.loaderValueSelector(state);
export const getCheckoutSteps = createSelector(getCheckoutStepsState, ɵ5);
export const getDeliveryAddress = createSelector(getCheckoutSteps, getDeliveryAddressSelector);
export const getDeliveryMode = createSelector(getCheckoutSteps, getDeliveryModeSelector);
const ɵ6 = (deliveryMode) => {
    return (deliveryMode &&
        Object.keys(deliveryMode.supported).map((code) => deliveryMode.supported[code]));
};
export const getSupportedDeliveryModes = createSelector(getDeliveryMode, ɵ6);
const ɵ7 = (deliveryMode) => {
    return deliveryMode && deliveryMode.selected;
};
export const getSelectedDeliveryModeCode = createSelector(getDeliveryMode, ɵ7);
const ɵ8 = (deliveryMode) => {
    if (deliveryMode.selected !== '') {
        if (Object.keys(deliveryMode.supported).length === 0) {
            return null;
        }
        return deliveryMode.supported[deliveryMode.selected];
    }
};
export const getSelectedDeliveryMode = createSelector(getDeliveryMode, ɵ8);
export const getPaymentDetails = createSelector(getCheckoutSteps, getPaymentDetailsSelector);
export const getCheckoutOrderDetails = createSelector(getCheckoutSteps, getOrderDetailsSelector);
const ɵ9 = (state) => StateUtils.loaderSuccessSelector(state) &&
    !StateUtils.loaderLoadingSelector(state);
export const getCheckoutDetailsLoaded = createSelector(getCheckoutStepsState, ɵ9);
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tvdXQuc2VsZWN0b3JzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2NoZWNrb3V0L3N0b3JlL3NlbGVjdG9ycy9jaGVja291dC5zZWxlY3RvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHFCQUFxQixFQUNyQixjQUFjLEdBRWYsTUFBTSxhQUFhLENBQUM7QUFJckIsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXhELE9BQU8sRUFHTCxnQkFBZ0IsR0FFakIsTUFBTSxtQkFBbUIsQ0FBQztBQUUzQixNQUFNLDBCQUEwQixHQUFHLENBQUMsS0FBeUIsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQzs7QUFDaEYsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLEtBQXlCLEVBQUUsRUFBRSxDQUM1RCxLQUFLLENBQUMsWUFBWSxDQUFDOztBQUNyQixNQUFNLHlCQUF5QixHQUFHLENBQUMsS0FBeUIsRUFBRSxFQUFFLENBQzlELEtBQUssQ0FBQyxjQUFjLENBQUM7O0FBQ3ZCLE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyxLQUF5QixFQUFFLEVBQUUsQ0FDNUQsS0FBSyxDQUFDLFlBQVksQ0FBQzs7QUFFckIsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBR3pCLHFCQUFxQixDQUFnQixnQkFBZ0IsQ0FBQyxDQUFDO1dBT3pELENBQUMsYUFBNEIsRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUs7QUFMdkQsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBRzlCLGNBQWMsQ0FDaEIsZ0JBQWdCLEtBRWpCLENBQUM7V0FLd0MsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUNsRCxVQUFVLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDO0FBSnZDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUd6QixjQUFjLENBQUMscUJBQXFCLEtBRXZDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FHM0IsY0FBYyxDQUFDLGdCQUFnQixFQUFFLDBCQUEwQixDQUFDLENBQUM7QUFFakUsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQU14QixjQUFjLENBQUMsZ0JBQWdCLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztXQUsxQixDQUFDLFlBQVksRUFBRSxFQUFFO0lBQ25ELE9BQU8sQ0FDTCxZQUFZO1FBQ1osTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUNyQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FDdkMsQ0FDRixDQUFDO0FBQ0osQ0FBQztBQVZELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUdsQyxjQUFjLENBQUMsZUFBZSxLQU9oQyxDQUFDO1dBS2lDLENBQUMsWUFBWSxFQUFFLEVBQUU7SUFDbkQsT0FBTyxZQUFZLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQztBQUMvQyxDQUFDO0FBTEQsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBR3BDLGNBQWMsQ0FBQyxlQUFlLEtBRWhDLENBQUM7V0FLaUMsQ0FBQyxZQUFZLEVBQUUsRUFBRTtJQUNuRCxJQUFJLFlBQVksQ0FBQyxRQUFRLEtBQUssRUFBRSxFQUFFO1FBQ2hDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNwRCxPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsT0FBTyxZQUFZLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN0RDtBQUNILENBQUM7QUFWRCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FHaEMsY0FBYyxDQUFDLGVBQWUsS0FPaEMsQ0FBQztBQUVILE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUcxQixjQUFjLENBQUMsZ0JBQWdCLEVBQUUseUJBQXlCLENBQUMsQ0FBQztBQUVoRSxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FHaEMsY0FBYyxDQUFDLGdCQUFnQixFQUFFLHVCQUF1QixDQUFDLENBQUM7V0FPNUQsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUNSLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUM7SUFDdkMsQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDO0FBUDVDLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUdqQyxjQUFjLENBQ2hCLHFCQUFxQixLQUl0QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBjcmVhdGVGZWF0dXJlU2VsZWN0b3IsXHJcbiAgY3JlYXRlU2VsZWN0b3IsXHJcbiAgTWVtb2l6ZWRTZWxlY3RvcixcclxufSBmcm9tICdAbmdyeC9zdG9yZSc7XHJcbmltcG9ydCB7IEFkZHJlc3MgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9hZGRyZXNzLm1vZGVsJztcclxuaW1wb3J0IHsgUGF5bWVudERldGFpbHMgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9jYXJ0Lm1vZGVsJztcclxuaW1wb3J0IHsgRGVsaXZlcnlNb2RlLCBPcmRlciB9IGZyb20gJy4uLy4uLy4uL21vZGVsL29yZGVyLm1vZGVsJztcclxuaW1wb3J0IHsgU3RhdGVVdGlscyB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2luZGV4JztcclxuaW1wb3J0IHsgTG9hZGVyU3RhdGUgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9sb2FkZXIvbG9hZGVyLXN0YXRlJztcclxuaW1wb3J0IHtcclxuICBDaGVja291dFN0YXRlLFxyXG4gIENoZWNrb3V0U3RlcHNTdGF0ZSxcclxuICBDSEVDS09VVF9GRUFUVVJFLFxyXG4gIFN0YXRlV2l0aENoZWNrb3V0LFxyXG59IGZyb20gJy4uL2NoZWNrb3V0LXN0YXRlJztcclxuXHJcbmNvbnN0IGdldERlbGl2ZXJ5QWRkcmVzc1NlbGVjdG9yID0gKHN0YXRlOiBDaGVja291dFN0ZXBzU3RhdGUpID0+IHN0YXRlLmFkZHJlc3M7XHJcbmNvbnN0IGdldERlbGl2ZXJ5TW9kZVNlbGVjdG9yID0gKHN0YXRlOiBDaGVja291dFN0ZXBzU3RhdGUpID0+XHJcbiAgc3RhdGUuZGVsaXZlcnlNb2RlO1xyXG5jb25zdCBnZXRQYXltZW50RGV0YWlsc1NlbGVjdG9yID0gKHN0YXRlOiBDaGVja291dFN0ZXBzU3RhdGUpID0+XHJcbiAgc3RhdGUucGF5bWVudERldGFpbHM7XHJcbmNvbnN0IGdldE9yZGVyRGV0YWlsc1NlbGVjdG9yID0gKHN0YXRlOiBDaGVja291dFN0ZXBzU3RhdGUpID0+XHJcbiAgc3RhdGUub3JkZXJEZXRhaWxzO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldENoZWNrb3V0U3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8XHJcbiAgU3RhdGVXaXRoQ2hlY2tvdXQsXHJcbiAgQ2hlY2tvdXRTdGF0ZVxyXG4+ID0gY3JlYXRlRmVhdHVyZVNlbGVjdG9yPENoZWNrb3V0U3RhdGU+KENIRUNLT1VUX0ZFQVRVUkUpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldENoZWNrb3V0U3RlcHNTdGF0ZTogTWVtb2l6ZWRTZWxlY3RvcjxcclxuICBTdGF0ZVdpdGhDaGVja291dCxcclxuICBMb2FkZXJTdGF0ZTxDaGVja291dFN0ZXBzU3RhdGU+XHJcbj4gPSBjcmVhdGVTZWxlY3RvcihcclxuICBnZXRDaGVja291dFN0YXRlLFxyXG4gIChjaGVja291dFN0YXRlOiBDaGVja291dFN0YXRlKSA9PiBjaGVja291dFN0YXRlLnN0ZXBzXHJcbik7XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0Q2hlY2tvdXRTdGVwczogTWVtb2l6ZWRTZWxlY3RvcjxcclxuICBTdGF0ZVdpdGhDaGVja291dCxcclxuICBDaGVja291dFN0ZXBzU3RhdGVcclxuPiA9IGNyZWF0ZVNlbGVjdG9yKGdldENoZWNrb3V0U3RlcHNTdGF0ZSwgKHN0YXRlKSA9PlxyXG4gIFN0YXRlVXRpbHMubG9hZGVyVmFsdWVTZWxlY3RvcihzdGF0ZSlcclxuKTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXREZWxpdmVyeUFkZHJlc3M6IE1lbW9pemVkU2VsZWN0b3I8XHJcbiAgU3RhdGVXaXRoQ2hlY2tvdXQsXHJcbiAgQWRkcmVzc1xyXG4+ID0gY3JlYXRlU2VsZWN0b3IoZ2V0Q2hlY2tvdXRTdGVwcywgZ2V0RGVsaXZlcnlBZGRyZXNzU2VsZWN0b3IpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldERlbGl2ZXJ5TW9kZTogTWVtb2l6ZWRTZWxlY3RvcjxcclxuICBTdGF0ZVdpdGhDaGVja291dCxcclxuICB7XHJcbiAgICBzdXBwb3J0ZWQ6IHsgW2NvZGU6IHN0cmluZ106IERlbGl2ZXJ5TW9kZSB9O1xyXG4gICAgc2VsZWN0ZWQ6IHN0cmluZztcclxuICB9XHJcbj4gPSBjcmVhdGVTZWxlY3RvcihnZXRDaGVja291dFN0ZXBzLCBnZXREZWxpdmVyeU1vZGVTZWxlY3Rvcik7XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0U3VwcG9ydGVkRGVsaXZlcnlNb2RlczogTWVtb2l6ZWRTZWxlY3RvcjxcclxuICBTdGF0ZVdpdGhDaGVja291dCxcclxuICBEZWxpdmVyeU1vZGVbXVxyXG4+ID0gY3JlYXRlU2VsZWN0b3IoZ2V0RGVsaXZlcnlNb2RlLCAoZGVsaXZlcnlNb2RlKSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIGRlbGl2ZXJ5TW9kZSAmJlxyXG4gICAgT2JqZWN0LmtleXMoZGVsaXZlcnlNb2RlLnN1cHBvcnRlZCkubWFwKFxyXG4gICAgICAoY29kZSkgPT4gZGVsaXZlcnlNb2RlLnN1cHBvcnRlZFtjb2RlXVxyXG4gICAgKVxyXG4gICk7XHJcbn0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFNlbGVjdGVkRGVsaXZlcnlNb2RlQ29kZTogTWVtb2l6ZWRTZWxlY3RvcjxcclxuICBTdGF0ZVdpdGhDaGVja291dCxcclxuICBzdHJpbmdcclxuPiA9IGNyZWF0ZVNlbGVjdG9yKGdldERlbGl2ZXJ5TW9kZSwgKGRlbGl2ZXJ5TW9kZSkgPT4ge1xyXG4gIHJldHVybiBkZWxpdmVyeU1vZGUgJiYgZGVsaXZlcnlNb2RlLnNlbGVjdGVkO1xyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRTZWxlY3RlZERlbGl2ZXJ5TW9kZTogTWVtb2l6ZWRTZWxlY3RvcjxcclxuICBTdGF0ZVdpdGhDaGVja291dCxcclxuICBEZWxpdmVyeU1vZGVcclxuPiA9IGNyZWF0ZVNlbGVjdG9yKGdldERlbGl2ZXJ5TW9kZSwgKGRlbGl2ZXJ5TW9kZSkgPT4ge1xyXG4gIGlmIChkZWxpdmVyeU1vZGUuc2VsZWN0ZWQgIT09ICcnKSB7XHJcbiAgICBpZiAoT2JqZWN0LmtleXMoZGVsaXZlcnlNb2RlLnN1cHBvcnRlZCkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRlbGl2ZXJ5TW9kZS5zdXBwb3J0ZWRbZGVsaXZlcnlNb2RlLnNlbGVjdGVkXTtcclxuICB9XHJcbn0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFBheW1lbnREZXRhaWxzOiBNZW1vaXplZFNlbGVjdG9yPFxyXG4gIFN0YXRlV2l0aENoZWNrb3V0LFxyXG4gIFBheW1lbnREZXRhaWxzXHJcbj4gPSBjcmVhdGVTZWxlY3RvcihnZXRDaGVja291dFN0ZXBzLCBnZXRQYXltZW50RGV0YWlsc1NlbGVjdG9yKTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRDaGVja291dE9yZGVyRGV0YWlsczogTWVtb2l6ZWRTZWxlY3RvcjxcclxuICBTdGF0ZVdpdGhDaGVja291dCxcclxuICBPcmRlclxyXG4+ID0gY3JlYXRlU2VsZWN0b3IoZ2V0Q2hlY2tvdXRTdGVwcywgZ2V0T3JkZXJEZXRhaWxzU2VsZWN0b3IpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldENoZWNrb3V0RGV0YWlsc0xvYWRlZDogTWVtb2l6ZWRTZWxlY3RvcjxcclxuICBTdGF0ZVdpdGhDaGVja291dCxcclxuICBib29sZWFuXHJcbj4gPSBjcmVhdGVTZWxlY3RvcihcclxuICBnZXRDaGVja291dFN0ZXBzU3RhdGUsXHJcbiAgKHN0YXRlKSA9PlxyXG4gICAgU3RhdGVVdGlscy5sb2FkZXJTdWNjZXNzU2VsZWN0b3Ioc3RhdGUpICYmXHJcbiAgICAhU3RhdGVVdGlscy5sb2FkZXJMb2FkaW5nU2VsZWN0b3Ioc3RhdGUpXHJcbik7XHJcbiJdfQ==