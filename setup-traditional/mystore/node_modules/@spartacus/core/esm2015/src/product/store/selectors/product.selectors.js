import { createSelector } from '@ngrx/store';
import { StateUtils } from '../../../state/utils/index';
import { getProductsState } from './feature.selector';
const ɵ0 = (state) => state.details;
export const getProductState = createSelector(getProductsState, ɵ0);
export const getSelectedProductStateFactory = (code, scope = '') => {
    return createSelector(getProductState, (details) => StateUtils.entityLoaderStateSelector(details, code)[scope] ||
        StateUtils.initialLoaderState);
};
export const getSelectedProductFactory = (code, scope = '') => {
    return createSelector(getSelectedProductStateFactory(code, scope), (productState) => StateUtils.loaderValueSelector(productState));
};
export const getSelectedProductLoadingFactory = (code, scope = '') => {
    return createSelector(getSelectedProductStateFactory(code, scope), (productState) => StateUtils.loaderLoadingSelector(productState));
};
export const getSelectedProductSuccessFactory = (code, scope = '') => {
    return createSelector(getSelectedProductStateFactory(code, scope), (productState) => StateUtils.loaderSuccessSelector(productState));
};
export const getSelectedProductErrorFactory = (code, scope = '') => {
    return createSelector(getSelectedProductStateFactory(code, scope), (productState) => StateUtils.loaderErrorSelector(productState));
};
const ɵ1 = (details) => {
    return Object.keys(details.entities);
};
export const getAllProductCodes = createSelector(getProductState, ɵ1);
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC5zZWxlY3RvcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvcHJvZHVjdC9zdG9yZS9zZWxlY3RvcnMvcHJvZHVjdC5zZWxlY3RvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBb0IsTUFBTSxhQUFhLENBQUM7QUFFL0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXhELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO1dBS2pCLENBQUMsS0FBb0IsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU87QUFINUUsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUd4QixjQUFjLENBQUMsZ0JBQWdCLEtBQTBDLENBQUM7QUFFOUUsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQUcsQ0FDNUMsSUFBWSxFQUNaLEtBQUssR0FBRyxFQUFFLEVBQzJELEVBQUU7SUFDdkUsT0FBTyxjQUFjLENBQ25CLGVBQWUsRUFDZixDQUFDLE9BQU8sRUFBRSxFQUFFLENBQ1YsVUFBVSxDQUFDLHlCQUF5QixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDMUQsVUFBVSxDQUFDLGtCQUFrQixDQUNoQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsQ0FDdkMsSUFBWSxFQUNaLEtBQUssR0FBRyxFQUFFLEVBQ21DLEVBQUU7SUFDL0MsT0FBTyxjQUFjLENBQ25CLDhCQUE4QixDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFDM0MsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsQ0FDL0QsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGdDQUFnQyxHQUFHLENBQzlDLElBQVksRUFDWixLQUFLLEdBQUcsRUFBRSxFQUNtQyxFQUFFO0lBQy9DLE9BQU8sY0FBYyxDQUNuQiw4QkFBOEIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQzNDLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUMsWUFBWSxDQUFDLENBQ2pFLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBRyxDQUM5QyxJQUFZLEVBQ1osS0FBSyxHQUFHLEVBQUUsRUFDbUMsRUFBRTtJQUMvQyxPQUFPLGNBQWMsQ0FDbkIsOEJBQThCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUMzQyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxDQUNqRSxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQUcsQ0FDNUMsSUFBWSxFQUNaLEtBQUssR0FBRyxFQUFFLEVBQ21DLEVBQUU7SUFDL0MsT0FBTyxjQUFjLENBQ25CLDhCQUE4QixDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFDM0MsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsQ0FDL0QsQ0FBQztBQUNKLENBQUMsQ0FBQztXQUtrQyxDQUFDLE9BQU8sRUFBRSxFQUFFO0lBQzlDLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQUxELE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUczQixjQUFjLENBQUMsZUFBZSxLQUVoQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IsIE1lbW9pemVkU2VsZWN0b3IgfSBmcm9tICdAbmdyeC9zdG9yZSc7XHJcbmltcG9ydCB7IFByb2R1Y3QgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9wcm9kdWN0Lm1vZGVsJztcclxuaW1wb3J0IHsgU3RhdGVVdGlscyB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2luZGV4JztcclxuaW1wb3J0IHsgUHJvZHVjdHNTdGF0ZSwgU3RhdGVXaXRoUHJvZHVjdCB9IGZyb20gJy4uL3Byb2R1Y3Qtc3RhdGUnO1xyXG5pbXBvcnQgeyBnZXRQcm9kdWN0c1N0YXRlIH0gZnJvbSAnLi9mZWF0dXJlLnNlbGVjdG9yJztcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRQcm9kdWN0U3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8XHJcbiAgU3RhdGVXaXRoUHJvZHVjdCxcclxuICBTdGF0ZVV0aWxzLkVudGl0eUxvYWRlclN0YXRlPFByb2R1Y3Q+XHJcbj4gPSBjcmVhdGVTZWxlY3RvcihnZXRQcm9kdWN0c1N0YXRlLCAoc3RhdGU6IFByb2R1Y3RzU3RhdGUpID0+IHN0YXRlLmRldGFpbHMpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFNlbGVjdGVkUHJvZHVjdFN0YXRlRmFjdG9yeSA9IChcclxuICBjb2RlOiBzdHJpbmcsXHJcbiAgc2NvcGUgPSAnJ1xyXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aFByb2R1Y3QsIFN0YXRlVXRpbHMuTG9hZGVyU3RhdGU8UHJvZHVjdD4+ID0+IHtcclxuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoXHJcbiAgICBnZXRQcm9kdWN0U3RhdGUsXHJcbiAgICAoZGV0YWlscykgPT5cclxuICAgICAgU3RhdGVVdGlscy5lbnRpdHlMb2FkZXJTdGF0ZVNlbGVjdG9yKGRldGFpbHMsIGNvZGUpW3Njb3BlXSB8fFxyXG4gICAgICBTdGF0ZVV0aWxzLmluaXRpYWxMb2FkZXJTdGF0ZVxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0U2VsZWN0ZWRQcm9kdWN0RmFjdG9yeSA9IChcclxuICBjb2RlOiBzdHJpbmcsXHJcbiAgc2NvcGUgPSAnJ1xyXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aFByb2R1Y3QsIFByb2R1Y3Q+ID0+IHtcclxuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoXHJcbiAgICBnZXRTZWxlY3RlZFByb2R1Y3RTdGF0ZUZhY3RvcnkoY29kZSwgc2NvcGUpLFxyXG4gICAgKHByb2R1Y3RTdGF0ZSkgPT4gU3RhdGVVdGlscy5sb2FkZXJWYWx1ZVNlbGVjdG9yKHByb2R1Y3RTdGF0ZSlcclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFNlbGVjdGVkUHJvZHVjdExvYWRpbmdGYWN0b3J5ID0gKFxyXG4gIGNvZGU6IHN0cmluZyxcclxuICBzY29wZSA9ICcnXHJcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoUHJvZHVjdCwgYm9vbGVhbj4gPT4ge1xyXG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcclxuICAgIGdldFNlbGVjdGVkUHJvZHVjdFN0YXRlRmFjdG9yeShjb2RlLCBzY29wZSksXHJcbiAgICAocHJvZHVjdFN0YXRlKSA9PiBTdGF0ZVV0aWxzLmxvYWRlckxvYWRpbmdTZWxlY3Rvcihwcm9kdWN0U3RhdGUpXHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRTZWxlY3RlZFByb2R1Y3RTdWNjZXNzRmFjdG9yeSA9IChcclxuICBjb2RlOiBzdHJpbmcsXHJcbiAgc2NvcGUgPSAnJ1xyXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aFByb2R1Y3QsIGJvb2xlYW4+ID0+IHtcclxuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoXHJcbiAgICBnZXRTZWxlY3RlZFByb2R1Y3RTdGF0ZUZhY3RvcnkoY29kZSwgc2NvcGUpLFxyXG4gICAgKHByb2R1Y3RTdGF0ZSkgPT4gU3RhdGVVdGlscy5sb2FkZXJTdWNjZXNzU2VsZWN0b3IocHJvZHVjdFN0YXRlKVxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0U2VsZWN0ZWRQcm9kdWN0RXJyb3JGYWN0b3J5ID0gKFxyXG4gIGNvZGU6IHN0cmluZyxcclxuICBzY29wZSA9ICcnXHJcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoUHJvZHVjdCwgYm9vbGVhbj4gPT4ge1xyXG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcclxuICAgIGdldFNlbGVjdGVkUHJvZHVjdFN0YXRlRmFjdG9yeShjb2RlLCBzY29wZSksXHJcbiAgICAocHJvZHVjdFN0YXRlKSA9PiBTdGF0ZVV0aWxzLmxvYWRlckVycm9yU2VsZWN0b3IocHJvZHVjdFN0YXRlKVxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0QWxsUHJvZHVjdENvZGVzOiBNZW1vaXplZFNlbGVjdG9yPFxyXG4gIFN0YXRlV2l0aFByb2R1Y3QsXHJcbiAgc3RyaW5nW11cclxuPiA9IGNyZWF0ZVNlbGVjdG9yKGdldFByb2R1Y3RTdGF0ZSwgKGRldGFpbHMpID0+IHtcclxuICByZXR1cm4gT2JqZWN0LmtleXMoZGV0YWlscy5lbnRpdGllcyk7XHJcbn0pO1xyXG4iXX0=