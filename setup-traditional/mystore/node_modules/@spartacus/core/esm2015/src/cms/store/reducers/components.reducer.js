import { loaderReducer } from '../../../state/utils/loader/loader.reducer';
import { serializePageContext } from '../../utils/cms-utils';
import { CmsActions } from '../actions/index';
export const initialState = {
    component: undefined,
    pageContext: {},
};
function componentExistsReducer(state, action) {
    switch (action.type) {
        case CmsActions.LOAD_CMS_COMPONENT_FAIL:
            return false;
        case CmsActions.CMS_GET_COMPONENT_FROM_PAGE:
        case CmsActions.LOAD_CMS_COMPONENT_SUCCESS:
            return true;
    }
    return state;
}
export function reducer(state = initialState, action) {
    switch (action.type) {
        case CmsActions.LOAD_CMS_COMPONENT: {
            const pageContextReducer = loaderReducer(action.meta.entityType, componentExistsReducer);
            const context = serializePageContext(action.payload.pageContext, true);
            return Object.assign(Object.assign({}, state), { pageContext: Object.assign(Object.assign({}, state.pageContext), { [context]: pageContextReducer(state.pageContext[context], action) }) });
        }
        case CmsActions.LOAD_CMS_COMPONENT_FAIL: {
            const pageContextReducer = loaderReducer(action.meta.entityType, componentExistsReducer);
            const context = serializePageContext(action.payload.pageContext, true);
            return Object.assign(Object.assign({}, state), { pageContext: Object.assign(Object.assign({}, state.pageContext), { [context]: pageContextReducer(state.pageContext[context], action) }) });
        }
        case CmsActions.LOAD_CMS_COMPONENT_SUCCESS: {
            const pageContextReducer = loaderReducer(action.meta.entityType, componentExistsReducer);
            const context = serializePageContext(action.payload.pageContext, true);
            return Object.assign(Object.assign({}, state), { component: action.payload.component, pageContext: Object.assign(Object.assign({}, state.pageContext), { [context]: pageContextReducer(state.pageContext[context], action) }) });
        }
        case CmsActions.CMS_GET_COMPONENT_FROM_PAGE: {
            const pageContextReducer = loaderReducer(action.meta.entityType, componentExistsReducer);
            if (!Array.isArray(action.payload)) {
                const context = serializePageContext(action.payload.pageContext, true);
                return Object.assign(Object.assign({}, state), { component: action.payload.component, pageContext: Object.assign(Object.assign({}, state.pageContext), { [context]: pageContextReducer(state.pageContext[context], action) }) });
            }
        }
    }
    return state;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50cy5yZWR1Y2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2Ntcy9zdG9yZS9yZWR1Y2Vycy9jb21wb25lbnRzLnJlZHVjZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzdELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUc5QyxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQXNCO0lBQzdDLFNBQVMsRUFBRSxTQUFTO0lBQ3BCLFdBQVcsRUFBRSxFQUFFO0NBQ2hCLENBQUM7QUFFRixTQUFTLHNCQUFzQixDQUM3QixLQUEwQixFQUMxQixNQUF3QztJQUV4QyxRQUFRLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFDbkIsS0FBSyxVQUFVLENBQUMsdUJBQXVCO1lBQ3JDLE9BQU8sS0FBSyxDQUFDO1FBRWYsS0FBSyxVQUFVLENBQUMsMkJBQTJCLENBQUM7UUFDNUMsS0FBSyxVQUFVLENBQUMsMEJBQTBCO1lBQ3hDLE9BQU8sSUFBSSxDQUFDO0tBQ2Y7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxNQUFNLFVBQVUsT0FBTyxDQUNyQixLQUFLLEdBQUcsWUFBWSxFQUNwQixNQUF3QztJQUV4QyxRQUFRLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFDbkIsS0FBSyxVQUFVLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUNsQyxNQUFNLGtCQUFrQixHQUFHLGFBQWEsQ0FDdEMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQ3RCLHNCQUFzQixDQUN2QixDQUFDO1lBQ0YsTUFBTSxPQUFPLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDdkUsdUNBQ0ssS0FBSyxLQUNSLFdBQVcsa0NBQ04sS0FBSyxDQUFDLFdBQVcsS0FDcEIsQ0FBQyxPQUFPLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxFQUFFLE1BQU0sQ0FBQyxPQUVuRTtTQUNIO1FBQ0QsS0FBSyxVQUFVLENBQUMsdUJBQXVCLENBQUMsQ0FBQztZQUN2QyxNQUFNLGtCQUFrQixHQUFHLGFBQWEsQ0FDdEMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQ3RCLHNCQUFzQixDQUN2QixDQUFDO1lBQ0YsTUFBTSxPQUFPLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDdkUsdUNBQ0ssS0FBSyxLQUNSLFdBQVcsa0NBQ04sS0FBSyxDQUFDLFdBQVcsS0FDcEIsQ0FBQyxPQUFPLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxFQUFFLE1BQU0sQ0FBQyxPQUVuRTtTQUNIO1FBQ0QsS0FBSyxVQUFVLENBQUMsMEJBQTBCLENBQUMsQ0FBQztZQUMxQyxNQUFNLGtCQUFrQixHQUFHLGFBQWEsQ0FDdEMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQ3RCLHNCQUFzQixDQUN2QixDQUFDO1lBQ0YsTUFBTSxPQUFPLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDdkUsdUNBQ0ssS0FBSyxLQUNSLFNBQVMsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQWMsRUFDeEMsV0FBVyxrQ0FDTixLQUFLLENBQUMsV0FBVyxLQUNwQixDQUFDLE9BQU8sQ0FBQyxFQUFFLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUUsTUFBTSxDQUFDLE9BRW5FO1NBQ0g7UUFDRCxLQUFLLFVBQVUsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1lBQzNDLE1BQU0sa0JBQWtCLEdBQUcsYUFBYSxDQUN0QyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFDdEIsc0JBQXNCLENBQ3ZCLENBQUM7WUFDRixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ2xDLE1BQU0sT0FBTyxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUN2RSx1Q0FDSyxLQUFLLEtBQ1IsU0FBUyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBYyxFQUN4QyxXQUFXLGtDQUNOLEtBQUssQ0FBQyxXQUFXLEtBQ3BCLENBQUMsT0FBTyxDQUFDLEVBQUUsa0JBQWtCLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLENBQUMsT0FFbkU7YUFDSDtTQUNGO0tBQ0Y7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2FkZXJSZWR1Y2VyIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvbG9hZGVyL2xvYWRlci5yZWR1Y2VyJztcclxuaW1wb3J0IHsgc2VyaWFsaXplUGFnZUNvbnRleHQgfSBmcm9tICcuLi8uLi91dGlscy9jbXMtdXRpbHMnO1xyXG5pbXBvcnQgeyBDbXNBY3Rpb25zIH0gZnJvbSAnLi4vYWN0aW9ucy9pbmRleCc7XHJcbmltcG9ydCB7IENvbXBvbmVudHNDb250ZXh0IH0gZnJvbSAnLi4vY21zLXN0YXRlJztcclxuXHJcbmV4cG9ydCBjb25zdCBpbml0aWFsU3RhdGU6IENvbXBvbmVudHNDb250ZXh0ID0ge1xyXG4gIGNvbXBvbmVudDogdW5kZWZpbmVkLFxyXG4gIHBhZ2VDb250ZXh0OiB7fSxcclxufTtcclxuXHJcbmZ1bmN0aW9uIGNvbXBvbmVudEV4aXN0c1JlZHVjZXI8VD4oXHJcbiAgc3RhdGU6IGJvb2xlYW4gfCB1bmRlZmluZWQsXHJcbiAgYWN0aW9uOiBDbXNBY3Rpb25zLkNtc0NvbXBvbmVudEFjdGlvbjxUPlxyXG4pOiBib29sZWFuIHtcclxuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICBjYXNlIENtc0FjdGlvbnMuTE9BRF9DTVNfQ09NUE9ORU5UX0ZBSUw6XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICBjYXNlIENtc0FjdGlvbnMuQ01TX0dFVF9DT01QT05FTlRfRlJPTV9QQUdFOlxyXG4gICAgY2FzZSBDbXNBY3Rpb25zLkxPQURfQ01TX0NPTVBPTkVOVF9TVUNDRVNTOlxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcbiAgcmV0dXJuIHN0YXRlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVkdWNlcjxUPihcclxuICBzdGF0ZSA9IGluaXRpYWxTdGF0ZSxcclxuICBhY3Rpb246IENtc0FjdGlvbnMuQ21zQ29tcG9uZW50QWN0aW9uPFQ+XHJcbik6IENvbXBvbmVudHNDb250ZXh0IHtcclxuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICBjYXNlIENtc0FjdGlvbnMuTE9BRF9DTVNfQ09NUE9ORU5UOiB7XHJcbiAgICAgIGNvbnN0IHBhZ2VDb250ZXh0UmVkdWNlciA9IGxvYWRlclJlZHVjZXI8Ym9vbGVhbj4oXHJcbiAgICAgICAgYWN0aW9uLm1ldGEuZW50aXR5VHlwZSxcclxuICAgICAgICBjb21wb25lbnRFeGlzdHNSZWR1Y2VyXHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBzZXJpYWxpemVQYWdlQ29udGV4dChhY3Rpb24ucGF5bG9hZC5wYWdlQ29udGV4dCwgdHJ1ZSk7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgcGFnZUNvbnRleHQ6IHtcclxuICAgICAgICAgIC4uLnN0YXRlLnBhZ2VDb250ZXh0LFxyXG4gICAgICAgICAgW2NvbnRleHRdOiBwYWdlQ29udGV4dFJlZHVjZXIoc3RhdGUucGFnZUNvbnRleHRbY29udGV4dF0sIGFjdGlvbiksXHJcbiAgICAgICAgfSxcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGNhc2UgQ21zQWN0aW9ucy5MT0FEX0NNU19DT01QT05FTlRfRkFJTDoge1xyXG4gICAgICBjb25zdCBwYWdlQ29udGV4dFJlZHVjZXIgPSBsb2FkZXJSZWR1Y2VyPGJvb2xlYW4+KFxyXG4gICAgICAgIGFjdGlvbi5tZXRhLmVudGl0eVR5cGUsXHJcbiAgICAgICAgY29tcG9uZW50RXhpc3RzUmVkdWNlclxyXG4gICAgICApO1xyXG4gICAgICBjb25zdCBjb250ZXh0ID0gc2VyaWFsaXplUGFnZUNvbnRleHQoYWN0aW9uLnBheWxvYWQucGFnZUNvbnRleHQsIHRydWUpO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIHBhZ2VDb250ZXh0OiB7XHJcbiAgICAgICAgICAuLi5zdGF0ZS5wYWdlQ29udGV4dCxcclxuICAgICAgICAgIFtjb250ZXh0XTogcGFnZUNvbnRleHRSZWR1Y2VyKHN0YXRlLnBhZ2VDb250ZXh0W2NvbnRleHRdLCBhY3Rpb24pLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjYXNlIENtc0FjdGlvbnMuTE9BRF9DTVNfQ09NUE9ORU5UX1NVQ0NFU1M6IHtcclxuICAgICAgY29uc3QgcGFnZUNvbnRleHRSZWR1Y2VyID0gbG9hZGVyUmVkdWNlcjxib29sZWFuPihcclxuICAgICAgICBhY3Rpb24ubWV0YS5lbnRpdHlUeXBlLFxyXG4gICAgICAgIGNvbXBvbmVudEV4aXN0c1JlZHVjZXJcclxuICAgICAgKTtcclxuICAgICAgY29uc3QgY29udGV4dCA9IHNlcmlhbGl6ZVBhZ2VDb250ZXh0KGFjdGlvbi5wYXlsb2FkLnBhZ2VDb250ZXh0LCB0cnVlKTtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICBjb21wb25lbnQ6IGFjdGlvbi5wYXlsb2FkLmNvbXBvbmVudCBhcyBULFxyXG4gICAgICAgIHBhZ2VDb250ZXh0OiB7XHJcbiAgICAgICAgICAuLi5zdGF0ZS5wYWdlQ29udGV4dCxcclxuICAgICAgICAgIFtjb250ZXh0XTogcGFnZUNvbnRleHRSZWR1Y2VyKHN0YXRlLnBhZ2VDb250ZXh0W2NvbnRleHRdLCBhY3Rpb24pLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjYXNlIENtc0FjdGlvbnMuQ01TX0dFVF9DT01QT05FTlRfRlJPTV9QQUdFOiB7XHJcbiAgICAgIGNvbnN0IHBhZ2VDb250ZXh0UmVkdWNlciA9IGxvYWRlclJlZHVjZXI8Ym9vbGVhbj4oXHJcbiAgICAgICAgYWN0aW9uLm1ldGEuZW50aXR5VHlwZSxcclxuICAgICAgICBjb21wb25lbnRFeGlzdHNSZWR1Y2VyXHJcbiAgICAgICk7XHJcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShhY3Rpb24ucGF5bG9hZCkpIHtcclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gc2VyaWFsaXplUGFnZUNvbnRleHQoYWN0aW9uLnBheWxvYWQucGFnZUNvbnRleHQsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgIGNvbXBvbmVudDogYWN0aW9uLnBheWxvYWQuY29tcG9uZW50IGFzIFQsXHJcbiAgICAgICAgICBwYWdlQ29udGV4dDoge1xyXG4gICAgICAgICAgICAuLi5zdGF0ZS5wYWdlQ29udGV4dCxcclxuICAgICAgICAgICAgW2NvbnRleHRdOiBwYWdlQ29udGV4dFJlZHVjZXIoc3RhdGUucGFnZUNvbnRleHRbY29udGV4dF0sIGFjdGlvbiksXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHN0YXRlO1xyXG59XHJcbiJdfQ==