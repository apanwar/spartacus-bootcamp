import { StateUtils } from '../../../state/utils/index';
import { COMPONENT_ENTITY } from '../cms-state';
export const LOAD_CMS_COMPONENT = '[Cms] Load Component';
export const LOAD_CMS_COMPONENT_FAIL = '[Cms] Load Component Fail';
export const LOAD_CMS_COMPONENT_SUCCESS = '[Cms] Load Component Success';
export const CMS_GET_COMPONENT_FROM_PAGE = '[Cms] Get Component from Page';
export class LoadCmsComponent extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(COMPONENT_ENTITY, payload.uid);
        this.payload = payload;
        this.type = LOAD_CMS_COMPONENT;
    }
}
export class LoadCmsComponentFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(COMPONENT_ENTITY, payload.uid, payload.error);
        this.payload = payload;
        this.type = LOAD_CMS_COMPONENT_FAIL;
    }
}
export class LoadCmsComponentSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(COMPONENT_ENTITY, payload.uid || payload.component.uid || '');
        this.payload = payload;
        this.type = LOAD_CMS_COMPONENT_SUCCESS;
    }
}
export class CmsGetComponentFromPage extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(COMPONENT_ENTITY, [].concat(payload).map((cmp) => cmp.component.uid));
        this.payload = payload;
        this.type = CMS_GET_COMPONENT_FROM_PAGE;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50cy5hY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL3N0b3JlL2FjdGlvbnMvY29tcG9uZW50cy5hY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUVoRCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxzQkFBc0IsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRywyQkFBMkIsQ0FBQztBQUNuRSxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyw4QkFBOEIsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRywrQkFBK0IsQ0FBQztBQUUzRSxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsVUFBVSxDQUFDLGdCQUFnQjtJQUUvRCxZQUNTLE9BR047UUFFRCxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBTDlCLFlBQU8sR0FBUCxPQUFPLENBR2I7UUFMTSxTQUFJLEdBQUcsa0JBQWtCLENBQUM7SUFRbkMsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLG9CQUFxQixTQUFRLFVBQVUsQ0FBQyxnQkFBZ0I7SUFFbkUsWUFDUyxPQUErRDtRQUV0RSxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFGN0MsWUFBTyxHQUFQLE9BQU8sQ0FBd0Q7UUFGL0QsU0FBSSxHQUFHLHVCQUF1QixDQUFDO0lBS3hDLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyx1QkFFWCxTQUFRLFVBQVUsQ0FBQyxtQkFBbUI7SUFFdEMsWUFDUyxPQUlOO1FBRUQsS0FBSyxDQUFDLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUM7UUFON0QsWUFBTyxHQUFQLE9BQU8sQ0FJYjtRQU5NLFNBQUksR0FBRywwQkFBMEIsQ0FBQztJQVMzQyxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sdUJBRVgsU0FBUSxVQUFVLENBQUMsbUJBQW1CO0lBRXRDLFlBQ1MsT0FFeUM7UUFFaEQsS0FBSyxDQUNILGdCQUFnQixFQUNoQixFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FDbkQsQ0FBQztRQVBLLFlBQU8sR0FBUCxPQUFPLENBRWtDO1FBSnpDLFNBQUksR0FBRywyQkFBMkIsQ0FBQztJQVU1QyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbXNDb21wb25lbnQgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9jbXMubW9kZWwnO1xyXG5pbXBvcnQgeyBQYWdlQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL3JvdXRpbmcvaW5kZXgnO1xyXG5pbXBvcnQgeyBTdGF0ZVV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvaW5kZXgnO1xyXG5pbXBvcnQgeyBDT01QT05FTlRfRU5USVRZIH0gZnJvbSAnLi4vY21zLXN0YXRlJztcclxuXHJcbmV4cG9ydCBjb25zdCBMT0FEX0NNU19DT01QT05FTlQgPSAnW0Ntc10gTG9hZCBDb21wb25lbnQnO1xyXG5leHBvcnQgY29uc3QgTE9BRF9DTVNfQ09NUE9ORU5UX0ZBSUwgPSAnW0Ntc10gTG9hZCBDb21wb25lbnQgRmFpbCc7XHJcbmV4cG9ydCBjb25zdCBMT0FEX0NNU19DT01QT05FTlRfU1VDQ0VTUyA9ICdbQ21zXSBMb2FkIENvbXBvbmVudCBTdWNjZXNzJztcclxuZXhwb3J0IGNvbnN0IENNU19HRVRfQ09NUE9ORU5UX0ZST01fUEFHRSA9ICdbQ21zXSBHZXQgQ29tcG9uZW50IGZyb20gUGFnZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgTG9hZENtc0NvbXBvbmVudCBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5TG9hZEFjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfQ01TX0NPTVBPTkVOVDtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyBwYXlsb2FkOiB7XHJcbiAgICAgIHVpZDogc3RyaW5nO1xyXG4gICAgICBwYWdlQ29udGV4dDogUGFnZUNvbnRleHQ7XHJcbiAgICB9XHJcbiAgKSB7XHJcbiAgICBzdXBlcihDT01QT05FTlRfRU5USVRZLCBwYXlsb2FkLnVpZCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTG9hZENtc0NvbXBvbmVudEZhaWwgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eUZhaWxBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX0NNU19DT01QT05FTlRfRkFJTDtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyBwYXlsb2FkOiB7IHVpZDogc3RyaW5nOyBlcnJvcj86IGFueTsgcGFnZUNvbnRleHQ6IFBhZ2VDb250ZXh0IH1cclxuICApIHtcclxuICAgIHN1cGVyKENPTVBPTkVOVF9FTlRJVFksIHBheWxvYWQudWlkLCBwYXlsb2FkLmVycm9yKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMb2FkQ21zQ29tcG9uZW50U3VjY2VzczxcclxuICBUIGV4dGVuZHMgQ21zQ29tcG9uZW50XHJcbj4gZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eVN1Y2Nlc3NBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX0NNU19DT01QT05FTlRfU1VDQ0VTUztcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyBwYXlsb2FkOiB7XHJcbiAgICAgIGNvbXBvbmVudDogVDtcclxuICAgICAgdWlkPzogc3RyaW5nO1xyXG4gICAgICBwYWdlQ29udGV4dDogUGFnZUNvbnRleHQ7XHJcbiAgICB9XHJcbiAgKSB7XHJcbiAgICBzdXBlcihDT01QT05FTlRfRU5USVRZLCBwYXlsb2FkLnVpZCB8fCBwYXlsb2FkLmNvbXBvbmVudC51aWQgfHwgJycpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENtc0dldENvbXBvbmVudEZyb21QYWdlPFxyXG4gIFQgZXh0ZW5kcyBDbXNDb21wb25lbnRcclxuPiBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5U3VjY2Vzc0FjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IENNU19HRVRfQ09NUE9ORU5UX0ZST01fUEFHRTtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyBwYXlsb2FkOlxyXG4gICAgICB8IHsgY29tcG9uZW50OiBUOyBwYWdlQ29udGV4dDogUGFnZUNvbnRleHQgfVxyXG4gICAgICB8IHsgY29tcG9uZW50OiBUOyBwYWdlQ29udGV4dDogUGFnZUNvbnRleHQgfVtdXHJcbiAgKSB7XHJcbiAgICBzdXBlcihcclxuICAgICAgQ09NUE9ORU5UX0VOVElUWSxcclxuICAgICAgW10uY29uY2F0KHBheWxvYWQpLm1hcCgoY21wKSA9PiBjbXAuY29tcG9uZW50LnVpZClcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBhY3Rpb24gdHlwZXNcclxuZXhwb3J0IHR5cGUgQ21zQ29tcG9uZW50QWN0aW9uPFQgZXh0ZW5kcyBDbXNDb21wb25lbnQ+ID1cclxuICB8IExvYWRDbXNDb21wb25lbnRcclxuICB8IExvYWRDbXNDb21wb25lbnRGYWlsXHJcbiAgfCBMb2FkQ21zQ29tcG9uZW50U3VjY2VzczxUPlxyXG4gIHwgQ21zR2V0Q29tcG9uZW50RnJvbVBhZ2U8VD47XHJcbiJdfQ==