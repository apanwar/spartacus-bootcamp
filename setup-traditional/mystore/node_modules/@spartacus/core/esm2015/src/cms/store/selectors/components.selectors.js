import { createSelector } from '@ngrx/store';
import { StateUtils } from '../../../state/utils/index';
import { getCmsState } from './feature.selectors';
const ɵ0 = (state) => state.components;
export const getComponentsState = createSelector(getCmsState, ɵ0);
export const componentsContextSelectorFactory = (uid) => {
    return createSelector(getComponentsState, (componentsState) => StateUtils.entitySelector(componentsState, uid));
};
export const componentsLoaderStateSelectorFactory = (uid, context) => {
    return createSelector(componentsContextSelectorFactory(uid), (componentsContext) => (componentsContext &&
        componentsContext.pageContext &&
        componentsContext.pageContext[context]) ||
        StateUtils.initialLoaderState);
};
/**
 * This selector will return:
 *   - true: component for this context exists
 *   - false: component for this context doesn't exist
 *   - undefined: if the exists status for component is unknown
 *
 * @param uid
 * @param context
 */
export const componentsContextExistsSelectorFactory = (uid, context) => {
    return createSelector(componentsLoaderStateSelectorFactory(uid, context), (loaderState) => StateUtils.loaderValueSelector(loaderState));
};
export const componentsDataSelectorFactory = (uid) => {
    return createSelector(componentsContextSelectorFactory(uid), (state) => state ? state.component : undefined);
};
/**
 * This selector will return:
 *   - CmsComponent instance: if we have component data for specified context
 *   - null: if there is no component data for specified context
 *   - undefined: if status of component data for specified context is unknown
 *
 * @param uid
 * @param context
 */
export const componentsSelectorFactory = (uid, context) => {
    return createSelector(componentsDataSelectorFactory(uid), componentsContextExistsSelectorFactory(uid, context), (componentState, exists) => {
        switch (exists) {
            case true:
                return componentState;
            case false:
                return null;
            case undefined:
                return undefined;
        }
    });
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50cy5zZWxlY3RvcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL3N0b3JlL3NlbGVjdG9ycy9jb21wb25lbnRzLnNlbGVjdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFvQixNQUFNLGFBQWEsQ0FBQztBQUUvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFeEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO1dBS2xCLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVTtBQUgzRCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FHM0IsY0FBYyxDQUFDLFdBQVcsS0FBOEIsQ0FBQztBQUU3RCxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBRyxDQUM5QyxHQUFXLEVBQ3dDLEVBQUU7SUFDckQsT0FBTyxjQUFjLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUM1RCxVQUFVLENBQUMsY0FBYyxDQUFDLGVBQWUsRUFBRSxHQUFHLENBQUMsQ0FDaEQsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG9DQUFvQyxHQUFHLENBQ2xELEdBQVcsRUFDWCxPQUFlLEVBQ2tELEVBQUU7SUFDbkUsT0FBTyxjQUFjLENBQ25CLGdDQUFnQyxDQUFDLEdBQUcsQ0FBQyxFQUNyQyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FDcEIsQ0FBQyxpQkFBaUI7UUFDaEIsaUJBQWlCLENBQUMsV0FBVztRQUM3QixpQkFBaUIsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDekMsVUFBVSxDQUFDLGtCQUFrQixDQUNoQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUY7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLENBQUMsTUFBTSxzQ0FBc0MsR0FBRyxDQUNwRCxHQUFXLEVBQ1gsT0FBZSxFQUNzQyxFQUFFO0lBQ3ZELE9BQU8sY0FBYyxDQUNuQixvQ0FBb0MsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEVBQ2xELENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsV0FBVyxDQUFDLENBQzdELENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBRyxDQUMzQyxHQUFXLEVBQytDLEVBQUU7SUFDNUQsT0FBTyxjQUFjLENBQUMsZ0NBQWdDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUNyRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FDcEMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsQ0FDdkMsR0FBVyxFQUNYLE9BQWUsRUFDa0QsRUFBRTtJQUNuRSxPQUFPLGNBQWMsQ0FDbkIsNkJBQTZCLENBQUMsR0FBRyxDQUFDLEVBQ2xDLHNDQUFzQyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsRUFDcEQsQ0FBQyxjQUFjLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDekIsUUFBUSxNQUFNLEVBQUU7WUFDZCxLQUFLLElBQUk7Z0JBQ1AsT0FBTyxjQUFjLENBQUM7WUFDeEIsS0FBSyxLQUFLO2dCQUNSLE9BQU8sSUFBSSxDQUFDO1lBQ2QsS0FBSyxTQUFTO2dCQUNaLE9BQU8sU0FBUyxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQyxDQUNGLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTZWxlY3RvciwgTWVtb2l6ZWRTZWxlY3RvciB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcclxuaW1wb3J0IHsgQ21zQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY21zLm1vZGVsJztcclxuaW1wb3J0IHsgU3RhdGVVdGlscyB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2luZGV4JztcclxuaW1wb3J0IHsgQ29tcG9uZW50c0NvbnRleHQsIENvbXBvbmVudHNTdGF0ZSwgU3RhdGVXaXRoQ21zIH0gZnJvbSAnLi4vY21zLXN0YXRlJztcclxuaW1wb3J0IHsgZ2V0Q21zU3RhdGUgfSBmcm9tICcuL2ZlYXR1cmUuc2VsZWN0b3JzJztcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRDb21wb25lbnRzU3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8XHJcbiAgU3RhdGVXaXRoQ21zLFxyXG4gIENvbXBvbmVudHNTdGF0ZVxyXG4+ID0gY3JlYXRlU2VsZWN0b3IoZ2V0Q21zU3RhdGUsIChzdGF0ZSkgPT4gc3RhdGUuY29tcG9uZW50cyk7XHJcblxyXG5leHBvcnQgY29uc3QgY29tcG9uZW50c0NvbnRleHRTZWxlY3RvckZhY3RvcnkgPSAoXHJcbiAgdWlkOiBzdHJpbmdcclxuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhDbXMsIENvbXBvbmVudHNDb250ZXh0PiA9PiB7XHJcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKGdldENvbXBvbmVudHNTdGF0ZSwgKGNvbXBvbmVudHNTdGF0ZSkgPT5cclxuICAgIFN0YXRlVXRpbHMuZW50aXR5U2VsZWN0b3IoY29tcG9uZW50c1N0YXRlLCB1aWQpXHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjb21wb25lbnRzTG9hZGVyU3RhdGVTZWxlY3RvckZhY3RvcnkgPSAoXHJcbiAgdWlkOiBzdHJpbmcsXHJcbiAgY29udGV4dDogc3RyaW5nXHJcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoQ21zLCBTdGF0ZVV0aWxzLkxvYWRlclN0YXRlPGJvb2xlYW4+PiA9PiB7XHJcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxyXG4gICAgY29tcG9uZW50c0NvbnRleHRTZWxlY3RvckZhY3RvcnkodWlkKSxcclxuICAgIChjb21wb25lbnRzQ29udGV4dCkgPT5cclxuICAgICAgKGNvbXBvbmVudHNDb250ZXh0ICYmXHJcbiAgICAgICAgY29tcG9uZW50c0NvbnRleHQucGFnZUNvbnRleHQgJiZcclxuICAgICAgICBjb21wb25lbnRzQ29udGV4dC5wYWdlQ29udGV4dFtjb250ZXh0XSkgfHxcclxuICAgICAgU3RhdGVVdGlscy5pbml0aWFsTG9hZGVyU3RhdGVcclxuICApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgc2VsZWN0b3Igd2lsbCByZXR1cm46XHJcbiAqICAgLSB0cnVlOiBjb21wb25lbnQgZm9yIHRoaXMgY29udGV4dCBleGlzdHNcclxuICogICAtIGZhbHNlOiBjb21wb25lbnQgZm9yIHRoaXMgY29udGV4dCBkb2Vzbid0IGV4aXN0XHJcbiAqICAgLSB1bmRlZmluZWQ6IGlmIHRoZSBleGlzdHMgc3RhdHVzIGZvciBjb21wb25lbnQgaXMgdW5rbm93blxyXG4gKlxyXG4gKiBAcGFyYW0gdWlkXHJcbiAqIEBwYXJhbSBjb250ZXh0XHJcbiAqL1xyXG5leHBvcnQgY29uc3QgY29tcG9uZW50c0NvbnRleHRFeGlzdHNTZWxlY3RvckZhY3RvcnkgPSAoXHJcbiAgdWlkOiBzdHJpbmcsXHJcbiAgY29udGV4dDogc3RyaW5nXHJcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoQ21zLCBib29sZWFuIHwgdW5kZWZpbmVkPiA9PiB7XHJcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxyXG4gICAgY29tcG9uZW50c0xvYWRlclN0YXRlU2VsZWN0b3JGYWN0b3J5KHVpZCwgY29udGV4dCksXHJcbiAgICAobG9hZGVyU3RhdGUpID0+IFN0YXRlVXRpbHMubG9hZGVyVmFsdWVTZWxlY3Rvcihsb2FkZXJTdGF0ZSlcclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNvbXBvbmVudHNEYXRhU2VsZWN0b3JGYWN0b3J5ID0gKFxyXG4gIHVpZDogc3RyaW5nXHJcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoQ21zLCBDbXNDb21wb25lbnQgfCB1bmRlZmluZWQ+ID0+IHtcclxuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoY29tcG9uZW50c0NvbnRleHRTZWxlY3RvckZhY3RvcnkodWlkKSwgKHN0YXRlKSA9PlxyXG4gICAgc3RhdGUgPyBzdGF0ZS5jb21wb25lbnQgOiB1bmRlZmluZWRcclxuICApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgc2VsZWN0b3Igd2lsbCByZXR1cm46XHJcbiAqICAgLSBDbXNDb21wb25lbnQgaW5zdGFuY2U6IGlmIHdlIGhhdmUgY29tcG9uZW50IGRhdGEgZm9yIHNwZWNpZmllZCBjb250ZXh0XHJcbiAqICAgLSBudWxsOiBpZiB0aGVyZSBpcyBubyBjb21wb25lbnQgZGF0YSBmb3Igc3BlY2lmaWVkIGNvbnRleHRcclxuICogICAtIHVuZGVmaW5lZDogaWYgc3RhdHVzIG9mIGNvbXBvbmVudCBkYXRhIGZvciBzcGVjaWZpZWQgY29udGV4dCBpcyB1bmtub3duXHJcbiAqXHJcbiAqIEBwYXJhbSB1aWRcclxuICogQHBhcmFtIGNvbnRleHRcclxuICovXHJcbmV4cG9ydCBjb25zdCBjb21wb25lbnRzU2VsZWN0b3JGYWN0b3J5ID0gKFxyXG4gIHVpZDogc3RyaW5nLFxyXG4gIGNvbnRleHQ6IHN0cmluZ1xyXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aENtcywgQ21zQ29tcG9uZW50IHwgbnVsbCB8IHVuZGVmaW5lZD4gPT4ge1xyXG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcclxuICAgIGNvbXBvbmVudHNEYXRhU2VsZWN0b3JGYWN0b3J5KHVpZCksXHJcbiAgICBjb21wb25lbnRzQ29udGV4dEV4aXN0c1NlbGVjdG9yRmFjdG9yeSh1aWQsIGNvbnRleHQpLFxyXG4gICAgKGNvbXBvbmVudFN0YXRlLCBleGlzdHMpID0+IHtcclxuICAgICAgc3dpdGNoIChleGlzdHMpIHtcclxuICAgICAgICBjYXNlIHRydWU6XHJcbiAgICAgICAgICByZXR1cm4gY29tcG9uZW50U3RhdGU7XHJcbiAgICAgICAgY2FzZSBmYWxzZTpcclxuICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIGNhc2UgdW5kZWZpbmVkOlxyXG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICk7XHJcbn07XHJcbiJdfQ==