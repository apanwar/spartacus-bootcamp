import { __decorate, __param } from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { combineLatest, of } from 'rxjs';
import { debounceTime, filter, map, switchMap } from 'rxjs/operators';
import { resolveApplicable } from '../../util/applicable';
import { PageMetaResolver } from '../page/page-meta.resolver';
import { CmsService } from './cms.service';
import * as i0 from "@angular/core";
import * as i1 from "../page/page-meta.resolver";
import * as i2 from "./cms.service";
let PageMetaService = class PageMetaService {
    constructor(resolvers, cms) {
        this.resolvers = resolvers;
        this.cms = cms;
        /**
         * The list of resolver interfaces will be evaluated for the pageResolvers.
         *
         * TOOD: optimize browser vs SSR resolvers; image, robots and description
         *       aren't needed during browsing.
         * TODO: we can make the list of resolver types configurable
         */
        this.resolverMethods = {
            title: 'resolveTitle',
            heading: 'resolveHeading',
            description: 'resolveDescription',
            breadcrumbs: 'resolveBreadcrumbs',
            image: 'resolveImage',
            robots: 'resolveRobots',
        };
        this.resolvers = this.resolvers || [];
    }
    getMeta() {
        return this.cms.getCurrentPage().pipe(filter(Boolean), switchMap((page) => {
            const metaResolver = this.getMetaResolver(page);
            if (metaResolver) {
                return this.resolve(metaResolver);
            }
            else {
                // we do not have a page resolver
                return of(null);
            }
        }));
    }
    /**
     * If a `PageResolver` has implemented a resolver interface, the resolved data
     * is merged into the `PageMeta` object.
     * @param metaResolver
     */
    resolve(metaResolver) {
        const resolveMethods = Object.keys(this.resolverMethods)
            .filter((key) => metaResolver[this.resolverMethods[key]])
            .map((key) => metaResolver[this.resolverMethods[key]]().pipe(map((data) => ({
            [key]: data,
        }))));
        return combineLatest(resolveMethods).pipe(debounceTime(0), // avoid partial data emissions when all methods resolve at the same time
        map((data) => Object.assign({}, ...data)));
    }
    /**
     * Return the resolver with the best match, based on a score
     * generated by the resolver.
     *
     * Resolvers match by default on `PageType` and `page.template`.
     */
    getMetaResolver(page) {
        return resolveApplicable(this.resolvers, [page], [page]);
    }
};
PageMetaService.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [PageMetaResolver,] }] },
    { type: CmsService }
];
PageMetaService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PageMetaService_Factory() { return new PageMetaService(i0.ɵɵinject(i1.PageMetaResolver, 8), i0.ɵɵinject(i2.CmsService)); }, token: PageMetaService, providedIn: "root" });
PageMetaService = __decorate([
    Injectable({
        providedIn: 'root',
    }),
    __param(0, Optional()),
    __param(0, Inject(PageMetaResolver))
], PageMetaService);
export { PageMetaService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS1tZXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL2ZhY2FkZS9wYWdlLW1ldGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxhQUFhLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUUxRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0FBSzNDLElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWU7SUFDMUIsWUFHWSxTQUE2QixFQUM3QixHQUFlO1FBRGYsY0FBUyxHQUFULFNBQVMsQ0FBb0I7UUFDN0IsUUFBRyxHQUFILEdBQUcsQ0FBWTtRQUkzQjs7Ozs7O1dBTUc7UUFDTyxvQkFBZSxHQUE4QjtZQUNyRCxLQUFLLEVBQUUsY0FBYztZQUNyQixPQUFPLEVBQUUsZ0JBQWdCO1lBQ3pCLFdBQVcsRUFBRSxvQkFBb0I7WUFDakMsV0FBVyxFQUFFLG9CQUFvQjtZQUNqQyxLQUFLLEVBQUUsY0FBYztZQUNyQixNQUFNLEVBQUUsZUFBZTtTQUN4QixDQUFDO1FBaEJBLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUM7SUFDeEMsQ0FBQztJQWlCRCxPQUFPO1FBQ0wsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFDLElBQUksQ0FDbkMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUNmLFNBQVMsQ0FBQyxDQUFDLElBQVUsRUFBRSxFQUFFO1lBQ3ZCLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFaEQsSUFBSSxZQUFZLEVBQUU7Z0JBQ2hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUNuQztpQkFBTTtnQkFDTCxpQ0FBaUM7Z0JBQ2pDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2pCO1FBQ0gsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRDs7OztPQUlHO0lBQ08sT0FBTyxDQUFDLFlBQThCO1FBQzlDLE1BQU0sY0FBYyxHQUEyQixNQUFNLENBQUMsSUFBSSxDQUN4RCxJQUFJLENBQUMsZUFBZSxDQUNyQjthQUNFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUN4RCxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUNYLFlBQVksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQzVDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNiLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSTtTQUNaLENBQUMsQ0FBQyxDQUNKLENBQ0YsQ0FBQztRQUVKLE9BQU8sYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FDdkMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLHlFQUF5RTtRQUMxRixHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FDMUMsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNPLGVBQWUsQ0FBQyxJQUFVO1FBQ2xDLE9BQU8saUJBQWlCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMzRCxDQUFDO0NBQ0YsQ0FBQTs7d0NBeEVJLFFBQVEsWUFDUixNQUFNLFNBQUMsZ0JBQWdCO1lBRVQsVUFBVTs7O0FBTGhCLGVBQWU7SUFIM0IsVUFBVSxDQUFDO1FBQ1YsVUFBVSxFQUFFLE1BQU07S0FDbkIsQ0FBQztJQUdHLFdBQUEsUUFBUSxFQUFFLENBQUE7SUFDVixXQUFBLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0dBSGhCLGVBQWUsQ0EwRTNCO1NBMUVZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGRlYm91bmNlVGltZSwgZmlsdGVyLCBtYXAsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgcmVzb2x2ZUFwcGxpY2FibGUgfSBmcm9tICcuLi8uLi91dGlsL2FwcGxpY2FibGUnO1xyXG5pbXBvcnQgeyBQYWdlLCBQYWdlTWV0YSB9IGZyb20gJy4uL21vZGVsL3BhZ2UubW9kZWwnO1xyXG5pbXBvcnQgeyBQYWdlTWV0YVJlc29sdmVyIH0gZnJvbSAnLi4vcGFnZS9wYWdlLW1ldGEucmVzb2x2ZXInO1xyXG5pbXBvcnQgeyBDbXNTZXJ2aWNlIH0gZnJvbSAnLi9jbXMuc2VydmljZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUGFnZU1ldGFTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBPcHRpb25hbCgpXHJcbiAgICBASW5qZWN0KFBhZ2VNZXRhUmVzb2x2ZXIpXHJcbiAgICBwcm90ZWN0ZWQgcmVzb2x2ZXJzOiBQYWdlTWV0YVJlc29sdmVyW10sXHJcbiAgICBwcm90ZWN0ZWQgY21zOiBDbXNTZXJ2aWNlXHJcbiAgKSB7XHJcbiAgICB0aGlzLnJlc29sdmVycyA9IHRoaXMucmVzb2x2ZXJzIHx8IFtdO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBUaGUgbGlzdCBvZiByZXNvbHZlciBpbnRlcmZhY2VzIHdpbGwgYmUgZXZhbHVhdGVkIGZvciB0aGUgcGFnZVJlc29sdmVycy5cclxuICAgKlxyXG4gICAqIFRPT0Q6IG9wdGltaXplIGJyb3dzZXIgdnMgU1NSIHJlc29sdmVyczsgaW1hZ2UsIHJvYm90cyBhbmQgZGVzY3JpcHRpb25cclxuICAgKiAgICAgICBhcmVuJ3QgbmVlZGVkIGR1cmluZyBicm93c2luZy5cclxuICAgKiBUT0RPOiB3ZSBjYW4gbWFrZSB0aGUgbGlzdCBvZiByZXNvbHZlciB0eXBlcyBjb25maWd1cmFibGVcclxuICAgKi9cclxuICBwcm90ZWN0ZWQgcmVzb2x2ZXJNZXRob2RzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge1xyXG4gICAgdGl0bGU6ICdyZXNvbHZlVGl0bGUnLFxyXG4gICAgaGVhZGluZzogJ3Jlc29sdmVIZWFkaW5nJyxcclxuICAgIGRlc2NyaXB0aW9uOiAncmVzb2x2ZURlc2NyaXB0aW9uJyxcclxuICAgIGJyZWFkY3J1bWJzOiAncmVzb2x2ZUJyZWFkY3J1bWJzJyxcclxuICAgIGltYWdlOiAncmVzb2x2ZUltYWdlJyxcclxuICAgIHJvYm90czogJ3Jlc29sdmVSb2JvdHMnLFxyXG4gIH07XHJcblxyXG4gIGdldE1ldGEoKTogT2JzZXJ2YWJsZTxQYWdlTWV0YT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY21zLmdldEN1cnJlbnRQYWdlKCkucGlwZShcclxuICAgICAgZmlsdGVyKEJvb2xlYW4pLFxyXG4gICAgICBzd2l0Y2hNYXAoKHBhZ2U6IFBhZ2UpID0+IHtcclxuICAgICAgICBjb25zdCBtZXRhUmVzb2x2ZXIgPSB0aGlzLmdldE1ldGFSZXNvbHZlcihwYWdlKTtcclxuXHJcbiAgICAgICAgaWYgKG1ldGFSZXNvbHZlcikge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZShtZXRhUmVzb2x2ZXIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyB3ZSBkbyBub3QgaGF2ZSBhIHBhZ2UgcmVzb2x2ZXJcclxuICAgICAgICAgIHJldHVybiBvZihudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSWYgYSBgUGFnZVJlc29sdmVyYCBoYXMgaW1wbGVtZW50ZWQgYSByZXNvbHZlciBpbnRlcmZhY2UsIHRoZSByZXNvbHZlZCBkYXRhXHJcbiAgICogaXMgbWVyZ2VkIGludG8gdGhlIGBQYWdlTWV0YWAgb2JqZWN0LlxyXG4gICAqIEBwYXJhbSBtZXRhUmVzb2x2ZXJcclxuICAgKi9cclxuICBwcm90ZWN0ZWQgcmVzb2x2ZShtZXRhUmVzb2x2ZXI6IFBhZ2VNZXRhUmVzb2x2ZXIpOiBPYnNlcnZhYmxlPFBhZ2VNZXRhPiB7XHJcbiAgICBjb25zdCByZXNvbHZlTWV0aG9kczogT2JzZXJ2YWJsZTxQYWdlTWV0YT5bXSA9IE9iamVjdC5rZXlzKFxyXG4gICAgICB0aGlzLnJlc29sdmVyTWV0aG9kc1xyXG4gICAgKVxyXG4gICAgICAuZmlsdGVyKChrZXkpID0+IG1ldGFSZXNvbHZlclt0aGlzLnJlc29sdmVyTWV0aG9kc1trZXldXSlcclxuICAgICAgLm1hcCgoa2V5KSA9PlxyXG4gICAgICAgIG1ldGFSZXNvbHZlclt0aGlzLnJlc29sdmVyTWV0aG9kc1trZXldXSgpLnBpcGUoXHJcbiAgICAgICAgICBtYXAoKGRhdGEpID0+ICh7XHJcbiAgICAgICAgICAgIFtrZXldOiBkYXRhLFxyXG4gICAgICAgICAgfSkpXHJcbiAgICAgICAgKVxyXG4gICAgICApO1xyXG5cclxuICAgIHJldHVybiBjb21iaW5lTGF0ZXN0KHJlc29sdmVNZXRob2RzKS5waXBlKFxyXG4gICAgICBkZWJvdW5jZVRpbWUoMCksIC8vIGF2b2lkIHBhcnRpYWwgZGF0YSBlbWlzc2lvbnMgd2hlbiBhbGwgbWV0aG9kcyByZXNvbHZlIGF0IHRoZSBzYW1lIHRpbWVcclxuICAgICAgbWFwKChkYXRhKSA9PiBPYmplY3QuYXNzaWduKHt9LCAuLi5kYXRhKSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm4gdGhlIHJlc29sdmVyIHdpdGggdGhlIGJlc3QgbWF0Y2gsIGJhc2VkIG9uIGEgc2NvcmVcclxuICAgKiBnZW5lcmF0ZWQgYnkgdGhlIHJlc29sdmVyLlxyXG4gICAqXHJcbiAgICogUmVzb2x2ZXJzIG1hdGNoIGJ5IGRlZmF1bHQgb24gYFBhZ2VUeXBlYCBhbmQgYHBhZ2UudGVtcGxhdGVgLlxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBnZXRNZXRhUmVzb2x2ZXIocGFnZTogUGFnZSk6IFBhZ2VNZXRhUmVzb2x2ZXIge1xyXG4gICAgcmV0dXJuIHJlc29sdmVBcHBsaWNhYmxlKHRoaXMucmVzb2x2ZXJzLCBbcGFnZV0sIFtwYWdlXSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==