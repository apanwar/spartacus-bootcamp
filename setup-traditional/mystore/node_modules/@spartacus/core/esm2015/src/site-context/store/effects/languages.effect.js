import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { Store } from '@ngrx/store';
import { NEVER, of } from 'rxjs';
import { bufferCount, catchError, exhaustMap, filter, map, switchMapTo, tap, } from 'rxjs/operators';
import { makeErrorSerializable } from '../../../util/serialization-utils';
import { WindowRef } from '../../../window/window-ref';
import { SiteConnector } from '../../connectors/site.connector';
import { SiteContextActions } from '../actions/index';
import { getActiveLanguage } from '../selectors/languages.selectors';
let LanguagesEffects = class LanguagesEffects {
    constructor(actions$, siteConnector, winRef, state) {
        this.actions$ = actions$;
        this.siteConnector = siteConnector;
        this.winRef = winRef;
        this.state = state;
        this.loadLanguages$ = this.actions$.pipe(ofType(SiteContextActions.LOAD_LANGUAGES), exhaustMap(() => {
            return this.siteConnector.getLanguages().pipe(map((languages) => new SiteContextActions.LoadLanguagesSuccess(languages)), catchError((error) => of(new SiteContextActions.LoadLanguagesFail(makeErrorSerializable(error)))));
        }));
        this.persist$ = this.actions$.pipe(ofType(SiteContextActions.SET_ACTIVE_LANGUAGE), tap((action) => {
            if (this.winRef.sessionStorage) {
                this.winRef.sessionStorage.setItem('language', action.payload);
            }
        }), switchMapTo(NEVER));
        this.activateLanguage$ = this.state.select(getActiveLanguage).pipe(bufferCount(2, 1), 
        // avoid dispatching `change` action when we're just setting the initial value:
        filter(([previous]) => !!previous), map(([previous, current]) => new SiteContextActions.LanguageChange({ previous, current })));
    }
};
LanguagesEffects.ctorParameters = () => [
    { type: Actions },
    { type: SiteConnector },
    { type: WindowRef },
    { type: Store }
];
__decorate([
    Effect()
], LanguagesEffects.prototype, "loadLanguages$", void 0);
__decorate([
    Effect()
], LanguagesEffects.prototype, "persist$", void 0);
__decorate([
    Effect()
], LanguagesEffects.prototype, "activateLanguage$", void 0);
LanguagesEffects = __decorate([
    Injectable()
], LanguagesEffects);
export { LanguagesEffects };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZ3VhZ2VzLmVmZmVjdC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9zaXRlLWNvbnRleHQvc3RvcmUvZWZmZWN0cy9sYW5ndWFnZXMuZWZmZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxLQUFLLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzdDLE9BQU8sRUFDTCxXQUFXLEVBQ1gsVUFBVSxFQUNWLFVBQVUsRUFDVixNQUFNLEVBQ04sR0FBRyxFQUNILFdBQVcsRUFDWCxHQUFHLEdBQ0osTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUMxRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBSXJFLElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWdCO0lBZ0QzQixZQUNVLFFBQWlCLEVBQ2pCLGFBQTRCLEVBQzVCLE1BQWlCLEVBQ2pCLEtBQWtDO1FBSGxDLGFBQVEsR0FBUixRQUFRLENBQVM7UUFDakIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFDNUIsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUNqQixVQUFLLEdBQUwsS0FBSyxDQUE2QjtRQWxENUMsbUJBQWMsR0FHVixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDcEIsTUFBTSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxFQUN6QyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FDM0MsR0FBRyxDQUNELENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLGtCQUFrQixDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUN0RSxFQUNELFVBQVUsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQ25CLEVBQUUsQ0FDQSxJQUFJLGtCQUFrQixDQUFDLGlCQUFpQixDQUN0QyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FDN0IsQ0FDRixDQUNGLENBQ0YsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUNILENBQUM7UUFHRixhQUFRLEdBQXFCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUM3QyxNQUFNLENBQUMsa0JBQWtCLENBQUMsbUJBQW1CLENBQUMsRUFDOUMsR0FBRyxDQUFDLENBQUMsTUFBNEMsRUFBRSxFQUFFO1lBQ25ELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUU7Z0JBQzlCLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ2hFO1FBQ0gsQ0FBQyxDQUFDLEVBQ0YsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUNuQixDQUFDO1FBR0Ysc0JBQWlCLEdBRWIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQzNDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLCtFQUErRTtRQUMvRSxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQ2xDLEdBQUcsQ0FDRCxDQUFDLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FDdEIsSUFBSSxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FDL0QsQ0FDRixDQUFDO0lBT0MsQ0FBQztDQUNMLENBQUE7O1lBTHFCLE9BQU87WUFDRixhQUFhO1lBQ3BCLFNBQVM7WUFDVixLQUFLOztBQWxEdEI7SUFEQyxNQUFNLEVBQUU7d0RBb0JQO0FBR0Y7SUFEQyxNQUFNLEVBQUU7a0RBU1A7QUFHRjtJQURDLE1BQU0sRUFBRTsyREFZUDtBQTlDUyxnQkFBZ0I7SUFENUIsVUFBVSxFQUFFO0dBQ0EsZ0JBQWdCLENBc0Q1QjtTQXREWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEFjdGlvbnMsIEVmZmVjdCwgb2ZUeXBlIH0gZnJvbSAnQG5ncngvZWZmZWN0cyc7XHJcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5pbXBvcnQgeyBORVZFUiwgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHtcclxuICBidWZmZXJDb3VudCxcclxuICBjYXRjaEVycm9yLFxyXG4gIGV4aGF1c3RNYXAsXHJcbiAgZmlsdGVyLFxyXG4gIG1hcCxcclxuICBzd2l0Y2hNYXBUbyxcclxuICB0YXAsXHJcbn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBtYWtlRXJyb3JTZXJpYWxpemFibGUgfSBmcm9tICcuLi8uLi8uLi91dGlsL3NlcmlhbGl6YXRpb24tdXRpbHMnO1xyXG5pbXBvcnQgeyBXaW5kb3dSZWYgfSBmcm9tICcuLi8uLi8uLi93aW5kb3cvd2luZG93LXJlZic7XHJcbmltcG9ydCB7IFNpdGVDb25uZWN0b3IgfSBmcm9tICcuLi8uLi9jb25uZWN0b3JzL3NpdGUuY29ubmVjdG9yJztcclxuaW1wb3J0IHsgU2l0ZUNvbnRleHRBY3Rpb25zIH0gZnJvbSAnLi4vYWN0aW9ucy9pbmRleCc7XHJcbmltcG9ydCB7IGdldEFjdGl2ZUxhbmd1YWdlIH0gZnJvbSAnLi4vc2VsZWN0b3JzL2xhbmd1YWdlcy5zZWxlY3RvcnMnO1xyXG5pbXBvcnQgeyBTdGF0ZVdpdGhTaXRlQ29udGV4dCB9IGZyb20gJy4uL3N0YXRlJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIExhbmd1YWdlc0VmZmVjdHMge1xyXG4gIEBFZmZlY3QoKVxyXG4gIGxvYWRMYW5ndWFnZXMkOiBPYnNlcnZhYmxlPFxyXG4gICAgfCBTaXRlQ29udGV4dEFjdGlvbnMuTG9hZExhbmd1YWdlc1N1Y2Nlc3NcclxuICAgIHwgU2l0ZUNvbnRleHRBY3Rpb25zLkxvYWRMYW5ndWFnZXNGYWlsXHJcbiAgPiA9IHRoaXMuYWN0aW9ucyQucGlwZShcclxuICAgIG9mVHlwZShTaXRlQ29udGV4dEFjdGlvbnMuTE9BRF9MQU5HVUFHRVMpLFxyXG4gICAgZXhoYXVzdE1hcCgoKSA9PiB7XHJcbiAgICAgIHJldHVybiB0aGlzLnNpdGVDb25uZWN0b3IuZ2V0TGFuZ3VhZ2VzKCkucGlwZShcclxuICAgICAgICBtYXAoXHJcbiAgICAgICAgICAobGFuZ3VhZ2VzKSA9PiBuZXcgU2l0ZUNvbnRleHRBY3Rpb25zLkxvYWRMYW5ndWFnZXNTdWNjZXNzKGxhbmd1YWdlcylcclxuICAgICAgICApLFxyXG4gICAgICAgIGNhdGNoRXJyb3IoKGVycm9yKSA9PlxyXG4gICAgICAgICAgb2YoXHJcbiAgICAgICAgICAgIG5ldyBTaXRlQ29udGV4dEFjdGlvbnMuTG9hZExhbmd1YWdlc0ZhaWwoXHJcbiAgICAgICAgICAgICAgbWFrZUVycm9yU2VyaWFsaXphYmxlKGVycm9yKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgKVxyXG4gICAgICApO1xyXG4gICAgfSlcclxuICApO1xyXG5cclxuICBARWZmZWN0KClcclxuICBwZXJzaXN0JDogT2JzZXJ2YWJsZTx2b2lkPiA9IHRoaXMuYWN0aW9ucyQucGlwZShcclxuICAgIG9mVHlwZShTaXRlQ29udGV4dEFjdGlvbnMuU0VUX0FDVElWRV9MQU5HVUFHRSksXHJcbiAgICB0YXAoKGFjdGlvbjogU2l0ZUNvbnRleHRBY3Rpb25zLlNldEFjdGl2ZUxhbmd1YWdlKSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLndpblJlZi5zZXNzaW9uU3RvcmFnZSkge1xyXG4gICAgICAgIHRoaXMud2luUmVmLnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ2xhbmd1YWdlJywgYWN0aW9uLnBheWxvYWQpO1xyXG4gICAgICB9XHJcbiAgICB9KSxcclxuICAgIHN3aXRjaE1hcFRvKE5FVkVSKVxyXG4gICk7XHJcblxyXG4gIEBFZmZlY3QoKVxyXG4gIGFjdGl2YXRlTGFuZ3VhZ2UkOiBPYnNlcnZhYmxlPFxyXG4gICAgU2l0ZUNvbnRleHRBY3Rpb25zLkxhbmd1YWdlQ2hhbmdlXHJcbiAgPiA9IHRoaXMuc3RhdGUuc2VsZWN0KGdldEFjdGl2ZUxhbmd1YWdlKS5waXBlKFxyXG4gICAgYnVmZmVyQ291bnQoMiwgMSksXHJcblxyXG4gICAgLy8gYXZvaWQgZGlzcGF0Y2hpbmcgYGNoYW5nZWAgYWN0aW9uIHdoZW4gd2UncmUganVzdCBzZXR0aW5nIHRoZSBpbml0aWFsIHZhbHVlOlxyXG4gICAgZmlsdGVyKChbcHJldmlvdXNdKSA9PiAhIXByZXZpb3VzKSxcclxuICAgIG1hcChcclxuICAgICAgKFtwcmV2aW91cywgY3VycmVudF0pID0+XHJcbiAgICAgICAgbmV3IFNpdGVDb250ZXh0QWN0aW9ucy5MYW5ndWFnZUNoYW5nZSh7IHByZXZpb3VzLCBjdXJyZW50IH0pXHJcbiAgICApXHJcbiAgKTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGFjdGlvbnMkOiBBY3Rpb25zLFxyXG4gICAgcHJpdmF0ZSBzaXRlQ29ubmVjdG9yOiBTaXRlQ29ubmVjdG9yLFxyXG4gICAgcHJpdmF0ZSB3aW5SZWY6IFdpbmRvd1JlZixcclxuICAgIHByaXZhdGUgc3RhdGU6IFN0b3JlPFN0YXRlV2l0aFNpdGVDb250ZXh0PlxyXG4gICkge31cclxufVxyXG4iXX0=