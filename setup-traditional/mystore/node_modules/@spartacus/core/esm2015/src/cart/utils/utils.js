import { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';
/**
 * Extract cart identifier for current user. Anonymous calls use `guid` and for logged users `code` is used.
 */
export function getCartIdByUserId(cart, userId) {
    if (userId === OCC_USER_ID_ANONYMOUS) {
        return cart.guid;
    }
    return cart.code;
}
/**
 * Check if cart is selective (save for later) based on id.
 */
export function isSelectiveCart(cartId = '') {
    return cartId.startsWith('selectivecart');
}
/**
 * Check if the returned error is of type notFound.
 *
 * We additionally check if the cart is not a selective cart.
 * For selective cart this error can happen only when extension is disabled.
 * It should never happen, because in that case, selective cart should also be disabled in our configuration.
 * However if that happens we want to handle these errors silently.
 */
export function isCartNotFoundError(error) {
    return (error.reason === 'notFound' &&
        error.subjectType === 'cart' &&
        !isSelectiveCart(error.subject));
}
/**
 * Compute wishlist cart name for customer.
 */
export function getWishlistName(customerId) {
    return `wishlist${customerId}`;
}
/**
 * What is a temporary cart?
 * - frontend only cart entity!
 * - can be identified in store by `temp-` prefix with some unique id (multiple carts can be created at the same time eg. active cart, wishlist)
 *
 * Why we need temporary carts?
 * - to have information about cart creation process (meta flags: loading, error - for showing loader, error message)
 * - to know if there is currently a cart creation process in progress (eg. so, we don't create more than one active cart at the same time)
 * - cart identifiers are created in the backend, so those are only known after cart is created
 *
 * Temporary cart life cycle
 * - create cart method invoked
 * - new `temp-${uuid}` cart is created with `loading=true` state
 * - backend returns created cart
 * - normal cart entity is saved under correct id (eg. for logged user under cart `code` key)
 * - temporary cart value is set to backend response (anyone observing this cart can read code/guid from it and switch selector to normal cart)
 * - in next tick temporary cart is removed
 */
export function isTempCartId(cartId) {
    return cartId.startsWith('temp-');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY2FydC91dGlscy91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUV0RTs7R0FFRztBQUNILE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxJQUFVLEVBQUUsTUFBYztJQUMxRCxJQUFJLE1BQU0sS0FBSyxxQkFBcUIsRUFBRTtRQUNwQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7S0FDbEI7SUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDbkIsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FBQyxNQUFNLEdBQUcsRUFBRTtJQUN6QyxPQUFPLE1BQU0sQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQUVEOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsS0FBaUI7SUFDbkQsT0FBTyxDQUNMLEtBQUssQ0FBQyxNQUFNLEtBQUssVUFBVTtRQUMzQixLQUFLLENBQUMsV0FBVyxLQUFLLE1BQU07UUFDNUIsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUNoQyxDQUFDO0FBQ0osQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FBQyxVQUFrQjtJQUNoRCxPQUFPLFdBQVcsVUFBVSxFQUFFLENBQUM7QUFDakMsQ0FBQztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRztBQUNILE1BQU0sVUFBVSxZQUFZLENBQUMsTUFBYztJQUN6QyxPQUFPLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDcEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVycm9yTW9kZWwgfSBmcm9tICcuLi8uLi9tb2RlbCc7XHJcbmltcG9ydCB7IENhcnQgfSBmcm9tICcuLi8uLi9tb2RlbC9jYXJ0Lm1vZGVsJztcclxuaW1wb3J0IHsgT0NDX1VTRVJfSURfQU5PTllNT1VTIH0gZnJvbSAnLi4vLi4vb2NjL3V0aWxzL29jYy1jb25zdGFudHMnO1xyXG5cclxuLyoqXHJcbiAqIEV4dHJhY3QgY2FydCBpZGVudGlmaWVyIGZvciBjdXJyZW50IHVzZXIuIEFub255bW91cyBjYWxscyB1c2UgYGd1aWRgIGFuZCBmb3IgbG9nZ2VkIHVzZXJzIGBjb2RlYCBpcyB1c2VkLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldENhcnRJZEJ5VXNlcklkKGNhcnQ6IENhcnQsIHVzZXJJZDogc3RyaW5nKTogc3RyaW5nIHtcclxuICBpZiAodXNlcklkID09PSBPQ0NfVVNFUl9JRF9BTk9OWU1PVVMpIHtcclxuICAgIHJldHVybiBjYXJ0Lmd1aWQ7XHJcbiAgfVxyXG4gIHJldHVybiBjYXJ0LmNvZGU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiBjYXJ0IGlzIHNlbGVjdGl2ZSAoc2F2ZSBmb3IgbGF0ZXIpIGJhc2VkIG9uIGlkLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzU2VsZWN0aXZlQ2FydChjYXJ0SWQgPSAnJyk6IGJvb2xlYW4ge1xyXG4gIHJldHVybiBjYXJ0SWQuc3RhcnRzV2l0aCgnc2VsZWN0aXZlY2FydCcpO1xyXG59XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgdGhlIHJldHVybmVkIGVycm9yIGlzIG9mIHR5cGUgbm90Rm91bmQuXHJcbiAqXHJcbiAqIFdlIGFkZGl0aW9uYWxseSBjaGVjayBpZiB0aGUgY2FydCBpcyBub3QgYSBzZWxlY3RpdmUgY2FydC5cclxuICogRm9yIHNlbGVjdGl2ZSBjYXJ0IHRoaXMgZXJyb3IgY2FuIGhhcHBlbiBvbmx5IHdoZW4gZXh0ZW5zaW9uIGlzIGRpc2FibGVkLlxyXG4gKiBJdCBzaG91bGQgbmV2ZXIgaGFwcGVuLCBiZWNhdXNlIGluIHRoYXQgY2FzZSwgc2VsZWN0aXZlIGNhcnQgc2hvdWxkIGFsc28gYmUgZGlzYWJsZWQgaW4gb3VyIGNvbmZpZ3VyYXRpb24uXHJcbiAqIEhvd2V2ZXIgaWYgdGhhdCBoYXBwZW5zIHdlIHdhbnQgdG8gaGFuZGxlIHRoZXNlIGVycm9ycyBzaWxlbnRseS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0NhcnROb3RGb3VuZEVycm9yKGVycm9yOiBFcnJvck1vZGVsKTogYm9vbGVhbiB7XHJcbiAgcmV0dXJuIChcclxuICAgIGVycm9yLnJlYXNvbiA9PT0gJ25vdEZvdW5kJyAmJlxyXG4gICAgZXJyb3Iuc3ViamVjdFR5cGUgPT09ICdjYXJ0JyAmJlxyXG4gICAgIWlzU2VsZWN0aXZlQ2FydChlcnJvci5zdWJqZWN0KVxyXG4gICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb21wdXRlIHdpc2hsaXN0IGNhcnQgbmFtZSBmb3IgY3VzdG9tZXIuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0V2lzaGxpc3ROYW1lKGN1c3RvbWVySWQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIGB3aXNobGlzdCR7Y3VzdG9tZXJJZH1gO1xyXG59XHJcblxyXG4vKipcclxuICogV2hhdCBpcyBhIHRlbXBvcmFyeSBjYXJ0P1xyXG4gKiAtIGZyb250ZW5kIG9ubHkgY2FydCBlbnRpdHkhXHJcbiAqIC0gY2FuIGJlIGlkZW50aWZpZWQgaW4gc3RvcmUgYnkgYHRlbXAtYCBwcmVmaXggd2l0aCBzb21lIHVuaXF1ZSBpZCAobXVsdGlwbGUgY2FydHMgY2FuIGJlIGNyZWF0ZWQgYXQgdGhlIHNhbWUgdGltZSBlZy4gYWN0aXZlIGNhcnQsIHdpc2hsaXN0KVxyXG4gKlxyXG4gKiBXaHkgd2UgbmVlZCB0ZW1wb3JhcnkgY2FydHM/XHJcbiAqIC0gdG8gaGF2ZSBpbmZvcm1hdGlvbiBhYm91dCBjYXJ0IGNyZWF0aW9uIHByb2Nlc3MgKG1ldGEgZmxhZ3M6IGxvYWRpbmcsIGVycm9yIC0gZm9yIHNob3dpbmcgbG9hZGVyLCBlcnJvciBtZXNzYWdlKVxyXG4gKiAtIHRvIGtub3cgaWYgdGhlcmUgaXMgY3VycmVudGx5IGEgY2FydCBjcmVhdGlvbiBwcm9jZXNzIGluIHByb2dyZXNzIChlZy4gc28sIHdlIGRvbid0IGNyZWF0ZSBtb3JlIHRoYW4gb25lIGFjdGl2ZSBjYXJ0IGF0IHRoZSBzYW1lIHRpbWUpXHJcbiAqIC0gY2FydCBpZGVudGlmaWVycyBhcmUgY3JlYXRlZCBpbiB0aGUgYmFja2VuZCwgc28gdGhvc2UgYXJlIG9ubHkga25vd24gYWZ0ZXIgY2FydCBpcyBjcmVhdGVkXHJcbiAqXHJcbiAqIFRlbXBvcmFyeSBjYXJ0IGxpZmUgY3ljbGVcclxuICogLSBjcmVhdGUgY2FydCBtZXRob2QgaW52b2tlZFxyXG4gKiAtIG5ldyBgdGVtcC0ke3V1aWR9YCBjYXJ0IGlzIGNyZWF0ZWQgd2l0aCBgbG9hZGluZz10cnVlYCBzdGF0ZVxyXG4gKiAtIGJhY2tlbmQgcmV0dXJucyBjcmVhdGVkIGNhcnRcclxuICogLSBub3JtYWwgY2FydCBlbnRpdHkgaXMgc2F2ZWQgdW5kZXIgY29ycmVjdCBpZCAoZWcuIGZvciBsb2dnZWQgdXNlciB1bmRlciBjYXJ0IGBjb2RlYCBrZXkpXHJcbiAqIC0gdGVtcG9yYXJ5IGNhcnQgdmFsdWUgaXMgc2V0IHRvIGJhY2tlbmQgcmVzcG9uc2UgKGFueW9uZSBvYnNlcnZpbmcgdGhpcyBjYXJ0IGNhbiByZWFkIGNvZGUvZ3VpZCBmcm9tIGl0IGFuZCBzd2l0Y2ggc2VsZWN0b3IgdG8gbm9ybWFsIGNhcnQpXHJcbiAqIC0gaW4gbmV4dCB0aWNrIHRlbXBvcmFyeSBjYXJ0IGlzIHJlbW92ZWRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1RlbXBDYXJ0SWQoY2FydElkOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICByZXR1cm4gY2FydElkLnN0YXJ0c1dpdGgoJ3RlbXAtJyk7XHJcbn1cclxuIl19