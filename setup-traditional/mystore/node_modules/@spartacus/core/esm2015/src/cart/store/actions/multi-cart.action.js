import { EntitySuccessAction } from '../../../state/utils/entity-loader/entity-loader.action';
import { EntityProcessesDecrementAction, EntityProcessesIncrementAction, } from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';
import { EntityRemoveAllAction } from '../../../state/utils/entity/entity.action';
import { MULTI_CART_DATA } from '../multi-cart-state';
export const SET_TEMP_CART = '[Cart] Set Temp Cart';
export const CART_PROCESSES_INCREMENT = '[Cart] Cart Processes Increment';
export const CART_PROCESSES_DECREMENT = '[Cart] Cart Processes Decrement';
export const SET_ACTIVE_CART_ID = '[Cart] Set Active Cart Id';
export const CLEAR_CART_STATE = '[Cart] Clear Cart State';
/**
 * To keep track of cart creation process we use cart with `temp-${uuid}` id.
 * After creating cart we switch to entity with `code` or `guid`.
 * We need `temp-${uuid}` cart entities for loading/error state.
 */
export class SetTempCart extends EntitySuccessAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.tempCartId, payload.cart);
        this.payload = payload;
        this.type = SET_TEMP_CART;
    }
}
// TODO(#7241): Remove when there won't be any usage
/**
 * Increases process counter on cart entities
 * All actions that cause computations on cart should extend EntityProcessesIncrementAction instead of dispatching this action.
 * @deprecated since 2.0
 */
export class CartProcessesIncrement extends EntityProcessesIncrementAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload);
        this.payload = payload;
        this.type = CART_PROCESSES_INCREMENT;
    }
}
// TODO(#7241): Remove when there won't be any usage
/**
 * Decrement process counter on cart entities
 * All actions that cause computations on cart should extend EntityProcessesDecrementAction instead of dispatching this action.
 * @deprecated since 2.0
 */
export class CartProcessesDecrement extends EntityProcessesDecrementAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload);
        this.payload = payload;
        this.type = CART_PROCESSES_DECREMENT;
    }
}
/**
 * Only sets active cart property with id of active cart. Then services take care of loading that cart.
 */
export class SetActiveCartId {
    constructor(payload) {
        this.payload = payload;
        this.type = SET_ACTIVE_CART_ID;
    }
}
/**
 * Clear whole cart store state: all entities + reset rest of the cart state.
 */
export class ClearCartState extends EntityRemoveAllAction {
    constructor() {
        super(MULTI_CART_DATA);
        this.type = CLEAR_CART_STATE;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktY2FydC5hY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY2FydC9zdG9yZS9hY3Rpb25zL211bHRpLWNhcnQuYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBQzlGLE9BQU8sRUFDTCw4QkFBOEIsRUFDOUIsOEJBQThCLEdBQy9CLE1BQU0sNkVBQTZFLENBQUM7QUFDckYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDbEYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXRELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxzQkFBc0IsQ0FBQztBQUVwRCxNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRyxpQ0FBaUMsQ0FBQztBQUMxRSxNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRyxpQ0FBaUMsQ0FBQztBQUUxRSxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRywyQkFBMkIsQ0FBQztBQUU5RCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyx5QkFBeUIsQ0FBQztBQUUxRDs7OztHQUlHO0FBQ0gsTUFBTSxPQUFPLFdBQVksU0FBUSxtQkFBbUI7SUFFbEQsWUFBbUIsT0FBMkM7UUFDNUQsS0FBSyxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUR4QyxZQUFPLEdBQVAsT0FBTyxDQUFvQztRQURyRCxTQUFJLEdBQUcsYUFBYSxDQUFDO0lBRzlCLENBQUM7Q0FDRjtBQUVELG9EQUFvRDtBQUNwRDs7OztHQUlHO0FBQ0gsTUFBTSxPQUFPLHNCQUF1QixTQUFRLDhCQUE4QjtJQUV4RSxZQUFtQixPQUFlO1FBQ2hDLEtBQUssQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFEZixZQUFPLEdBQVAsT0FBTyxDQUFRO1FBRHpCLFNBQUksR0FBRyx3QkFBd0IsQ0FBQztJQUd6QyxDQUFDO0NBQ0Y7QUFFRCxvREFBb0Q7QUFDcEQ7Ozs7R0FJRztBQUNILE1BQU0sT0FBTyxzQkFBdUIsU0FBUSw4QkFBOEI7SUFFeEUsWUFBbUIsT0FBZTtRQUNoQyxLQUFLLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRGYsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUR6QixTQUFJLEdBQUcsd0JBQXdCLENBQUM7SUFHekMsQ0FBQztDQUNGO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZUFBZTtJQUUxQixZQUFtQixPQUFlO1FBQWYsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUR6QixTQUFJLEdBQUcsa0JBQWtCLENBQUM7SUFDRSxDQUFDO0NBQ3ZDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sY0FBZSxTQUFRLHFCQUFxQjtJQUV2RDtRQUNFLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUZoQixTQUFJLEdBQUcsZ0JBQWdCLENBQUM7SUFHakMsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5pbXBvcnQgeyBDYXJ0IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY2FydC5tb2RlbCc7XHJcbmltcG9ydCB7IEVudGl0eVN1Y2Nlc3NBY3Rpb24gfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9lbnRpdHktbG9hZGVyL2VudGl0eS1sb2FkZXIuYWN0aW9uJztcclxuaW1wb3J0IHtcclxuICBFbnRpdHlQcm9jZXNzZXNEZWNyZW1lbnRBY3Rpb24sXHJcbiAgRW50aXR5UHJvY2Vzc2VzSW5jcmVtZW50QWN0aW9uLFxyXG59IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2VudGl0eS1wcm9jZXNzZXMtbG9hZGVyL2VudGl0eS1wcm9jZXNzZXMtbG9hZGVyLmFjdGlvbic7XHJcbmltcG9ydCB7IEVudGl0eVJlbW92ZUFsbEFjdGlvbiB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2VudGl0eS9lbnRpdHkuYWN0aW9uJztcclxuaW1wb3J0IHsgTVVMVElfQ0FSVF9EQVRBIH0gZnJvbSAnLi4vbXVsdGktY2FydC1zdGF0ZSc7XHJcblxyXG5leHBvcnQgY29uc3QgU0VUX1RFTVBfQ0FSVCA9ICdbQ2FydF0gU2V0IFRlbXAgQ2FydCc7XHJcblxyXG5leHBvcnQgY29uc3QgQ0FSVF9QUk9DRVNTRVNfSU5DUkVNRU5UID0gJ1tDYXJ0XSBDYXJ0IFByb2Nlc3NlcyBJbmNyZW1lbnQnO1xyXG5leHBvcnQgY29uc3QgQ0FSVF9QUk9DRVNTRVNfREVDUkVNRU5UID0gJ1tDYXJ0XSBDYXJ0IFByb2Nlc3NlcyBEZWNyZW1lbnQnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNFVF9BQ1RJVkVfQ0FSVF9JRCA9ICdbQ2FydF0gU2V0IEFjdGl2ZSBDYXJ0IElkJztcclxuXHJcbmV4cG9ydCBjb25zdCBDTEVBUl9DQVJUX1NUQVRFID0gJ1tDYXJ0XSBDbGVhciBDYXJ0IFN0YXRlJztcclxuXHJcbi8qKlxyXG4gKiBUbyBrZWVwIHRyYWNrIG9mIGNhcnQgY3JlYXRpb24gcHJvY2VzcyB3ZSB1c2UgY2FydCB3aXRoIGB0ZW1wLSR7dXVpZH1gIGlkLlxyXG4gKiBBZnRlciBjcmVhdGluZyBjYXJ0IHdlIHN3aXRjaCB0byBlbnRpdHkgd2l0aCBgY29kZWAgb3IgYGd1aWRgLlxyXG4gKiBXZSBuZWVkIGB0ZW1wLSR7dXVpZH1gIGNhcnQgZW50aXRpZXMgZm9yIGxvYWRpbmcvZXJyb3Igc3RhdGUuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2V0VGVtcENhcnQgZXh0ZW5kcyBFbnRpdHlTdWNjZXNzQWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gU0VUX1RFTVBfQ0FSVDtcclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogeyBjYXJ0OiBDYXJ0OyB0ZW1wQ2FydElkOiBzdHJpbmcgfSkge1xyXG4gICAgc3VwZXIoTVVMVElfQ0FSVF9EQVRBLCBwYXlsb2FkLnRlbXBDYXJ0SWQsIHBheWxvYWQuY2FydCk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBUT0RPKCM3MjQxKTogUmVtb3ZlIHdoZW4gdGhlcmUgd29uJ3QgYmUgYW55IHVzYWdlXHJcbi8qKlxyXG4gKiBJbmNyZWFzZXMgcHJvY2VzcyBjb3VudGVyIG9uIGNhcnQgZW50aXRpZXNcclxuICogQWxsIGFjdGlvbnMgdGhhdCBjYXVzZSBjb21wdXRhdGlvbnMgb24gY2FydCBzaG91bGQgZXh0ZW5kIEVudGl0eVByb2Nlc3Nlc0luY3JlbWVudEFjdGlvbiBpbnN0ZWFkIG9mIGRpc3BhdGNoaW5nIHRoaXMgYWN0aW9uLlxyXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSAyLjBcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDYXJ0UHJvY2Vzc2VzSW5jcmVtZW50IGV4dGVuZHMgRW50aXR5UHJvY2Vzc2VzSW5jcmVtZW50QWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gQ0FSVF9QUk9DRVNTRVNfSU5DUkVNRU5UO1xyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBzdHJpbmcpIHtcclxuICAgIHN1cGVyKE1VTFRJX0NBUlRfREFUQSwgcGF5bG9hZCk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBUT0RPKCM3MjQxKTogUmVtb3ZlIHdoZW4gdGhlcmUgd29uJ3QgYmUgYW55IHVzYWdlXHJcbi8qKlxyXG4gKiBEZWNyZW1lbnQgcHJvY2VzcyBjb3VudGVyIG9uIGNhcnQgZW50aXRpZXNcclxuICogQWxsIGFjdGlvbnMgdGhhdCBjYXVzZSBjb21wdXRhdGlvbnMgb24gY2FydCBzaG91bGQgZXh0ZW5kIEVudGl0eVByb2Nlc3Nlc0RlY3JlbWVudEFjdGlvbiBpbnN0ZWFkIG9mIGRpc3BhdGNoaW5nIHRoaXMgYWN0aW9uLlxyXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSAyLjBcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDYXJ0UHJvY2Vzc2VzRGVjcmVtZW50IGV4dGVuZHMgRW50aXR5UHJvY2Vzc2VzRGVjcmVtZW50QWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gQ0FSVF9QUk9DRVNTRVNfREVDUkVNRU5UO1xyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBzdHJpbmcpIHtcclxuICAgIHN1cGVyKE1VTFRJX0NBUlRfREFUQSwgcGF5bG9hZCk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogT25seSBzZXRzIGFjdGl2ZSBjYXJ0IHByb3BlcnR5IHdpdGggaWQgb2YgYWN0aXZlIGNhcnQuIFRoZW4gc2VydmljZXMgdGFrZSBjYXJlIG9mIGxvYWRpbmcgdGhhdCBjYXJ0LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNldEFjdGl2ZUNhcnRJZCBpbXBsZW1lbnRzIEFjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IFNFVF9BQ1RJVkVfQ0FSVF9JRDtcclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogc3RyaW5nKSB7fVxyXG59XHJcblxyXG4vKipcclxuICogQ2xlYXIgd2hvbGUgY2FydCBzdG9yZSBzdGF0ZTogYWxsIGVudGl0aWVzICsgcmVzZXQgcmVzdCBvZiB0aGUgY2FydCBzdGF0ZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBDbGVhckNhcnRTdGF0ZSBleHRlbmRzIEVudGl0eVJlbW92ZUFsbEFjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IENMRUFSX0NBUlRfU1RBVEU7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcihNVUxUSV9DQVJUX0RBVEEpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHR5cGUgTXVsdGlDYXJ0QWN0aW9ucyA9XHJcbiAgfCBTZXRUZW1wQ2FydFxyXG4gIHwgQ2FydFByb2Nlc3Nlc0luY3JlbWVudFxyXG4gIHwgQ2FydFByb2Nlc3Nlc0RlY3JlbWVudFxyXG4gIHwgU2V0QWN0aXZlQ2FydElkXHJcbiAgfCBDbGVhckNhcnRTdGF0ZTtcclxuIl19