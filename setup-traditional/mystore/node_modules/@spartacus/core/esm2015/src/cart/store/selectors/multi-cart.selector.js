import { createFeatureSelector, createSelector, } from '@ngrx/store';
import { entityValueSelector } from '../../../state/utils/entity-loader/entity-loader.selectors';
import { entityHasPendingProcessesSelector, entityIsStableSelector, entityProcessesLoaderStateSelector, } from '../../../state/utils/entity-processes-loader/entity-processes-loader.selectors';
import { MULTI_CART_FEATURE, } from '../multi-cart-state';
export const getMultiCartState = createFeatureSelector(MULTI_CART_FEATURE);
const ɵ0 = (state) => state.carts;
export const getMultiCartEntities = createSelector(getMultiCartState, ɵ0);
export const getCartEntitySelectorFactory = (cartId) => {
    return createSelector(getMultiCartEntities, (state) => entityProcessesLoaderStateSelector(state, cartId));
};
export const getCartSelectorFactory = (cartId) => {
    return createSelector(getMultiCartEntities, (state) => entityValueSelector(state, cartId));
};
export const getCartIsStableSelectorFactory = (cartId) => {
    return createSelector(getMultiCartEntities, (state) => entityIsStableSelector(state, cartId));
};
export const getCartHasPendingProcessesSelectorFactory = (cartId) => {
    return createSelector(getMultiCartEntities, (state) => entityHasPendingProcessesSelector(state, cartId));
};
export const getCartEntriesSelectorFactory = (cartId) => {
    return createSelector(getCartSelectorFactory(cartId), (state) => {
        return state && state.entries ? state.entries : [];
    });
};
export const getCartEntrySelectorFactory = (cartId, productCode) => {
    return createSelector(getCartEntriesSelectorFactory(cartId), (state) => {
        return state
            ? state.find((entry) => entry.product.code === productCode)
            : undefined;
    });
};
const ɵ1 = (state) => state.active;
export const getActiveCartId = createSelector(getMultiCartState, ɵ1);
const ɵ2 = (state) => state.wishList;
export const getWishListId = createSelector(getMultiCartState, ɵ2);
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktY2FydC5zZWxlY3Rvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9jYXJ0L3N0b3JlL3NlbGVjdG9ycy9tdWx0aS1jYXJ0LnNlbGVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxxQkFBcUIsRUFDckIsY0FBYyxHQUVmLE1BQU0sYUFBYSxDQUFDO0FBR3JCLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDREQUE0RCxDQUFDO0FBRWpHLE9BQU8sRUFDTCxpQ0FBaUMsRUFDakMsc0JBQXNCLEVBQ3RCLGtDQUFrQyxHQUNuQyxNQUFNLGdGQUFnRixDQUFDO0FBRXhGLE9BQU8sRUFFTCxrQkFBa0IsR0FFbkIsTUFBTSxxQkFBcUIsQ0FBQztBQUU3QixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FHMUIscUJBQXFCLENBQWlCLGtCQUFrQixDQUFDLENBQUM7V0FLeEIsQ0FBQyxLQUFxQixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSztBQUg1RSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FHN0IsY0FBYyxDQUFDLGlCQUFpQixLQUF5QyxDQUFDO0FBRTlFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLENBQzFDLE1BQWMsRUFDb0QsRUFBRTtJQUNwRSxPQUFPLGNBQWMsQ0FDbkIsb0JBQW9CLEVBQ3BCLENBQUMsS0FBdUMsRUFBRSxFQUFFLENBQzFDLGtDQUFrQyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FDcEQsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLENBQ3BDLE1BQWMsRUFDOEIsRUFBRTtJQUM5QyxPQUFPLGNBQWMsQ0FDbkIsb0JBQW9CLEVBQ3BCLENBQUMsS0FBdUMsRUFBRSxFQUFFLENBQzFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FDckMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFHLENBQzVDLE1BQWMsRUFDaUMsRUFBRTtJQUNqRCxPQUFPLGNBQWMsQ0FDbkIsb0JBQW9CLEVBQ3BCLENBQUMsS0FBdUMsRUFBRSxFQUFFLENBQzFDLHNCQUFzQixDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FDeEMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHlDQUF5QyxHQUFHLENBQ3ZELE1BQWMsRUFDaUMsRUFBRTtJQUNqRCxPQUFPLGNBQWMsQ0FDbkIsb0JBQW9CLEVBQ3BCLENBQUMsS0FBdUMsRUFBRSxFQUFFLENBQzFDLGlDQUFpQyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FDbkQsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDZCQUE2QixHQUFHLENBQzNDLE1BQWMsRUFDc0MsRUFBRTtJQUN0RCxPQUFPLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQVcsRUFBRSxFQUFFO1FBQ3BFLE9BQU8sS0FBSyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNyRCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFHLENBQ3pDLE1BQWMsRUFDZCxXQUFtQixFQUMrQixFQUFFO0lBQ3BELE9BQU8sY0FBYyxDQUNuQiw2QkFBNkIsQ0FBQyxNQUFNLENBQUMsRUFDckMsQ0FBQyxLQUFtQixFQUFFLEVBQUU7UUFDdEIsT0FBTyxLQUFLO1lBQ1YsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLFdBQVcsQ0FBQztZQUMzRCxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQ2hCLENBQUMsQ0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDO1dBS29DLENBQUMsS0FBcUIsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU07QUFIN0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUd4QixjQUFjLENBQUMsaUJBQWlCLEtBQTBDLENBQUM7V0FPN0UsQ0FBQyxLQUFxQixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUTtBQUwzQyxNQUFNLENBQUMsTUFBTSxhQUFhLEdBR3RCLGNBQWMsQ0FDaEIsaUJBQWlCLEtBRWxCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIGNyZWF0ZUZlYXR1cmVTZWxlY3RvcixcclxuICBjcmVhdGVTZWxlY3RvcixcclxuICBNZW1vaXplZFNlbGVjdG9yLFxyXG59IGZyb20gJ0BuZ3J4L3N0b3JlJztcclxuaW1wb3J0IHsgQ2FydCB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2NhcnQubW9kZWwnO1xyXG5pbXBvcnQgeyBPcmRlckVudHJ5IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvb3JkZXIubW9kZWwnO1xyXG5pbXBvcnQgeyBlbnRpdHlWYWx1ZVNlbGVjdG9yIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvZW50aXR5LWxvYWRlci9lbnRpdHktbG9hZGVyLnNlbGVjdG9ycyc7XHJcbmltcG9ydCB7IEVudGl0eVByb2Nlc3Nlc0xvYWRlclN0YXRlIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvZW50aXR5LXByb2Nlc3Nlcy1sb2FkZXIvZW50aXR5LXByb2Nlc3Nlcy1sb2FkZXItc3RhdGUnO1xyXG5pbXBvcnQge1xyXG4gIGVudGl0eUhhc1BlbmRpbmdQcm9jZXNzZXNTZWxlY3RvcixcclxuICBlbnRpdHlJc1N0YWJsZVNlbGVjdG9yLFxyXG4gIGVudGl0eVByb2Nlc3Nlc0xvYWRlclN0YXRlU2VsZWN0b3IsXHJcbn0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvZW50aXR5LXByb2Nlc3Nlcy1sb2FkZXIvZW50aXR5LXByb2Nlc3Nlcy1sb2FkZXIuc2VsZWN0b3JzJztcclxuaW1wb3J0IHsgUHJvY2Vzc2VzTG9hZGVyU3RhdGUgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9wcm9jZXNzZXMtbG9hZGVyL3Byb2Nlc3Nlcy1sb2FkZXItc3RhdGUnO1xyXG5pbXBvcnQge1xyXG4gIE11bHRpQ2FydFN0YXRlLFxyXG4gIE1VTFRJX0NBUlRfRkVBVFVSRSxcclxuICBTdGF0ZVdpdGhNdWx0aUNhcnQsXHJcbn0gZnJvbSAnLi4vbXVsdGktY2FydC1zdGF0ZSc7XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0TXVsdGlDYXJ0U3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8XHJcbiAgU3RhdGVXaXRoTXVsdGlDYXJ0LFxyXG4gIE11bHRpQ2FydFN0YXRlXHJcbj4gPSBjcmVhdGVGZWF0dXJlU2VsZWN0b3I8TXVsdGlDYXJ0U3RhdGU+KE1VTFRJX0NBUlRfRkVBVFVSRSk7XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0TXVsdGlDYXJ0RW50aXRpZXM6IE1lbW9pemVkU2VsZWN0b3I8XHJcbiAgU3RhdGVXaXRoTXVsdGlDYXJ0LFxyXG4gIEVudGl0eVByb2Nlc3Nlc0xvYWRlclN0YXRlPENhcnQ+XHJcbj4gPSBjcmVhdGVTZWxlY3RvcihnZXRNdWx0aUNhcnRTdGF0ZSwgKHN0YXRlOiBNdWx0aUNhcnRTdGF0ZSkgPT4gc3RhdGUuY2FydHMpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldENhcnRFbnRpdHlTZWxlY3RvckZhY3RvcnkgPSAoXHJcbiAgY2FydElkOiBzdHJpbmdcclxuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhNdWx0aUNhcnQsIFByb2Nlc3Nlc0xvYWRlclN0YXRlPENhcnQ+PiA9PiB7XHJcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxyXG4gICAgZ2V0TXVsdGlDYXJ0RW50aXRpZXMsXHJcbiAgICAoc3RhdGU6IEVudGl0eVByb2Nlc3Nlc0xvYWRlclN0YXRlPENhcnQ+KSA9PlxyXG4gICAgICBlbnRpdHlQcm9jZXNzZXNMb2FkZXJTdGF0ZVNlbGVjdG9yKHN0YXRlLCBjYXJ0SWQpXHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRDYXJ0U2VsZWN0b3JGYWN0b3J5ID0gKFxyXG4gIGNhcnRJZDogc3RyaW5nXHJcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoTXVsdGlDYXJ0LCBDYXJ0PiA9PiB7XHJcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxyXG4gICAgZ2V0TXVsdGlDYXJ0RW50aXRpZXMsXHJcbiAgICAoc3RhdGU6IEVudGl0eVByb2Nlc3Nlc0xvYWRlclN0YXRlPENhcnQ+KSA9PlxyXG4gICAgICBlbnRpdHlWYWx1ZVNlbGVjdG9yKHN0YXRlLCBjYXJ0SWQpXHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRDYXJ0SXNTdGFibGVTZWxlY3RvckZhY3RvcnkgPSAoXHJcbiAgY2FydElkOiBzdHJpbmdcclxuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhNdWx0aUNhcnQsIGJvb2xlYW4+ID0+IHtcclxuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoXHJcbiAgICBnZXRNdWx0aUNhcnRFbnRpdGllcyxcclxuICAgIChzdGF0ZTogRW50aXR5UHJvY2Vzc2VzTG9hZGVyU3RhdGU8Q2FydD4pID0+XHJcbiAgICAgIGVudGl0eUlzU3RhYmxlU2VsZWN0b3Ioc3RhdGUsIGNhcnRJZClcclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldENhcnRIYXNQZW5kaW5nUHJvY2Vzc2VzU2VsZWN0b3JGYWN0b3J5ID0gKFxyXG4gIGNhcnRJZDogc3RyaW5nXHJcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoTXVsdGlDYXJ0LCBib29sZWFuPiA9PiB7XHJcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxyXG4gICAgZ2V0TXVsdGlDYXJ0RW50aXRpZXMsXHJcbiAgICAoc3RhdGU6IEVudGl0eVByb2Nlc3Nlc0xvYWRlclN0YXRlPENhcnQ+KSA9PlxyXG4gICAgICBlbnRpdHlIYXNQZW5kaW5nUHJvY2Vzc2VzU2VsZWN0b3Ioc3RhdGUsIGNhcnRJZClcclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldENhcnRFbnRyaWVzU2VsZWN0b3JGYWN0b3J5ID0gKFxyXG4gIGNhcnRJZDogc3RyaW5nXHJcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoTXVsdGlDYXJ0LCBPcmRlckVudHJ5W10+ID0+IHtcclxuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoZ2V0Q2FydFNlbGVjdG9yRmFjdG9yeShjYXJ0SWQpLCAoc3RhdGU6IENhcnQpID0+IHtcclxuICAgIHJldHVybiBzdGF0ZSAmJiBzdGF0ZS5lbnRyaWVzID8gc3RhdGUuZW50cmllcyA6IFtdO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldENhcnRFbnRyeVNlbGVjdG9yRmFjdG9yeSA9IChcclxuICBjYXJ0SWQ6IHN0cmluZyxcclxuICBwcm9kdWN0Q29kZTogc3RyaW5nXHJcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoTXVsdGlDYXJ0LCBPcmRlckVudHJ5PiA9PiB7XHJcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxyXG4gICAgZ2V0Q2FydEVudHJpZXNTZWxlY3RvckZhY3RvcnkoY2FydElkKSxcclxuICAgIChzdGF0ZTogT3JkZXJFbnRyeVtdKSA9PiB7XHJcbiAgICAgIHJldHVybiBzdGF0ZVxyXG4gICAgICAgID8gc3RhdGUuZmluZCgoZW50cnkpID0+IGVudHJ5LnByb2R1Y3QuY29kZSA9PT0gcHJvZHVjdENvZGUpXHJcbiAgICAgICAgOiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRBY3RpdmVDYXJ0SWQ6IE1lbW9pemVkU2VsZWN0b3I8XHJcbiAgU3RhdGVXaXRoTXVsdGlDYXJ0LFxyXG4gIHN0cmluZ1xyXG4+ID0gY3JlYXRlU2VsZWN0b3IoZ2V0TXVsdGlDYXJ0U3RhdGUsIChzdGF0ZTogTXVsdGlDYXJ0U3RhdGUpID0+IHN0YXRlLmFjdGl2ZSk7XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0V2lzaExpc3RJZDogTWVtb2l6ZWRTZWxlY3RvcjxcclxuICBTdGF0ZVdpdGhNdWx0aUNhcnQsXHJcbiAgc3RyaW5nXHJcbj4gPSBjcmVhdGVTZWxlY3RvcihcclxuICBnZXRNdWx0aUNhcnRTdGF0ZSxcclxuICAoc3RhdGU6IE11bHRpQ2FydFN0YXRlKSA9PiBzdGF0ZS53aXNoTGlzdFxyXG4pO1xyXG4iXX0=