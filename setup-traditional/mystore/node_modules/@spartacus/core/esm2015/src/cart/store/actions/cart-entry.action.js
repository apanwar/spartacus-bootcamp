import { EntityProcessesDecrementAction, EntityProcessesIncrementAction, } from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';
import { MULTI_CART_DATA } from '../multi-cart-state';
export const CART_ADD_ENTRY = '[Cart-entry] Add Entry';
export const CART_ADD_ENTRY_SUCCESS = '[Cart-entry] Add Entry Success';
export const CART_ADD_ENTRY_FAIL = '[Cart-entry] Add Entry Fail';
export const CART_REMOVE_ENTRY = '[Cart-entry] Remove Entry';
export const CART_REMOVE_ENTRY_SUCCESS = '[Cart-entry] Remove Entry Success';
export const CART_REMOVE_ENTRY_FAIL = '[Cart-entry] Remove Entry Fail';
export const CART_UPDATE_ENTRY = '[Cart-entry] Update Entry';
export const CART_UPDATE_ENTRY_SUCCESS = '[Cart-entry] Update Entry Success';
export const CART_UPDATE_ENTRY_FAIL = '[Cart-entry] Update Entry Fail';
export class CartAddEntry extends EntityProcessesIncrementAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId);
        this.payload = payload;
        this.type = CART_ADD_ENTRY;
    }
}
export class CartAddEntrySuccess extends EntityProcessesDecrementAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId);
        this.payload = payload;
        this.type = CART_ADD_ENTRY_SUCCESS;
    }
}
export class CartAddEntryFail extends EntityProcessesDecrementAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId);
        this.payload = payload;
        this.type = CART_ADD_ENTRY_FAIL;
    }
}
export class CartRemoveEntry extends EntityProcessesIncrementAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId);
        this.payload = payload;
        this.type = CART_REMOVE_ENTRY;
    }
}
export class CartRemoveEntrySuccess extends EntityProcessesDecrementAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId);
        this.payload = payload;
        this.type = CART_REMOVE_ENTRY_SUCCESS;
    }
}
export class CartRemoveEntryFail extends EntityProcessesDecrementAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId);
        this.payload = payload;
        this.type = CART_REMOVE_ENTRY_FAIL;
    }
}
export class CartUpdateEntry extends EntityProcessesIncrementAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId);
        this.payload = payload;
        this.type = CART_UPDATE_ENTRY;
    }
}
export class CartUpdateEntrySuccess extends EntityProcessesDecrementAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId);
        this.payload = payload;
        this.type = CART_UPDATE_ENTRY_SUCCESS;
    }
}
export class CartUpdateEntryFail extends EntityProcessesDecrementAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId);
        this.payload = payload;
        this.type = CART_UPDATE_ENTRY_FAIL;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC1lbnRyeS5hY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY2FydC9zdG9yZS9hY3Rpb25zL2NhcnQtZW50cnkuYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCw4QkFBOEIsRUFDOUIsOEJBQThCLEdBQy9CLE1BQU0sNkVBQTZFLENBQUM7QUFDckYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXRELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxnQ0FBZ0MsQ0FBQztBQUN2RSxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyw2QkFBNkIsQ0FBQztBQUNqRSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUM3RCxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxtQ0FBbUMsQ0FBQztBQUM3RSxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxnQ0FBZ0MsQ0FBQztBQUV2RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUM3RCxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxtQ0FBbUMsQ0FBQztBQUM3RSxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxnQ0FBZ0MsQ0FBQztBQUV2RSxNQUFNLE9BQU8sWUFBYSxTQUFRLDhCQUE4QjtJQUU5RCxZQUNTLE9BS047UUFFRCxLQUFLLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQVBoQyxZQUFPLEdBQVAsT0FBTyxDQUtiO1FBUE0sU0FBSSxHQUFHLGNBQWMsQ0FBQztJQVUvQixDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sbUJBQW9CLFNBQVEsOEJBQThCO0lBRXJFLFlBQ1MsT0FVTjtRQUVELEtBQUssQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBWmhDLFlBQU8sR0FBUCxPQUFPLENBVWI7UUFaTSxTQUFJLEdBQUcsc0JBQXNCLENBQUM7SUFldkMsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLGdCQUFpQixTQUFRLDhCQUE4QjtJQUVsRSxZQUNTLE9BTU47UUFFRCxLQUFLLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQVJoQyxZQUFPLEdBQVAsT0FBTyxDQU1iO1FBUk0sU0FBSSxHQUFHLG1CQUFtQixDQUFDO0lBV3BDLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxlQUFnQixTQUFRLDhCQUE4QjtJQUVqRSxZQUNTLE9BQWdFO1FBRXZFLEtBQUssQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRmhDLFlBQU8sR0FBUCxPQUFPLENBQXlEO1FBRmhFLFNBQUksR0FBRyxpQkFBaUIsQ0FBQztJQUtsQyxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sc0JBQXVCLFNBQVEsOEJBQThCO0lBRXhFLFlBQ1MsT0FBZ0U7UUFFdkUsS0FBSyxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFGaEMsWUFBTyxHQUFQLE9BQU8sQ0FBeUQ7UUFGaEUsU0FBSSxHQUFHLHlCQUF5QixDQUFDO0lBSzFDLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxtQkFBb0IsU0FBUSw4QkFBOEI7SUFFckUsWUFDUyxPQUtOO1FBRUQsS0FBSyxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFQaEMsWUFBTyxHQUFQLE9BQU8sQ0FLYjtRQVBNLFNBQUksR0FBRyxzQkFBc0IsQ0FBQztJQVV2QyxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sZUFBZ0IsU0FBUSw4QkFBOEI7SUFFakUsWUFDUyxPQUtOO1FBRUQsS0FBSyxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFQaEMsWUFBTyxHQUFQLE9BQU8sQ0FLYjtRQVBNLFNBQUksR0FBRyxpQkFBaUIsQ0FBQztJQVVsQyxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sc0JBQXVCLFNBQVEsOEJBQThCO0lBRXhFLFlBQ1MsT0FLTjtRQUVELEtBQUssQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBUGhDLFlBQU8sR0FBUCxPQUFPLENBS2I7UUFQTSxTQUFJLEdBQUcseUJBQXlCLENBQUM7SUFVMUMsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLG1CQUFvQixTQUFRLDhCQUE4QjtJQUVyRSxZQUNTLE9BTU47UUFFRCxLQUFLLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQVJoQyxZQUFPLEdBQVAsT0FBTyxDQU1iO1FBUk0sU0FBSSxHQUFHLHNCQUFzQixDQUFDO0lBV3ZDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9yZGVyRW50cnkgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9vcmRlci5tb2RlbCc7XHJcbmltcG9ydCB7XHJcbiAgRW50aXR5UHJvY2Vzc2VzRGVjcmVtZW50QWN0aW9uLFxyXG4gIEVudGl0eVByb2Nlc3Nlc0luY3JlbWVudEFjdGlvbixcclxufSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9lbnRpdHktcHJvY2Vzc2VzLWxvYWRlci9lbnRpdHktcHJvY2Vzc2VzLWxvYWRlci5hY3Rpb24nO1xyXG5pbXBvcnQgeyBNVUxUSV9DQVJUX0RBVEEgfSBmcm9tICcuLi9tdWx0aS1jYXJ0LXN0YXRlJztcclxuXHJcbmV4cG9ydCBjb25zdCBDQVJUX0FERF9FTlRSWSA9ICdbQ2FydC1lbnRyeV0gQWRkIEVudHJ5JztcclxuZXhwb3J0IGNvbnN0IENBUlRfQUREX0VOVFJZX1NVQ0NFU1MgPSAnW0NhcnQtZW50cnldIEFkZCBFbnRyeSBTdWNjZXNzJztcclxuZXhwb3J0IGNvbnN0IENBUlRfQUREX0VOVFJZX0ZBSUwgPSAnW0NhcnQtZW50cnldIEFkZCBFbnRyeSBGYWlsJztcclxuZXhwb3J0IGNvbnN0IENBUlRfUkVNT1ZFX0VOVFJZID0gJ1tDYXJ0LWVudHJ5XSBSZW1vdmUgRW50cnknO1xyXG5leHBvcnQgY29uc3QgQ0FSVF9SRU1PVkVfRU5UUllfU1VDQ0VTUyA9ICdbQ2FydC1lbnRyeV0gUmVtb3ZlIEVudHJ5IFN1Y2Nlc3MnO1xyXG5leHBvcnQgY29uc3QgQ0FSVF9SRU1PVkVfRU5UUllfRkFJTCA9ICdbQ2FydC1lbnRyeV0gUmVtb3ZlIEVudHJ5IEZhaWwnO1xyXG5cclxuZXhwb3J0IGNvbnN0IENBUlRfVVBEQVRFX0VOVFJZID0gJ1tDYXJ0LWVudHJ5XSBVcGRhdGUgRW50cnknO1xyXG5leHBvcnQgY29uc3QgQ0FSVF9VUERBVEVfRU5UUllfU1VDQ0VTUyA9ICdbQ2FydC1lbnRyeV0gVXBkYXRlIEVudHJ5IFN1Y2Nlc3MnO1xyXG5leHBvcnQgY29uc3QgQ0FSVF9VUERBVEVfRU5UUllfRkFJTCA9ICdbQ2FydC1lbnRyeV0gVXBkYXRlIEVudHJ5IEZhaWwnO1xyXG5cclxuZXhwb3J0IGNsYXNzIENhcnRBZGRFbnRyeSBleHRlbmRzIEVudGl0eVByb2Nlc3Nlc0luY3JlbWVudEFjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IENBUlRfQUREX0VOVFJZO1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHVibGljIHBheWxvYWQ6IHtcclxuICAgICAgY2FydElkOiBzdHJpbmc7XHJcbiAgICAgIHVzZXJJZDogc3RyaW5nO1xyXG4gICAgICBwcm9kdWN0Q29kZTogc3RyaW5nO1xyXG4gICAgICBxdWFudGl0eTogbnVtYmVyO1xyXG4gICAgfVxyXG4gICkge1xyXG4gICAgc3VwZXIoTVVMVElfQ0FSVF9EQVRBLCBwYXlsb2FkLmNhcnRJZCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ2FydEFkZEVudHJ5U3VjY2VzcyBleHRlbmRzIEVudGl0eVByb2Nlc3Nlc0RlY3JlbWVudEFjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IENBUlRfQUREX0VOVFJZX1NVQ0NFU1M7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgcGF5bG9hZDoge1xyXG4gICAgICB1c2VySWQ6IHN0cmluZztcclxuICAgICAgY2FydElkOiBzdHJpbmc7XHJcbiAgICAgIHByb2R1Y3RDb2RlOiBzdHJpbmc7XHJcbiAgICAgIHF1YW50aXR5OiBudW1iZXI7XHJcbiAgICAgIGRlbGl2ZXJ5TW9kZUNoYW5nZWQ6IGJvb2xlYW47XHJcbiAgICAgIGVudHJ5OiBPcmRlckVudHJ5O1xyXG4gICAgICBxdWFudGl0eUFkZGVkOiBudW1iZXI7XHJcbiAgICAgIHN0YXR1c0NvZGU6IHN0cmluZztcclxuICAgICAgc3RhdHVzTWVzc2FnZTogc3RyaW5nO1xyXG4gICAgfVxyXG4gICkge1xyXG4gICAgc3VwZXIoTVVMVElfQ0FSVF9EQVRBLCBwYXlsb2FkLmNhcnRJZCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ2FydEFkZEVudHJ5RmFpbCBleHRlbmRzIEVudGl0eVByb2Nlc3Nlc0RlY3JlbWVudEFjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IENBUlRfQUREX0VOVFJZX0ZBSUw7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgcGF5bG9hZDoge1xyXG4gICAgICB1c2VySWQ6IHN0cmluZztcclxuICAgICAgY2FydElkOiBzdHJpbmc7XHJcbiAgICAgIHByb2R1Y3RDb2RlOiBzdHJpbmc7XHJcbiAgICAgIHF1YW50aXR5OiBudW1iZXI7XHJcbiAgICAgIGVycm9yOiBhbnk7XHJcbiAgICB9XHJcbiAgKSB7XHJcbiAgICBzdXBlcihNVUxUSV9DQVJUX0RBVEEsIHBheWxvYWQuY2FydElkKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDYXJ0UmVtb3ZlRW50cnkgZXh0ZW5kcyBFbnRpdHlQcm9jZXNzZXNJbmNyZW1lbnRBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBDQVJUX1JFTU9WRV9FTlRSWTtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyBwYXlsb2FkOiB7IGNhcnRJZDogc3RyaW5nOyB1c2VySWQ6IHN0cmluZzsgZW50cnlOdW1iZXI6IHN0cmluZyB9XHJcbiAgKSB7XHJcbiAgICBzdXBlcihNVUxUSV9DQVJUX0RBVEEsIHBheWxvYWQuY2FydElkKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDYXJ0UmVtb3ZlRW50cnlTdWNjZXNzIGV4dGVuZHMgRW50aXR5UHJvY2Vzc2VzRGVjcmVtZW50QWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gQ0FSVF9SRU1PVkVfRU5UUllfU1VDQ0VTUztcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyBwYXlsb2FkOiB7IHVzZXJJZDogc3RyaW5nOyBjYXJ0SWQ6IHN0cmluZzsgZW50cnlOdW1iZXI6IHN0cmluZyB9XHJcbiAgKSB7XHJcbiAgICBzdXBlcihNVUxUSV9DQVJUX0RBVEEsIHBheWxvYWQuY2FydElkKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDYXJ0UmVtb3ZlRW50cnlGYWlsIGV4dGVuZHMgRW50aXR5UHJvY2Vzc2VzRGVjcmVtZW50QWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gQ0FSVF9SRU1PVkVfRU5UUllfRkFJTDtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyBwYXlsb2FkOiB7XHJcbiAgICAgIGVycm9yOiBhbnk7XHJcbiAgICAgIGNhcnRJZDogc3RyaW5nO1xyXG4gICAgICB1c2VySWQ6IHN0cmluZztcclxuICAgICAgZW50cnlOdW1iZXI6IHN0cmluZztcclxuICAgIH1cclxuICApIHtcclxuICAgIHN1cGVyKE1VTFRJX0NBUlRfREFUQSwgcGF5bG9hZC5jYXJ0SWQpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENhcnRVcGRhdGVFbnRyeSBleHRlbmRzIEVudGl0eVByb2Nlc3Nlc0luY3JlbWVudEFjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IENBUlRfVVBEQVRFX0VOVFJZO1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHVibGljIHBheWxvYWQ6IHtcclxuICAgICAgdXNlcklkOiBzdHJpbmc7XHJcbiAgICAgIGNhcnRJZDogc3RyaW5nO1xyXG4gICAgICBlbnRyeU51bWJlcjogc3RyaW5nO1xyXG4gICAgICBxdWFudGl0eTogbnVtYmVyO1xyXG4gICAgfVxyXG4gICkge1xyXG4gICAgc3VwZXIoTVVMVElfQ0FSVF9EQVRBLCBwYXlsb2FkLmNhcnRJZCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ2FydFVwZGF0ZUVudHJ5U3VjY2VzcyBleHRlbmRzIEVudGl0eVByb2Nlc3Nlc0RlY3JlbWVudEFjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IENBUlRfVVBEQVRFX0VOVFJZX1NVQ0NFU1M7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgcGF5bG9hZDoge1xyXG4gICAgICB1c2VySWQ6IHN0cmluZztcclxuICAgICAgY2FydElkOiBzdHJpbmc7XHJcbiAgICAgIGVudHJ5TnVtYmVyOiBzdHJpbmc7XHJcbiAgICAgIHF1YW50aXR5OiBudW1iZXI7XHJcbiAgICB9XHJcbiAgKSB7XHJcbiAgICBzdXBlcihNVUxUSV9DQVJUX0RBVEEsIHBheWxvYWQuY2FydElkKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDYXJ0VXBkYXRlRW50cnlGYWlsIGV4dGVuZHMgRW50aXR5UHJvY2Vzc2VzRGVjcmVtZW50QWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gQ0FSVF9VUERBVEVfRU5UUllfRkFJTDtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyBwYXlsb2FkOiB7XHJcbiAgICAgIGVycm9yOiBhbnk7XHJcbiAgICAgIHVzZXJJZDogc3RyaW5nO1xyXG4gICAgICBjYXJ0SWQ6IHN0cmluZztcclxuICAgICAgZW50cnlOdW1iZXI6IHN0cmluZztcclxuICAgICAgcXVhbnRpdHk6IG51bWJlcjtcclxuICAgIH1cclxuICApIHtcclxuICAgIHN1cGVyKE1VTFRJX0NBUlRfREFUQSwgcGF5bG9hZC5jYXJ0SWQpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHR5cGUgQ2FydEVudHJ5QWN0aW9uID1cclxuICB8IENhcnRBZGRFbnRyeVxyXG4gIHwgQ2FydEFkZEVudHJ5U3VjY2Vzc1xyXG4gIHwgQ2FydEFkZEVudHJ5RmFpbFxyXG4gIHwgQ2FydFJlbW92ZUVudHJ5XHJcbiAgfCBDYXJ0UmVtb3ZlRW50cnlTdWNjZXNzXHJcbiAgfCBDYXJ0UmVtb3ZlRW50cnlGYWlsXHJcbiAgfCBDYXJ0VXBkYXRlRW50cnlcclxuICB8IENhcnRVcGRhdGVFbnRyeVN1Y2Nlc3NcclxuICB8IENhcnRVcGRhdGVFbnRyeUZhaWw7XHJcbiJdfQ==