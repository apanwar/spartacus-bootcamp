import { EntityFailAction, EntityLoadAction, EntitySuccessAction, } from '../../../state/utils/entity-loader/entity-loader.action';
import { EntityProcessesDecrementAction, EntityProcessesIncrementAction, } from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';
import { EntityRemoveAction } from '../../../state/utils/entity/entity.action';
import { ProcessesLoaderResetAction } from '../../../state/utils/processes-loader/processes-loader.action';
import { MULTI_CART_DATA } from '../multi-cart-state';
export const CREATE_CART = '[Cart] Create Cart';
export const CREATE_CART_FAIL = '[Cart] Create Cart Fail';
export const CREATE_CART_SUCCESS = '[Cart] Create Cart Success';
export const LOAD_CART = '[Cart] Load Cart';
export const LOAD_CART_FAIL = '[Cart] Load Cart Fail';
export const LOAD_CART_SUCCESS = '[Cart] Load Cart Success';
export const ADD_EMAIL_TO_CART = '[Cart] Add Email to Cart';
export const ADD_EMAIL_TO_CART_FAIL = '[Cart] Add Email to Cart Fail';
export const ADD_EMAIL_TO_CART_SUCCESS = '[Cart] Add Email to Cart Success';
export const MERGE_CART = '[Cart] Merge Cart';
export const MERGE_CART_SUCCESS = '[Cart] Merge Cart Success';
export const RESET_CART_DETAILS = '[Cart] Reset Cart Details';
export const REMOVE_CART = '[Cart] Remove Cart';
export const DELETE_CART = '[Cart] Delete Cart';
export const DELETE_CART_SUCCESS = '[Cart] Delete Cart Success';
export const DELETE_CART_FAIL = '[Cart] Delete Cart Fail';
export class CreateCart extends EntityLoadAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.tempCartId);
        this.payload = payload;
        this.type = CREATE_CART;
    }
}
export class CreateCartFail extends EntityFailAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.tempCartId);
        this.payload = payload;
        this.type = CREATE_CART_FAIL;
    }
}
export class CreateCartSuccess extends EntitySuccessAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId);
        this.payload = payload;
        this.type = CREATE_CART_SUCCESS;
    }
}
export class AddEmailToCart extends EntityProcessesIncrementAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId);
        this.payload = payload;
        this.type = ADD_EMAIL_TO_CART;
    }
}
export class AddEmailToCartFail extends EntityProcessesDecrementAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId);
        this.payload = payload;
        this.type = ADD_EMAIL_TO_CART_FAIL;
    }
}
export class AddEmailToCartSuccess extends EntityProcessesDecrementAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId);
        this.payload = payload;
        this.type = ADD_EMAIL_TO_CART_SUCCESS;
    }
}
export class LoadCart extends EntityLoadAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId);
        this.payload = payload;
        this.type = LOAD_CART;
    }
}
export class LoadCartFail extends EntityFailAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId, payload.error);
        this.payload = payload;
        this.type = LOAD_CART_FAIL;
    }
}
export class LoadCartSuccess extends EntitySuccessAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId);
        this.payload = payload;
        this.type = LOAD_CART_SUCCESS;
    }
}
export class MergeCart {
    constructor(payload) {
        this.payload = payload;
        this.type = MERGE_CART;
    }
}
export class MergeCartSuccess extends EntityRemoveAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.oldCartId);
        this.payload = payload;
        this.type = MERGE_CART_SUCCESS;
    }
}
/**
 * On site context change we want to keep current list of entities, but we want to clear the value and flags.
 * With ProcessesLoaderResetAction we run it on every entity of this type.
 */
export class ResetCartDetails extends ProcessesLoaderResetAction {
    constructor() {
        super(MULTI_CART_DATA);
        this.type = RESET_CART_DETAILS;
    }
}
/**
 * Used for cleaning cart in local state, when we get information that it no longer exists in the backend.
 * For removing particular cart in both places use DeleteCart actions.
 */
export class RemoveCart extends EntityRemoveAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId);
        this.payload = payload;
        this.type = REMOVE_CART;
    }
}
export class DeleteCart {
    constructor(payload) {
        this.payload = payload;
        this.type = DELETE_CART;
    }
}
export class DeleteCartSuccess extends EntityRemoveAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId);
        this.payload = payload;
        this.type = DELETE_CART_SUCCESS;
    }
}
export class DeleteCartFail {
    constructor(payload) {
        this.payload = payload;
        this.type = DELETE_CART_FAIL;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC5hY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY2FydC9zdG9yZS9hY3Rpb25zL2NhcnQuYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFDTCxnQkFBZ0IsRUFDaEIsZ0JBQWdCLEVBQ2hCLG1CQUFtQixHQUNwQixNQUFNLHlEQUF5RCxDQUFDO0FBQ2pFLE9BQU8sRUFDTCw4QkFBOEIsRUFDOUIsOEJBQThCLEdBQy9CLE1BQU0sNkVBQTZFLENBQUM7QUFDckYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDL0UsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sK0RBQStELENBQUM7QUFDM0csT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXRELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxvQkFBb0IsQ0FBQztBQUNoRCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyx5QkFBeUIsQ0FBQztBQUMxRCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyw0QkFBNEIsQ0FBQztBQUVoRSxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsa0JBQWtCLENBQUM7QUFDNUMsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLHVCQUF1QixDQUFDO0FBQ3RELE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLDBCQUEwQixDQUFDO0FBRTVELE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLDBCQUEwQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLCtCQUErQixDQUFDO0FBQ3RFLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtDQUFrQyxDQUFDO0FBRTVFLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxtQkFBbUIsQ0FBQztBQUM5QyxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRywyQkFBMkIsQ0FBQztB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QUFPLEdBQVAsT0FBTyxDQUFnRDtRQURqRSxTQUFJLEdBQUcsZ0JBQWdCLENBQUM7SUFDNEMsQ0FBQztDQUMvRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvbiB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcclxuaW1wb3J0IHsgQ2FydCB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2NhcnQubW9kZWwnO1xyXG5pbXBvcnQge1xyXG4gIEVudGl0eUZhaWxBY3Rpb24sXHJcbiAgRW50aXR5TG9hZEFjdGlvbixcclxuICBFbnRpdHlTdWNjZXNzQWN0aW9uLFxyXG59IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2VudGl0eS1sb2FkZXIvZW50aXR5LWxvYWRlci5hY3Rpb24nO1xyXG5pbXBvcnQge1xyXG4gIEVudGl0eVByb2Nlc3Nlc0RlY3JlbWVudEFjdGlvbixcclxuICBFbnRpdHlQcm9jZXNzZXNJbmNyZW1lbnRBY3Rpb24sXHJcbn0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvZW50aXR5LXByb2Nlc3Nlcy1sb2FkZXIvZW50aXR5LXByb2Nlc3Nlcy1sb2FkZXIuYWN0aW9uJztcclxuaW1wb3J0IHsgRW50aXR5UmVtb3ZlQWN0aW9uIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvZW50aXR5L2VudGl0eS5hY3Rpb24nO1xyXG5pbXBvcnQgeyBQcm9jZXNzZXNMb2FkZXJSZXNldEFjdGlvbiB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL3Byb2Nlc3Nlcy1sb2FkZXIvcHJvY2Vzc2VzLWxvYWRlci5hY3Rpb24nO1xyXG5pbXBvcnQgeyBNVUxUSV9DQVJUX0RBVEEgfSBmcm9tICcuLi9tdWx0aS1jYXJ0LXN0YXRlJztcclxuXHJcbmV4cG9ydCBjb25zdCBDUkVBVEVfQ0FSVCA9ICdbQ2FydF0gQ3JlYXRlIENhcnQnO1xyXG5leHBvcnQgY29uc3QgQ1JFQVRFX0NBUlRfRkFJTCA9ICdbQ2FydF0gQ3JlYXRlIENhcnQgRmFpbCc7XHJcbmV4cG9ydCBjb25zdCBDUkVBVEVfQ0FSVF9TVUNDRVNTID0gJ1tDYXJ0XSBDcmVhdGUgQ2FydCBTdWNjZXNzJztcclxuXHJcbmV4cG9ydCBjb25zdCBMT0FEX0NBUlQgPSAnW0NhcnRdIExvYWQgQ2FydCc7XHJcbmV4cG9ydCBjb25zdCBMT0FEX0NBUlRfRkFJTCA9ICdbQ2FydF0gTG9hZCBDYXJ0IEZhaWwnO1xyXG5leHBvcnQgY29uc3QgTE9BRF9DQVJUX1NVQ0NFU1MgPSAnW0NhcnRdIExvYWQgQ2FydCBTdWNjZXNzJztcclxuXHJcbmV4cG9ydCBjb25zdCBBRERfRU1BSUxfVE9fQ0FSVCA9ICdbQ2FydF0gQWRkIEVtYWlsIHRvIENhcnQnO1xyXG5leHBvcnQgY29uc3QgQUREX0VNQUlMX1RPX0NBUlRfRkFJTCA9ICdbQ2FydF0gQWRkIEVtYWlsIHRvIENhcnQgRmFpbCc7XHJcbmV4cG9ydCBjb25zdCBBRERfRU1BSUxfVE9fQ0FSVF9TVUNDRVNTID0gJ1tDYXJ0XSBBZGQgRW1haWwgdG8gQ2FydCBTdWNjZXNzJztcclxuXHJcbmV4cG9ydCBjb25zdCBNRVJHRV9DQVJUID0gJ1tDYXJ0XSBNZXJnZSBDYXJ0JztcclxuZXhwb3J0IGNvbnN0IE1FUkdFX0NBUlRfU1VDQ0VTUyA9ICdbQ2FydF0gTWVyZ2UgQ2FydCBTdWNjZXNzJztcclxuXHJcbmV4cG9ydCBjb25zdCBSRVNFVF9DQVJUX0RFVEFJTFMgPSAnW0NhcnRdIFJlc2V0IENhcnQgRGV0YWlscyc7XHJcblxyXG5leHBvcnQgY29uc3QgUkVNT1ZFX0NBUlQgPSAnW0NhcnRdIFJlbW92ZSBDYXJ0JztcclxuXHJcbmV4cG9ydCBjb25zdCBERUxFVEVfQ0FSVCA9ICdbQ2FydF0gRGVsZXRlIENhcnQnO1xyXG5leHBvcnQgY29uc3QgREVMRVRFX0NBUlRfU1VDQ0VTUyA9ICdbQ2FydF0gRGVsZXRlIENhcnQgU3VjY2Vzcyc7XHJcbmV4cG9ydCBjb25zdCBERUxFVEVfQ0FSVF9GQUlMID0gJ1tDYXJ0XSBEZWxldGUgQ2FydCBGYWlsJztcclxuXHJcbmludGVyZmFjZSBDcmVhdGVDYXJ0UGF5bG9hZCB7XHJcbiAgdXNlcklkOiBzdHJpbmc7XHJcbiAgLyoqIFVzZWQgYXMgYSB1bmlxdWUga2V5IGluIG5ncnggY2FydHMgc3RvcmUgKHdlIGRvbid0IGtub3cgY2FydElkIGF0IHRoYXQgdGltZSkgKi9cclxuICB0ZW1wQ2FydElkOiBzdHJpbmc7XHJcbiAgZXh0cmFEYXRhPzoge1xyXG4gICAgYWN0aXZlPzogYm9vbGVhbjtcclxuICB9O1xyXG4gIC8qKiBBbm9ueW1vdXMgY2FydCB3aGljaCBzaG91bGQgYmUgbWVyZ2VkIHRvIG5ldyBjYXJ0ICovXHJcbiAgb2xkQ2FydElkPzogc3RyaW5nO1xyXG4gIC8qKiBDYXJ0IHRvIHdoaWNoIHNob3VsZCB3ZSBtZXJnZSAobm90IHBhc3NpbmcgdGhpcyB3aWxsIGNyZWF0ZSBuZXcgY2FydCkgKi9cclxuICB0b01lcmdlQ2FydEd1aWQ/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDcmVhdGVDYXJ0IGV4dGVuZHMgRW50aXR5TG9hZEFjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IENSRUFURV9DQVJUO1xyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBDcmVhdGVDYXJ0UGF5bG9hZCkge1xyXG4gICAgc3VwZXIoTVVMVElfQ0FSVF9EQVRBLCBwYXlsb2FkLnRlbXBDYXJ0SWQpO1xyXG4gIH1cclxufVxyXG5cclxuaW50ZXJmYWNlIENyZWF0ZUNhcnRGYWlsUGF5bG9hZCBleHRlbmRzIENyZWF0ZUNhcnRQYXlsb2FkIHtcclxuICBlcnJvcjogYW55O1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ3JlYXRlQ2FydEZhaWwgZXh0ZW5kcyBFbnRpdHlGYWlsQWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gQ1JFQVRFX0NBUlRfRkFJTDtcclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogQ3JlYXRlQ2FydEZhaWxQYXlsb2FkKSB7XHJcbiAgICBzdXBlcihNVUxUSV9DQVJUX0RBVEEsIHBheWxvYWQudGVtcENhcnRJZCk7XHJcbiAgfVxyXG59XHJcblxyXG5pbnRlcmZhY2UgQ3JlYXRlQ2FydFN1Y2Nlc3NQYXlsb2FkIGV4dGVuZHMgQ3JlYXRlQ2FydFBheWxvYWQge1xyXG4gIGNhcnQ6IENhcnQ7XHJcbiAgY2FydElkOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDcmVhdGVDYXJ0U3VjY2VzcyBleHRlbmRzIEVudGl0eVN1Y2Nlc3NBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBDUkVBVEVfQ0FSVF9TVUNDRVNTO1xyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBDcmVhdGVDYXJ0U3VjY2Vzc1BheWxvYWQpIHtcclxuICAgIHN1cGVyKE1VTFRJX0NBUlRfREFUQSwgcGF5bG9hZC5jYXJ0SWQpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFkZEVtYWlsVG9DYXJ0IGV4dGVuZHMgRW50aXR5UHJvY2Vzc2VzSW5jcmVtZW50QWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gQUREX0VNQUlMX1RPX0NBUlQ7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgcGF5bG9hZDogeyB1c2VySWQ6IHN0cmluZzsgY2FydElkOiBzdHJpbmc7IGVtYWlsOiBzdHJpbmcgfVxyXG4gICkge1xyXG4gICAgc3VwZXIoTVVMVElfQ0FSVF9EQVRBLCBwYXlsb2FkLmNhcnRJZCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQWRkRW1haWxUb0NhcnRGYWlsIGV4dGVuZHMgRW50aXR5UHJvY2Vzc2VzRGVjcmVtZW50QWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gQUREX0VNQUlMX1RPX0NBUlRfRkFJTDtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyBwYXlsb2FkOiB7XHJcbiAgICAgIHVzZXJJZDogc3RyaW5nO1xyXG4gICAgICBjYXJ0SWQ6IHN0cmluZztcclxuICAgICAgZXJyb3I6IGFueTtcclxuICAgICAgZW1haWw6IHN0cmluZztcclxuICAgIH1cclxuICApIHtcclxuICAgIHN1cGVyKE1VTFRJX0NBUlRfREFUQSwgcGF5bG9hZC5jYXJ0SWQpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFkZEVtYWlsVG9DYXJ0U3VjY2VzcyBleHRlbmRzIEVudGl0eVByb2Nlc3Nlc0RlY3JlbWVudEFjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IEFERF9FTUFJTF9UT19DQVJUX1NVQ0NFU1M7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgcGF5bG9hZDogeyB1c2VySWQ6IHN0cmluZzsgY2FydElkOiBzdHJpbmc7IGVtYWlsOiBzdHJpbmcgfVxyXG4gICkge1xyXG4gICAgc3VwZXIoTVVMVElfQ0FSVF9EQVRBLCBwYXlsb2FkLmNhcnRJZCk7XHJcbiAgfVxyXG59XHJcblxyXG5pbnRlcmZhY2UgTG9hZENhcnRQYXlsb2FkIHtcclxuICB1c2VySWQ6IHN0cmluZztcclxuICBjYXJ0SWQ6IHN0cmluZztcclxuICBleHRyYURhdGE/OiB7XHJcbiAgICBhY3RpdmU/OiBib29sZWFuO1xyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMb2FkQ2FydCBleHRlbmRzIEVudGl0eUxvYWRBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX0NBUlQ7XHJcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IExvYWRDYXJ0UGF5bG9hZCkge1xyXG4gICAgc3VwZXIoTVVMVElfQ0FSVF9EQVRBLCBwYXlsb2FkLmNhcnRJZCk7XHJcbiAgfVxyXG59XHJcblxyXG5pbnRlcmZhY2UgTG9hZENhcnRGYWlsUGF5bG9hZCBleHRlbmRzIExvYWRDYXJ0UGF5bG9hZCB7XHJcbiAgZXJyb3I6IGFueTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExvYWRDYXJ0RmFpbCBleHRlbmRzIEVudGl0eUZhaWxBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX0NBUlRfRkFJTDtcclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogTG9hZENhcnRGYWlsUGF5bG9hZCkge1xyXG4gICAgc3VwZXIoTVVMVElfQ0FSVF9EQVRBLCBwYXlsb2FkLmNhcnRJZCwgcGF5bG9hZC5lcnJvcik7XHJcbiAgfVxyXG59XHJcblxyXG5pbnRlcmZhY2UgTG9hZENhcnRTdWNjZXNzUGF5bG9hZCBleHRlbmRzIExvYWRDYXJ0UGF5bG9hZCB7XHJcbiAgY2FydDogQ2FydDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExvYWRDYXJ0U3VjY2VzcyBleHRlbmRzIEVudGl0eVN1Y2Nlc3NBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX0NBUlRfU1VDQ0VTUztcclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogTG9hZENhcnRTdWNjZXNzUGF5bG9hZCkge1xyXG4gICAgc3VwZXIoTVVMVElfQ0FSVF9EQVRBLCBwYXlsb2FkLmNhcnRJZCk7XHJcbiAgfVxyXG59XHJcblxyXG5pbnRlcmZhY2UgTWVyZ2VDYXJ0UGF5bG9hZCB7XHJcbiAgY2FydElkOiBzdHJpbmc7XHJcbiAgdXNlcklkOiBzdHJpbmc7XHJcbiAgZXh0cmFEYXRhPzogeyBhY3RpdmU/OiBib29sZWFuIH07XHJcbiAgLyoqXHJcbiAgICogTWVyZ2VDYXJ0IGFjdGlvbnMgdHJpZ2dlcnMgQ3JlYXRlQ2FydCB3aGljaCByZXF1aXJlcyB0aGlzIHBhcmFtZXRlciwgc28gdGhhdCdzIHdoeSBpdCBpcyByZXF1aXJlZC5cclxuICAgKi9cclxuICB0ZW1wQ2FydElkOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBNZXJnZUNhcnQgaW1wbGVtZW50cyBBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBNRVJHRV9DQVJUO1xyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBNZXJnZUNhcnRQYXlsb2FkKSB7fVxyXG59XHJcblxyXG5pbnRlcmZhY2UgTWVyZ2VDYXJ0U3VjY2Vzc1BheWxvYWQgZXh0ZW5kcyBNZXJnZUNhcnRQYXlsb2FkIHtcclxuICAvKipcclxuICAgKiBQcmV2aW91cyBjYXJ0IGlkIHdoaWNoIHdhcyBtZXJnZWQgd2l0aCBuZXcvdXNlciBjYXJ0LlxyXG4gICAqIE5lZWRlZCB0byBrbm93IHdoaWNoIG9ic29sZXRlIGVudGl0eSBzaG91bGQgYmUgcmVtb3ZlZC5cclxuICAgKi9cclxuICBvbGRDYXJ0SWQ6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE1lcmdlQ2FydFN1Y2Nlc3MgZXh0ZW5kcyBFbnRpdHlSZW1vdmVBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBNRVJHRV9DQVJUX1NVQ0NFU1M7XHJcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IE1lcmdlQ2FydFN1Y2Nlc3NQYXlsb2FkKSB7XHJcbiAgICBzdXBlcihNVUxUSV9DQVJUX0RBVEEsIHBheWxvYWQub2xkQ2FydElkKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBPbiBzaXRlIGNvbnRleHQgY2hhbmdlIHdlIHdhbnQgdG8ga2VlcCBjdXJyZW50IGxpc3Qgb2YgZW50aXRpZXMsIGJ1dCB3ZSB3YW50IHRvIGNsZWFyIHRoZSB2YWx1ZSBhbmQgZmxhZ3MuXHJcbiAqIFdpdGggUHJvY2Vzc2VzTG9hZGVyUmVzZXRBY3Rpb24gd2UgcnVuIGl0IG9uIGV2ZXJ5IGVudGl0eSBvZiB0aGlzIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUmVzZXRDYXJ0RGV0YWlscyBleHRlbmRzIFByb2Nlc3Nlc0xvYWRlclJlc2V0QWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gUkVTRVRfQ0FSVF9ERVRBSUxTO1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoTVVMVElfQ0FSVF9EQVRBKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBVc2VkIGZvciBjbGVhbmluZyBjYXJ0IGluIGxvY2FsIHN0YXRlLCB3aGVuIHdlIGdldCBpbmZvcm1hdGlvbiB0aGF0IGl0IG5vIGxvbmdlciBleGlzdHMgaW4gdGhlIGJhY2tlbmQuXHJcbiAqIEZvciByZW1vdmluZyBwYXJ0aWN1bGFyIGNhcnQgaW4gYm90aCBwbGFjZXMgdXNlIERlbGV0ZUNhcnQgYWN0aW9ucy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBSZW1vdmVDYXJ0IGV4dGVuZHMgRW50aXR5UmVtb3ZlQWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gUkVNT1ZFX0NBUlQ7XHJcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IHsgY2FydElkOiBzdHJpbmcgfSkge1xyXG4gICAgc3VwZXIoTVVMVElfQ0FSVF9EQVRBLCBwYXlsb2FkLmNhcnRJZCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRGVsZXRlQ2FydCBpbXBsZW1lbnRzIEFjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IERFTEVURV9DQVJUO1xyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiB7IHVzZXJJZDogc3RyaW5nOyBjYXJ0SWQ6IHN0cmluZyB9KSB7fVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRGVsZXRlQ2FydFN1Y2Nlc3MgZXh0ZW5kcyBFbnRpdHlSZW1vdmVBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBERUxFVEVfQ0FSVF9TVUNDRVNTO1xyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiB7IHVzZXJJZDogc3RyaW5nOyBjYXJ0SWQ6IHN0cmluZyB9KSB7XHJcbiAgICBzdXBlcihNVUxUSV9DQVJUX0RBVEEsIHBheWxvYWQuY2FydElkKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBEZWxldGVDYXJ0RmFpbCBpbXBsZW1lbnRzIEFjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IERFTEVURV9DQVJUX0ZBSUw7XHJcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IHsgdXNlcklkOiBzdHJpbmc7IGNhcnRJZDogc3RyaW5nOyBlcnJvcjogYW55IH0pIHt9XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIENhcnRBY3Rpb24gPVxyXG4gIHwgQ3JlYXRlQ2FydFxyXG4gIHwgQ3JlYXRlQ2FydEZhaWxcclxuICB8IENyZWF0ZUNhcnRTdWNjZXNzXHJcbiAgfCBMb2FkQ2FydFxyXG4gIHwgTG9hZENhcnRGYWlsXHJcbiAgfCBMb2FkQ2FydFN1Y2Nlc3NcclxuICB8IE1lcmdlQ2FydFxyXG4gIHwgTWVyZ2VDYXJ0U3VjY2Vzc1xyXG4gIHwgUmVzZXRDYXJ0RGV0YWlsc1xyXG4gIHwgQWRkRW1haWxUb0NhcnRcclxuICB8IEFkZEVtYWlsVG9DYXJ0RmFpbFxyXG4gIHwgQWRkRW1haWxUb0NhcnRTdWNjZXNzXHJcbiAgfCBEZWxldGVDYXJ0XHJcbiAgfCBEZWxldGVDYXJ0U3VjY2Vzc1xyXG4gIHwgRGVsZXRlQ2FydEZhaWxcclxuICB8IFJlbW92ZUNhcnQ7XHJcbiJdfQ==