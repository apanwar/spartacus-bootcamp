import { deepMerge } from '../../config/utils/deep-merge';
const OBJECT_SEPARATOR = '.';
export function getStateSliceValue(keys, state) {
    return keys
        .split(OBJECT_SEPARATOR)
        .reduce((previous, current) => (previous ? previous[current] : undefined), state);
}
export function createShellObject(key, excludeKeys, value) {
    if (!key || !value || Object.keys(value).length === 0) {
        return {};
    }
    const shell = key.split(OBJECT_SEPARATOR).reduceRight((acc, previous) => {
        return { [previous]: acc };
    }, value);
    return handleExclusions(key, excludeKeys, shell);
}
export function getStateSlice(keys, excludeKeys, state) {
    if (keys && keys.length === 0) {
        return {};
    }
    let stateSlices = {};
    for (const currentKey of keys) {
        const stateValue = getStateSliceValue(currentKey, state);
        const shell = createShellObject(currentKey, excludeKeys, stateValue);
        stateSlices = deepMerge(stateSlices, shell);
    }
    return stateSlices;
}
export function handleExclusions(key, excludeKeys, value) {
    const exclusionKeys = getExclusionKeys(key, excludeKeys);
    if (exclusionKeys.length === 0) {
        return value;
    }
    const finalValue = deepMerge({}, value);
    for (const currentExclusionKey of exclusionKeys) {
        const exclusionChunksSplit = currentExclusionKey.split(OBJECT_SEPARATOR);
        let nestedTemp = finalValue;
        for (let i = 0; i < exclusionChunksSplit.length; i++) {
            const currentChunk = exclusionChunksSplit[i];
            // last iteration
            if (i === exclusionChunksSplit.length - 1) {
                if (nestedTemp && nestedTemp[currentChunk]) {
                    delete nestedTemp[currentChunk];
                }
            }
            else {
                nestedTemp = nestedTemp[currentChunk];
            }
        }
    }
    return finalValue;
}
export function getExclusionKeys(key, excludeKeys) {
    if (!key || !excludeKeys) {
        return [];
    }
    const exclusionKeys = [];
    for (const exclusionKey of excludeKeys) {
        if (exclusionKey.includes(key)) {
            exclusionKeys.push(exclusionKey);
        }
    }
    return exclusionKeys;
}
export function filterKeysByType(keys, type) {
    if (!keys) {
        return [];
    }
    return Object.keys(keys).filter((key) => keys[key] === type);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXN0YXRlLXNsaWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL3N0YXRlL3V0aWxzL2dldC1zdGF0ZS1zbGljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFHMUQsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFFN0IsTUFBTSxVQUFVLGtCQUFrQixDQUFPLElBQVksRUFBRSxLQUFRO0lBQzdELE9BQU8sSUFBSTtTQUNSLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQztTQUN2QixNQUFNLENBQ0wsQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFDakUsS0FBSyxDQUNOLENBQUM7QUFDTixDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUMvQixHQUFXLEVBQ1gsV0FBcUIsRUFDckIsS0FBUTtJQUVSLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3JELE9BQU8sRUFBTyxDQUFDO0tBQ2hCO0lBRUQsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsRUFBRTtRQUN0RSxPQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxHQUFHLEVBQW1CLENBQUM7SUFDL0MsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ1YsT0FBTyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ25ELENBQUM7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUMzQixJQUFjLEVBQ2QsV0FBcUIsRUFDckIsS0FBUTtJQUVSLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQzdCLE9BQU8sRUFBTyxDQUFDO0tBQ2hCO0lBRUQsSUFBSSxXQUFXLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLEtBQUssTUFBTSxVQUFVLElBQUksSUFBSSxFQUFFO1FBQzdCLE1BQU0sVUFBVSxHQUFHLGtCQUFrQixDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN6RCxNQUFNLEtBQUssR0FBRyxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3JFLFdBQVcsR0FBRyxTQUFTLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQzdDO0lBRUQsT0FBTyxXQUFnQixDQUFDO0FBQzFCLENBQUM7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQzlCLEdBQVcsRUFDWCxXQUFxQixFQUNyQixLQUFVO0lBRVYsTUFBTSxhQUFhLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3pELElBQUksYUFBYSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDOUIsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDeEMsS0FBSyxNQUFNLG1CQUFtQixJQUFJLGFBQWEsRUFBRTtRQUMvQyxNQUFNLG9CQUFvQixHQUFHLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRXpFLElBQUksVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM1QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3BELE1BQU0sWUFBWSxHQUFHLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRTdDLGlCQUFpQjtZQUNqQixJQUFJLENBQUMsS0FBSyxvQkFBb0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUN6QyxJQUFJLFVBQVUsSUFBSSxVQUFVLENBQUMsWUFBWSxDQUFDLEVBQUU7b0JBQzFDLE9BQU8sVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO2lCQUNqQzthQUNGO2lCQUFNO2dCQUNMLFVBQVUsR0FBRyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDdkM7U0FDRjtLQUNGO0lBRUQsT0FBTyxVQUFVLENBQUM7QUFDcEIsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxHQUFXLEVBQUUsV0FBcUI7SUFDakUsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRTtRQUN4QixPQUFPLEVBQUUsQ0FBQztLQUNYO0lBRUQsTUFBTSxhQUFhLEdBQWEsRUFBRSxDQUFDO0lBQ25DLEtBQUssTUFBTSxZQUFZLElBQUksV0FBVyxFQUFFO1FBQ3RDLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUM5QixhQUFhLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ2xDO0tBQ0Y7SUFFRCxPQUFPLGFBQWEsQ0FBQztBQUN2QixDQUFDO0FBRUQsTUFBTSxVQUFVLGdCQUFnQixDQUM5QixJQUE0RCxFQUM1RCxJQUF5QztJQUV6QyxJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ1QsT0FBTyxFQUFFLENBQUM7S0FDWDtJQUNELE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQztBQUMvRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVlcE1lcmdlIH0gZnJvbSAnLi4vLi4vY29uZmlnL3V0aWxzL2RlZXAtbWVyZ2UnO1xyXG5pbXBvcnQgeyBTdGF0ZVRyYW5zZmVyVHlwZSwgU3RvcmFnZVN5bmNUeXBlIH0gZnJvbSAnLi4vY29uZmlnL3N0YXRlLWNvbmZpZyc7XHJcblxyXG5jb25zdCBPQkpFQ1RfU0VQQVJBVE9SID0gJy4nO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0YXRlU2xpY2VWYWx1ZTxULCBFPihrZXlzOiBzdHJpbmcsIHN0YXRlOiBUKTogRSB7XHJcbiAgcmV0dXJuIGtleXNcclxuICAgIC5zcGxpdChPQkpFQ1RfU0VQQVJBVE9SKVxyXG4gICAgLnJlZHVjZShcclxuICAgICAgKHByZXZpb3VzLCBjdXJyZW50KSA9PiAocHJldmlvdXMgPyBwcmV2aW91c1tjdXJyZW50XSA6IHVuZGVmaW5lZCksXHJcbiAgICAgIHN0YXRlXHJcbiAgICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2hlbGxPYmplY3Q8VCwgRT4oXHJcbiAga2V5OiBzdHJpbmcsXHJcbiAgZXhjbHVkZUtleXM6IHN0cmluZ1tdLFxyXG4gIHZhbHVlOiBUXHJcbik6IEUge1xyXG4gIGlmICgha2V5IHx8ICF2YWx1ZSB8fCBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwKSB7XHJcbiAgICByZXR1cm4ge30gYXMgRTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHNoZWxsID0ga2V5LnNwbGl0KE9CSkVDVF9TRVBBUkFUT1IpLnJlZHVjZVJpZ2h0KChhY2MsIHByZXZpb3VzKSA9PiB7XHJcbiAgICByZXR1cm4gKHsgW3ByZXZpb3VzXTogYWNjIH0gYXMgdW5rbm93bikgYXMgVDtcclxuICB9LCB2YWx1ZSk7XHJcbiAgcmV0dXJuIGhhbmRsZUV4Y2x1c2lvbnMoa2V5LCBleGNsdWRlS2V5cywgc2hlbGwpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RhdGVTbGljZTxULCBFPihcclxuICBrZXlzOiBzdHJpbmdbXSxcclxuICBleGNsdWRlS2V5czogc3RyaW5nW10sXHJcbiAgc3RhdGU6IFRcclxuKTogRSB7XHJcbiAgaWYgKGtleXMgJiYga2V5cy5sZW5ndGggPT09IDApIHtcclxuICAgIHJldHVybiB7fSBhcyBFO1xyXG4gIH1cclxuXHJcbiAgbGV0IHN0YXRlU2xpY2VzID0ge307XHJcbiAgZm9yIChjb25zdCBjdXJyZW50S2V5IG9mIGtleXMpIHtcclxuICAgIGNvbnN0IHN0YXRlVmFsdWUgPSBnZXRTdGF0ZVNsaWNlVmFsdWUoY3VycmVudEtleSwgc3RhdGUpO1xyXG4gICAgY29uc3Qgc2hlbGwgPSBjcmVhdGVTaGVsbE9iamVjdChjdXJyZW50S2V5LCBleGNsdWRlS2V5cywgc3RhdGVWYWx1ZSk7XHJcbiAgICBzdGF0ZVNsaWNlcyA9IGRlZXBNZXJnZShzdGF0ZVNsaWNlcywgc2hlbGwpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHN0YXRlU2xpY2VzIGFzIEU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVFeGNsdXNpb25zKFxyXG4gIGtleTogc3RyaW5nLFxyXG4gIGV4Y2x1ZGVLZXlzOiBzdHJpbmdbXSxcclxuICB2YWx1ZTogYW55XHJcbik6IGFueSB7XHJcbiAgY29uc3QgZXhjbHVzaW9uS2V5cyA9IGdldEV4Y2x1c2lvbktleXMoa2V5LCBleGNsdWRlS2V5cyk7XHJcbiAgaWYgKGV4Y2x1c2lvbktleXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbiAgfVxyXG5cclxuICBjb25zdCBmaW5hbFZhbHVlID0gZGVlcE1lcmdlKHt9LCB2YWx1ZSk7XHJcbiAgZm9yIChjb25zdCBjdXJyZW50RXhjbHVzaW9uS2V5IG9mIGV4Y2x1c2lvbktleXMpIHtcclxuICAgIGNvbnN0IGV4Y2x1c2lvbkNodW5rc1NwbGl0ID0gY3VycmVudEV4Y2x1c2lvbktleS5zcGxpdChPQkpFQ1RfU0VQQVJBVE9SKTtcclxuXHJcbiAgICBsZXQgbmVzdGVkVGVtcCA9IGZpbmFsVmFsdWU7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV4Y2x1c2lvbkNodW5rc1NwbGl0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRDaHVuayA9IGV4Y2x1c2lvbkNodW5rc1NwbGl0W2ldO1xyXG5cclxuICAgICAgLy8gbGFzdCBpdGVyYXRpb25cclxuICAgICAgaWYgKGkgPT09IGV4Y2x1c2lvbkNodW5rc1NwbGl0Lmxlbmd0aCAtIDEpIHtcclxuICAgICAgICBpZiAobmVzdGVkVGVtcCAmJiBuZXN0ZWRUZW1wW2N1cnJlbnRDaHVua10pIHtcclxuICAgICAgICAgIGRlbGV0ZSBuZXN0ZWRUZW1wW2N1cnJlbnRDaHVua107XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG5lc3RlZFRlbXAgPSBuZXN0ZWRUZW1wW2N1cnJlbnRDaHVua107XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBmaW5hbFZhbHVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXhjbHVzaW9uS2V5cyhrZXk6IHN0cmluZywgZXhjbHVkZUtleXM6IHN0cmluZ1tdKTogc3RyaW5nW10ge1xyXG4gIGlmICgha2V5IHx8ICFleGNsdWRlS2V5cykge1xyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgZXhjbHVzaW9uS2V5czogc3RyaW5nW10gPSBbXTtcclxuICBmb3IgKGNvbnN0IGV4Y2x1c2lvbktleSBvZiBleGNsdWRlS2V5cykge1xyXG4gICAgaWYgKGV4Y2x1c2lvbktleS5pbmNsdWRlcyhrZXkpKSB7XHJcbiAgICAgIGV4Y2x1c2lvbktleXMucHVzaChleGNsdXNpb25LZXkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGV4Y2x1c2lvbktleXM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJLZXlzQnlUeXBlKFxyXG4gIGtleXM6IHsgW2tleTogc3RyaW5nXTogU3RvcmFnZVN5bmNUeXBlIHwgU3RhdGVUcmFuc2ZlclR5cGUgfSxcclxuICB0eXBlOiBTdG9yYWdlU3luY1R5cGUgfCBTdGF0ZVRyYW5zZmVyVHlwZVxyXG4pOiBzdHJpbmdbXSB7XHJcbiAgaWYgKCFrZXlzKSB7XHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG4gIHJldHVybiBPYmplY3Qua2V5cyhrZXlzKS5maWx0ZXIoKGtleSkgPT4ga2V5c1trZXldID09PSB0eXBlKTtcclxufVxyXG4iXX0=