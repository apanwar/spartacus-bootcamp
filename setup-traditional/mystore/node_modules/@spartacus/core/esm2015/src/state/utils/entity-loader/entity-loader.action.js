import { entityMeta } from '../entity/entity.action';
import { failMeta, loadMeta, resetMeta, successMeta, } from '../loader/loader.action';
export const ENTITY_LOAD_ACTION = '[ENTITY] LOAD';
export const ENTITY_FAIL_ACTION = '[ENTITY] LOAD FAIL';
export const ENTITY_SUCCESS_ACTION = '[ENTITY] LOAD SUCCESS';
export const ENTITY_RESET_ACTION = '[ENTITY] RESET';
export function entityLoadMeta(entityType, id) {
    return Object.assign(Object.assign({}, loadMeta(entityType)), entityMeta(entityType, id));
}
export function entityFailMeta(entityType, id, error) {
    return Object.assign(Object.assign({}, failMeta(entityType, error)), entityMeta(entityType, id));
}
export function entitySuccessMeta(entityType, id) {
    return Object.assign(Object.assign({}, successMeta(entityType)), entityMeta(entityType, id));
}
export function entityResetMeta(entityType, id) {
    return Object.assign(Object.assign({}, resetMeta(entityType)), entityMeta(entityType, id));
}
export class EntityLoadAction {
    constructor(entityType, id) {
        this.type = ENTITY_LOAD_ACTION;
        this.meta = entityLoadMeta(entityType, id);
    }
}
export class EntityFailAction {
    constructor(entityType, id, error) {
        this.type = ENTITY_FAIL_ACTION;
        this.meta = entityFailMeta(entityType, id, error);
    }
}
export class EntitySuccessAction {
    constructor(entityType, id, payload) {
        this.payload = payload;
        this.type = ENTITY_SUCCESS_ACTION;
        this.meta = entitySuccessMeta(entityType, id);
    }
}
export class EntityLoaderResetAction {
    constructor(entityType, id) {
        this.type = ENTITY_RESET_ACTION;
        this.meta = entityResetMeta(entityType, id);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LWxvYWRlci5hY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvc3RhdGUvdXRpbHMvZW50aXR5LWxvYWRlci9lbnRpdHktbG9hZGVyLmFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFjLE1BQU0seUJBQXlCLENBQUM7QUFDakUsT0FBTyxFQUNMLFFBQVEsRUFFUixRQUFRLEVBQ1IsU0FBUyxFQUNULFdBQVcsR0FDWixNQUFNLHlCQUF5QixDQUFDO0FBRWpDLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLGVBQWUsQ0FBQztBQUNsRCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxvQkFBb0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyx1QkFBdUIsQ0FBQztBQUM3RCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxnQkFBZ0IsQ0FBQztBQVNwRCxNQUFNLFVBQVUsY0FBYyxDQUM1QixVQUFrQixFQUNsQixFQUFxQjtJQUVyQix1Q0FDSyxRQUFRLENBQUMsVUFBVSxDQUFDLEdBQ3BCLFVBQVUsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLEVBQzdCO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSxjQUFjLENBQzVCLFVBQWtCLEVBQ2xCLEVBQXFCLEVBQ3JCLEtBQVc7SUFFWCx1Q0FDSyxRQUFRLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxHQUMzQixVQUFVLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxFQUM3QjtBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQy9CLFVBQWtCLEVBQ2xCLEVBQXFCO0lBRXJCLHVDQUNLLFdBQVcsQ0FBQyxVQUFVLENBQUMsR0FDdkIsVUFBVSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsRUFDN0I7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLGVBQWUsQ0FDN0IsVUFBa0IsRUFDbEIsRUFBcUI7SUFFckIsdUNBQ0ssU0FBUyxDQUFDLFVBQVUsQ0FBQyxHQUNyQixVQUFVLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxFQUM3QjtBQUNKLENBQUM7QUFFRCxNQUFNLE9BQU8sZ0JBQWdCO0lBRzNCLFlBQVksVUFBa0IsRUFBRSxFQUFxQjtRQUZyRCxTQUFJLEdBQUcsa0JBQWtCLENBQUM7UUFHeEIsSUFBSSxDQUFDLElBQUksR0FBRyxjQUFjLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzdDLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxnQkFBZ0I7SUFHM0IsWUFBWSxVQUFrQixFQUFFLEVBQXFCLEVBQUUsS0FBVztRQUZsRSxTQUFJLEdBQUcsa0JBQWtCLENBQUM7UUFHeEIsSUFBSSxDQUFDLElBQUksR0FBRyxjQUFjLENBQUMsVUFBVSxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNwRCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sbUJBQW1CO0lBRzlCLFlBQVksVUFBa0IsRUFBRSxFQUFxQixFQUFTLE9BQWE7UUFBYixZQUFPLEdBQVAsT0FBTyxDQUFNO1FBRjNFLFNBQUksR0FBRyxxQkFBcUIsQ0FBQztRQUczQixJQUFJLENBQUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNoRCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sdUJBQXVCO0lBR2xDLFlBQVksVUFBa0IsRUFBRSxFQUFxQjtRQUZyRCxTQUFJLEdBQUcsbUJBQW1CLENBQUM7UUFHekIsSUFBSSxDQUFDLElBQUksR0FBRyxlQUFlLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzlDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvbiB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcclxuaW1wb3J0IHsgZW50aXR5TWV0YSwgRW50aXR5TWV0YSB9IGZyb20gJy4uL2VudGl0eS9lbnRpdHkuYWN0aW9uJztcclxuaW1wb3J0IHtcclxuICBmYWlsTWV0YSxcclxuICBMb2FkZXJNZXRhLFxyXG4gIGxvYWRNZXRhLFxyXG4gIHJlc2V0TWV0YSxcclxuICBzdWNjZXNzTWV0YSxcclxufSBmcm9tICcuLi9sb2FkZXIvbG9hZGVyLmFjdGlvbic7XHJcblxyXG5leHBvcnQgY29uc3QgRU5USVRZX0xPQURfQUNUSU9OID0gJ1tFTlRJVFldIExPQUQnO1xyXG5leHBvcnQgY29uc3QgRU5USVRZX0ZBSUxfQUNUSU9OID0gJ1tFTlRJVFldIExPQUQgRkFJTCc7XHJcbmV4cG9ydCBjb25zdCBFTlRJVFlfU1VDQ0VTU19BQ1RJT04gPSAnW0VOVElUWV0gTE9BRCBTVUNDRVNTJztcclxuZXhwb3J0IGNvbnN0IEVOVElUWV9SRVNFVF9BQ1RJT04gPSAnW0VOVElUWV0gUkVTRVQnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBFbnRpdHlMb2FkZXJNZXRhIGV4dGVuZHMgRW50aXR5TWV0YSwgTG9hZGVyTWV0YSB7fVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBFbnRpdHlMb2FkZXJBY3Rpb24gZXh0ZW5kcyBBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHBheWxvYWQ/OiBhbnk7XHJcbiAgcmVhZG9ubHkgbWV0YT86IEVudGl0eUxvYWRlck1ldGE7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBlbnRpdHlMb2FkTWV0YShcclxuICBlbnRpdHlUeXBlOiBzdHJpbmcsXHJcbiAgaWQ6IHN0cmluZyB8IHN0cmluZ1tdXHJcbik6IEVudGl0eUxvYWRlck1ldGEge1xyXG4gIHJldHVybiB7XHJcbiAgICAuLi5sb2FkTWV0YShlbnRpdHlUeXBlKSxcclxuICAgIC4uLmVudGl0eU1ldGEoZW50aXR5VHlwZSwgaWQpLFxyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBlbnRpdHlGYWlsTWV0YShcclxuICBlbnRpdHlUeXBlOiBzdHJpbmcsXHJcbiAgaWQ6IHN0cmluZyB8IHN0cmluZ1tdLFxyXG4gIGVycm9yPzogYW55XHJcbik6IEVudGl0eUxvYWRlck1ldGEge1xyXG4gIHJldHVybiB7XHJcbiAgICAuLi5mYWlsTWV0YShlbnRpdHlUeXBlLCBlcnJvciksXHJcbiAgICAuLi5lbnRpdHlNZXRhKGVudGl0eVR5cGUsIGlkKSxcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZW50aXR5U3VjY2Vzc01ldGEoXHJcbiAgZW50aXR5VHlwZTogc3RyaW5nLFxyXG4gIGlkOiBzdHJpbmcgfCBzdHJpbmdbXVxyXG4pOiBFbnRpdHlMb2FkZXJNZXRhIHtcclxuICByZXR1cm4ge1xyXG4gICAgLi4uc3VjY2Vzc01ldGEoZW50aXR5VHlwZSksXHJcbiAgICAuLi5lbnRpdHlNZXRhKGVudGl0eVR5cGUsIGlkKSxcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZW50aXR5UmVzZXRNZXRhKFxyXG4gIGVudGl0eVR5cGU6IHN0cmluZyxcclxuICBpZDogc3RyaW5nIHwgc3RyaW5nW11cclxuKTogRW50aXR5TG9hZGVyTWV0YSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIC4uLnJlc2V0TWV0YShlbnRpdHlUeXBlKSxcclxuICAgIC4uLmVudGl0eU1ldGEoZW50aXR5VHlwZSwgaWQpLFxyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBFbnRpdHlMb2FkQWN0aW9uIGltcGxlbWVudHMgRW50aXR5TG9hZGVyQWN0aW9uIHtcclxuICB0eXBlID0gRU5USVRZX0xPQURfQUNUSU9OO1xyXG4gIHJlYWRvbmx5IG1ldGE6IEVudGl0eUxvYWRlck1ldGE7XHJcbiAgY29uc3RydWN0b3IoZW50aXR5VHlwZTogc3RyaW5nLCBpZDogc3RyaW5nIHwgc3RyaW5nW10pIHtcclxuICAgIHRoaXMubWV0YSA9IGVudGl0eUxvYWRNZXRhKGVudGl0eVR5cGUsIGlkKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBFbnRpdHlGYWlsQWN0aW9uIGltcGxlbWVudHMgRW50aXR5TG9hZGVyQWN0aW9uIHtcclxuICB0eXBlID0gRU5USVRZX0ZBSUxfQUNUSU9OO1xyXG4gIHJlYWRvbmx5IG1ldGE6IEVudGl0eUxvYWRlck1ldGE7XHJcbiAgY29uc3RydWN0b3IoZW50aXR5VHlwZTogc3RyaW5nLCBpZDogc3RyaW5nIHwgc3RyaW5nW10sIGVycm9yPzogYW55KSB7XHJcbiAgICB0aGlzLm1ldGEgPSBlbnRpdHlGYWlsTWV0YShlbnRpdHlUeXBlLCBpZCwgZXJyb3IpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEVudGl0eVN1Y2Nlc3NBY3Rpb24gaW1wbGVtZW50cyBFbnRpdHlMb2FkZXJBY3Rpb24ge1xyXG4gIHR5cGUgPSBFTlRJVFlfU1VDQ0VTU19BQ1RJT047XHJcbiAgcmVhZG9ubHkgbWV0YTogRW50aXR5TG9hZGVyTWV0YTtcclxuICBjb25zdHJ1Y3RvcihlbnRpdHlUeXBlOiBzdHJpbmcsIGlkOiBzdHJpbmcgfCBzdHJpbmdbXSwgcHVibGljIHBheWxvYWQ/OiBhbnkpIHtcclxuICAgIHRoaXMubWV0YSA9IGVudGl0eVN1Y2Nlc3NNZXRhKGVudGl0eVR5cGUsIGlkKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBFbnRpdHlMb2FkZXJSZXNldEFjdGlvbiBpbXBsZW1lbnRzIEVudGl0eUxvYWRlckFjdGlvbiB7XHJcbiAgdHlwZSA9IEVOVElUWV9SRVNFVF9BQ1RJT047XHJcbiAgcmVhZG9ubHkgbWV0YTogRW50aXR5TG9hZGVyTWV0YTtcclxuICBjb25zdHJ1Y3RvcihlbnRpdHlUeXBlOiBzdHJpbmcsIGlkOiBzdHJpbmcgfCBzdHJpbmdbXSkge1xyXG4gICAgdGhpcy5tZXRhID0gZW50aXR5UmVzZXRNZXRhKGVudGl0eVR5cGUsIGlkKTtcclxuICB9XHJcbn1cclxuIl19