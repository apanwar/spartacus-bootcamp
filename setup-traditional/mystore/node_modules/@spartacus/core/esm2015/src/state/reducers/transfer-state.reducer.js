import { isPlatformBrowser, isPlatformServer } from '@angular/common';
import { makeStateKey, } from '@angular/platform-browser';
import { INIT } from '@ngrx/store';
import { AUTH_FEATURE } from '../../auth/store/auth-state';
import { deepMerge } from '../../config/utils/deep-merge';
import { StateTransferType } from '../config/state-config';
import { filterKeysByType, getStateSlice } from '../utils/get-state-slice';
export const CX_KEY = makeStateKey('cx-state');
export function getTransferStateReducer(platformId, transferState, config) {
    if (transferState &&
        config &&
        config.state &&
        config.state.ssrTransfer &&
        config.state.ssrTransfer.keys) {
        if (isPlatformBrowser(platformId)) {
            return getBrowserTransferStateReducer(transferState, config.state.ssrTransfer.keys);
        }
        else if (isPlatformServer(platformId)) {
            return getServerTransferStateReducer(transferState, config.state.ssrTransfer.keys);
        }
    }
    return (reducer) => reducer;
}
export function getServerTransferStateReducer(transferState, keys) {
    const transferStateKeys = filterKeysByType(keys, StateTransferType.TRANSFER_STATE);
    return function (reducer) {
        return function (state, action) {
            const newState = reducer(state, action);
            if (newState) {
                const stateSlice = getStateSlice(transferStateKeys, [], newState);
                transferState.set(CX_KEY, stateSlice);
            }
            return newState;
        };
    };
}
export function getBrowserTransferStateReducer(transferState, keys) {
    const transferStateKeys = filterKeysByType(keys, StateTransferType.TRANSFER_STATE);
    return function (reducer) {
        return function (state, action) {
            if (action.type === INIT) {
                if (!state) {
                    state = reducer(state, action);
                }
                // we should not utilize transfer state if user is logged in
                const authState = state[AUTH_FEATURE];
                const isLoggedIn = authState && authState.userToken && authState.userToken.token;
                if (!isLoggedIn && transferState.hasKey(CX_KEY)) {
                    const cxKey = transferState.get(CX_KEY, {});
                    const transferredStateSlice = getStateSlice(transferStateKeys, [], cxKey);
                    state = deepMerge({}, state, transferredStateSlice);
                }
                return state;
            }
            return reducer(state, action);
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmZXItc3RhdGUucmVkdWNlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9zdGF0ZS9yZWR1Y2Vycy90cmFuc2Zlci1zdGF0ZS5yZWR1Y2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3RFLE9BQU8sRUFDTCxZQUFZLEdBR2IsTUFBTSwyQkFBMkIsQ0FBQztBQUNuQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ25DLE9BQU8sRUFBRSxZQUFZLEVBQWlCLE1BQU0sNkJBQTZCLENBQUM7QUFDMUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzFELE9BQU8sRUFBZSxpQkFBaUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUUzRSxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQXFCLFlBQVksQ0FBUyxVQUFVLENBQUMsQ0FBQztBQUV6RSxNQUFNLFVBQVUsdUJBQXVCLENBQ3JDLFVBQVUsRUFDVixhQUE2QixFQUM3QixNQUFvQjtJQUVwQixJQUNFLGFBQWE7UUFDYixNQUFNO1FBQ04sTUFBTSxDQUFDLEtBQUs7UUFDWixNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVc7UUFDeEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUM3QjtRQUNBLElBQUksaUJBQWlCLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDakMsT0FBTyw4QkFBOEIsQ0FDbkMsYUFBYSxFQUNiLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FDOUIsQ0FBQztTQUNIO2FBQU0sSUFBSSxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUN2QyxPQUFPLDZCQUE2QixDQUNsQyxhQUFhLEVBQ2IsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUM5QixDQUFDO1NBQ0g7S0FDRjtJQUVELE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQztBQUM5QixDQUFDO0FBRUQsTUFBTSxVQUFVLDZCQUE2QixDQUMzQyxhQUE0QixFQUM1QixJQUEwQztJQUUxQyxNQUFNLGlCQUFpQixHQUFHLGdCQUFnQixDQUN4QyxJQUFJLEVBQ0osaUJBQWlCLENBQUMsY0FBYyxDQUNqQyxDQUFDO0lBRUYsT0FBTyxVQUFVLE9BQU87UUFDdEIsT0FBTyxVQUFVLEtBQUssRUFBRSxNQUFXO1lBQ2pDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDeEMsSUFBSSxRQUFRLEVBQUU7Z0JBQ1osTUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFDLGlCQUFpQixFQUFFLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztnQkFDbEUsYUFBYSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7YUFDdkM7WUFFRCxPQUFPLFFBQVEsQ0FBQztRQUNsQixDQUFDLENBQUM7SUFDSixDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLDhCQUE4QixDQUM1QyxhQUE0QixFQUM1QixJQUEwQztJQUUxQyxNQUFNLGlCQUFpQixHQUFHLGdCQUFnQixDQUN4QyxJQUFJLEVBQ0osaUJBQWlCLENBQUMsY0FBYyxDQUNqQyxDQUFDO0lBRUYsT0FBTyxVQUFVLE9BQU87UUFDdEIsT0FBTyxVQUFVLEtBQUssRUFBRSxNQUFXO1lBQ2pDLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUU7Z0JBQ3hCLElBQUksQ0FBQyxLQUFLLEVBQUU7b0JBQ1YsS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7aUJBQ2hDO2dCQUVELDREQUE0RDtnQkFDNUQsTUFBTSxTQUFTLEdBQUksS0FBdUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDekQsTUFBTSxVQUFVLEdBQ2QsU0FBUyxJQUFJLFNBQVMsQ0FBQyxTQUFTLElBQUksU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7Z0JBRWhFLElBQUksQ0FBQyxVQUFVLElBQUksYUFBYSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtvQkFDL0MsTUFBTSxLQUFLLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7b0JBQzVDLE1BQU0scUJBQXFCLEdBQUcsYUFBYSxDQUN6QyxpQkFBaUIsRUFDakIsRUFBRSxFQUNGLEtBQUssQ0FDTixDQUFDO29CQUVGLEtBQUssR0FBRyxTQUFTLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO2lCQUNyRDtnQkFDRCxPQUFPLEtBQUssQ0FBQzthQUNkO1lBQ0QsT0FBTyxPQUFPLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2hDLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciwgaXNQbGF0Zm9ybVNlcnZlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7XHJcbiAgbWFrZVN0YXRlS2V5LFxyXG4gIFN0YXRlS2V5LFxyXG4gIFRyYW5zZmVyU3RhdGUsXHJcbn0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcbmltcG9ydCB7IElOSVQgfSBmcm9tICdAbmdyeC9zdG9yZSc7XHJcbmltcG9ydCB7IEFVVEhfRkVBVFVSRSwgU3RhdGVXaXRoQXV0aCB9IGZyb20gJy4uLy4uL2F1dGgvc3RvcmUvYXV0aC1zdGF0ZSc7XHJcbmltcG9ydCB7IGRlZXBNZXJnZSB9IGZyb20gJy4uLy4uL2NvbmZpZy91dGlscy9kZWVwLW1lcmdlJztcclxuaW1wb3J0IHsgU3RhdGVDb25maWcsIFN0YXRlVHJhbnNmZXJUeXBlIH0gZnJvbSAnLi4vY29uZmlnL3N0YXRlLWNvbmZpZyc7XHJcbmltcG9ydCB7IGZpbHRlcktleXNCeVR5cGUsIGdldFN0YXRlU2xpY2UgfSBmcm9tICcuLi91dGlscy9nZXQtc3RhdGUtc2xpY2UnO1xyXG5cclxuZXhwb3J0IGNvbnN0IENYX0tFWTogU3RhdGVLZXk8c3RyaW5nPiA9IG1ha2VTdGF0ZUtleTxzdHJpbmc+KCdjeC1zdGF0ZScpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zZmVyU3RhdGVSZWR1Y2VyKFxyXG4gIHBsYXRmb3JtSWQsXHJcbiAgdHJhbnNmZXJTdGF0ZT86IFRyYW5zZmVyU3RhdGUsXHJcbiAgY29uZmlnPzogU3RhdGVDb25maWdcclxuKSB7XHJcbiAgaWYgKFxyXG4gICAgdHJhbnNmZXJTdGF0ZSAmJlxyXG4gICAgY29uZmlnICYmXHJcbiAgICBjb25maWcuc3RhdGUgJiZcclxuICAgIGNvbmZpZy5zdGF0ZS5zc3JUcmFuc2ZlciAmJlxyXG4gICAgY29uZmlnLnN0YXRlLnNzclRyYW5zZmVyLmtleXNcclxuICApIHtcclxuICAgIGlmIChpc1BsYXRmb3JtQnJvd3NlcihwbGF0Zm9ybUlkKSkge1xyXG4gICAgICByZXR1cm4gZ2V0QnJvd3NlclRyYW5zZmVyU3RhdGVSZWR1Y2VyKFxyXG4gICAgICAgIHRyYW5zZmVyU3RhdGUsXHJcbiAgICAgICAgY29uZmlnLnN0YXRlLnNzclRyYW5zZmVyLmtleXNcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSBpZiAoaXNQbGF0Zm9ybVNlcnZlcihwbGF0Zm9ybUlkKSkge1xyXG4gICAgICByZXR1cm4gZ2V0U2VydmVyVHJhbnNmZXJTdGF0ZVJlZHVjZXIoXHJcbiAgICAgICAgdHJhbnNmZXJTdGF0ZSxcclxuICAgICAgICBjb25maWcuc3RhdGUuc3NyVHJhbnNmZXIua2V5c1xyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChyZWR1Y2VyKSA9PiByZWR1Y2VyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VydmVyVHJhbnNmZXJTdGF0ZVJlZHVjZXIoXHJcbiAgdHJhbnNmZXJTdGF0ZTogVHJhbnNmZXJTdGF0ZSxcclxuICBrZXlzOiB7IFtrZXk6IHN0cmluZ106IFN0YXRlVHJhbnNmZXJUeXBlIH1cclxuKSB7XHJcbiAgY29uc3QgdHJhbnNmZXJTdGF0ZUtleXMgPSBmaWx0ZXJLZXlzQnlUeXBlKFxyXG4gICAga2V5cyxcclxuICAgIFN0YXRlVHJhbnNmZXJUeXBlLlRSQU5TRkVSX1NUQVRFXHJcbiAgKTtcclxuXHJcbiAgcmV0dXJuIGZ1bmN0aW9uIChyZWR1Y2VyKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb246IGFueSkge1xyXG4gICAgICBjb25zdCBuZXdTdGF0ZSA9IHJlZHVjZXIoc3RhdGUsIGFjdGlvbik7XHJcbiAgICAgIGlmIChuZXdTdGF0ZSkge1xyXG4gICAgICAgIGNvbnN0IHN0YXRlU2xpY2UgPSBnZXRTdGF0ZVNsaWNlKHRyYW5zZmVyU3RhdGVLZXlzLCBbXSwgbmV3U3RhdGUpO1xyXG4gICAgICAgIHRyYW5zZmVyU3RhdGUuc2V0KENYX0tFWSwgc3RhdGVTbGljZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBuZXdTdGF0ZTtcclxuICAgIH07XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEJyb3dzZXJUcmFuc2ZlclN0YXRlUmVkdWNlcihcclxuICB0cmFuc2ZlclN0YXRlOiBUcmFuc2ZlclN0YXRlLFxyXG4gIGtleXM6IHsgW2tleTogc3RyaW5nXTogU3RhdGVUcmFuc2ZlclR5cGUgfVxyXG4pIHtcclxuICBjb25zdCB0cmFuc2ZlclN0YXRlS2V5cyA9IGZpbHRlcktleXNCeVR5cGUoXHJcbiAgICBrZXlzLFxyXG4gICAgU3RhdGVUcmFuc2ZlclR5cGUuVFJBTlNGRVJfU1RBVEVcclxuICApO1xyXG5cclxuICByZXR1cm4gZnVuY3Rpb24gKHJlZHVjZXIpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbjogYW55KSB7XHJcbiAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gSU5JVCkge1xyXG4gICAgICAgIGlmICghc3RhdGUpIHtcclxuICAgICAgICAgIHN0YXRlID0gcmVkdWNlcihzdGF0ZSwgYWN0aW9uKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHdlIHNob3VsZCBub3QgdXRpbGl6ZSB0cmFuc2ZlciBzdGF0ZSBpZiB1c2VyIGlzIGxvZ2dlZCBpblxyXG4gICAgICAgIGNvbnN0IGF1dGhTdGF0ZSA9IChzdGF0ZSBhcyBTdGF0ZVdpdGhBdXRoKVtBVVRIX0ZFQVRVUkVdO1xyXG4gICAgICAgIGNvbnN0IGlzTG9nZ2VkSW4gPVxyXG4gICAgICAgICAgYXV0aFN0YXRlICYmIGF1dGhTdGF0ZS51c2VyVG9rZW4gJiYgYXV0aFN0YXRlLnVzZXJUb2tlbi50b2tlbjtcclxuXHJcbiAgICAgICAgaWYgKCFpc0xvZ2dlZEluICYmIHRyYW5zZmVyU3RhdGUuaGFzS2V5KENYX0tFWSkpIHtcclxuICAgICAgICAgIGNvbnN0IGN4S2V5ID0gdHJhbnNmZXJTdGF0ZS5nZXQoQ1hfS0VZLCB7fSk7XHJcbiAgICAgICAgICBjb25zdCB0cmFuc2ZlcnJlZFN0YXRlU2xpY2UgPSBnZXRTdGF0ZVNsaWNlKFxyXG4gICAgICAgICAgICB0cmFuc2ZlclN0YXRlS2V5cyxcclxuICAgICAgICAgICAgW10sXHJcbiAgICAgICAgICAgIGN4S2V5XHJcbiAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgIHN0YXRlID0gZGVlcE1lcmdlKHt9LCBzdGF0ZSwgdHJhbnNmZXJyZWRTdGF0ZVNsaWNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiByZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xyXG4gICAgfTtcclxuICB9O1xyXG59XHJcbiJdfQ==