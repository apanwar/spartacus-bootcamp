import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { filter, map } from 'rxjs/operators';
import { CmsService } from '../../cms/facade/cms.service';
import { PersonalizationConfig } from '../config/personalization-config';
import * as i0 from "@angular/core";
import * as i1 from "../config/personalization-config";
import * as i2 from "../../cms/facade/cms.service";
var PersonalizationContextService = /** @class */ (function () {
    function PersonalizationContextService(config, cmsService) {
        this.config = config;
        this.cmsService = cmsService;
    }
    PersonalizationContextService.prototype.getPersonalizationContext = function () {
        var _this = this;
        return this.cmsService.getCurrentPage().pipe(filter(Boolean), map(function (page) {
            return page.slots[_this.config.personalization.context.slotPosition];
        }), filter(Boolean), map(function (slot) {
            return slot.components.find(function (i) { return i.uid === _this.config.personalization.context.componentId; });
        }), filter(Boolean), map(function (component) {
            return _this.buildPersonalizationContext(component.properties.script.data);
        }));
    };
    PersonalizationContextService.prototype.buildPersonalizationContext = function (data) {
        var context = JSON.parse(atob(data));
        context.actions.forEach(function (action) {
            Object.keys(action).forEach(function (key) {
                action[key] = atob(action[key]);
            });
        });
        for (var i = 0; i < context.segments.length; i++) {
            context.segments[i] = atob(context.segments[i]);
        }
        return context;
    };
    PersonalizationContextService.ctorParameters = function () { return [
        { type: PersonalizationConfig },
        { type: CmsService }
    ]; };
    PersonalizationContextService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PersonalizationContextService_Factory() { return new PersonalizationContextService(i0.ɵɵinject(i1.PersonalizationConfig), i0.ɵɵinject(i2.CmsService)); }, token: PersonalizationContextService, providedIn: "root" });
    PersonalizationContextService = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], PersonalizationContextService);
    return PersonalizationContextService;
}());
export { PersonalizationContextService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc29uYWxpemF0aW9uLWNvbnRleHQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9wZXJzb25hbGl6YXRpb24vc2VydmljZXMvcGVyc29uYWxpemF0aW9uLWNvbnRleHQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUkxRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7OztBQU16RTtJQUNFLHVDQUNZLE1BQTZCLEVBQzdCLFVBQXNCO1FBRHRCLFdBQU0sR0FBTixNQUFNLENBQXVCO1FBQzdCLGVBQVUsR0FBVixVQUFVLENBQVk7SUFDL0IsQ0FBQztJQUVKLGlFQUF5QixHQUF6QjtRQUFBLGlCQWtCQztRQWpCQyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLENBQUMsSUFBSSxDQUMxQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQ2YsR0FBRyxDQUNELFVBQUMsSUFBVTtZQUNULE9BQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO1FBQTVELENBQTRELENBQy9ELEVBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUNmLEdBQUcsQ0FBQyxVQUFDLElBQXFCO1lBQ3hCLE9BQUEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQ2xCLFVBQUMsQ0FBQyxJQUFLLE9BQUEsQ0FBQyxDQUFDLEdBQUcsS0FBSyxLQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUF6RCxDQUF5RCxDQUNqRTtRQUZELENBRUMsQ0FDRixFQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFDZixHQUFHLENBQUMsVUFBQyxTQUFtQztZQUN0QyxPQUFBLEtBQUksQ0FBQywyQkFBMkIsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFBbEUsQ0FBa0UsQ0FDbkUsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVPLG1FQUEyQixHQUFuQyxVQUFvQyxJQUFZO1FBQzlDLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDdkMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBQyxNQUFNO1lBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsR0FBRztnQkFDOUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNsQyxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0gsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2hELE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNqRDtRQUNELE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7O2dCQW5DbUIscUJBQXFCO2dCQUNqQixVQUFVOzs7SUFIdkIsNkJBQTZCO1FBSHpDLFVBQVUsQ0FBQztZQUNWLFVBQVUsRUFBRSxNQUFNO1NBQ25CLENBQUM7T0FDVyw2QkFBNkIsQ0FzQ3pDO3dDQW5ERDtDQW1EQyxBQXRDRCxJQXNDQztTQXRDWSw2QkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZmlsdGVyLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IENtc1NlcnZpY2UgfSBmcm9tICcuLi8uLi9jbXMvZmFjYWRlL2Ntcy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ29udGVudFNsb3RDb21wb25lbnREYXRhIH0gZnJvbSAnLi4vLi4vY21zL21vZGVsL2NvbnRlbnQtc2xvdC1jb21wb25lbnQtZGF0YS5tb2RlbCc7XHJcbmltcG9ydCB7IENvbnRlbnRTbG90RGF0YSB9IGZyb20gJy4uLy4uL2Ntcy9tb2RlbC9jb250ZW50LXNsb3QtZGF0YS5tb2RlbCc7XHJcbmltcG9ydCB7IFBhZ2UgfSBmcm9tICcuLi8uLi9jbXMvbW9kZWwvcGFnZS5tb2RlbCc7XHJcbmltcG9ydCB7IFBlcnNvbmFsaXphdGlvbkNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9wZXJzb25hbGl6YXRpb24tY29uZmlnJztcclxuaW1wb3J0IHsgUGVyc29uYWxpemF0aW9uQ29udGV4dCB9IGZyb20gJy4uL21vZGVsL3BlcnNvbmFsaXphdGlvbi1jb250ZXh0Lm1vZGVsJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQZXJzb25hbGl6YXRpb25Db250ZXh0U2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgY29uZmlnOiBQZXJzb25hbGl6YXRpb25Db25maWcsXHJcbiAgICBwcm90ZWN0ZWQgY21zU2VydmljZTogQ21zU2VydmljZVxyXG4gICkge31cclxuXHJcbiAgZ2V0UGVyc29uYWxpemF0aW9uQ29udGV4dCgpOiBPYnNlcnZhYmxlPFBlcnNvbmFsaXphdGlvbkNvbnRleHQ+IHtcclxuICAgIHJldHVybiB0aGlzLmNtc1NlcnZpY2UuZ2V0Q3VycmVudFBhZ2UoKS5waXBlKFxyXG4gICAgICBmaWx0ZXIoQm9vbGVhbiksXHJcbiAgICAgIG1hcChcclxuICAgICAgICAocGFnZTogUGFnZSkgPT5cclxuICAgICAgICAgIHBhZ2Uuc2xvdHNbdGhpcy5jb25maWcucGVyc29uYWxpemF0aW9uLmNvbnRleHQuc2xvdFBvc2l0aW9uXVxyXG4gICAgICApLFxyXG4gICAgICBmaWx0ZXIoQm9vbGVhbiksXHJcbiAgICAgIG1hcCgoc2xvdDogQ29udGVudFNsb3REYXRhKSA9PlxyXG4gICAgICAgIHNsb3QuY29tcG9uZW50cy5maW5kKFxyXG4gICAgICAgICAgKGkpID0+IGkudWlkID09PSB0aGlzLmNvbmZpZy5wZXJzb25hbGl6YXRpb24uY29udGV4dC5jb21wb25lbnRJZFxyXG4gICAgICAgIClcclxuICAgICAgKSxcclxuICAgICAgZmlsdGVyKEJvb2xlYW4pLFxyXG4gICAgICBtYXAoKGNvbXBvbmVudDogQ29udGVudFNsb3RDb21wb25lbnREYXRhKSA9PlxyXG4gICAgICAgIHRoaXMuYnVpbGRQZXJzb25hbGl6YXRpb25Db250ZXh0KGNvbXBvbmVudC5wcm9wZXJ0aWVzLnNjcmlwdC5kYXRhKVxyXG4gICAgICApXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBidWlsZFBlcnNvbmFsaXphdGlvbkNvbnRleHQoZGF0YTogc3RyaW5nKTogUGVyc29uYWxpemF0aW9uQ29udGV4dCB7XHJcbiAgICBjb25zdCBjb250ZXh0ID0gSlNPTi5wYXJzZShhdG9iKGRhdGEpKTtcclxuICAgIGNvbnRleHQuYWN0aW9ucy5mb3JFYWNoKChhY3Rpb24pID0+IHtcclxuICAgICAgT2JqZWN0LmtleXMoYWN0aW9uKS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgICBhY3Rpb25ba2V5XSA9IGF0b2IoYWN0aW9uW2tleV0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250ZXh0LnNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnRleHQuc2VnbWVudHNbaV0gPSBhdG9iKGNvbnRleHQuc2VnbWVudHNbaV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbnRleHQ7XHJcbiAgfVxyXG59XHJcbiJdfQ==