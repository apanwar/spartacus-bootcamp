import { __extends } from "tslib";
import { StateUtils } from '../../../state/utils/index';
import { ANONYMOUS_CONSENTS } from '../anonymous-consents-state';
export var LOAD_ANONYMOUS_CONSENT_TEMPLATES = '[Anonymous Consents] Load Anonymous Consent Templates';
export var LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS = '[Anonymous Consents] Load Anonymous Consent Templates Success';
export var LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL = '[Anonymous Consents] Load Anonymous Consent Templates Fail';
export var RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES = '[Anonymous Consents] Reset Load Anonymous Consent Templates';
export var GET_ALL_ANONYMOUS_CONSENTS = '[Anonymous Consents] Get All Anonymous Consents';
export var GET_ANONYMOUS_CONSENT = '[Anonymous Consents] Get Anonymous Consent';
export var SET_ANONYMOUS_CONSENTS = '[Anonymous Consents] Set Anonymous Consents';
export var GIVE_ANONYMOUS_CONSENT = '[Anonymous Consents] Give Anonymous Consent';
export var WITHDRAW_ANONYMOUS_CONSENT = '[Anonymous Consents] Withdraw Anonymous Consent';
export var TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED = '[Anonymous Consents] Toggle Anonymous Consents Banner Dismissed';
export var TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED = '[Anonymous Consents] Anonymous Consent Templates Updated';
var LoadAnonymousConsentTemplates = /** @class */ (function (_super) {
    __extends(LoadAnonymousConsentTemplates, _super);
    function LoadAnonymousConsentTemplates() {
        var _this = _super.call(this, ANONYMOUS_CONSENTS) || this;
        _this.type = LOAD_ANONYMOUS_CONSENT_TEMPLATES;
        return _this;
    }
    return LoadAnonymousConsentTemplates;
}(StateUtils.LoaderLoadAction));
export { LoadAnonymousConsentTemplates };
var LoadAnonymousConsentTemplatesSuccess = /** @class */ (function (_super) {
    __extends(LoadAnonymousConsentTemplatesSuccess, _super);
    function LoadAnonymousConsentTemplatesSuccess(payload) {
        var _this = _super.call(this, ANONYMOUS_CONSENTS) || this;
        _this.payload = payload;
        _this.type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS;
        return _this;
    }
    return LoadAnonymousConsentTemplatesSuccess;
}(StateUtils.LoaderSuccessAction));
export { LoadAnonymousConsentTemplatesSuccess };
var LoadAnonymousConsentTemplatesFail = /** @class */ (function (_super) {
    __extends(LoadAnonymousConsentTemplatesFail, _super);
    function LoadAnonymousConsentTemplatesFail(payload) {
        var _this = _super.call(this, ANONYMOUS_CONSENTS, payload) || this;
        _this.type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL;
        return _this;
    }
    return LoadAnonymousConsentTemplatesFail;
}(StateUtils.LoaderFailAction));
export { LoadAnonymousConsentTemplatesFail };
var ResetLoadAnonymousConsentTemplates = /** @class */ (function (_super) {
    __extends(ResetLoadAnonymousConsentTemplates, _super);
    function ResetLoadAnonymousConsentTemplates() {
        var _this = _super.call(this, ANONYMOUS_CONSENTS) || this;
        _this.type = RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES;
        return _this;
    }
    return ResetLoadAnonymousConsentTemplates;
}(StateUtils.LoaderResetAction));
export { ResetLoadAnonymousConsentTemplates };
var GetAllAnonymousConsents = /** @class */ (function () {
    function GetAllAnonymousConsents() {
        this.type = GET_ALL_ANONYMOUS_CONSENTS;
    }
    return GetAllAnonymousConsents;
}());
export { GetAllAnonymousConsents };
var GetAnonymousConsent = /** @class */ (function () {
    function GetAnonymousConsent(templateCode) {
        this.templateCode = templateCode;
        this.type = GET_ANONYMOUS_CONSENT;
    }
    return GetAnonymousConsent;
}());
export { GetAnonymousConsent };
var SetAnonymousConsents = /** @class */ (function () {
    function SetAnonymousConsents(payload) {
        this.payload = payload;
        this.type = SET_ANONYMOUS_CONSENTS;
    }
    return SetAnonymousConsents;
}());
export { SetAnonymousConsents };
var GiveAnonymousConsent = /** @class */ (function () {
    function GiveAnonymousConsent(templateCode) {
        this.templateCode = templateCode;
        this.type = GIVE_ANONYMOUS_CONSENT;
    }
    return GiveAnonymousConsent;
}());
export { GiveAnonymousConsent };
var WithdrawAnonymousConsent = /** @class */ (function () {
    function WithdrawAnonymousConsent(templateCode) {
        this.templateCode = templateCode;
        this.type = WITHDRAW_ANONYMOUS_CONSENT;
    }
    return WithdrawAnonymousConsent;
}());
export { WithdrawAnonymousConsent };
var ToggleAnonymousConsentsBannerDissmissed = /** @class */ (function () {
    function ToggleAnonymousConsentsBannerDissmissed(dismissed) {
        this.dismissed = dismissed;
        this.type = TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED;
    }
    return ToggleAnonymousConsentsBannerDissmissed;
}());
export { ToggleAnonymousConsentsBannerDissmissed };
var ToggleAnonymousConsentTemplatesUpdated = /** @class */ (function () {
    function ToggleAnonymousConsentTemplatesUpdated(updated) {
        this.updated = updated;
        this.type = TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED;
    }
    return ToggleAnonymousConsentTemplatesUpdated;
}());
export { ToggleAnonymousConsentTemplatesUpdated };
//# sourceMappingURL=data:application/json;base64,