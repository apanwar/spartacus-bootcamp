import { __assign } from "tslib";
import { InjectionToken } from '@angular/core';
import { combineReducers, } from '@ngrx/store';
import { AuthActions } from '../../../auth/index';
import { SiteContextActions } from '../../../site-context/index';
import { loaderReducer } from '../../../state/utils/loader/loader.reducer';
import { ANONYMOUS_CONSENTS, } from '../anonymous-consents-state';
import * as fromAnonymousConsentsBanner from './anonymous-consents-banner.reducer';
import * as fromAnonymousConsentsUpdate from './anonymous-consents-update.reducer';
import * as fromAnonymousConsents from './anonymous-consents.reducer';
export function getReducers() {
    return {
        templates: loaderReducer(ANONYMOUS_CONSENTS),
        consents: fromAnonymousConsents.reducer,
        ui: combineReducers({
            bannerDismissed: fromAnonymousConsentsBanner.reducer,
            updated: fromAnonymousConsentsUpdate.reducer,
        }),
    };
}
export var reducerToken = new InjectionToken('AnonymousConsentsReducers');
export var reducerProvider = {
    provide: reducerToken,
    useFactory: getReducers,
};
export function clearAnonymousConsentTemplates(reducer) {
    return function (state, action) {
        if (action.type === AuthActions.LOGOUT ||
            action.type === SiteContextActions.LANGUAGE_CHANGE) {
            state = __assign(__assign({}, state), { templates: undefined });
        }
        return reducer(state, action);
    };
}
export var metaReducers = [
    clearAnonymousConsentTemplates,
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvYW5vbnltb3VzLWNvbnNlbnRzL3N0b3JlL3JlZHVjZXJzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQ3pELE9BQU8sRUFJTCxlQUFlLEdBRWhCLE1BQU0sYUFBYSxDQUFDO0FBQ3JCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVsRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDM0UsT0FBTyxFQUVMLGtCQUFrQixHQUNuQixNQUFNLDZCQUE2QixDQUFDO0FBQ3JDLE9BQU8sS0FBSywyQkFBMkIsTUFBTSxxQ0FBcUMsQ0FBQztBQUNuRixPQUFPLEtBQUssMkJBQTJCLE1BQU0scUNBQXFDLENBQUM7QUFDbkYsT0FBTyxLQUFLLHFCQUFxQixNQUFNLDhCQUE4QixDQUFDO0FBRXRFLE1BQU0sVUFBVSxXQUFXO0lBQ3pCLE9BQU87UUFDTCxTQUFTLEVBQUUsYUFBYSxDQUFvQixrQkFBa0IsQ0FBQztRQUMvRCxRQUFRLEVBQUUscUJBQXFCLENBQUMsT0FBTztRQUN2QyxFQUFFLEVBQUUsZUFBZSxDQUFDO1lBQ2xCLGVBQWUsRUFBRSwyQkFBMkIsQ0FBQyxPQUFPO1lBQ3BELE9BQU8sRUFBRSwyQkFBMkIsQ0FBQyxPQUFPO1NBQzdDLENBQUM7S0FDSCxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sQ0FBQyxJQUFNLFlBQVksR0FFcEIsSUFBSSxjQUFjLENBQ3JCLDJCQUEyQixDQUM1QixDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sZUFBZSxHQUFhO0lBQ3ZDLE9BQU8sRUFBRSxZQUFZO0lBQ3JCLFVBQVUsRUFBRSxXQUFXO0NBQ3hCLENBQUM7QUFFRixNQUFNLFVBQVUsOEJBQThCLENBQzVDLE9BQXNEO0lBRXRELE9BQU8sVUFBVSxLQUFLLEVBQUUsTUFBTTtRQUM1QixJQUNFLE1BQU0sQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDLE1BQU07WUFDbEMsTUFBTSxDQUFDLElBQUksS0FBSyxrQkFBa0IsQ0FBQyxlQUFlLEVBQ2xEO1lBQ0EsS0FBSyx5QkFDQSxLQUFLLEtBQ1IsU0FBUyxFQUFFLFNBQVMsR0FDckIsQ0FBQztTQUNIO1FBQ0QsT0FBTyxPQUFPLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2hDLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLENBQUMsSUFBTSxZQUFZLEdBQXVCO0lBQzlDLDhCQUE4QjtDQUMvQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIFByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7XHJcbiAgQWN0aW9uLFxyXG4gIEFjdGlvblJlZHVjZXIsXHJcbiAgQWN0aW9uUmVkdWNlck1hcCxcclxuICBjb21iaW5lUmVkdWNlcnMsXHJcbiAgTWV0YVJlZHVjZXIsXHJcbn0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5pbXBvcnQgeyBBdXRoQWN0aW9ucyB9IGZyb20gJy4uLy4uLy4uL2F1dGgvaW5kZXgnO1xyXG5pbXBvcnQgeyBDb25zZW50VGVtcGxhdGUgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9jb25zZW50Lm1vZGVsJztcclxuaW1wb3J0IHsgU2l0ZUNvbnRleHRBY3Rpb25zIH0gZnJvbSAnLi4vLi4vLi4vc2l0ZS1jb250ZXh0L2luZGV4JztcclxuaW1wb3J0IHsgbG9hZGVyUmVkdWNlciB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2xvYWRlci9sb2FkZXIucmVkdWNlcic7XHJcbmltcG9ydCB7XHJcbiAgQW5vbnltb3VzQ29uc2VudHNTdGF0ZSxcclxuICBBTk9OWU1PVVNfQ09OU0VOVFMsXHJcbn0gZnJvbSAnLi4vYW5vbnltb3VzLWNvbnNlbnRzLXN0YXRlJztcclxuaW1wb3J0ICogYXMgZnJvbUFub255bW91c0NvbnNlbnRzQmFubmVyIGZyb20gJy4vYW5vbnltb3VzLWNvbnNlbnRzLWJhbm5lci5yZWR1Y2VyJztcclxuaW1wb3J0ICogYXMgZnJvbUFub255bW91c0NvbnNlbnRzVXBkYXRlIGZyb20gJy4vYW5vbnltb3VzLWNvbnNlbnRzLXVwZGF0ZS5yZWR1Y2VyJztcclxuaW1wb3J0ICogYXMgZnJvbUFub255bW91c0NvbnNlbnRzIGZyb20gJy4vYW5vbnltb3VzLWNvbnNlbnRzLnJlZHVjZXInO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlZHVjZXJzKCk6IEFjdGlvblJlZHVjZXJNYXA8QW5vbnltb3VzQ29uc2VudHNTdGF0ZT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICB0ZW1wbGF0ZXM6IGxvYWRlclJlZHVjZXI8Q29uc2VudFRlbXBsYXRlW10+KEFOT05ZTU9VU19DT05TRU5UUyksXHJcbiAgICBjb25zZW50czogZnJvbUFub255bW91c0NvbnNlbnRzLnJlZHVjZXIsXHJcbiAgICB1aTogY29tYmluZVJlZHVjZXJzKHtcclxuICAgICAgYmFubmVyRGlzbWlzc2VkOiBmcm9tQW5vbnltb3VzQ29uc2VudHNCYW5uZXIucmVkdWNlcixcclxuICAgICAgdXBkYXRlZDogZnJvbUFub255bW91c0NvbnNlbnRzVXBkYXRlLnJlZHVjZXIsXHJcbiAgICB9KSxcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcmVkdWNlclRva2VuOiBJbmplY3Rpb25Ub2tlbjxBY3Rpb25SZWR1Y2VyTWFwPFxyXG4gIEFub255bW91c0NvbnNlbnRzU3RhdGVcclxuPj4gPSBuZXcgSW5qZWN0aW9uVG9rZW48QWN0aW9uUmVkdWNlck1hcDxBbm9ueW1vdXNDb25zZW50c1N0YXRlPj4oXHJcbiAgJ0Fub255bW91c0NvbnNlbnRzUmVkdWNlcnMnXHJcbik7XHJcblxyXG5leHBvcnQgY29uc3QgcmVkdWNlclByb3ZpZGVyOiBQcm92aWRlciA9IHtcclxuICBwcm92aWRlOiByZWR1Y2VyVG9rZW4sXHJcbiAgdXNlRmFjdG9yeTogZ2V0UmVkdWNlcnMsXHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzKFxyXG4gIHJlZHVjZXI6IEFjdGlvblJlZHVjZXI8QW5vbnltb3VzQ29uc2VudHNTdGF0ZSwgQWN0aW9uPlxyXG4pOiBBY3Rpb25SZWR1Y2VyPEFub255bW91c0NvbnNlbnRzU3RhdGUsIEFjdGlvbj4ge1xyXG4gIHJldHVybiBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikge1xyXG4gICAgaWYgKFxyXG4gICAgICBhY3Rpb24udHlwZSA9PT0gQXV0aEFjdGlvbnMuTE9HT1VUIHx8XHJcbiAgICAgIGFjdGlvbi50eXBlID09PSBTaXRlQ29udGV4dEFjdGlvbnMuTEFOR1VBR0VfQ0hBTkdFXHJcbiAgICApIHtcclxuICAgICAgc3RhdGUgPSB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgdGVtcGxhdGVzOiB1bmRlZmluZWQsXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVkdWNlcihzdGF0ZSwgYWN0aW9uKTtcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgbWV0YVJlZHVjZXJzOiBNZXRhUmVkdWNlcjxhbnk+W10gPSBbXHJcbiAgY2xlYXJBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzLFxyXG5dO1xyXG4iXX0=