import { __decorate } from "tslib";
import { Location } from '@angular/common';
import { Injectable, Injector, OnDestroy } from '@angular/core';
import { NavigationCancel, NavigationEnd, NavigationError, NavigationStart, Router, } from '@angular/router';
import { Subscription } from 'rxjs';
import { filter } from 'rxjs/operators';
import { SiteContextParamsService } from './site-context-params.service';
import { SiteContextUrlSerializer } from './site-context-url-serializer';
import * as i0 from "@angular/core";
import * as i1 from "./site-context-params.service";
import * as i2 from "./site-context-url-serializer";
var SiteContextRoutesHandler = /** @class */ (function () {
    function SiteContextRoutesHandler(siteContextParams, serializer, injector) {
        this.siteContextParams = siteContextParams;
        this.serializer = serializer;
        this.injector = injector;
        this.subscription = new Subscription();
        this.contextValues = {};
        /**
         * Tells whether there is a pending navigation at the moment, so we can avoid an infinite loop caused by the cyclic dependency:
         * - `subscribeChanges` method triggers a navigation on update of site context state
         * - `subscribeRouting` method updates the site context state on navigation
         */
        this.isNavigating = false;
    }
    /**
     * Initializes the two-way synchronization between the site context state and the URL.
     *
     * @returns Promise that is resolved when the site context state is initialized (updated for the first time) based on the URL.
     */
    SiteContextRoutesHandler.prototype.init = function () {
        var _this = this;
        return new Promise(function (resolve) {
            _this.router = _this.injector.get(Router);
            _this.location = _this.injector.get(Location);
            var routingParams = _this.siteContextParams.getUrlEncodingParameters();
            if (routingParams.length) {
                _this.subscribeChanges(routingParams);
                _this.subscribeRouting(resolve);
            }
            else {
                resolve();
            }
        });
    };
    /**
     * After each change of the site context state, it modifies the current URL in place.
     * But it happens only for the parameters configured to be persisted in the URL.
     */
    SiteContextRoutesHandler.prototype.subscribeChanges = function (params) {
        var _this = this;
        params.forEach(function (param) {
            var service = _this.siteContextParams.getSiteContextService(param);
            if (service) {
                _this.subscription.add(service.getActive().subscribe(function (value) {
                    if (!_this.isNavigating &&
                        _this.contextValues[param] &&
                        _this.contextValues[param] !== value) {
                        var parsed = _this.router.parseUrl(_this.router.url);
                        var serialized = _this.router.serializeUrl(parsed);
                        _this.location.replaceState(serialized);
                    }
                    _this.contextValues[param] = value;
                }));
            }
        });
    };
    /**
     * After each Angular NavigationStart event it updates the site context state based on
     * site context params encoded in the anticipated URL.
     *
     * In particular, it's responsible for initializing the state of the context params
     * on page start, reading the values from the URL.
     *
     * @param onContextInitialized notify that the initialization of the context was done based on the URL
     */
    SiteContextRoutesHandler.prototype.subscribeRouting = function (onContextInitialized) {
        var _this = this;
        var contextInitialized = false;
        this.subscription.add(this.router.events
            .pipe(filter(function (event) {
            return event instanceof NavigationStart ||
                event instanceof NavigationEnd ||
                event instanceof NavigationError ||
                event instanceof NavigationCancel;
        }))
            .subscribe(function (event) {
            _this.isNavigating = event instanceof NavigationStart;
            if (_this.isNavigating) {
                _this.setContextParamsFromRoute(event.url);
                if (!contextInitialized) {
                    contextInitialized = true;
                    onContextInitialized();
                }
            }
        }));
    };
    /**
     * Updates the site context state based on the context params encoded in the given URL
     *
     * @param url URL with encoded context params
     */
    SiteContextRoutesHandler.prototype.setContextParamsFromRoute = function (url) {
        var _this = this;
        var params = this.serializer.urlExtractContextParameters(url).params;
        Object.keys(params).forEach(function (param) {
            return _this.siteContextParams.setValue(param, params[param]);
        });
    };
    SiteContextRoutesHandler.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    SiteContextRoutesHandler.ctorParameters = function () { return [
        { type: SiteContextParamsService },
        { type: SiteContextUrlSerializer },
        { type: Injector }
    ]; };
    SiteContextRoutesHandler.ɵprov = i0.ɵɵdefineInjectable({ factory: function SiteContextRoutesHandler_Factory() { return new SiteContextRoutesHandler(i0.ɵɵinject(i1.SiteContextParamsService), i0.ɵɵinject(i2.SiteContextUrlSerializer), i0.ɵɵinject(i0.INJECTOR)); }, token: SiteContextRoutesHandler, providedIn: "root" });
    SiteContextRoutesHandler = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], SiteContextRoutesHandler);
    return SiteContextRoutesHandler;
}());
export { SiteContextRoutesHandler };
//# sourceMappingURL=data:application/json;base64,