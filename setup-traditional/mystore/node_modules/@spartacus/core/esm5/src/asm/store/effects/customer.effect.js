import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { makeErrorSerializable } from '../../../util/serialization-utils';
import { AsmConnector } from '../../connectors/asm.connector';
import { AsmActions } from '../actions/index';
var CustomerEffects = /** @class */ (function () {
    function CustomerEffects(actions$, asmConnector) {
        var _this = this;
        this.actions$ = actions$;
        this.asmConnector = asmConnector;
        this.customerSearch$ = this.actions$.pipe(ofType(AsmActions.CUSTOMER_SEARCH), map(function (action) { return action.payload; }), switchMap(function (options) {
            return _this.asmConnector.customerSearch(options).pipe(map(function (customerSearchResults) {
                return new AsmActions.CustomerSearchSuccess(customerSearchResults);
            }), catchError(function (error) {
                return of(new AsmActions.CustomerSearchFail(makeErrorSerializable(error)));
            }));
        }));
    }
    CustomerEffects.ctorParameters = function () { return [
        { type: Actions },
        { type: AsmConnector }
    ]; };
    __decorate([
        Effect()
    ], CustomerEffects.prototype, "customerSearch$", void 0);
    CustomerEffects = __decorate([
        Injectable()
    ], CustomerEffects);
    return CustomerEffects;
}());
export { CustomerEffects };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tZXIuZWZmZWN0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2FzbS9zdG9yZS9lZmZlY3RzL2N1c3RvbWVyLmVmZmVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEQsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUMxRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFOUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRzlDO0lBaUJFLHlCQUFvQixRQUFpQixFQUFVLFlBQTBCO1FBQXpFLGlCQUE2RTtRQUF6RCxhQUFRLEdBQVIsUUFBUSxDQUFTO1FBQVUsaUJBQVksR0FBWixZQUFZLENBQWM7UUFmekUsb0JBQWUsR0FBMEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ3pFLE1BQU0sQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLEVBQ2xDLEdBQUcsQ0FBQyxVQUFDLE1BQWlDLElBQUssT0FBQSxNQUFNLENBQUMsT0FBTyxFQUFkLENBQWMsQ0FBQyxFQUMxRCxTQUFTLENBQUMsVUFBQyxPQUFPO1lBQ2hCLE9BQUEsS0FBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUM1QyxHQUFHLENBQUMsVUFBQyxxQkFBeUM7Z0JBQzVDLE9BQU8sSUFBSSxVQUFVLENBQUMscUJBQXFCLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUNyRSxDQUFDLENBQUMsRUFDRixVQUFVLENBQUMsVUFBQyxLQUFLO2dCQUNmLE9BQUEsRUFBRSxDQUFDLElBQUksVUFBVSxDQUFDLGtCQUFrQixDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFBbkUsQ0FBbUUsQ0FDcEUsQ0FDRjtRQVBELENBT0MsQ0FDRixDQUNGLENBQUM7SUFFMEUsQ0FBQzs7Z0JBQS9DLE9BQU87Z0JBQXdCLFlBQVk7O0lBZnpFO1FBREMsTUFBTSxFQUFFOzREQWNQO0lBZlMsZUFBZTtRQUQzQixVQUFVLEVBQUU7T0FDQSxlQUFlLENBa0IzQjtJQUFELHNCQUFDO0NBQUEsQUFsQkQsSUFrQkM7U0FsQlksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQWN0aW9ucywgRWZmZWN0LCBvZlR5cGUgfSBmcm9tICdAbmdyeC9lZmZlY3RzJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgY2F0Y2hFcnJvciwgbWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IG1ha2VFcnJvclNlcmlhbGl6YWJsZSB9IGZyb20gJy4uLy4uLy4uL3V0aWwvc2VyaWFsaXphdGlvbi11dGlscyc7XHJcbmltcG9ydCB7IEFzbUNvbm5lY3RvciB9IGZyb20gJy4uLy4uL2Nvbm5lY3RvcnMvYXNtLmNvbm5lY3Rvcic7XHJcbmltcG9ydCB7IEN1c3RvbWVyU2VhcmNoUGFnZSB9IGZyb20gJy4uLy4uL21vZGVscy9hc20ubW9kZWxzJztcclxuaW1wb3J0IHsgQXNtQWN0aW9ucyB9IGZyb20gJy4uL2FjdGlvbnMvaW5kZXgnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQ3VzdG9tZXJFZmZlY3RzIHtcclxuICBARWZmZWN0KClcclxuICBjdXN0b21lclNlYXJjaCQ6IE9ic2VydmFibGU8QXNtQWN0aW9ucy5DdXN0b21lckFjdGlvbj4gPSB0aGlzLmFjdGlvbnMkLnBpcGUoXHJcbiAgICBvZlR5cGUoQXNtQWN0aW9ucy5DVVNUT01FUl9TRUFSQ0gpLFxyXG4gICAgbWFwKChhY3Rpb246IEFzbUFjdGlvbnMuQ3VzdG9tZXJTZWFyY2gpID0+IGFjdGlvbi5wYXlsb2FkKSxcclxuICAgIHN3aXRjaE1hcCgob3B0aW9ucykgPT5cclxuICAgICAgdGhpcy5hc21Db25uZWN0b3IuY3VzdG9tZXJTZWFyY2gob3B0aW9ucykucGlwZShcclxuICAgICAgICBtYXAoKGN1c3RvbWVyU2VhcmNoUmVzdWx0czogQ3VzdG9tZXJTZWFyY2hQYWdlKSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gbmV3IEFzbUFjdGlvbnMuQ3VzdG9tZXJTZWFyY2hTdWNjZXNzKGN1c3RvbWVyU2VhcmNoUmVzdWx0cyk7XHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3IpID0+XHJcbiAgICAgICAgICBvZihuZXcgQXNtQWN0aW9ucy5DdXN0b21lclNlYXJjaEZhaWwobWFrZUVycm9yU2VyaWFsaXphYmxlKGVycm9yKSkpXHJcbiAgICAgICAgKVxyXG4gICAgICApXHJcbiAgICApXHJcbiAgKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBhY3Rpb25zJDogQWN0aW9ucywgcHJpdmF0ZSBhc21Db25uZWN0b3I6IEFzbUNvbm5lY3Rvcikge31cclxufVxyXG4iXX0=