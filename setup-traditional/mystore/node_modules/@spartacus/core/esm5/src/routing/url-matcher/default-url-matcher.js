import { inject, InjectionToken } from '@angular/core';
import { RoutingConfigService } from '../configurable-routes';
import { UrlMatcherService } from '../services/url-matcher.service';
export function getDefaultUrlMatcherFactory(routingConfigService, urlMatcherService) {
    var factory = function (route) {
        var routeName = route.data && route.data['cxRoute'];
        var routeConfig = routingConfigService.getRouteConfig(routeName);
        var paths = (routeConfig && routeConfig.paths) || [];
        return urlMatcherService.getFromPaths(paths);
    };
    return factory;
}
/**
 * Injection token with url matcher factory for spartacus routes containing property `data.cxRoute`.
 * The provided url matcher matches the configured `paths` from routing config.
 *
 * If this matcher doesn't fit the requirements, it can be replaced with custom matcher
 * or additional matchers can be added for a specific route. See for example PRODUCT_DETAILS_URL_MATCHER.
 *
 * Note: Matchers will "match" a route, but do not contribute to the creation of the route, nor do they guard routes.
 */
export var DEFAULT_URL_MATCHER = new InjectionToken('DEFAULT_URL_MATCHER', {
    providedIn: 'root',
    factory: function () {
        return getDefaultUrlMatcherFactory(inject(RoutingConfigService), inject(UrlMatcherService));
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC11cmwtbWF0Y2hlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9yb3V0aW5nL3VybC1tYXRjaGVyL2RlZmF1bHQtdXJsLW1hdGNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFHcEUsTUFBTSxVQUFVLDJCQUEyQixDQUN6QyxvQkFBMEMsRUFDMUMsaUJBQW9DO0lBRXBDLElBQU0sT0FBTyxHQUFHLFVBQUMsS0FBWTtRQUMzQixJQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdEQsSUFBTSxXQUFXLEdBQUcsb0JBQW9CLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ25FLElBQU0sS0FBSyxHQUFHLENBQUMsV0FBVyxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdkQsT0FBTyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0MsQ0FBQyxDQUFDO0lBQ0YsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQztBQUVEOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxDQUFDLElBQU0sbUJBQW1CLEdBQUcsSUFBSSxjQUFjLENBQ25ELHFCQUFxQixFQUNyQjtJQUNFLFVBQVUsRUFBRSxNQUFNO0lBQ2xCLE9BQU8sRUFBRTtRQUNQLE9BQUEsMkJBQTJCLENBQ3pCLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxFQUM1QixNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FDMUI7SUFIRCxDQUdDO0NBQ0osQ0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5qZWN0LCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IFJvdXRpbmdDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi4vY29uZmlndXJhYmxlLXJvdXRlcyc7XHJcbmltcG9ydCB7IFVybE1hdGNoZXJTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvdXJsLW1hdGNoZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IFVybE1hdGNoZXJGYWN0b3J5IH0gZnJvbSAnLi91cmwtbWF0Y2hlci1mYWN0b3J5JztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0VXJsTWF0Y2hlckZhY3RvcnkoXHJcbiAgcm91dGluZ0NvbmZpZ1NlcnZpY2U6IFJvdXRpbmdDb25maWdTZXJ2aWNlLFxyXG4gIHVybE1hdGNoZXJTZXJ2aWNlOiBVcmxNYXRjaGVyU2VydmljZVxyXG4pOiBVcmxNYXRjaGVyRmFjdG9yeSB7XHJcbiAgY29uc3QgZmFjdG9yeSA9IChyb3V0ZTogUm91dGUpID0+IHtcclxuICAgIGNvbnN0IHJvdXRlTmFtZSA9IHJvdXRlLmRhdGEgJiYgcm91dGUuZGF0YVsnY3hSb3V0ZSddO1xyXG4gICAgY29uc3Qgcm91dGVDb25maWcgPSByb3V0aW5nQ29uZmlnU2VydmljZS5nZXRSb3V0ZUNvbmZpZyhyb3V0ZU5hbWUpO1xyXG4gICAgY29uc3QgcGF0aHMgPSAocm91dGVDb25maWcgJiYgcm91dGVDb25maWcucGF0aHMpIHx8IFtdO1xyXG4gICAgcmV0dXJuIHVybE1hdGNoZXJTZXJ2aWNlLmdldEZyb21QYXRocyhwYXRocyk7XHJcbiAgfTtcclxuICByZXR1cm4gZmFjdG9yeTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEluamVjdGlvbiB0b2tlbiB3aXRoIHVybCBtYXRjaGVyIGZhY3RvcnkgZm9yIHNwYXJ0YWN1cyByb3V0ZXMgY29udGFpbmluZyBwcm9wZXJ0eSBgZGF0YS5jeFJvdXRlYC5cclxuICogVGhlIHByb3ZpZGVkIHVybCBtYXRjaGVyIG1hdGNoZXMgdGhlIGNvbmZpZ3VyZWQgYHBhdGhzYCBmcm9tIHJvdXRpbmcgY29uZmlnLlxyXG4gKlxyXG4gKiBJZiB0aGlzIG1hdGNoZXIgZG9lc24ndCBmaXQgdGhlIHJlcXVpcmVtZW50cywgaXQgY2FuIGJlIHJlcGxhY2VkIHdpdGggY3VzdG9tIG1hdGNoZXJcclxuICogb3IgYWRkaXRpb25hbCBtYXRjaGVycyBjYW4gYmUgYWRkZWQgZm9yIGEgc3BlY2lmaWMgcm91dGUuIFNlZSBmb3IgZXhhbXBsZSBQUk9EVUNUX0RFVEFJTFNfVVJMX01BVENIRVIuXHJcbiAqXHJcbiAqIE5vdGU6IE1hdGNoZXJzIHdpbGwgXCJtYXRjaFwiIGEgcm91dGUsIGJ1dCBkbyBub3QgY29udHJpYnV0ZSB0byB0aGUgY3JlYXRpb24gb2YgdGhlIHJvdXRlLCBub3IgZG8gdGhleSBndWFyZCByb3V0ZXMuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgREVGQVVMVF9VUkxfTUFUQ0hFUiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxVcmxNYXRjaGVyRmFjdG9yeT4oXHJcbiAgJ0RFRkFVTFRfVVJMX01BVENIRVInLFxyXG4gIHtcclxuICAgIHByb3ZpZGVkSW46ICdyb290JyxcclxuICAgIGZhY3Rvcnk6ICgpID0+XHJcbiAgICAgIGdldERlZmF1bHRVcmxNYXRjaGVyRmFjdG9yeShcclxuICAgICAgICBpbmplY3QoUm91dGluZ0NvbmZpZ1NlcnZpY2UpLFxyXG4gICAgICAgIGluamVjdChVcmxNYXRjaGVyU2VydmljZSlcclxuICAgICAgKSxcclxuICB9XHJcbik7XHJcbiJdfQ==