import { __decorate, __read, __spread } from "tslib";
import { Injectable } from '@angular/core';
import { ofType } from '@ngrx/effects';
import { ActionsSubject } from '@ngrx/store';
import { map } from 'rxjs/operators';
import { EventService } from '../../event/event.service';
import { createFrom } from '../../util/create-from';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "../../event/event.service";
/**
 * Registers streams of ngrx actions as events source streams
 */
var StateEventService = /** @class */ (function () {
    function StateEventService(actionsSubject, eventService) {
        this.actionsSubject = actionsSubject;
        this.eventService = eventService;
    }
    /**
     * Registers an event source stream of specific events
     * mapped from a given action type.
     *
     * @param mapping mapping from action to event
     *
     * @returns a teardown function that unregisters the event source
     */
    StateEventService.prototype.register = function (mapping) {
        return this.eventService.register(mapping.event, this.getFromAction(mapping));
    };
    /**
     * Returns a stream of specific events mapped from a specific action.
     * @param mapping mapping from action to event
     */
    StateEventService.prototype.getFromAction = function (mapping) {
        var _this = this;
        return this.actionsSubject
            .pipe(ofType.apply(void 0, __spread([].concat(mapping.action))))
            .pipe(map(function (action) {
            return _this.createEvent(action, mapping.event, mapping.factory);
        }));
    };
    /**
     * Creates an event instance for given class out from the action object.
     * Unless the `factory` parameter is given, the action's `payload` is used
     * as the argument for the event's constructor.
     *
     * @param action instance of an Action
     * @param mapping mapping from action to event
     * @param factory optional function getting an action instance and returning an event instance
     *
     * @returns instance of an Event
     */
    StateEventService.prototype.createEvent = function (action, eventType, factory) {
        var _a;
        return factory
            ? factory(action)
            : createFrom(eventType, (_a = action.payload) !== null && _a !== void 0 ? _a : {});
    };
    StateEventService.ctorParameters = function () { return [
        { type: ActionsSubject },
        { type: EventService }
    ]; };
    StateEventService.ɵprov = i0.ɵɵdefineInjectable({ factory: function StateEventService_Factory() { return new StateEventService(i0.ɵɵinject(i1.ActionsSubject), i0.ɵɵinject(i2.EventService)); }, token: StateEventService, providedIn: "root" });
    StateEventService = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], StateEventService);
    return StateEventService;
}());
export { StateEventService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUtZXZlbnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9zdGF0ZS9ldmVudC9zdGF0ZS1ldmVudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFRLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUU3QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQzs7OztBQUdwRDs7R0FFRztBQUlIO0lBQ0UsMkJBQ1ksY0FBOEIsRUFDOUIsWUFBMEI7UUFEMUIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLGlCQUFZLEdBQVosWUFBWSxDQUFjO0lBQ25DLENBQUM7SUFFSjs7Ozs7OztPQU9HO0lBQ0gsb0NBQVEsR0FBUixVQUFZLE9BQWdDO1FBQzFDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQy9CLE9BQU8sQ0FBQyxLQUFLLEVBQ2IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FDNUIsQ0FBQztJQUNKLENBQUM7SUFFRDs7O09BR0c7SUFDTyx5Q0FBYSxHQUF2QixVQUEyQixPQUFnQztRQUEzRCxpQkFRQztRQVBDLE9BQU8sSUFBSSxDQUFDLGNBQWM7YUFDdkIsSUFBSSxDQUFDLE1BQU0sd0JBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUU7YUFDMUMsSUFBSSxDQUNILEdBQUcsQ0FBQyxVQUFDLE1BQW9DO1lBQ3ZDLE9BQUEsS0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQXhELENBQXdELENBQ3pELENBQ0YsQ0FBQztJQUNOLENBQUM7SUFFRDs7Ozs7Ozs7OztPQVVHO0lBQ08sdUNBQVcsR0FBckIsVUFDRSxNQUF1QyxFQUN2QyxTQUFrQixFQUNsQixPQUE0Qjs7UUFFNUIsT0FBTyxPQUFPO1lBQ1osQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDakIsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLFFBQUUsTUFBTSxDQUFDLE9BQU8sbUNBQUksRUFBRSxDQUFDLENBQUM7SUFDbEQsQ0FBQzs7Z0JBcEQyQixjQUFjO2dCQUNoQixZQUFZOzs7SUFIM0IsaUJBQWlCO1FBSDdCLFVBQVUsQ0FBQztZQUNWLFVBQVUsRUFBRSxNQUFNO1NBQ25CLENBQUM7T0FDVyxpQkFBaUIsQ0F1RDdCOzRCQXRFRDtDQXNFQyxBQXZERCxJQXVEQztTQXZEWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IG9mVHlwZSB9IGZyb20gJ0BuZ3J4L2VmZmVjdHMnO1xyXG5pbXBvcnQgeyBBY3Rpb25zU3ViamVjdCB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEV2ZW50U2VydmljZSB9IGZyb20gJy4uLy4uL2V2ZW50L2V2ZW50LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBjcmVhdGVGcm9tIH0gZnJvbSAnLi4vLi4vdXRpbC9jcmVhdGUtZnJvbSc7XHJcbmltcG9ydCB7IEFjdGlvblRvRXZlbnRNYXBwaW5nIH0gZnJvbSAnLi9hY3Rpb24tdG8tZXZlbnQtbWFwcGluZyc7XHJcblxyXG4vKipcclxuICogUmVnaXN0ZXJzIHN0cmVhbXMgb2YgbmdyeCBhY3Rpb25zIGFzIGV2ZW50cyBzb3VyY2Ugc3RyZWFtc1xyXG4gKi9cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFN0YXRlRXZlbnRTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByb3RlY3RlZCBhY3Rpb25zU3ViamVjdDogQWN0aW9uc1N1YmplY3QsXHJcbiAgICBwcm90ZWN0ZWQgZXZlbnRTZXJ2aWNlOiBFdmVudFNlcnZpY2VcclxuICApIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlZ2lzdGVycyBhbiBldmVudCBzb3VyY2Ugc3RyZWFtIG9mIHNwZWNpZmljIGV2ZW50c1xyXG4gICAqIG1hcHBlZCBmcm9tIGEgZ2l2ZW4gYWN0aW9uIHR5cGUuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gbWFwcGluZyBtYXBwaW5nIGZyb20gYWN0aW9uIHRvIGV2ZW50XHJcbiAgICpcclxuICAgKiBAcmV0dXJucyBhIHRlYXJkb3duIGZ1bmN0aW9uIHRoYXQgdW5yZWdpc3RlcnMgdGhlIGV2ZW50IHNvdXJjZVxyXG4gICAqL1xyXG4gIHJlZ2lzdGVyPFQ+KG1hcHBpbmc6IEFjdGlvblRvRXZlbnRNYXBwaW5nPFQ+KTogKCkgPT4gdm9pZCB7XHJcbiAgICByZXR1cm4gdGhpcy5ldmVudFNlcnZpY2UucmVnaXN0ZXIoXHJcbiAgICAgIG1hcHBpbmcuZXZlbnQsXHJcbiAgICAgIHRoaXMuZ2V0RnJvbUFjdGlvbihtYXBwaW5nKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgYSBzdHJlYW0gb2Ygc3BlY2lmaWMgZXZlbnRzIG1hcHBlZCBmcm9tIGEgc3BlY2lmaWMgYWN0aW9uLlxyXG4gICAqIEBwYXJhbSBtYXBwaW5nIG1hcHBpbmcgZnJvbSBhY3Rpb24gdG8gZXZlbnRcclxuICAgKi9cclxuICBwcm90ZWN0ZWQgZ2V0RnJvbUFjdGlvbjxUPihtYXBwaW5nOiBBY3Rpb25Ub0V2ZW50TWFwcGluZzxUPik6IE9ic2VydmFibGU8VD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuYWN0aW9uc1N1YmplY3RcclxuICAgICAgLnBpcGUob2ZUeXBlKC4uLltdLmNvbmNhdChtYXBwaW5nLmFjdGlvbikpKVxyXG4gICAgICAucGlwZShcclxuICAgICAgICBtYXAoKGFjdGlvbjogeyB0eXBlOiBzdHJpbmc7IHBheWxvYWQ6IFQgfSkgPT5cclxuICAgICAgICAgIHRoaXMuY3JlYXRlRXZlbnQoYWN0aW9uLCBtYXBwaW5nLmV2ZW50LCBtYXBwaW5nLmZhY3RvcnkpXHJcbiAgICAgICAgKVxyXG4gICAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhbiBldmVudCBpbnN0YW5jZSBmb3IgZ2l2ZW4gY2xhc3Mgb3V0IGZyb20gdGhlIGFjdGlvbiBvYmplY3QuXHJcbiAgICogVW5sZXNzIHRoZSBgZmFjdG9yeWAgcGFyYW1ldGVyIGlzIGdpdmVuLCB0aGUgYWN0aW9uJ3MgYHBheWxvYWRgIGlzIHVzZWRcclxuICAgKiBhcyB0aGUgYXJndW1lbnQgZm9yIHRoZSBldmVudCdzIGNvbnN0cnVjdG9yLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGFjdGlvbiBpbnN0YW5jZSBvZiBhbiBBY3Rpb25cclxuICAgKiBAcGFyYW0gbWFwcGluZyBtYXBwaW5nIGZyb20gYWN0aW9uIHRvIGV2ZW50XHJcbiAgICogQHBhcmFtIGZhY3Rvcnkgb3B0aW9uYWwgZnVuY3Rpb24gZ2V0dGluZyBhbiBhY3Rpb24gaW5zdGFuY2UgYW5kIHJldHVybmluZyBhbiBldmVudCBpbnN0YW5jZVxyXG4gICAqXHJcbiAgICogQHJldHVybnMgaW5zdGFuY2Ugb2YgYW4gRXZlbnRcclxuICAgKi9cclxuICBwcm90ZWN0ZWQgY3JlYXRlRXZlbnQ8VD4oXHJcbiAgICBhY3Rpb246IHsgdHlwZTogc3RyaW5nOyBwYXlsb2FkPzogYW55IH0sXHJcbiAgICBldmVudFR5cGU6IFR5cGU8VD4sXHJcbiAgICBmYWN0b3J5PzogKGFjdGlvbjogYW55KSA9PiBUXHJcbiAgKTogVCB7XHJcbiAgICByZXR1cm4gZmFjdG9yeVxyXG4gICAgICA/IGZhY3RvcnkoYWN0aW9uKVxyXG4gICAgICA6IGNyZWF0ZUZyb20oZXZlbnRUeXBlLCBhY3Rpb24ucGF5bG9hZCA/PyB7fSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==