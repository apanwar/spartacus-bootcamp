import { __values } from "tslib";
import { deepMerge } from '../../config/utils/deep-merge';
var OBJECT_SEPARATOR = '.';
export function getStateSliceValue(keys, state) {
    return keys
        .split(OBJECT_SEPARATOR)
        .reduce(function (previous, current) { return (previous ? previous[current] : undefined); }, state);
}
export function createShellObject(key, excludeKeys, value) {
    if (!key || !value || Object.keys(value).length === 0) {
        return {};
    }
    var shell = key.split(OBJECT_SEPARATOR).reduceRight(function (acc, previous) {
        var _a;
        return _a = {}, _a[previous] = acc, _a;
    }, value);
    return handleExclusions(key, excludeKeys, shell);
}
export function getStateSlice(keys, excludeKeys, state) {
    var e_1, _a;
    if (keys && keys.length === 0) {
        return {};
    }
    var stateSlices = {};
    try {
        for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
            var currentKey = keys_1_1.value;
            var stateValue = getStateSliceValue(currentKey, state);
            var shell = createShellObject(currentKey, excludeKeys, stateValue);
            stateSlices = deepMerge(stateSlices, shell);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return stateSlices;
}
export function handleExclusions(key, excludeKeys, value) {
    var e_2, _a;
    var exclusionKeys = getExclusionKeys(key, excludeKeys);
    if (exclusionKeys.length === 0) {
        return value;
    }
    var finalValue = deepMerge({}, value);
    try {
        for (var exclusionKeys_1 = __values(exclusionKeys), exclusionKeys_1_1 = exclusionKeys_1.next(); !exclusionKeys_1_1.done; exclusionKeys_1_1 = exclusionKeys_1.next()) {
            var currentExclusionKey = exclusionKeys_1_1.value;
            var exclusionChunksSplit = currentExclusionKey.split(OBJECT_SEPARATOR);
            var nestedTemp = finalValue;
            for (var i = 0; i < exclusionChunksSplit.length; i++) {
                var currentChunk = exclusionChunksSplit[i];
                // last iteration
                if (i === exclusionChunksSplit.length - 1) {
                    if (nestedTemp && nestedTemp[currentChunk]) {
                        delete nestedTemp[currentChunk];
                    }
                }
                else {
                    nestedTemp = nestedTemp[currentChunk];
                }
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (exclusionKeys_1_1 && !exclusionKeys_1_1.done && (_a = exclusionKeys_1.return)) _a.call(exclusionKeys_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return finalValue;
}
export function getExclusionKeys(key, excludeKeys) {
    var e_3, _a;
    if (!key || !excludeKeys) {
        return [];
    }
    var exclusionKeys = [];
    try {
        for (var excludeKeys_1 = __values(excludeKeys), excludeKeys_1_1 = excludeKeys_1.next(); !excludeKeys_1_1.done; excludeKeys_1_1 = excludeKeys_1.next()) {
            var exclusionKey = excludeKeys_1_1.value;
            if (exclusionKey.includes(key)) {
                exclusionKeys.push(exclusionKey);
            }
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (excludeKeys_1_1 && !excludeKeys_1_1.done && (_a = excludeKeys_1.return)) _a.call(excludeKeys_1);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return exclusionKeys;
}
export function filterKeysByType(keys, type) {
    if (!keys) {
        return [];
    }
    return Object.keys(keys).filter(function (key) { return keys[key] === type; });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXN0YXRlLXNsaWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL3N0YXRlL3V0aWxzL2dldC1zdGF0ZS1zbGljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRzFELElBQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBRTdCLE1BQU0sVUFBVSxrQkFBa0IsQ0FBTyxJQUFZLEVBQUUsS0FBUTtJQUM3RCxPQUFPLElBQUk7U0FDUixLQUFLLENBQUMsZ0JBQWdCLENBQUM7U0FDdkIsTUFBTSxDQUNMLFVBQUMsUUFBUSxFQUFFLE9BQU8sSUFBSyxPQUFBLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUExQyxDQUEwQyxFQUNqRSxLQUFLLENBQ04sQ0FBQztBQUNOLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQy9CLEdBQVcsRUFDWCxXQUFxQixFQUNyQixLQUFRO0lBRVIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDckQsT0FBTyxFQUFPLENBQUM7S0FDaEI7SUFFRCxJQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUMsV0FBVyxDQUFDLFVBQUMsR0FBRyxFQUFFLFFBQVE7O1FBQ2xFLE9BQVEsU0FBRSxHQUFDLFFBQVEsSUFBRyxHQUFHLElBQW1CLENBQUM7SUFDL0MsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ1YsT0FBTyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ25ELENBQUM7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUMzQixJQUFjLEVBQ2QsV0FBcUIsRUFDckIsS0FBUTs7SUFFUixJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUM3QixPQUFPLEVBQU8sQ0FBQztLQUNoQjtJQUVELElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQzs7UUFDckIsS0FBeUIsSUFBQSxTQUFBLFNBQUEsSUFBSSxDQUFBLDBCQUFBLDRDQUFFO1lBQTFCLElBQU0sVUFBVSxpQkFBQTtZQUNuQixJQUFNLFVBQVUsR0FBRyxrQkFBa0IsQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDekQsSUFBTSxLQUFLLEdBQUcsaUJBQWlCLENBQUMsVUFBVSxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUNyRSxXQUFXLEdBQUcsU0FBUyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUM3Qzs7Ozs7Ozs7O0lBRUQsT0FBTyxXQUFnQixDQUFDO0FBQzFCLENBQUM7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQzlCLEdBQVcsRUFDWCxXQUFxQixFQUNyQixLQUFVOztJQUVWLElBQU0sYUFBYSxHQUFHLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUN6RCxJQUFJLGFBQWEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQzlCLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFFRCxJQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDOztRQUN4QyxLQUFrQyxJQUFBLGtCQUFBLFNBQUEsYUFBYSxDQUFBLDRDQUFBLHVFQUFFO1lBQTVDLElBQU0sbUJBQW1CLDBCQUFBO1lBQzVCLElBQU0sb0JBQW9CLEdBQUcsbUJBQW1CLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFFekUsSUFBSSxVQUFVLEdBQUcsVUFBVSxDQUFDO1lBQzVCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3BELElBQU0sWUFBWSxHQUFHLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUU3QyxpQkFBaUI7Z0JBQ2pCLElBQUksQ0FBQyxLQUFLLG9CQUFvQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7b0JBQ3pDLElBQUksVUFBVSxJQUFJLFVBQVUsQ0FBQyxZQUFZLENBQUMsRUFBRTt3QkFDMUMsT0FBTyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7cUJBQ2pDO2lCQUNGO3FCQUFNO29CQUNMLFVBQVUsR0FBRyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7aUJBQ3ZDO2FBQ0Y7U0FDRjs7Ozs7Ozs7O0lBRUQsT0FBTyxVQUFVLENBQUM7QUFDcEIsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxHQUFXLEVBQUUsV0FBcUI7O0lBQ2pFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUU7UUFDeEIsT0FBTyxFQUFFLENBQUM7S0FDWDtJQUVELElBQU0sYUFBYSxHQUFhLEVBQUUsQ0FBQzs7UUFDbkMsS0FBMkIsSUFBQSxnQkFBQSxTQUFBLFdBQVcsQ0FBQSx3Q0FBQSxpRUFBRTtZQUFuQyxJQUFNLFlBQVksd0JBQUE7WUFDckIsSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUM5QixhQUFhLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQ2xDO1NBQ0Y7Ozs7Ozs7OztJQUVELE9BQU8sYUFBYSxDQUFDO0FBQ3ZCLENBQUM7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQzlCLElBQTRELEVBQzVELElBQXlDO0lBRXpDLElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDVCxPQUFPLEVBQUUsQ0FBQztLQUNYO0lBQ0QsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFDLEdBQUcsSUFBSyxPQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLEVBQWxCLENBQWtCLENBQUMsQ0FBQztBQUMvRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVlcE1lcmdlIH0gZnJvbSAnLi4vLi4vY29uZmlnL3V0aWxzL2RlZXAtbWVyZ2UnO1xyXG5pbXBvcnQgeyBTdGF0ZVRyYW5zZmVyVHlwZSwgU3RvcmFnZVN5bmNUeXBlIH0gZnJvbSAnLi4vY29uZmlnL3N0YXRlLWNvbmZpZyc7XHJcblxyXG5jb25zdCBPQkpFQ1RfU0VQQVJBVE9SID0gJy4nO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0YXRlU2xpY2VWYWx1ZTxULCBFPihrZXlzOiBzdHJpbmcsIHN0YXRlOiBUKTogRSB7XHJcbiAgcmV0dXJuIGtleXNcclxuICAgIC5zcGxpdChPQkpFQ1RfU0VQQVJBVE9SKVxyXG4gICAgLnJlZHVjZShcclxuICAgICAgKHByZXZpb3VzLCBjdXJyZW50KSA9PiAocHJldmlvdXMgPyBwcmV2aW91c1tjdXJyZW50XSA6IHVuZGVmaW5lZCksXHJcbiAgICAgIHN0YXRlXHJcbiAgICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2hlbGxPYmplY3Q8VCwgRT4oXHJcbiAga2V5OiBzdHJpbmcsXHJcbiAgZXhjbHVkZUtleXM6IHN0cmluZ1tdLFxyXG4gIHZhbHVlOiBUXHJcbik6IEUge1xyXG4gIGlmICgha2V5IHx8ICF2YWx1ZSB8fCBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwKSB7XHJcbiAgICByZXR1cm4ge30gYXMgRTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHNoZWxsID0ga2V5LnNwbGl0KE9CSkVDVF9TRVBBUkFUT1IpLnJlZHVjZVJpZ2h0KChhY2MsIHByZXZpb3VzKSA9PiB7XHJcbiAgICByZXR1cm4gKHsgW3ByZXZpb3VzXTogYWNjIH0gYXMgdW5rbm93bikgYXMgVDtcclxuICB9LCB2YWx1ZSk7XHJcbiAgcmV0dXJuIGhhbmRsZUV4Y2x1c2lvbnMoa2V5LCBleGNsdWRlS2V5cywgc2hlbGwpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RhdGVTbGljZTxULCBFPihcclxuICBrZXlzOiBzdHJpbmdbXSxcclxuICBleGNsdWRlS2V5czogc3RyaW5nW10sXHJcbiAgc3RhdGU6IFRcclxuKTogRSB7XHJcbiAgaWYgKGtleXMgJiYga2V5cy5sZW5ndGggPT09IDApIHtcclxuICAgIHJldHVybiB7fSBhcyBFO1xyXG4gIH1cclxuXHJcbiAgbGV0IHN0YXRlU2xpY2VzID0ge307XHJcbiAgZm9yIChjb25zdCBjdXJyZW50S2V5IG9mIGtleXMpIHtcclxuICAgIGNvbnN0IHN0YXRlVmFsdWUgPSBnZXRTdGF0ZVNsaWNlVmFsdWUoY3VycmVudEtleSwgc3RhdGUpO1xyXG4gICAgY29uc3Qgc2hlbGwgPSBjcmVhdGVTaGVsbE9iamVjdChjdXJyZW50S2V5LCBleGNsdWRlS2V5cywgc3RhdGVWYWx1ZSk7XHJcbiAgICBzdGF0ZVNsaWNlcyA9IGRlZXBNZXJnZShzdGF0ZVNsaWNlcywgc2hlbGwpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHN0YXRlU2xpY2VzIGFzIEU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVFeGNsdXNpb25zKFxyXG4gIGtleTogc3RyaW5nLFxyXG4gIGV4Y2x1ZGVLZXlzOiBzdHJpbmdbXSxcclxuICB2YWx1ZTogYW55XHJcbik6IGFueSB7XHJcbiAgY29uc3QgZXhjbHVzaW9uS2V5cyA9IGdldEV4Y2x1c2lvbktleXMoa2V5LCBleGNsdWRlS2V5cyk7XHJcbiAgaWYgKGV4Y2x1c2lvbktleXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbiAgfVxyXG5cclxuICBjb25zdCBmaW5hbFZhbHVlID0gZGVlcE1lcmdlKHt9LCB2YWx1ZSk7XHJcbiAgZm9yIChjb25zdCBjdXJyZW50RXhjbHVzaW9uS2V5IG9mIGV4Y2x1c2lvbktleXMpIHtcclxuICAgIGNvbnN0IGV4Y2x1c2lvbkNodW5rc1NwbGl0ID0gY3VycmVudEV4Y2x1c2lvbktleS5zcGxpdChPQkpFQ1RfU0VQQVJBVE9SKTtcclxuXHJcbiAgICBsZXQgbmVzdGVkVGVtcCA9IGZpbmFsVmFsdWU7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV4Y2x1c2lvbkNodW5rc1NwbGl0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRDaHVuayA9IGV4Y2x1c2lvbkNodW5rc1NwbGl0W2ldO1xyXG5cclxuICAgICAgLy8gbGFzdCBpdGVyYXRpb25cclxuICAgICAgaWYgKGkgPT09IGV4Y2x1c2lvbkNodW5rc1NwbGl0Lmxlbmd0aCAtIDEpIHtcclxuICAgICAgICBpZiAobmVzdGVkVGVtcCAmJiBuZXN0ZWRUZW1wW2N1cnJlbnRDaHVua10pIHtcclxuICAgICAgICAgIGRlbGV0ZSBuZXN0ZWRUZW1wW2N1cnJlbnRDaHVua107XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG5lc3RlZFRlbXAgPSBuZXN0ZWRUZW1wW2N1cnJlbnRDaHVua107XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBmaW5hbFZhbHVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXhjbHVzaW9uS2V5cyhrZXk6IHN0cmluZywgZXhjbHVkZUtleXM6IHN0cmluZ1tdKTogc3RyaW5nW10ge1xyXG4gIGlmICgha2V5IHx8ICFleGNsdWRlS2V5cykge1xyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgZXhjbHVzaW9uS2V5czogc3RyaW5nW10gPSBbXTtcclxuICBmb3IgKGNvbnN0IGV4Y2x1c2lvbktleSBvZiBleGNsdWRlS2V5cykge1xyXG4gICAgaWYgKGV4Y2x1c2lvbktleS5pbmNsdWRlcyhrZXkpKSB7XHJcbiAgICAgIGV4Y2x1c2lvbktleXMucHVzaChleGNsdXNpb25LZXkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGV4Y2x1c2lvbktleXM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJLZXlzQnlUeXBlKFxyXG4gIGtleXM6IHsgW2tleTogc3RyaW5nXTogU3RvcmFnZVN5bmNUeXBlIHwgU3RhdGVUcmFuc2ZlclR5cGUgfSxcclxuICB0eXBlOiBTdG9yYWdlU3luY1R5cGUgfCBTdGF0ZVRyYW5zZmVyVHlwZVxyXG4pOiBzdHJpbmdbXSB7XHJcbiAgaWYgKCFrZXlzKSB7XHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG4gIHJldHVybiBPYmplY3Qua2V5cyhrZXlzKS5maWx0ZXIoKGtleSkgPT4ga2V5c1trZXldID09PSB0eXBlKTtcclxufVxyXG4iXX0=