import { isPlatformBrowser, isPlatformServer } from '@angular/common';
import { makeStateKey, } from '@angular/platform-browser';
import { INIT } from '@ngrx/store';
import { AUTH_FEATURE } from '../../auth/store/auth-state';
import { deepMerge } from '../../config/utils/deep-merge';
import { StateTransferType } from '../config/state-config';
import { filterKeysByType, getStateSlice } from '../utils/get-state-slice';
export var CX_KEY = makeStateKey('cx-state');
export function getTransferStateReducer(platformId, transferState, config) {
    if (transferState &&
        config &&
        config.state &&
        config.state.ssrTransfer &&
        config.state.ssrTransfer.keys) {
        if (isPlatformBrowser(platformId)) {
            return getBrowserTransferStateReducer(transferState, config.state.ssrTransfer.keys);
        }
        else if (isPlatformServer(platformId)) {
            return getServerTransferStateReducer(transferState, config.state.ssrTransfer.keys);
        }
    }
    return function (reducer) { return reducer; };
}
export function getServerTransferStateReducer(transferState, keys) {
    var transferStateKeys = filterKeysByType(keys, StateTransferType.TRANSFER_STATE);
    return function (reducer) {
        return function (state, action) {
            var newState = reducer(state, action);
            if (newState) {
                var stateSlice = getStateSlice(transferStateKeys, [], newState);
                transferState.set(CX_KEY, stateSlice);
            }
            return newState;
        };
    };
}
export function getBrowserTransferStateReducer(transferState, keys) {
    var transferStateKeys = filterKeysByType(keys, StateTransferType.TRANSFER_STATE);
    return function (reducer) {
        return function (state, action) {
            if (action.type === INIT) {
                if (!state) {
                    state = reducer(state, action);
                }
                // we should not utilize transfer state if user is logged in
                var authState = state[AUTH_FEATURE];
                var isLoggedIn = authState && authState.userToken && authState.userToken.token;
                if (!isLoggedIn && transferState.hasKey(CX_KEY)) {
                    var cxKey = transferState.get(CX_KEY, {});
                    var transferredStateSlice = getStateSlice(transferStateKeys, [], cxKey);
                    state = deepMerge({}, state, transferredStateSlice);
                }
                return state;
            }
            return reducer(state, action);
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmZXItc3RhdGUucmVkdWNlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9zdGF0ZS9yZWR1Y2Vycy90cmFuc2Zlci1zdGF0ZS5yZWR1Y2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3RFLE9BQU8sRUFDTCxZQUFZLEdBR2IsTUFBTSwyQkFBMkIsQ0FBQztBQUNuQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ25DLE9BQU8sRUFBRSxZQUFZLEVBQWlCLE1BQU0sNkJBQTZCLENBQUM7QUFDMUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzFELE9BQU8sRUFBZSxpQkFBaUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUUzRSxNQUFNLENBQUMsSUFBTSxNQUFNLEdBQXFCLFlBQVksQ0FBUyxVQUFVLENBQUMsQ0FBQztBQUV6RSxNQUFNLFVBQVUsdUJBQXVCLENBQ3JDLFVBQVUsRUFDVixhQUE2QixFQUM3QixNQUFvQjtJQUVwQixJQUNFLGFBQWE7UUFDYixNQUFNO1FBQ04sTUFBTSxDQUFDLEtBQUs7UUFDWixNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVc7UUFDeEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUM3QjtRQUNBLElBQUksaUJBQWlCLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDakMsT0FBTyw4QkFBOEIsQ0FDbkMsYUFBYSxFQUNiLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FDOUIsQ0FBQztTQUNIO2FBQU0sSUFBSSxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUN2QyxPQUFPLDZCQUE2QixDQUNsQyxhQUFhLEVBQ2IsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUM5QixDQUFDO1NBQ0g7S0FDRjtJQUVELE9BQU8sVUFBQyxPQUFPLElBQUssT0FBQSxPQUFPLEVBQVAsQ0FBTyxDQUFDO0FBQzlCLENBQUM7QUFFRCxNQUFNLFVBQVUsNkJBQTZCLENBQzNDLGFBQTRCLEVBQzVCLElBQTBDO0lBRTFDLElBQU0saUJBQWlCLEdBQUcsZ0JBQWdCLENBQ3hDLElBQUksRUFDSixpQkFBaUIsQ0FBQyxjQUFjLENBQ2pDLENBQUM7SUFFRixPQUFPLFVBQVUsT0FBTztRQUN0QixPQUFPLFVBQVUsS0FBSyxFQUFFLE1BQVc7WUFDakMsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN4QyxJQUFJLFFBQVEsRUFBRTtnQkFDWixJQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO2dCQUNsRSxhQUFhLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQzthQUN2QztZQUVELE9BQU8sUUFBUSxDQUFDO1FBQ2xCLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUsOEJBQThCLENBQzVDLGFBQTRCLEVBQzVCLElBQTBDO0lBRTFDLElBQU0saUJBQWlCLEdBQUcsZ0JBQWdCLENBQ3hDLElBQUksRUFDSixpQkFBaUIsQ0FBQyxjQUFjLENBQ2pDLENBQUM7SUFFRixPQUFPLFVBQVUsT0FBTztRQUN0QixPQUFPLFVBQVUsS0FBSyxFQUFFLE1BQVc7WUFDakMsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLElBQUksRUFBRTtnQkFDeEIsSUFBSSxDQUFDLEtBQUssRUFBRTtvQkFDVixLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztpQkFDaEM7Z0JBRUQsNERBQTREO2dCQUM1RCxJQUFNLFNBQVMsR0FBSSxLQUF1QixDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUN6RCxJQUFNLFVBQVUsR0FDZCxTQUFTLElBQUksU0FBUyxDQUFDLFNBQVMsSUFBSSxTQUFTLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztnQkFFaEUsSUFBSSxDQUFDLFVBQVUsSUFBSSxhQUFhLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFO29CQUMvQyxJQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztvQkFDNUMsSUFBTSxxQkFBcUIsR0FBRyxhQUFhLENBQ3pDLGlCQUFpQixFQUNqQixFQUFFLEVBQ0YsS0FBSyxDQUNOLENBQUM7b0JBRUYsS0FBSyxHQUFHLFNBQVMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLHFCQUFxQixDQUFDLENBQUM7aUJBQ3JEO2dCQUNELE9BQU8sS0FBSyxDQUFDO2FBQ2Q7WUFDRCxPQUFPLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyLCBpc1BsYXRmb3JtU2VydmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHtcclxuICBtYWtlU3RhdGVLZXksXHJcbiAgU3RhdGVLZXksXHJcbiAgVHJhbnNmZXJTdGF0ZSxcclxufSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuaW1wb3J0IHsgSU5JVCB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcclxuaW1wb3J0IHsgQVVUSF9GRUFUVVJFLCBTdGF0ZVdpdGhBdXRoIH0gZnJvbSAnLi4vLi4vYXV0aC9zdG9yZS9hdXRoLXN0YXRlJztcclxuaW1wb3J0IHsgZGVlcE1lcmdlIH0gZnJvbSAnLi4vLi4vY29uZmlnL3V0aWxzL2RlZXAtbWVyZ2UnO1xyXG5pbXBvcnQgeyBTdGF0ZUNvbmZpZywgU3RhdGVUcmFuc2ZlclR5cGUgfSBmcm9tICcuLi9jb25maWcvc3RhdGUtY29uZmlnJztcclxuaW1wb3J0IHsgZmlsdGVyS2V5c0J5VHlwZSwgZ2V0U3RhdGVTbGljZSB9IGZyb20gJy4uL3V0aWxzL2dldC1zdGF0ZS1zbGljZSc7XHJcblxyXG5leHBvcnQgY29uc3QgQ1hfS0VZOiBTdGF0ZUtleTxzdHJpbmc+ID0gbWFrZVN0YXRlS2V5PHN0cmluZz4oJ2N4LXN0YXRlJyk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNmZXJTdGF0ZVJlZHVjZXIoXHJcbiAgcGxhdGZvcm1JZCxcclxuICB0cmFuc2ZlclN0YXRlPzogVHJhbnNmZXJTdGF0ZSxcclxuICBjb25maWc/OiBTdGF0ZUNvbmZpZ1xyXG4pIHtcclxuICBpZiAoXHJcbiAgICB0cmFuc2ZlclN0YXRlICYmXHJcbiAgICBjb25maWcgJiZcclxuICAgIGNvbmZpZy5zdGF0ZSAmJlxyXG4gICAgY29uZmlnLnN0YXRlLnNzclRyYW5zZmVyICYmXHJcbiAgICBjb25maWcuc3RhdGUuc3NyVHJhbnNmZXIua2V5c1xyXG4gICkge1xyXG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHBsYXRmb3JtSWQpKSB7XHJcbiAgICAgIHJldHVybiBnZXRCcm93c2VyVHJhbnNmZXJTdGF0ZVJlZHVjZXIoXHJcbiAgICAgICAgdHJhbnNmZXJTdGF0ZSxcclxuICAgICAgICBjb25maWcuc3RhdGUuc3NyVHJhbnNmZXIua2V5c1xyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIGlmIChpc1BsYXRmb3JtU2VydmVyKHBsYXRmb3JtSWQpKSB7XHJcbiAgICAgIHJldHVybiBnZXRTZXJ2ZXJUcmFuc2ZlclN0YXRlUmVkdWNlcihcclxuICAgICAgICB0cmFuc2ZlclN0YXRlLFxyXG4gICAgICAgIGNvbmZpZy5zdGF0ZS5zc3JUcmFuc2Zlci5rZXlzXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gKHJlZHVjZXIpID0+IHJlZHVjZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTZXJ2ZXJUcmFuc2ZlclN0YXRlUmVkdWNlcihcclxuICB0cmFuc2ZlclN0YXRlOiBUcmFuc2ZlclN0YXRlLFxyXG4gIGtleXM6IHsgW2tleTogc3RyaW5nXTogU3RhdGVUcmFuc2ZlclR5cGUgfVxyXG4pIHtcclxuICBjb25zdCB0cmFuc2ZlclN0YXRlS2V5cyA9IGZpbHRlcktleXNCeVR5cGUoXHJcbiAgICBrZXlzLFxyXG4gICAgU3RhdGVUcmFuc2ZlclR5cGUuVFJBTlNGRVJfU1RBVEVcclxuICApO1xyXG5cclxuICByZXR1cm4gZnVuY3Rpb24gKHJlZHVjZXIpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbjogYW55KSB7XHJcbiAgICAgIGNvbnN0IG5ld1N0YXRlID0gcmVkdWNlcihzdGF0ZSwgYWN0aW9uKTtcclxuICAgICAgaWYgKG5ld1N0YXRlKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhdGVTbGljZSA9IGdldFN0YXRlU2xpY2UodHJhbnNmZXJTdGF0ZUtleXMsIFtdLCBuZXdTdGF0ZSk7XHJcbiAgICAgICAgdHJhbnNmZXJTdGF0ZS5zZXQoQ1hfS0VZLCBzdGF0ZVNsaWNlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIG5ld1N0YXRlO1xyXG4gICAgfTtcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QnJvd3NlclRyYW5zZmVyU3RhdGVSZWR1Y2VyKFxyXG4gIHRyYW5zZmVyU3RhdGU6IFRyYW5zZmVyU3RhdGUsXHJcbiAga2V5czogeyBba2V5OiBzdHJpbmddOiBTdGF0ZVRyYW5zZmVyVHlwZSB9XHJcbikge1xyXG4gIGNvbnN0IHRyYW5zZmVyU3RhdGVLZXlzID0gZmlsdGVyS2V5c0J5VHlwZShcclxuICAgIGtleXMsXHJcbiAgICBTdGF0ZVRyYW5zZmVyVHlwZS5UUkFOU0ZFUl9TVEFURVxyXG4gICk7XHJcblxyXG4gIHJldHVybiBmdW5jdGlvbiAocmVkdWNlcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdGF0ZSwgYWN0aW9uOiBhbnkpIHtcclxuICAgICAgaWYgKGFjdGlvbi50eXBlID09PSBJTklUKSB7XHJcbiAgICAgICAgaWYgKCFzdGF0ZSkge1xyXG4gICAgICAgICAgc3RhdGUgPSByZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gd2Ugc2hvdWxkIG5vdCB1dGlsaXplIHRyYW5zZmVyIHN0YXRlIGlmIHVzZXIgaXMgbG9nZ2VkIGluXHJcbiAgICAgICAgY29uc3QgYXV0aFN0YXRlID0gKHN0YXRlIGFzIFN0YXRlV2l0aEF1dGgpW0FVVEhfRkVBVFVSRV07XHJcbiAgICAgICAgY29uc3QgaXNMb2dnZWRJbiA9XHJcbiAgICAgICAgICBhdXRoU3RhdGUgJiYgYXV0aFN0YXRlLnVzZXJUb2tlbiAmJiBhdXRoU3RhdGUudXNlclRva2VuLnRva2VuO1xyXG5cclxuICAgICAgICBpZiAoIWlzTG9nZ2VkSW4gJiYgdHJhbnNmZXJTdGF0ZS5oYXNLZXkoQ1hfS0VZKSkge1xyXG4gICAgICAgICAgY29uc3QgY3hLZXkgPSB0cmFuc2ZlclN0YXRlLmdldChDWF9LRVksIHt9KTtcclxuICAgICAgICAgIGNvbnN0IHRyYW5zZmVycmVkU3RhdGVTbGljZSA9IGdldFN0YXRlU2xpY2UoXHJcbiAgICAgICAgICAgIHRyYW5zZmVyU3RhdGVLZXlzLFxyXG4gICAgICAgICAgICBbXSxcclxuICAgICAgICAgICAgY3hLZXlcclxuICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgc3RhdGUgPSBkZWVwTWVyZ2Uoe30sIHN0YXRlLCB0cmFuc2ZlcnJlZFN0YXRlU2xpY2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJlZHVjZXIoc3RhdGUsIGFjdGlvbik7XHJcbiAgICB9O1xyXG4gIH07XHJcbn1cclxuIl19