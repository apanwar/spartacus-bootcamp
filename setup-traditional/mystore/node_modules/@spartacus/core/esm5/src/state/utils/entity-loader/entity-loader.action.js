import { __assign } from "tslib";
import { entityMeta } from '../entity/entity.action';
import { failMeta, loadMeta, resetMeta, successMeta, } from '../loader/loader.action';
export var ENTITY_LOAD_ACTION = '[ENTITY] LOAD';
export var ENTITY_FAIL_ACTION = '[ENTITY] LOAD FAIL';
export var ENTITY_SUCCESS_ACTION = '[ENTITY] LOAD SUCCESS';
export var ENTITY_RESET_ACTION = '[ENTITY] RESET';
export function entityLoadMeta(entityType, id) {
    return __assign(__assign({}, loadMeta(entityType)), entityMeta(entityType, id));
}
export function entityFailMeta(entityType, id, error) {
    return __assign(__assign({}, failMeta(entityType, error)), entityMeta(entityType, id));
}
export function entitySuccessMeta(entityType, id) {
    return __assign(__assign({}, successMeta(entityType)), entityMeta(entityType, id));
}
export function entityResetMeta(entityType, id) {
    return __assign(__assign({}, resetMeta(entityType)), entityMeta(entityType, id));
}
var EntityLoadAction = /** @class */ (function () {
    function EntityLoadAction(entityType, id) {
        this.type = ENTITY_LOAD_ACTION;
        this.meta = entityLoadMeta(entityType, id);
    }
    return EntityLoadAction;
}());
export { EntityLoadAction };
var EntityFailAction = /** @class */ (function () {
    function EntityFailAction(entityType, id, error) {
        this.type = ENTITY_FAIL_ACTION;
        this.meta = entityFailMeta(entityType, id, error);
    }
    return EntityFailAction;
}());
export { EntityFailAction };
var EntitySuccessAction = /** @class */ (function () {
    function EntitySuccessAction(entityType, id, payload) {
        this.payload = payload;
        this.type = ENTITY_SUCCESS_ACTION;
        this.meta = entitySuccessMeta(entityType, id);
    }
    return EntitySuccessAction;
}());
export { EntitySuccessAction };
var EntityLoaderResetAction = /** @class */ (function () {
    function EntityLoaderResetAction(entityType, id) {
        this.type = ENTITY_RESET_ACTION;
        this.meta = entityResetMeta(entityType, id);
    }
    return EntityLoaderResetAction;
}());
export { EntityLoaderResetAction };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LWxvYWRlci5hY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvc3RhdGUvdXRpbHMvZW50aXR5LWxvYWRlci9lbnRpdHktbG9hZGVyLmFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBYyxNQUFNLHlCQUF5QixDQUFDO0FBQ2pFLE9BQU8sRUFDTCxRQUFRLEVBRVIsUUFBUSxFQUNSLFNBQVMsRUFDVCxXQUFXLEdBQ1osTUFBTSx5QkFBeUIsQ0FBQztBQUVqQyxNQUFNLENBQUMsSUFBTSxrQkFBa0IsR0FBRyxlQUFlLENBQUM7QUFDbEQsTUFBTSxDQUFDLElBQU0sa0JBQWtCLEdBQUcsb0JBQW9CLENBQUM7QUFDdkQsTUFBTSxDQUFDLElBQU0scUJBQXFCLEdBQUcsdUJBQXVCLENBQUM7QUFDN0QsTUFBTSxDQUFDLElBQU0sbUJBQW1CLEdBQUcsZ0JBQWdCLENBQUM7QUFTcEQsTUFBTSxVQUFVLGNBQWMsQ0FDNUIsVUFBa0IsRUFDbEIsRUFBcUI7SUFFckIsNkJBQ0ssUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUNwQixVQUFVLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxFQUM3QjtBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUM1QixVQUFrQixFQUNsQixFQUFxQixFQUNyQixLQUFXO0lBRVgsNkJBQ0ssUUFBUSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsR0FDM0IsVUFBVSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsRUFDN0I7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUMvQixVQUFrQixFQUNsQixFQUFxQjtJQUVyQiw2QkFDSyxXQUFXLENBQUMsVUFBVSxDQUFDLEdBQ3ZCLFVBQVUsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLEVBQzdCO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSxlQUFlLENBQzdCLFVBQWtCLEVBQ2xCLEVBQXFCO0lBRXJCLDZCQUNLLFNBQVMsQ0FBQyxVQUFVLENBQUMsR0FDckIsVUFBVSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsRUFDN0I7QUFDSixDQUFDO0FBRUQ7SUFHRSwwQkFBWSxVQUFrQixFQUFFLEVBQXFCO1FBRnJELFNBQUksR0FBRyxrQkFBa0IsQ0FBQztRQUd4QixJQUFJLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUNILHVCQUFDO0FBQUQsQ0FBQyxBQU5ELElBTUM7O0FBRUQ7SUFHRSwwQkFBWSxVQUFrQixFQUFFLEVBQXFCLEVBQUUsS0FBVztRQUZsRSxTQUFJLEdBQUcsa0JBQWtCLENBQUM7UUFHeEIsSUFBSSxDQUFDLElBQUksR0FBRyxjQUFjLENBQUMsVUFBVSxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBQ0gsdUJBQUM7QUFBRCxDQUFDLEFBTkQsSUFNQzs7QUFFRDtJQUdFLDZCQUFZLFVBQWtCLEVBQUUsRUFBcUIsRUFBUyxPQUFhO1FBQWIsWUFBTyxHQUFQLE9BQU8sQ0FBTTtRQUYzRSxTQUFJLEdBQUcscUJBQXFCLENBQUM7UUFHM0IsSUFBSSxDQUFDLElBQUksR0FBRyxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUNILDBCQUFDO0FBQUQsQ0FBQyxBQU5ELElBTUM7O0FBRUQ7SUFHRSxpQ0FBWSxVQUFrQixFQUFFLEVBQXFCO1FBRnJELFNBQUksR0FBRyxtQkFBbUIsQ0FBQztRQUd6QixJQUFJLENBQUMsSUFBSSxHQUFHLGVBQWUsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUNILDhCQUFDO0FBQUQsQ0FBQyxBQU5ELElBTUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpb24gfSBmcm9tICdAbmdyeC9zdG9yZSc7XHJcbmltcG9ydCB7IGVudGl0eU1ldGEsIEVudGl0eU1ldGEgfSBmcm9tICcuLi9lbnRpdHkvZW50aXR5LmFjdGlvbic7XHJcbmltcG9ydCB7XHJcbiAgZmFpbE1ldGEsXHJcbiAgTG9hZGVyTWV0YSxcclxuICBsb2FkTWV0YSxcclxuICByZXNldE1ldGEsXHJcbiAgc3VjY2Vzc01ldGEsXHJcbn0gZnJvbSAnLi4vbG9hZGVyL2xvYWRlci5hY3Rpb24nO1xyXG5cclxuZXhwb3J0IGNvbnN0IEVOVElUWV9MT0FEX0FDVElPTiA9ICdbRU5USVRZXSBMT0FEJztcclxuZXhwb3J0IGNvbnN0IEVOVElUWV9GQUlMX0FDVElPTiA9ICdbRU5USVRZXSBMT0FEIEZBSUwnO1xyXG5leHBvcnQgY29uc3QgRU5USVRZX1NVQ0NFU1NfQUNUSU9OID0gJ1tFTlRJVFldIExPQUQgU1VDQ0VTUyc7XHJcbmV4cG9ydCBjb25zdCBFTlRJVFlfUkVTRVRfQUNUSU9OID0gJ1tFTlRJVFldIFJFU0VUJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRW50aXR5TG9hZGVyTWV0YSBleHRlbmRzIEVudGl0eU1ldGEsIExvYWRlck1ldGEge31cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRW50aXR5TG9hZGVyQWN0aW9uIGV4dGVuZHMgQWN0aW9uIHtcclxuICByZWFkb25seSBwYXlsb2FkPzogYW55O1xyXG4gIHJlYWRvbmx5IG1ldGE/OiBFbnRpdHlMb2FkZXJNZXRhO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZW50aXR5TG9hZE1ldGEoXHJcbiAgZW50aXR5VHlwZTogc3RyaW5nLFxyXG4gIGlkOiBzdHJpbmcgfCBzdHJpbmdbXVxyXG4pOiBFbnRpdHlMb2FkZXJNZXRhIHtcclxuICByZXR1cm4ge1xyXG4gICAgLi4ubG9hZE1ldGEoZW50aXR5VHlwZSksXHJcbiAgICAuLi5lbnRpdHlNZXRhKGVudGl0eVR5cGUsIGlkKSxcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZW50aXR5RmFpbE1ldGEoXHJcbiAgZW50aXR5VHlwZTogc3RyaW5nLFxyXG4gIGlkOiBzdHJpbmcgfCBzdHJpbmdbXSxcclxuICBlcnJvcj86IGFueVxyXG4pOiBFbnRpdHlMb2FkZXJNZXRhIHtcclxuICByZXR1cm4ge1xyXG4gICAgLi4uZmFpbE1ldGEoZW50aXR5VHlwZSwgZXJyb3IpLFxyXG4gICAgLi4uZW50aXR5TWV0YShlbnRpdHlUeXBlLCBpZCksXHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGVudGl0eVN1Y2Nlc3NNZXRhKFxyXG4gIGVudGl0eVR5cGU6IHN0cmluZyxcclxuICBpZDogc3RyaW5nIHwgc3RyaW5nW11cclxuKTogRW50aXR5TG9hZGVyTWV0YSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIC4uLnN1Y2Nlc3NNZXRhKGVudGl0eVR5cGUpLFxyXG4gICAgLi4uZW50aXR5TWV0YShlbnRpdHlUeXBlLCBpZCksXHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGVudGl0eVJlc2V0TWV0YShcclxuICBlbnRpdHlUeXBlOiBzdHJpbmcsXHJcbiAgaWQ6IHN0cmluZyB8IHN0cmluZ1tdXHJcbik6IEVudGl0eUxvYWRlck1ldGEge1xyXG4gIHJldHVybiB7XHJcbiAgICAuLi5yZXNldE1ldGEoZW50aXR5VHlwZSksXHJcbiAgICAuLi5lbnRpdHlNZXRhKGVudGl0eVR5cGUsIGlkKSxcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRW50aXR5TG9hZEFjdGlvbiBpbXBsZW1lbnRzIEVudGl0eUxvYWRlckFjdGlvbiB7XHJcbiAgdHlwZSA9IEVOVElUWV9MT0FEX0FDVElPTjtcclxuICByZWFkb25seSBtZXRhOiBFbnRpdHlMb2FkZXJNZXRhO1xyXG4gIGNvbnN0cnVjdG9yKGVudGl0eVR5cGU6IHN0cmluZywgaWQ6IHN0cmluZyB8IHN0cmluZ1tdKSB7XHJcbiAgICB0aGlzLm1ldGEgPSBlbnRpdHlMb2FkTWV0YShlbnRpdHlUeXBlLCBpZCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRW50aXR5RmFpbEFjdGlvbiBpbXBsZW1lbnRzIEVudGl0eUxvYWRlckFjdGlvbiB7XHJcbiAgdHlwZSA9IEVOVElUWV9GQUlMX0FDVElPTjtcclxuICByZWFkb25seSBtZXRhOiBFbnRpdHlMb2FkZXJNZXRhO1xyXG4gIGNvbnN0cnVjdG9yKGVudGl0eVR5cGU6IHN0cmluZywgaWQ6IHN0cmluZyB8IHN0cmluZ1tdLCBlcnJvcj86IGFueSkge1xyXG4gICAgdGhpcy5tZXRhID0gZW50aXR5RmFpbE1ldGEoZW50aXR5VHlwZSwgaWQsIGVycm9yKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBFbnRpdHlTdWNjZXNzQWN0aW9uIGltcGxlbWVudHMgRW50aXR5TG9hZGVyQWN0aW9uIHtcclxuICB0eXBlID0gRU5USVRZX1NVQ0NFU1NfQUNUSU9OO1xyXG4gIHJlYWRvbmx5IG1ldGE6IEVudGl0eUxvYWRlck1ldGE7XHJcbiAgY29uc3RydWN0b3IoZW50aXR5VHlwZTogc3RyaW5nLCBpZDogc3RyaW5nIHwgc3RyaW5nW10sIHB1YmxpYyBwYXlsb2FkPzogYW55KSB7XHJcbiAgICB0aGlzLm1ldGEgPSBlbnRpdHlTdWNjZXNzTWV0YShlbnRpdHlUeXBlLCBpZCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRW50aXR5TG9hZGVyUmVzZXRBY3Rpb24gaW1wbGVtZW50cyBFbnRpdHlMb2FkZXJBY3Rpb24ge1xyXG4gIHR5cGUgPSBFTlRJVFlfUkVTRVRfQUNUSU9OO1xyXG4gIHJlYWRvbmx5IG1ldGE6IEVudGl0eUxvYWRlck1ldGE7XHJcbiAgY29uc3RydWN0b3IoZW50aXR5VHlwZTogc3RyaW5nLCBpZDogc3RyaW5nIHwgc3RyaW5nW10pIHtcclxuICAgIHRoaXMubWV0YSA9IGVudGl0eVJlc2V0TWV0YShlbnRpdHlUeXBlLCBpZCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==