import { __decorate } from "tslib";
import { Injectable, isDevMode } from '@angular/core';
import { Subject } from 'rxjs';
import { tap } from 'rxjs/operators';
import { MergingSubject } from './utils/merging-subject';
import * as i0 from "@angular/core";
/**
 * A service to register and observe event sources. Events are driven by event types, which are class signatures
 * for the given event.
 *
 * It is possible to register multiple sources to a single event, even without
 * knowing as multiple decoupled features can attach sources to the same
 * event type.
 */
var EventService = /** @class */ (function () {
    function EventService() {
        /**
         * The various events meta are collected in a map, stored by the event type class
         */
        this.eventsMeta = new Map();
    }
    /**
     * Register an event source for the given event type.
     *
     * CAUTION: To avoid memory leaks, the returned teardown function should be called
     *  when the event source is no longer maintained by its creator
     * (i.e. in `ngOnDestroy` if the event source was registered in the component).
     *
     * @param eventType the event type
     * @param source$ an observable that represents the source
     *
     * @returns a teardown function which unregisters the given event source
     */
    EventService.prototype.register = function (eventType, source$) {
        var eventMeta = this.getEventMeta(eventType);
        if (eventMeta.mergingSubject.has(source$)) {
            if (isDevMode()) {
                console.warn("EventService: the event source", source$, "has been already registered for the type", eventType);
            }
        }
        else {
            eventMeta.mergingSubject.add(source$);
        }
        return function () { return eventMeta.mergingSubject.remove(source$); };
    };
    /**
     * Returns a stream of events for the given event type
     * @param eventTypes event type
     */
    EventService.prototype.get = function (eventType) {
        var output$ = this.getEventMeta(eventType).mergingSubject.output$;
        if (isDevMode()) {
            output$ = this.getValidatedEventStream(output$, eventType);
        }
        return output$;
    };
    /**
     * Dispatches an instance of an individual event.
     */
    EventService.prototype.dispatch = function (event) {
        var eventType = event.constructor;
        var inputSubject$ = this.getInputSubject(eventType);
        inputSubject$.next(event);
    };
    /**
     * Returns the input subject used to dispatch a single event.
     * The subject is created on demand, when it's needed for the first time.
     * @param eventType type of event
     */
    EventService.prototype.getInputSubject = function (eventType) {
        var eventMeta = this.getEventMeta(eventType);
        if (!eventMeta.inputSubject$) {
            eventMeta.inputSubject$ = new Subject();
            this.register(eventType, eventMeta.inputSubject$);
        }
        return eventMeta.inputSubject$;
    };
    /**
     * Returns the event meta object for the given event type
     */
    EventService.prototype.getEventMeta = function (eventType) {
        if (isDevMode()) {
            this.validateEventType(eventType);
        }
        if (!this.eventsMeta.get(eventType)) {
            this.createEventMeta(eventType);
        }
        return this.eventsMeta.get(eventType);
    };
    /**
     * Creates the event meta object for the given event type
     */
    EventService.prototype.createEventMeta = function (eventType) {
        this.eventsMeta.set(eventType, {
            inputSubject$: null,
            mergingSubject: new MergingSubject(),
        });
    };
    /**
     * Checks if the event type is a valid type (is a class with constructor).
     *
     * Should be used only in dev mode.
     */
    EventService.prototype.validateEventType = function (eventType) {
        if (!(eventType === null || eventType === void 0 ? void 0 : eventType.constructor)) {
            throw new Error("EventService:  " + eventType + " is not a valid event type. Please provide a class reference.");
        }
    };
    /**
     * Returns the given event source with runtime validation whether the emitted values are instances of given event type.
     *
     * Should be used only in dev mode.
     */
    EventService.prototype.getValidatedEventStream = function (source$, eventType) {
        return source$.pipe(tap(function (event) {
            if (!(event instanceof eventType)) {
                console.warn("EventService: The stream", source$, "emitted the event", event, "that is not an instance of the declared type", eventType.name);
            }
        }));
    };
    EventService.ɵprov = i0.ɵɵdefineInjectable({ factory: function EventService_Factory() { return new EventService(); }, token: EventService, providedIn: "root" });
    EventService = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], EventService);
    return EventService;
}());
export { EventService };
//# sourceMappingURL=data:application/json;base64,