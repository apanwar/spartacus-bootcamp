import { __decorate, __extends, __read, __values } from "tslib";
import { Injectable } from '@angular/core';
import { combineLatest, of } from 'rxjs';
import { filter, map, switchMap } from 'rxjs/operators';
import { CmsService } from '../../cms/facade/cms.service';
import { PageMetaResolver } from '../../cms/page/page-meta.resolver';
import { TranslationService } from '../../i18n/translation.service';
import { PageType } from '../../model/cms.model';
import { ProductSearchService } from '../facade/product-search.service';
import * as i0 from "@angular/core";
import * as i1 from "../facade/product-search.service";
import * as i2 from "../../cms/facade/cms.service";
import * as i3 from "../../i18n/translation.service";
/**
 * Resolves the page data for the Product Listing Page.
 *
 * The page title, and breadcrumbs are resolved in this implementation only.
 */
var CategoryPageMetaResolver = /** @class */ (function (_super) {
    __extends(CategoryPageMetaResolver, _super);
    function CategoryPageMetaResolver(productSearchService, cms, translation) {
        var _this = _super.call(this) || this;
        _this.productSearchService = productSearchService;
        _this.cms = cms;
        _this.translation = translation;
        // reusable observable for search page data
        _this.searchPage$ = _this.cms.getCurrentPage().pipe(filter(Boolean), switchMap(function (page) {
            // only the existence of a plp component tells us if products
            // are rendered or if this is an ordinary content page
            return _this.hasProductListComponent(page)
                ? _this.productSearchService.getResults().pipe(filter(Boolean))
                : of(page);
        }));
        _this.pageType = PageType.CATEGORY_PAGE;
        return _this;
    }
    CategoryPageMetaResolver.prototype.resolveTitle = function () {
        var _this = this;
        return this.searchPage$.pipe(filter(function (page) { return !!page.pagination; }), switchMap(function (p) {
            var _a;
            return _this.translation.translate('pageMetaResolver.category.title', {
                count: p.pagination.totalResults,
                query: ((_a = p.breadcrumbs) === null || _a === void 0 ? void 0 : _a.length) ? p.breadcrumbs[0].facetValueName
                    : undefined,
            });
        }));
    };
    CategoryPageMetaResolver.prototype.resolveBreadcrumbs = function () {
        var _this = this;
        return combineLatest([
            this.searchPage$.pipe(),
            this.translation.translate('common.home'),
        ]).pipe(map(function (_a) {
            var _b = __read(_a, 2), p = _b[0], label = _b[1];
            return p.breadcrumbs
                ? _this.resolveBreadcrumbData(p, label)
                : null;
        }));
    };
    CategoryPageMetaResolver.prototype.resolveBreadcrumbData = function (page, label) {
        var e_1, _a;
        var breadcrumbs = [];
        breadcrumbs.push({ label: label, link: '/' });
        try {
            for (var _b = __values(page.breadcrumbs), _c = _b.next(); !_c.done; _c = _b.next()) {
                var br = _c.value;
                if (br.facetCode === 'category' || br.facetCode === 'allCategories') {
                    breadcrumbs.push({
                        label: br.facetValueName,
                        link: "/c/" + br.facetValueCode,
                    });
                }
                if (br.facetCode === 'brand') {
                    breadcrumbs.push({
                        label: br.facetValueName,
                        link: "/Brands/" + br.facetValueName + "/c/" + br.facetValueCode,
                    });
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return breadcrumbs;
    };
    CategoryPageMetaResolver.prototype.hasProductListComponent = function (page) {
        return !!Object.keys(page.slots).find(function (key) {
            return !!page.slots[key].components.find(function (comp) {
                return comp.typeCode === 'CMSProductListComponent' ||
                    comp.typeCode === 'ProductGridComponent';
            });
        });
    };
    CategoryPageMetaResolver.ctorParameters = function () { return [
        { type: ProductSearchService },
        { type: CmsService },
        { type: TranslationService }
    ]; };
    CategoryPageMetaResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function CategoryPageMetaResolver_Factory() { return new CategoryPageMetaResolver(i0.ɵɵinject(i1.ProductSearchService), i0.ɵɵinject(i2.CmsService), i0.ɵɵinject(i3.TranslationService)); }, token: CategoryPageMetaResolver, providedIn: "root" });
    CategoryPageMetaResolver = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], CategoryPageMetaResolver);
    return CategoryPageMetaResolver;
}(PageMetaResolver));
export { CategoryPageMetaResolver };
//# sourceMappingURL=data:application/json;base64,