import { __assign, __read, __spread } from "tslib";
import { ProductActions } from '../actions/index';
export var initialState = {
    productCode: '',
    list: [],
};
export function reducer(state, action) {
    if (state === void 0) { state = initialState; }
    switch (action.type) {
        case ProductActions.LOAD_PRODUCT_REFERENCES_SUCCESS: {
            var productCode = action.payload.productCode;
            var list = action.payload.list;
            return __assign(__assign({}, state), { list: __spread(state.list, (list ? list : [])).reduce(function (productReferences, productReference) {
                    if (!productReferences.some(function (obj) {
                        return obj.referenceType === productReference.referenceType &&
                            obj.target.code === productReference.target.code;
                    })) {
                        productReferences.push(productReference);
                    }
                    return productReferences;
                }, []), productCode: productCode });
        }
        case ProductActions.CLEAN_PRODUCT_REFERENCES: {
            return initialState;
        }
    }
    return state;
}
export var getProductReferenceList = function (state) { return state.list; };
export var getProductReferenceProductCode = function (state) { return state.productCode; };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1yZWZlcmVuY2VzLnJlZHVjZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvcHJvZHVjdC9zdG9yZS9yZWR1Y2Vycy9wcm9kdWN0LXJlZmVyZW5jZXMucmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBR2xELE1BQU0sQ0FBQyxJQUFNLFlBQVksR0FBMkI7SUFDbEQsV0FBVyxFQUFFLEVBQUU7SUFDZixJQUFJLEVBQUUsRUFBRTtDQUNULENBQUM7QUFFRixNQUFNLFVBQVUsT0FBTyxDQUNyQixLQUFvQixFQUNwQixNQUE4QztJQUQ5QyxzQkFBQSxFQUFBLG9CQUFvQjtJQUdwQixRQUFRLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFDbkIsS0FBSyxjQUFjLENBQUMsK0JBQStCLENBQUMsQ0FBQztZQUNuRCxJQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztZQUMvQyxJQUFNLElBQUksR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztZQUVqQyw2QkFDSyxLQUFLLEtBQ1IsSUFBSSxFQUFFLFNBQUksS0FBSyxDQUFDLElBQUksRUFBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQ2pELFVBQ0UsaUJBQXFDLEVBQ3JDLGdCQUFrQztvQkFFbEMsSUFDRSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FDckIsVUFBQyxHQUFHO3dCQUNGLE9BQUEsR0FBRyxDQUFDLGFBQWEsS0FBSyxnQkFBZ0IsQ0FBQyxhQUFhOzRCQUNwRCxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsSUFBSTtvQkFEaEQsQ0FDZ0QsQ0FDbkQsRUFDRDt3QkFDQSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztxQkFDMUM7b0JBQ0QsT0FBTyxpQkFBaUIsQ0FBQztnQkFDM0IsQ0FBQyxFQUNELEVBQUUsQ0FDSCxFQUNELFdBQVcsYUFBQSxJQUNYO1NBQ0g7UUFFRCxLQUFLLGNBQWMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1lBQzVDLE9BQU8sWUFBWSxDQUFDO1NBQ3JCO0tBQ0Y7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxNQUFNLENBQUMsSUFBTSx1QkFBdUIsR0FBRyxVQUNyQyxLQUE2QixJQUNOLE9BQUEsS0FBSyxDQUFDLElBQUksRUFBVixDQUFVLENBQUM7QUFDcEMsTUFBTSxDQUFDLElBQU0sOEJBQThCLEdBQUcsVUFDNUMsS0FBNkIsSUFDbEIsT0FBQSxLQUFLLENBQUMsV0FBVyxFQUFqQixDQUFpQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvZHVjdFJlZmVyZW5jZSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL3Byb2R1Y3QubW9kZWwnO1xyXG5pbXBvcnQgeyBQcm9kdWN0QWN0aW9ucyB9IGZyb20gJy4uL2FjdGlvbnMvaW5kZXgnO1xyXG5pbXBvcnQgeyBQcm9kdWN0UmVmZXJlbmNlc1N0YXRlIH0gZnJvbSAnLi4vcHJvZHVjdC1zdGF0ZSc7XHJcblxyXG5leHBvcnQgY29uc3QgaW5pdGlhbFN0YXRlOiBQcm9kdWN0UmVmZXJlbmNlc1N0YXRlID0ge1xyXG4gIHByb2R1Y3RDb2RlOiAnJyxcclxuICBsaXN0OiBbXSxcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2VyKFxyXG4gIHN0YXRlID0gaW5pdGlhbFN0YXRlLFxyXG4gIGFjdGlvbjogUHJvZHVjdEFjdGlvbnMuUHJvZHVjdFJlZmVyZW5jZXNBY3Rpb25cclxuKTogUHJvZHVjdFJlZmVyZW5jZXNTdGF0ZSB7XHJcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgY2FzZSBQcm9kdWN0QWN0aW9ucy5MT0FEX1BST0RVQ1RfUkVGRVJFTkNFU19TVUNDRVNTOiB7XHJcbiAgICAgIGNvbnN0IHByb2R1Y3RDb2RlID0gYWN0aW9uLnBheWxvYWQucHJvZHVjdENvZGU7XHJcbiAgICAgIGNvbnN0IGxpc3QgPSBhY3Rpb24ucGF5bG9hZC5saXN0O1xyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICBsaXN0OiBbLi4uc3RhdGUubGlzdCwgLi4uKGxpc3QgPyBsaXN0IDogW10pXS5yZWR1Y2UoXHJcbiAgICAgICAgICAoXHJcbiAgICAgICAgICAgIHByb2R1Y3RSZWZlcmVuY2VzOiBQcm9kdWN0UmVmZXJlbmNlW10sXHJcbiAgICAgICAgICAgIHByb2R1Y3RSZWZlcmVuY2U6IFByb2R1Y3RSZWZlcmVuY2VcclxuICAgICAgICAgICkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgIXByb2R1Y3RSZWZlcmVuY2VzLnNvbWUoXHJcbiAgICAgICAgICAgICAgICAob2JqKSA9PlxyXG4gICAgICAgICAgICAgICAgICBvYmoucmVmZXJlbmNlVHlwZSA9PT0gcHJvZHVjdFJlZmVyZW5jZS5yZWZlcmVuY2VUeXBlICYmXHJcbiAgICAgICAgICAgICAgICAgIG9iai50YXJnZXQuY29kZSA9PT0gcHJvZHVjdFJlZmVyZW5jZS50YXJnZXQuY29kZVxyXG4gICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgcHJvZHVjdFJlZmVyZW5jZXMucHVzaChwcm9kdWN0UmVmZXJlbmNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcHJvZHVjdFJlZmVyZW5jZXM7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgW11cclxuICAgICAgICApLFxyXG4gICAgICAgIHByb2R1Y3RDb2RlLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGNhc2UgUHJvZHVjdEFjdGlvbnMuQ0xFQU5fUFJPRFVDVF9SRUZFUkVOQ0VTOiB7XHJcbiAgICAgIHJldHVybiBpbml0aWFsU3RhdGU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc3RhdGU7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBnZXRQcm9kdWN0UmVmZXJlbmNlTGlzdCA9IChcclxuICBzdGF0ZTogUHJvZHVjdFJlZmVyZW5jZXNTdGF0ZVxyXG4pOiBQcm9kdWN0UmVmZXJlbmNlW10gPT4gc3RhdGUubGlzdDtcclxuZXhwb3J0IGNvbnN0IGdldFByb2R1Y3RSZWZlcmVuY2VQcm9kdWN0Q29kZSA9IChcclxuICBzdGF0ZTogUHJvZHVjdFJlZmVyZW5jZXNTdGF0ZVxyXG4pOiBzdHJpbmcgPT4gc3RhdGUucHJvZHVjdENvZGU7XHJcbiJdfQ==