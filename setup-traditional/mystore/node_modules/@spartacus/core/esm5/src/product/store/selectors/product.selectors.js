import { createSelector } from '@ngrx/store';
import { StateUtils } from '../../../state/utils/index';
import { getProductsState } from './feature.selector';
var ɵ0 = function (state) { return state.details; };
export var getProductState = createSelector(getProductsState, ɵ0);
export var getSelectedProductStateFactory = function (code, scope) {
    if (scope === void 0) { scope = ''; }
    return createSelector(getProductState, function (details) {
        return StateUtils.entityLoaderStateSelector(details, code)[scope] ||
            StateUtils.initialLoaderState;
    });
};
export var getSelectedProductFactory = function (code, scope) {
    if (scope === void 0) { scope = ''; }
    return createSelector(getSelectedProductStateFactory(code, scope), function (productState) { return StateUtils.loaderValueSelector(productState); });
};
export var getSelectedProductLoadingFactory = function (code, scope) {
    if (scope === void 0) { scope = ''; }
    return createSelector(getSelectedProductStateFactory(code, scope), function (productState) { return StateUtils.loaderLoadingSelector(productState); });
};
export var getSelectedProductSuccessFactory = function (code, scope) {
    if (scope === void 0) { scope = ''; }
    return createSelector(getSelectedProductStateFactory(code, scope), function (productState) { return StateUtils.loaderSuccessSelector(productState); });
};
export var getSelectedProductErrorFactory = function (code, scope) {
    if (scope === void 0) { scope = ''; }
    return createSelector(getSelectedProductStateFactory(code, scope), function (productState) { return StateUtils.loaderErrorSelector(productState); });
};
var ɵ1 = function (details) {
    return Object.keys(details.entities);
};
export var getAllProductCodes = createSelector(getProductState, ɵ1);
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC5zZWxlY3RvcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvcHJvZHVjdC9zdG9yZS9zZWxlY3RvcnMvcHJvZHVjdC5zZWxlY3RvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBb0IsTUFBTSxhQUFhLENBQUM7QUFFL0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXhELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO1NBS2pCLFVBQUMsS0FBb0IsSUFBSyxPQUFBLEtBQUssQ0FBQyxPQUFPLEVBQWIsQ0FBYTtBQUg1RSxNQUFNLENBQUMsSUFBTSxlQUFlLEdBR3hCLGNBQWMsQ0FBQyxnQkFBZ0IsS0FBMEMsQ0FBQztBQUU5RSxNQUFNLENBQUMsSUFBTSw4QkFBOEIsR0FBRyxVQUM1QyxJQUFZLEVBQ1osS0FBVTtJQUFWLHNCQUFBLEVBQUEsVUFBVTtJQUVWLE9BQU8sY0FBYyxDQUNuQixlQUFlLEVBQ2YsVUFBQyxPQUFPO1FBQ04sT0FBQSxVQUFVLENBQUMseUJBQXlCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUMxRCxVQUFVLENBQUMsa0JBQWtCO0lBRDdCLENBQzZCLENBQ2hDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSx5QkFBeUIsR0FBRyxVQUN2QyxJQUFZLEVBQ1osS0FBVTtJQUFWLHNCQUFBLEVBQUEsVUFBVTtJQUVWLE9BQU8sY0FBYyxDQUNuQiw4QkFBOEIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQzNDLFVBQUMsWUFBWSxJQUFLLE9BQUEsVUFBVSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxFQUE1QyxDQUE0QyxDQUMvRCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sZ0NBQWdDLEdBQUcsVUFDOUMsSUFBWSxFQUNaLEtBQVU7SUFBVixzQkFBQSxFQUFBLFVBQVU7SUFFVixPQUFPLGNBQWMsQ0FDbkIsOEJBQThCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUMzQyxVQUFDLFlBQVksSUFBSyxPQUFBLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxZQUFZLENBQUMsRUFBOUMsQ0FBOEMsQ0FDakUsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLGdDQUFnQyxHQUFHLFVBQzlDLElBQVksRUFDWixLQUFVO0lBQVYsc0JBQUEsRUFBQSxVQUFVO0lBRVYsT0FBTyxjQUFjLENBQ25CLDhCQUE4QixDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFDM0MsVUFBQyxZQUFZLElBQUssT0FBQSxVQUFVLENBQUMscUJBQXFCLENBQUMsWUFBWSxDQUFDLEVBQTlDLENBQThDLENBQ2pFLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSw4QkFBOEIsR0FBRyxVQUM1QyxJQUFZLEVBQ1osS0FBVTtJQUFWLHNCQUFBLEVBQUEsVUFBVTtJQUVWLE9BQU8sY0FBYyxDQUNuQiw4QkFBOEIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQzNDLFVBQUMsWUFBWSxJQUFLLE9BQUEsVUFBVSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxFQUE1QyxDQUE0QyxDQUMvRCxDQUFDO0FBQ0osQ0FBQyxDQUFDO1NBS2tDLFVBQUMsT0FBTztJQUMxQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3ZDLENBQUM7QUFMRCxNQUFNLENBQUMsSUFBTSxrQkFBa0IsR0FHM0IsY0FBYyxDQUFDLGVBQWUsS0FFaEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yLCBNZW1vaXplZFNlbGVjdG9yIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5pbXBvcnQgeyBQcm9kdWN0IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvcHJvZHVjdC5tb2RlbCc7XHJcbmltcG9ydCB7IFN0YXRlVXRpbHMgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9pbmRleCc7XHJcbmltcG9ydCB7IFByb2R1Y3RzU3RhdGUsIFN0YXRlV2l0aFByb2R1Y3QgfSBmcm9tICcuLi9wcm9kdWN0LXN0YXRlJztcclxuaW1wb3J0IHsgZ2V0UHJvZHVjdHNTdGF0ZSB9IGZyb20gJy4vZmVhdHVyZS5zZWxlY3Rvcic7XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0UHJvZHVjdFN0YXRlOiBNZW1vaXplZFNlbGVjdG9yPFxyXG4gIFN0YXRlV2l0aFByb2R1Y3QsXHJcbiAgU3RhdGVVdGlscy5FbnRpdHlMb2FkZXJTdGF0ZTxQcm9kdWN0PlxyXG4+ID0gY3JlYXRlU2VsZWN0b3IoZ2V0UHJvZHVjdHNTdGF0ZSwgKHN0YXRlOiBQcm9kdWN0c1N0YXRlKSA9PiBzdGF0ZS5kZXRhaWxzKTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRTZWxlY3RlZFByb2R1Y3RTdGF0ZUZhY3RvcnkgPSAoXHJcbiAgY29kZTogc3RyaW5nLFxyXG4gIHNjb3BlID0gJydcclxuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhQcm9kdWN0LCBTdGF0ZVV0aWxzLkxvYWRlclN0YXRlPFByb2R1Y3Q+PiA9PiB7XHJcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxyXG4gICAgZ2V0UHJvZHVjdFN0YXRlLFxyXG4gICAgKGRldGFpbHMpID0+XHJcbiAgICAgIFN0YXRlVXRpbHMuZW50aXR5TG9hZGVyU3RhdGVTZWxlY3RvcihkZXRhaWxzLCBjb2RlKVtzY29wZV0gfHxcclxuICAgICAgU3RhdGVVdGlscy5pbml0aWFsTG9hZGVyU3RhdGVcclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFNlbGVjdGVkUHJvZHVjdEZhY3RvcnkgPSAoXHJcbiAgY29kZTogc3RyaW5nLFxyXG4gIHNjb3BlID0gJydcclxuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhQcm9kdWN0LCBQcm9kdWN0PiA9PiB7XHJcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxyXG4gICAgZ2V0U2VsZWN0ZWRQcm9kdWN0U3RhdGVGYWN0b3J5KGNvZGUsIHNjb3BlKSxcclxuICAgIChwcm9kdWN0U3RhdGUpID0+IFN0YXRlVXRpbHMubG9hZGVyVmFsdWVTZWxlY3Rvcihwcm9kdWN0U3RhdGUpXHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRTZWxlY3RlZFByb2R1Y3RMb2FkaW5nRmFjdG9yeSA9IChcclxuICBjb2RlOiBzdHJpbmcsXHJcbiAgc2NvcGUgPSAnJ1xyXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aFByb2R1Y3QsIGJvb2xlYW4+ID0+IHtcclxuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoXHJcbiAgICBnZXRTZWxlY3RlZFByb2R1Y3RTdGF0ZUZhY3RvcnkoY29kZSwgc2NvcGUpLFxyXG4gICAgKHByb2R1Y3RTdGF0ZSkgPT4gU3RhdGVVdGlscy5sb2FkZXJMb2FkaW5nU2VsZWN0b3IocHJvZHVjdFN0YXRlKVxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0U2VsZWN0ZWRQcm9kdWN0U3VjY2Vzc0ZhY3RvcnkgPSAoXHJcbiAgY29kZTogc3RyaW5nLFxyXG4gIHNjb3BlID0gJydcclxuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhQcm9kdWN0LCBib29sZWFuPiA9PiB7XHJcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxyXG4gICAgZ2V0U2VsZWN0ZWRQcm9kdWN0U3RhdGVGYWN0b3J5KGNvZGUsIHNjb3BlKSxcclxuICAgIChwcm9kdWN0U3RhdGUpID0+IFN0YXRlVXRpbHMubG9hZGVyU3VjY2Vzc1NlbGVjdG9yKHByb2R1Y3RTdGF0ZSlcclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFNlbGVjdGVkUHJvZHVjdEVycm9yRmFjdG9yeSA9IChcclxuICBjb2RlOiBzdHJpbmcsXHJcbiAgc2NvcGUgPSAnJ1xyXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aFByb2R1Y3QsIGJvb2xlYW4+ID0+IHtcclxuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoXHJcbiAgICBnZXRTZWxlY3RlZFByb2R1Y3RTdGF0ZUZhY3RvcnkoY29kZSwgc2NvcGUpLFxyXG4gICAgKHByb2R1Y3RTdGF0ZSkgPT4gU3RhdGVVdGlscy5sb2FkZXJFcnJvclNlbGVjdG9yKHByb2R1Y3RTdGF0ZSlcclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldEFsbFByb2R1Y3RDb2RlczogTWVtb2l6ZWRTZWxlY3RvcjxcclxuICBTdGF0ZVdpdGhQcm9kdWN0LFxyXG4gIHN0cmluZ1tdXHJcbj4gPSBjcmVhdGVTZWxlY3RvcihnZXRQcm9kdWN0U3RhdGUsIChkZXRhaWxzKSA9PiB7XHJcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGRldGFpbHMuZW50aXRpZXMpO1xyXG59KTtcclxuIl19