import { __extends } from "tslib";
import { EntityFailAction, EntityLoadAction, EntitySuccessAction, } from '../../../state/utils/entity-loader/entity-loader.action';
import { getCartIdByUserId } from '../../utils/utils';
import { MULTI_CART_DATA } from '../multi-cart-state';
export var CREATE_WISH_LIST = '[Wish List] Create Wish List';
export var CREATE_WISH_LIST_FAIL = '[Wish List] Create Wish List Fail';
export var CREATE_WISH_LIST_SUCCESS = '[Wish List] Create Wish List Success';
export var LOAD_WISH_LIST = '[Wish List] Load Wish List';
export var LOAD_WISH_LIST_SUCCESS = '[Wish List] Load Wish List Success';
export var LOAD_WISH_LIST_FAIL = '[Wish List] Load Wish List Fail';
export var RESET_WISH_LIST_DETAILS = '[Wish List] Reset Wish List';
var CreateWishList = /** @class */ (function () {
    function CreateWishList(payload) {
        this.payload = payload;
        this.type = CREATE_WISH_LIST;
    }
    return CreateWishList;
}());
export { CreateWishList };
var CreateWishListSuccess = /** @class */ (function (_super) {
    __extends(CreateWishListSuccess, _super);
    function CreateWishListSuccess(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, getCartIdByUserId(payload.cart, payload.userId)) || this;
        _this.payload = payload;
        _this.type = CREATE_WISH_LIST_SUCCESS;
        return _this;
    }
    return CreateWishListSuccess;
}(EntitySuccessAction));
export { CreateWishListSuccess };
var CreateWishListFail = /** @class */ (function (_super) {
    __extends(CreateWishListFail, _super);
    function CreateWishListFail(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, payload.cartId, payload.error) || this;
        _this.payload = payload;
        _this.type = CREATE_WISH_LIST_FAIL;
        return _this;
    }
    return CreateWishListFail;
}(EntityFailAction));
export { CreateWishListFail };
var LoadWishList = /** @class */ (function (_super) {
    __extends(LoadWishList, _super);
    function LoadWishList(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, payload.tempCartId) || this;
        _this.payload = payload;
        _this.type = LOAD_WISH_LIST;
        return _this;
    }
    return LoadWishList;
}(EntityLoadAction));
export { LoadWishList };
var LoadWishListSuccess = /** @class */ (function (_super) {
    __extends(LoadWishListSuccess, _super);
    function LoadWishListSuccess(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
        _this.payload = payload;
        _this.type = LOAD_WISH_LIST_SUCCESS;
        return _this;
    }
    return LoadWishListSuccess;
}(EntitySuccessAction));
export { LoadWishListSuccess };
var LoadWishListFail = /** @class */ (function (_super) {
    __extends(LoadWishListFail, _super);
    function LoadWishListFail(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, payload.cartId, payload.error) || this;
        _this.payload = payload;
        _this.type = LOAD_WISH_LIST_FAIL;
        return _this;
    }
    return LoadWishListFail;
}(EntityFailAction));
export { LoadWishListFail };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lzaC1saXN0LmFjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9jYXJ0L3N0b3JlL2FjdGlvbnMvd2lzaC1saXN0LmFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsT0FBTyxFQUNMLGdCQUFnQixFQUNoQixnQkFBZ0IsRUFDaEIsbUJBQW1CLEdBQ3BCLE1BQU0seURBQXlELENBQUM7QUFDakUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXRELE1BQU0sQ0FBQyxJQUFNLGdCQUFnQixHQUFHLDhCQUE4QixDQUFDO0FBQy9ELE1BQU0sQ0FBQyxJQUFNLHFCQUFxQixHQUFHLG1DQUFtQyxDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxJQUFNLHdCQUF3QixHQUFHLHNDQUFzQyxDQUFDO0FBRS9FLE1BQU0sQ0FBQyxJQUFNLGNBQWMsR0FBRyw0QkFBNEIsQ0FBQztBQUMzRCxNQUFNLENBQUMsSUFBTSxzQkFBc0IsR0FBRyxvQ0FBb0MsQ0FBQztBQUMzRSxNQUFNLENBQUMsSUFBTSxtQkFBbUIsR0FBRyxpQ0FBaUMsQ0FBQztBQUVyRSxNQUFNLENBQUMsSUFBTSx1QkFBdUIsR0FBRyw2QkFBNkIsQ0FBQztBQUVyRTtJQUVFLHdCQUNTLE9BSU47UUFKTSxZQUFPLEdBQVAsT0FBTyxDQUliO1FBTk0sU0FBSSxHQUFHLGdCQUFnQixDQUFDO0lBTzlCLENBQUM7SUFDTixxQkFBQztBQUFELENBQUMsQUFURCxJQVNDOztBQUVEO0lBQTJDLHlDQUFtQjtJQUU1RCwrQkFBbUIsT0FBdUM7UUFBMUQsWUFDRSxrQkFBTSxlQUFlLEVBQUUsaUJBQWlCLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsU0FDeEU7UUFGa0IsYUFBTyxHQUFQLE9BQU8sQ0FBZ0M7UUFEakQsVUFBSSxHQUFHLHdCQUF3QixDQUFDOztJQUd6QyxDQUFDO0lBQ0gsNEJBQUM7QUFBRCxDQUFDLEFBTEQsQ0FBMkMsbUJBQW1CLEdBSzdEOztBQUVEO0lBQXdDLHNDQUFnQjtJQUV0RCw0QkFBbUIsT0FBd0M7UUFBM0QsWUFDRSxrQkFBTSxlQUFlLEVBQUUsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLFNBQ3REO1FBRmtCLGFBQU8sR0FBUCxPQUFPLENBQWlDO1FBRGxELFVBQUksR0FBRyxxQkFBcUIsQ0FBQzs7SUFHdEMsQ0FBQztJQUNILHlCQUFDO0FBQUQsQ0FBQyxBQUxELENBQXdDLGdCQUFnQixHQUt2RDs7QUFlRDtJQUFrQyxnQ0FBZ0I7SUFFaEQsc0JBQW1CLE9BQTRCO1FBQS9DLFlBQ0Usa0JBQU0sZUFBZSxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUMsU0FDM0M7UUFGa0IsYUFBTyxHQUFQLE9BQU8sQ0FBcUI7UUFEdEMsVUFBSSxHQUFHLGNBQWMsQ0FBQzs7SUFHL0IsQ0FBQztJQUNILG1CQUFDO0FBQUQsQ0FBQyxBQUxELENBQWtDLGdCQUFnQixHQUtqRDs7QUFzQkQ7SUFBeUMsdUNBQW1CO0lBRTFELDZCQUFtQixPQUFtQztRQUF0RCxZQUNFLGtCQUFNLGVBQWUsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQ3ZDO1FBRmtCLGFBQU8sR0FBUCxPQUFPLENBQTRCO1FBRDdDLFVBQUksR0FBRyxzQkFBc0IsQ0FBQzs7SUFHdkMsQ0FBQztJQUNILDBCQUFDO0FBQUQsQ0FBQyxBQUxELENBQXlDLG1CQUFtQixHQUszRDs7QUFpQkQ7SUFBc0Msb0NBQWdCO0lBRXBELDBCQUFtQixPQUFnQztRQUFuRCxZQUNFLGtCQUFNLGVBQWUsRUFBRSxPQUFPLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FDdEQ7UUFGa0IsYUFBTyxHQUFQLE9BQU8sQ0FBeUI7UUFEMUMsVUFBSSxHQUFHLG1CQUFtQixDQUFDOztJQUdwQyxDQUFDO0lBQ0gsdUJBQUM7QUFBRCxDQUFDLEFBTEQsQ0FBc0MsZ0JBQWdCLEdBS3JEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5pbXBvcnQgeyBDYXJ0IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY2FydC5tb2RlbCc7XHJcbmltcG9ydCB7XHJcbiAgRW50aXR5RmFpbEFjdGlvbixcclxuICBFbnRpdHlMb2FkQWN0aW9uLFxyXG4gIEVudGl0eVN1Y2Nlc3NBY3Rpb24sXHJcbn0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvZW50aXR5LWxvYWRlci9lbnRpdHktbG9hZGVyLmFjdGlvbic7XHJcbmltcG9ydCB7IGdldENhcnRJZEJ5VXNlcklkIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBNVUxUSV9DQVJUX0RBVEEgfSBmcm9tICcuLi9tdWx0aS1jYXJ0LXN0YXRlJztcclxuXHJcbmV4cG9ydCBjb25zdCBDUkVBVEVfV0lTSF9MSVNUID0gJ1tXaXNoIExpc3RdIENyZWF0ZSBXaXNoIExpc3QnO1xyXG5leHBvcnQgY29uc3QgQ1JFQVRFX1dJU0hfTElTVF9GQUlMID0gJ1tXaXNoIExpc3RdIENyZWF0ZSBXaXNoIExpc3QgRmFpbCc7XHJcbmV4cG9ydCBjb25zdCBDUkVBVEVfV0lTSF9MSVNUX1NVQ0NFU1MgPSAnW1dpc2ggTGlzdF0gQ3JlYXRlIFdpc2ggTGlzdCBTdWNjZXNzJztcclxuXHJcbmV4cG9ydCBjb25zdCBMT0FEX1dJU0hfTElTVCA9ICdbV2lzaCBMaXN0XSBMb2FkIFdpc2ggTGlzdCc7XHJcbmV4cG9ydCBjb25zdCBMT0FEX1dJU0hfTElTVF9TVUNDRVNTID0gJ1tXaXNoIExpc3RdIExvYWQgV2lzaCBMaXN0IFN1Y2Nlc3MnO1xyXG5leHBvcnQgY29uc3QgTE9BRF9XSVNIX0xJU1RfRkFJTCA9ICdbV2lzaCBMaXN0XSBMb2FkIFdpc2ggTGlzdCBGYWlsJztcclxuXHJcbmV4cG9ydCBjb25zdCBSRVNFVF9XSVNIX0xJU1RfREVUQUlMUyA9ICdbV2lzaCBMaXN0XSBSZXNldCBXaXNoIExpc3QnO1xyXG5cclxuZXhwb3J0IGNsYXNzIENyZWF0ZVdpc2hMaXN0IGltcGxlbWVudHMgQWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gQ1JFQVRFX1dJU0hfTElTVDtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyBwYXlsb2FkOiB7XHJcbiAgICAgIHVzZXJJZDogc3RyaW5nO1xyXG4gICAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xyXG4gICAgfVxyXG4gICkge31cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENyZWF0ZVdpc2hMaXN0U3VjY2VzcyBleHRlbmRzIEVudGl0eVN1Y2Nlc3NBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBDUkVBVEVfV0lTSF9MSVNUX1NVQ0NFU1M7XHJcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IHsgY2FydDogQ2FydDsgdXNlcklkOiBzdHJpbmcgfSkge1xyXG4gICAgc3VwZXIoTVVMVElfQ0FSVF9EQVRBLCBnZXRDYXJ0SWRCeVVzZXJJZChwYXlsb2FkLmNhcnQsIHBheWxvYWQudXNlcklkKSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ3JlYXRlV2lzaExpc3RGYWlsIGV4dGVuZHMgRW50aXR5RmFpbEFjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IENSRUFURV9XSVNIX0xJU1RfRkFJTDtcclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogeyBjYXJ0SWQ6IHN0cmluZzsgZXJyb3I/OiBhbnkgfSkge1xyXG4gICAgc3VwZXIoTVVMVElfQ0FSVF9EQVRBLCBwYXlsb2FkLmNhcnRJZCwgcGF5bG9hZC5lcnJvcik7XHJcbiAgfVxyXG59XHJcblxyXG5pbnRlcmZhY2UgTG9hZFdpc2hMaXN0UGF5bG9hZCB7XHJcbiAgdXNlcklkOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVXNlZCB0byBjb21wdXRlIHdpc2hsaXN0IGNhcnQgbmFtZSBhbmQgZmluZCBpdCBpbiBsaXN0IG9mIGFsbCBjYXJ0cy5cclxuICAgKi9cclxuICBjdXN0b21lcklkOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogV2hlbiB3ZSB0cnkgbG9hZCB3aXNobGlzdCBmb3IgdGhlIGZpcnN0IHRpbWUgd2UgZG9uJ3Qga25vdyBjYXJ0IGlkLlxyXG4gICAqIEluc3RlYWQgd2UgY3JlYXRlIHRlbXBvcmFyeSBjYXJ0IHdpdGggaWQgZXF1YWwgdG8gd2lzaGxpc3QgbmFtZSB0byBrZWVwIHRyYWNrIG9mIGxvYWRpbmcvZXJyb3Igc3RhdGUuXHJcbiAgICovXHJcbiAgdGVtcENhcnRJZDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTG9hZFdpc2hMaXN0IGV4dGVuZHMgRW50aXR5TG9hZEFjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfV0lTSF9MSVNUO1xyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBMb2FkV2lzaExpc3RQYXlsb2FkKSB7XHJcbiAgICBzdXBlcihNVUxUSV9DQVJUX0RBVEEsIHBheWxvYWQudGVtcENhcnRJZCk7XHJcbiAgfVxyXG59XHJcblxyXG5pbnRlcmZhY2UgTG9hZFdpc2hMaXN0U3VjY2Vzc1BheWxvYWQge1xyXG4gIGNhcnQ6IENhcnQ7XHJcbiAgdXNlcklkOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogV2hlbiBMb2FkV2lzaExpc3RTdWNjZXNzIGFjdGlvbiB3YXMgZGlzcGF0Y2hlZCBhcyBhbiBjb21wbGV0aW9uIHRvIExvYWRXaXNoTGlzdCBhY3Rpb25cclxuICAgKiB3ZSBnZXQgdGVtcG9yYXJ5IGNhcnRJZCB0aGF0IHdhcyB1c2VkIHRvIGtlZXAgdHJhY2sgb2YgbG9hZGluZyBzdGF0ZS5cclxuICAgKiBJbiBjYXNlIG9mIGxvYWRpbmcgd2lzaCBsaXN0IHdpdGgga25vd24gY2FydElkIHRoaXMgcHJvcGVydHkgd2lsbCBiZSBlbXB0eS5cclxuICAgKi9cclxuICB0ZW1wQ2FydElkPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFVzZWQgdG8gY29tcHV0ZSB3aXNobGlzdCBjYXJ0IG5hbWUgYW5kIGZpbmQgaXQgaW4gbGlzdCBvZiBhbGwgY2FydHMuXHJcbiAgICogSW4gY2FzZSBvZiBsb2FkaW5nIHdpc2ggbGlzdCB3aXRoIGtub3duIGNhcnRJZCB0aGlzIHByb3BlcnR5IHdpbGwgYmUgZW1wdHkuXHJcbiAgICovXHJcbiAgY3VzdG9tZXJJZD86IHN0cmluZztcclxuICAvKipcclxuICAgKiBXaXNoIGxpc3QgY2FydCBpZC4gRXh0cmFjdGVkIGZyb20gY2FydCBjb250ZW50IChjb2RlIHByb3BlcnR5KS5cclxuICAgKi9cclxuICBjYXJ0SWQ6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExvYWRXaXNoTGlzdFN1Y2Nlc3MgZXh0ZW5kcyBFbnRpdHlTdWNjZXNzQWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gTE9BRF9XSVNIX0xJU1RfU1VDQ0VTUztcclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogTG9hZFdpc2hMaXN0U3VjY2Vzc1BheWxvYWQpIHtcclxuICAgIHN1cGVyKE1VTFRJX0NBUlRfREFUQSwgcGF5bG9hZC5jYXJ0SWQpO1xyXG4gIH1cclxufVxyXG5cclxuaW50ZXJmYWNlIExvYWRXaXNoTGlzdEZhaWxQYXlsb2FkIHtcclxuICB1c2VySWQ6IHN0cmluZztcclxuICAvKipcclxuICAgKiBVc2VkIHRvIGNvbXB1dGUgd2lzaGxpc3QgY2FydCBuYW1lIGFuZCBmaW5kIGl0IGluIGxpc3Qgb2YgYWxsIGNhcnRzLlxyXG4gICAqIEluIGNhc2Ugb2YgbG9hZGluZyB3aXNoIGxpc3Qgd2l0aCBrbm93biBjYXJ0SWQgdGhpcyBwcm9wZXJ0eSB3aWxsIGJlIGVtcHR5LlxyXG4gICAqL1xyXG4gIGN1c3RvbWVySWQ/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogQ2FydCBpZCB1c2VkIGFzIGEgc3RvcmUgZW50aXR5IGtleS4gVGhpcyBjb3VsZCBwb2ludCBlaXRoZXIgdG8gc29tZVxyXG4gICAqIHRlbXBvcmFyeSBjYXJ0IHVzZWQgdG8gdHJhY2sgbG9hZGluZy9lcnJvciBzdGF0ZSBvciB0byBub3JtYWwgd2lzaCBsaXN0IGVudGl0eS5cclxuICAgKi9cclxuICBjYXJ0SWQ6IHN0cmluZztcclxuICBlcnJvcjogYW55O1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTG9hZFdpc2hMaXN0RmFpbCBleHRlbmRzIEVudGl0eUZhaWxBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX1dJU0hfTElTVF9GQUlMO1xyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBMb2FkV2lzaExpc3RGYWlsUGF5bG9hZCkge1xyXG4gICAgc3VwZXIoTVVMVElfQ0FSVF9EQVRBLCBwYXlsb2FkLmNhcnRJZCwgcGF5bG9hZC5lcnJvcik7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBXaXNoTGlzdEFjdGlvbnMgPVxyXG4gIHwgQ3JlYXRlV2lzaExpc3RcclxuICB8IENyZWF0ZVdpc2hMaXN0U3VjY2Vzc1xyXG4gIHwgQ3JlYXRlV2lzaExpc3RGYWlsXHJcbiAgfCBMb2FkV2lzaExpc3RcclxuICB8IExvYWRXaXNoTGlzdFN1Y2Nlc3NcclxuICB8IExvYWRXaXNoTGlzdEZhaWw7XHJcbiJdfQ==