import { __assign, __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { from } from 'rxjs';
import { catchError, concatMap, map } from 'rxjs/operators';
import { SiteContextActions } from '../../../site-context/store/actions/index';
import { makeErrorSerializable } from '../../../util/serialization-utils';
import { withdrawOn } from '../../../util/withdraw-on';
import { CartEntryConnector } from '../../connectors/entry/cart-entry.connector';
import { CartActions } from '../actions/index';
var CartEntryEffects = /** @class */ (function () {
    function CartEntryEffects(actions$, cartEntryConnector) {
        var _this = this;
        this.actions$ = actions$;
        this.cartEntryConnector = cartEntryConnector;
        this.contextChange$ = this.actions$.pipe(ofType(SiteContextActions.CURRENCY_CHANGE, SiteContextActions.LANGUAGE_CHANGE));
        this.addEntry$ = this.actions$.pipe(ofType(CartActions.CART_ADD_ENTRY), map(function (action) { return action.payload; }), concatMap(function (payload) {
            return _this.cartEntryConnector
                .add(payload.userId, payload.cartId, payload.productCode, payload.quantity)
                .pipe(map(function (cartModification) {
                return new CartActions.CartAddEntrySuccess(__assign(__assign({}, payload), cartModification));
            }), catchError(function (error) {
                return from([
                    new CartActions.CartAddEntryFail(__assign(__assign({}, payload), { error: makeErrorSerializable(error) })),
                    new CartActions.LoadCart({
                        cartId: payload.cartId,
                        userId: payload.userId,
                    }),
                ]);
            }));
        }), withdrawOn(this.contextChange$));
        this.removeEntry$ = this.actions$.pipe(ofType(CartActions.CART_REMOVE_ENTRY), map(function (action) { return action.payload; }), concatMap(function (payload) {
            return _this.cartEntryConnector
                .remove(payload.userId, payload.cartId, payload.entryNumber)
                .pipe(map(function () {
                return new CartActions.CartRemoveEntrySuccess(__assign({}, payload));
            }), catchError(function (error) {
                return from([
                    new CartActions.CartRemoveEntryFail(__assign(__assign({}, payload), { error: makeErrorSerializable(error) })),
                    new CartActions.LoadCart({
                        cartId: payload.cartId,
                        userId: payload.userId,
                    }),
                ]);
            }));
        }), withdrawOn(this.contextChange$));
        this.updateEntry$ = this.actions$.pipe(ofType(CartActions.CART_UPDATE_ENTRY), map(function (action) { return action.payload; }), concatMap(function (payload) {
            return _this.cartEntryConnector
                .update(payload.userId, payload.cartId, payload.entryNumber, payload.quantity)
                .pipe(map(function () {
                return new CartActions.CartUpdateEntrySuccess(__assign({}, payload));
            }), catchError(function (error) {
                return from([
                    new CartActions.CartUpdateEntryFail(__assign(__assign({}, payload), { error: makeErrorSerializable(error) })),
                    new CartActions.LoadCart({
                        cartId: payload.cartId,
                        userId: payload.userId,
                    }),
                ]);
            }));
        }), withdrawOn(this.contextChange$));
    }
    CartEntryEffects.ctorParameters = function () { return [
        { type: Actions },
        { type: CartEntryConnector }
    ]; };
    __decorate([
        Effect()
    ], CartEntryEffects.prototype, "addEntry$", void 0);
    __decorate([
        Effect()
    ], CartEntryEffects.prototype, "removeEntry$", void 0);
    __decorate([
        Effect()
    ], CartEntryEffects.prototype, "updateEntry$", void 0);
    CartEntryEffects = __decorate([
        Injectable()
    ], CartEntryEffects);
    return CartEntryEffects;
}());
export { CartEntryEffects };
//# sourceMappingURL=data:application/json;base64,