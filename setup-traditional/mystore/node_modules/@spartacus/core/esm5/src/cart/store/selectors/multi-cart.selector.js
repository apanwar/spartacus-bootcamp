import { createFeatureSelector, createSelector, } from '@ngrx/store';
import { entityValueSelector } from '../../../state/utils/entity-loader/entity-loader.selectors';
import { entityHasPendingProcessesSelector, entityIsStableSelector, entityProcessesLoaderStateSelector, } from '../../../state/utils/entity-processes-loader/entity-processes-loader.selectors';
import { MULTI_CART_FEATURE, } from '../multi-cart-state';
export var getMultiCartState = createFeatureSelector(MULTI_CART_FEATURE);
var ɵ0 = function (state) { return state.carts; };
export var getMultiCartEntities = createSelector(getMultiCartState, ɵ0);
export var getCartEntitySelectorFactory = function (cartId) {
    return createSelector(getMultiCartEntities, function (state) {
        return entityProcessesLoaderStateSelector(state, cartId);
    });
};
export var getCartSelectorFactory = function (cartId) {
    return createSelector(getMultiCartEntities, function (state) {
        return entityValueSelector(state, cartId);
    });
};
export var getCartIsStableSelectorFactory = function (cartId) {
    return createSelector(getMultiCartEntities, function (state) {
        return entityIsStableSelector(state, cartId);
    });
};
export var getCartHasPendingProcessesSelectorFactory = function (cartId) {
    return createSelector(getMultiCartEntities, function (state) {
        return entityHasPendingProcessesSelector(state, cartId);
    });
};
export var getCartEntriesSelectorFactory = function (cartId) {
    return createSelector(getCartSelectorFactory(cartId), function (state) {
        return state && state.entries ? state.entries : [];
    });
};
export var getCartEntrySelectorFactory = function (cartId, productCode) {
    return createSelector(getCartEntriesSelectorFactory(cartId), function (state) {
        return state
            ? state.find(function (entry) { return entry.product.code === productCode; })
            : undefined;
    });
};
var ɵ1 = function (state) { return state.active; };
export var getActiveCartId = createSelector(getMultiCartState, ɵ1);
var ɵ2 = function (state) { return state.wishList; };
export var getWishListId = createSelector(getMultiCartState, ɵ2);
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktY2FydC5zZWxlY3Rvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9jYXJ0L3N0b3JlL3NlbGVjdG9ycy9tdWx0aS1jYXJ0LnNlbGVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxxQkFBcUIsRUFDckIsY0FBYyxHQUVmLE1BQU0sYUFBYSxDQUFDO0FBR3JCLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDREQUE0RCxDQUFDO0FBRWpHLE9BQU8sRUFDTCxpQ0FBaUMsRUFDakMsc0JBQXNCLEVBQ3RCLGtDQUFrQyxHQUNuQyxNQUFNLGdGQUFnRixDQUFDO0FBRXhGLE9BQU8sRUFFTCxrQkFBa0IsR0FFbkIsTUFBTSxxQkFBcUIsQ0FBQztBQUU3QixNQUFNLENBQUMsSUFBTSxpQkFBaUIsR0FHMUIscUJBQXFCLENBQWlCLGtCQUFrQixDQUFDLENBQUM7U0FLeEIsVUFBQyxLQUFxQixJQUFLLE9BQUEsS0FBSyxDQUFDLEtBQUssRUFBWCxDQUFXO0FBSDVFLE1BQU0sQ0FBQyxJQUFNLG9CQUFvQixHQUc3QixjQUFjLENBQUMsaUJBQWlCLEtBQXlDLENBQUM7QUFFOUUsTUFBTSxDQUFDLElBQU0sNEJBQTRCLEdBQUcsVUFDMUMsTUFBYztJQUVkLE9BQU8sY0FBYyxDQUNuQixvQkFBb0IsRUFDcEIsVUFBQyxLQUF1QztRQUN0QyxPQUFBLGtDQUFrQyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUM7SUFBakQsQ0FBaUQsQ0FDcEQsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLHNCQUFzQixHQUFHLFVBQ3BDLE1BQWM7SUFFZCxPQUFPLGNBQWMsQ0FDbkIsb0JBQW9CLEVBQ3BCLFVBQUMsS0FBdUM7UUFDdEMsT0FBQSxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDO0lBQWxDLENBQWtDLENBQ3JDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSw4QkFBOEIsR0FBRyxVQUM1QyxNQUFjO0lBRWQsT0FBTyxjQUFjLENBQ25CLG9CQUFvQixFQUNwQixVQUFDLEtBQXVDO1FBQ3RDLE9BQUEsc0JBQXNCLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQztJQUFyQyxDQUFxQyxDQUN4QyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0seUNBQXlDLEdBQUcsVUFDdkQsTUFBYztJQUVkLE9BQU8sY0FBYyxDQUNuQixvQkFBb0IsRUFDcEIsVUFBQyxLQUF1QztRQUN0QyxPQUFBLGlDQUFpQyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUM7SUFBaEQsQ0FBZ0QsQ0FDbkQsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLDZCQUE2QixHQUFHLFVBQzNDLE1BQWM7SUFFZCxPQUFPLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsRUFBRSxVQUFDLEtBQVc7UUFDaEUsT0FBTyxLQUFLLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3JELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sMkJBQTJCLEdBQUcsVUFDekMsTUFBYyxFQUNkLFdBQW1CO0lBRW5CLE9BQU8sY0FBYyxDQUNuQiw2QkFBNkIsQ0FBQyxNQUFNLENBQUMsRUFDckMsVUFBQyxLQUFtQjtRQUNsQixPQUFPLEtBQUs7WUFDVixDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFDLEtBQUssSUFBSyxPQUFBLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLFdBQVcsRUFBbEMsQ0FBa0MsQ0FBQztZQUMzRCxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQ2hCLENBQUMsQ0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDO1NBS29DLFVBQUMsS0FBcUIsSUFBSyxPQUFBLEtBQUssQ0FBQyxNQUFNLEVBQVosQ0FBWTtBQUg3RSxNQUFNLENBQUMsSUFBTSxlQUFlLEdBR3hCLGNBQWMsQ0FBQyxpQkFBaUIsS0FBMEMsQ0FBQztTQU83RSxVQUFDLEtBQXFCLElBQUssT0FBQSxLQUFLLENBQUMsUUFBUSxFQUFkLENBQWM7QUFMM0MsTUFBTSxDQUFDLElBQU0sYUFBYSxHQUd0QixjQUFjLENBQ2hCLGlCQUFpQixLQUVsQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBjcmVhdGVGZWF0dXJlU2VsZWN0b3IsXHJcbiAgY3JlYXRlU2VsZWN0b3IsXHJcbiAgTWVtb2l6ZWRTZWxlY3RvcixcclxufSBmcm9tICdAbmdyeC9zdG9yZSc7XHJcbmltcG9ydCB7IENhcnQgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9jYXJ0Lm1vZGVsJztcclxuaW1wb3J0IHsgT3JkZXJFbnRyeSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL29yZGVyLm1vZGVsJztcclxuaW1wb3J0IHsgZW50aXR5VmFsdWVTZWxlY3RvciB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2VudGl0eS1sb2FkZXIvZW50aXR5LWxvYWRlci5zZWxlY3RvcnMnO1xyXG5pbXBvcnQgeyBFbnRpdHlQcm9jZXNzZXNMb2FkZXJTdGF0ZSB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2VudGl0eS1wcm9jZXNzZXMtbG9hZGVyL2VudGl0eS1wcm9jZXNzZXMtbG9hZGVyLXN0YXRlJztcclxuaW1wb3J0IHtcclxuICBlbnRpdHlIYXNQZW5kaW5nUHJvY2Vzc2VzU2VsZWN0b3IsXHJcbiAgZW50aXR5SXNTdGFibGVTZWxlY3RvcixcclxuICBlbnRpdHlQcm9jZXNzZXNMb2FkZXJTdGF0ZVNlbGVjdG9yLFxyXG59IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2VudGl0eS1wcm9jZXNzZXMtbG9hZGVyL2VudGl0eS1wcm9jZXNzZXMtbG9hZGVyLnNlbGVjdG9ycyc7XHJcbmltcG9ydCB7IFByb2Nlc3Nlc0xvYWRlclN0YXRlIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvcHJvY2Vzc2VzLWxvYWRlci9wcm9jZXNzZXMtbG9hZGVyLXN0YXRlJztcclxuaW1wb3J0IHtcclxuICBNdWx0aUNhcnRTdGF0ZSxcclxuICBNVUxUSV9DQVJUX0ZFQVRVUkUsXHJcbiAgU3RhdGVXaXRoTXVsdGlDYXJ0LFxyXG59IGZyb20gJy4uL211bHRpLWNhcnQtc3RhdGUnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldE11bHRpQ2FydFN0YXRlOiBNZW1vaXplZFNlbGVjdG9yPFxyXG4gIFN0YXRlV2l0aE11bHRpQ2FydCxcclxuICBNdWx0aUNhcnRTdGF0ZVxyXG4+ID0gY3JlYXRlRmVhdHVyZVNlbGVjdG9yPE11bHRpQ2FydFN0YXRlPihNVUxUSV9DQVJUX0ZFQVRVUkUpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldE11bHRpQ2FydEVudGl0aWVzOiBNZW1vaXplZFNlbGVjdG9yPFxyXG4gIFN0YXRlV2l0aE11bHRpQ2FydCxcclxuICBFbnRpdHlQcm9jZXNzZXNMb2FkZXJTdGF0ZTxDYXJ0PlxyXG4+ID0gY3JlYXRlU2VsZWN0b3IoZ2V0TXVsdGlDYXJ0U3RhdGUsIChzdGF0ZTogTXVsdGlDYXJ0U3RhdGUpID0+IHN0YXRlLmNhcnRzKTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRDYXJ0RW50aXR5U2VsZWN0b3JGYWN0b3J5ID0gKFxyXG4gIGNhcnRJZDogc3RyaW5nXHJcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoTXVsdGlDYXJ0LCBQcm9jZXNzZXNMb2FkZXJTdGF0ZTxDYXJ0Pj4gPT4ge1xyXG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcclxuICAgIGdldE11bHRpQ2FydEVudGl0aWVzLFxyXG4gICAgKHN0YXRlOiBFbnRpdHlQcm9jZXNzZXNMb2FkZXJTdGF0ZTxDYXJ0PikgPT5cclxuICAgICAgZW50aXR5UHJvY2Vzc2VzTG9hZGVyU3RhdGVTZWxlY3RvcihzdGF0ZSwgY2FydElkKVxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0Q2FydFNlbGVjdG9yRmFjdG9yeSA9IChcclxuICBjYXJ0SWQ6IHN0cmluZ1xyXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aE11bHRpQ2FydCwgQ2FydD4gPT4ge1xyXG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcclxuICAgIGdldE11bHRpQ2FydEVudGl0aWVzLFxyXG4gICAgKHN0YXRlOiBFbnRpdHlQcm9jZXNzZXNMb2FkZXJTdGF0ZTxDYXJ0PikgPT5cclxuICAgICAgZW50aXR5VmFsdWVTZWxlY3RvcihzdGF0ZSwgY2FydElkKVxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0Q2FydElzU3RhYmxlU2VsZWN0b3JGYWN0b3J5ID0gKFxyXG4gIGNhcnRJZDogc3RyaW5nXHJcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoTXVsdGlDYXJ0LCBib29sZWFuPiA9PiB7XHJcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxyXG4gICAgZ2V0TXVsdGlDYXJ0RW50aXRpZXMsXHJcbiAgICAoc3RhdGU6IEVudGl0eVByb2Nlc3Nlc0xvYWRlclN0YXRlPENhcnQ+KSA9PlxyXG4gICAgICBlbnRpdHlJc1N0YWJsZVNlbGVjdG9yKHN0YXRlLCBjYXJ0SWQpXHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRDYXJ0SGFzUGVuZGluZ1Byb2Nlc3Nlc1NlbGVjdG9yRmFjdG9yeSA9IChcclxuICBjYXJ0SWQ6IHN0cmluZ1xyXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aE11bHRpQ2FydCwgYm9vbGVhbj4gPT4ge1xyXG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcclxuICAgIGdldE11bHRpQ2FydEVudGl0aWVzLFxyXG4gICAgKHN0YXRlOiBFbnRpdHlQcm9jZXNzZXNMb2FkZXJTdGF0ZTxDYXJ0PikgPT5cclxuICAgICAgZW50aXR5SGFzUGVuZGluZ1Byb2Nlc3Nlc1NlbGVjdG9yKHN0YXRlLCBjYXJ0SWQpXHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRDYXJ0RW50cmllc1NlbGVjdG9yRmFjdG9yeSA9IChcclxuICBjYXJ0SWQ6IHN0cmluZ1xyXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aE11bHRpQ2FydCwgT3JkZXJFbnRyeVtdPiA9PiB7XHJcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKGdldENhcnRTZWxlY3RvckZhY3RvcnkoY2FydElkKSwgKHN0YXRlOiBDYXJ0KSA9PiB7XHJcbiAgICByZXR1cm4gc3RhdGUgJiYgc3RhdGUuZW50cmllcyA/IHN0YXRlLmVudHJpZXMgOiBbXTtcclxuICB9KTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRDYXJ0RW50cnlTZWxlY3RvckZhY3RvcnkgPSAoXHJcbiAgY2FydElkOiBzdHJpbmcsXHJcbiAgcHJvZHVjdENvZGU6IHN0cmluZ1xyXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aE11bHRpQ2FydCwgT3JkZXJFbnRyeT4gPT4ge1xyXG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcclxuICAgIGdldENhcnRFbnRyaWVzU2VsZWN0b3JGYWN0b3J5KGNhcnRJZCksXHJcbiAgICAoc3RhdGU6IE9yZGVyRW50cnlbXSkgPT4ge1xyXG4gICAgICByZXR1cm4gc3RhdGVcclxuICAgICAgICA/IHN0YXRlLmZpbmQoKGVudHJ5KSA9PiBlbnRyeS5wcm9kdWN0LmNvZGUgPT09IHByb2R1Y3RDb2RlKVxyXG4gICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0QWN0aXZlQ2FydElkOiBNZW1vaXplZFNlbGVjdG9yPFxyXG4gIFN0YXRlV2l0aE11bHRpQ2FydCxcclxuICBzdHJpbmdcclxuPiA9IGNyZWF0ZVNlbGVjdG9yKGdldE11bHRpQ2FydFN0YXRlLCAoc3RhdGU6IE11bHRpQ2FydFN0YXRlKSA9PiBzdGF0ZS5hY3RpdmUpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFdpc2hMaXN0SWQ6IE1lbW9pemVkU2VsZWN0b3I8XHJcbiAgU3RhdGVXaXRoTXVsdGlDYXJ0LFxyXG4gIHN0cmluZ1xyXG4+ID0gY3JlYXRlU2VsZWN0b3IoXHJcbiAgZ2V0TXVsdGlDYXJ0U3RhdGUsXHJcbiAgKHN0YXRlOiBNdWx0aUNhcnRTdGF0ZSkgPT4gc3RhdGUud2lzaExpc3RcclxuKTtcclxuIl19