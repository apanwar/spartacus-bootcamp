import { __extends } from "tslib";
import { EntityProcessesDecrementAction, EntityProcessesIncrementAction, } from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';
import { MULTI_CART_DATA } from '../multi-cart-state';
export var CART_ADD_ENTRY = '[Cart-entry] Add Entry';
export var CART_ADD_ENTRY_SUCCESS = '[Cart-entry] Add Entry Success';
export var CART_ADD_ENTRY_FAIL = '[Cart-entry] Add Entry Fail';
export var CART_REMOVE_ENTRY = '[Cart-entry] Remove Entry';
export var CART_REMOVE_ENTRY_SUCCESS = '[Cart-entry] Remove Entry Success';
export var CART_REMOVE_ENTRY_FAIL = '[Cart-entry] Remove Entry Fail';
export var CART_UPDATE_ENTRY = '[Cart-entry] Update Entry';
export var CART_UPDATE_ENTRY_SUCCESS = '[Cart-entry] Update Entry Success';
export var CART_UPDATE_ENTRY_FAIL = '[Cart-entry] Update Entry Fail';
var CartAddEntry = /** @class */ (function (_super) {
    __extends(CartAddEntry, _super);
    function CartAddEntry(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
        _this.payload = payload;
        _this.type = CART_ADD_ENTRY;
        return _this;
    }
    return CartAddEntry;
}(EntityProcessesIncrementAction));
export { CartAddEntry };
var CartAddEntrySuccess = /** @class */ (function (_super) {
    __extends(CartAddEntrySuccess, _super);
    function CartAddEntrySuccess(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
        _this.payload = payload;
        _this.type = CART_ADD_ENTRY_SUCCESS;
        return _this;
    }
    return CartAddEntrySuccess;
}(EntityProcessesDecrementAction));
export { CartAddEntrySuccess };
var CartAddEntryFail = /** @class */ (function (_super) {
    __extends(CartAddEntryFail, _super);
    function CartAddEntryFail(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
        _this.payload = payload;
        _this.type = CART_ADD_ENTRY_FAIL;
        return _this;
    }
    return CartAddEntryFail;
}(EntityProcessesDecrementAction));
export { CartAddEntryFail };
var CartRemoveEntry = /** @class */ (function (_super) {
    __extends(CartRemoveEntry, _super);
    function CartRemoveEntry(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
        _this.payload = payload;
        _this.type = CART_REMOVE_ENTRY;
        return _this;
    }
    return CartRemoveEntry;
}(EntityProcessesIncrementAction));
export { CartRemoveEntry };
var CartRemoveEntrySuccess = /** @class */ (function (_super) {
    __extends(CartRemoveEntrySuccess, _super);
    function CartRemoveEntrySuccess(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
        _this.payload = payload;
        _this.type = CART_REMOVE_ENTRY_SUCCESS;
        return _this;
    }
    return CartRemoveEntrySuccess;
}(EntityProcessesDecrementAction));
export { CartRemoveEntrySuccess };
var CartRemoveEntryFail = /** @class */ (function (_super) {
    __extends(CartRemoveEntryFail, _super);
    function CartRemoveEntryFail(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
        _this.payload = payload;
        _this.type = CART_REMOVE_ENTRY_FAIL;
        return _this;
    }
    return CartRemoveEntryFail;
}(EntityProcessesDecrementAction));
export { CartRemoveEntryFail };
var CartUpdateEntry = /** @class */ (function (_super) {
    __extends(CartUpdateEntry, _super);
    function CartUpdateEntry(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
        _this.payload = payload;
        _this.type = CART_UPDATE_ENTRY;
        return _this;
    }
    return CartUpdateEntry;
}(EntityProcessesIncrementAction));
export { CartUpdateEntry };
var CartUpdateEntrySuccess = /** @class */ (function (_super) {
    __extends(CartUpdateEntrySuccess, _super);
    function CartUpdateEntrySuccess(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
        _this.payload = payload;
        _this.type = CART_UPDATE_ENTRY_SUCCESS;
        return _this;
    }
    return CartUpdateEntrySuccess;
}(EntityProcessesDecrementAction));
export { CartUpdateEntrySuccess };
var CartUpdateEntryFail = /** @class */ (function (_super) {
    __extends(CartUpdateEntryFail, _super);
    function CartUpdateEntryFail(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
        _this.payload = payload;
        _this.type = CART_UPDATE_ENTRY_FAIL;
        return _this;
    }
    return CartUpdateEntryFail;
}(EntityProcessesDecrementAction));
export { CartUpdateEntryFail };
//# sourceMappingURL=data:application/json;base64,