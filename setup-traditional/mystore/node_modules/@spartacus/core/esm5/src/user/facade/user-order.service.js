import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { select, Store } from '@ngrx/store';
import { map, tap } from 'rxjs/operators';
import { AuthService } from '../../auth/facade/auth.service';
import { getProcessLoadingFactory, getProcessSuccessFactory, } from '../../process/store/selectors/process.selectors';
import { UserActions } from '../store/actions/index';
import { UsersSelectors } from '../store/selectors/index';
import { CANCEL_ORDER_PROCESS_ID } from '../store/user-state';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "../../auth/facade/auth.service";
var UserOrderService = /** @class */ (function () {
    function UserOrderService(store, authService) {
        this.store = store;
        this.authService = authService;
    }
    /**
     * Returns an order's detail
     */
    UserOrderService.prototype.getOrderDetails = function () {
        return this.store.pipe(select(UsersSelectors.getOrderDetails));
    };
    /**
     * Retrieves order's details
     *
     * @param orderCode an order code
     */
    UserOrderService.prototype.loadOrderDetails = function (orderCode) {
        var _this = this;
        this.authService.invokeWithUserId(function (userId) {
            _this.store.dispatch(new UserActions.LoadOrderDetails({
                userId: userId,
                orderCode: orderCode,
            }));
        });
    };
    /**
     * Clears order's details
     */
    UserOrderService.prototype.clearOrderDetails = function () {
        this.store.dispatch(new UserActions.ClearOrderDetails());
    };
    /**
     * Returns order history list
     */
    UserOrderService.prototype.getOrderHistoryList = function (pageSize) {
        var _this = this;
        return this.store.pipe(select(UsersSelectors.getOrdersState), tap(function (orderListState) {
            var attemptedLoad = orderListState.loading ||
                orderListState.success ||
                orderListState.error;
            if (!attemptedLoad) {
                _this.loadOrderList(pageSize);
            }
        }), map(function (orderListState) { return orderListState.value; }));
    };
    /**
     * Returns a loaded flag for order history list
     */
    UserOrderService.prototype.getOrderHistoryListLoaded = function () {
        return this.store.pipe(select(UsersSelectors.getOrdersLoaded));
    };
    /**
     * Retrieves an order list
     * @param pageSize page size
     * @param currentPage current page
     * @param sort sort
     */
    UserOrderService.prototype.loadOrderList = function (pageSize, currentPage, sort) {
        var _this = this;
        this.authService.invokeWithUserId(function (userId) {
            _this.store.dispatch(new UserActions.LoadUserOrders({
                userId: userId,
                pageSize: pageSize,
                currentPage: currentPage,
                sort: sort,
            }));
        });
    };
    /**
     * Cleaning order list
     */
    UserOrderService.prototype.clearOrderList = function () {
        this.store.dispatch(new UserActions.ClearUserOrders());
    };
    /**
     *  Returns a consignment tracking detail
     */
    UserOrderService.prototype.getConsignmentTracking = function () {
        return this.store.pipe(select(UsersSelectors.getConsignmentTracking));
    };
    /**
     * Retrieves consignment tracking details
     * @param orderCode an order code
     * @param consignmentCode a consignment code
     */
    UserOrderService.prototype.loadConsignmentTracking = function (orderCode, consignmentCode) {
        var _this = this;
        this.authService.invokeWithUserId(function (userId) {
            _this.store.dispatch(new UserActions.LoadConsignmentTracking({
                userId: userId,
                orderCode: orderCode,
                consignmentCode: consignmentCode,
            }));
        });
    };
    /**
     * Cleaning consignment tracking
     */
    UserOrderService.prototype.clearConsignmentTracking = function () {
        this.store.dispatch(new UserActions.ClearConsignmentTracking());
    };
    /*
     * Cancel an order
     */
    UserOrderService.prototype.cancelOrder = function (orderCode, cancelRequestInput) {
        var _this = this;
        this.authService.invokeWithUserId(function (userId) {
            _this.store.dispatch(new UserActions.CancelOrder({
                userId: userId,
                orderCode: orderCode,
                cancelRequestInput: cancelRequestInput,
            }));
        });
    };
    /**
     * Returns the cancel order loading flag
     */
    UserOrderService.prototype.getCancelOrderLoading = function () {
        return this.store.pipe(select(getProcessLoadingFactory(CANCEL_ORDER_PROCESS_ID)));
    };
    /**
     * Returns the cancel order success flag
     */
    UserOrderService.prototype.getCancelOrderSuccess = function () {
        return this.store.pipe(select(getProcessSuccessFactory(CANCEL_ORDER_PROCESS_ID)));
    };
    /**
     * Resets the cancel order process flags
     */
    UserOrderService.prototype.resetCancelOrderProcessState = function () {
        return this.store.dispatch(new UserActions.ResetCancelOrderProcess());
    };
    UserOrderService.ctorParameters = function () { return [
        { type: Store },
        { type: AuthService }
    ]; };
    UserOrderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserOrderService_Factory() { return new UserOrderService(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.AuthService)); }, token: UserOrderService, providedIn: "root" });
    UserOrderService = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], UserOrderService);
    return UserOrderService;
}());
export { UserOrderService };
//# sourceMappingURL=data:application/json;base64,