import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { merge } from 'rxjs';
import { distinctUntilChanged, map } from 'rxjs/operators';
import { AnonymousConsentsService } from '../../anonymous-consents/index';
import { UserConsentService } from './user-consent.service';
import * as i0 from "@angular/core";
import * as i1 from "../../anonymous-consents/facade/anonymous-consents.service";
import * as i2 from "./user-consent.service";
/**
 * Unified facade for both anonymous and registered user consents.
 */
var ConsentService = /** @class */ (function () {
    function ConsentService(anonymousConsentsService, userConsentService) {
        this.anonymousConsentsService = anonymousConsentsService;
        this.userConsentService = userConsentService;
    }
    /**
     * Returns either anonymous consent or registered consent as they are emmited.
     * @param templateCode for which to return either anonymous or registered consent.
     */
    ConsentService.prototype.getConsent = function (templateCode) {
        return merge(this.userConsentService.getConsent(templateCode), this.anonymousConsentsService.getConsent(templateCode));
    };
    /**
     * Checks if the `templateId`'s template has a given consent.
     * The method returns `false` if the consent doesn't exist or if it's withdrawn. Otherwise, `true` is returned.
     *
     * @param templateId of a template which's consent should be checked
     */
    ConsentService.prototype.checkConsentGivenByTemplateId = function (templateId) {
        var _this = this;
        return this.getConsent(templateId).pipe(map(function (consent) {
            if (!consent) {
                return false;
            }
            return _this.isAnonymousConsentType(consent)
                ? _this.anonymousConsentsService.isConsentGiven(consent)
                : _this.userConsentService.isConsentGiven(consent);
        }), distinctUntilChanged());
    };
    /**
     * Checks if the `templateId`'s template has a withdrawn consent.
     * The method returns `true` if the consent doesn't exist or if it's withdrawn. Otherwise, `false` is returned.
     *
     * @param templateId of a template which's consent should be checked
     */
    ConsentService.prototype.checkConsentWithdrawnByTemplateId = function (templateId) {
        var _this = this;
        return this.getConsent(templateId).pipe(map(function (consent) {
            if (!consent) {
                return true;
            }
            return _this.isAnonymousConsentType(consent)
                ? _this.anonymousConsentsService.isConsentWithdrawn(consent)
                : _this.userConsentService.isConsentWithdrawn(consent);
        }), distinctUntilChanged());
    };
    /**
     *
     * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentGiven(consent)` or `this.userConsentService.isConsentGiven`
     *
     * @param consent a consent to check
     */
    ConsentService.prototype.isConsentGiven = function (consent) {
        return this.isAnonymousConsentType(consent)
            ? this.anonymousConsentsService.isConsentGiven(consent)
            : this.userConsentService.isConsentGiven(consent);
    };
    /**
     *
     * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentWithdrawn(consent)` or `this.userConsentService.isConsentWithdrawn`
     *
     * @param consent a consent to check
     */
    ConsentService.prototype.isConsentWithdrawn = function (consent) {
        return this.isAnonymousConsentType(consent)
            ? this.anonymousConsentsService.isConsentWithdrawn(consent)
            : this.userConsentService.isConsentWithdrawn(consent);
    };
    /**
     * Returns `true` if the provided consent is of type `AnonymousConsent`. Otherwise, `false` is returned.
     */
    ConsentService.prototype.isAnonymousConsentType = function (consent) {
        if (!consent) {
            return false;
        }
        return consent.templateCode !== undefined;
    };
    /**
     * Returns `true` if the provided consent is of type `Consent`. Otherwise, `false` is returned.
     */
    ConsentService.prototype.isConsentType = function (consent) {
        if (!consent) {
            return false;
        }
        return consent.code !== undefined;
    };
    ConsentService.ctorParameters = function () { return [
        { type: AnonymousConsentsService },
        { type: UserConsentService }
    ]; };
    ConsentService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ConsentService_Factory() { return new ConsentService(i0.ɵɵinject(i1.AnonymousConsentsService), i0.ɵɵinject(i2.UserConsentService)); }, token: ConsentService, providedIn: "root" });
    ConsentService = __decorate([
        Injectable({ providedIn: 'root' })
    ], ConsentService);
    return ConsentService;
}());
export { ConsentService };
//# sourceMappingURL=data:application/json;base64,