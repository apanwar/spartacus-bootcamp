import { createSelector } from '@ngrx/store';
import { StateUtils } from '../../../state/utils/index';
import { getUserState } from './feature.selector';
var ɵ0 = function (state) { return state.regions; };
export var getRegionsLoaderState = createSelector(getUserState, ɵ0);
var ɵ1 = function (state) {
    return StateUtils.loaderValueSelector(state).entities;
};
export var getAllRegions = createSelector(getRegionsLoaderState, ɵ1);
var ɵ2 = function (state) { return ({
    loaded: StateUtils.loaderSuccessSelector(state),
    loading: StateUtils.loaderLoadingSelector(state),
    regions: StateUtils.loaderValueSelector(state).entities,
    country: StateUtils.loaderValueSelector(state).country,
}); };
export var getRegionsDataAndLoading = createSelector(getRegionsLoaderState, ɵ2);
var ɵ3 = function (state) {
    return StateUtils.loaderValueSelector(state).country;
};
export var getRegionsCountry = createSelector(getRegionsLoaderState, ɵ3);
var ɵ4 = function (state) {
    return StateUtils.loaderLoadingSelector(state);
};
export var getRegionsLoading = createSelector(getRegionsLoaderState, ɵ4);
var ɵ5 = function (state) {
    return StateUtils.loaderSuccessSelector(state);
};
export var getRegionsLoaded = createSelector(getRegionsLoaderState, ɵ5);
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaW9ucy5zZWxlY3RvcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvdXNlci9zdG9yZS9zZWxlY3RvcnMvcmVnaW9ucy5zZWxlY3RvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBb0IsTUFBTSxhQUFhLENBQUM7QUFFL0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBR3hELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztTQUtqQixVQUFDLEtBQWdCLElBQUssT0FBQSxLQUFLLENBQUMsT0FBTyxFQUFiLENBQWE7QUFIcEUsTUFBTSxDQUFDLElBQU0scUJBQXFCLEdBRzlCLGNBQWMsQ0FBQyxZQUFZLEtBQXNDLENBQUM7U0FPcEUsVUFBQyxLQUFnQztJQUMvQixPQUFPLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDeEQsQ0FBQztBQVBILE1BQU0sQ0FBQyxJQUFNLGFBQWEsR0FHdEIsY0FBYyxDQUNoQixxQkFBcUIsS0FJdEIsQ0FBQztTQVlBLFVBQUMsS0FBZ0MsSUFBSyxPQUFBLENBQUM7SUFDckMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUM7SUFDL0MsT0FBTyxFQUFFLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUM7SUFDaEQsT0FBTyxFQUFFLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRO0lBQ3ZELE9BQU8sRUFBRSxVQUFVLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTztDQUN2RCxDQUFDLEVBTG9DLENBS3BDO0FBZkosTUFBTSxDQUFDLElBQU0sd0JBQXdCLEdBUWpDLGNBQWMsQ0FDaEIscUJBQXFCLEtBT3RCLENBQUM7U0FPQSxVQUFDLEtBQWdDO0lBQy9CLE9BQUEsVUFBVSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU87QUFBN0MsQ0FBNkM7QUFOakQsTUFBTSxDQUFDLElBQU0saUJBQWlCLEdBRzFCLGNBQWMsQ0FDaEIscUJBQXFCLEtBR3RCLENBQUM7U0FLd0MsVUFBQyxLQUFnQztJQUN6RSxPQUFBLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUM7QUFBdkMsQ0FBdUM7QUFKekMsTUFBTSxDQUFDLElBQU0saUJBQWlCLEdBRzFCLGNBQWMsQ0FBQyxxQkFBcUIsS0FFdkMsQ0FBQztTQUt3QyxVQUFDLEtBQWdDO0lBQ3pFLE9BQUEsVUFBVSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQztBQUF2QyxDQUF1QztBQUp6QyxNQUFNLENBQUMsSUFBTSxnQkFBZ0IsR0FHekIsY0FBYyxDQUFDLHFCQUFxQixLQUV2QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IsIE1lbW9pemVkU2VsZWN0b3IgfSBmcm9tICdAbmdyeC9zdG9yZSc7XHJcbmltcG9ydCB7IFJlZ2lvbiB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2FkZHJlc3MubW9kZWwnO1xyXG5pbXBvcnQgeyBTdGF0ZVV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvaW5kZXgnO1xyXG5pbXBvcnQgeyBMb2FkZXJTdGF0ZSB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2xvYWRlci9sb2FkZXItc3RhdGUnO1xyXG5pbXBvcnQgeyBSZWdpb25zU3RhdGUsIFN0YXRlV2l0aFVzZXIsIFVzZXJTdGF0ZSB9IGZyb20gJy4uL3VzZXItc3RhdGUnO1xyXG5pbXBvcnQgeyBnZXRVc2VyU3RhdGUgfSBmcm9tICcuL2ZlYXR1cmUuc2VsZWN0b3InO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFJlZ2lvbnNMb2FkZXJTdGF0ZTogTWVtb2l6ZWRTZWxlY3RvcjxcclxuICBTdGF0ZVdpdGhVc2VyLFxyXG4gIExvYWRlclN0YXRlPFJlZ2lvbnNTdGF0ZT5cclxuPiA9IGNyZWF0ZVNlbGVjdG9yKGdldFVzZXJTdGF0ZSwgKHN0YXRlOiBVc2VyU3RhdGUpID0+IHN0YXRlLnJlZ2lvbnMpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldEFsbFJlZ2lvbnM6IE1lbW9pemVkU2VsZWN0b3I8XHJcbiAgU3RhdGVXaXRoVXNlcixcclxuICBSZWdpb25bXVxyXG4+ID0gY3JlYXRlU2VsZWN0b3IoXHJcbiAgZ2V0UmVnaW9uc0xvYWRlclN0YXRlLFxyXG4gIChzdGF0ZTogTG9hZGVyU3RhdGU8UmVnaW9uc1N0YXRlPikgPT4ge1xyXG4gICAgcmV0dXJuIFN0YXRlVXRpbHMubG9hZGVyVmFsdWVTZWxlY3RvcihzdGF0ZSkuZW50aXRpZXM7XHJcbiAgfVxyXG4pO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFJlZ2lvbnNEYXRhQW5kTG9hZGluZzogTWVtb2l6ZWRTZWxlY3RvcjxcclxuICBTdGF0ZVdpdGhVc2VyLFxyXG4gIHtcclxuICAgIGxvYWRlZDogYm9vbGVhbjtcclxuICAgIGxvYWRpbmc6IGJvb2xlYW47XHJcbiAgICByZWdpb25zOiBSZWdpb25bXTtcclxuICAgIGNvdW50cnk6IHN0cmluZztcclxuICB9XHJcbj4gPSBjcmVhdGVTZWxlY3RvcihcclxuICBnZXRSZWdpb25zTG9hZGVyU3RhdGUsXHJcbiAgKHN0YXRlOiBMb2FkZXJTdGF0ZTxSZWdpb25zU3RhdGU+KSA9PiAoe1xyXG4gICAgbG9hZGVkOiBTdGF0ZVV0aWxzLmxvYWRlclN1Y2Nlc3NTZWxlY3RvcihzdGF0ZSksXHJcbiAgICBsb2FkaW5nOiBTdGF0ZVV0aWxzLmxvYWRlckxvYWRpbmdTZWxlY3RvcihzdGF0ZSksXHJcbiAgICByZWdpb25zOiBTdGF0ZVV0aWxzLmxvYWRlclZhbHVlU2VsZWN0b3Ioc3RhdGUpLmVudGl0aWVzLFxyXG4gICAgY291bnRyeTogU3RhdGVVdGlscy5sb2FkZXJWYWx1ZVNlbGVjdG9yKHN0YXRlKS5jb3VudHJ5LFxyXG4gIH0pXHJcbik7XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0UmVnaW9uc0NvdW50cnk6IE1lbW9pemVkU2VsZWN0b3I8XHJcbiAgU3RhdGVXaXRoVXNlcixcclxuICBzdHJpbmdcclxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxyXG4gIGdldFJlZ2lvbnNMb2FkZXJTdGF0ZSxcclxuICAoc3RhdGU6IExvYWRlclN0YXRlPFJlZ2lvbnNTdGF0ZT4pID0+XHJcbiAgICBTdGF0ZVV0aWxzLmxvYWRlclZhbHVlU2VsZWN0b3Ioc3RhdGUpLmNvdW50cnlcclxuKTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRSZWdpb25zTG9hZGluZzogTWVtb2l6ZWRTZWxlY3RvcjxcclxuICBTdGF0ZVdpdGhVc2VyLFxyXG4gIGJvb2xlYW5cclxuPiA9IGNyZWF0ZVNlbGVjdG9yKGdldFJlZ2lvbnNMb2FkZXJTdGF0ZSwgKHN0YXRlOiBMb2FkZXJTdGF0ZTxSZWdpb25zU3RhdGU+KSA9PlxyXG4gIFN0YXRlVXRpbHMubG9hZGVyTG9hZGluZ1NlbGVjdG9yKHN0YXRlKVxyXG4pO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFJlZ2lvbnNMb2FkZWQ6IE1lbW9pemVkU2VsZWN0b3I8XHJcbiAgU3RhdGVXaXRoVXNlcixcclxuICBib29sZWFuXHJcbj4gPSBjcmVhdGVTZWxlY3RvcihnZXRSZWdpb25zTG9hZGVyU3RhdGUsIChzdGF0ZTogTG9hZGVyU3RhdGU8UmVnaW9uc1N0YXRlPikgPT5cclxuICBTdGF0ZVV0aWxzLmxvYWRlclN1Y2Nlc3NTZWxlY3RvcihzdGF0ZSlcclxuKTtcclxuIl19