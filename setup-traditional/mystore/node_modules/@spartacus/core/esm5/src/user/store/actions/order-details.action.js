import { __extends } from "tslib";
import { LoaderFailAction, LoaderLoadAction, LoaderSuccessAction, LoaderResetAction, } from '../../../state/utils/loader/loader.action';
import { PROCESS_FEATURE } from '../../../process/store/process-state';
import { StateUtils } from '../../../state/utils/index';
import { USER_ORDER_DETAILS, CANCEL_ORDER_PROCESS_ID } from '../user-state';
export var LOAD_ORDER_DETAILS = '[User] Load Order Details';
export var LOAD_ORDER_DETAILS_FAIL = '[User] Load Order Details Fail';
export var LOAD_ORDER_DETAILS_SUCCESS = '[User] Load Order Details Success';
export var CLEAR_ORDER_DETAILS = '[User] Clear Order Details';
export var CANCEL_ORDER = '[User] Cancel Order';
export var CANCEL_ORDER_FAIL = '[User] Cancel Order Fail';
export var CANCEL_ORDER_SUCCESS = '[User] Cancel Order Success';
export var RESET_CANCEL_ORDER_PROCESS = '[User] Reset Cancel Order Process';
var LoadOrderDetails = /** @class */ (function (_super) {
    __extends(LoadOrderDetails, _super);
    function LoadOrderDetails(payload) {
        var _this = _super.call(this, USER_ORDER_DETAILS) || this;
        _this.payload = payload;
        _this.type = LOAD_ORDER_DETAILS;
        return _this;
    }
    return LoadOrderDetails;
}(LoaderLoadAction));
export { LoadOrderDetails };
var LoadOrderDetailsFail = /** @class */ (function (_super) {
    __extends(LoadOrderDetailsFail, _super);
    function LoadOrderDetailsFail(payload) {
        var _this = _super.call(this, USER_ORDER_DETAILS, payload) || this;
        _this.payload = payload;
        _this.type = LOAD_ORDER_DETAILS_FAIL;
        return _this;
    }
    return LoadOrderDetailsFail;
}(LoaderFailAction));
export { LoadOrderDetailsFail };
var LoadOrderDetailsSuccess = /** @class */ (function (_super) {
    __extends(LoadOrderDetailsSuccess, _super);
    function LoadOrderDetailsSuccess(payload) {
        var _this = _super.call(this, USER_ORDER_DETAILS) || this;
        _this.payload = payload;
        _this.type = LOAD_ORDER_DETAILS_SUCCESS;
        return _this;
    }
    return LoadOrderDetailsSuccess;
}(LoaderSuccessAction));
export { LoadOrderDetailsSuccess };
var ClearOrderDetails = /** @class */ (function (_super) {
    __extends(ClearOrderDetails, _super);
    function ClearOrderDetails() {
        var _this = _super.call(this, USER_ORDER_DETAILS) || this;
        _this.type = CLEAR_ORDER_DETAILS;
        return _this;
    }
    return ClearOrderDetails;
}(LoaderResetAction));
export { ClearOrderDetails };
var CancelOrder = /** @class */ (function (_super) {
    __extends(CancelOrder, _super);
    function CancelOrder(payload) {
        var _this = _super.call(this, PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID) || this;
        _this.payload = payload;
        _this.type = CANCEL_ORDER;
        return _this;
    }
    return CancelOrder;
}(StateUtils.EntityLoadAction));
export { CancelOrder };
var CancelOrderFail = /** @class */ (function (_super) {
    __extends(CancelOrderFail, _super);
    function CancelOrderFail(payload) {
        var _this = _super.call(this, PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID, payload) || this;
        _this.payload = payload;
        _this.type = CANCEL_ORDER_FAIL;
        return _this;
    }
    return CancelOrderFail;
}(StateUtils.EntityFailAction));
export { CancelOrderFail };
var CancelOrderSuccess = /** @class */ (function (_super) {
    __extends(CancelOrderSuccess, _super);
    function CancelOrderSuccess() {
        var _this = _super.call(this, PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID) || this;
        _this.type = CANCEL_ORDER_SUCCESS;
        return _this;
    }
    return CancelOrderSuccess;
}(StateUtils.EntitySuccessAction));
export { CancelOrderSuccess };
var ResetCancelOrderProcess = /** @class */ (function (_super) {
    __extends(ResetCancelOrderProcess, _super);
    function ResetCancelOrderProcess() {
        var _this = _super.call(this, PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID) || this;
        _this.type = RESET_CANCEL_ORDER_PROCESS;
        return _this;
    }
    return ResetCancelOrderProcess;
}(StateUtils.EntityLoaderResetAction));
export { ResetCancelOrderProcess };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItZGV0YWlscy5hY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvdXNlci9zdG9yZS9hY3Rpb25zL29yZGVyLWRldGFpbHMuYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFJQSxPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQixtQkFBbUIsRUFDbkIsaUJBQWlCLEdBQ2xCLE1BQU0sMkNBQTJDLENBQUM7QUFDbkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFNUUsTUFBTSxDQUFDLElBQU0sa0JBQWtCLEdBQUcsMkJBQTJCLENBQUM7QUFDOUQsTUFBTSxDQUFDLElBQU0sdUJBQXVCLEdBQUcsZ0NBQWdDLENBQUM7QUFDeEUsTUFBTSxDQUFDLElBQU0sMEJBQTBCLEdBQUcsbUNBQW1DLENBQUM7QUFDOUUsTUFBTSxDQUFDLElBQU0sbUJBQW1CLEdBQUcsNEJBQTRCLENBQUM7QUFFaEUsTUFBTSxDQUFDLElBQU0sWUFBWSxHQUFHLHFCQUFxQixDQUFDO0FBQ2xELE1BQU0sQ0FBQyxJQUFNLGlCQUFpQixHQUFHLDBCQUEwQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxJQUFNLG9CQUFvQixHQUFHLDZCQUE2QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxJQUFNLDBCQUEwQixHQUFHLG1DQUFtQyxDQUFDO0FBRTlFO0lBQXNDLG9DQUFnQjtJQUVwRCwwQkFDUyxPQUdOO1FBSkgsWUFNRSxrQkFBTSxrQkFBa0IsQ0FBQyxTQUMxQjtRQU5RLGFBQU8sR0FBUCxPQUFPLENBR2I7UUFMTSxVQUFJLEdBQUcsa0JBQWtCLENBQUM7O0lBUW5DLENBQUM7SUFDSCx1QkFBQztBQUFELENBQUMsQUFWRCxDQUFzQyxnQkFBZ0IsR0FVckQ7O0FBRUQ7SUFBMEMsd0NBQWdCO0lBRXhELDhCQUFtQixPQUFZO1FBQS9CLFlBQ0Usa0JBQU0sa0JBQWtCLEVBQUUsT0FBTyxDQUFDLFNBQ25DO1FBRmtCLGFBQU8sR0FBUCxPQUFPLENBQUs7UUFEdEIsVUFBSSxHQUFHLHVCQUF1QixDQUFDOztJQUd4QyxDQUFDO0lBQ0gsMkJBQUM7QUFBRCxDQUFDLEFBTEQsQ0FBMEMsZ0JBQWdCLEdBS3pEOztBQUVEO0lBQTZDLDJDQUFtQjtJQUU5RCxpQ0FBbUIsT0FBYztRQUFqQyxZQUNFLGtCQUFNLGtCQUFrQixDQUFDLFNBQzFCO1FBRmtCLGFBQU8sR0FBUCxPQUFPLENBQU87UUFEeEIsVUFBSSxHQUFHLDBCQUEwQixDQUFDOztJQUczQyxDQUFDO0lBQ0gsOEJBQUM7QUFBRCxDQUFDLEFBTEQsQ0FBNkMsbUJBQW1CLEdBSy9EOztBQUVEO0lBQXVDLHFDQUFpQjtJQUV0RDtRQUFBLFlBQ0Usa0JBQU0sa0JBQWtCLENBQUMsU0FDMUI7UUFIUSxVQUFJLEdBQUcsbUJBQW1CLENBQUM7O0lBR3BDLENBQUM7SUFDSCx3QkFBQztBQUFELENBQUMsQUFMRCxDQUF1QyxpQkFBaUIsR0FLdkQ7O0FBRUQ7SUFBaUMsK0JBQTJCO0lBRTFELHFCQUNTLE9BSU47UUFMSCxZQU9FLGtCQUFNLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxTQUNoRDtRQVBRLGFBQU8sR0FBUCxPQUFPLENBSWI7UUFOTSxVQUFJLEdBQUcsWUFBWSxDQUFDOztJQVM3QixDQUFDO0lBQ0gsa0JBQUM7QUFBRCxDQUFDLEFBWEQsQ0FBaUMsVUFBVSxDQUFDLGdCQUFnQixHQVczRDs7QUFFRDtJQUFxQyxtQ0FBMkI7SUFFOUQseUJBQW1CLE9BQVk7UUFBL0IsWUFDRSxrQkFBTSxlQUFlLEVBQUUsdUJBQXVCLEVBQUUsT0FBTyxDQUFDLFNBQ3pEO1FBRmtCLGFBQU8sR0FBUCxPQUFPLENBQUs7UUFEdEIsVUFBSSxHQUFHLGlCQUFpQixDQUFDOztJQUdsQyxDQUFDO0lBQ0gsc0JBQUM7QUFBRCxDQUFDLEFBTEQsQ0FBcUMsVUFBVSxDQUFDLGdCQUFnQixHQUsvRDs7QUFFRDtJQUF3QyxzQ0FBOEI7SUFFcEU7UUFBQSxZQUNFLGtCQUFNLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxTQUNoRDtRQUhRLFVBQUksR0FBRyxvQkFBb0IsQ0FBQzs7SUFHckMsQ0FBQztJQUNILHlCQUFDO0FBQUQsQ0FBQyxBQUxELENBQXdDLFVBQVUsQ0FBQyxtQkFBbUIsR0FLckU7O0FBRUQ7SUFBNkMsMkNBQWtDO0lBRTdFO1FBQUEsWUFDRSxrQkFBTSxlQUFlLEVBQUUsdUJBQXVCLENBQUMsU0FDaEQ7UUFIUSxVQUFJLEdBQUcsMEJBQTBCLENBQUM7O0lBRzNDLENBQUM7SUFDSCw4QkFBQztBQUFELENBQUMsQUFMRCxDQUE2QyxVQUFVLENBQUMsdUJBQXVCLEdBSzlFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBPcmRlcixcclxuICBDYW5jZWxsYXRpb25SZXF1ZXN0RW50cnlJbnB1dExpc3QsXHJcbn0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvb3JkZXIubW9kZWwnO1xyXG5pbXBvcnQge1xyXG4gIExvYWRlckZhaWxBY3Rpb24sXHJcbiAgTG9hZGVyTG9hZEFjdGlvbixcclxuICBMb2FkZXJTdWNjZXNzQWN0aW9uLFxyXG4gIExvYWRlclJlc2V0QWN0aW9uLFxyXG59IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2xvYWRlci9sb2FkZXIuYWN0aW9uJztcclxuaW1wb3J0IHsgUFJPQ0VTU19GRUFUVVJFIH0gZnJvbSAnLi4vLi4vLi4vcHJvY2Vzcy9zdG9yZS9wcm9jZXNzLXN0YXRlJztcclxuaW1wb3J0IHsgU3RhdGVVdGlscyB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2luZGV4JztcclxuaW1wb3J0IHsgVVNFUl9PUkRFUl9ERVRBSUxTLCBDQU5DRUxfT1JERVJfUFJPQ0VTU19JRCB9IGZyb20gJy4uL3VzZXItc3RhdGUnO1xyXG5cclxuZXhwb3J0IGNvbnN0IExPQURfT1JERVJfREVUQUlMUyA9ICdbVXNlcl0gTG9hZCBPcmRlciBEZXRhaWxzJztcclxuZXhwb3J0IGNvbnN0IExPQURfT1JERVJfREVUQUlMU19GQUlMID0gJ1tVc2VyXSBMb2FkIE9yZGVyIERldGFpbHMgRmFpbCc7XHJcbmV4cG9ydCBjb25zdCBMT0FEX09SREVSX0RFVEFJTFNfU1VDQ0VTUyA9ICdbVXNlcl0gTG9hZCBPcmRlciBEZXRhaWxzIFN1Y2Nlc3MnO1xyXG5leHBvcnQgY29uc3QgQ0xFQVJfT1JERVJfREVUQUlMUyA9ICdbVXNlcl0gQ2xlYXIgT3JkZXIgRGV0YWlscyc7XHJcblxyXG5leHBvcnQgY29uc3QgQ0FOQ0VMX09SREVSID0gJ1tVc2VyXSBDYW5jZWwgT3JkZXInO1xyXG5leHBvcnQgY29uc3QgQ0FOQ0VMX09SREVSX0ZBSUwgPSAnW1VzZXJdIENhbmNlbCBPcmRlciBGYWlsJztcclxuZXhwb3J0IGNvbnN0IENBTkNFTF9PUkRFUl9TVUNDRVNTID0gJ1tVc2VyXSBDYW5jZWwgT3JkZXIgU3VjY2Vzcyc7XHJcbmV4cG9ydCBjb25zdCBSRVNFVF9DQU5DRUxfT1JERVJfUFJPQ0VTUyA9ICdbVXNlcl0gUmVzZXQgQ2FuY2VsIE9yZGVyIFByb2Nlc3MnO1xyXG5cclxuZXhwb3J0IGNsYXNzIExvYWRPcmRlckRldGFpbHMgZXh0ZW5kcyBMb2FkZXJMb2FkQWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gTE9BRF9PUkRFUl9ERVRBSUxTO1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHVibGljIHBheWxvYWQ6IHtcclxuICAgICAgdXNlcklkOiBzdHJpbmc7XHJcbiAgICAgIG9yZGVyQ29kZTogc3RyaW5nO1xyXG4gICAgfVxyXG4gICkge1xyXG4gICAgc3VwZXIoVVNFUl9PUkRFUl9ERVRBSUxTKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMb2FkT3JkZXJEZXRhaWxzRmFpbCBleHRlbmRzIExvYWRlckZhaWxBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX09SREVSX0RFVEFJTFNfRkFJTDtcclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogYW55KSB7XHJcbiAgICBzdXBlcihVU0VSX09SREVSX0RFVEFJTFMsIHBheWxvYWQpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExvYWRPcmRlckRldGFpbHNTdWNjZXNzIGV4dGVuZHMgTG9hZGVyU3VjY2Vzc0FjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfT1JERVJfREVUQUlMU19TVUNDRVNTO1xyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBPcmRlcikge1xyXG4gICAgc3VwZXIoVVNFUl9PUkRFUl9ERVRBSUxTKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDbGVhck9yZGVyRGV0YWlscyBleHRlbmRzIExvYWRlclJlc2V0QWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gQ0xFQVJfT1JERVJfREVUQUlMUztcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKFVTRVJfT1JERVJfREVUQUlMUyk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ2FuY2VsT3JkZXIgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eUxvYWRBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBDQU5DRUxfT1JERVI7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgcGF5bG9hZDoge1xyXG4gICAgICB1c2VySWQ6IHN0cmluZztcclxuICAgICAgb3JkZXJDb2RlOiBzdHJpbmc7XHJcbiAgICAgIGNhbmNlbFJlcXVlc3RJbnB1dDogQ2FuY2VsbGF0aW9uUmVxdWVzdEVudHJ5SW5wdXRMaXN0O1xyXG4gICAgfVxyXG4gICkge1xyXG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBDQU5DRUxfT1JERVJfUFJPQ0VTU19JRCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ2FuY2VsT3JkZXJGYWlsIGV4dGVuZHMgU3RhdGVVdGlscy5FbnRpdHlGYWlsQWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gQ0FOQ0VMX09SREVSX0ZBSUw7XHJcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IGFueSkge1xyXG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBDQU5DRUxfT1JERVJfUFJPQ0VTU19JRCwgcGF5bG9hZCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ2FuY2VsT3JkZXJTdWNjZXNzIGV4dGVuZHMgU3RhdGVVdGlscy5FbnRpdHlTdWNjZXNzQWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gQ0FOQ0VMX09SREVSX1NVQ0NFU1M7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcihQUk9DRVNTX0ZFQVRVUkUsIENBTkNFTF9PUkRFUl9QUk9DRVNTX0lEKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSZXNldENhbmNlbE9yZGVyUHJvY2VzcyBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5TG9hZGVyUmVzZXRBY3Rpb24ge1xyXG4gIHJlYWRvbmx5IHR5cGUgPSBSRVNFVF9DQU5DRUxfT1JERVJfUFJPQ0VTUztcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgQ0FOQ0VMX09SREVSX1BST0NFU1NfSUQpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHR5cGUgT3JkZXJEZXRhaWxzQWN0aW9uID1cclxuICB8IExvYWRPcmRlckRldGFpbHNcclxuICB8IExvYWRPcmRlckRldGFpbHNGYWlsXHJcbiAgfCBMb2FkT3JkZXJEZXRhaWxzU3VjY2Vzc1xyXG4gIHwgQ2xlYXJPcmRlckRldGFpbHNcclxuICB8IENhbmNlbE9yZGVyXHJcbiAgfCBDYW5jZWxPcmRlckZhaWxcclxuICB8IENhbmNlbE9yZGVyU3VjY2VzcztcclxuIl19