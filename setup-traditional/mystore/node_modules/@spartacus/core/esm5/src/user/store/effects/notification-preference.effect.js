import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, map, mergeMap, switchMap } from 'rxjs/operators';
import { makeErrorSerializable } from '../../../util/serialization-utils';
import { UserNotificationPreferenceConnector } from '../../connectors/notification-preference/user-notification-preference.connector';
import { UserActions } from '../actions/index';
var NotificationPreferenceEffects = /** @class */ (function () {
    function NotificationPreferenceEffects(actions$, connector) {
        var _this = this;
        this.actions$ = actions$;
        this.connector = connector;
        this.loadPreferences$ = this.actions$.pipe(ofType(UserActions.LOAD_NOTIFICATION_PREFERENCES), map(function (action) { return action.payload; }), switchMap(function (payload) {
            return _this.connector.loadAll(payload).pipe(map(function (preferences) {
                return new UserActions.LoadNotificationPreferencesSuccess(preferences);
            }), catchError(function (error) {
                return of(new UserActions.LoadNotificationPreferencesFail(makeErrorSerializable(error)));
            }));
        }));
        this.updatePreferences$ = this.actions$.pipe(ofType(UserActions.UPDATE_NOTIFICATION_PREFERENCES), map(function (action) { return action.payload; }), mergeMap(function (payload) {
            return _this.connector.update(payload.userId, payload.preferences).pipe(map(function () {
                return new UserActions.UpdateNotificationPreferencesSuccess(payload.preferences);
            }), catchError(function (error) {
                return of(new UserActions.UpdateNotificationPreferencesFail(makeErrorSerializable(error)));
            }));
        }));
    }
    NotificationPreferenceEffects.ctorParameters = function () { return [
        { type: Actions },
        { type: UserNotificationPreferenceConnector }
    ]; };
    __decorate([
        Effect()
    ], NotificationPreferenceEffects.prototype, "loadPreferences$", void 0);
    __decorate([
        Effect()
    ], NotificationPreferenceEffects.prototype, "updatePreferences$", void 0);
    NotificationPreferenceEffects = __decorate([
        Injectable()
    ], NotificationPreferenceEffects);
    return NotificationPreferenceEffects;
}());
export { NotificationPreferenceEffects };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLXByZWZlcmVuY2UuZWZmZWN0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL3VzZXIvc3RvcmUvZWZmZWN0cy9ub3RpZmljYXRpb24tcHJlZmVyZW5jZS5lZmZlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hELE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxNQUFNLGlGQUFpRixDQUFDO0FBQ3RJLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUcvQztJQWlERSx1Q0FDVSxRQUFpQixFQUNqQixTQUE4QztRQUZ4RCxpQkFHSTtRQUZNLGFBQVEsR0FBUixRQUFRLENBQVM7UUFDakIsY0FBUyxHQUFULFNBQVMsQ0FBcUM7UUFqRHhELHFCQUFnQixHQUVaLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNwQixNQUFNLENBQUMsV0FBVyxDQUFDLDZCQUE2QixDQUFDLEVBQ2pELEdBQUcsQ0FBQyxVQUFDLE1BQStDLElBQUssT0FBQSxNQUFNLENBQUMsT0FBTyxFQUFkLENBQWMsQ0FBQyxFQUN4RSxTQUFTLENBQUMsVUFBQyxPQUFPO1lBQ2hCLE9BQUEsS0FBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUNsQyxHQUFHLENBQ0QsVUFBQyxXQUFXO2dCQUNWLE9BQUEsSUFBSSxXQUFXLENBQUMsa0NBQWtDLENBQUMsV0FBVyxDQUFDO1lBQS9ELENBQStELENBQ2xFLEVBQ0QsVUFBVSxDQUFDLFVBQUMsS0FBSztnQkFDZixPQUFBLEVBQUUsQ0FDQSxJQUFJLFdBQVcsQ0FBQywrQkFBK0IsQ0FDN0MscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQzdCLENBQ0Y7WUFKRCxDQUlDLENBQ0YsQ0FDRjtRQVpELENBWUMsQ0FDRixDQUNGLENBQUM7UUFHRix1QkFBa0IsR0FFZCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDcEIsTUFBTSxDQUFDLFdBQVcsQ0FBQywrQkFBK0IsQ0FBQyxFQUNuRCxHQUFHLENBQUMsVUFBQyxNQUFpRCxJQUFLLE9BQUEsTUFBTSxDQUFDLE9BQU8sRUFBZCxDQUFjLENBQUMsRUFDMUUsUUFBUSxDQUFDLFVBQUMsT0FBTztZQUNmLE9BQUEsS0FBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUM3RCxHQUFHLENBQ0Q7Z0JBQ0UsT0FBQSxJQUFJLFdBQVcsQ0FBQyxvQ0FBb0MsQ0FDbEQsT0FBTyxDQUFDLFdBQVcsQ0FDcEI7WUFGRCxDQUVDLENBQ0osRUFDRCxVQUFVLENBQUMsVUFBQyxLQUFLO2dCQUNmLE9BQUEsRUFBRSxDQUNBLElBQUksV0FBVyxDQUFDLGlDQUFpQyxDQUMvQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FDN0IsQ0FDRjtZQUpELENBSUMsQ0FDRixDQUNGO1FBZEQsQ0FjQyxDQUNGLENBQ0YsQ0FBQztJQUtDLENBQUM7O2dCQUZnQixPQUFPO2dCQUNOLG1DQUFtQzs7SUFqRHhEO1FBREMsTUFBTSxFQUFFOzJFQXFCUDtJQUdGO1FBREMsTUFBTSxFQUFFOzZFQXVCUDtJQS9DUyw2QkFBNkI7UUFEekMsVUFBVSxFQUFFO09BQ0EsNkJBQTZCLENBcUR6QztJQUFELG9DQUFDO0NBQUEsQUFyREQsSUFxREM7U0FyRFksNkJBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBY3Rpb25zLCBFZmZlY3QsIG9mVHlwZSB9IGZyb20gJ0BuZ3J4L2VmZmVjdHMnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAsIG1lcmdlTWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IG1ha2VFcnJvclNlcmlhbGl6YWJsZSB9IGZyb20gJy4uLy4uLy4uL3V0aWwvc2VyaWFsaXphdGlvbi11dGlscyc7XHJcbmltcG9ydCB7IFVzZXJOb3RpZmljYXRpb25QcmVmZXJlbmNlQ29ubmVjdG9yIH0gZnJvbSAnLi4vLi4vY29ubmVjdG9ycy9ub3RpZmljYXRpb24tcHJlZmVyZW5jZS91c2VyLW5vdGlmaWNhdGlvbi1wcmVmZXJlbmNlLmNvbm5lY3Rvcic7XHJcbmltcG9ydCB7IFVzZXJBY3Rpb25zIH0gZnJvbSAnLi4vYWN0aW9ucy9pbmRleCc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBOb3RpZmljYXRpb25QcmVmZXJlbmNlRWZmZWN0cyB7XHJcbiAgQEVmZmVjdCgpXHJcbiAgbG9hZFByZWZlcmVuY2VzJDogT2JzZXJ2YWJsZTxcclxuICAgIFVzZXJBY3Rpb25zLk5vdGlmaWNhdGlvblByZWZlcmVuY2VBY3Rpb25cclxuICA+ID0gdGhpcy5hY3Rpb25zJC5waXBlKFxyXG4gICAgb2ZUeXBlKFVzZXJBY3Rpb25zLkxPQURfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTKSxcclxuICAgIG1hcCgoYWN0aW9uOiBVc2VyQWN0aW9ucy5Mb2FkTm90aWZpY2F0aW9uUHJlZmVyZW5jZXMpID0+IGFjdGlvbi5wYXlsb2FkKSxcclxuICAgIHN3aXRjaE1hcCgocGF5bG9hZCkgPT5cclxuICAgICAgdGhpcy5jb25uZWN0b3IubG9hZEFsbChwYXlsb2FkKS5waXBlKFxyXG4gICAgICAgIG1hcChcclxuICAgICAgICAgIChwcmVmZXJlbmNlcykgPT5cclxuICAgICAgICAgICAgbmV3IFVzZXJBY3Rpb25zLkxvYWROb3RpZmljYXRpb25QcmVmZXJlbmNlc1N1Y2Nlc3MocHJlZmVyZW5jZXMpXHJcbiAgICAgICAgKSxcclxuICAgICAgICBjYXRjaEVycm9yKChlcnJvcikgPT5cclxuICAgICAgICAgIG9mKFxyXG4gICAgICAgICAgICBuZXcgVXNlckFjdGlvbnMuTG9hZE5vdGlmaWNhdGlvblByZWZlcmVuY2VzRmFpbChcclxuICAgICAgICAgICAgICBtYWtlRXJyb3JTZXJpYWxpemFibGUoZXJyb3IpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgIClcclxuICAgICAgICApXHJcbiAgICAgIClcclxuICAgIClcclxuICApO1xyXG5cclxuICBARWZmZWN0KClcclxuICB1cGRhdGVQcmVmZXJlbmNlcyQ6IE9ic2VydmFibGU8XHJcbiAgICBVc2VyQWN0aW9ucy5Ob3RpZmljYXRpb25QcmVmZXJlbmNlQWN0aW9uXHJcbiAgPiA9IHRoaXMuYWN0aW9ucyQucGlwZShcclxuICAgIG9mVHlwZShVc2VyQWN0aW9ucy5VUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTKSxcclxuICAgIG1hcCgoYWN0aW9uOiBVc2VyQWN0aW9ucy5VcGRhdGVOb3RpZmljYXRpb25QcmVmZXJlbmNlcykgPT4gYWN0aW9uLnBheWxvYWQpLFxyXG4gICAgbWVyZ2VNYXAoKHBheWxvYWQpID0+XHJcbiAgICAgIHRoaXMuY29ubmVjdG9yLnVwZGF0ZShwYXlsb2FkLnVzZXJJZCwgcGF5bG9hZC5wcmVmZXJlbmNlcykucGlwZShcclxuICAgICAgICBtYXAoXHJcbiAgICAgICAgICAoKSA9PlxyXG4gICAgICAgICAgICBuZXcgVXNlckFjdGlvbnMuVXBkYXRlTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNTdWNjZXNzKFxyXG4gICAgICAgICAgICAgIHBheWxvYWQucHJlZmVyZW5jZXNcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICksXHJcbiAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3IpID0+XHJcbiAgICAgICAgICBvZihcclxuICAgICAgICAgICAgbmV3IFVzZXJBY3Rpb25zLlVwZGF0ZU5vdGlmaWNhdGlvblByZWZlcmVuY2VzRmFpbChcclxuICAgICAgICAgICAgICBtYWtlRXJyb3JTZXJpYWxpemFibGUoZXJyb3IpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgIClcclxuICAgICAgICApXHJcbiAgICAgIClcclxuICAgIClcclxuICApO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgYWN0aW9ucyQ6IEFjdGlvbnMsXHJcbiAgICBwcml2YXRlIGNvbm5lY3RvcjogVXNlck5vdGlmaWNhdGlvblByZWZlcmVuY2VDb25uZWN0b3JcclxuICApIHt9XHJcbn1cclxuIl19