import { __decorate, __read, __spread } from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, concatMap, map } from 'rxjs/operators';
import { GlobalMessageType } from '../../../global-message/models/global-message.model';
import { GlobalMessageActions } from '../../../global-message/store/actions';
import { SiteContextActions } from '../../../site-context/store/actions/index';
import { makeErrorSerializable } from '../../../util/serialization-utils';
import { UserConsentConnector } from '../../connectors/consent/user-consent.connector';
import { UserActions } from '../actions/index';
var UserConsentsEffect = /** @class */ (function () {
    function UserConsentsEffect(actions$, userConsentConnector) {
        var _this = this;
        this.actions$ = actions$;
        this.userConsentConnector = userConsentConnector;
        this.resetConsents$ = this.actions$.pipe(ofType(SiteContextActions.LANGUAGE_CHANGE), map(function () { return new UserActions.ResetLoadUserConsents(); }));
        this.getConsents$ = this.actions$.pipe(ofType(UserActions.LOAD_USER_CONSENTS), map(function (action) { return action.payload; }), concatMap(function (userId) {
            return _this.userConsentConnector.loadConsents(userId).pipe(map(function (consents) { return new UserActions.LoadUserConsentsSuccess(consents); }), catchError(function (error) {
                return of(new UserActions.LoadUserConsentsFail(makeErrorSerializable(error)));
            }));
        }));
        this.giveConsent$ = this.actions$.pipe(ofType(UserActions.GIVE_USER_CONSENT, UserActions.TRANSFER_ANONYMOUS_CONSENT), concatMap(function (action) {
            return _this.userConsentConnector
                .giveConsent(action.payload.userId, action.payload.consentTemplateId, action.payload.consentTemplateVersion)
                .pipe(map(function (consent) { return new UserActions.GiveUserConsentSuccess(consent); }), catchError(function (error) {
                var errors = [
                    new UserActions.GiveUserConsentFail(makeErrorSerializable(error)),
                ];
                if (action.type === UserActions.TRANSFER_ANONYMOUS_CONSENT &&
                    error.status === 409) {
                    errors.push(new GlobalMessageActions.RemoveMessagesByType(GlobalMessageType.MSG_TYPE_ERROR));
                }
                return of.apply(void 0, __spread(errors));
            }));
        }));
        this.withdrawConsent$ = this.actions$.pipe(ofType(UserActions.WITHDRAW_USER_CONSENT), map(function (action) { return action.payload; }), concatMap(function (_a) {
            var userId = _a.userId, consentCode = _a.consentCode;
            return _this.userConsentConnector.withdrawConsent(userId, consentCode).pipe(map(function () { return new UserActions.WithdrawUserConsentSuccess(); }), catchError(function (error) {
                return of(new UserActions.WithdrawUserConsentFail(makeErrorSerializable(error)));
            }));
        }));
    }
    UserConsentsEffect.ctorParameters = function () { return [
        { type: Actions },
        { type: UserConsentConnector }
    ]; };
    __decorate([
        Effect()
    ], UserConsentsEffect.prototype, "resetConsents$", void 0);
    __decorate([
        Effect()
    ], UserConsentsEffect.prototype, "getConsents$", void 0);
    __decorate([
        Effect()
    ], UserConsentsEffect.prototype, "giveConsent$", void 0);
    __decorate([
        Effect()
    ], UserConsentsEffect.prototype, "withdrawConsent$", void 0);
    UserConsentsEffect = __decorate([
        Injectable()
    ], UserConsentsEffect);
    return UserConsentsEffect;
}());
export { UserConsentsEffect };
//# sourceMappingURL=data:application/json;base64,