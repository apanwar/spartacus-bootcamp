import { __extends } from "tslib";
import { PROCESS_FEATURE } from '../../../process/store/process-state';
import { StateUtils } from '../../../state/utils/index';
import { GIVE_CONSENT_PROCESS_ID, USER_CONSENTS, WITHDRAW_CONSENT_PROCESS_ID, } from '../user-state';
export var LOAD_USER_CONSENTS = '[User] Load User Consents';
export var LOAD_USER_CONSENTS_SUCCESS = '[User] Load User Consents Success';
export var LOAD_USER_CONSENTS_FAIL = '[User] Load User Consents Fail';
export var RESET_LOAD_USER_CONSENTS = '[User] Reset Load User Consents';
export var GIVE_USER_CONSENT = '[User] Give User Consent';
export var GIVE_USER_CONSENT_FAIL = '[User] Give User Consent Fail';
export var GIVE_USER_CONSENT_SUCCESS = '[User] Give User Consent Success';
export var RESET_GIVE_USER_CONSENT_PROCESS = '[User] Reset Give User Consent Process';
export var TRANSFER_ANONYMOUS_CONSENT = '[User] Transfer Anonymous Consent';
export var WITHDRAW_USER_CONSENT = '[User] Withdraw User Consent';
export var WITHDRAW_USER_CONSENT_FAIL = '[User] Withdraw User Consent Fail';
export var WITHDRAW_USER_CONSENT_SUCCESS = '[User] Withdraw User Consent Success';
export var RESET_WITHDRAW_USER_CONSENT_PROCESS = '[User] Reset Withdraw User Consent Process';
var LoadUserConsents = /** @class */ (function (_super) {
    __extends(LoadUserConsents, _super);
    function LoadUserConsents(payload) {
        var _this = _super.call(this, USER_CONSENTS) || this;
        _this.payload = payload;
        _this.type = LOAD_USER_CONSENTS;
        return _this;
    }
    return LoadUserConsents;
}(StateUtils.LoaderLoadAction));
export { LoadUserConsents };
var LoadUserConsentsFail = /** @class */ (function (_super) {
    __extends(LoadUserConsentsFail, _super);
    function LoadUserConsentsFail(payload) {
        var _this = _super.call(this, USER_CONSENTS, payload) || this;
        _this.payload = payload;
        _this.type = LOAD_USER_CONSENTS_FAIL;
        return _this;
    }
    return LoadUserConsentsFail;
}(StateUtils.LoaderFailAction));
export { LoadUserConsentsFail };
var LoadUserConsentsSuccess = /** @class */ (function (_super) {
    __extends(LoadUserConsentsSuccess, _super);
    function LoadUserConsentsSuccess(payload) {
        var _this = _super.call(this, USER_CONSENTS) || this;
        _this.payload = payload;
        _this.type = LOAD_USER_CONSENTS_SUCCESS;
        return _this;
    }
    return LoadUserConsentsSuccess;
}(StateUtils.LoaderSuccessAction));
export { LoadUserConsentsSuccess };
var ResetLoadUserConsents = /** @class */ (function (_super) {
    __extends(ResetLoadUserConsents, _super);
    function ResetLoadUserConsents() {
        var _this = _super.call(this, USER_CONSENTS) || this;
        _this.type = RESET_LOAD_USER_CONSENTS;
        return _this;
    }
    return ResetLoadUserConsents;
}(StateUtils.LoaderResetAction));
export { ResetLoadUserConsents };
var GiveUserConsent = /** @class */ (function (_super) {
    __extends(GiveUserConsent, _super);
    function GiveUserConsent(payload) {
        var _this = _super.call(this, PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID) || this;
        _this.payload = payload;
        _this.type = GIVE_USER_CONSENT;
        return _this;
    }
    return GiveUserConsent;
}(StateUtils.EntityLoadAction));
export { GiveUserConsent };
var GiveUserConsentFail = /** @class */ (function (_super) {
    __extends(GiveUserConsentFail, _super);
    function GiveUserConsentFail(payload) {
        var _this = _super.call(this, PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID, payload) || this;
        _this.type = GIVE_USER_CONSENT_FAIL;
        return _this;
    }
    return GiveUserConsentFail;
}(StateUtils.EntityFailAction));
export { GiveUserConsentFail };
var GiveUserConsentSuccess = /** @class */ (function (_super) {
    __extends(GiveUserConsentSuccess, _super);
    function GiveUserConsentSuccess(consentTemplate) {
        var _this = _super.call(this, PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID) || this;
        _this.consentTemplate = consentTemplate;
        _this.type = GIVE_USER_CONSENT_SUCCESS;
        return _this;
    }
    return GiveUserConsentSuccess;
}(StateUtils.EntitySuccessAction));
export { GiveUserConsentSuccess };
var ResetGiveUserConsentProcess = /** @class */ (function (_super) {
    __extends(ResetGiveUserConsentProcess, _super);
    function ResetGiveUserConsentProcess() {
        var _this = _super.call(this, PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID) || this;
        _this.type = RESET_GIVE_USER_CONSENT_PROCESS;
        return _this;
    }
    return ResetGiveUserConsentProcess;
}(StateUtils.EntityLoaderResetAction));
export { ResetGiveUserConsentProcess };
var TransferAnonymousConsent = /** @class */ (function () {
    function TransferAnonymousConsent(payload) {
        this.payload = payload;
        this.type = TRANSFER_ANONYMOUS_CONSENT;
    }
    return TransferAnonymousConsent;
}());
export { TransferAnonymousConsent };
var WithdrawUserConsent = /** @class */ (function (_super) {
    __extends(WithdrawUserConsent, _super);
    function WithdrawUserConsent(payload) {
        var _this = _super.call(this, PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID) || this;
        _this.payload = payload;
        _this.type = WITHDRAW_USER_CONSENT;
        return _this;
    }
    return WithdrawUserConsent;
}(StateUtils.EntityLoadAction));
export { WithdrawUserConsent };
var WithdrawUserConsentFail = /** @class */ (function (_super) {
    __extends(WithdrawUserConsentFail, _super);
    function WithdrawUserConsentFail(payload) {
        var _this = _super.call(this, PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID, payload) || this;
        _this.type = WITHDRAW_USER_CONSENT_FAIL;
        return _this;
    }
    return WithdrawUserConsentFail;
}(StateUtils.EntityFailAction));
export { WithdrawUserConsentFail };
var WithdrawUserConsentSuccess = /** @class */ (function (_super) {
    __extends(WithdrawUserConsentSuccess, _super);
    function WithdrawUserConsentSuccess() {
        var _this = _super.call(this, PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID) || this;
        _this.type = WITHDRAW_USER_CONSENT_SUCCESS;
        return _this;
    }
    return WithdrawUserConsentSuccess;
}(StateUtils.EntitySuccessAction));
export { WithdrawUserConsentSuccess };
var ResetWithdrawUserConsentProcess = /** @class */ (function (_super) {
    __extends(ResetWithdrawUserConsentProcess, _super);
    function ResetWithdrawUserConsentProcess() {
        var _this = _super.call(this, PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID) || this;
        _this.type = RESET_WITHDRAW_USER_CONSENT_PROCESS;
        return _this;
    }
    return ResetWithdrawUserConsentProcess;
}(StateUtils.EntityLoaderResetAction));
export { ResetWithdrawUserConsentProcess };
//# sourceMappingURL=data:application/json;base64,