import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { select, Store } from '@ngrx/store';
import { map, tap } from 'rxjs/operators';
import { AuthService } from '../../auth/facade/auth.service';
import { getProcessErrorFactory, getProcessLoadingFactory, getProcessSuccessFactory, } from '../../process/store/selectors/process.selectors';
import { UserActions } from '../store/actions/index';
import { UsersSelectors } from '../store/selectors/index';
import { ADD_PRODUCT_INTEREST_PROCESS_ID, REMOVE_PRODUCT_INTERESTS_PROCESS_ID, } from '../store/user-state';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "../../auth/facade/auth.service";
var UserInterestsService = /** @class */ (function () {
    function UserInterestsService(store, authService) {
        this.store = store;
        this.authService = authService;
    }
    /**
     * Retrieves an product interest list
     * @param pageSize page size
     * @param currentPage current page
     * @param sort sort
     */
    UserInterestsService.prototype.loadProductInterests = function (pageSize, currentPage, sort, productCode, notificationType) {
        var _this = this;
        this.authService.invokeWithUserId(function (userId) {
            _this.store.dispatch(new UserActions.LoadProductInterests({
                userId: userId,
                pageSize: pageSize,
                currentPage: currentPage,
                sort: sort,
                productCode: productCode,
                notificationType: notificationType,
            }));
        });
    };
    /**
     * Returns product interests
     */
    UserInterestsService.prototype.getProductInterests = function () {
        return this.store.pipe(select(UsersSelectors.getInterests));
    };
    /**
     * Returns product interests
     * @param pageSize the page size
     */
    UserInterestsService.prototype.getAndLoadProductInterests = function (pageSize) {
        var _this = this;
        return this.store.pipe(select(UsersSelectors.getInterestsState), tap(function (interestListState) {
            var attemptedLoad = interestListState.loading ||
                interestListState.success ||
                interestListState.error;
            if (!attemptedLoad) {
                _this.loadProductInterests(pageSize);
            }
        }), map(function (interestListState) { return interestListState.value; }));
    };
    /**
     * Returns a loading flag for product interests
     */
    UserInterestsService.prototype.getProdutInterestsLoading = function () {
        return this.store.pipe(select(UsersSelectors.getInterestsLoading));
    };
    /**
     * Removes a ProductInterestRelation
     * @param item product interest relation item
     * @param singleDelete flag to delete only one interest
     */
    UserInterestsService.prototype.removeProdutInterest = function (item, singleDelete) {
        var _this = this;
        this.authService.invokeWithUserId(function (userId) {
            _this.store.dispatch(new UserActions.RemoveProductInterest({
                userId: userId,
                item: item,
                singleDelete: singleDelete,
            }));
        });
    };
    /**
     * Returns a loading flag for removing product interests.
     */
    UserInterestsService.prototype.getRemoveProdutInterestLoading = function () {
        return this.store.pipe(select(getProcessLoadingFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID)));
    };
    /**
     * Returns a success flag for removing a product interests.
     */
    UserInterestsService.prototype.getRemoveProdutInterestSuccess = function () {
        return this.store.pipe(select(getProcessSuccessFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID)));
    };
    /**
     * Add a new product interest.
     *
     * @param productCode the product code
     * @param notificationType the notification type
     */
    UserInterestsService.prototype.addProductInterest = function (productCode, notificationType) {
        var _this = this;
        this.authService.invokeWithUserId(function (userId) {
            _this.store.dispatch(new UserActions.AddProductInterest({
                userId: userId,
                productCode: productCode,
                notificationType: notificationType,
            }));
        });
    };
    /**
     * Returns a success flag for adding a product interest.
     */
    UserInterestsService.prototype.getAddProductInterestSuccess = function () {
        return this.store.pipe(select(getProcessSuccessFactory(ADD_PRODUCT_INTEREST_PROCESS_ID)));
    };
    /**
     * Returns a error flag for adding a product interest.
     */
    UserInterestsService.prototype.getAddProductInterestError = function () {
        return this.store.pipe(select(getProcessErrorFactory(ADD_PRODUCT_INTEREST_PROCESS_ID)));
    };
    /**
     * Reset product interest adding state.
     */
    UserInterestsService.prototype.resetAddInterestState = function () {
        this.store.dispatch(new UserActions.ResetAddInterestState());
    };
    /**
     * Reset product interest removing state.
     */
    UserInterestsService.prototype.resetRemoveInterestState = function () {
        this.store.dispatch(new UserActions.ResetRemoveInterestState());
    };
    /**
     * Clears product interests
     */
    UserInterestsService.prototype.clearProductInterests = function () {
        this.store.dispatch(new UserActions.ClearProductInterests());
    };
    UserInterestsService.ctorParameters = function () { return [
        { type: Store },
        { type: AuthService }
    ]; };
    UserInterestsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserInterestsService_Factory() { return new UserInterestsService(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.AuthService)); }, token: UserInterestsService, providedIn: "root" });
    UserInterestsService = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], UserInterestsService);
    return UserInterestsService;
}());
export { UserInterestsService };
//# sourceMappingURL=data:application/json;base64,