import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, map, mergeMap, tap } from 'rxjs/operators';
import { GlobalMessageService, GlobalMessageType, } from '../../../global-message/index';
import { makeErrorSerializable } from '../../../util/serialization-utils';
import { UserAddressConnector } from '../../connectors/address/user-address.connector';
import { UserAddressService } from '../../facade/user-address.service';
import { UserActions } from '../actions/index';
var UserAddressesEffects = /** @class */ (function () {
    function UserAddressesEffects(actions$, userAddressConnector, userAddressService, messageService) {
        var _this = this;
        this.actions$ = actions$;
        this.userAddressConnector = userAddressConnector;
        this.userAddressService = userAddressService;
        this.messageService = messageService;
        this.loadUserAddresses$ = this.actions$.pipe(ofType(UserActions.LOAD_USER_ADDRESSES), map(function (action) { return action.payload; }), mergeMap(function (payload) {
            return _this.userAddressConnector.getAll(payload).pipe(map(function (addresses) {
                return new UserActions.LoadUserAddressesSuccess(addresses);
            }), catchError(function (error) {
                return of(new UserActions.LoadUserAddressesFail(makeErrorSerializable(error)));
            }));
        }));
        this.addUserAddress$ = this.actions$.pipe(ofType(UserActions.ADD_USER_ADDRESS), map(function (action) { return action.payload; }), mergeMap(function (payload) {
            return _this.userAddressConnector
                .add(payload.userId, payload.address)
                .pipe(map(function (data) {
                return new UserActions.AddUserAddressSuccess(data);
            }), catchError(function (error) {
                return of(new UserActions.AddUserAddressFail(makeErrorSerializable(error)));
            }));
        }));
        this.updateUserAddress$ = this.actions$.pipe(ofType(UserActions.UPDATE_USER_ADDRESS), map(function (action) { return action.payload; }), mergeMap(function (payload) {
            return _this.userAddressConnector
                .update(payload.userId, payload.addressId, payload.address)
                .pipe(map(function (data) {
                // don't show the message if just setting address as default
                if (payload.address &&
                    Object.keys(payload.address).length === 1 &&
                    payload.address.defaultAddress) {
                    return new UserActions.LoadUserAddresses(payload.userId);
                }
                else {
                    return new UserActions.UpdateUserAddressSuccess(data);
                }
            }), catchError(function (error) {
                return of(new UserActions.UpdateUserAddressFail(makeErrorSerializable(error)));
            }));
        }));
        this.deleteUserAddress$ = this.actions$.pipe(ofType(UserActions.DELETE_USER_ADDRESS), map(function (action) { return action.payload; }), mergeMap(function (payload) {
            return _this.userAddressConnector
                .delete(payload.userId, payload.addressId)
                .pipe(map(function (data) {
                return new UserActions.DeleteUserAddressSuccess(data);
            }), catchError(function (error) {
                return of(new UserActions.DeleteUserAddressFail(makeErrorSerializable(error)));
            }));
        }));
        /**
         *  Reload addresses and notify about add success
         */
        this.showGlobalMessageOnAddSuccess$ = this.actions$.pipe(ofType(UserActions.ADD_USER_ADDRESS_SUCCESS), tap(function () {
            _this.loadAddresses();
            _this.showGlobalMessage('addressForm.userAddressAddSuccess');
        }));
        /**
         *  Reload addresses and notify about update success
         */
        this.showGlobalMessageOnUpdateSuccess$ = this.actions$.pipe(ofType(UserActions.UPDATE_USER_ADDRESS_SUCCESS), tap(function () {
            _this.loadAddresses();
            _this.showGlobalMessage('addressForm.userAddressUpdateSuccess');
        }));
        /**
         *  Reload addresses and notify about delete success
         */
        this.showGlobalMessageOnDeleteSuccess$ = this.actions$.pipe(ofType(UserActions.DELETE_USER_ADDRESS_SUCCESS), tap(function () {
            _this.loadAddresses();
            _this.showGlobalMessage('addressForm.userAddressDeleteSuccess');
        }));
    }
    /**
     * Show global confirmation message with provided text
     */
    UserAddressesEffects.prototype.showGlobalMessage = function (text) {
        this.messageService.add({ key: text }, GlobalMessageType.MSG_TYPE_CONFIRMATION);
    };
    UserAddressesEffects.prototype.loadAddresses = function () {
        this.userAddressService.loadAddresses();
    };
    UserAddressesEffects.ctorParameters = function () { return [
        { type: Actions },
        { type: UserAddressConnector },
        { type: UserAddressService },
        { type: GlobalMessageService }
    ]; };
    __decorate([
        Effect()
    ], UserAddressesEffects.prototype, "loadUserAddresses$", void 0);
    __decorate([
        Effect()
    ], UserAddressesEffects.prototype, "addUserAddress$", void 0);
    __decorate([
        Effect()
    ], UserAddressesEffects.prototype, "updateUserAddress$", void 0);
    __decorate([
        Effect()
    ], UserAddressesEffects.prototype, "deleteUserAddress$", void 0);
    __decorate([
        Effect({ dispatch: false })
    ], UserAddressesEffects.prototype, "showGlobalMessageOnAddSuccess$", void 0);
    __decorate([
        Effect({ dispatch: false })
    ], UserAddressesEffects.prototype, "showGlobalMessageOnUpdateSuccess$", void 0);
    __decorate([
        Effect({ dispatch: false })
    ], UserAddressesEffects.prototype, "showGlobalMessageOnDeleteSuccess$", void 0);
    UserAddressesEffects = __decorate([
        Injectable()
    ], UserAddressesEffects);
    return UserAddressesEffects;
}());
export { UserAddressesEffects };
//# sourceMappingURL=data:application/json;base64,