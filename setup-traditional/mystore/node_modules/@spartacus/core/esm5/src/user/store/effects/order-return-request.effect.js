import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { makeErrorSerializable } from '../../../util/serialization-utils';
import { UserOrderConnector } from '../../connectors/order/user-order.connector';
import { UserActions } from '../actions/index';
var OrderReturnRequestEffect = /** @class */ (function () {
    function OrderReturnRequestEffect(actions$, orderConnector) {
        var _this = this;
        this.actions$ = actions$;
        this.orderConnector = orderConnector;
        this.createReturnRequest$ = this.actions$.pipe(ofType(UserActions.CREATE_ORDER_RETURN_REQUEST), map(function (action) { return action.payload; }), switchMap(function (payload) {
            return _this.orderConnector
                .return(payload.userId, payload.returnRequestInput)
                .pipe(map(function (returnRequest) {
                return new UserActions.CreateOrderReturnRequestSuccess(returnRequest);
            }), catchError(function (error) {
                return of(new UserActions.CreateOrderReturnRequestFail(makeErrorSerializable(error)));
            }));
        }));
        this.loadReturnRequest$ = this.actions$.pipe(ofType(UserActions.LOAD_ORDER_RETURN_REQUEST), map(function (action) { return action.payload; }), switchMap(function (payload) {
            return _this.orderConnector
                .getReturnRequestDetail(payload.userId, payload.returnRequestCode)
                .pipe(map(function (returnRequest) {
                return new UserActions.LoadOrderReturnRequestSuccess(returnRequest);
            }), catchError(function (error) {
                return of(new UserActions.LoadOrderReturnRequestFail(makeErrorSerializable(error)));
            }));
        }));
        this.cancelReturnRequest$ = this.actions$.pipe(ofType(UserActions.CANCEL_ORDER_RETURN_REQUEST), map(function (action) { return action.payload; }), switchMap(function (payload) {
            return _this.orderConnector
                .cancelReturnRequest(payload.userId, payload.returnRequestCode, payload.returnRequestModification)
                .pipe(map(function () { return new UserActions.CancelOrderReturnRequestSuccess(); }), catchError(function (error) {
                return of(new UserActions.CancelOrderReturnRequestFail(makeErrorSerializable(error)));
            }));
        }));
        this.loadReturnRequestList$ = this.actions$.pipe(ofType(UserActions.LOAD_ORDER_RETURN_REQUEST_LIST), map(function (action) { return action.payload; }), switchMap(function (payload) {
            return _this.orderConnector
                .getReturnRequestList(payload.userId, payload.pageSize, payload.currentPage, payload.sort)
                .pipe(map(function (returnRequestList) {
                return new UserActions.LoadOrderReturnRequestListSuccess(returnRequestList);
            }), catchError(function (error) {
                return of(new UserActions.LoadOrderReturnRequestListFail(makeErrorSerializable(error)));
            }));
        }));
    }
    OrderReturnRequestEffect.ctorParameters = function () { return [
        { type: Actions },
        { type: UserOrderConnector }
    ]; };
    __decorate([
        Effect()
    ], OrderReturnRequestEffect.prototype, "createReturnRequest$", void 0);
    __decorate([
        Effect()
    ], OrderReturnRequestEffect.prototype, "loadReturnRequest$", void 0);
    __decorate([
        Effect()
    ], OrderReturnRequestEffect.prototype, "cancelReturnRequest$", void 0);
    __decorate([
        Effect()
    ], OrderReturnRequestEffect.prototype, "loadReturnRequestList$", void 0);
    OrderReturnRequestEffect = __decorate([
        Injectable()
    ], OrderReturnRequestEffect);
    return OrderReturnRequestEffect;
}());
export { OrderReturnRequestEffect };
//# sourceMappingURL=data:application/json;base64,