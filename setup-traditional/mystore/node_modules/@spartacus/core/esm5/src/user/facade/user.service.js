import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { select, Store } from '@ngrx/store';
import { tap } from 'rxjs/operators';
import { AuthService } from '../../auth/facade/auth.service';
import { OCC_USER_ID_ANONYMOUS } from '../../occ/index';
import { getProcessErrorFactory, getProcessLoadingFactory, getProcessSuccessFactory, } from '../../process/store/selectors/process.selectors';
import { UserActions } from '../store/actions/index';
import { UsersSelectors } from '../store/selectors/index';
import { REGISTER_USER_PROCESS_ID, REMOVE_USER_PROCESS_ID, UPDATE_EMAIL_PROCESS_ID, UPDATE_PASSWORD_PROCESS_ID, UPDATE_USER_DETAILS_PROCESS_ID, } from '../store/user-state';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "../../auth/facade/auth.service";
var UserService = /** @class */ (function () {
    function UserService(store, authService) {
        this.store = store;
        this.authService = authService;
    }
    /**
     * Returns a user
     */
    UserService.prototype.get = function () {
        var _this = this;
        return this.store.pipe(select(UsersSelectors.getDetails), tap(function (details) {
            if (Object.keys(details).length === 0) {
                _this.load();
            }
        }));
    };
    /**
     * Loads the user's details
     */
    UserService.prototype.load = function () {
        var _this = this;
        this.authService.invokeWithUserId(function (userId) {
            if (userId !== OCC_USER_ID_ANONYMOUS) {
                _this.store.dispatch(new UserActions.LoadUserDetails(userId));
            }
        });
    };
    /**
     * Register a new user
     *
     * @param submitFormData as UserRegisterFormData
     */
    UserService.prototype.register = function (userRegisterFormData) {
        this.store.dispatch(new UserActions.RegisterUser(userRegisterFormData));
    };
    /**
     * Register a new user from guest
     *
     * @param guid
     * @param password
     */
    UserService.prototype.registerGuest = function (guid, password) {
        this.store.dispatch(new UserActions.RegisterGuest({ guid: guid, password: password }));
    };
    /**
     * Returns the register user process loading flag
     */
    UserService.prototype.getRegisterUserResultLoading = function () {
        return this.store.pipe(select(getProcessLoadingFactory(REGISTER_USER_PROCESS_ID)));
    };
    /**
     * Returns the register user process success flag
     */
    UserService.prototype.getRegisterUserResultSuccess = function () {
        return this.store.pipe(select(getProcessSuccessFactory(REGISTER_USER_PROCESS_ID)));
    };
    /**
     * Returns the register user process error flag
     */
    UserService.prototype.getRegisterUserResultError = function () {
        return this.store.pipe(select(getProcessErrorFactory(REGISTER_USER_PROCESS_ID)));
    };
    /**
     * Resets the register user process flags
     */
    UserService.prototype.resetRegisterUserProcessState = function () {
        return this.store.dispatch(new UserActions.ResetRegisterUserProcess());
    };
    /**
     * Remove user account, that's also called close user's account
     */
    UserService.prototype.remove = function () {
        var _this = this;
        this.authService.invokeWithUserId(function (userId) {
            _this.store.dispatch(new UserActions.RemoveUser(userId));
        });
    };
    /**
     * Returns the remove user loading flag
     */
    UserService.prototype.getRemoveUserResultLoading = function () {
        return this.store.pipe(select(getProcessLoadingFactory(REMOVE_USER_PROCESS_ID)));
    };
    /**
     * Returns the remove user failure outcome.
     */
    UserService.prototype.getRemoveUserResultError = function () {
        return this.store.pipe(select(getProcessErrorFactory(REMOVE_USER_PROCESS_ID)));
    };
    /**
     * Returns the remove user process success outcome.
     */
    UserService.prototype.getRemoveUserResultSuccess = function () {
        return this.store.pipe(select(getProcessSuccessFactory(REMOVE_USER_PROCESS_ID)));
    };
    /**
     * Resets the remove user process state. The state needs to be reset after the process
     * concludes, regardless if it's a success or an error
     */
    UserService.prototype.resetRemoveUserProcessState = function () {
        this.store.dispatch(new UserActions.RemoveUserReset());
    };
    /**
     * Returns titles
     */
    UserService.prototype.getTitles = function () {
        return this.store.pipe(select(UsersSelectors.getAllTitles));
    };
    /**
     * Retrieves titles
     */
    UserService.prototype.loadTitles = function () {
        this.store.dispatch(new UserActions.LoadTitles());
    };
    /**
     * Return whether user's password is successfully reset
     */
    UserService.prototype.isPasswordReset = function () {
        return this.store.pipe(select(UsersSelectors.getResetPassword));
    };
    /**
     * Updates the user's details
     * @param userDetails to be updated
     */
    UserService.prototype.updatePersonalDetails = function (userDetails) {
        var _this = this;
        this.authService.invokeWithUserId(function (userId) {
            _this.store.dispatch(new UserActions.UpdateUserDetails({
                username: userId,
                userDetails: userDetails,
            }));
        });
    };
    /**
     * Returns the update user's personal details loading flag
     */
    UserService.prototype.getUpdatePersonalDetailsResultLoading = function () {
        return this.store.pipe(select(getProcessLoadingFactory(UPDATE_USER_DETAILS_PROCESS_ID)));
    };
    /**
     * Returns the update user's personal details error flag
     */
    UserService.prototype.getUpdatePersonalDetailsResultError = function () {
        return this.store.pipe(select(getProcessErrorFactory(UPDATE_USER_DETAILS_PROCESS_ID)));
    };
    /**
     * Returns the update user's personal details success flag
     */
    UserService.prototype.getUpdatePersonalDetailsResultSuccess = function () {
        return this.store.pipe(select(getProcessSuccessFactory(UPDATE_USER_DETAILS_PROCESS_ID)));
    };
    /**
     * Resets the update user details processing state
     */
    UserService.prototype.resetUpdatePersonalDetailsProcessingState = function () {
        this.store.dispatch(new UserActions.ResetUpdateUserDetails());
    };
    /**
     * Reset new password.  Part of the forgot password flow.
     * @param token
     * @param password
     */
    UserService.prototype.resetPassword = function (token, password) {
        this.store.dispatch(new UserActions.ResetPassword({ token: token, password: password }));
    };
    /*
     * Request an email to reset a forgotten password.
     */
    UserService.prototype.requestForgotPasswordEmail = function (userEmailAddress) {
        this.store.dispatch(new UserActions.ForgotPasswordEmailRequest(userEmailAddress));
    };
    /**
     * Updates the user's email
     */
    UserService.prototype.updateEmail = function (password, newUid) {
        var _this = this;
        this.authService.invokeWithUserId(function (userId) {
            _this.store.dispatch(new UserActions.UpdateEmailAction({
                uid: userId,
                password: password,
                newUid: newUid,
            }));
        });
    };
    /**
     * Returns the update user's email success flag
     */
    UserService.prototype.getUpdateEmailResultSuccess = function () {
        return this.store.pipe(select(getProcessSuccessFactory(UPDATE_EMAIL_PROCESS_ID)));
    };
    /**
     * Returns the update user's email error flag
     */
    UserService.prototype.getUpdateEmailResultError = function () {
        return this.store.pipe(select(getProcessErrorFactory(UPDATE_EMAIL_PROCESS_ID)));
    };
    /**
     * Returns the update user's email loading flag
     */
    UserService.prototype.getUpdateEmailResultLoading = function () {
        return this.store.pipe(select(getProcessLoadingFactory(UPDATE_EMAIL_PROCESS_ID)));
    };
    /**
     * Resets the update user's email processing state
     */
    UserService.prototype.resetUpdateEmailResultState = function () {
        this.store.dispatch(new UserActions.ResetUpdateEmailAction());
    };
    /**
     * Updates the password for the user
     * @param oldPassword the current password that will be changed
     * @param newPassword the new password
     */
    UserService.prototype.updatePassword = function (oldPassword, newPassword) {
        var _this = this;
        this.authService.invokeWithUserId(function (userId) {
            _this.store.dispatch(new UserActions.UpdatePassword({
                userId: userId,
                oldPassword: oldPassword,
                newPassword: newPassword,
            }));
        });
    };
    /**
     * Returns the update password loading flag
     */
    UserService.prototype.getUpdatePasswordResultLoading = function () {
        return this.store.pipe(select(getProcessLoadingFactory(UPDATE_PASSWORD_PROCESS_ID)));
    };
    /**
     * Returns the update password failure outcome.
     */
    UserService.prototype.getUpdatePasswordResultError = function () {
        return this.store.pipe(select(getProcessErrorFactory(UPDATE_PASSWORD_PROCESS_ID)));
    };
    /**
     * Returns the update password process success outcome.
     */
    UserService.prototype.getUpdatePasswordResultSuccess = function () {
        return this.store.pipe(select(getProcessSuccessFactory(UPDATE_PASSWORD_PROCESS_ID)));
    };
    /**
     * Resets the update password process state. The state needs to be reset after the process
     * concludes, regardless if it's a success or an error
     */
    UserService.prototype.resetUpdatePasswordProcessState = function () {
        this.store.dispatch(new UserActions.UpdatePasswordReset());
    };
    UserService.ctorParameters = function () { return [
        { type: Store },
        { type: AuthService }
    ]; };
    UserService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserService_Factory() { return new UserService(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.AuthService)); }, token: UserService, providedIn: "root" });
    UserService = __decorate([
        Injectable({ providedIn: 'root' })
    ], UserService);
    return UserService;
}());
export { UserService };
//# sourceMappingURL=data:application/json;base64,