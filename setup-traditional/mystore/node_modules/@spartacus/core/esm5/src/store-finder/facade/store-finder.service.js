import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Action, select, Store } from '@ngrx/store';
import { WindowRef } from '../../window/window-ref';
import { StoreFinderActions } from '../store/actions/index';
import { StoreFinderSelectors } from '../store/selectors/index';
import { GlobalMessageService, GlobalMessageType, } from '../../global-message/index';
import { RoutingService } from '../../routing/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "../../window/window-ref";
import * as i3 from "../../global-message/facade/global-message.service";
import * as i4 from "../../routing/facade/routing.service";
var StoreFinderService = /** @class */ (function () {
    function StoreFinderService(store, winRef, globalMessageService, routingService) {
        this.store = store;
        this.winRef = winRef;
        this.globalMessageService = globalMessageService;
        this.routingService = routingService;
        this.geolocationWatchId = null;
    }
    /**
     * Returns boolean observable for store's loading state
     */
    StoreFinderService.prototype.getStoresLoading = function () {
        return this.store.pipe(select(StoreFinderSelectors.getStoresLoading));
    };
    /**
     * Returns observable for store's entities
     */
    StoreFinderService.prototype.getFindStoresEntities = function () {
        return this.store.pipe(select(StoreFinderSelectors.getFindStoresEntities));
    };
    /**
     * Returns boolean observable for view all store's loading state
     */
    StoreFinderService.prototype.getViewAllStoresLoading = function () {
        return this.store.pipe(select(StoreFinderSelectors.getViewAllStoresLoading));
    };
    /**
     * Returns observable for view all store's entities
     */
    StoreFinderService.prototype.getViewAllStoresEntities = function () {
        return this.store.pipe(select(StoreFinderSelectors.getViewAllStoresEntities));
    };
    /**
     * Store finding action functionality
     * @param queryText text query
     * @param searchConfig search configuration
     * @param longitudeLatitude longitude and latitude coordinates
     * @param countryIsoCode country ISO code
     * @param useMyLocation current location coordinates
     * @param radius radius of the scope from the center point
     */
    StoreFinderService.prototype.findStoresAction = function (queryText, searchConfig, longitudeLatitude, countryIsoCode, useMyLocation, radius) {
        var _this = this;
        if (useMyLocation && this.winRef.nativeWindow) {
            this.clearWatchGeolocation(new StoreFinderActions.FindStoresOnHold());
            this.geolocationWatchId = this.winRef.nativeWindow.navigator.geolocation.watchPosition(function (pos) {
                var position = {
                    longitude: pos.coords.longitude,
                    latitude: pos.coords.latitude,
                };
                _this.clearWatchGeolocation(new StoreFinderActions.FindStores({
                    queryText: queryText,
                    searchConfig: searchConfig,
                    longitudeLatitude: position,
                    countryIsoCode: countryIsoCode,
                    radius: radius,
                }));
            }, function () {
                _this.globalMessageService.add({ key: 'storeFinder.geolocationNotEnabled' }, GlobalMessageType.MSG_TYPE_ERROR);
                _this.routingService.go(['/store-finder']);
            });
        }
        else {
            this.clearWatchGeolocation(new StoreFinderActions.FindStores({
                queryText: queryText,
                searchConfig: searchConfig,
                longitudeLatitude: longitudeLatitude,
                countryIsoCode: countryIsoCode,
                radius: radius,
            }));
        }
    };
    /**
     * View all stores
     */
    StoreFinderService.prototype.viewAllStores = function () {
        this.clearWatchGeolocation(new StoreFinderActions.ViewAllStores());
    };
    /**
     * View all stores by id
     * @param storeId store id
     */
    StoreFinderService.prototype.viewStoreById = function (storeId) {
        this.clearWatchGeolocation(new StoreFinderActions.FindStoreById({ storeId: storeId }));
    };
    StoreFinderService.prototype.clearWatchGeolocation = function (callbackAction) {
        if (this.geolocationWatchId !== null) {
            this.winRef.nativeWindow.navigator.geolocation.clearWatch(this.geolocationWatchId);
            this.geolocationWatchId = null;
        }
        this.store.dispatch(callbackAction);
    };
    StoreFinderService.ctorParameters = function () { return [
        { type: Store },
        { type: WindowRef },
        { type: GlobalMessageService },
        { type: RoutingService }
    ]; };
    StoreFinderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function StoreFinderService_Factory() { return new StoreFinderService(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.WindowRef), i0.ɵɵinject(i3.GlobalMessageService), i0.ɵɵinject(i4.RoutingService)); }, token: StoreFinderService, providedIn: "root" });
    StoreFinderService = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], StoreFinderService);
    return StoreFinderService;
}());
export { StoreFinderService };
//# sourceMappingURL=data:application/json;base64,