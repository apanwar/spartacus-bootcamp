import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { BadGatewayHandler, BadRequestHandler, ConflictHandler, ForbiddenHandler, GatewayTimeoutHandler, HttpErrorHandler, InternalServerErrorHandler, NotFoundHandler, UnauthorizedErrorHandler, UnknownErrorHandler, } from './handlers/index';
import { HttpErrorInterceptor } from './http-error.interceptor';
export var errorHandlers = [
    {
        provide: HttpErrorHandler,
        useExisting: UnknownErrorHandler,
        multi: true,
    },
    {
        provide: HttpErrorHandler,
        useExisting: BadGatewayHandler,
        multi: true,
    },
    {
        provide: HttpErrorHandler,
        useExisting: BadRequestHandler,
        multi: true,
    },
    {
        provide: HttpErrorHandler,
        useExisting: ConflictHandler,
        multi: true,
    },
    {
        provide: HttpErrorHandler,
        useExisting: ForbiddenHandler,
        multi: true,
    },
    {
        provide: HttpErrorHandler,
        useExisting: GatewayTimeoutHandler,
        multi: true,
    },
    {
        provide: HttpErrorHandler,
        useExisting: InternalServerErrorHandler,
        multi: true,
    },
    {
        provide: HttpErrorHandler,
        useExisting: NotFoundHandler,
        multi: true,
    },
    {
        provide: HttpErrorHandler,
        useExisting: UnauthorizedErrorHandler,
        multi: true,
    },
];
export var httpErrorInterceptors = [
    {
        provide: HTTP_INTERCEPTORS,
        useExisting: HttpErrorInterceptor,
        multi: true,
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvZ2xvYmFsLW1lc3NhZ2UvaHR0cC1pbnRlcmNlcHRvcnMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFekQsT0FBTyxFQUNMLGlCQUFpQixFQUNqQixpQkFBaUIsRUFDakIsZUFBZSxFQUNmLGdCQUFnQixFQUNoQixxQkFBcUIsRUFDckIsZ0JBQWdCLEVBQ2hCLDBCQUEwQixFQUMxQixlQUFlLEVBQ2Ysd0JBQXdCLEVBQ3hCLG1CQUFtQixHQUNwQixNQUFNLGtCQUFrQixDQUFDO0FBQzFCLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRWhFLE1BQU0sQ0FBQyxJQUFNLGFBQWEsR0FBZTtJQUN2QztRQUNFLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsV0FBVyxFQUFFLG1CQUFtQjtRQUNoQyxLQUFLLEVBQUUsSUFBSTtLQUNaO0lBQ0Q7UUFDRSxPQUFPLEVBQUUsZ0JBQWdCO1FBQ3pCLFdBQVcsRUFBRSxpQkFBaUI7UUFDOUIsS0FBSyxFQUFFLElBQUk7S0FDWjtJQUNEO1FBQ0UsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixXQUFXLEVBQUUsaUJBQWlCO1FBQzlCLEtBQUssRUFBRSxJQUFJO0tBQ1o7SUFDRDtRQUNFLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsV0FBVyxFQUFFLGVBQWU7UUFDNUIsS0FBSyxFQUFFLElBQUk7S0FDWjtJQUNEO1FBQ0UsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixXQUFXLEVBQUUsZ0JBQWdCO1FBQzdCLEtBQUssRUFBRSxJQUFJO0tBQ1o7SUFDRDtRQUNFLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsV0FBVyxFQUFFLHFCQUFxQjtRQUNsQyxLQUFLLEVBQUUsSUFBSTtLQUNaO0lBQ0Q7UUFDRSxPQUFPLEVBQUUsZ0JBQWdCO1FBQ3pCLFdBQVcsRUFBRSwwQkFBMEI7UUFDdkMsS0FBSyxFQUFFLElBQUk7S0FDWjtJQUNEO1FBQ0UsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixXQUFXLEVBQUUsZUFBZTtRQUM1QixLQUFLLEVBQUUsSUFBSTtLQUNaO0lBQ0Q7UUFDRSxPQUFPLEVBQUUsZ0JBQWdCO1FBQ3pCLFdBQVcsRUFBRSx3QkFBd0I7UUFDckMsS0FBSyxFQUFFLElBQUk7S0FDWjtDQUNGLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSxxQkFBcUIsR0FBZTtJQUMvQztRQUNFLE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsV0FBVyxFQUFFLG9CQUFvQjtRQUNqQyxLQUFLLEVBQUUsSUFBSTtLQUNaO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhUVFBfSU5URVJDRVBUT1JTIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1xyXG4gIEJhZEdhdGV3YXlIYW5kbGVyLFxyXG4gIEJhZFJlcXVlc3RIYW5kbGVyLFxyXG4gIENvbmZsaWN0SGFuZGxlcixcclxuICBGb3JiaWRkZW5IYW5kbGVyLFxyXG4gIEdhdGV3YXlUaW1lb3V0SGFuZGxlcixcclxuICBIdHRwRXJyb3JIYW5kbGVyLFxyXG4gIEludGVybmFsU2VydmVyRXJyb3JIYW5kbGVyLFxyXG4gIE5vdEZvdW5kSGFuZGxlcixcclxuICBVbmF1dGhvcml6ZWRFcnJvckhhbmRsZXIsXHJcbiAgVW5rbm93bkVycm9ySGFuZGxlcixcclxufSBmcm9tICcuL2hhbmRsZXJzL2luZGV4JztcclxuaW1wb3J0IHsgSHR0cEVycm9ySW50ZXJjZXB0b3IgfSBmcm9tICcuL2h0dHAtZXJyb3IuaW50ZXJjZXB0b3InO1xyXG5cclxuZXhwb3J0IGNvbnN0IGVycm9ySGFuZGxlcnM6IFByb3ZpZGVyW10gPSBbXHJcbiAge1xyXG4gICAgcHJvdmlkZTogSHR0cEVycm9ySGFuZGxlcixcclxuICAgIHVzZUV4aXN0aW5nOiBVbmtub3duRXJyb3JIYW5kbGVyLFxyXG4gICAgbXVsdGk6IHRydWUsXHJcbiAgfSxcclxuICB7XHJcbiAgICBwcm92aWRlOiBIdHRwRXJyb3JIYW5kbGVyLFxyXG4gICAgdXNlRXhpc3Rpbmc6IEJhZEdhdGV3YXlIYW5kbGVyLFxyXG4gICAgbXVsdGk6IHRydWUsXHJcbiAgfSxcclxuICB7XHJcbiAgICBwcm92aWRlOiBIdHRwRXJyb3JIYW5kbGVyLFxyXG4gICAgdXNlRXhpc3Rpbmc6IEJhZFJlcXVlc3RIYW5kbGVyLFxyXG4gICAgbXVsdGk6IHRydWUsXHJcbiAgfSxcclxuICB7XHJcbiAgICBwcm92aWRlOiBIdHRwRXJyb3JIYW5kbGVyLFxyXG4gICAgdXNlRXhpc3Rpbmc6IENvbmZsaWN0SGFuZGxlcixcclxuICAgIG11bHRpOiB0cnVlLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcHJvdmlkZTogSHR0cEVycm9ySGFuZGxlcixcclxuICAgIHVzZUV4aXN0aW5nOiBGb3JiaWRkZW5IYW5kbGVyLFxyXG4gICAgbXVsdGk6IHRydWUsXHJcbiAgfSxcclxuICB7XHJcbiAgICBwcm92aWRlOiBIdHRwRXJyb3JIYW5kbGVyLFxyXG4gICAgdXNlRXhpc3Rpbmc6IEdhdGV3YXlUaW1lb3V0SGFuZGxlcixcclxuICAgIG11bHRpOiB0cnVlLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcHJvdmlkZTogSHR0cEVycm9ySGFuZGxlcixcclxuICAgIHVzZUV4aXN0aW5nOiBJbnRlcm5hbFNlcnZlckVycm9ySGFuZGxlcixcclxuICAgIG11bHRpOiB0cnVlLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgcHJvdmlkZTogSHR0cEVycm9ySGFuZGxlcixcclxuICAgIHVzZUV4aXN0aW5nOiBOb3RGb3VuZEhhbmRsZXIsXHJcbiAgICBtdWx0aTogdHJ1ZSxcclxuICB9LFxyXG4gIHtcclxuICAgIHByb3ZpZGU6IEh0dHBFcnJvckhhbmRsZXIsXHJcbiAgICB1c2VFeGlzdGluZzogVW5hdXRob3JpemVkRXJyb3JIYW5kbGVyLFxyXG4gICAgbXVsdGk6IHRydWUsXHJcbiAgfSxcclxuXTtcclxuXHJcbmV4cG9ydCBjb25zdCBodHRwRXJyb3JJbnRlcmNlcHRvcnM6IFByb3ZpZGVyW10gPSBbXHJcbiAge1xyXG4gICAgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsXHJcbiAgICB1c2VFeGlzdGluZzogSHR0cEVycm9ySW50ZXJjZXB0b3IsXHJcbiAgICBtdWx0aTogdHJ1ZSxcclxuICB9LFxyXG5dO1xyXG4iXX0=