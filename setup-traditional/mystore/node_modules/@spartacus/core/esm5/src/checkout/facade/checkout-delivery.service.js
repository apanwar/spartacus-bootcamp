import { __decorate, __read } from "tslib";
import { Injectable } from '@angular/core';
import { select, Store } from '@ngrx/store';
import { filter, pluck, shareReplay, tap, withLatestFrom, } from 'rxjs/operators';
import { AuthService } from '../../auth/facade/auth.service';
import { ActiveCartService } from '../../cart/facade/active-cart.service';
import { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';
import { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';
import { CheckoutActions } from '../store/actions/index';
import { SET_DELIVERY_ADDRESS_PROCESS_ID, SET_DELIVERY_MODE_PROCESS_ID, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID, } from '../store/checkout-state';
import { CheckoutSelectors } from '../store/selectors/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "../../auth/facade/auth.service";
import * as i3 from "../../cart/facade/active-cart.service";
var CheckoutDeliveryService = /** @class */ (function () {
    function CheckoutDeliveryService(checkoutStore, authService, activeCartService) {
        this.checkoutStore = checkoutStore;
        this.authService = authService;
        this.activeCartService = activeCartService;
    }
    /**
     * Get supported delivery modes
     */
    CheckoutDeliveryService.prototype.getSupportedDeliveryModes = function () {
        var _this = this;
        return this.checkoutStore.pipe(select(CheckoutSelectors.getSupportedDeliveryModes), withLatestFrom(this.checkoutStore.pipe(select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID)))), tap(function (_a) {
            var _b = __read(_a, 2), loadingState = _b[1];
            if (!(loadingState.loading || loadingState.success || loadingState.error)) {
                _this.loadSupportedDeliveryModes();
            }
        }), pluck(0), shareReplay({ bufferSize: 1, refCount: true }));
    };
    /**
     * Get selected delivery mode
     */
    CheckoutDeliveryService.prototype.getSelectedDeliveryMode = function () {
        return this.checkoutStore.pipe(select(CheckoutSelectors.getSelectedDeliveryMode));
    };
    /**
     * Get selected delivery mode code
     */
    CheckoutDeliveryService.prototype.getSelectedDeliveryModeCode = function () {
        return this.checkoutStore.pipe(select(CheckoutSelectors.getSelectedDeliveryModeCode));
    };
    /**
     * Get delivery address
     */
    CheckoutDeliveryService.prototype.getDeliveryAddress = function () {
        return this.checkoutStore.pipe(select(CheckoutSelectors.getDeliveryAddress));
    };
    /**
     * Get status about successfully set Delivery Address
     */
    CheckoutDeliveryService.prototype.getSetDeliveryAddressProcess = function () {
        return this.checkoutStore.pipe(select(getProcessStateFactory(SET_DELIVERY_ADDRESS_PROCESS_ID)));
    };
    /**
     * Clear info about process of setting Delivery Address
     */
    CheckoutDeliveryService.prototype.resetSetDeliveryAddressProcess = function () {
        this.checkoutStore.dispatch(new CheckoutActions.ResetSetDeliveryAddressProcess());
    };
    /**
     * Get status about of set Delivery Mode process
     */
    CheckoutDeliveryService.prototype.getSetDeliveryModeProcess = function () {
        return this.checkoutStore.pipe(select(getProcessStateFactory(SET_DELIVERY_MODE_PROCESS_ID)));
    };
    /**
     * Clear info about process of setting Delivery Mode
     */
    CheckoutDeliveryService.prototype.resetSetDeliveryModeProcess = function () {
        this.checkoutStore.dispatch(new CheckoutActions.ResetSetDeliveryModeProcess());
    };
    /**
     * Clear info about process of setting Supported Delivery Modes
     */
    CheckoutDeliveryService.prototype.resetLoadSupportedDeliveryModesProcess = function () {
        this.checkoutStore.dispatch(new CheckoutActions.ResetLoadSupportedDeliveryModesProcess());
    };
    /**
     * Get status about of set supported Delivery Modes process
     */
    CheckoutDeliveryService.prototype.getLoadSupportedDeliveryModeProcess = function () {
        return this.checkoutStore.pipe(select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID)));
    };
    /**
     * Clear supported delivery modes loaded in last checkout process
     */
    CheckoutDeliveryService.prototype.clearCheckoutDeliveryModes = function () {
        this.checkoutStore.dispatch(new CheckoutActions.ClearSupportedDeliveryModes());
    };
    /**
     * Get address verification results
     */
    CheckoutDeliveryService.prototype.getAddressVerificationResults = function () {
        return this.checkoutStore.pipe(select(CheckoutSelectors.getAddressVerificationResults), filter(function (results) { return Object.keys(results).length !== 0; }));
    };
    /**
     * Create and set a delivery address using the address param
     * @param address : the Address to be created and set
     */
    CheckoutDeliveryService.prototype.createAndSetAddress = function (address) {
        if (this.actionAllowed()) {
            var userId_1;
            this.authService
                .getOccUserId()
                .subscribe(function (occUserId) { return (userId_1 = occUserId); })
                .unsubscribe();
            var cartId_1;
            this.activeCartService
                .getActiveCartId()
                .subscribe(function (activeCartId) { return (cartId_1 = activeCartId); })
                .unsubscribe();
            if (userId_1 && cartId_1) {
                this.checkoutStore.dispatch(new CheckoutActions.AddDeliveryAddress({
                    userId: userId_1,
                    cartId: cartId_1,
                    address: address,
                }));
            }
        }
    };
    /**
     * Load supported delivery modes
     */
    CheckoutDeliveryService.prototype.loadSupportedDeliveryModes = function () {
        if (this.actionAllowed()) {
            var userId_2;
            this.authService
                .getOccUserId()
                .subscribe(function (occUserId) { return (userId_2 = occUserId); })
                .unsubscribe();
            var cartId_2;
            this.activeCartService
                .getActiveCartId()
                .subscribe(function (activeCartId) { return (cartId_2 = activeCartId); })
                .unsubscribe();
            if (userId_2 && cartId_2) {
                this.checkoutStore.dispatch(new CheckoutActions.LoadSupportedDeliveryModes({
                    userId: userId_2,
                    cartId: cartId_2,
                }));
            }
        }
    };
    /**
     * Set delivery mode
     * @param mode : The delivery mode to be set
     */
    CheckoutDeliveryService.prototype.setDeliveryMode = function (mode) {
        if (this.actionAllowed()) {
            var userId_3;
            this.authService
                .getOccUserId()
                .subscribe(function (occUserId) { return (userId_3 = occUserId); })
                .unsubscribe();
            var cartId_3;
            this.activeCartService
                .getActiveCartId()
                .subscribe(function (activeCartId) { return (cartId_3 = activeCartId); })
                .unsubscribe();
            if (userId_3 && cartId_3) {
                this.checkoutStore.dispatch(new CheckoutActions.SetDeliveryMode({
                    userId: userId_3,
                    cartId: cartId_3,
                    selectedModeId: mode,
                }));
            }
        }
    };
    /**
     * Verifies the address
     * @param address : the address to be verified
     */
    CheckoutDeliveryService.prototype.verifyAddress = function (address) {
        if (this.actionAllowed()) {
            var userId_4;
            this.authService
                .getOccUserId()
                .subscribe(function (occUserId) { return (userId_4 = occUserId); })
                .unsubscribe();
            if (userId_4) {
                this.checkoutStore.dispatch(new CheckoutActions.VerifyAddress({
                    userId: userId_4,
                    address: address,
                }));
            }
        }
    };
    /**
     * Set delivery address
     * @param address : The address to be set
     */
    CheckoutDeliveryService.prototype.setDeliveryAddress = function (address) {
        if (this.actionAllowed()) {
            var userId_5;
            this.authService
                .getOccUserId()
                .subscribe(function (occUserId) { return (userId_5 = occUserId); })
                .unsubscribe();
            var cartId_4;
            this.activeCartService
                .getActiveCartId()
                .subscribe(function (activeCartId) { return (cartId_4 = activeCartId); })
                .unsubscribe();
            if (cartId_4 && userId_5) {
                this.checkoutStore.dispatch(new CheckoutActions.SetDeliveryAddress({
                    userId: userId_5,
                    cartId: cartId_4,
                    address: address,
                }));
            }
        }
    };
    /**
     * Clear address verification results
     */
    CheckoutDeliveryService.prototype.clearAddressVerificationResults = function () {
        this.checkoutStore.dispatch(new CheckoutActions.ClearAddressVerificationResults());
    };
    /**
     * Clear address already setup in last checkout process
     */
    CheckoutDeliveryService.prototype.clearCheckoutDeliveryAddress = function () {
        var userId;
        this.authService
            .getOccUserId()
            .subscribe(function (occUserId) { return (userId = occUserId); })
            .unsubscribe();
        var cartId;
        this.activeCartService
            .getActiveCartId()
            .subscribe(function (activeCartId) { return (cartId = activeCartId); })
            .unsubscribe();
        if (userId && cartId) {
            this.checkoutStore.dispatch(new CheckoutActions.ClearCheckoutDeliveryAddress({
                userId: userId,
                cartId: cartId,
            }));
        }
    };
    /**
     * Clear selected delivery mode setup in last checkout process
     */
    CheckoutDeliveryService.prototype.clearCheckoutDeliveryMode = function () {
        var userId;
        this.authService
            .getOccUserId()
            .subscribe(function (occUserId) { return (userId = occUserId); })
            .unsubscribe();
        var cartId;
        this.activeCartService
            .getActiveCartId()
            .subscribe(function (activeCartId) { return (cartId = activeCartId); })
            .unsubscribe();
        if (userId && cartId) {
            this.checkoutStore.dispatch(new CheckoutActions.ClearCheckoutDeliveryMode({
                userId: userId,
                cartId: cartId,
            }));
        }
    };
    /**
     * Clear address and delivery mode already setup in last checkout process
     */
    CheckoutDeliveryService.prototype.clearCheckoutDeliveryDetails = function () {
        this.clearCheckoutDeliveryAddress();
        this.clearCheckoutDeliveryMode();
        this.clearCheckoutDeliveryModes();
    };
    CheckoutDeliveryService.prototype.actionAllowed = function () {
        var userId;
        this.authService
            .getOccUserId()
            .subscribe(function (occUserId) { return (userId = occUserId); })
            .unsubscribe();
        return ((userId && userId !== OCC_USER_ID_ANONYMOUS) ||
            this.activeCartService.isGuestCart());
    };
    CheckoutDeliveryService.ctorParameters = function () { return [
        { type: Store },
        { type: AuthService },
        { type: ActiveCartService }
    ]; };
    CheckoutDeliveryService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CheckoutDeliveryService_Factory() { return new CheckoutDeliveryService(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.ActiveCartService)); }, token: CheckoutDeliveryService, providedIn: "root" });
    CheckoutDeliveryService = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], CheckoutDeliveryService);
    return CheckoutDeliveryService;
}());
export { CheckoutDeliveryService };
//# sourceMappingURL=data:application/json;base64,