import { __assign } from "tslib";
import { loaderReducer } from '../../../state/utils/loader/loader.reducer';
import { serializePageContext } from '../../utils/cms-utils';
import { CmsActions } from '../actions/index';
export var initialState = {
    component: undefined,
    pageContext: {},
};
function componentExistsReducer(state, action) {
    switch (action.type) {
        case CmsActions.LOAD_CMS_COMPONENT_FAIL:
            return false;
        case CmsActions.CMS_GET_COMPONENT_FROM_PAGE:
        case CmsActions.LOAD_CMS_COMPONENT_SUCCESS:
            return true;
    }
    return state;
}
export function reducer(state, action) {
    var _a, _b, _c, _d;
    if (state === void 0) { state = initialState; }
    switch (action.type) {
        case CmsActions.LOAD_CMS_COMPONENT: {
            var pageContextReducer = loaderReducer(action.meta.entityType, componentExistsReducer);
            var context = serializePageContext(action.payload.pageContext, true);
            return __assign(__assign({}, state), { pageContext: __assign(__assign({}, state.pageContext), (_a = {}, _a[context] = pageContextReducer(state.pageContext[context], action), _a)) });
        }
        case CmsActions.LOAD_CMS_COMPONENT_FAIL: {
            var pageContextReducer = loaderReducer(action.meta.entityType, componentExistsReducer);
            var context = serializePageContext(action.payload.pageContext, true);
            return __assign(__assign({}, state), { pageContext: __assign(__assign({}, state.pageContext), (_b = {}, _b[context] = pageContextReducer(state.pageContext[context], action), _b)) });
        }
        case CmsActions.LOAD_CMS_COMPONENT_SUCCESS: {
            var pageContextReducer = loaderReducer(action.meta.entityType, componentExistsReducer);
            var context = serializePageContext(action.payload.pageContext, true);
            return __assign(__assign({}, state), { component: action.payload.component, pageContext: __assign(__assign({}, state.pageContext), (_c = {}, _c[context] = pageContextReducer(state.pageContext[context], action), _c)) });
        }
        case CmsActions.CMS_GET_COMPONENT_FROM_PAGE: {
            var pageContextReducer = loaderReducer(action.meta.entityType, componentExistsReducer);
            if (!Array.isArray(action.payload)) {
                var context = serializePageContext(action.payload.pageContext, true);
                return __assign(__assign({}, state), { component: action.payload.component, pageContext: __assign(__assign({}, state.pageContext), (_d = {}, _d[context] = pageContextReducer(state.pageContext[context], action), _d)) });
            }
        }
    }
    return state;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50cy5yZWR1Y2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2Ntcy9zdG9yZS9yZWR1Y2Vycy9jb21wb25lbnRzLnJlZHVjZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUMzRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFHOUMsTUFBTSxDQUFDLElBQU0sWUFBWSxHQUFzQjtJQUM3QyxTQUFTLEVBQUUsU0FBUztJQUNwQixXQUFXLEVBQUUsRUFBRTtDQUNoQixDQUFDO0FBRUYsU0FBUyxzQkFBc0IsQ0FDN0IsS0FBMEIsRUFDMUIsTUFBd0M7SUFFeEMsUUFBUSxNQUFNLENBQUMsSUFBSSxFQUFFO1FBQ25CLEtBQUssVUFBVSxDQUFDLHVCQUF1QjtZQUNyQyxPQUFPLEtBQUssQ0FBQztRQUVmLEtBQUssVUFBVSxDQUFDLDJCQUEyQixDQUFDO1FBQzVDLEtBQUssVUFBVSxDQUFDLDBCQUEwQjtZQUN4QyxPQUFPLElBQUksQ0FBQztLQUNmO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBRUQsTUFBTSxVQUFVLE9BQU8sQ0FDckIsS0FBb0IsRUFDcEIsTUFBd0M7O0lBRHhDLHNCQUFBLEVBQUEsb0JBQW9CO0lBR3BCLFFBQVEsTUFBTSxDQUFDLElBQUksRUFBRTtRQUNuQixLQUFLLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ2xDLElBQU0sa0JBQWtCLEdBQUcsYUFBYSxDQUN0QyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFDdEIsc0JBQXNCLENBQ3ZCLENBQUM7WUFDRixJQUFNLE9BQU8sR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN2RSw2QkFDSyxLQUFLLEtBQ1IsV0FBVyx3QkFDTixLQUFLLENBQUMsV0FBVyxnQkFDbkIsT0FBTyxJQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUUsTUFBTSxDQUFDLFVBRW5FO1NBQ0g7UUFDRCxLQUFLLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1lBQ3ZDLElBQU0sa0JBQWtCLEdBQUcsYUFBYSxDQUN0QyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFDdEIsc0JBQXNCLENBQ3ZCLENBQUM7WUFDRixJQUFNLE9BQU8sR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN2RSw2QkFDSyxLQUFLLEtBQ1IsV0FBVyx3QkFDTixLQUFLLENBQUMsV0FBVyxnQkFDbkIsT0FBTyxJQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUUsTUFBTSxDQUFDLFVBRW5FO1NBQ0g7UUFDRCxLQUFLLFVBQVUsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1lBQzFDLElBQU0sa0JBQWtCLEdBQUcsYUFBYSxDQUN0QyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFDdEIsc0JBQXNCLENBQ3ZCLENBQUM7WUFDRixJQUFNLE9BQU8sR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN2RSw2QkFDSyxLQUFLLEtBQ1IsU0FBUyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBYyxFQUN4QyxXQUFXLHdCQUNOLEtBQUssQ0FBQyxXQUFXLGdCQUNuQixPQUFPLElBQUcsa0JBQWtCLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLENBQUMsVUFFbkU7U0FDSDtRQUNELEtBQUssVUFBVSxDQUFDLDJCQUEyQixDQUFDLENBQUM7WUFDM0MsSUFBTSxrQkFBa0IsR0FBRyxhQUFhLENBQ3RDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUN0QixzQkFBc0IsQ0FDdkIsQ0FBQztZQUNGLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDbEMsSUFBTSxPQUFPLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQ3ZFLDZCQUNLLEtBQUssS0FDUixTQUFTLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFjLEVBQ3hDLFdBQVcsd0JBQ04sS0FBSyxDQUFDLFdBQVcsZ0JBQ25CLE9BQU8sSUFBRyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxFQUFFLE1BQU0sQ0FBQyxVQUVuRTthQUNIO1NBQ0Y7S0FDRjtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxvYWRlclJlZHVjZXIgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9sb2FkZXIvbG9hZGVyLnJlZHVjZXInO1xyXG5pbXBvcnQgeyBzZXJpYWxpemVQYWdlQ29udGV4dCB9IGZyb20gJy4uLy4uL3V0aWxzL2Ntcy11dGlscyc7XHJcbmltcG9ydCB7IENtc0FjdGlvbnMgfSBmcm9tICcuLi9hY3Rpb25zL2luZGV4JztcclxuaW1wb3J0IHsgQ29tcG9uZW50c0NvbnRleHQgfSBmcm9tICcuLi9jbXMtc3RhdGUnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGluaXRpYWxTdGF0ZTogQ29tcG9uZW50c0NvbnRleHQgPSB7XHJcbiAgY29tcG9uZW50OiB1bmRlZmluZWQsXHJcbiAgcGFnZUNvbnRleHQ6IHt9LFxyXG59O1xyXG5cclxuZnVuY3Rpb24gY29tcG9uZW50RXhpc3RzUmVkdWNlcjxUPihcclxuICBzdGF0ZTogYm9vbGVhbiB8IHVuZGVmaW5lZCxcclxuICBhY3Rpb246IENtc0FjdGlvbnMuQ21zQ29tcG9uZW50QWN0aW9uPFQ+XHJcbik6IGJvb2xlYW4ge1xyXG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgIGNhc2UgQ21zQWN0aW9ucy5MT0FEX0NNU19DT01QT05FTlRfRkFJTDpcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgIGNhc2UgQ21zQWN0aW9ucy5DTVNfR0VUX0NPTVBPTkVOVF9GUk9NX1BBR0U6XHJcbiAgICBjYXNlIENtc0FjdGlvbnMuTE9BRF9DTVNfQ09NUE9ORU5UX1NVQ0NFU1M6XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuICByZXR1cm4gc3RhdGU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2VyPFQ+KFxyXG4gIHN0YXRlID0gaW5pdGlhbFN0YXRlLFxyXG4gIGFjdGlvbjogQ21zQWN0aW9ucy5DbXNDb21wb25lbnRBY3Rpb248VD5cclxuKTogQ29tcG9uZW50c0NvbnRleHQge1xyXG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgIGNhc2UgQ21zQWN0aW9ucy5MT0FEX0NNU19DT01QT05FTlQ6IHtcclxuICAgICAgY29uc3QgcGFnZUNvbnRleHRSZWR1Y2VyID0gbG9hZGVyUmVkdWNlcjxib29sZWFuPihcclxuICAgICAgICBhY3Rpb24ubWV0YS5lbnRpdHlUeXBlLFxyXG4gICAgICAgIGNvbXBvbmVudEV4aXN0c1JlZHVjZXJcclxuICAgICAgKTtcclxuICAgICAgY29uc3QgY29udGV4dCA9IHNlcmlhbGl6ZVBhZ2VDb250ZXh0KGFjdGlvbi5wYXlsb2FkLnBhZ2VDb250ZXh0LCB0cnVlKTtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICBwYWdlQ29udGV4dDoge1xyXG4gICAgICAgICAgLi4uc3RhdGUucGFnZUNvbnRleHQsXHJcbiAgICAgICAgICBbY29udGV4dF06IHBhZ2VDb250ZXh0UmVkdWNlcihzdGF0ZS5wYWdlQ29udGV4dFtjb250ZXh0XSwgYWN0aW9uKSxcclxuICAgICAgICB9LFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgY2FzZSBDbXNBY3Rpb25zLkxPQURfQ01TX0NPTVBPTkVOVF9GQUlMOiB7XHJcbiAgICAgIGNvbnN0IHBhZ2VDb250ZXh0UmVkdWNlciA9IGxvYWRlclJlZHVjZXI8Ym9vbGVhbj4oXHJcbiAgICAgICAgYWN0aW9uLm1ldGEuZW50aXR5VHlwZSxcclxuICAgICAgICBjb21wb25lbnRFeGlzdHNSZWR1Y2VyXHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBzZXJpYWxpemVQYWdlQ29udGV4dChhY3Rpb24ucGF5bG9hZC5wYWdlQ29udGV4dCwgdHJ1ZSk7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgcGFnZUNvbnRleHQ6IHtcclxuICAgICAgICAgIC4uLnN0YXRlLnBhZ2VDb250ZXh0LFxyXG4gICAgICAgICAgW2NvbnRleHRdOiBwYWdlQ29udGV4dFJlZHVjZXIoc3RhdGUucGFnZUNvbnRleHRbY29udGV4dF0sIGFjdGlvbiksXHJcbiAgICAgICAgfSxcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGNhc2UgQ21zQWN0aW9ucy5MT0FEX0NNU19DT01QT05FTlRfU1VDQ0VTUzoge1xyXG4gICAgICBjb25zdCBwYWdlQ29udGV4dFJlZHVjZXIgPSBsb2FkZXJSZWR1Y2VyPGJvb2xlYW4+KFxyXG4gICAgICAgIGFjdGlvbi5tZXRhLmVudGl0eVR5cGUsXHJcbiAgICAgICAgY29tcG9uZW50RXhpc3RzUmVkdWNlclxyXG4gICAgICApO1xyXG4gICAgICBjb25zdCBjb250ZXh0ID0gc2VyaWFsaXplUGFnZUNvbnRleHQoYWN0aW9uLnBheWxvYWQucGFnZUNvbnRleHQsIHRydWUpO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIGNvbXBvbmVudDogYWN0aW9uLnBheWxvYWQuY29tcG9uZW50IGFzIFQsXHJcbiAgICAgICAgcGFnZUNvbnRleHQ6IHtcclxuICAgICAgICAgIC4uLnN0YXRlLnBhZ2VDb250ZXh0LFxyXG4gICAgICAgICAgW2NvbnRleHRdOiBwYWdlQ29udGV4dFJlZHVjZXIoc3RhdGUucGFnZUNvbnRleHRbY29udGV4dF0sIGFjdGlvbiksXHJcbiAgICAgICAgfSxcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGNhc2UgQ21zQWN0aW9ucy5DTVNfR0VUX0NPTVBPTkVOVF9GUk9NX1BBR0U6IHtcclxuICAgICAgY29uc3QgcGFnZUNvbnRleHRSZWR1Y2VyID0gbG9hZGVyUmVkdWNlcjxib29sZWFuPihcclxuICAgICAgICBhY3Rpb24ubWV0YS5lbnRpdHlUeXBlLFxyXG4gICAgICAgIGNvbXBvbmVudEV4aXN0c1JlZHVjZXJcclxuICAgICAgKTtcclxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGFjdGlvbi5wYXlsb2FkKSkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBzZXJpYWxpemVQYWdlQ29udGV4dChhY3Rpb24ucGF5bG9hZC5wYWdlQ29udGV4dCwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgICAgY29tcG9uZW50OiBhY3Rpb24ucGF5bG9hZC5jb21wb25lbnQgYXMgVCxcclxuICAgICAgICAgIHBhZ2VDb250ZXh0OiB7XHJcbiAgICAgICAgICAgIC4uLnN0YXRlLnBhZ2VDb250ZXh0LFxyXG4gICAgICAgICAgICBbY29udGV4dF06IHBhZ2VDb250ZXh0UmVkdWNlcihzdGF0ZS5wYWdlQ29udGV4dFtjb250ZXh0XSwgYWN0aW9uKSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gc3RhdGU7XHJcbn1cclxuIl19