import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { filter, map } from 'rxjs/operators';
import { TranslationService } from '../../i18n/translation.service';
import { PageType } from '../../model/cms.model';
import { CmsService } from '../facade/cms.service';
import { PageMetaResolver } from './page-meta.resolver';
import * as i0 from "@angular/core";
import * as i1 from "../facade/cms.service";
import * as i2 from "../../i18n/translation.service";
/**
 * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`.
 * More specific resolvers for content pages can be implemented by making them more
 * specific, for example by using the page template (see `CartPageMetaResolver`).
 *
 * The page title, and breadcrumbs are resolved in this implementation only.
 */
var ContentPageMetaResolver = /** @class */ (function (_super) {
    __extends(ContentPageMetaResolver, _super);
    function ContentPageMetaResolver(cms, translation) {
        var _this = _super.call(this) || this;
        _this.cms = cms;
        _this.translation = translation;
        /** helper to provie access to the current CMS page */
        _this.cms$ = _this.cms
            .getCurrentPage()
            .pipe(filter(function (p) { return Boolean(p); }));
        _this.pageType = PageType.CONTENT_PAGE;
        return _this;
    }
    /**
     * Resolves the page title for the ContentPage by taking the title
     * from the backend data.
     */
    ContentPageMetaResolver.prototype.resolveTitle = function () {
        return this.cms$.pipe(map(function (p) { return p.title; }));
    };
    /**
     * Resolves a single breacrumb item to the home page for each `ContentPage`.
     * The home page label is resolved from the translation service.
     */
    ContentPageMetaResolver.prototype.resolveBreadcrumbs = function () {
        return this.translation
            .translate('common.home')
            .pipe(map(function (label) { return [{ label: label, link: '/' }]; }));
    };
    ContentPageMetaResolver.ctorParameters = function () { return [
        { type: CmsService },
        { type: TranslationService }
    ]; };
    ContentPageMetaResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContentPageMetaResolver_Factory() { return new ContentPageMetaResolver(i0.ɵɵinject(i1.CmsService), i0.ɵɵinject(i2.TranslationService)); }, token: ContentPageMetaResolver, providedIn: "root" });
    ContentPageMetaResolver = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], ContentPageMetaResolver);
    return ContentPageMetaResolver;
}(PageMetaResolver));
export { ContentPageMetaResolver };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1wYWdlLW1ldGEucmVzb2x2ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL3BhZ2UvY29udGVudC1wYWdlLW1ldGEucmVzb2x2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNwRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDakQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRW5ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7O0FBR3hEOzs7Ozs7R0FNRztBQUlIO0lBQTZDLDJDQUFnQjtJQU8zRCxpQ0FDWSxHQUFlLEVBQ2YsV0FBK0I7UUFGM0MsWUFJRSxpQkFBTyxTQUVSO1FBTFcsU0FBRyxHQUFILEdBQUcsQ0FBWTtRQUNmLGlCQUFXLEdBQVgsV0FBVyxDQUFvQjtRQVAzQyxzREFBc0Q7UUFDNUMsVUFBSSxHQUFxQixLQUFJLENBQUMsR0FBRzthQUN4QyxjQUFjLEVBQUU7YUFDaEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBVixDQUFVLENBQUMsQ0FBQyxDQUFDO1FBT2pDLEtBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQzs7SUFDeEMsQ0FBQztJQUVEOzs7T0FHRztJQUNILDhDQUFZLEdBQVo7UUFDRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLENBQUMsQ0FBQyxLQUFLLEVBQVAsQ0FBTyxDQUFDLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsb0RBQWtCLEdBQWxCO1FBQ0UsT0FBTyxJQUFJLENBQUMsV0FBVzthQUNwQixTQUFTLENBQUMsYUFBYSxDQUFDO2FBQ3hCLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQyxLQUFLLElBQUssT0FBQSxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQXFCLEVBQWpELENBQWlELENBQUMsQ0FBQyxDQUFDO0lBQzdFLENBQUM7O2dCQXZCZ0IsVUFBVTtnQkFDRixrQkFBa0I7OztJQVRoQyx1QkFBdUI7UUFIbkMsVUFBVSxDQUFDO1lBQ1YsVUFBVSxFQUFFLE1BQU07U0FDbkIsQ0FBQztPQUNXLHVCQUF1QixDQWdDbkM7a0NBcEREO0NBb0RDLEFBaENELENBQTZDLGdCQUFnQixHQWdDNUQ7U0FoQ1ksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGZpbHRlciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBUcmFuc2xhdGlvblNlcnZpY2UgfSBmcm9tICcuLi8uLi9pMThuL3RyYW5zbGF0aW9uLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQYWdlVHlwZSB9IGZyb20gJy4uLy4uL21vZGVsL2Ntcy5tb2RlbCc7XHJcbmltcG9ydCB7IENtc1NlcnZpY2UgfSBmcm9tICcuLi9mYWNhZGUvY21zLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBCcmVhZGNydW1iTWV0YSwgUGFnZSB9IGZyb20gJy4uL21vZGVsL3BhZ2UubW9kZWwnO1xyXG5pbXBvcnQgeyBQYWdlTWV0YVJlc29sdmVyIH0gZnJvbSAnLi9wYWdlLW1ldGEucmVzb2x2ZXInO1xyXG5pbXBvcnQgeyBQYWdlQnJlYWRjcnVtYlJlc29sdmVyLCBQYWdlVGl0bGVSZXNvbHZlciB9IGZyb20gJy4vcGFnZS5yZXNvbHZlcnMnO1xyXG5cclxuLyoqXHJcbiAqIFJlc29sdmVzIHRoZSBwYWdlIGRhdGEgZm9yIGFsbCBDb250ZW50IFBhZ2VzIGJhc2VkIG9uIHRoZSBgUGFnZVR5cGUuQ09OVEVOVF9QQUdFYC5cclxuICogTW9yZSBzcGVjaWZpYyByZXNvbHZlcnMgZm9yIGNvbnRlbnQgcGFnZXMgY2FuIGJlIGltcGxlbWVudGVkIGJ5IG1ha2luZyB0aGVtIG1vcmVcclxuICogc3BlY2lmaWMsIGZvciBleGFtcGxlIGJ5IHVzaW5nIHRoZSBwYWdlIHRlbXBsYXRlIChzZWUgYENhcnRQYWdlTWV0YVJlc29sdmVyYCkuXHJcbiAqXHJcbiAqIFRoZSBwYWdlIHRpdGxlLCBhbmQgYnJlYWRjcnVtYnMgYXJlIHJlc29sdmVkIGluIHRoaXMgaW1wbGVtZW50YXRpb24gb25seS5cclxuICovXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDb250ZW50UGFnZU1ldGFSZXNvbHZlciBleHRlbmRzIFBhZ2VNZXRhUmVzb2x2ZXJcclxuICBpbXBsZW1lbnRzIFBhZ2VUaXRsZVJlc29sdmVyLCBQYWdlQnJlYWRjcnVtYlJlc29sdmVyIHtcclxuICAvKiogaGVscGVyIHRvIHByb3ZpZSBhY2Nlc3MgdG8gdGhlIGN1cnJlbnQgQ01TIHBhZ2UgKi9cclxuICBwcm90ZWN0ZWQgY21zJDogT2JzZXJ2YWJsZTxQYWdlPiA9IHRoaXMuY21zXHJcbiAgICAuZ2V0Q3VycmVudFBhZ2UoKVxyXG4gICAgLnBpcGUoZmlsdGVyKChwKSA9PiBCb29sZWFuKHApKSk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJvdGVjdGVkIGNtczogQ21zU2VydmljZSxcclxuICAgIHByb3RlY3RlZCB0cmFuc2xhdGlvbjogVHJhbnNsYXRpb25TZXJ2aWNlXHJcbiAgKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5wYWdlVHlwZSA9IFBhZ2VUeXBlLkNPTlRFTlRfUEFHRTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc29sdmVzIHRoZSBwYWdlIHRpdGxlIGZvciB0aGUgQ29udGVudFBhZ2UgYnkgdGFraW5nIHRoZSB0aXRsZVxyXG4gICAqIGZyb20gdGhlIGJhY2tlbmQgZGF0YS5cclxuICAgKi9cclxuICByZXNvbHZlVGl0bGUoKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcclxuICAgIHJldHVybiB0aGlzLmNtcyQucGlwZShtYXAoKHApID0+IHAudGl0bGUpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc29sdmVzIGEgc2luZ2xlIGJyZWFjcnVtYiBpdGVtIHRvIHRoZSBob21lIHBhZ2UgZm9yIGVhY2ggYENvbnRlbnRQYWdlYC5cclxuICAgKiBUaGUgaG9tZSBwYWdlIGxhYmVsIGlzIHJlc29sdmVkIGZyb20gdGhlIHRyYW5zbGF0aW9uIHNlcnZpY2UuXHJcbiAgICovXHJcbiAgcmVzb2x2ZUJyZWFkY3J1bWJzKCk6IE9ic2VydmFibGU8QnJlYWRjcnVtYk1ldGFbXT4ge1xyXG4gICAgcmV0dXJuIHRoaXMudHJhbnNsYXRpb25cclxuICAgICAgLnRyYW5zbGF0ZSgnY29tbW9uLmhvbWUnKVxyXG4gICAgICAucGlwZShtYXAoKGxhYmVsKSA9PiBbeyBsYWJlbDogbGFiZWwsIGxpbms6ICcvJyB9XSBhcyBCcmVhZGNydW1iTWV0YVtdKSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==