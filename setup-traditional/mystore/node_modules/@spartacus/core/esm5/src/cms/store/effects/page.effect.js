import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, filter, groupBy, map, mergeMap, switchMap, take, } from 'rxjs/operators';
import { AuthActions } from '../../../auth/store/actions/index';
import { RoutingService } from '../../../routing/index';
import { SiteContextActions } from '../../../site-context/store/actions/index';
import { makeErrorSerializable } from '../../../util/serialization-utils';
import { CmsPageConnector } from '../../connectors/page/cms-page.connector';
import { serializePageContext } from '../../utils/cms-utils';
import { CmsActions } from '../actions/index';
var PageEffects = /** @class */ (function () {
    function PageEffects(actions$, cmsPageConnector, routingService) {
        var _this = this;
        this.actions$ = actions$;
        this.cmsPageConnector = cmsPageConnector;
        this.routingService = routingService;
        this.refreshPage$ = this.actions$.pipe(ofType(SiteContextActions.LANGUAGE_CHANGE, AuthActions.LOGOUT, AuthActions.LOGIN), switchMap(function () {
            return _this.routingService.getRouterState().pipe(filter(function (routerState) {
                return routerState &&
                    routerState.state &&
                    routerState.state.cmsRequired &&
                    !routerState.nextState;
            }), take(1), map(function (routerState) { return routerState.state.context; }), mergeMap(function (context) { return of(new CmsActions.LoadCmsPageData(context)); }));
        }));
        this.loadPageData$ = this.actions$.pipe(ofType(CmsActions.LOAD_CMS_PAGE_DATA), map(function (action) { return action.payload; }), groupBy(function (pageContext) { return serializePageContext(pageContext); }), mergeMap(function (group) {
            return group.pipe(switchMap(function (pageContext) {
                return _this.cmsPageConnector.get(pageContext).pipe(mergeMap(function (cmsStructure) {
                    var actions = [
                        new CmsActions.CmsGetComponentFromPage(cmsStructure.components.map(function (component) { return ({
                            component: component,
                            pageContext: pageContext,
                        }); })),
                        new CmsActions.LoadCmsPageDataSuccess(pageContext, cmsStructure.page),
                    ];
                    var pageLabel = cmsStructure.page.label;
                    // For content pages the page label returned from backend can be different than page ID initially assumed from route.
                    // In such a case let's save the success response not only for initially assumed page ID, but also for correct page label.
                    if (pageLabel && pageLabel !== pageContext.id) {
                        actions.unshift(new CmsActions.CmsSetPageSuccessIndex({ id: pageLabel, type: pageContext.type }, cmsStructure.page));
                    }
                    return actions;
                }), catchError(function (error) {
                    return of(new CmsActions.LoadCmsPageDataFail(pageContext, makeErrorSerializable(error)));
                }));
            }));
        }));
    }
    PageEffects.ctorParameters = function () { return [
        { type: Actions },
        { type: CmsPageConnector },
        { type: RoutingService }
    ]; };
    __decorate([
        Effect()
    ], PageEffects.prototype, "refreshPage$", void 0);
    __decorate([
        Effect()
    ], PageEffects.prototype, "loadPageData$", void 0);
    PageEffects = __decorate([
        Injectable()
    ], PageEffects);
    return PageEffects;
}());
export { PageEffects };
//# sourceMappingURL=data:application/json;base64,