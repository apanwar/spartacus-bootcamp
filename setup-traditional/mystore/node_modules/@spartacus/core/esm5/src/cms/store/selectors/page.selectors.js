import { __values } from "tslib";
import { createSelector } from '@ngrx/store';
import { PageType } from '../../../model/cms.model';
import { StateUtils } from '../../../state/utils/index';
import { getCmsState } from './feature.selectors';
var getPageEntitiesSelector = function (state) { return state.pageData.entities; };
var ɵ0 = getPageEntitiesSelector;
var getIndexByType = function (index, type) {
    switch (type) {
        case PageType.CONTENT_PAGE: {
            return index.content;
        }
        case PageType.PRODUCT_PAGE: {
            return index.product;
        }
        case PageType.CATEGORY_PAGE: {
            return index.category;
        }
        case PageType.CATALOG_PAGE: {
            return index.catalog;
        }
    }
    return { entities: {} };
};
var ɵ1 = getIndexByType;
var getPageComponentTypesSelector = function (page) {
    var e_1, _a, e_2, _b;
    var componentTypes = new Set();
    if (page && page.slots) {
        try {
            for (var _c = __values(Object.keys(page.slots)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var slot = _d.value;
                try {
                    for (var _e = (e_2 = void 0, __values(page.slots[slot].components || [])), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var component = _f.value;
                        componentTypes.add(component.flexType);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    return Array.from(componentTypes);
};
var ɵ2 = getPageComponentTypesSelector;
var ɵ3 = function (state) { return state.page; };
export var getPageState = createSelector(getCmsState, ɵ3);
var ɵ4 = function (page) { return page.index; };
export var getPageStateIndex = createSelector(getPageState, ɵ4);
export var getPageStateIndexEntityLoaderState = function (pageContext) {
    return createSelector(getPageStateIndex, function (index) {
        return getIndexByType(index, pageContext.type);
    });
};
export var getPageStateIndexLoaderState = function (pageContext) {
    return createSelector(getPageStateIndexEntityLoaderState(pageContext), function (indexState) {
        return StateUtils.entityLoaderStateSelector(indexState, pageContext.id);
    });
};
export var getPageStateIndexValue = function (pageContext) {
    return createSelector(getPageStateIndexLoaderState(pageContext), function (entity) {
        return StateUtils.loaderValueSelector(entity);
    });
};
export var getPageEntities = createSelector(getPageState, getPageEntitiesSelector);
export var getPageData = function (pageContext) {
    return createSelector(getPageEntities, getPageStateIndexValue(pageContext), function (entities, indexValue) {
        return entities[indexValue];
    });
};
export var getPageComponentTypes = function (pageContext) {
    return createSelector(getPageData(pageContext), function (pageData) {
        return getPageComponentTypesSelector(pageData);
    });
};
export var getCurrentSlotSelectorFactory = function (pageContext, position) {
    return createSelector(getPageData(pageContext), function (entity) {
        if (entity) {
            return entity.slots[position] || { components: [] };
        }
    });
};
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS5zZWxlY3RvcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL3N0b3JlL3NlbGVjdG9ycy9wYWdlLnNlbGVjdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBb0IsTUFBTSxhQUFhLENBQUM7QUFDL0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXBELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUl4RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFbEQsSUFBTSx1QkFBdUIsR0FBRyxVQUFDLEtBQWdCLElBQUssT0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBdkIsQ0FBdUIsQ0FBQzs7QUFDOUUsSUFBTSxjQUFjLEdBQUcsVUFDckIsS0FBZ0IsRUFDaEIsSUFBYztJQUVkLFFBQVEsSUFBSSxFQUFFO1FBQ1osS0FBSyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDMUIsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDO1NBQ3RCO1FBQ0QsS0FBSyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDMUIsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDO1NBQ3RCO1FBQ0QsS0FBSyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDM0IsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDO1NBQ3ZCO1FBQ0QsS0FBSyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDMUIsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDO1NBQ3RCO0tBQ0Y7SUFDRCxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUFDO0FBQzFCLENBQUMsQ0FBQzs7QUFFRixJQUFNLDZCQUE2QixHQUE2QixVQUM5RCxJQUFVOztJQUVWLElBQU0sY0FBYyxHQUFHLElBQUksR0FBRyxFQUFVLENB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RUFBRSxFQUFFLEVBQUUsQ0FBQztTQUNyRDtJQUNILENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IsIE1lbW9pemVkU2VsZWN0b3IgfSBmcm9tICdAbmdyeC9zdG9yZSc7XHJcbmltcG9ydCB7IFBhZ2VUeXBlIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY21zLm1vZGVsJztcclxuaW1wb3J0IHsgUGFnZUNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9yb3V0aW5nJztcclxuaW1wb3J0IHsgU3RhdGVVdGlscyB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2luZGV4JztcclxuaW1wb3J0IHsgQ29udGVudFNsb3REYXRhIH0gZnJvbSAnLi4vLi4vbW9kZWwvY29udGVudC1zbG90LWRhdGEubW9kZWwnO1xyXG5pbXBvcnQgeyBQYWdlIH0gZnJvbSAnLi4vLi4vbW9kZWwvcGFnZS5tb2RlbCc7XHJcbmltcG9ydCB7IENtc1N0YXRlLCBJbmRleFR5cGUsIFBhZ2VTdGF0ZSwgU3RhdGVXaXRoQ21zIH0gZnJvbSAnLi4vY21zLXN0YXRlJztcclxuaW1wb3J0IHsgZ2V0Q21zU3RhdGUgfSBmcm9tICcuL2ZlYXR1cmUuc2VsZWN0b3JzJztcclxuXHJcbmNvbnN0IGdldFBhZ2VFbnRpdGllc1NlbGVjdG9yID0gKHN0YXRlOiBQYWdlU3RhdGUpID0+IHN0YXRlLnBhZ2VEYXRhLmVudGl0aWVzO1xyXG5jb25zdCBnZXRJbmRleEJ5VHlwZSA9IChcclxuICBpbmRleDogSW5kZXhUeXBlLFxyXG4gIHR5cGU6IFBhZ2VUeXBlXHJcbik6IFN0YXRlVXRpbHMuRW50aXR5TG9hZGVyU3RhdGU8c3RyaW5nPiA9PiB7XHJcbiAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICBjYXNlIFBhZ2VUeXBlLkNPTlRFTlRfUEFHRToge1xyXG4gICAgICByZXR1cm4gaW5kZXguY29udGVudDtcclxuICAgIH1cclxuICAgIGNhc2UgUGFnZVR5cGUuUFJPRFVDVF9QQUdFOiB7XHJcbiAgICAgIHJldHVybiBpbmRleC5wcm9kdWN0O1xyXG4gICAgfVxyXG4gICAgY2FzZSBQYWdlVHlwZS5DQVRFR09SWV9QQUdFOiB7XHJcbiAgICAgIHJldHVybiBpbmRleC5jYXRlZ29yeTtcclxuICAgIH1cclxuICAgIGNhc2UgUGFnZVR5cGUuQ0FUQUxPR19QQUdFOiB7XHJcbiAgICAgIHJldHVybiBpbmRleC5jYXRhbG9nO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4geyBlbnRpdGllczoge30gfTtcclxufTtcclxuXHJcbmNvbnN0IGdldFBhZ2VDb21wb25lbnRUeXBlc1NlbGVjdG9yOiAocGFnZTogUGFnZSkgPT4gc3RyaW5nW10gPSAoXHJcbiAgcGFnZTogUGFnZVxyXG4pID0+IHtcclxuICBjb25zdCBjb21wb25lbnRUeXBlcyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xyXG4gIGlmIChwYWdlICYmIHBhZ2Uuc2xvdHMpIHtcclxuICAgIGZvciAoY29uc3Qgc2xvdCBvZiBPYmplY3Qua2V5cyhwYWdlLnNsb3RzKSkge1xyXG4gICAgICBmb3IgKGNvbnN0IGNvbXBvbmVudCBvZiBwYWdlLnNsb3RzW3Nsb3RdLmNvbXBvbmVudHMgfHwgW10pIHtcclxuICAgICAgICBjb21wb25lbnRUeXBlcy5hZGQoY29tcG9uZW50LmZsZXhUeXBlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gQXJyYXkuZnJvbShjb21wb25lbnRUeXBlcyk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0UGFnZVN0YXRlOiBNZW1vaXplZFNlbGVjdG9yPFxyXG4gIFN0YXRlV2l0aENtcyxcclxuICBQYWdlU3RhdGVcclxuPiA9IGNyZWF0ZVNlbGVjdG9yKGdldENtc1N0YXRlLCAoc3RhdGU6IENtc1N0YXRlKSA9PiBzdGF0ZS5wYWdlKTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRQYWdlU3RhdGVJbmRleDogTWVtb2l6ZWRTZWxlY3RvcjxcclxuICBTdGF0ZVdpdGhDbXMsXHJcbiAgSW5kZXhUeXBlXHJcbj4gPSBjcmVhdGVTZWxlY3RvcihnZXRQYWdlU3RhdGUsIChwYWdlOiBQYWdlU3RhdGUpID0+IHBhZ2UuaW5kZXgpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFBhZ2VTdGF0ZUluZGV4RW50aXR5TG9hZGVyU3RhdGUgPSAoXHJcbiAgcGFnZUNvbnRleHQ6IFBhZ2VDb250ZXh0XHJcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoQ21zLCBTdGF0ZVV0aWxzLkVudGl0eUxvYWRlclN0YXRlPHN0cmluZz4+ID0+XHJcbiAgY3JlYXRlU2VsZWN0b3IoZ2V0UGFnZVN0YXRlSW5kZXgsIChpbmRleDogSW5kZXhUeXBlKSA9PlxyXG4gICAgZ2V0SW5kZXhCeVR5cGUoaW5kZXgsIHBhZ2VDb250ZXh0LnR5cGUpXHJcbiAgKTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRQYWdlU3RhdGVJbmRleExvYWRlclN0YXRlID0gKFxyXG4gIHBhZ2VDb250ZXh0OiBQYWdlQ29udGV4dFxyXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aENtcywgU3RhdGVVdGlscy5Mb2FkZXJTdGF0ZTxzdHJpbmc+PiA9PlxyXG4gIGNyZWF0ZVNlbGVjdG9yKFxyXG4gICAgZ2V0UGFnZVN0YXRlSW5kZXhFbnRpdHlMb2FkZXJTdGF0ZShwYWdlQ29udGV4dCksXHJcbiAgICAoaW5kZXhTdGF0ZSkgPT5cclxuICAgICAgU3RhdGVVdGlscy5lbnRpdHlMb2FkZXJTdGF0ZVNlbGVjdG9yKGluZGV4U3RhdGUsIHBhZ2VDb250ZXh0LmlkKVxyXG4gICk7XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0UGFnZVN0YXRlSW5kZXhWYWx1ZSA9IChcclxuICBwYWdlQ29udGV4dDogUGFnZUNvbnRleHRcclxuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhDbXMsIHN0cmluZz4gPT5cclxuICBjcmVhdGVTZWxlY3RvcihnZXRQYWdlU3RhdGVJbmRleExvYWRlclN0YXRlKHBhZ2VDb250ZXh0KSwgKGVudGl0eSkgPT5cclxuICAgIFN0YXRlVXRpbHMubG9hZGVyVmFsdWVTZWxlY3RvcjxzdHJpbmc+KGVudGl0eSlcclxuICApO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFBhZ2VFbnRpdGllczogTWVtb2l6ZWRTZWxlY3RvcjxcclxuICBTdGF0ZVdpdGhDbXMsXHJcbiAgeyBbaWQ6IHN0cmluZ106IFBhZ2UgfVxyXG4+ID0gY3JlYXRlU2VsZWN0b3IoZ2V0UGFnZVN0YXRlLCBnZXRQYWdlRW50aXRpZXNTZWxlY3Rvcik7XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0UGFnZURhdGEgPSAoXHJcbiAgcGFnZUNvbnRleHQ6IFBhZ2VDb250ZXh0XHJcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoQ21zLCBQYWdlPiA9PlxyXG4gIGNyZWF0ZVNlbGVjdG9yKFxyXG4gICAgZ2V0UGFnZUVudGl0aWVzLFxyXG4gICAgZ2V0UGFnZVN0YXRlSW5kZXhWYWx1ZShwYWdlQ29udGV4dCksXHJcbiAgICAoZW50aXRpZXM6IHsgW2lkOiBzdHJpbmddOiBQYWdlIH0sIGluZGV4VmFsdWU6IHN0cmluZykgPT5cclxuICAgICAgZW50aXRpZXNbaW5kZXhWYWx1ZV1cclxuICApO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFBhZ2VDb21wb25lbnRUeXBlcyA9IChcclxuICBwYWdlQ29udGV4dDogUGFnZUNvbnRleHRcclxuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhDbXMsIHN0cmluZ1tdPiA9PlxyXG4gIGNyZWF0ZVNlbGVjdG9yKGdldFBhZ2VEYXRhKHBhZ2VDb250ZXh0KSwgKHBhZ2VEYXRhKSA9PlxyXG4gICAgZ2V0UGFnZUNvbXBvbmVudFR5cGVzU2VsZWN0b3IocGFnZURhdGEpXHJcbiAgKTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRDdXJyZW50U2xvdFNlbGVjdG9yRmFjdG9yeSA9IChcclxuICBwYWdlQ29udGV4dDogUGFnZUNvbnRleHQsXHJcbiAgcG9zaXRpb246IHN0cmluZ1xyXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aENtcywgQ29udGVudFNsb3REYXRhPiA9PiB7XHJcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKGdldFBhZ2VEYXRhKHBhZ2VDb250ZXh0KSwgKGVudGl0eSkgPT4ge1xyXG4gICAgaWYgKGVudGl0eSkge1xyXG4gICAgICByZXR1cm4gZW50aXR5LnNsb3RzW3Bvc2l0aW9uXSB8fCB7IGNvbXBvbmVudHM6IFtdIH07XHJcbiAgICB9XHJcbiAgfSk7XHJcbn07XHJcbiJdfQ==