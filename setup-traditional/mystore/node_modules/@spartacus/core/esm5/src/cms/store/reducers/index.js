import { InjectionToken } from '@angular/core';
import { combineReducers, } from '@ngrx/store';
import { AuthActions } from '../../../auth/store/actions/index';
import { PageType } from '../../../model/cms.model';
import { SiteContextActions } from '../../../site-context/store/actions/index';
import { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';
import { entityReducer } from '../../../state/utils/entity/entity.reducer';
import { COMPONENT_ENTITY, NAVIGATION_DETAIL_ENTITY, } from '../cms-state';
import * as fromComponentsReducer from './components.reducer';
import * as fromNavigation from './navigation-entry-item.reducer';
import * as fromPageReducer from './page-data.reducer';
import * as fromPageIndexReducer from './page-index.reducer';
export function getReducers() {
    return {
        page: combineReducers({
            pageData: fromPageReducer.reducer,
            index: combineReducers({
                content: entityLoaderReducer(PageType.CONTENT_PAGE, fromPageIndexReducer.reducer(PageType.CONTENT_PAGE)),
                product: entityLoaderReducer(PageType.PRODUCT_PAGE, fromPageIndexReducer.reducer(PageType.PRODUCT_PAGE)),
                category: entityLoaderReducer(PageType.CATEGORY_PAGE, fromPageIndexReducer.reducer(PageType.CATEGORY_PAGE)),
                catalog: entityLoaderReducer(PageType.CATALOG_PAGE, fromPageIndexReducer.reducer(PageType.CATALOG_PAGE)),
            }),
        }),
        components: entityReducer(COMPONENT_ENTITY, fromComponentsReducer.reducer),
        navigation: entityLoaderReducer(NAVIGATION_DETAIL_ENTITY, fromNavigation.reducer),
    };
}
export var reducerToken = new InjectionToken('CmsReducers');
export var reducerProvider = {
    provide: reducerToken,
    useFactory: getReducers,
};
export function clearCmsState(reducer) {
    return function (state, action) {
        if (action.type === SiteContextActions.LANGUAGE_CHANGE ||
            action.type === AuthActions.LOGOUT ||
            action.type === AuthActions.LOGIN) {
            state = undefined;
        }
        return reducer(state, action);
    };
}
export var metaReducers = [clearCmsState];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL3N0b3JlL3JlZHVjZXJzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQVksTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUlMLGVBQWUsR0FFaEIsTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUMvRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwwREFBMEQsQ0FBQztBQUMvRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFFM0UsT0FBTyxFQUVMLGdCQUFnQixFQUNoQix3QkFBd0IsR0FFekIsTUFBTSxjQUFjLENBQUM7QUFDdEIsT0FBTyxLQUFLLHFCQUFxQixNQUFNLHNCQUFzQixDQUFDO0FBQzlELE9BQU8sS0FBSyxjQUFjLE1BQU0saUNBQWlDLENBQUM7QUFDbEUsT0FBTyxLQUFLLGVBQWUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEtBQUssb0JBQW9CLE1BQU0sc0JBQXNCLENBQUM7QUFFN0QsTUFBTSxVQUFVLFdBQVc7SUFDekIsT0FBTztRQUNMLElBQUksRUFBRSxlQUFlLENBQUM7WUFDcEIsUUFBUSxFQUFFLGVBQWUsQ0FBQyxPQUFPO1lBQ2pDLEtBQUssRUFBRSxlQUFlLENBQUM7Z0JBQ3JCLE9BQU8sRUFBRSxtQkFBbUIsQ0FDMUIsUUFBUSxDQUFDLFlBQVksRUFDckIsb0JBQW9CLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FDcEQ7Z0JBQ0QsT0FBTyxFQUFFLG1CQUFtQixDQUMxQixRQUFRLENBQUMsWUFBWSxFQUNyQixvQkFBb0IsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUNwRDtnQkFDRCxRQUFRLEVBQUUsbUJBQW1CLENBQzNCLFFBQVEsQ0FBQyxhQUFhLEVBQ3RCLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQ3JEO2dCQUNELE9BQU8sRUFBRSxtQkFBbUIsQ0FDMUIsUUFBUSxDQUFDLFlBQVksRUFDckIsb0JBQW9CLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FDcEQ7YUFDRixDQUFDO1NBQ0gsQ0FBQztRQUNGLFVBQVUsRUFBRSxhQUFhLENBQUMsZ0JBQWdCLEVBQUUscUJBQXFCLENBQUMsT0FBTyxDQUFDO1FBQzFFLFVBQVUsRUFBRSxtQkFBbUIsQ0FDN0Isd0JBQXdCLEVBQ3hCLGNBQWMsQ0FBQyxPQUFPLENBQ3ZCO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLENBQUMsSUFBTSxZQUFZLEdBRXBCLElBQUksY0FBYyxDQUE2QixhQUFhLENBQUMsQ0FBQztBQUVuRSxNQUFNLENBQUMsSUFBTSxlQUFlLEdBQWE7SUFDdkMsT0FBTyxFQUFFLFlBQVk7SUFDckIsVUFBVSxFQUFFLFdBQVc7Q0FDeEIsQ0FBQztBQUVGLE1BQU0sVUFBVSxhQUFhLENBQzNCLE9BQTRDO0lBRTVDLE9BQU8sVUFBVSxLQUFLLEVBQUUsTUFBTTtRQUM1QixJQUNFLE1BQU0sQ0FBQyxJQUFJLEtBQUssa0JBQWtCLENBQUMsZUFBZTtZQUNsRCxNQUFNLENBQUMsSUFBSSxLQUFLLFdBQVcsQ0FBQyxNQUFNO1lBQ2xDLE1BQU0sQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDLEtBQUssRUFDakM7WUFDQSxLQUFLLEdBQUcsU0FBUyxDQUFDO1NBQ25CO1FBQ0QsT0FBTyxPQUFPLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2hDLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLENBQUMsSUFBTSxZQUFZLEdBQWdDLENBQUMsYUFBYSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtcclxuICBBY3Rpb24sXHJcbiAgQWN0aW9uUmVkdWNlcixcclxuICBBY3Rpb25SZWR1Y2VyTWFwLFxyXG4gIGNvbWJpbmVSZWR1Y2VycyxcclxuICBNZXRhUmVkdWNlcixcclxufSBmcm9tICdAbmdyeC9zdG9yZSc7XHJcbmltcG9ydCB7IEF1dGhBY3Rpb25zIH0gZnJvbSAnLi4vLi4vLi4vYXV0aC9zdG9yZS9hY3Rpb25zL2luZGV4JztcclxuaW1wb3J0IHsgUGFnZVR5cGUgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9jbXMubW9kZWwnO1xyXG5pbXBvcnQgeyBTaXRlQ29udGV4dEFjdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9zaXRlLWNvbnRleHQvc3RvcmUvYWN0aW9ucy9pbmRleCc7XHJcbmltcG9ydCB7IGVudGl0eUxvYWRlclJlZHVjZXIgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9lbnRpdHktbG9hZGVyL2VudGl0eS1sb2FkZXIucmVkdWNlcic7XHJcbmltcG9ydCB7IGVudGl0eVJlZHVjZXIgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9lbnRpdHkvZW50aXR5LnJlZHVjZXInO1xyXG5pbXBvcnQgeyBOb2RlSXRlbSB9IGZyb20gJy4uLy4uL21vZGVsL25vZGUtaXRlbS5tb2RlbCc7XHJcbmltcG9ydCB7XHJcbiAgQ21zU3RhdGUsXHJcbiAgQ09NUE9ORU5UX0VOVElUWSxcclxuICBOQVZJR0FUSU9OX0RFVEFJTF9FTlRJVFksXHJcbiAgU3RhdGVXaXRoQ21zLFxyXG59IGZyb20gJy4uL2Ntcy1zdGF0ZSc7XHJcbmltcG9ydCAqIGFzIGZyb21Db21wb25lbnRzUmVkdWNlciBmcm9tICcuL2NvbXBvbmVudHMucmVkdWNlcic7XHJcbmltcG9ydCAqIGFzIGZyb21OYXZpZ2F0aW9uIGZyb20gJy4vbmF2aWdhdGlvbi1lbnRyeS1pdGVtLnJlZHVjZXInO1xyXG5pbXBvcnQgKiBhcyBmcm9tUGFnZVJlZHVjZXIgZnJvbSAnLi9wYWdlLWRhdGEucmVkdWNlcic7XHJcbmltcG9ydCAqIGFzIGZyb21QYWdlSW5kZXhSZWR1Y2VyIGZyb20gJy4vcGFnZS1pbmRleC5yZWR1Y2VyJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWR1Y2VycygpOiBBY3Rpb25SZWR1Y2VyTWFwPENtc1N0YXRlPiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHBhZ2U6IGNvbWJpbmVSZWR1Y2Vycyh7XHJcbiAgICAgIHBhZ2VEYXRhOiBmcm9tUGFnZVJlZHVjZXIucmVkdWNlcixcclxuICAgICAgaW5kZXg6IGNvbWJpbmVSZWR1Y2Vycyh7XHJcbiAgICAgICAgY29udGVudDogZW50aXR5TG9hZGVyUmVkdWNlcjxzdHJpbmc+KFxyXG4gICAgICAgICAgUGFnZVR5cGUuQ09OVEVOVF9QQUdFLFxyXG4gICAgICAgICAgZnJvbVBhZ2VJbmRleFJlZHVjZXIucmVkdWNlcihQYWdlVHlwZS5DT05URU5UX1BBR0UpXHJcbiAgICAgICAgKSxcclxuICAgICAgICBwcm9kdWN0OiBlbnRpdHlMb2FkZXJSZWR1Y2VyPHN0cmluZz4oXHJcbiAgICAgICAgICBQYWdlVHlwZS5QUk9EVUNUX1BBR0UsXHJcbiAgICAgICAgICBmcm9tUGFnZUluZGV4UmVkdWNlci5yZWR1Y2VyKFBhZ2VUeXBlLlBST0RVQ1RfUEFHRSlcclxuICAgICAgICApLFxyXG4gICAgICAgIGNhdGVnb3J5OiBlbnRpdHlMb2FkZXJSZWR1Y2VyPHN0cmluZz4oXHJcbiAgICAgICAgICBQYWdlVHlwZS5DQVRFR09SWV9QQUdFLFxyXG4gICAgICAgICAgZnJvbVBhZ2VJbmRleFJlZHVjZXIucmVkdWNlcihQYWdlVHlwZS5DQVRFR09SWV9QQUdFKVxyXG4gICAgICAgICksXHJcbiAgICAgICAgY2F0YWxvZzogZW50aXR5TG9hZGVyUmVkdWNlcjxzdHJpbmc+KFxyXG4gICAgICAgICAgUGFnZVR5cGUuQ0FUQUxPR19QQUdFLFxyXG4gICAgICAgICAgZnJvbVBhZ2VJbmRleFJlZHVjZXIucmVkdWNlcihQYWdlVHlwZS5DQVRBTE9HX1BBR0UpXHJcbiAgICAgICAgKSxcclxuICAgICAgfSksXHJcbiAgICB9KSxcclxuICAgIGNvbXBvbmVudHM6IGVudGl0eVJlZHVjZXIoQ09NUE9ORU5UX0VOVElUWSwgZnJvbUNvbXBvbmVudHNSZWR1Y2VyLnJlZHVjZXIpLFxyXG4gICAgbmF2aWdhdGlvbjogZW50aXR5TG9hZGVyUmVkdWNlcjxOb2RlSXRlbT4oXHJcbiAgICAgIE5BVklHQVRJT05fREVUQUlMX0VOVElUWSxcclxuICAgICAgZnJvbU5hdmlnYXRpb24ucmVkdWNlclxyXG4gICAgKSxcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcmVkdWNlclRva2VuOiBJbmplY3Rpb25Ub2tlbjxBY3Rpb25SZWR1Y2VyTWFwPFxyXG4gIENtc1N0YXRlXHJcbj4+ID0gbmV3IEluamVjdGlvblRva2VuPEFjdGlvblJlZHVjZXJNYXA8Q21zU3RhdGU+PignQ21zUmVkdWNlcnMnKTtcclxuXHJcbmV4cG9ydCBjb25zdCByZWR1Y2VyUHJvdmlkZXI6IFByb3ZpZGVyID0ge1xyXG4gIHByb3ZpZGU6IHJlZHVjZXJUb2tlbixcclxuICB1c2VGYWN0b3J5OiBnZXRSZWR1Y2VycyxcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGVhckNtc1N0YXRlKFxyXG4gIHJlZHVjZXI6IEFjdGlvblJlZHVjZXI8U3RhdGVXaXRoQ21zLCBBY3Rpb24+XHJcbik6IEFjdGlvblJlZHVjZXI8U3RhdGVXaXRoQ21zLCBBY3Rpb24+IHtcclxuICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24pIHtcclxuICAgIGlmIChcclxuICAgICAgYWN0aW9uLnR5cGUgPT09IFNpdGVDb250ZXh0QWN0aW9ucy5MQU5HVUFHRV9DSEFOR0UgfHxcclxuICAgICAgYWN0aW9uLnR5cGUgPT09IEF1dGhBY3Rpb25zLkxPR09VVCB8fFxyXG4gICAgICBhY3Rpb24udHlwZSA9PT0gQXV0aEFjdGlvbnMuTE9HSU5cclxuICAgICkge1xyXG4gICAgICBzdGF0ZSA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIHJldHVybiByZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBtZXRhUmVkdWNlcnM6IE1ldGFSZWR1Y2VyPFN0YXRlV2l0aENtcz5bXSA9IFtjbGVhckNtc1N0YXRlXTtcclxuIl19