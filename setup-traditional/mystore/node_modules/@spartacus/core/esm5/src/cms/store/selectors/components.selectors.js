import { createSelector } from '@ngrx/store';
import { StateUtils } from '../../../state/utils/index';
import { getCmsState } from './feature.selectors';
var ɵ0 = function (state) { return state.components; };
export var getComponentsState = createSelector(getCmsState, ɵ0);
export var componentsContextSelectorFactory = function (uid) {
    return createSelector(getComponentsState, function (componentsState) {
        return StateUtils.entitySelector(componentsState, uid);
    });
};
export var componentsLoaderStateSelectorFactory = function (uid, context) {
    return createSelector(componentsContextSelectorFactory(uid), function (componentsContext) {
        return (componentsContext &&
            componentsContext.pageContext &&
            componentsContext.pageContext[context]) ||
            StateUtils.initialLoaderState;
    });
};
/**
 * This selector will return:
 *   - true: component for this context exists
 *   - false: component for this context doesn't exist
 *   - undefined: if the exists status for component is unknown
 *
 * @param uid
 * @param context
 */
export var componentsContextExistsSelectorFactory = function (uid, context) {
    return createSelector(componentsLoaderStateSelectorFactory(uid, context), function (loaderState) { return StateUtils.loaderValueSelector(loaderState); });
};
export var componentsDataSelectorFactory = function (uid) {
    return createSelector(componentsContextSelectorFactory(uid), function (state) {
        return state ? state.component : undefined;
    });
};
/**
 * This selector will return:
 *   - CmsComponent instance: if we have component data for specified context
 *   - null: if there is no component data for specified context
 *   - undefined: if status of component data for specified context is unknown
 *
 * @param uid
 * @param context
 */
export var componentsSelectorFactory = function (uid, context) {
    return createSelector(componentsDataSelectorFactory(uid), componentsContextExistsSelectorFactory(uid, context), function (componentState, exists) {
        switch (exists) {
            case true:
                return componentState;
            case false:
                return null;
            case undefined:
                return undefined;
        }
    });
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50cy5zZWxlY3RvcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL3N0b3JlL3NlbGVjdG9ycy9jb21wb25lbnRzLnNlbGVjdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFvQixNQUFNLGFBQWEsQ0FBQztBQUUvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFeEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO1NBS2xCLFVBQUMsS0FBSyxJQUFLLE9BQUEsS0FBSyxDQUFDLFVBQVUsRUFBaEIsQ0FBZ0I7QUFIM0QsTUFBTSxDQUFDLElBQU0sa0JBQWtCLEdBRzNCLGNBQWMsQ0FBQyxXQUFXLEtBQThCLENBQUM7QUFFN0QsTUFBTSxDQUFDLElBQU0sZ0NBQWdDLEdBQUcsVUFDOUMsR0FBVztJQUVYLE9BQU8sY0FBYyxDQUFDLGtCQUFrQixFQUFFLFVBQUMsZUFBZTtRQUN4RCxPQUFBLFVBQVUsQ0FBQyxjQUFjLENBQUMsZUFBZSxFQUFFLEdBQUcsQ0FBQztJQUEvQyxDQUErQyxDQUNoRCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sb0NBQW9DLEdBQUcsVUFDbEQsR0FBVyxFQUNYLE9BQWU7SUFFZixPQUFPLGNBQWMsQ0FDbkIsZ0NBQWdDLENBQUMsR0FBRyxDQUFDLEVBQ3JDLFVBQUMsaUJBQWlCO1FBQ2hCLE9BQUEsQ0FBQyxpQkFBaUI7WUFDaEIsaUJBQWlCLENBQUMsV0FBVztZQUM3QixpQkFBaUIsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDekMsVUFBVSxDQUFDLGtCQUFrQjtJQUg3QixDQUc2QixDQUNoQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUY7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLENBQUMsSUFBTSxzQ0FBc0MsR0FBRyxVQUNwRCxHQUFXLEVBQ1gsT0FBZTtJQUVmLE9BQU8sY0FBYyxDQUNuQixvQ0FBb0MsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEVBQ2xELFVBQUMsV0FBVyxJQUFLLE9BQUEsVUFBVSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxFQUEzQyxDQUEyQyxDQUM3RCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sNkJBQTZCLEdBQUcsVUFDM0MsR0FBVztJQUVYLE9BQU8sY0FBYyxDQUFDLGdDQUFnQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFVBQUMsS0FBSztRQUNqRSxPQUFBLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUztJQUFuQyxDQUFtQyxDQUNwQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUY7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLENBQUMsSUFBTSx5QkFBeUIsR0FBRyxVQUN2QyxHQUFXLEVBQ1gsT0FBZTtJQUVmLE9BQU8sY0FBYyxDQUNuQiw2QkFBNkIsQ0FBQyxHQUFHLENBQUMsRUFDbEMsc0NBQXNDLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxFQUNwRCxVQUFDLGNBQWMsRUFBRSxNQUFNO1FBQ3JCLFFBQVEsTUFBTSxFQUFFO1lBQ2QsS0FBSyxJQUFJO2dCQUNQLE9BQU8sY0FBYyxDQUFDO1lBQ3hCLEtBQUssS0FBSztnQkFDUixPQUFPLElBQUksQ0FBQztZQUNkLEtBQUssU0FBUztnQkFDWixPQUFPLFNBQVMsQ0FBQztTQUNwQjtJQUNILENBQUMsQ0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IsIE1lbW9pemVkU2VsZWN0b3IgfSBmcm9tICdAbmdyeC9zdG9yZSc7XHJcbmltcG9ydCB7IENtc0NvbXBvbmVudCB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2Ntcy5tb2RlbCc7XHJcbmltcG9ydCB7IFN0YXRlVXRpbHMgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9pbmRleCc7XHJcbmltcG9ydCB7IENvbXBvbmVudHNDb250ZXh0LCBDb21wb25lbnRzU3RhdGUsIFN0YXRlV2l0aENtcyB9IGZyb20gJy4uL2Ntcy1zdGF0ZSc7XHJcbmltcG9ydCB7IGdldENtc1N0YXRlIH0gZnJvbSAnLi9mZWF0dXJlLnNlbGVjdG9ycyc7XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0Q29tcG9uZW50c1N0YXRlOiBNZW1vaXplZFNlbGVjdG9yPFxyXG4gIFN0YXRlV2l0aENtcyxcclxuICBDb21wb25lbnRzU3RhdGVcclxuPiA9IGNyZWF0ZVNlbGVjdG9yKGdldENtc1N0YXRlLCAoc3RhdGUpID0+IHN0YXRlLmNvbXBvbmVudHMpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNvbXBvbmVudHNDb250ZXh0U2VsZWN0b3JGYWN0b3J5ID0gKFxyXG4gIHVpZDogc3RyaW5nXHJcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoQ21zLCBDb21wb25lbnRzQ29udGV4dD4gPT4ge1xyXG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihnZXRDb21wb25lbnRzU3RhdGUsIChjb21wb25lbnRzU3RhdGUpID0+XHJcbiAgICBTdGF0ZVV0aWxzLmVudGl0eVNlbGVjdG9yKGNvbXBvbmVudHNTdGF0ZSwgdWlkKVxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY29tcG9uZW50c0xvYWRlclN0YXRlU2VsZWN0b3JGYWN0b3J5ID0gKFxyXG4gIHVpZDogc3RyaW5nLFxyXG4gIGNvbnRleHQ6IHN0cmluZ1xyXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aENtcywgU3RhdGVVdGlscy5Mb2FkZXJTdGF0ZTxib29sZWFuPj4gPT4ge1xyXG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcclxuICAgIGNvbXBvbmVudHNDb250ZXh0U2VsZWN0b3JGYWN0b3J5KHVpZCksXHJcbiAgICAoY29tcG9uZW50c0NvbnRleHQpID0+XHJcbiAgICAgIChjb21wb25lbnRzQ29udGV4dCAmJlxyXG4gICAgICAgIGNvbXBvbmVudHNDb250ZXh0LnBhZ2VDb250ZXh0ICYmXHJcbiAgICAgICAgY29tcG9uZW50c0NvbnRleHQucGFnZUNvbnRleHRbY29udGV4dF0pIHx8XHJcbiAgICAgIFN0YXRlVXRpbHMuaW5pdGlhbExvYWRlclN0YXRlXHJcbiAgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHNlbGVjdG9yIHdpbGwgcmV0dXJuOlxyXG4gKiAgIC0gdHJ1ZTogY29tcG9uZW50IGZvciB0aGlzIGNvbnRleHQgZXhpc3RzXHJcbiAqICAgLSBmYWxzZTogY29tcG9uZW50IGZvciB0aGlzIGNvbnRleHQgZG9lc24ndCBleGlzdFxyXG4gKiAgIC0gdW5kZWZpbmVkOiBpZiB0aGUgZXhpc3RzIHN0YXR1cyBmb3IgY29tcG9uZW50IGlzIHVua25vd25cclxuICpcclxuICogQHBhcmFtIHVpZFxyXG4gKiBAcGFyYW0gY29udGV4dFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGNvbXBvbmVudHNDb250ZXh0RXhpc3RzU2VsZWN0b3JGYWN0b3J5ID0gKFxyXG4gIHVpZDogc3RyaW5nLFxyXG4gIGNvbnRleHQ6IHN0cmluZ1xyXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aENtcywgYm9vbGVhbiB8IHVuZGVmaW5lZD4gPT4ge1xyXG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcclxuICAgIGNvbXBvbmVudHNMb2FkZXJTdGF0ZVNlbGVjdG9yRmFjdG9yeSh1aWQsIGNvbnRleHQpLFxyXG4gICAgKGxvYWRlclN0YXRlKSA9PiBTdGF0ZVV0aWxzLmxvYWRlclZhbHVlU2VsZWN0b3IobG9hZGVyU3RhdGUpXHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjb21wb25lbnRzRGF0YVNlbGVjdG9yRmFjdG9yeSA9IChcclxuICB1aWQ6IHN0cmluZ1xyXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aENtcywgQ21zQ29tcG9uZW50IHwgdW5kZWZpbmVkPiA9PiB7XHJcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKGNvbXBvbmVudHNDb250ZXh0U2VsZWN0b3JGYWN0b3J5KHVpZCksIChzdGF0ZSkgPT5cclxuICAgIHN0YXRlID8gc3RhdGUuY29tcG9uZW50IDogdW5kZWZpbmVkXHJcbiAgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHNlbGVjdG9yIHdpbGwgcmV0dXJuOlxyXG4gKiAgIC0gQ21zQ29tcG9uZW50IGluc3RhbmNlOiBpZiB3ZSBoYXZlIGNvbXBvbmVudCBkYXRhIGZvciBzcGVjaWZpZWQgY29udGV4dFxyXG4gKiAgIC0gbnVsbDogaWYgdGhlcmUgaXMgbm8gY29tcG9uZW50IGRhdGEgZm9yIHNwZWNpZmllZCBjb250ZXh0XHJcbiAqICAgLSB1bmRlZmluZWQ6IGlmIHN0YXR1cyBvZiBjb21wb25lbnQgZGF0YSBmb3Igc3BlY2lmaWVkIGNvbnRleHQgaXMgdW5rbm93blxyXG4gKlxyXG4gKiBAcGFyYW0gdWlkXHJcbiAqIEBwYXJhbSBjb250ZXh0XHJcbiAqL1xyXG5leHBvcnQgY29uc3QgY29tcG9uZW50c1NlbGVjdG9yRmFjdG9yeSA9IChcclxuICB1aWQ6IHN0cmluZyxcclxuICBjb250ZXh0OiBzdHJpbmdcclxuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhDbXMsIENtc0NvbXBvbmVudCB8IG51bGwgfCB1bmRlZmluZWQ+ID0+IHtcclxuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoXHJcbiAgICBjb21wb25lbnRzRGF0YVNlbGVjdG9yRmFjdG9yeSh1aWQpLFxyXG4gICAgY29tcG9uZW50c0NvbnRleHRFeGlzdHNTZWxlY3RvckZhY3RvcnkodWlkLCBjb250ZXh0KSxcclxuICAgIChjb21wb25lbnRTdGF0ZSwgZXhpc3RzKSA9PiB7XHJcbiAgICAgIHN3aXRjaCAoZXhpc3RzKSB7XHJcbiAgICAgICAgY2FzZSB0cnVlOlxyXG4gICAgICAgICAgcmV0dXJuIGNvbXBvbmVudFN0YXRlO1xyXG4gICAgICAgIGNhc2UgZmFsc2U6XHJcbiAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICBjYXNlIHVuZGVmaW5lZDpcclxuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICApO1xyXG59O1xyXG4iXX0=