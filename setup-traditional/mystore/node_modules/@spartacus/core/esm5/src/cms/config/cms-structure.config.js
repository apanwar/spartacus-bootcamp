import { __decorate, __extends } from "tslib";
import { CmsConfig } from './cms-config';
import { Injectable } from '@angular/core';
import { Config } from '../../config';
import * as i0 from "@angular/core";
import * as i1 from "../../config/config.module";
/**
 * The `CmsStructureConfig` is used to build pages in Spartacus by configuration
 * instead of using a backend CMS system. The configuration can be used to build
 * complete pages or parts of a page. The `CmsStructureConfig` is optimized to
 * only require the necessary properties. Adapter logic is applied to serialize
 * the `CmsStructureConfig` into the required UI model.
 */
var CmsStructureConfig = /** @class */ (function (_super) {
    __extends(CmsStructureConfig, _super);
    function CmsStructureConfig() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CmsStructureConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function CmsStructureConfig_Factory() { return i0.ɵɵinject(i1.Config); }, token: CmsStructureConfig, providedIn: "root" });
    CmsStructureConfig = __decorate([
        Injectable({
            providedIn: 'root',
            useExisting: Config,
        })
    ], CmsStructureConfig);
    return CmsStructureConfig;
}(CmsConfig));
export { CmsStructureConfig };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY21zLXN0cnVjdHVyZS5jb25maWcuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL2NvbmZpZy9jbXMtc3RydWN0dXJlLmNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxjQUFjLENBQUM7OztBQTBEdEM7Ozs7OztHQU1HO0FBS0g7SUFBaUQsc0NBQVM7SUFBMUQ7O0tBTUM7O0lBTnFCLGtCQUFrQjtRQUp2QyxVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtZQUNsQixXQUFXLEVBQUUsTUFBTTtTQUNwQixDQUFDO09BQ29CLGtCQUFrQixDQU12Qzs2QkE5RUQ7Q0E4RUMsQUFORCxDQUFpRCxTQUFTLEdBTXpEO1NBTnFCLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRlbnRTbG90Q29tcG9uZW50RGF0YSB9IGZyb20gJy4uL21vZGVsL2NvbnRlbnQtc2xvdC1jb21wb25lbnQtZGF0YS5tb2RlbCc7XHJcbmltcG9ydCB7IENtc0NvbmZpZyB9IGZyb20gJy4vY21zLWNvbmZpZyc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnJztcclxuXHJcbi8qKlxyXG4gKiBUaGUgYENtc1BhZ2VDb25maWdgIGlzIHVzZWQgdG8gYnVpbGQgcGFnZXMgYnkgY29uZmlndXJhdGlvbi5cclxuICogVGhlIGludGVyZmFjZXMgYXJlIGRlc2lnbmVkIHRvIGhhdmUgYSBjbGVhbiBjb25maWd1cmF0aW9uIGZvclxyXG4gKiBzdGF0aWMgQ01TIHN0cnVjdHVyZS4gT3JkaW5hcnkgYXR0cmlidXRlcyB0aGF0IGFyZSBub3RcclxuICogcmVxdWlyZWQgZm9yIGNvbmZpZ3VyYWJsZSBwYWdlcyBoYXZlIGJlZW4gbGVmdCBvdXQgYW5kXHJcbiAqIHdpbGwgbm90IGJlIHNlcmlhbGl6ZWQgaW4gdGhlIGFkYXB0ZXIgbG9naWMuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENtc1BhZ2VDb25maWcge1xyXG4gIC8qKlxyXG4gICAqIFdoZW4gdGhlIGBpZ25vcmVCYWNrZW5kYCBpcyBzZXQgdG8gdHJ1ZSwgdGhlIENNUyBiYWNrZW5kXHJcbiAgICogd2lsbCBub3QgYmUgY29uc3VtZWQuIFRoaXMgc2F2ZXMgbmV0d29yayBsYXRlbmN5IGFuZCBpc1xyXG4gICAqIHVzZWZ1bCBmb3IgY29tbW9kaXR5IGNvbW1lcmNlIHBhZ2VzLlxyXG4gICAqICovXHJcbiAgaWdub3JlQmFja2VuZD86IGJvb2xlYW47XHJcblxyXG4gIHBhZ2VJZD86IHN0cmluZztcclxuXHJcbiAgdHlwZT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHBhZ2UgdGl0bGUgaXMgdHlwaWNhbGx5IHVzZWQgdG8gZGlzcGxheSB0aGUgcGFnZSBoZWFkaW5nXHJcbiAgICogYXMgd2VsbCBhcyBmb3IgdGhlIHBhZ2UgdGl0bGUgdGFnLiBUaGUgbGF0dGVyIGlzIHVzZWQgZm9yIGJyb3dzZXJcclxuICAgKiBuYXZpZ2F0aW9uIGFzIHdlbGwgYXMgU0VPIGFuZCBzb2NpYWwgc2hhcmUgcGxhdGZvcm1zLlxyXG4gICAqL1xyXG4gIHRpdGxlPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiB0aGUgdGVtcGxhdGUgaXMgdXNlZCB0byBiaW5kIHRvIHRoZSBsYXlvdXRcclxuICAgKiBjb25maWd1cmF0aW9uIGFuZCBjc3MgbGF5b3V0IGNsYXNzXHJcbiAgICovXHJcbiAgdGVtcGxhdGU/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBwYWdlIHNsb3RzIHJlcHJlc2VudCB2YXJpb3VzIHNlY3Rpb25zIG9uIHRoZSBwYWdlIHRoYXRcclxuICAgKiBjYW4gY29udGFpbiBjb21wb25lbnRzLlxyXG4gICAqL1xyXG4gIHNsb3RzOiB7IFtrZXk6IHN0cmluZ106IENtc1BhZ2VTbG90Q29uZmlnIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgYENtc1BhZ2VTbG90c0NvbmZpZ2AgKHBsdXJhbCkgaG9sZHMgYENtc1BhZ2VTbG90Q29uZmlnYCBvYmplY3RzLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDbXNQYWdlU2xvdHNDb25maWcge1xyXG4gIFtrZXk6IHN0cmluZ106IENtc1BhZ2VTbG90Q29uZmlnO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIGBDbXNQYWdlU2xvdENvbmZpZ2AgaXMgYSBzaW1wbGlmaWVkIGNvbmZpZ3VyYXRpb24gbW9kZWxcclxuICogdGhhdCBjYW4gYmUgdXNlZCB0byBjb25maWd1cmUgc2xvdHMgaW4gc3RhdGljIGNvbmZpZ3VyYXRpb24sXHJcbiAqIHJhdGhlciB0aGFuIGxvYWRpbmcgZnJvbSBhIGJhY2tlbmQuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENtc1BhZ2VTbG90Q29uZmlnIHtcclxuICBjb21wb25lbnRJZHM/OiBzdHJpbmdbXTtcclxuICBwcm9wZXJ0aWVzPzogYW55O1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIGBDbXNTdHJ1Y3R1cmVDb25maWdgIGlzIHVzZWQgdG8gYnVpbGQgcGFnZXMgaW4gU3BhcnRhY3VzIGJ5IGNvbmZpZ3VyYXRpb25cclxuICogaW5zdGVhZCBvZiB1c2luZyBhIGJhY2tlbmQgQ01TIHN5c3RlbS4gVGhlIGNvbmZpZ3VyYXRpb24gY2FuIGJlIHVzZWQgdG8gYnVpbGRcclxuICogY29tcGxldGUgcGFnZXMgb3IgcGFydHMgb2YgYSBwYWdlLiBUaGUgYENtc1N0cnVjdHVyZUNvbmZpZ2AgaXMgb3B0aW1pemVkIHRvXHJcbiAqIG9ubHkgcmVxdWlyZSB0aGUgbmVjZXNzYXJ5IHByb3BlcnRpZXMuIEFkYXB0ZXIgbG9naWMgaXMgYXBwbGllZCB0byBzZXJpYWxpemVcclxuICogdGhlIGBDbXNTdHJ1Y3R1cmVDb25maWdgIGludG8gdGhlIHJlcXVpcmVkIFVJIG1vZGVsLlxyXG4gKi9cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290JyxcclxuICB1c2VFeGlzdGluZzogQ29uZmlnLFxyXG59KVxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ21zU3RydWN0dXJlQ29uZmlnIGV4dGVuZHMgQ21zQ29uZmlnIHtcclxuICBjbXNTdHJ1Y3R1cmU6IHtcclxuICAgIGNvbXBvbmVudHM/OiB7IFtrZXk6IHN0cmluZ106IENvbnRlbnRTbG90Q29tcG9uZW50RGF0YSB8IGFueSB9O1xyXG4gICAgcGFnZXM/OiBDbXNQYWdlQ29uZmlnW107XHJcbiAgICBzbG90cz86IENtc1BhZ2VTbG90c0NvbmZpZztcclxuICB9O1xyXG59XHJcbiJdfQ==