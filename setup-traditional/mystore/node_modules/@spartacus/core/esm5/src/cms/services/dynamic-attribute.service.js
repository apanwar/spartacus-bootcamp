import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { SmartEditService } from '../../smart-edit/services/smart-edit.service';
import * as i0 from "@angular/core";
import * as i1 from "../../smart-edit/services/smart-edit.service";
var DynamicAttributeService = /** @class */ (function () {
    function DynamicAttributeService(smartEditService) {
        this.smartEditService = smartEditService;
    }
    /**
     * Add dynamic attributes to DOM. These attributes are extracted from the properties of cms items received from backend.
     * There can by many different groups of properties, one of them is smartedit. But EC allows addons to create different groups.
     * For example, personalization may add 'script' group etc.
     * @param element: slot or cms component element
     * @param renderer
     * @param cmsRenderingContext: an object containing properties in each cms item response data
     */
    DynamicAttributeService.prototype.addDynamicAttributes = function (element, renderer, cmsRenderingContext) {
        var _a, _b;
        var properties = ((_a = cmsRenderingContext.componentData) === null || _a === void 0 ? void 0 : _a.properties) || ((_b = cmsRenderingContext.slotData) === null || _b === void 0 ? void 0 : _b.properties);
        if (properties && this.smartEditService.isLaunchedInSmartEdit()) {
            // check each group of properties, e.g. smartedit
            Object.keys(properties).forEach(function (group) {
                var name = 'data-' + group + '-';
                var groupProps = properties[group];
                // check each property in the group
                Object.keys(groupProps).forEach(function (propName) {
                    var propValue = groupProps[propName];
                    if (propName === 'classes') {
                        var classes = propValue.split(' ');
                        classes.forEach(function (classItem) {
                            element.classList.add(classItem);
                        });
                    }
                    else {
                        renderer.setAttribute(element, name +
                            propName
                                .split(/(?=[A-Z])/)
                                .join('-')
                                .toLowerCase(), propValue);
                    }
                });
            });
        }
    };
    DynamicAttributeService.ctorParameters = function () { return [
        { type: SmartEditService }
    ]; };
    DynamicAttributeService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DynamicAttributeService_Factory() { return new DynamicAttributeService(i0.ɵɵinject(i1.SmartEditService)); }, token: DynamicAttributeService, providedIn: "root" });
    DynamicAttributeService = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], DynamicAttributeService);
    return DynamicAttributeService;
}());
export { DynamicAttributeService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1hdHRyaWJ1dGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9jbXMvc2VydmljZXMvZHluYW1pYy1hdHRyaWJ1dGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQzs7O0FBT2hGO0lBQ0UsaUNBQXNCLGdCQUFrQztRQUFsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0lBQUcsQ0FBQztJQUU1RDs7Ozs7OztPQU9HO0lBQ0gsc0RBQW9CLEdBQXBCLFVBQ0UsT0FBZ0IsRUFDaEIsUUFBbUIsRUFDbkIsbUJBR0M7O1FBRUQsSUFBTSxVQUFVLEdBQ2QsT0FBQSxtQkFBbUIsQ0FBQyxhQUFhLDBDQUFFLFVBQVUsWUFDN0MsbUJBQW1CLENBQUMsUUFBUSwwQ0FBRSxVQUFVLENBQUEsQ0FBQztRQUUzQyxJQUFJLFVBQVUsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMscUJBQXFCLEVBQUUsRUFBRTtZQUMvRCxpREFBaUQ7WUFDakQsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxLQUFLO2dCQUNwQyxJQUFNLElBQUksR0FBRyxPQUFPLEdBQUcsS0FBSyxHQUFHLEdBQUcsQ0FBQztnQkFDbkMsSUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUVyQyxtQ0FBbUM7Z0JBQ25DLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsUUFBUTtvQkFDdkMsSUFBTSxTQUFTLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO29CQUN2QyxJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUU7d0JBQzFCLElBQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7d0JBQ3JDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBQyxTQUFTOzRCQUN4QixPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQzt3QkFDbkMsQ0FBQyxDQUFDLENBQUM7cUJBQ0o7eUJBQU07d0JBQ0wsUUFBUSxDQUFDLFlBQVksQ0FDbkIsT0FBTyxFQUNQLElBQUk7NEJBQ0YsUUFBUTtpQ0FDTCxLQUFLLENBQUMsV0FBVyxDQUFDO2lDQUNsQixJQUFJLENBQUMsR0FBRyxDQUFDO2lDQUNULFdBQVcsRUFBRSxFQUNsQixTQUFTLENBQ1YsQ0FBQztxQkFDSDtnQkFDSCxDQUFDLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOztnQkFsRHVDLGdCQUFnQjs7O0lBRDdDLHVCQUF1QjtRQUhuQyxVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDO09BQ1csdUJBQXVCLENBb0RuQztrQ0E1REQ7Q0E0REMsQUFwREQsSUFvREM7U0FwRFksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFNtYXJ0RWRpdFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zbWFydC1lZGl0L3NlcnZpY2VzL3NtYXJ0LWVkaXQuc2VydmljZSc7XHJcbmltcG9ydCB7IENvbnRlbnRTbG90Q29tcG9uZW50RGF0YSB9IGZyb20gJy4uL21vZGVsL2NvbnRlbnQtc2xvdC1jb21wb25lbnQtZGF0YS5tb2RlbCc7XHJcbmltcG9ydCB7IENvbnRlbnRTbG90RGF0YSB9IGZyb20gJy4uL21vZGVsL2NvbnRlbnQtc2xvdC1kYXRhLm1vZGVsJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEeW5hbWljQXR0cmlidXRlU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHNtYXJ0RWRpdFNlcnZpY2U6IFNtYXJ0RWRpdFNlcnZpY2UpIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZCBkeW5hbWljIGF0dHJpYnV0ZXMgdG8gRE9NLiBUaGVzZSBhdHRyaWJ1dGVzIGFyZSBleHRyYWN0ZWQgZnJvbSB0aGUgcHJvcGVydGllcyBvZiBjbXMgaXRlbXMgcmVjZWl2ZWQgZnJvbSBiYWNrZW5kLlxyXG4gICAqIFRoZXJlIGNhbiBieSBtYW55IGRpZmZlcmVudCBncm91cHMgb2YgcHJvcGVydGllcywgb25lIG9mIHRoZW0gaXMgc21hcnRlZGl0LiBCdXQgRUMgYWxsb3dzIGFkZG9ucyB0byBjcmVhdGUgZGlmZmVyZW50IGdyb3Vwcy5cclxuICAgKiBGb3IgZXhhbXBsZSwgcGVyc29uYWxpemF0aW9uIG1heSBhZGQgJ3NjcmlwdCcgZ3JvdXAgZXRjLlxyXG4gICAqIEBwYXJhbSBlbGVtZW50OiBzbG90IG9yIGNtcyBjb21wb25lbnQgZWxlbWVudFxyXG4gICAqIEBwYXJhbSByZW5kZXJlclxyXG4gICAqIEBwYXJhbSBjbXNSZW5kZXJpbmdDb250ZXh0OiBhbiBvYmplY3QgY29udGFpbmluZyBwcm9wZXJ0aWVzIGluIGVhY2ggY21zIGl0ZW0gcmVzcG9uc2UgZGF0YVxyXG4gICAqL1xyXG4gIGFkZER5bmFtaWNBdHRyaWJ1dGVzKFxyXG4gICAgZWxlbWVudDogRWxlbWVudCxcclxuICAgIHJlbmRlcmVyOiBSZW5kZXJlcjIsXHJcbiAgICBjbXNSZW5kZXJpbmdDb250ZXh0OiB7XHJcbiAgICAgIGNvbXBvbmVudERhdGE/OiBDb250ZW50U2xvdENvbXBvbmVudERhdGE7XHJcbiAgICAgIHNsb3REYXRhPzogQ29udGVudFNsb3REYXRhO1xyXG4gICAgfVxyXG4gICk6IHZvaWQge1xyXG4gICAgY29uc3QgcHJvcGVydGllcyA9XHJcbiAgICAgIGNtc1JlbmRlcmluZ0NvbnRleHQuY29tcG9uZW50RGF0YT8ucHJvcGVydGllcyB8fFxyXG4gICAgICBjbXNSZW5kZXJpbmdDb250ZXh0LnNsb3REYXRhPy5wcm9wZXJ0aWVzO1xyXG5cclxuICAgIGlmIChwcm9wZXJ0aWVzICYmIHRoaXMuc21hcnRFZGl0U2VydmljZS5pc0xhdW5jaGVkSW5TbWFydEVkaXQoKSkge1xyXG4gICAgICAvLyBjaGVjayBlYWNoIGdyb3VwIG9mIHByb3BlcnRpZXMsIGUuZy4gc21hcnRlZGl0XHJcbiAgICAgIE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLmZvckVhY2goKGdyb3VwKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbmFtZSA9ICdkYXRhLScgKyBncm91cCArICctJztcclxuICAgICAgICBjb25zdCBncm91cFByb3BzID0gcHJvcGVydGllc1tncm91cF07XHJcblxyXG4gICAgICAgIC8vIGNoZWNrIGVhY2ggcHJvcGVydHkgaW4gdGhlIGdyb3VwXHJcbiAgICAgICAgT2JqZWN0LmtleXMoZ3JvdXBQcm9wcykuZm9yRWFjaCgocHJvcE5hbWUpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHByb3BWYWx1ZSA9IGdyb3VwUHJvcHNbcHJvcE5hbWVdO1xyXG4gICAgICAgICAgaWYgKHByb3BOYW1lID09PSAnY2xhc3NlcycpIHtcclxuICAgICAgICAgICAgY29uc3QgY2xhc3NlcyA9IHByb3BWYWx1ZS5zcGxpdCgnICcpO1xyXG4gICAgICAgICAgICBjbGFzc2VzLmZvckVhY2goKGNsYXNzSXRlbSkgPT4ge1xyXG4gICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc0l0ZW0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlbmRlcmVyLnNldEF0dHJpYnV0ZShcclxuICAgICAgICAgICAgICBlbGVtZW50LFxyXG4gICAgICAgICAgICAgIG5hbWUgK1xyXG4gICAgICAgICAgICAgICAgcHJvcE5hbWVcclxuICAgICAgICAgICAgICAgICAgLnNwbGl0KC8oPz1bQS1aXSkvKVxyXG4gICAgICAgICAgICAgICAgICAuam9pbignLScpXHJcbiAgICAgICAgICAgICAgICAgIC50b0xvd2VyQ2FzZSgpLFxyXG4gICAgICAgICAgICAgIHByb3BWYWx1ZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19