import { __extends } from "tslib";
import { StateUtils } from '../../../state/utils/index';
import { NAVIGATION_DETAIL_ENTITY } from '../cms-state';
export var LOAD_CMS_NAVIGATION_ITEMS = '[Cms] Load NavigationEntry items';
export var LOAD_CMS_NAVIGATION_ITEMS_FAIL = '[Cms] Load NavigationEntry items Fail';
export var LOAD_CMS_NAVIGATION_ITEMS_SUCCESS = '[Cms] Load NavigationEntry items Success';
var LoadCmsNavigationItems = /** @class */ (function (_super) {
    __extends(LoadCmsNavigationItems, _super);
    function LoadCmsNavigationItems(payload) {
        var _this = _super.call(this, NAVIGATION_DETAIL_ENTITY, payload.nodeId) || this;
        _this.payload = payload;
        _this.type = LOAD_CMS_NAVIGATION_ITEMS;
        return _this;
    }
    return LoadCmsNavigationItems;
}(StateUtils.EntityLoadAction));
export { LoadCmsNavigationItems };
var LoadCmsNavigationItemsFail = /** @class */ (function (_super) {
    __extends(LoadCmsNavigationItemsFail, _super);
    function LoadCmsNavigationItemsFail(nodeId, payload) {
        var _this = _super.call(this, NAVIGATION_DETAIL_ENTITY, nodeId, payload) || this;
        _this.payload = payload;
        _this.type = LOAD_CMS_NAVIGATION_ITEMS_FAIL;
        return _this;
    }
    return LoadCmsNavigationItemsFail;
}(StateUtils.EntityFailAction));
export { LoadCmsNavigationItemsFail };
var LoadCmsNavigationItemsSuccess = /** @class */ (function (_super) {
    __extends(LoadCmsNavigationItemsSuccess, _super);
    function LoadCmsNavigationItemsSuccess(payload) {
        var _this = _super.call(this, NAVIGATION_DETAIL_ENTITY, payload.nodeId) || this;
        _this.payload = payload;
        _this.type = LOAD_CMS_NAVIGATION_ITEMS_SUCCESS;
        return _this;
    }
    return LoadCmsNavigationItemsSuccess;
}(StateUtils.EntitySuccessAction));
export { LoadCmsNavigationItemsSuccess };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdGlvbi1lbnRyeS1pdGVtLmFjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9jbXMvc3RvcmUvYWN0aW9ucy9uYXZpZ2F0aW9uLWVudHJ5LWl0ZW0uYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDeEQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXhELE1BQU0sQ0FBQyxJQUFNLHlCQUF5QixHQUFHLGtDQUFrQyxDQUFDO0FBQzVFLE1BQU0sQ0FBQyxJQUFNLDhCQUE4QixHQUN6Qyx1Q0FBdUMsQ0FBQztBQUMxQyxNQUFNLENBQUMsSUFBTSxpQ0FBaUMsR0FDNUMsMENBQTBDLENBQUM7QUFFN0M7SUFBNEMsMENBQTJCO0lBRXJFLGdDQUFtQixPQUF5QztRQUE1RCxZQUNFLGtCQUFNLHdCQUF3QixFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FDaEQ7UUFGa0IsYUFBTyxHQUFQLE9BQU8sQ0FBa0M7UUFEbkQsVUFBSSxHQUFHLHlCQUF5QixDQUFDOztJQUcxQyxDQUFDO0lBQ0gsNkJBQUM7QUFBRCxDQUFDLEFBTEQsQ0FBNEMsVUFBVSxDQUFDLGdCQUFnQixHQUt0RTs7QUFFRDtJQUFnRCw4Q0FBMkI7SUFFekUsb0NBQVksTUFBYyxFQUFTLE9BQVk7UUFBL0MsWUFDRSxrQkFBTSx3QkFBd0IsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLFNBQ2pEO1FBRmtDLGFBQU8sR0FBUCxPQUFPLENBQUs7UUFEdEMsVUFBSSxHQUFHLDhCQUE4QixDQUFDOztJQUcvQyxDQUFDO0lBQ0gsaUNBQUM7QUFBRCxDQUFDLEFBTEQsQ0FBZ0QsVUFBVSxDQUFDLGdCQUFnQixHQUsxRTs7QUFFRDtJQUFtRCxpREFBOEI7SUFFL0UsdUNBQW1CLE9BQThDO1FBQWpFLFlBQ0Usa0JBQU0sd0JBQXdCLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUNoRDtRQUZrQixhQUFPLEdBQVAsT0FBTyxDQUF1QztRQUR4RCxVQUFJLEdBQUcsaUNBQWlDLENBQUM7O0lBR2xELENBQUM7SUFDSCxvQ0FBQztBQUFELENBQUMsQUFMRCxDQUFtRCxVQUFVLENBQUMsbUJBQW1CLEdBS2hGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhdGVVdGlscyB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2luZGV4JztcclxuaW1wb3J0IHsgTkFWSUdBVElPTl9ERVRBSUxfRU5USVRZIH0gZnJvbSAnLi4vY21zLXN0YXRlJztcclxuXHJcbmV4cG9ydCBjb25zdCBMT0FEX0NNU19OQVZJR0FUSU9OX0lURU1TID0gJ1tDbXNdIExvYWQgTmF2aWdhdGlvbkVudHJ5IGl0ZW1zJztcclxuZXhwb3J0IGNvbnN0IExPQURfQ01TX05BVklHQVRJT05fSVRFTVNfRkFJTCA9XHJcbiAgJ1tDbXNdIExvYWQgTmF2aWdhdGlvbkVudHJ5IGl0ZW1zIEZhaWwnO1xyXG5leHBvcnQgY29uc3QgTE9BRF9DTVNfTkFWSUdBVElPTl9JVEVNU19TVUNDRVNTID1cclxuICAnW0Ntc10gTG9hZCBOYXZpZ2F0aW9uRW50cnkgaXRlbXMgU3VjY2Vzcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgTG9hZENtc05hdmlnYXRpb25JdGVtcyBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5TG9hZEFjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfQ01TX05BVklHQVRJT05fSVRFTVM7XHJcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IHsgbm9kZUlkOiBzdHJpbmc7IGl0ZW1zOiBhbnlbXSB9KSB7XHJcbiAgICBzdXBlcihOQVZJR0FUSU9OX0RFVEFJTF9FTlRJVFksIHBheWxvYWQubm9kZUlkKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMb2FkQ21zTmF2aWdhdGlvbkl0ZW1zRmFpbCBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5RmFpbEFjdGlvbiB7XHJcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfQ01TX05BVklHQVRJT05fSVRFTVNfRkFJTDtcclxuICBjb25zdHJ1Y3Rvcihub2RlSWQ6IHN0cmluZywgcHVibGljIHBheWxvYWQ6IGFueSkge1xyXG4gICAgc3VwZXIoTkFWSUdBVElPTl9ERVRBSUxfRU5USVRZLCBub2RlSWQsIHBheWxvYWQpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExvYWRDbXNOYXZpZ2F0aW9uSXRlbXNTdWNjZXNzIGV4dGVuZHMgU3RhdGVVdGlscy5FbnRpdHlTdWNjZXNzQWN0aW9uIHtcclxuICByZWFkb25seSB0eXBlID0gTE9BRF9DTVNfTkFWSUdBVElPTl9JVEVNU19TVUNDRVNTO1xyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiB7IG5vZGVJZDogc3RyaW5nOyBjb21wb25lbnRzOiBhbnlbXSB9KSB7XHJcbiAgICBzdXBlcihOQVZJR0FUSU9OX0RFVEFJTF9FTlRJVFksIHBheWxvYWQubm9kZUlkKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIGFjdGlvbiB0eXBlc1xyXG5leHBvcnQgdHlwZSBDbXNOYXZpZ2F0aW9uRW50cnlJdGVtQWN0aW9uID1cclxuICB8IExvYWRDbXNOYXZpZ2F0aW9uSXRlbXNcclxuICB8IExvYWRDbXNOYXZpZ2F0aW9uSXRlbXNGYWlsXHJcbiAgfCBMb2FkQ21zTmF2aWdhdGlvbkl0ZW1zU3VjY2VzcztcclxuIl19