import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { OccConfig } from '../../occ/config/occ-config';
import { Config } from '../../config/config.module';
import * as i0 from "@angular/core";
import * as i1 from "../../config/config.module";
export var JSP_INCLUDE_CMS_COMPONENT_TYPE = 'JspIncludeComponent';
export var CMS_FLEX_COMPONENT_TYPE = 'CMSFlexComponent';
/** Strategy to control the loading strategy of DOM elements. */
export var DeferLoadingStrategy;
(function (DeferLoadingStrategy) {
    /** Defers loading of DOM elements until element is near/in the users view port */
    DeferLoadingStrategy["DEFER"] = "DEFERRED-LOADING";
    /** Renders the DOM instantly without being concerned with the view port */
    DeferLoadingStrategy["INSTANT"] = "INSTANT-LOADING";
})(DeferLoadingStrategy || (DeferLoadingStrategy = {}));
var CmsConfig = /** @class */ (function (_super) {
    __extends(CmsConfig, _super);
    function CmsConfig() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CmsConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function CmsConfig_Factory() { return i0.ɵɵinject(i1.Config); }, token: CmsConfig, providedIn: "root" });
    CmsConfig = __decorate([
        Injectable({
            providedIn: 'root',
            useExisting: Config,
        })
    ], CmsConfig);
    return CmsConfig;
}(OccConfig));
export { CmsConfig };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY21zLWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9jbXMvY29uZmlnL2Ntcy1jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWtCLE1BQU0sZUFBZSxDQUFDO0FBSTNELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7OztBQStCcEQsTUFBTSxDQUFDLElBQU0sOEJBQThCLEdBQUcscUJBQXFCLENBQUM7QUFDcEUsTUFBTSxDQUFDLElBQU0sdUJBQXVCLEdBQUcsa0JBQWtCLENBQUM7QUFrQjFELGdFQUFnRTtBQUNoRSxNQUFNLENBQU4sSUFBWSxvQkFLWDtBQUxELFdBQVksb0JBQW9CO0lBQzlCLGtGQUFrRjtJQUNsRixrREFBMEIsQ0FBQTtJQUMxQiwyRUFBMkU7SUFDM0UsbURBQTJCLENBQUE7QUFDN0IsQ0FBQyxFQUxXLG9CQUFvQixLQUFwQixvQkFBb0IsUUFLL0I7QUFZRDtJQUF3Qyw2QkFBUztJQUFqRDs7S0FVQzs7SUFWcUIsU0FBUztRQUo5QixVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtZQUNsQixXQUFXLEVBQUUsTUFBTTtTQUNwQixDQUFDO09BQ29CLFNBQVMsQ0FVOUI7b0JBbkZEO0NBbUZDLEFBVkQsQ0FBd0MsU0FBUyxHQVVoRDtTQVZxQixTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgU3RhdGljUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUm91dGVzIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgQXV0aENvbmZpZyB9IGZyb20gJy4uLy4uL2F1dGgvY29uZmlnL2F1dGgtY29uZmlnJztcclxuaW1wb3J0IHsgS3ltYUNvbmZpZyB9IGZyb20gJy4uLy4uL2t5bWEvY29uZmlnL2t5bWEtY29uZmlnJztcclxuaW1wb3J0IHsgT2NjQ29uZmlnIH0gZnJvbSAnLi4vLi4vb2NjL2NvbmZpZy9vY2MtY29uZmlnJztcclxuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnL2NvbmZpZy5tb2R1bGUnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTdGFuZGFyZENtc0NvbXBvbmVudENvbmZpZyB7XHJcbiAgQ01TU2l0ZUNvbnRleHRDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xyXG4gIENNU0xpbmtDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xyXG4gIFNpbXBsZVJlc3BvbnNpdmVCYW5uZXJDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xyXG4gIFNpbXBsZUJhbm5lckNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XHJcbiAgQmFubmVyQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcclxuICBDTVNQYXJhZ3JhcGhDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xyXG4gIEJyZWFkY3J1bWJDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xyXG4gIE5hdmlnYXRpb25Db21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xyXG4gIEZvb3Rlck5hdmlnYXRpb25Db21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xyXG4gIENhdGVnb3J5TmF2aWdhdGlvbkNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XHJcbiAgUHJvZHVjdEFkZFRvQ2FydENvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XHJcbiAgTWluaUNhcnRDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xyXG4gIFByb2R1Y3RDYXJvdXNlbENvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XHJcbiAgU2VhcmNoQm94Q29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcclxuICBQcm9kdWN0UmVmZXJlbmNlc0NvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XHJcbiAgQ01TVGFiUGFyYWdyYXBoQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcclxuICBMb2dpbkNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSnNwSW5jbHVkZUNtc0NvbXBvbmVudENvbmZpZyB7XHJcbiAgQWNjb3VudEFkZHJlc3NCb29rQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcclxuICBGb3Jnb3RQYXNzd29yZENvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XHJcbiAgUmVzZXRQYXNzd29yZENvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XHJcbiAgUHJvZHVjdERldGFpbHNUYWJDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xyXG4gIFByb2R1Y3RTcGVjc1RhYkNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XHJcbiAgUHJvZHVjdFJldmlld3NUYWJDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgSlNQX0lOQ0xVREVfQ01TX0NPTVBPTkVOVF9UWVBFID0gJ0pzcEluY2x1ZGVDb21wb25lbnQnO1xyXG5leHBvcnQgY29uc3QgQ01TX0ZMRVhfQ09NUE9ORU5UX1RZUEUgPSAnQ01TRmxleENvbXBvbmVudCc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENtc0NvbXBvbmVudE1hcHBpbmcge1xyXG4gIGNvbXBvbmVudD86IGFueTtcclxuICBwcm92aWRlcnM/OiBTdGF0aWNQcm92aWRlcltdO1xyXG4gIGNoaWxkUm91dGVzPzogUm91dGVzO1xyXG4gIGRpc2FibGVTU1I/OiBib29sZWFuO1xyXG4gIGkxOG5LZXlzPzogc3RyaW5nW107XHJcbiAgZ3VhcmRzPzogYW55W107XHJcblxyXG4gIC8qKlxyXG4gICAqIERlZmVyTG9hZGluZyBjYW4gYmUgc3BlY2lmaWVkIGdsb2JhbGx5LCBidXQgYWxzbyBwZXIgY29tcG9uZW50LlxyXG4gICAqIFNvbWUgY29tcG9uZW50cyByZXF1aXJlIGRpcmVjdCBsb2FkaW5nIHdoaWxlIGl0J3Mgbm90IGluaXRpYWxseVxyXG4gICAqIGluIHRoZSB2aWV3cG9ydC5cclxuICAgKi9cclxuICBkZWZlckxvYWRpbmc/OiBEZWZlckxvYWRpbmdTdHJhdGVneTtcclxufVxyXG5cclxuLyoqIFN0cmF0ZWd5IHRvIGNvbnRyb2wgdGhlIGxvYWRpbmcgc3RyYXRlZ3kgb2YgRE9NIGVsZW1lbnRzLiAqL1xyXG5leHBvcnQgZW51bSBEZWZlckxvYWRpbmdTdHJhdGVneSB7XHJcbiAgLyoqIERlZmVycyBsb2FkaW5nIG9mIERPTSBlbGVtZW50cyB1bnRpbCBlbGVtZW50IGlzIG5lYXIvaW4gdGhlIHVzZXJzIHZpZXcgcG9ydCAqL1xyXG4gIERFRkVSID0gJ0RFRkVSUkVELUxPQURJTkcnLFxyXG4gIC8qKiBSZW5kZXJzIHRoZSBET00gaW5zdGFudGx5IHdpdGhvdXQgYmVpbmcgY29uY2VybmVkIHdpdGggdGhlIHZpZXcgcG9ydCAqL1xyXG4gIElOU1RBTlQgPSAnSU5TVEFOVC1MT0FESU5HJyxcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDTVNDb21wb25lbnRDb25maWdcclxuICBleHRlbmRzIFN0YW5kYXJkQ21zQ29tcG9uZW50Q29uZmlnLFxyXG4gICAgSnNwSW5jbHVkZUNtc0NvbXBvbmVudENvbmZpZyB7XHJcbiAgW2NvbXBvbmVudFR5cGU6IHN0cmluZ106IENtc0NvbXBvbmVudE1hcHBpbmc7XHJcbn1cclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCcsXHJcbiAgdXNlRXhpc3Rpbmc6IENvbmZpZyxcclxufSlcclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENtc0NvbmZpZyBleHRlbmRzIE9jY0NvbmZpZ1xyXG4gIGltcGxlbWVudHMgQXV0aENvbmZpZywgS3ltYUNvbmZpZyB7XHJcbiAgYXV0aGVudGljYXRpb24/OiB7XHJcbiAgICBjbGllbnRfaWQ/OiBzdHJpbmc7XHJcbiAgICBjbGllbnRfc2VjcmV0Pzogc3RyaW5nO1xyXG4gICAga3ltYV9jbGllbnRfaWQ/OiBzdHJpbmc7XHJcbiAgICBreW1hX2NsaWVudF9zZWNyZXQ/OiBzdHJpbmc7XHJcbiAgfTtcclxuXHJcbiAgY21zQ29tcG9uZW50cz86IENNU0NvbXBvbmVudENvbmZpZztcclxufVxyXG4iXX0=