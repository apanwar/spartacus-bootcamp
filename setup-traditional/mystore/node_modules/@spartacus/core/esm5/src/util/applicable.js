import { __read, __spread } from "tslib";
/**
 * Helper logic to resolve best matching Applicable
 *
 * Finding best match is a two step process:
 * 1. Find all matching applicables
 *    - all applicables for which hasMatch(...matchParams) will return true
 *    - all applicables without hasMatch method (implicit always match)
 * 2. Find the applicable with highest priority
 *    - applicable with highest getPriority(...priorityParams) will win
 *    - applicable without getPriority method is treated as Priotity.NORMAL or 0
 *    - applicables with the same priority are sorted by order of providers, the applicable that was provided later wins
 *
 * @param applicables - array or applicable-like instancese
 * @param matchParams - array of parameters passed for hasMatch calls
 * @param priorityParams - array of parameters passed for getPriority calls
 */
export function resolveApplicable(applicables, matchParams, priorityParams) {
    if (applicables === void 0) { applicables = []; }
    if (matchParams === void 0) { matchParams = []; }
    if (priorityParams === void 0) { priorityParams = []; }
    var matchedApplicables = applicables.filter(function (applicable) { return !applicable.hasMatch || applicable.hasMatch.apply(applicable, __spread(matchParams)); });
    if (matchedApplicables.length < 2) {
        return matchedApplicables[0];
    }
    var lastPriority = -Infinity;
    return matchedApplicables.reduce(function (acc, curr) {
        var currPriority = curr.getPriority
            ? curr.getPriority.apply(curr, __spread(priorityParams)) : 0 /* NORMAL */;
        if (lastPriority > currPriority) {
            return acc;
        }
        lastPriority = currPriority;
        return curr;
    }, undefined);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbGljYWJsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy91dGlsL2FwcGxpY2FibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQXdDQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFDSCxNQUFNLFVBQVUsaUJBQWlCLENBQy9CLFdBQXFCLEVBQ3JCLFdBQXVCLEVBQ3ZCLGNBQTBCO0lBRjFCLDRCQUFBLEVBQUEsZ0JBQXFCO0lBQ3JCLDRCQUFBLEVBQUEsZ0JBQXVCO0lBQ3ZCLCtCQUFBLEVBQUEsbUJBQTBCO0lBRTFCLElBQU0sa0JBQWtCLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FDM0MsVUFBQyxVQUFVLElBQUssT0FBQSxDQUFDLFVBQVUsQ0FBQyxRQUFRLElBQUksVUFBVSxDQUFDLFFBQVEsT0FBbkIsVUFBVSxXQUFhLFdBQVcsRUFBQyxFQUEzRCxDQUEyRCxDQUM1RSxDQUFDO0lBRUYsSUFBSSxrQkFBa0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ2pDLE9BQU8sa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDOUI7SUFFRCxJQUFJLFlBQVksR0FBRyxDQUFDLFFBQVEsQ0FBQztJQUM3QixPQUFPLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxVQUFDLEdBQUcsRUFBRSxJQUFJO1FBQ3pDLElBQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxXQUFXO1lBQ25DLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxPQUFoQixJQUFJLFdBQWdCLGNBQWMsR0FDcEMsQ0FBQyxlQUFnQixDQUFDO1FBQ3BCLElBQUksWUFBWSxHQUFHLFlBQVksRUFBRTtZQUMvQixPQUFPLEdBQUcsQ0FBQztTQUNaO1FBQ0QsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUM1QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNoQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGVudW0gUHJpb3JpdHkge1xyXG4gIC8qKlxyXG4gICAqIFVzZWQgYXMgZmFsbGJhY2ssIHdoZW4gdGhlcmUgaXMgbm8gb3RoZXIgbWF0Y2hlc1xyXG4gICAqL1xyXG4gIEZBTExCQUNLID0gLTUwLFxyXG4gIC8qKlxyXG4gICAqIFVzZWQgbWFpbmx5IGluIGxpYnJhcmllcywgZWFzeSBvdmVycmlkYWJsZVxyXG4gICAqL1xyXG4gIExPVyA9IC0xMCxcclxuICAvKipcclxuICAgKiBEZWZhdWx0IHByaW9yaXR5XHJcbiAgICovXHJcbiAgTk9STUFMID0gMCxcclxuICAvKipcclxuICAgKiBIaWdoIHByaW9yaXR5IGZvciBtYXRjaGVzIHRoYXQgc2hvdWxkIHRha2UgcHJlY2VkZW5jZVxyXG4gICAqL1xyXG4gIEhJR0ggPSAxMCxcclxufVxyXG5cclxuLyoqXHJcbiAqIEJhc2UgaW50ZXJmYWNlIGZvciBpbXBsZW1lbnRpbmcgYXBwbGljYWJsZXMgaW4gYSBjb25zaXN0ZW50IHdheVxyXG4gKlxyXG4gKiBBcHBsaWNhYmxlcyBhcmUgbWFpbmx5IHVzZWQgdG8gZmluZCBiZXN0IG1hdGNoaW5nIG9uZSBmcm9tIG11bHRpIHByb3ZpZGVkXHJcbiAqIGNsYXNzZXMsIGxpa2UgaGFuZGxlcnMsIHJlc29sdmVycywgZXRjLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBBcHBsaWNhYmxlIHtcclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRydWUgaWYgYXBwbGljYWJsZSBjYW4gYmUgdXNlZCB0byBoYW5kbGUgc3BlY2lmaWVkIGNvbmRpdGlvblxyXG4gICAqL1xyXG4gIGhhc01hdGNoPyguLi5wYXJhbXMpOiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHByaW9yaXR5IG9yIHNjb3JlIGZvciBzcGVjaWZpZWQgYXBwbGljYWJsZS5cclxuICAgKlxyXG4gICAqIElmIG11bHRpcGxlIGFwcGxpY2FibGVzIGNhbiBiZSBhcHBsaWVkIHRvIHNwZWNpZmllZCBjb25kaXRpb24sIHRoZSBvbmVcclxuICAgKiB3aXRoIGhpZ2hlc3QgcHJpb3JpdHkgb3Igc2NvcmUgd2lucy5cclxuICAgKi9cclxuICBnZXRQcmlvcml0eT8oLi4ucGFyYW1zKTogUHJpb3JpdHkgfCBudW1iZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBIZWxwZXIgbG9naWMgdG8gcmVzb2x2ZSBiZXN0IG1hdGNoaW5nIEFwcGxpY2FibGVcclxuICpcclxuICogRmluZGluZyBiZXN0IG1hdGNoIGlzIGEgdHdvIHN0ZXAgcHJvY2VzczpcclxuICogMS4gRmluZCBhbGwgbWF0Y2hpbmcgYXBwbGljYWJsZXNcclxuICogICAgLSBhbGwgYXBwbGljYWJsZXMgZm9yIHdoaWNoIGhhc01hdGNoKC4uLm1hdGNoUGFyYW1zKSB3aWxsIHJldHVybiB0cnVlXHJcbiAqICAgIC0gYWxsIGFwcGxpY2FibGVzIHdpdGhvdXQgaGFzTWF0Y2ggbWV0aG9kIChpbXBsaWNpdCBhbHdheXMgbWF0Y2gpXHJcbiAqIDIuIEZpbmQgdGhlIGFwcGxpY2FibGUgd2l0aCBoaWdoZXN0IHByaW9yaXR5XHJcbiAqICAgIC0gYXBwbGljYWJsZSB3aXRoIGhpZ2hlc3QgZ2V0UHJpb3JpdHkoLi4ucHJpb3JpdHlQYXJhbXMpIHdpbGwgd2luXHJcbiAqICAgIC0gYXBwbGljYWJsZSB3aXRob3V0IGdldFByaW9yaXR5IG1ldGhvZCBpcyB0cmVhdGVkIGFzIFByaW90aXR5Lk5PUk1BTCBvciAwXHJcbiAqICAgIC0gYXBwbGljYWJsZXMgd2l0aCB0aGUgc2FtZSBwcmlvcml0eSBhcmUgc29ydGVkIGJ5IG9yZGVyIG9mIHByb3ZpZGVycywgdGhlIGFwcGxpY2FibGUgdGhhdCB3YXMgcHJvdmlkZWQgbGF0ZXIgd2luc1xyXG4gKlxyXG4gKiBAcGFyYW0gYXBwbGljYWJsZXMgLSBhcnJheSBvciBhcHBsaWNhYmxlLWxpa2UgaW5zdGFuY2VzZVxyXG4gKiBAcGFyYW0gbWF0Y2hQYXJhbXMgLSBhcnJheSBvZiBwYXJhbWV0ZXJzIHBhc3NlZCBmb3IgaGFzTWF0Y2ggY2FsbHNcclxuICogQHBhcmFtIHByaW9yaXR5UGFyYW1zIC0gYXJyYXkgb2YgcGFyYW1ldGVycyBwYXNzZWQgZm9yIGdldFByaW9yaXR5IGNhbGxzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUFwcGxpY2FibGU8VCBleHRlbmRzIEFwcGxpY2FibGU+KFxyXG4gIGFwcGxpY2FibGVzOiBUW10gPSBbXSxcclxuICBtYXRjaFBhcmFtczogYW55W10gPSBbXSxcclxuICBwcmlvcml0eVBhcmFtczogYW55W10gPSBbXVxyXG4pOiBUIHwgdW5kZWZpbmVkIHtcclxuICBjb25zdCBtYXRjaGVkQXBwbGljYWJsZXMgPSBhcHBsaWNhYmxlcy5maWx0ZXIoXHJcbiAgICAoYXBwbGljYWJsZSkgPT4gIWFwcGxpY2FibGUuaGFzTWF0Y2ggfHwgYXBwbGljYWJsZS5oYXNNYXRjaCguLi5tYXRjaFBhcmFtcylcclxuICApO1xyXG5cclxuICBpZiAobWF0Y2hlZEFwcGxpY2FibGVzLmxlbmd0aCA8IDIpIHtcclxuICAgIHJldHVybiBtYXRjaGVkQXBwbGljYWJsZXNbMF07XHJcbiAgfVxyXG5cclxuICBsZXQgbGFzdFByaW9yaXR5ID0gLUluZmluaXR5O1xyXG4gIHJldHVybiBtYXRjaGVkQXBwbGljYWJsZXMucmVkdWNlKChhY2MsIGN1cnIpID0+IHtcclxuICAgIGNvbnN0IGN1cnJQcmlvcml0eSA9IGN1cnIuZ2V0UHJpb3JpdHlcclxuICAgICAgPyBjdXJyLmdldFByaW9yaXR5KC4uLnByaW9yaXR5UGFyYW1zKVxyXG4gICAgICA6IFByaW9yaXR5Lk5PUk1BTDtcclxuICAgIGlmIChsYXN0UHJpb3JpdHkgPiBjdXJyUHJpb3JpdHkpIHtcclxuICAgICAgcmV0dXJuIGFjYztcclxuICAgIH1cclxuICAgIGxhc3RQcmlvcml0eSA9IGN1cnJQcmlvcml0eTtcclxuICAgIHJldHVybiBjdXJyO1xyXG4gIH0sIHVuZGVmaW5lZCk7XHJcbn1cclxuIl19