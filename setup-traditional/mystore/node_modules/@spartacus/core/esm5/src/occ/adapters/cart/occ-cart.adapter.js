import { __decorate } from "tslib";
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map, pluck } from 'rxjs/operators';
import { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';
import { ConverterService } from '../../../util/converter.service';
import { OccEndpointsService } from '../../services/occ-endpoints.service';
import { InterceptorUtil, USE_CLIENT_TOKEN, } from '../../utils/interceptor-util';
import { OCC_CART_ID_CURRENT, OCC_USER_ID_ANONYMOUS, } from '../../utils/occ-constants';
var OccCartAdapter = /** @class */ (function () {
    function OccCartAdapter(http, occEndpointsService, converterService) {
        this.http = http;
        this.occEndpointsService = occEndpointsService;
        this.converterService = converterService;
    }
    OccCartAdapter.prototype.loadAll = function (userId) {
        return this.http
            .get(this.occEndpointsService.getUrl('carts', { userId: userId }))
            .pipe(pluck('carts'), this.converterService.pipeableMany(CART_NORMALIZER));
    };
    OccCartAdapter.prototype.load = function (userId, cartId) {
        if (cartId === OCC_CART_ID_CURRENT) {
            return this.loadAll(userId).pipe(map(function (carts) {
                if (carts) {
                    var activeCart = carts.find(function (cart) {
                        return cart['saveTime'] === undefined;
                    });
                    return activeCart;
                }
                else {
                    return null;
                }
            }));
        }
        else {
            return this.http
                .get(this.occEndpointsService.getUrl('cart', { userId: userId, cartId: cartId }))
                .pipe(this.converterService.pipeable(CART_NORMALIZER));
        }
    };
    OccCartAdapter.prototype.create = function (userId, oldCartId, toMergeCartGuid) {
        var toAdd = JSON.stringify({});
        var params = {};
        if (oldCartId) {
            params = { oldCartId: oldCartId };
        }
        if (toMergeCartGuid) {
            params['toMergeCartGuid'] = toMergeCartGuid;
        }
        return this.http
            .post(this.occEndpointsService.getUrl('createCart', { userId: userId }, params), toAdd)
            .pipe(this.converterService.pipeable(CART_NORMALIZER));
    };
    OccCartAdapter.prototype.delete = function (userId, cartId) {
        var headers = new HttpHeaders();
        if (userId === OCC_USER_ID_ANONYMOUS) {
            headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
        }
        return this.http.delete(this.occEndpointsService.getUrl('deleteCart', { userId: userId, cartId: cartId }), { headers: headers });
    };
    OccCartAdapter.prototype.addEmail = function (userId, cartId, email) {
        var headers = new HttpHeaders({
            'Content-Type': 'application/x-www-form-urlencoded',
        });
        headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
        var httpParams = new HttpParams().set('email', email);
        var url = this.occEndpointsService.getUrl('addEmail', {
            userId: userId,
            cartId: cartId,
        });
        return this.http.put(url, httpParams, { headers: headers });
    };
    OccCartAdapter.ctorParameters = function () { return [
        { type: HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService }
    ]; };
    OccCartAdapter = __decorate([
        Injectable()
    ], OccCartAdapter);
    return OccCartAdapter;
}());
export { OccCartAdapter };
//# sourceMappingURL=data:application/json;base64,