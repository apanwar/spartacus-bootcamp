import { __decorate, __read, __values } from "tslib";
import { Injectable } from '@angular/core';
import { mergeFields, parseFields } from '../utils/occ-fields';
import { HttpClient } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
/**
 * Helper service for optimizing endpoint calls to occ backend
 */
var OccFieldsService = /** @class */ (function () {
    function OccFieldsService(http) {
        this.http = http;
        this.FIELDS_PARAM = 'fields';
    }
    /**
     * Merge similar occ endpoints calls by merging fields parameter
     *
     * We assume that different scopes are defined by different fields parameters,
     * so we are grouping all requests with the same urls (except fields definition)
     * and merging into one request with fields that will satisfy all separate ones.
     *
     * @param models
     */
    OccFieldsService.prototype.getOptimalUrlGroups = function (models) {
        var e_1, _a, e_2, _b;
        var groupedByUrls = {};
        try {
            for (var _c = __values(models), _d = _c.next(); !_d.done; _d = _c.next()) {
                var model = _d.value;
                var _e = __read(this.splitFields(model.url), 2), urlPart = _e[0], fields = _e[1];
                if (!groupedByUrls[urlPart]) {
                    groupedByUrls[urlPart] = {};
                }
                model.fields = fields ? parseFields(fields) : {};
                groupedByUrls[urlPart][model.scopedData.scope] = model;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var mergedUrls = {};
        try {
            for (var _f = __values(Object.entries(groupedByUrls)), _g = _f.next(); !_g.done; _g = _f.next()) {
                var _h = __read(_g.value, 2), url = _h[0], group = _h[1];
                var urlWithFields = this.getUrlWithFields(url, Object.values(group).map(function (lo) { return lo.fields; }));
                mergedUrls[urlWithFields] = group;
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return mergedUrls;
    };
    /**
     * Extract fields parameter from occ endpoint url
     *
     * @param urlWithFields
     */
    OccFieldsService.prototype.splitFields = function (urlWithFields) {
        var _this = this;
        var _a = __read(urlWithFields.split('?'), 2), url = _a[0], params = _a[1];
        var paramsMap = {};
        if (params) {
            params.split('&').map(function (param) {
                var keyValue = param.split('=');
                paramsMap[keyValue[0]] = keyValue[1];
            });
        }
        var nonFieldsParams = Object.keys(paramsMap)
            .sort()
            .reduce(function (id, par) {
            if (par !== _this.FIELDS_PARAM) {
                id.push(paramsMap[par] ? par + "=" + paramsMap[par] : par);
            }
            return id;
        }, []);
        var nonFields = nonFieldsParams.join('&');
        return [
            nonFields ? url + "?" + nonFields : url,
            paramsMap[this.FIELDS_PARAM],
        ];
    };
    /**
     * Combine url with field parameters
     *
     * @param url
     * @param fields
     */
    OccFieldsService.prototype.getUrlWithFields = function (url, fields) {
        var mergedFields = mergeFields(fields);
        if (mergedFields) {
            url += url.includes('?') ? '&' : '?';
            url += this.FIELDS_PARAM + "=" + mergedFields;
        }
        return url;
    };
    OccFieldsService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    OccFieldsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function OccFieldsService_Factory() { return new OccFieldsService(i0.ɵɵinject(i1.HttpClient)); }, token: OccFieldsService, providedIn: "root" });
    OccFieldsService = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], OccFieldsService);
    return OccFieldsService;
}());
export { OccFieldsService };
//# sourceMappingURL=data:application/json;base64,