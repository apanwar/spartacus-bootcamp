import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { OccConfig } from '../config/occ-config';
import * as i0 from "@angular/core";
import * as i1 from "../config/occ-config";
/**
 * Http interceptor to add cookies to all cross-site requests.
 */
var WithCredentialsInterceptor = /** @class */ (function () {
    function WithCredentialsInterceptor(config) {
        this.config = config;
    }
    /**
     * Intercepts each request and adds the `withCredential` flag to it
     * if it hasn't been added already.
     */
    WithCredentialsInterceptor.prototype.intercept = function (request, next) {
        if (this.requiresWithCredentials(request)) {
            request = request.clone({
                withCredentials: true,
            });
        }
        return next.handle(request);
    };
    /**
     * indicates whether the request should use the WithCredentials flag.
     */
    WithCredentialsInterceptor.prototype.requiresWithCredentials = function (request) {
        var _a, _b;
        return (((_a = this.occConfig) === null || _a === void 0 ? void 0 : _a.useWithCredentials) &&
            request.url.indexOf((_b = this.occConfig) === null || _b === void 0 ? void 0 : _b.prefix) > -1);
    };
    Object.defineProperty(WithCredentialsInterceptor.prototype, "occConfig", {
        get: function () {
            return this.config.backend.occ;
        },
        enumerable: true,
        configurable: true
    });
    WithCredentialsInterceptor.ctorParameters = function () { return [
        { type: OccConfig }
    ]; };
    WithCredentialsInterceptor.ɵprov = i0.ɵɵdefineInjectable({ factory: function WithCredentialsInterceptor_Factory() { return new WithCredentialsInterceptor(i0.ɵɵinject(i1.OccConfig)); }, token: WithCredentialsInterceptor, providedIn: "root" });
    WithCredentialsInterceptor = __decorate([
        Injectable({ providedIn: 'root' })
    ], WithCredentialsInterceptor);
    return WithCredentialsInterceptor;
}());
export { WithCredentialsInterceptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l0aC1jcmVkZW50aWFscy5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9vY2MvaW50ZXJjZXB0b3JzL3dpdGgtY3JlZGVudGlhbHMuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQU1BLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7QUFFakQ7O0dBRUc7QUFFSDtJQUNFLG9DQUFzQixNQUFpQjtRQUFqQixXQUFNLEdBQU4sTUFBTSxDQUFXO0lBQUcsQ0FBQztJQUUzQzs7O09BR0c7SUFDSCw4Q0FBUyxHQUFULFVBQ0UsT0FBeUIsRUFDekIsSUFBaUI7UUFFakIsSUFBSSxJQUFJLENBQUMsdUJBQXVCLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDekMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7Z0JBQ3RCLGVBQWUsRUFBRSxJQUFJO2FBQ3RCLENBQUMsQ0FBQztTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRDs7T0FFRztJQUNPLDREQUF1QixHQUFqQyxVQUFrQyxPQUF5Qjs7UUFDekQsT0FBTyxDQUNMLE9BQUEsSUFBSSxDQUFDLFNBQVMsMENBQUUsa0JBQWtCO1lBQ2xDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxPQUFDLElBQUksQ0FBQyxTQUFTLDBDQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUNqRCxDQUFDO0lBQ0osQ0FBQztJQUVELHNCQUFZLGlEQUFTO2FBQXJCO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFDakMsQ0FBQzs7O09BQUE7O2dCQTlCNkIsU0FBUzs7O0lBRDVCLDBCQUEwQjtRQUR0QyxVQUFVLENBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLENBQUM7T0FDdEIsMEJBQTBCLENBZ0N0QztxQ0E5Q0Q7Q0E4Q0MsQUFoQ0QsSUFnQ0M7U0FoQ1ksMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBIdHRwRXZlbnQsXHJcbiAgSHR0cEhhbmRsZXIsXHJcbiAgSHR0cEludGVyY2VwdG9yLFxyXG4gIEh0dHBSZXF1ZXN0LFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IE9jY0NvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9vY2MtY29uZmlnJztcclxuXHJcbi8qKlxyXG4gKiBIdHRwIGludGVyY2VwdG9yIHRvIGFkZCBjb29raWVzIHRvIGFsbCBjcm9zcy1zaXRlIHJlcXVlc3RzLlxyXG4gKi9cclxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcclxuZXhwb3J0IGNsYXNzIFdpdGhDcmVkZW50aWFsc0ludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcclxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgY29uZmlnOiBPY2NDb25maWcpIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIEludGVyY2VwdHMgZWFjaCByZXF1ZXN0IGFuZCBhZGRzIHRoZSBgd2l0aENyZWRlbnRpYWxgIGZsYWcgdG8gaXRcclxuICAgKiBpZiBpdCBoYXNuJ3QgYmVlbiBhZGRlZCBhbHJlYWR5LlxyXG4gICAqL1xyXG4gIGludGVyY2VwdChcclxuICAgIHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4sXHJcbiAgICBuZXh0OiBIdHRwSGFuZGxlclxyXG4gICk6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcclxuICAgIGlmICh0aGlzLnJlcXVpcmVzV2l0aENyZWRlbnRpYWxzKHJlcXVlc3QpKSB7XHJcbiAgICAgIHJlcXVlc3QgPSByZXF1ZXN0LmNsb25lKHtcclxuICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRydWUsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcXVlc3QpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogaW5kaWNhdGVzIHdoZXRoZXIgdGhlIHJlcXVlc3Qgc2hvdWxkIHVzZSB0aGUgV2l0aENyZWRlbnRpYWxzIGZsYWcuXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIHJlcXVpcmVzV2l0aENyZWRlbnRpYWxzKHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4pOiBib29sZWFuIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIHRoaXMub2NjQ29uZmlnPy51c2VXaXRoQ3JlZGVudGlhbHMgJiZcclxuICAgICAgcmVxdWVzdC51cmwuaW5kZXhPZih0aGlzLm9jY0NvbmZpZz8ucHJlZml4KSA+IC0xXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXQgb2NjQ29uZmlnKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLmJhY2tlbmQub2NjO1xyXG4gIH1cclxufVxyXG4iXX0=