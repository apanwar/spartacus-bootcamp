import { __assign, __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { OccEndpointsService } from '../../services/occ-endpoints.service';
import { ConverterService } from '../../../util/converter.service';
import { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';
import { OccRequestsOptimizerService } from '../../services/occ-requests-optimizer.service';
var OccProductAdapter = /** @class */ (function () {
    function OccProductAdapter(http, occEndpoints, converter, requestsOptimizer) {
        this.http = http;
        this.occEndpoints = occEndpoints;
        this.converter = converter;
        this.requestsOptimizer = requestsOptimizer;
    }
    OccProductAdapter.prototype.load = function (productCode, scope) {
        return this.http
            .get(this.getEndpoint(productCode, scope))
            .pipe(this.converter.pipeable(PRODUCT_NORMALIZER));
    };
    OccProductAdapter.prototype.loadMany = function (products) {
        var _this = this;
        var scopedDataWithUrls = products.map(function (model) { return ({
            scopedData: model,
            url: _this.getEndpoint(model.code, model.scope),
        }); });
        return this.requestsOptimizer
            .scopedDataLoad(scopedDataWithUrls)
            .map(function (scopedProduct) {
            return (__assign(__assign({}, scopedProduct), { data$: scopedProduct.data$.pipe(_this.converter.pipeable(PRODUCT_NORMALIZER)) }));
        });
    };
    OccProductAdapter.prototype.getEndpoint = function (code, scope) {
        return this.occEndpoints.getUrl('product', {
            productCode: code,
        }, undefined, scope);
    };
    OccProductAdapter.ctorParameters = function () { return [
        { type: HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService },
        { type: OccRequestsOptimizerService }
    ]; };
    OccProductAdapter = __decorate([
        Injectable()
    ], OccProductAdapter);
    return OccProductAdapter;
}());
export { OccProductAdapter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2NjLXByb2R1Y3QuYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9vY2MvYWRhcHRlcnMvcHJvZHVjdC9vY2MtcHJvZHVjdC5hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUMzRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNuRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUtwRixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUc1RjtJQUNFLDJCQUNZLElBQWdCLEVBQ2hCLFlBQWlDLEVBQ2pDLFNBQTJCLEVBQzNCLGlCQUE4QztRQUg5QyxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQ2hCLGlCQUFZLEdBQVosWUFBWSxDQUFxQjtRQUNqQyxjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUMzQixzQkFBaUIsR0FBakIsaUJBQWlCLENBQTZCO0lBQ3ZELENBQUM7SUFFSixnQ0FBSSxHQUFKLFVBQUssV0FBbUIsRUFBRSxLQUFjO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLElBQUk7YUFDYixHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDekMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsb0NBQVEsR0FBUixVQUFTLFFBQTZCO1FBQXRDLGlCQWlCQztRQWhCQyxJQUFNLGtCQUFrQixHQUF3QixRQUFRLENBQUMsR0FBRyxDQUFDLFVBQUMsS0FBSyxJQUFLLE9BQUEsQ0FBQztZQUN2RSxVQUFVLEVBQUUsS0FBSztZQUNqQixHQUFHLEVBQUUsS0FBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUM7U0FDL0MsQ0FBQyxFQUhzRSxDQUd0RSxDQUFDLENBQUM7UUFFSixPQUFPLElBQUksQ0FBQyxpQkFBaUI7YUFDMUIsY0FBYyxDQUFjLGtCQUFrQixDQUFDO2FBQy9DLEdBQUcsQ0FDRixVQUFDLGFBQWE7WUFDWixPQUFBLENBQUMsc0JBQ0ksYUFBYSxLQUNoQixLQUFLLEVBQUUsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQzdCLEtBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLENBQzVDLEdBQ29CLENBQUE7UUFMdkIsQ0FLdUIsQ0FDMUIsQ0FBQztJQUNOLENBQUM7SUFFUyx1Q0FBVyxHQUFyQixVQUFzQixJQUFZLEVBQUUsS0FBYztRQUNoRCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUM3QixTQUFTLEVBQ1Q7WUFDRSxXQUFXLEVBQUUsSUFBSTtTQUNsQixFQUNELFNBQVMsRUFDVCxLQUFLLENBQ04sQ0FBQztJQUNKLENBQUM7O2dCQXhDaUIsVUFBVTtnQkFDRixtQkFBbUI7Z0JBQ3RCLGdCQUFnQjtnQkFDUiwyQkFBMkI7O0lBTC9DLGlCQUFpQjtRQUQ3QixVQUFVLEVBQUU7T0FDQSxpQkFBaUIsQ0EyQzdCO0lBQUQsd0JBQUM7Q0FBQSxBQTNDRCxJQTJDQztTQTNDWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFByb2R1Y3RBZGFwdGVyIH0gZnJvbSAnLi4vLi4vLi4vcHJvZHVjdC9jb25uZWN0b3JzL3Byb2R1Y3QvcHJvZHVjdC5hZGFwdGVyJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBPY2NFbmRwb2ludHNTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvb2NjLWVuZHBvaW50cy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ29udmVydGVyU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3V0aWwvY29udmVydGVyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQUk9EVUNUX05PUk1BTElaRVIgfSBmcm9tICcuLi8uLi8uLi9wcm9kdWN0L2Nvbm5lY3RvcnMvcHJvZHVjdC9jb252ZXJ0ZXJzJztcclxuaW1wb3J0IHsgUHJvZHVjdCB9IGZyb20gJy4uLy4uLy4uL21vZGVsL3Byb2R1Y3QubW9kZWwnO1xyXG5pbXBvcnQgeyBTY29wZWRQcm9kdWN0RGF0YSB9IGZyb20gJy4uLy4uLy4uL3Byb2R1Y3QvY29ubmVjdG9ycy9wcm9kdWN0L3Njb3BlZC1wcm9kdWN0LWRhdGEnO1xyXG5pbXBvcnQgeyBTY29wZWREYXRhV2l0aFVybCB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL29jYy1maWVsZHMuc2VydmljZSc7XHJcbmltcG9ydCB7IE9jYyB9IGZyb20gJy4uLy4uL29jYy1tb2RlbHMnO1xyXG5pbXBvcnQgeyBPY2NSZXF1ZXN0c09wdGltaXplclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9vY2MtcmVxdWVzdHMtb3B0aW1pemVyLnNlcnZpY2UnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgT2NjUHJvZHVjdEFkYXB0ZXIgaW1wbGVtZW50cyBQcm9kdWN0QWRhcHRlciB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgaHR0cDogSHR0cENsaWVudCxcclxuICAgIHByb3RlY3RlZCBvY2NFbmRwb2ludHM6IE9jY0VuZHBvaW50c1NlcnZpY2UsXHJcbiAgICBwcm90ZWN0ZWQgY29udmVydGVyOiBDb252ZXJ0ZXJTZXJ2aWNlLFxyXG4gICAgcHJvdGVjdGVkIHJlcXVlc3RzT3B0aW1pemVyOiBPY2NSZXF1ZXN0c09wdGltaXplclNlcnZpY2VcclxuICApIHt9XHJcblxyXG4gIGxvYWQocHJvZHVjdENvZGU6IHN0cmluZywgc2NvcGU/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPFByb2R1Y3Q+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHBcclxuICAgICAgLmdldCh0aGlzLmdldEVuZHBvaW50KHByb2R1Y3RDb2RlLCBzY29wZSkpXHJcbiAgICAgIC5waXBlKHRoaXMuY29udmVydGVyLnBpcGVhYmxlKFBST0RVQ1RfTk9STUFMSVpFUikpO1xyXG4gIH1cclxuXHJcbiAgbG9hZE1hbnkocHJvZHVjdHM6IFNjb3BlZFByb2R1Y3REYXRhW10pOiBTY29wZWRQcm9kdWN0RGF0YVtdIHtcclxuICAgIGNvbnN0IHNjb3BlZERhdGFXaXRoVXJsczogU2NvcGVkRGF0YVdpdGhVcmxbXSA9IHByb2R1Y3RzLm1hcCgobW9kZWwpID0+ICh7XHJcbiAgICAgIHNjb3BlZERhdGE6IG1vZGVsLFxyXG4gICAgICB1cmw6IHRoaXMuZ2V0RW5kcG9pbnQobW9kZWwuY29kZSwgbW9kZWwuc2NvcGUpLFxyXG4gICAgfSkpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLnJlcXVlc3RzT3B0aW1pemVyXHJcbiAgICAgIC5zY29wZWREYXRhTG9hZDxPY2MuUHJvZHVjdD4oc2NvcGVkRGF0YVdpdGhVcmxzKVxyXG4gICAgICAubWFwKFxyXG4gICAgICAgIChzY29wZWRQcm9kdWN0KSA9PlxyXG4gICAgICAgICAgKHtcclxuICAgICAgICAgICAgLi4uc2NvcGVkUHJvZHVjdCxcclxuICAgICAgICAgICAgZGF0YSQ6IHNjb3BlZFByb2R1Y3QuZGF0YSQucGlwZShcclxuICAgICAgICAgICAgICB0aGlzLmNvbnZlcnRlci5waXBlYWJsZShQUk9EVUNUX05PUk1BTElaRVIpXHJcbiAgICAgICAgICAgICksXHJcbiAgICAgICAgICB9IGFzIFNjb3BlZFByb2R1Y3REYXRhKVxyXG4gICAgICApO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGdldEVuZHBvaW50KGNvZGU6IHN0cmluZywgc2NvcGU/OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMub2NjRW5kcG9pbnRzLmdldFVybChcclxuICAgICAgJ3Byb2R1Y3QnLFxyXG4gICAgICB7XHJcbiAgICAgICAgcHJvZHVjdENvZGU6IGNvZGUsXHJcbiAgICAgIH0sXHJcbiAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgc2NvcGVcclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiJdfQ==