import { __assign, __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';
import { Converter, ConverterService, } from '../../../../util/converter.service';
import * as i0 from "@angular/core";
import * as i1 from "../../../../util/converter.service";
var OccProductReferencesListNormalizer = /** @class */ (function () {
    function OccProductReferencesListNormalizer(converter) {
        this.converter = converter;
    }
    OccProductReferencesListNormalizer.prototype.convert = function (source, target) {
        var _this = this;
        if (target === void 0) { target = []; }
        if (target === undefined) {
            target = __assign({}, source);
        }
        if (source && source.references) {
            target = source.references.map(function (reference) { return (__assign(__assign({}, reference), { target: _this.converter.convert(reference.target, PRODUCT_NORMALIZER) })); });
            return target;
        }
    };
    OccProductReferencesListNormalizer.ctorParameters = function () { return [
        { type: ConverterService }
    ]; };
    OccProductReferencesListNormalizer.ɵprov = i0.ɵɵdefineInjectable({ factory: function OccProductReferencesListNormalizer_Factory() { return new OccProductReferencesListNormalizer(i0.ɵɵinject(i1.ConverterService)); }, token: OccProductReferencesListNormalizer, providedIn: "root" });
    OccProductReferencesListNormalizer = __decorate([
        Injectable({ providedIn: 'root' })
    ], OccProductReferencesListNormalizer);
    return OccProductReferencesListNormalizer;
}());
export { OccProductReferencesListNormalizer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2NjLXByb2R1Y3QtcmVmZXJlbmNlcy1saXN0LW5vcm1hbGl6ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvb2NjL2FkYXB0ZXJzL3Byb2R1Y3QvY29udmVydGVycy9vY2MtcHJvZHVjdC1yZWZlcmVuY2VzLWxpc3Qtbm9ybWFsaXplci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUN2RixPQUFPLEVBQ0wsU0FBUyxFQUNULGdCQUFnQixHQUNqQixNQUFNLG9DQUFvQyxDQUFDOzs7QUFHNUM7SUFFRSw0Q0FBb0IsU0FBMkI7UUFBM0IsY0FBUyxHQUFULFNBQVMsQ0FBa0I7SUFBRyxDQUFDO0lBRW5ELG9EQUFPLEdBQVAsVUFDRSxNQUFnQyxFQUNoQyxNQUErQjtRQUZqQyxpQkFnQkM7UUFkQyx1QkFBQSxFQUFBLFdBQStCO1FBRS9CLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtZQUN4QixNQUFNLGdCQUFTLE1BQWMsQ0FBRSxDQUFDO1NBQ2pDO1FBRUQsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRTtZQUMvQixNQUFNLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBQyxTQUFTLElBQUssT0FBQSx1QkFDekMsU0FBUyxLQUNaLE1BQU0sRUFBRSxLQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLGtCQUFrQixDQUFDLElBQ3BFLEVBSDRDLENBRzVDLENBQUMsQ0FBQztZQUVKLE9BQU8sTUFBTSxDQUFDO1NBQ2Y7SUFDSCxDQUFDOztnQkFsQjhCLGdCQUFnQjs7O0lBRnBDLGtDQUFrQztRQUQ5QyxVQUFVLENBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLENBQUM7T0FDdEIsa0NBQWtDLENBcUI5Qzs2Q0EvQkQ7Q0ErQkMsQUFyQkQsSUFxQkM7U0FyQlksa0NBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQcm9kdWN0UmVmZXJlbmNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vbW9kZWwvcHJvZHVjdC5tb2RlbCc7XHJcbmltcG9ydCB7IE9jYyB9IGZyb20gJy4uLy4uLy4uL29jYy1tb2RlbHMvb2NjLm1vZGVscyc7XHJcbmltcG9ydCB7IFBST0RVQ1RfTk9STUFMSVpFUiB9IGZyb20gJy4uLy4uLy4uLy4uL3Byb2R1Y3QvY29ubmVjdG9ycy9wcm9kdWN0L2NvbnZlcnRlcnMnO1xyXG5pbXBvcnQge1xyXG4gIENvbnZlcnRlcixcclxuICBDb252ZXJ0ZXJTZXJ2aWNlLFxyXG59IGZyb20gJy4uLy4uLy4uLy4uL3V0aWwvY29udmVydGVyLnNlcnZpY2UnO1xyXG5cclxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcclxuZXhwb3J0IGNsYXNzIE9jY1Byb2R1Y3RSZWZlcmVuY2VzTGlzdE5vcm1hbGl6ZXJcclxuICBpbXBsZW1lbnRzIENvbnZlcnRlcjxPY2MuUHJvZHVjdFJlZmVyZW5jZUxpc3QsIFByb2R1Y3RSZWZlcmVuY2VbXT4ge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29udmVydGVyOiBDb252ZXJ0ZXJTZXJ2aWNlKSB7fVxyXG5cclxuICBjb252ZXJ0KFxyXG4gICAgc291cmNlOiBPY2MuUHJvZHVjdFJlZmVyZW5jZUxpc3QsXHJcbiAgICB0YXJnZXQ6IFByb2R1Y3RSZWZlcmVuY2VbXSA9IFtdXHJcbiAgKTogUHJvZHVjdFJlZmVyZW5jZVtdIHtcclxuICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB0YXJnZXQgPSB7IC4uLihzb3VyY2UgYXMgYW55KSB9O1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChzb3VyY2UgJiYgc291cmNlLnJlZmVyZW5jZXMpIHtcclxuICAgICAgdGFyZ2V0ID0gc291cmNlLnJlZmVyZW5jZXMubWFwKChyZWZlcmVuY2UpID0+ICh7XHJcbiAgICAgICAgLi4ucmVmZXJlbmNlLFxyXG4gICAgICAgIHRhcmdldDogdGhpcy5jb252ZXJ0ZXIuY29udmVydChyZWZlcmVuY2UudGFyZ2V0LCBQUk9EVUNUX05PUk1BTElaRVIpLFxyXG4gICAgICB9KSk7XHJcblxyXG4gICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=