export var DEFAULT_SCOPE = 'default';
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"occ-endpoints.model.js","sourceRoot":"ng://@spartacus/core/","sources":["src/occ/occ-models/occ-endpoints.model.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,IAAM,aAAa,GAAG,SAAS,CAAC","sourcesContent":["export const DEFAULT_SCOPE = 'default';\r\n\r\nexport interface OccEndpoint {\r\n  default?: string;\r\n  [scope: string]: string;\r\n}\r\n\r\nexport interface ProductOccEndpoint extends OccEndpoint {\r\n  list?: string;\r\n  details?: string;\r\n  attributes?: string;\r\n  variants?: string;\r\n}\r\n\r\nexport interface OccEndpoints {\r\n  /**\r\n   * Client login (get authorization token)\r\n   *\r\n   * @member {string}\r\n   */\r\n  login?: string | OccEndpoint;\r\n\r\n  /**\r\n   * Client logout (revoke authorization token)\r\n   *\r\n   * @member {string}\r\n   */\r\n  revoke?: string | OccEndpoint;\r\n\r\n  /**\r\n   * Get product details for scope\r\n   *\r\n   * @member Object\r\n   */\r\n  product?: string | ProductOccEndpoint;\r\n  /**\r\n   * Get reviews for a product\r\n   *\r\n   * @member {string}\r\n   */\r\n  productReviews?: string | OccEndpoint;\r\n  /**\r\n   * Get a list of product references\r\n   *\r\n   * @member {string}\r\n   */\r\n  productReferences?: string | OccEndpoint;\r\n  /**\r\n   * Get a list of products and additional data\r\n   *\r\n   * @member {string}\r\n   */\r\n  productSearch?: string | OccEndpoint;\r\n  /**\r\n   * Get a list of available suggestions\r\n   *\r\n   * @member {string}\r\n   */\r\n  productSuggestions?: string | OccEndpoint;\r\n  /**\r\n   * Get CMS component details\r\n   *\r\n   * @member {string}\r\n   */\r\n  component?: string | OccEndpoint;\r\n  /**\r\n   * Get a list of CMS component details\r\n   *\r\n   * @member {string}\r\n   */\r\n  components?: string | OccEndpoint;\r\n  /**\r\n   * Get page data with list of cms content slots\r\n   *\r\n   * @member {string}\r\n   */\r\n  pages?: string | OccEndpoint;\r\n  /**\r\n   * Get page data with list of cms content slots\r\n   *\r\n   * @member {string}\r\n   */\r\n  page?: string | OccEndpoint;\r\n  /**\r\n   * Get all carts\r\n   *\r\n   * @member {string} [carts]\r\n   */\r\n  carts?: string | OccEndpoint;\r\n  /**\r\n   * Get a cart with a given identifier\r\n   *\r\n   * @member {string} [cart]\r\n   */\r\n  cart?: string | OccEndpoint;\r\n  /**\r\n   * Creates or restore a cart for a user\r\n   *\r\n   * @member {string} [createCart]\r\n   */\r\n  createCart?: string | OccEndpoint;\r\n  /**\r\n   * Deletes a cart with a given cart id\r\n   *\r\n   * @member {string} [deleteCart]\r\n   */\r\n  deleteCart?: string | OccEndpoint;\r\n  /**\r\n   * Adds a product to the cart\r\n   *\r\n   * @member {string} [addEntries]\r\n   */\r\n  addEntries?: string | OccEndpoint;\r\n  /**\r\n   * Update quantity and store the details of a cart entry\r\n   *\r\n   * @member {string} [updateEntries]\r\n   */\r\n  updateEntries?: string | OccEndpoint;\r\n  /**\r\n   * Deletes cart entry\r\n   *\r\n   * @member {string} [removeEntries]\r\n   */\r\n  removeEntries?: string | OccEndpoint;\r\n  /**\r\n   * Assign email to cart\r\n   *\r\n   * @member {string} [addEmail]\r\n   */\r\n  addEmail?: string | OccEndpoint;\r\n  /**\r\n   * Get a store location\r\n   *\r\n   * @member {string} [page]\r\n   */\r\n  store?: string | OccEndpoint;\r\n  /**\r\n   * Get a list of store locations\r\n   *\r\n   * @member {string} [page]\r\n   */\r\n  stores?: string | OccEndpoint;\r\n  /**\r\n   * Gets a store location count per country and regions\r\n   *\r\n   * @member {string} [page]\r\n   */\r\n  storescounts?: string | OccEndpoint;\r\n  /**\r\n   * Get a list of available languages\r\n   *\r\n   * @member {string}\r\n   */\r\n  languages?: string | OccEndpoint;\r\n  /**\r\n   * Get a list of available currencies\r\n   *\r\n   * @member {string}\r\n   */\r\n  currencies?: string | OccEndpoint;\r\n  /**\r\n   * Get a list of countries\r\n   *\r\n   * @member {string}\r\n   */\r\n  countries?: string | OccEndpoint;\r\n  /**\r\n   * Fetch the list of regions for the provided country\r\n   *\r\n   * @member {string}\r\n   */\r\n  regions?: string | OccEndpoint;\r\n  /**\r\n   * Titles used for user's personal info.\r\n   *\r\n   * @member {string}\r\n   */\r\n  titles?: string | OccEndpoint;\r\n  /**\r\n   * Get user details\r\n   *\r\n   * @member {string}\r\n   */\r\n  user?: string | OccEndpoint;\r\n  /**\r\n   * Register a new user.\r\n   *\r\n   * @member {string}\r\n   */\r\n  userRegister?: string | OccEndpoint;\r\n  /**\r\n   * Request an email to reset the password\r\n   *\r\n   * @member {string}\r\n   */\r\n  userForgotPassword?: string | OccEndpoint;\r\n  /**\r\n   * Reset the password once the email is recieved.\r\n   *\r\n   * @member {string}\r\n   */\r\n  userResetPassword?: string | OccEndpoint;\r\n  /**\r\n   * Update the user id with which the user authenticates.\r\n   *\r\n   * @member {string}\r\n   */\r\n  userUpdateLoginId?: string | OccEndpoint;\r\n  /**\r\n   * Update the user's password\r\n   *\r\n   * @member {string}\r\n   */\r\n  userUpdatePassword?: string | OccEndpoint;\r\n  /**\r\n   * Payment details root endpoint.\r\n   *\r\n   * @member {string}\r\n   */\r\n  paymentDetailsAll?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for a specific payment method.\r\n   *\r\n   * @member {string}\r\n   */\r\n  paymentDetail?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for the list of one user's orders\r\n   *\r\n   * @member {string}\r\n   */\r\n  orderHistory?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for the details of one user's order\r\n   *\r\n   * @member {string}\r\n   */\r\n  orderDetail?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for anonymous consent templates\r\n   *\r\n   * @member {string}\r\n   */\r\n  anonymousConsentTemplates?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for consent templates\r\n   *\r\n   * @member {string}\r\n   */\r\n  consentTemplates?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for a user's consents\r\n   *\r\n   * @member {string}\r\n   */\r\n  consents?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for a user's specific previously given consent.\r\n   *\r\n   * @member {string}\r\n   */\r\n  consentDetail?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for a user's addresses\r\n   *\r\n   * @member {string}\r\n   */\r\n  addresses?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for a user's specific address\r\n   *\r\n   * @member {string}\r\n   */\r\n  addressDetail?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for address verification\r\n   *\r\n   * @member {string}\r\n   */\r\n  addressVerification?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for consignment tracking\r\n   *\r\n   * @member {string}\r\n   */\r\n  consignmentTracking?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for asm customer search\r\n   *\r\n   * @member {string}\r\n   */\r\n  asmCustomerSearch?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for cart voucher\r\n   *\r\n   * @member {string}\r\n   */\r\n  cartVoucher?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for coupons\r\n   *\r\n   * @member {string}\r\n   */\r\n  customerCoupons?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for claiming coupon\r\n   *\r\n   * @member {string}\r\n   */\r\n  claimCoupon?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for coupons\r\n   *\r\n   * @member {string}\r\n   */\r\n  couponNotification?: string | OccEndpoint;\r\n  /**\r\n   * Explicitly saves a cart\r\n   *\r\n   * @member {string}\r\n   */\r\n  saveCart?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for notification preference\r\n   *\r\n   * @member {string}\r\n   */\r\n  notificationPreference?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for product interests\r\n   *\r\n   * @member {string}\r\n   */\r\n  productInterests?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for getting product interests\r\n   *\r\n   * @member {string}\r\n   */\r\n  getProductInterests?: string | OccEndpoint;\r\n\r\n  /**\r\n   * Endpoint for cancel an order\r\n   */\r\n  cancelOrder?: string | OccEndpoint;\r\n\r\n  /**\r\n   * Endpoint for creating order return request\r\n   */\r\n  returnOrder?: string | OccEndpoint;\r\n\r\n  /**\r\n   * Endpoint for user's order return requests\r\n   */\r\n  orderReturns?: string | OccEndpoint;\r\n\r\n  /**\r\n   * Endpoint for order return request details\r\n   */\r\n  orderReturnDetail?: string | OccEndpoint;\r\n\r\n  /**\r\n   * Endpoint for cancelling return request\r\n   */\r\n  cancelReturn?: string | OccEndpoint;\r\n}\r\n"]}