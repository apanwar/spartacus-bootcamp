{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/core/src/config/utils/deep-merge.ts","ng://@spartacus/core/src/config/config.module.ts","ng://@spartacus/core/src/anonymous-consents/config/default-anonymous-consents-config.ts","ng://@spartacus/core/src/auth/config/default-auth-config.ts","ng://@spartacus/core/src/occ/utils/interceptor-util.ts","ng://@spartacus/core/src/state/utils/entity/entity.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.action.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.reducer.ts","ng://@spartacus/core/src/state/utils/loader/loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity/entity.reducer.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.reducer.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.action.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.action.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity/entity.selectors.ts","ng://@spartacus/core/src/state/utils/get-state-slice.ts","ng://@spartacus/core/src/auth/store/actions/client-token.action.ts","ng://@spartacus/core/src/auth/store/auth-state.ts","ng://@spartacus/core/src/auth/store/actions/login-logout.action.ts","ng://@spartacus/core/src/auth/store/actions/user-token.action.ts","ng://@spartacus/core/src/auth/store/selectors/feature.selector.ts","ng://@spartacus/core/src/auth/store/selectors/client-token.selectors.ts","ng://@spartacus/core/src/auth/store/selectors/user-token.selectors.ts","ng://@spartacus/core/src/auth/facade/auth.service.ts","ng://@spartacus/core/src/occ/utils/occ-constants.ts","ng://@spartacus/core/src/auth/services/client-error/client-error-handling.service.ts","ng://@spartacus/core/src/window/window-ref.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url-parsing.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/path-utils.ts","ng://@spartacus/core/src/routing/configurable-routes/config/routing-config.ts","ng://@spartacus/core/src/routing/configurable-routes/routing-config.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/semantic-path.service.ts","ng://@spartacus/core/src/routing/store/actions/router.action.ts","ng://@spartacus/core/src/routing/store/selectors/routing.selector.ts","ng://@spartacus/core/src/routing/store/routing-state.ts","ng://@spartacus/core/src/routing/facade/routing.service.ts","ng://@spartacus/core/src/auth/services/user-error/user-error-handling.service.ts","ng://@spartacus/core/src/auth/http-interceptors/auth-error.interceptor.ts","ng://@spartacus/core/src/config/utils/dynamic-template.ts","ng://@spartacus/core/src/site-context/config/context-config-utils.ts","ng://@spartacus/core/src/state/config/state-config.ts","ng://@spartacus/core/src/site-context/config/site-context-config.ts","ng://@spartacus/core/src/site-context/store/actions/base-site.action.ts","ng://@spartacus/core/src/site-context/store/actions/currencies.action.ts","ng://@spartacus/core/src/site-context/store/actions/languages.action.ts","ng://@spartacus/core/src/site-context/store/selectors/site-context.selector.ts","ng://@spartacus/core/src/site-context/store/state.ts","ng://@spartacus/core/src/site-context/store/selectors/base-site.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/currencies.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/languages.selectors.ts","ng://@spartacus/core/src/site-context/facade/base-site.service.ts","ng://@spartacus/core/src/site-context/providers/context-ids.ts","ng://@spartacus/core/src/occ/adapters/cart/custom.encoder.ts","ng://@spartacus/core/src/occ/config/occ-config.ts","ng://@spartacus/core/src/occ/services/occ-endpoints.service.ts","ng://@spartacus/core/src/occ/occ-models/occ-endpoints.model.ts","ng://@spartacus/core/src/auth/http-interceptors/client-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/user-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/token-revocation.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/index.ts","ng://@spartacus/core/src/state/config/default-state-config.ts","ng://@spartacus/core/src/state/reducers/storage-sync.reducer.ts","ng://@spartacus/core/src/state/reducers/transfer-state.reducer.ts","ng://@spartacus/core/src/state/reducers/index.ts","ng://@spartacus/core/src/state/state.module.ts","ng://@spartacus/core/src/util/serialization-utils.ts","ng://@spartacus/core/src/auth/config/auth-config.ts","ng://@spartacus/core/src/auth/services/client-authentication/client-authentication-token.service.ts","ng://@spartacus/core/src/auth/store/effects/client-token.effect.ts","ng://@spartacus/core/src/auth/services/user-authentication/user-authentication-token.service.ts","ng://@spartacus/core/src/auth/store/effects/user-token.effect.ts","ng://@spartacus/core/src/auth/store/effects/index.ts","ng://@spartacus/core/src/auth/store/reducers/user-token.reducer.ts","ng://@spartacus/core/src/auth/store/reducers/index.ts","ng://@spartacus/core/src/auth/store/auth-store.module.ts","ng://@spartacus/core/src/model/address.model.ts","ng://@spartacus/core/src/model/cart.model.ts","ng://@spartacus/core/src/model/cms.model.ts","ng://@spartacus/core/src/model/consent.model.ts","ng://@spartacus/core/src/model/image.model.ts","ng://@spartacus/core/src/model/product.model.ts","ng://@spartacus/core/src/auth/auth.module.ts","ng://@spartacus/core/src/auth/guards/auth-redirect.service.ts","ng://@spartacus/core/src/auth/guards/auth.guard.ts","ng://@spartacus/core/src/auth/guards/not-auth.guard.ts","ng://@spartacus/core/src/model/product-interest.model.ts","ng://@spartacus/core/src/cms/config/cms-config.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-state.ts","ng://@spartacus/core/src/anonymous-consents/store/actions/anonymous-consents.action.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/feature.selector.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-templates.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-ui.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consents.selectors.ts","ng://@spartacus/core/src/anonymous-consents/facade/anonymous-consents.service.ts","ng://@spartacus/core/src/asm/connectors/asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/default-occ-asm-config.ts","ng://@spartacus/core/src/asm/config/asm-config.ts","ng://@spartacus/core/src/asm/connectors/converters.ts","ng://@spartacus/core/src/util/converter.service.ts","ng://@spartacus/core/src/occ/adapters/asm/occ-asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/asm-occ.module.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/cart/converters.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.adapter.ts","ng://@spartacus/core/src/product/connectors/product/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/converters/occ-cart-normalizer.ts","ng://@spartacus/core/src/occ/adapters/cart/default-occ-cart-config.ts","ng://@spartacus/core/src/cart/connectors/entry/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-voucher.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-save-cart.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/cart-occ.module.ts","ng://@spartacus/core/src/checkout/connectors/checkout/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout.adapter.ts","ng://@spartacus/core/src/checkout/connectors/delivery/converters.ts","ng://@spartacus/core/src/user/connectors/address/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-payment.adapter.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/converters/occ-order-normalizer.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/checkout-occ.module.ts","ng://@spartacus/core/src/cms/connectors/page/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-component.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/converters/occ-cms-page-normalizer.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/cms-occ.module.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-image-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-reference-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-search-page-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-references-list-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-name-normalizer.ts","ng://@spartacus/core/src/product/connectors/references/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-search.adapter.ts","ng://@spartacus/core/src/occ/utils/occ-fields.ts","ng://@spartacus/core/src/occ/services/occ-fields.service.ts","ng://@spartacus/core/src/product/model/product-scope.ts","ng://@spartacus/core/src/occ/services/occ-requests-optimizer.service.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product.adapter.ts","ng://@spartacus/core/src/product/connectors/product/product.adapter.ts","ng://@spartacus/core/src/product/connectors/references/product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/product-search.adapter.ts","ng://@spartacus/core/src/occ/adapters/product/default-occ-product-config.ts","ng://@spartacus/core/src/occ/adapters/product/product-occ.module.ts","ng://@spartacus/core/src/site-context/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/site-context/occ-site.adapter.ts","ng://@spartacus/core/src/site-context/connectors/site.adapter.ts","ng://@spartacus/core/src/occ/adapters/site-context/default-occ-site-context-config.ts","ng://@spartacus/core/src/site-context/facade/currency.service.ts","ng://@spartacus/core/src/site-context/facade/language.service.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context.interceptor.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context-occ.module.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/default-occ-store-finder-config.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.connector.ts","ng://@spartacus/core/src/store-finder/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/store-finder/occ-store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/store-finder-occ.module.ts","ng://@spartacus/core/src/user/connectors/consent/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-address.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/order/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-order.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user.adapter.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/user/connectors/address/user-address.adapter.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/order/user-order.adapter.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/user.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/default-occ-user-config.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.adapter.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-customer-coupon.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/converters.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.connector.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-notification-preference.adapter.ts","ng://@spartacus/core/src/user/connectors/interests/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-interests.adapter.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-user-interests-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-return-request-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/user-occ.module.ts","ng://@spartacus/core/src/occ/config-loader/java-reg-exp-converter.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.ts","ng://@spartacus/core/src/ssr/ssr.providers.ts","ng://@spartacus/core/src/occ/config-loader/occ-loaded-config-converter.ts","ng://@spartacus/core/src/occ/config-loader/occ-sites-config-loader.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.service.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.module.ts","ng://@spartacus/core/src/occ/config/config-from-meta-tag-factory.ts","ng://@spartacus/core/src/occ/config/default-occ-config.ts","ng://@spartacus/core/src/occ/config/occ-config-validator.ts","ng://@spartacus/core/src/occ/interceptors/with-credentials.interceptor.ts","ng://@spartacus/core/src/occ/occ-models/occ.models.ts","ng://@spartacus/core/src/config/config-validator/config-validator.ts","ng://@spartacus/core/src/occ/occ.module.ts","ng://@spartacus/core/src/occ/services/loading-scopes.service.ts","ng://@spartacus/core/src/anonymous-consents/config/anonymous-consents-config.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/anonymous-consents-interceptor.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/index.ts","ng://@spartacus/core/src/event/utils/merging-subject.ts","ng://@spartacus/core/src/event/event.service.ts","ng://@spartacus/core/src/util/create-from.ts","ng://@spartacus/core/src/state/event/state-event.service.ts","ng://@spartacus/core/src/state/services/state-persistence.service.ts","ng://@spartacus/core/src/process/store/selectors/process.selectors.ts","ng://@spartacus/core/src/process/store/selectors/feature.selector.ts","ng://@spartacus/core/src/process/store/process-state.ts","ng://@spartacus/core/src/user/store/actions/billing-countries.action.ts","ng://@spartacus/core/src/user/store/actions/consignment-tracking.action.ts","ng://@spartacus/core/src/user/store/actions/delivery-countries.action.ts","ng://@spartacus/core/src/user/store/actions/forgot-password.action.ts","ng://@spartacus/core/src/user/store/user-state.ts","ng://@spartacus/core/src/user/store/actions/order-details.action.ts","ng://@spartacus/core/src/user/store/actions/payment-methods.action.ts","ng://@spartacus/core/src/user/store/actions/regions.action.ts","ng://@spartacus/core/src/user/store/actions/reset-password.action.ts","ng://@spartacus/core/src/user/store/actions/titles.action.ts","ng://@spartacus/core/src/user/store/actions/update-email.action.ts","ng://@spartacus/core/src/user/store/actions/update-password.action.ts","ng://@spartacus/core/src/user/store/actions/user-addresses.action.ts","ng://@spartacus/core/src/user/store/actions/user-consents.action.ts","ng://@spartacus/core/src/user/store/actions/user-details.action.ts","ng://@spartacus/core/src/user/store/actions/user-misc.action.ts","ng://@spartacus/core/src/user/store/actions/user-orders.action.ts","ng://@spartacus/core/src/user/store/actions/user-register.action.ts","ng://@spartacus/core/src/user/store/actions/customer-coupon.action.ts","ng://@spartacus/core/src/user/store/actions/notification-preference.action.ts","ng://@spartacus/core/src/user/store/actions/product-interests.actions.ts","ng://@spartacus/core/src/user/store/actions/order-return-request.action.ts","ng://@spartacus/core/src/user/store/selectors/feature.selector.ts","ng://@spartacus/core/src/user/store/selectors/billing-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/consignment-tracking.selectors.ts","ng://@spartacus/core/src/user/store/selectors/delivery-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-return-request.selectors.ts","ng://@spartacus/core/src/user/store/selectors/payment-methods.selectors.ts","ng://@spartacus/core/src/user/store/selectors/regions.selectors.ts","ng://@spartacus/core/src/user/store/selectors/reset-password.selectors.ts","ng://@spartacus/core/src/user/store/selectors/titles.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-addresses.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-consents.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-orders.selectors.ts","ng://@spartacus/core/src/user/store/selectors/customer-coupons.selectors.ts","ng://@spartacus/core/src/user/store/selectors/notification-preference.selectors.ts","ng://@spartacus/core/src/user/store/selectors/product-interests.selectors.ts","ng://@spartacus/core/src/user/facade/user-consent.service.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.connector.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/anonymous-consents.effect.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/index.ts","ng://@spartacus/core/src/site-context/connectors/site.connector.ts","ng://@spartacus/core/src/site-context/providers/context-service-map.ts","ng://@spartacus/core/src/site-context/config/base-site-config-validator.ts","ng://@spartacus/core/src/site-context/config/default-site-context-config.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.service.ts","ng://@spartacus/core/src/site-context/services/site-context-params.service.ts","ng://@spartacus/core/src/site-context/services/site-context-url-serializer.ts","ng://@spartacus/core/src/site-context/services/site-context-routes-handler.ts","ng://@spartacus/core/src/site-context/providers/context-service-providers.ts","ng://@spartacus/core/src/site-context/providers/site-context-params-providers.ts","ng://@spartacus/core/src/site-context/store/effects/languages.effect.ts","ng://@spartacus/core/src/site-context/store/effects/currencies.effect.ts","ng://@spartacus/core/src/site-context/store/effects/base-site.effect.ts","ng://@spartacus/core/src/site-context/store/effects/index.ts","ng://@spartacus/core/src/site-context/store/reducers/base-site.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/currencies.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/languages.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/index.ts","ng://@spartacus/core/src/site-context/store/site-context-store.module.ts","ng://@spartacus/core/src/site-context/site-context.module.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-banner.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-update.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/index.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-store.module.ts","ng://@spartacus/core/src/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/core/src/asm/config/default-asm-config.ts","ng://@spartacus/core/src/asm/store/asm-state.ts","ng://@spartacus/core/src/asm/connectors/asm.connector.ts","ng://@spartacus/core/src/asm/store/actions/asm-ui.action.ts","ng://@spartacus/core/src/asm/store/actions/customer.action.ts","ng://@spartacus/core/src/asm/store/actions/csagent-token.action.ts","ng://@spartacus/core/src/asm/store/effects/customer.effect.ts","ng://@spartacus/core/src/asm/store/effects/csagent-token.effect.ts","ng://@spartacus/core/src/asm/store/effects/index.ts","ng://@spartacus/core/src/asm/store/reducers/asm-ui.reducer.ts","ng://@spartacus/core/src/asm/store/reducers/index.ts","ng://@spartacus/core/src/asm/store/asm-store.module.ts","ng://@spartacus/core/src/global-message/models/global-message.model.ts","ng://@spartacus/core/src/global-message/models/response-status.model.ts","ng://@spartacus/core/src/global-message/config/global-message-config.ts","ng://@spartacus/core/src/global-message/store/actions/global-message.actions.ts","ng://@spartacus/core/src/global-message/store/selectors/feature.selector.ts","ng://@spartacus/core/src/global-message/store/global-message-state.ts","ng://@spartacus/core/src/global-message/store/selectors/global-message.selectors.ts","ng://@spartacus/core/src/global-message/facade/global-message.service.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/http-error.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-gateway/bad-gateway.handler.ts","ng://@spartacus/core/src/cart/utils/utils.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-request/bad-request.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/conflict/conflict.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/forbidden/forbidden.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/gateway/gateway-timeout.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/internal-server/internal-server.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/not-found/not-found.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unauthorized/unauthorized.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unknown-error/unknown-error.handler.ts","ng://@spartacus/core/src/util/applicable.ts","ng://@spartacus/core/src/global-message/http-interceptors/http-error.interceptor.ts","ng://@spartacus/core/src/global-message/http-interceptors/index.ts","ng://@spartacus/core/src/global-message/store/reducers/global-message.reducer.ts","ng://@spartacus/core/src/global-message/store/reducers/index.ts","ng://@spartacus/core/src/global-message/store/global-message-store.module.ts","ng://@spartacus/core/src/util/compare-equal-objects.ts","ng://@spartacus/core/src/global-message/store/effects/global-message.effect.ts","ng://@spartacus/core/src/global-message/config/default-global-message-config.ts","ng://@spartacus/core/src/global-message/global-message.module.ts","ng://@spartacus/core/src/asm/store/selectors/feature.selector.ts","ng://@spartacus/core/src/asm/store/selectors/asm-ui.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/customer-search.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/csagent-token.selectors.ts","ng://@spartacus/core/src/asm/facade/asm-auth.service.ts","ng://@spartacus/core/src/asm/services/csagent-error-handling.service.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-auth-error.interceptor.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-token.interceptor.ts","ng://@spartacus/core/src/asm/http-interceptors/index.ts","ng://@spartacus/core/src/asm/asm.module.ts","ng://@spartacus/core/src/asm/facade/asm.service.ts","ng://@spartacus/core/src/cms/page/page-meta.resolver.ts","ng://@spartacus/core/src/util/regex-pattern.ts","ng://@spartacus/core/src/cart/store/multi-cart-state.ts","ng://@spartacus/core/src/cart/store/selectors/multi-cart.selector.ts","ng://@spartacus/core/src/cart/store/actions/cart-entry.action.ts","ng://@spartacus/core/src/cart/store/actions/cart-voucher.action.ts","ng://@spartacus/core/src/cart/store/actions/cart.action.ts","ng://@spartacus/core/src/cart/store/actions/multi-cart.action.ts","ng://@spartacus/core/src/cart/store/actions/wish-list.action.ts","ng://@spartacus/core/src/cart/facade/multi-cart.service.ts","ng://@spartacus/core/src/cart/facade/active-cart.service.ts","ng://@spartacus/core/src/util/withdraw-on.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-entry.effect.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-voucher.effect.ts","ng://@spartacus/core/src/checkout/store/actions/address-verification.action.ts","ng://@spartacus/core/src/checkout/store/actions/card-types.action.ts","ng://@spartacus/core/src/checkout/store/checkout-state.ts","ng://@spartacus/core/src/checkout/store/actions/checkout.action.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart.effect.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.connecter.ts","ng://@spartacus/core/src/cart/store/effects/wish-list.effect.ts","ng://@spartacus/core/src/cart/store/reducers/multi-cart.reducer.ts","ng://@spartacus/core/src/cart/store/reducers/index.ts","ng://@spartacus/core/src/cart/event/cart.events.ts","ng://@spartacus/core/src/cart/event/cart-event.builder.ts","ng://@spartacus/core/src/cart/event/cart-event.module.ts","ng://@spartacus/core/src/cms/store/cms-state.ts","ng://@spartacus/core/src/cms/store/actions/components.action.ts","ng://@spartacus/core/src/cms/store/actions/navigation-entry-item.action.ts","ng://@spartacus/core/src/cms/store/actions/page.action.ts","ng://@spartacus/core/src/cms/store/selectors/feature.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/components.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/navigation-entry-item.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/page.selectors.ts","ng://@spartacus/core/src/cms/utils/cms-utils.ts","ng://@spartacus/core/src/cms/model/page.model.ts","ng://@spartacus/core/src/cms/facade/cms.service.ts","ng://@spartacus/core/src/cart/services/cart-page-meta.resolver.ts","ng://@spartacus/core/src/cart/services/multi-cart-state-persistence.service.ts","ng://@spartacus/core/src/cart/store/effects/multi-cart.effect.ts","ng://@spartacus/core/src/cart/store/multi-cart-store.module.ts","ng://@spartacus/core/src/cart/cart.module.ts","ng://@spartacus/core/src/cart/config/cart-config.ts","ng://@spartacus/core/src/cart/facade/cart-voucher.service.ts","ng://@spartacus/core/src/user/facade/user.service.ts","ng://@spartacus/core/src/cart/services/cart-config.service.ts","ng://@spartacus/core/src/cart/facade/selective-cart.service.ts","ng://@spartacus/core/src/cart/facade/wish-list.service.ts","ng://@spartacus/core/src/i18n/translation.service.ts","ng://@spartacus/core/src/checkout/services/checkout-page-meta.resolver.ts","ng://@spartacus/core/src/checkout/store/reducers/address-verification.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/card-types.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/checkout.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/index.ts","ng://@spartacus/core/src/user/connectors/address/user-address.connector.ts","ng://@spartacus/core/src/checkout/store/effects/address-verification.effect.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.connector.ts","ng://@spartacus/core/src/checkout/store/effects/card-types.effect.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.connector.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.connector.ts","ng://@spartacus/core/src/checkout/store/effects/checkout.effect.ts","ng://@spartacus/core/src/checkout/store/effects/index.ts","ng://@spartacus/core/src/checkout/store/checkout-store.module.ts","ng://@spartacus/core/src/checkout/checkout.module.ts","ng://@spartacus/core/src/checkout/store/selectors/checkout.selectors.ts","ng://@spartacus/core/src/checkout/store/selectors/address-verification.selectors.ts","ng://@spartacus/core/src/checkout/store/selectors/card-types.selectors.ts","ng://@spartacus/core/src/checkout/facade/checkout.service.ts","ng://@spartacus/core/src/checkout/facade/checkout-delivery.service.ts","ng://@spartacus/core/src/checkout/facade/checkout-payment.service.ts","ng://@spartacus/core/src/cms/config/default-cms-config.ts","ng://@spartacus/core/src/cms/page/content-page-meta.resolver.ts","ng://@spartacus/core/src/cms/page/page.module.ts","ng://@spartacus/core/src/util/buffer-debounce-time.ts","ng://@spartacus/core/src/config/test-config.module.ts","ng://@spartacus/core/src/config/utils/get-cookie.ts","ng://@spartacus/core/src/config/config-validator/config-validator.module.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.module.ts","ng://@spartacus/core/src/cms/config/cms-structure.config.ts","ng://@spartacus/core/src/cms/services/cms-structure-config.service.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.connector.ts","ng://@spartacus/core/src/cms/store/effects/components.effect.ts","ng://@spartacus/core/src/util/glob-utils.ts","ng://@spartacus/core/src/util/glob.service.ts","ng://@spartacus/core/src/routing/services/url-matcher.service.ts","ng://@spartacus/core/src/routing/configurable-routes/configurable-routes.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/product-url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.module.ts","ng://@spartacus/core/src/routing/external-routes/external-routes-config.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.guard.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.providers.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.service.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.module.ts","ng://@spartacus/core/src/routing/models/page-context.model.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.service.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.guard.ts","ng://@spartacus/core/src/routing/store/effects/router.effect.ts","ng://@spartacus/core/src/routing/store/effects/index.ts","ng://@spartacus/core/src/routing/store/reducers/router.reducer.ts","ng://@spartacus/core/src/routing/routing.module.ts","ng://@spartacus/core/src/routing/url-matcher/default-url-matcher.ts","ng://@spartacus/core/src/cms/store/effects/navigation-entry-item.effect.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.connector.ts","ng://@spartacus/core/src/cms/store/effects/page.effect.ts","ng://@spartacus/core/src/cms/store/effects/index.ts","ng://@spartacus/core/src/cms/store/reducers/components.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/navigation-entry-item.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-data.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-index.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/index.ts","ng://@spartacus/core/src/cms/store/cms-store.module.ts","ng://@spartacus/core/src/cms/cms.module.ts","ng://@spartacus/core/src/cms/facade/page-meta.service.ts","ng://@spartacus/core/src/smart-edit/services/smart-edit.service.ts","ng://@spartacus/core/src/cms/services/dynamic-attribute.service.ts","ng://@spartacus/core/src/features-config/config/features-config.ts","ng://@spartacus/core/src/features-config/utils/feature-config-utils.ts","ng://@spartacus/core/src/features-config/services/feature-config.service.ts","ng://@spartacus/core/src/features-config/directives/feature-level.directive.ts","ng://@spartacus/core/src/features-config/directives/feature.directive.ts","ng://@spartacus/core/src/features-config/features-config.module.ts","ng://@spartacus/core/src/i18n/date.pipe.ts","ng://@spartacus/core/src/i18n/translate.pipe.ts","ng://@spartacus/core/src/i18n/config/i18n-config.ts","ng://@spartacus/core/src/i18n/translation-chunk.service.ts","ng://@spartacus/core/src/i18n/config/default-i18n-config.ts","ng://@spartacus/core/src/i18n/i18next/i18next-init.ts","ng://@spartacus/core/src/i18n/i18next/i18next-providers.ts","ng://@spartacus/core/src/i18n/i18next/i18next-translation.service.ts","ng://@spartacus/core/src/i18n/i18n.module.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.pipe.ts","ng://@spartacus/core/src/i18n/testing/mock-translation.service.ts","ng://@spartacus/core/src/i18n/testing/mock-date.pipe.ts","ng://@spartacus/core/src/i18n/testing/i18n-testing.module.ts","ng://@spartacus/core/src/kyma/config/kyma-config.ts","ng://@spartacus/core/src/kyma/store/kyma-state.ts","ng://@spartacus/core/src/kyma/store/actions/open-id-token.action.ts","ng://@spartacus/core/src/kyma/store/selectors/feature.selector.ts","ng://@spartacus/core/src/kyma/store/selectors/open-id-token.selectors.ts","ng://@spartacus/core/src/kyma/facade/kyma.service.ts","ng://@spartacus/core/src/kyma/config/default-kyma-config.ts","ng://@spartacus/core/src/kyma/services/open-id-token/open-id-token.service.ts","ng://@spartacus/core/src/kyma/store/effects/open-id-token.effect.ts","ng://@spartacus/core/src/kyma/store/effects/index.ts","ng://@spartacus/core/src/kyma/store/reducers/index.ts","ng://@spartacus/core/src/kyma/store/kyma-store.module.ts","ng://@spartacus/core/src/kyma/kyma.module.ts","ng://@spartacus/core/src/personalization/config/default-personalization-config.ts","ng://@spartacus/core/src/personalization/config/personalization-config.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-id.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-time.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/index.ts","ng://@spartacus/core/src/personalization/personalization.module.ts","ng://@spartacus/core/src/personalization/services/personalization-context.service.ts","ng://@spartacus/core/src/process/store/reducers/index.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.actions.ts","ng://@spartacus/core/src/process/store/process-store.module.ts","ng://@spartacus/core/src/process/process.module.ts","ng://@spartacus/core/src/product/connectors/product/product.connector.ts","ng://@spartacus/core/src/product/connectors/references/product-references.connector.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.connector.ts","ng://@spartacus/core/src/product/connectors/search/product-search.connector.ts","ng://@spartacus/core/src/product/store/actions/product-references.action.ts","ng://@spartacus/core/src/product/store/actions/product-reviews.action.ts","ng://@spartacus/core/src/product/store/actions/product-search.action.ts","ng://@spartacus/core/src/product/store/actions/product.action.ts","ng://@spartacus/core/src/product/store/product-state.ts","ng://@spartacus/core/src/product/store/selectors/feature.selector.ts","ng://@spartacus/core/src/product/store/selectors/product-references.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product-reviews.selectors.ts","ng://@spartacus/core/src/product/store/reducers/product-search.reducer.ts","ng://@spartacus/core/src/product/store/selectors/product-search.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product.selectors.ts","ng://@spartacus/core/src/product/facade/product-reference.service.ts","ng://@spartacus/core/src/product/facade/product-review.service.ts","ng://@spartacus/core/src/product/facade/product-search.service.ts","ng://@spartacus/core/src/product/services/product-loading.service.ts","ng://@spartacus/core/src/product/facade/product.service.ts","ng://@spartacus/core/src/product/facade/searchbox.service.ts","ng://@spartacus/core/src/product/services/category-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/coupon-search-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/product-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/search-page-meta.resolver.ts","ng://@spartacus/core/src/product/store/effects/product-references.effect.ts","ng://@spartacus/core/src/product/store/effects/product-reviews.effect.ts","ng://@spartacus/core/src/product/store/effects/product-search.effect.ts","ng://@spartacus/core/src/product/store/effects/product.effect.ts","ng://@spartacus/core/src/product/store/effects/index.ts","ng://@spartacus/core/src/product/store/reducers/product-references.reducer.ts","ng://@spartacus/core/src/product/store/reducers/product-reviews.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/scoped-loader.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.reducer.ts","ng://@spartacus/core/src/product/store/reducers/index.ts","ng://@spartacus/core/src/product/store/product-store.module.ts","ng://@spartacus/core/src/product/product.module.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/cms-ticket.interceptor.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/index.ts","ng://@spartacus/core/src/smart-edit/smart-edit.module.ts","ng://@spartacus/core/src/ssr/ng-express-engine-decorator.ts","ng://@spartacus/core/src/store-finder/config/store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/store-finder-state.ts","ng://@spartacus/core/src/store-finder/store/actions/find-stores.action.ts","ng://@spartacus/core/src/store-finder/store/actions/view-all-stores.action.ts","ng://@spartacus/core/src/store-finder/store/selectors/feature.selector.ts","ng://@spartacus/core/src/store-finder/store/selectors/find-stores.selectors.ts","ng://@spartacus/core/src/store-finder/store/selectors/view-all-stores.selectors.ts","ng://@spartacus/core/src/store-finder/facade/store-finder.service.ts","ng://@spartacus/core/src/store-finder/facade/store-data.service.ts","ng://@spartacus/core/src/store-finder/service/external-js-file-loader.service.ts","ng://@spartacus/core/src/store-finder/service/google-map-renderer.service.ts","ng://@spartacus/core/src/store-finder/config/default-store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/reducers/index.ts","ng://@spartacus/core/src/store-finder/store/effects/find-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/view-all-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/index.ts","ng://@spartacus/core/src/store-finder/store/store-finder-store.module.ts","ng://@spartacus/core/src/store-finder/store-finder.module.ts","ng://@spartacus/core/src/user/connectors/user/user.connector.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.connector.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.connector.ts","ng://@spartacus/core/src/user/connectors/order/user-order.connector.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.connector.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.connector.ts","ng://@spartacus/core/src/user/facade/consent.service.ts","ng://@spartacus/core/src/user/facade/user-address.service.ts","ng://@spartacus/core/src/user/facade/user-order.service.ts","ng://@spartacus/core/src/user/facade/customer-coupon.service.ts","ng://@spartacus/core/src/user/facade/user-payment.service.ts","ng://@spartacus/core/src/user/facade/order-return-request.service.ts","ng://@spartacus/core/src/user/facade/user-notification-preference.service.ts","ng://@spartacus/core/src/user/facade/user-interests.service.ts","ng://@spartacus/core/src/user/store/reducers/billing-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/consignment-tracking.reducer.ts","ng://@spartacus/core/src/user/store/reducers/delivery-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/notification-preference.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/payment-methods.reducer.ts","ng://@spartacus/core/src/user/store/reducers/regions.reducer.ts","ng://@spartacus/core/src/user/store/reducers/reset-password.reducer.ts","ng://@spartacus/core/src/user/store/reducers/titles.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-addresses.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-consents.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-orders.reducer.ts","ng://@spartacus/core/src/user/store/reducers/customer-coupon.reducer.ts","ng://@spartacus/core/src/user/store/reducers/product-interests.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-return-request.reducer.ts","ng://@spartacus/core/src/user/store/reducers/index.ts","ng://@spartacus/core/src/user/store/effects/billing-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/clear-miscs-data.effect.ts","ng://@spartacus/core/src/user/store/effects/consignment-tracking.effect.ts","ng://@spartacus/core/src/user/store/effects/delivery-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/forgot-password.effect.ts","ng://@spartacus/core/src/user/store/effects/notification-preference.effect.ts","ng://@spartacus/core/src/user/store/effects/order-details.effect.ts","ng://@spartacus/core/src/user/store/effects/order-return-request.effect.ts","ng://@spartacus/core/src/user/store/effects/payment-methods.effect.ts","ng://@spartacus/core/src/user/store/effects/regions.effect.ts","ng://@spartacus/core/src/user/store/effects/reset-password.effect.ts","ng://@spartacus/core/src/user/store/effects/titles.effect.ts","ng://@spartacus/core/src/user/store/effects/update-email.effect.ts","ng://@spartacus/core/src/user/store/effects/update-password.effect.ts","ng://@spartacus/core/src/user/store/effects/user-addresses.effect.ts","ng://@spartacus/core/src/user/store/effects/user-consents.effect.ts","ng://@spartacus/core/src/user/store/effects/user-details.effect.ts","ng://@spartacus/core/src/user/store/effects/user-orders.effect.ts","ng://@spartacus/core/src/user/store/effects/user-register.effect.ts","ng://@spartacus/core/src/user/store/effects/customer-coupon.effect.ts","ng://@spartacus/core/src/user/store/effects/product-interests.effect.ts","ng://@spartacus/core/src/user/store/effects/index.ts","ng://@spartacus/core/src/user/store/user-store.module.ts","ng://@spartacus/core/src/user/user.module.ts","ng://@spartacus/core/src/model/shared.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__values","o","m","__read","ar","error","__spread","concat","isObject","item","isArray","deepMerge","sources","_i","source","shift","Date","_a","_b","_c","Config","InjectionToken","ConfigChunk","DefaultConfigChunk","provideConfig","config","defaultConfig","provide","useValue","multi","provideConfigFactory","configFactory","deps","useFactory","provideDefaultConfig","provideDefaultConfigFactory","configurationFactory","configChunks","defaultConfigChunks","ConfigModule","withConfig","ngModule","ConfigModule_1","providers","withConfigFactory","forRoot","Optional","NgModule","imports","CommonModule","declarations","defaultAnonymousConsentsConfig","anonymousConsents","registerConsent","showLegalDescriptionInDialog","requiredConsents","consentManagementPage","showAnonymousConsents","hideConsents","defaultAuthConfig","authentication","client_id","client_secret","backend","occ","endpoints","login","revoke","USE_CLIENT_TOKEN","InterceptorUtil","createHeader","headerName","interceptorParam","headers","append","JSON","stringify","HttpHeaders","set","removeHeader","request","updatedHeaders","delete","clone","getInterceptorParam","rawValue","get","parse","entityMeta","type","id","entityType","entityId","entityRemoveMeta","entityRemove","entityRemoveAllMeta","EntityRemoveAction","meta","EntityRemoveAllAction","loadMeta","loader","load","failMeta","successMeta","success","resetMeta","LoaderLoadAction","LoaderFailAction","LoaderSuccessAction","LoaderResetAction","entityLoadMeta","entityFailMeta","entitySuccessMeta","entityResetMeta","EntityLoadAction","EntityFailAction","EntitySuccessAction","payload","EntityLoaderResetAction","initialLoaderState","loading","undefined","loaderReducer","reducer","state","action","entity","newValue","loaderValueSelector","loaderLoadingSelector","loaderErrorSelector","loaderSuccessSelector","entityLoaderStateSelector","entities","entityValueSelector","initialEntityState","entityReducer","ids","partitionPayload","removed_1","newEntities","keys","reduce","acc","cur","includes","entityUpdates","subAction","newState","entityLoaderReducer","processesIncrementMeta","processesCountDiff","processesDecrementMeta","processesLoaderResetMeta","loaderResetMeta","ProcessesLoaderResetAction","ProcessesIncrementAction","ProcessesDecrementAction","entityProcessesLoaderResetMeta","entityProcessesIncrementMeta","entityProcessesDecrementMeta","EntityProcessesLoaderResetAction","EntityProcessesIncrementAction","EntityProcessesDecrementAction","isStableSelector","processesCount","hasPendingProcessesSelector","initialProcessesState","processesLoaderReducer","loaderState","isDevMode","console","initialProcessesLoaderState","entityHasPendingProcessesSelector","entityIsStableSelector","entityProcessesLoaderStateSelector","entityProcessesLoaderReducer","entitySelector","getStateSliceValue","split","previous","current","createShellObject","excludeKeys","shell","reduceRight","exclusionKeys","excludeKeys_1","excludeKeys_1_1","exclusionKey","getExclusionKeys","finalValue","exclusionKeys_1","exclusionKeys_1_1","exclusionChunksSplit","nestedTemp","currentChunk","handleExclusions","getStateSlice","stateSlices","keys_1","keys_1_1","currentKey","filterKeysByType","filter","LoadClientToken","_super","_this","StateUtils.LoaderLoadAction","LoadClientTokenFail","StateUtils.LoaderFailAction","LoadClientTokenSuccess","StateUtils.LoaderSuccessAction","LOGIN","LOGOUT","Login","Logout","LOAD_USER_TOKEN","LOAD_USER_TOKEN_SUCCESS","LoadUserToken","LoadUserTokenFail","LoadUserTokenSuccess","RefreshUserToken","RefreshUserTokenSuccess","RefreshUserTokenFail","RevokeUserToken","RevokeUserTokenSuccess","RevokeUserTokenFail","getAuthState","createFeatureSelector","clientToken","getClientTokenState","createSelector","ɵ0","getUserTokenSelector","token","userToken","getUserTokenState","ɵ1","getUserToken","AuthService","store","authorize","userId","password","dispatch","AuthActions.LoadUserToken","getOccUserId","pipe","map","invokeWithUserId","cb","take","subscribe","select","AuthSelectors.getUserToken","refreshUserToken","AuthActions.RefreshUserToken","refreshToken","refresh_token","authorizeWithToken","AuthActions.LoadUserTokenSuccess","logout","AuthActions.Logout","Boolean","AuthActions.RevokeUserToken","getClientToken","AuthSelectors.getClientTokenState","isClientTokenLoaded","AuthActions.LoadClientToken","refreshClientToken","isUserLoggedIn","access_token","Store","Injectable","providedIn","ClientErrorHandlingService","authService","handleExpiredClientToken","switchMap","handle","createNewRequestWithNewToken","setHeaders","Authorization","token_type","WindowRef","document","window","nativeWindow","sessionStorage","localStorage","fromEvent","debounceTime","startWith","distinctUntilChanged","of","Inject","args","DOCUMENT","UrlParsingService","router","getPrimarySegments","url","urlTree","parseUrl","_getPrimarySegmentsFromUrlTree","root","tree","segments","path","childrenSegments","children","PRIMARY_OUTLET","Router","isParam","segment","startsWith","getParamName","slice","RoutingConfig","useExisting","RoutingConfigService","getRouteConfig","routeName","routeConfig","routing","routes","warn","getLoadStrategy","loadStrategy","SemanticPathService","routingConfigService","urlParser","ROOT_URL","paths","transform","commands","commands_1","commands_1_1","command","isRouteCommand","partialResult","generateUrlPart","shouldOutputAbsolute","unshift","cxRoute","standarizeRouteCommand","findPathWithFillableParams","params","provideParamsValues","paramsMapping","paramName","mappedParamName","getMappedParamName","foundPath","find","getParams","every","RouteGoAction","RouteGoByUrlAction","RouteBackAction","RouteForwardAction","getRouterFeatureState","getRouterState","ɵ0$2","routingState","context","getPageContext","ɵ1$1","nextState","getNextPageContext","ɵ2","isNavigating","ɵ3","RoutingService","winRef","semanticPathService","RoutingSelector.getRouterState","RoutingSelector.getPageContext","RoutingSelector.getNextPageContext","RoutingSelector.isNavigating","go","query","extras","navigate","goByUrl","RoutingActions.RouteGoByUrlAction","back","referrer","location","origin","RoutingActions.RouteBackAction","forward","RoutingActions.RouteForwardAction","RoutingActions.RouteGoAction","UserErrorHandlingService","routingService","handleExpiredUserToken","handleExpiredToken","handleExpiredRefreshToken","oldToken","tap","AuthErrorInterceptor","userErrorHandlingService","clientErrorHandlingService","intercept","isClientTokenRequest","catchError","errResponse","HttpErrorResponse","status","isExpiredToken","throwError","isRequestMapping","resp","errors","DynamicTemplate","templateString","templateVariables","variableLabel","placeholder","RegExp","replace","getContextParameterValues","parameter","getContextParameterDefault","param","StorageSyncType","SiteContextConfig","LOAD_BASE_SITE","LoadBaseSite","LoadBaseSiteFail","LoadBaseSiteSuccess","SetActiveBaseSite","BaseSiteChange","LOAD_CURRENCIES","SET_ACTIVE_CURRENCY","CURRENCY_CHANGE","LoadCurrencies","LoadCurrenciesFail","LoadCurrenciesSuccess","SetActiveCurrency","CurrencyChange","LOAD_LANGUAGES","SET_ACTIVE_LANGUAGE","LANGUAGE_CHANGE","LoadLanguages","LoadLanguagesFail","LoadLanguagesSuccess","SetActiveLanguage","LanguageChange","getSiteContextState","baseSite","activeSite","getActiveBaseSite","ɵ0$3","details","getBaseSiteData","ɵ1$2","currenciesEntitiesSelector","activeCurrencySelector","activeCurrency","currencies","getCurrenciesState","ɵ2$1","getCurrenciesEntities","getActiveCurrency","isocode","getAllCurrencies","ɵ3$1","activeLanguageSelector","activeLanguage","languagesEntitiesSelector","getLanguagesState","languages","getLanguagesEntities","getActiveLanguage","getAllLanguages","BaseSiteService","getActive","SiteContextSelectors.getActiveBaseSite","active","getAll","setActive","activeBaseSite","SiteContextActions.SetActiveBaseSite","initialize","val","unsubscribe","SiteContextSelectors.getBaseSiteData","SiteContextActions.LoadBaseSite","CustomEncoder","encodeKey","encodeURIComponent","encodeValue","decodeKey","decodeURIComponent","decodeValue","OccConfig","OccEndpointsService","baseSiteService","getRawEndpoint","endpoint","baseUrl","getBaseEndpoint","prefix","getEndpoint","getUrl","urlParams","queryParams","scope","getEndpointForScope","forEach","httpParamsOptions","encoder","queryParamsFromEndpoint","fromString","httpParams_1","HttpParams","toString","endpointConfig","ClientTokenInterceptor","occEndpoints","UserTokenInterceptor","isOccUrl","TokenRevocationInterceptor","isTokenRevocationRequest","EMPTY","isTokenRevocationHeaderPresent","interceptors","HTTP_INTERCEPTORS","StateTransferType","StateConfig","defaultStateConfig","storageSync","localStorageKeyName","sessionStorageKeyName","getStorageSyncReducer","storageSyncConfig","INIT","UPDATE","rehydratedState","localStorageValue","readFromStorage","sessionStorageValue","rehydrate","localStorageStateSlices","LOCAL_STORAGE","persistToStorage","sessionStorageStateSlices","SESSION_STORAGE","configKey","storage","isSsr","setItem","storageValue","getItem","CX_KEY","makeStateKey","getTransferStateReducer","platformId","transferState","ssrTransfer","isPlatformBrowser","transferStateKeys","TRANSFER_STATE","authState","hasKey","cxKey","getBrowserTransferStateReducer","isPlatformServer","stateSlice","getServerTransferStateReducer","TRANSFER_STATE_META_REDUCER","STORAGE_SYNC_META_REDUCER","ɵ1$5","stateMetaReducers","PLATFORM_ID","TransferState","META_REDUCERS","StateModule","StateModule_1","UNKNOWN_ERROR","circularReplacer","seen","WeakSet","_key","has","add","makeErrorSerializable","Error","message","name","reason","stack","serializableError","statusText","AuthConfig","ClientAuthenticationTokenService","http","occEndpointsService","loadClientAuthenticationToken","Content-Type","post","HttpClient","ClientTokenEffect","actions$","clientAuthenticationTokenService","loadClientToken$","ofType","exhaustMap","AuthActions.LoadClientTokenSuccess","AuthActions.LoadClientTokenFail","Actions","Effect","UserAuthenticationTokenService","loadToken","encodeURI","UserTokenEffects","userTokenService","loadUserToken$","AuthActions.LOAD_USER_TOKEN","mergeMap","date","setSeconds","getSeconds","expires_in","expiration_time","toJSON","AuthActions.LoadUserTokenFail","login$","AuthActions.LOAD_USER_TOKEN_SUCCESS","AuthActions.Login","refreshUserToken$","AuthActions.RefreshUserTokenSuccess","AuthActions.RefreshUserTokenFail","revokeUserToken$","AuthActions.RevokeUserTokenSuccess","AuthActions.RevokeUserTokenFail","effects","initialState","getReducers","combineReducers","fromUserTokenReducer.reducer","reducerToken","reducerProvider","clearAuthState","AuthActions.LOGOUT","metaReducers","authStoreConfigFactory","auth.userToken.token.access_token","auth.userToken.token.token_type","auth.userToken.token.expires_in","auth.userToken.token.expiration_time","auth.userToken.token.scope","auth.userToken.token.userId","CountryType","PromotionLocation","PageType","CmsBannerCarouselEffect","ANONYMOUS_CONSENT_STATUS","ImageType","VariantType","PriceType","VariantQualifier","AuthStoreModule","HttpClientModule","StoreModule","forFeature","EffectsModule","AuthModule","AuthModule_1","AuthRedirectService","ignoredUrls","Set","redirect","redirectUrl","lastAuthGuardNavigation","reportAuthGuard","getCurrentNavigation","navigationId","reportNotAuthGuard","initialUrl","navigation","serializeUrl","finalUrl","AuthGuard","authRedirectService","canActivate","NotAuthGuard","NotificationType","DeferLoadingStrategy","ANONYMOUS_CONSENTS","LoadAnonymousConsentTemplates","LoadAnonymousConsentTemplatesSuccess","LoadAnonymousConsentTemplatesFail","ResetLoadAnonymousConsentTemplates","StateUtils.LoaderResetAction","GetAllAnonymousConsents","GetAnonymousConsent","templateCode","SetAnonymousConsents","GiveAnonymousConsent","WithdrawAnonymousConsent","ToggleAnonymousConsentsBannerDissmissed","dismissed","ToggleAnonymousConsentTemplatesUpdated","updated","getAnonymousConsentState","templates","getAnonymousConsentTemplatesState","ɵ0$8","getAnonymousConsentTemplatesValue","StateUtils.loaderValueSelector","getAnonymousConsentTemplatesLoading","StateUtils.loaderLoadingSelector","getAnonymousConsentTemplatesSuccess","StateUtils.loaderSuccessSelector","getAnonymousConsentTemplatesError","StateUtils.loaderErrorSelector","getAnonymousConsentTemplate","template","getAnonymousConsentTemplatesUpdate","ui","bannerDismissed","getAnonymousConsentsBannerDismissed","ɵ1$6","getAnonymousConsents","consents","getAnonymousConsentByTemplateCode","consent","AnonymousConsentsService","loadTemplates","AnonymousConsentsActions.LoadAnonymousConsentTemplates","getTemplates","loadIfMissing","iif","AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue","withLatestFrom","getLoadTemplatesLoading","getTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading","getLoadTemplatesSuccess","AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess","getLoadTemplatesError","AnonymousConsentsSelectors.getAnonymousConsentTemplatesError","resetLoadTemplatesState","AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates","getConsents","AnonymousConsentsSelectors.getAnonymousConsents","setConsents","AnonymousConsentsActions.SetAnonymousConsents","getConsent","templateId","authenticated","AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode","giveConsent","AnonymousConsentsActions.GiveAnonymousConsent","giveAllConsents","isConsentGiven","consentState","GIVEN","withdrawConsent","AnonymousConsentsActions.WithdrawAnonymousConsent","withdrawAllConsents","isConsentWithdrawn","WITHDRAWN","toggleBannerDismissed","AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed","toggleTemplatesUpdated","isBannerDismissed","AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed","getTemplatesUpdated","AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate","AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated","isBannerVisible","combineLatest","detectUpdatedTemplates","currentTemplates","newTemplates","newTemplate","currentTemplate","version","serializeAndEncode","serialized","decodeAndDeserialize","rawConsents","decoded","consentsUpdated","newConsents","previousConsents","defaultOccAsmConfig","asmCustomerSearch","AsmConfig","CUSTOMER_SEARCH_PAGE_NORMALIZER","ConverterService","injector","converters","Map","getConverters","injectionToken","hasConverters","pipeable","model","convertSource","observable","pipeableMany","convertMany","convert","converter","Injector","OccAsmAdapter","converterService","customerSearch","options","pageSize","AsmOccModule","AsmAdapter","useClass","CART_NORMALIZER","PRODUCT_NORMALIZER","OccCartNormalizer","entries","entry","product","removeDuplicatePromotions","potentialOrderPromotions","removeDuplicateItems","potentialProductPromotions","appliedOrderPromotions","appliedProductPromotions","itemList","a","el","indexOf","defaultOccCartConfig","carts","cart","createCart","addEntries","updateEntries","removeEntries","addEmail","deleteCart","cartVoucher","saveCart","CART_MODIFICATION_NORMALIZER","OccCartEntryAdapter","cartId","productCode","quantity","toAdd","code","qty","update","entryNumber","pickupStore","patch","remove","CART_VOUCHER_NORMALIZER","OccCartVoucherAdapter","getCartVoucherEndpoint","getHeaders","voucherId","OccCartAdapter","loadAll","pluck","oldCartId","toMergeCartGuid","email","httpParams","put","SAVE_CART_NORMALIZER","OccSaveCartAdapter","saveCartName","saveCartDescription","CartOccModule","CartAdapter","CartEntryAdapter","CartVoucherAdapter","SaveCartAdapter","ORDER_NORMALIZER","OccCheckoutAdapter","subEndpoint","orderEndpoint","placeOrder","loadCheckoutDetails","clearCheckoutDeliveryAddress","clearCheckoutDeliveryMode","DELIVERY_MODE_NORMALIZER","ADDRESS_NORMALIZER","ADDRESS_SERIALIZER","ADDRESS_VALIDATION_NORMALIZER","OccCheckoutDeliveryAdapter","getCartEndpoint","cartEndpoint","createAddress","address","setAddress","addressId","setMode","deliveryModeId","getMode","getSupportedModes","PAYMENT_DETAILS_NORMALIZER","PAYMENT_DETAILS_SERIALIZER","CARD_TYPE_NORMALIZER","OccCheckoutPaymentAdapter","DOMParser","domparser","paymentDetails","getProviderSubInfo","data","labelsMap","convertToMap","mappingLabels","postUrl","parameters","getParamsForPaymentProvider","sub","createSubWithProvider","response","extractPaymentDetailsFromHtml","fromPaymentProvider","defaultPayment","createDetailsWithParameters","paymentDetailsId","loadCardTypes","cardTypeList","cardTypes","Accept","responseType","accountHolderName","cardType","cardNumber","expiryMonth","expiryYear","cvn","billingAddress","country","firstName","lastName","line1","line2","town","region","isocodeShort","postalCode","html","inputs","parseFromString","getElementsByTagName","values","input","getAttribute","paramList","OccOrderNormalizer","convertOrderEntry","consignments","consignment","orderEntry","unconsignedEntries","CheckoutOccModule","CheckoutAdapter","CheckoutDeliveryAdapter","CheckoutPaymentAdapter","CMS_PAGE_NORMALIZER","OccCmsPageAdapter","pageContext","fields","getPagesRequestParams","getPagesEndpoint","pageType","CONTENT_PAGE","CMS_COMPONENT_NORMALIZER","OccCmsComponentAdapter","getComponentEndPoint","findComponentsByIds","currentPage","sort","requestParams","getContextParams","getPaginationParams","getComponentsEndpoint","findComponentsByIdsLegacy","idList","PRODUCT_PAGE","CATEGORY_PAGE","categoryCode","CATALOG_PAGE","catalogCode","CmsConfig","OccCmsPageNormalizer","normalizePageData","normalizePageSlotData","normalizePageComponentData","normalizeComponentData","page","loadTime","now","typeCode","title","pageId","uid","slots","properties","contentSlots","contentSlot","slot","position","components","_d","component","_e","e_3","_f","comp","flexType","e_5","CmsPageAdapter","CmsOccModule","CmsComponentAdapter","ProductImageNormalizer","images","normalize","source_1","source_1_1","image","isList","imageType","imageContainer","galleryIndex","targetImage","normalizeImageUrl","format","test","media","ProductReferenceNormalizer","productReferences","references","reference","referenceType","OccProductSearchPageNormalizer","DEFAULT_TOP_VALUES","normalizeFacets","products","normalizeFacetValues","normalizeUselessFacets","facets","facet","pagination","totalResults","visible","selected","count","facetSource","topValues","facetTarget","getOwnPropertySymbols","propertyIsEnumerable","__rest","topValueCount","OccProductReferencesListNormalizer","ProductNameNormalizer","nameHtml","PRODUCT_REFERENCES_NORMALIZER","OccProductReferencesAdapter","PRODUCT_REVIEW_NORMALIZER","PRODUCT_REVIEW_SERIALIZER","OccProductReviewsAdapter","maxCount","review","URLSearchParams","headline","comment","rating","alias","PRODUCT_SEARCH_PAGE_NORMALIZER","PRODUCT_SUGGESTION_NORMALIZER","DEFAULT_SEARCH_CONFIG","OccProductSearchAdapter","search","searchConfig","getSearchEndpoint","loadSuggestions","term","getSuggestionEndpoint","sortCode","max","mergeFields","parsedFields","parseFields","stringifyFields","subFields","join","optimizeFields","startIndex","substr","extractFields","getObjectPart","ProductScope","OccFieldsService","FIELDS_PARAM","getOptimalUrlGroups","models","groupedByUrls","splitFields","urlPart","scopedData","mergedUrls","_g","_h","group","getUrlWithFields","lo","urlWithFields","paramsMap","keyValue","nonFields","par","mergedFields","OccRequestsOptimizerService","occFields","scopedDataLoad","scopedDataWithUrls","dataFactory","groupedModelsSet","groupedModels","data$","data$_1","shareReplay","modelData","OccProductAdapter","requestsOptimizer","loadMany","scopedProduct","defaultOccProductConfig","default","list","attributes","variants","productReviews","productSearch","productSuggestions","loadingScopes","include","LIST","VARIANTS","ProductOccModule","ProductAdapter","ProductReferencesAdapter","ProductSearchAdapter","ProductReviewsAdapter","LANGUAGE_NORMALIZER","CURRENCY_NORMALIZER","COUNTRY_NORMALIZER","REGION_NORMALIZER","OccSiteAdapter","loadLanguages","languageList","loadCurrencies","currencyList","loadCountries","countryList","countries","loadRegions","countryIsoCode","isoCode","regionList","regions","loadBaseSite","urlSplits","siteList","baseSites","site","defaultOccSiteContextConfig","CurrencyService","SiteContextSelectors.getAllCurrencies","SiteContextActions.LoadCurrencies","currenies","SiteContextSelectors.getActiveCurrency","SiteContextActions.SetActiveCurrency","sessionCurrency","LanguageService","SiteContextSelectors.getAllLanguages","SiteContextActions.LoadLanguages","SiteContextSelectors.getActiveLanguage","SiteContextActions.SetActiveLanguage","sessionLanguage","SiteContextInterceptor","languageService","currencyService","activeLang","activeCurr","setParams","lang","curr","SiteContextOccModule","SiteAdapter","defaultOccStoreFinderConfig","stores","storescounts","StoreFinderConnector","adapter","longitudeLatitude","radius","getCounts","loadCounts","storeId","StoreFinderAdapter","POINT_OF_SERVICE_NORMALIZER","STORE_FINDER_SEARCH_PAGE_NORMALIZER","STORE_COUNT_NORMALIZER","OccStoreFinderAdapter","callOccFindStores","countriesAndRegionsStoreCount","String","longitude","latitude","StoreFinderOccModule","CONSENT_TEMPLATE_NORMALIZER","OccAnonymousConsentTemplatesAdapter","loadAnonymousConsentTemplates","consentList","consentTemplates","OccUserAddressAdapter","addressList","addresses","verify","OccUserConsentAdapter","loadConsents","Cache-Control","consentTemplateId","consentTemplateVersion","consentCode","consentId","ORDER_HISTORY_NORMALIZER","CONSIGNMENT_TRACKING_NORMALIZER","ORDER_RETURN_REQUEST_NORMALIZER","ORDER_RETURN_REQUEST_INPUT_SERIALIZER","ORDER_RETURNS_NORMALIZER","OccUserOrderAdapter","orderCode","orderId","loadHistory","getConsignmentTracking","consignmentCode","cancel","cancelRequestInput","createReturnRequest","returnRequestInput","loadReturnRequestList","loadReturnRequestDetail","returnRequestCode","cancelReturnRequest","returnRequestModification","OccUserPaymentAdapter","methodList","payments","paymentMethodID","paymentDetailId","setDefault","titleCode","USER_NORMALIZER","USER_SERIALIZER","USER_SIGN_UP_SERIALIZER","TITLE_NORMALIZER","OccUserAdapter","user","register","registerGuest","guid","requestForgotPasswordEmail","userEmailAddress","resetPassword","newPassword","updateEmail","currentPassword","newUserId","updatePassword","oldPassword","loadTitles","titleList","titles","defaultOccUserConfig","userRegister","userForgotPassword","userResetPassword","userUpdateLoginId","userUpdatePassword","paymentDetailsAll","paymentDetail","orderHistory","orderDetail","anonymousConsentTemplates","consentDetail","addressDetail","addressVerification","consignmentTracking","customerCoupons","claimCoupon","couponNotification","notificationPreference","productInterests","getProductInterests","cancelOrder","returnOrder","orderReturns","orderReturnDetail","cancelReturn","CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER","OccCustomerCouponAdapter","getCustomerCoupons","newHttpHeader","turnOffNotification","couponCode","turnOnNotification","claimCustomerCoupon","NOTIFICATION_PREFERENCE_SERIALIZER","NOTIFICATION_PREFERENCE_NORMALIZER","UserNotificationPreferenceConnector","preferences","UserNotificationPreferenceAdapter","OccUserNotificationPreferenceAdapter","PRODUCT_INTERESTS_NORMALIZER","OccUserInterestsAdapter","getInterests","notificationType","headers$1","removeInterest","productInterestEntry","interestType","forkJoin","addInterest","OccUserInterestsNormalizer","results","OccReturnRequestNormalizer","returnEntries","UserOccModule","UserAdapter","UserAddressAdapter","UserConsentAdapter","AnonymousConsentTemplatesAdapter","UserPaymentAdapter","UserOrderAdapter","CustomerCouponAdapter","UserInterestsAdapter","JavaRegExpConverter","EXTRACT_JAVA_REGEXP_MODIFIERS","toJsRegExp","javaSyntax","parts","match","modifiers","jsSyntax","CONFIG_INITIALIZER","CONFIG_INITIALIZER_FORROOT_GUARD","SERVER_REQUEST_URL","SERVER_REQUEST_ORIGIN","OccLoadedConfigConverter","javaRegExpConverter","fromOccBaseSites","currentUrl","isCurrentBaseSite","getError","baseStore","getIsoCodes","defaultLanguage","defaultCurrency","urlParameters","getUrlParams","urlEncodingAttributes","toSiteContextConfig","toI18nConfig","i18n","fallbackLang","urlPatterns","findIndex","javaRegexp","jsRegexp","elements","defaultElement","moveToFirst","array","predicate","index","splice","OccSitesConfigLoader","baseEndpoint","EXTERNAL_CONFIG_TRANSFER_ID","OccConfigLoaderService","platform","sitesConfigLoader","serverRequestUrl","href","loadConfig","externalConfig","transfer","getConfigChunks","toPromise","rehydratedExternalConfig","chunks","shouldReturnI18nChunk","fallbackLangExists","initConfig","configLoader","scopes","OccConfigLoaderModule","OccConfigLoaderModule_1","occServerConfigFromMetaTagFactory","getMetaTagContent","mediaServerConfigFromMetaTagFactory","metaTag","getTag","content","defaultOccConfig","occConfigValidator","CONSENT_STATUS","Type","Fields61","Fields60","Fields59","Fields58","Fields57","Fields56","Fields55","Fields54","Fields53","Fields52","Fields51","Fields50","Fields49","Fields48","Fields47","Fields46","Fields45","Fields44","Fields43","Fields42","Fields41","Fields40","Fields39","Fields38","Fields37","Fields36","Fields35","Fields34","Fields33","Fields32","Fields31","Fields30","Fields29","Fields28","Fields27","Fields26","Fields25","Fields24","Fields23","Fields22","Fields21","Fields20","Fields19","Fields18","Fields17","SortEnum","Fields16","Fields15","Fields14","Fields13","Fields12","Fields11","Fields10","Fields9","Fields8","Fields7","Fields6","Fields5","Fields4","Fields3","Fields2","Fields1","Fields","Occ","WithCredentialsInterceptor","requiresWithCredentials","withCredentials","occConfig","useWithCredentials","ConfigValidatorToken","provideConfigValidator","configValidator","validateConfig","configValidators","configValidators_1","configValidators_1_1","warning","validate","OccModule","OccModule_1","LoadingScopesService","expand","scopesConfig","expandedScopes","includedScopes","includedScopes_1","e_1","includedScopes_1_1","includedScope","getMaxAge","maxAge","AnonymousConsentsConfig","AnonymousConsentsInterceptor","anonymousConsentsService","clonedRequest","handleRequest","event","HttpResponse","handleResponse","newRawConsents","giveRequiredConsents","givenConsents","givenConsents_1","givenConsents_1_1","MergingSubject","subscriptionsToSources","output$","Observable","consumer","bindAllSourcesToConsumer","unbindAllSourcesFromConsumer","share","bindSourceToConsumer","unbindSourceFromConsumer","subscriptionToSource","EventService","eventsMeta","eventType","source$","eventMeta","getEventMeta","mergingSubject","getValidatedEventStream","getInputSubject","inputSubject$","Subject","validateEventType","createEventMeta","createFrom","StateEventService","actionsSubject","eventService","mapping","getFromAction","createEvent","factory","ActionsSubject","StatePersistenceService","syncWithStorage","state$","context$","rxjs","storageType","exports","onRead","NO_STORAGE","getStorage","subscriptions","Subscription","generateKeyWithContext","getProcessStateFactory","processId","entityState","StateUtils.entityLoaderStateSelector","getProcessLoadingFactory","getProcessSuccessFactory","getProcessErrorFactory","LoadBillingCountries","LoadBillingCountriesFail","LoadBillingCountriesSuccess","LoadConsignmentTracking","LoadConsignmentTrackingFail","LoadConsignmentTrackingSuccess","ClearConsignmentTracking","LoadDeliveryCountries","LoadDeliveryCountriesFail","LoadDeliveryCountriesSuccess","ForgotPasswordEmailRequest","ForgotPasswordEmailRequestFail","ForgotPasswordEmailRequestSuccess","USER_CONSENTS","USER_PAYMENT_METHODS","USER_ORDERS","USER_ADDRESSES","USER_RETURN_REQUESTS","USER_ORDER_DETAILS","REGIONS","CUSTOMER_COUPONS","PRODUCT_INTERESTS","LoadOrderDetails","LoadOrderDetailsFail","LoadOrderDetailsSuccess","ClearOrderDetails","CancelOrder","StateUtils.EntityLoadAction","CancelOrderFail","StateUtils.EntityFailAction","CancelOrderSuccess","StateUtils.EntitySuccessAction","ResetCancelOrderProcess","StateUtils.EntityLoaderResetAction","LoadUserPaymentMethods","LoadUserPaymentMethodsFail","LoadUserPaymentMethodsSuccess","SetDefaultUserPaymentMethod","SetDefaultUserPaymentMethodFail","SetDefaultUserPaymentMethodSuccess","DeleteUserPaymentMethod","DeleteUserPaymentMethodFail","DeleteUserPaymentMethodSuccess","LoadRegions","LoadRegionsFail","LoadRegionsSuccess","ClearRegions","ResetPassword","ResetPasswordFail","ResetPasswordSuccess","LoadTitles","LoadTitlesFail","LoadTitlesSuccess","UpdateEmailAction","UpdateEmailSuccessAction","newUid","UpdateEmailErrorAction","ResetUpdateEmailAction","UpdatePassword","UpdatePasswordFail","UpdatePasswordSuccess","UpdatePasswordReset","LoadUserAddresses","LoadUserAddressesFail","LoadUserAddressesSuccess","AddUserAddress","AddUserAddressFail","AddUserAddressSuccess","UpdateUserAddress","UpdateUserAddressFail","UpdateUserAddressSuccess","DeleteUserAddress","DeleteUserAddressFail","DeleteUserAddressSuccess","LoadUserConsents","LoadUserConsentsFail","LoadUserConsentsSuccess","ResetLoadUserConsents","GiveUserConsent","GiveUserConsentFail","GiveUserConsentSuccess","consentTemplate","ResetGiveUserConsentProcess","TransferAnonymousConsent","WithdrawUserConsent","WithdrawUserConsentFail","WithdrawUserConsentSuccess","ResetWithdrawUserConsentProcess","LoadUserDetails","LoadUserDetailsFail","LoadUserDetailsSuccess","UpdateUserDetails","UpdateUserDetailsFail","UpdateUserDetailsSuccess","userUpdates","ResetUpdateUserDetails","ClearUserMiscsData","LoadUserOrders","LoadUserOrdersFail","LoadUserOrdersSuccess","ClearUserOrders","RegisterUser","RegisterUserFail","RegisterUserSuccess","ResetRegisterUserProcess","RegisterGuest","RegisterGuestFail","RegisterGuestSuccess","RemoveUser","RemoveUserFail","RemoveUserSuccess","RemoveUserReset","LoadCustomerCoupons","LoadCustomerCouponsFail","LoadCustomerCouponsSuccess","ResetLoadCustomerCoupons","SubscribeCustomerCoupon","SubscribeCustomerCouponFail","SubscribeCustomerCouponSuccess","ResetSubscribeCustomerCouponProcess","UnsubscribeCustomerCoupon","UnsubscribeCustomerCouponFail","UnsubscribeCustomerCouponSuccess","ResetUnsubscribeCustomerCouponProcess","ClaimCustomerCoupon","ClaimCustomerCouponFail","ClaimCustomerCouponSuccess","LoadNotificationPreferences","LoadNotificationPreferencesFail","LoadNotificationPreferencesSuccess","UpdateNotificationPreferences","UpdateNotificationPreferencesFail","UpdateNotificationPreferencesSuccess","ResetNotificationPreferences","ClearNotificationPreferences","LoadProductInterests","LoadProductInterestsFail","LoadProductInterestsSuccess","RemoveProductInterest","RemoveProductInterestSuccess","RemoveProductInterestFail","AddProductInterest","AddProductInterestSuccess","AddProductInterestFail","ResetAddInterestState","ResetRemoveInterestState","ClearProductInterests","CreateOrderReturnRequest","CreateOrderReturnRequestFail","CreateOrderReturnRequestSuccess","LoadOrderReturnRequest","LoadOrderReturnRequestFail","LoadOrderReturnRequestSuccess","CancelOrderReturnRequest","CancelOrderReturnRequestFail","CancelOrderReturnRequestSuccess","LoadOrderReturnRequestList","LoadOrderReturnRequestListFail","LoadOrderReturnRequestListSuccess","ClearOrderReturnRequest","ClearOrderReturnRequestList","ResetCancelReturnProcess","getUserState","billingCountries","getBillingCountriesState","ɵ0$b","getBillingCountriesEntites","ɵ1$7","entites","getAllBillingCountries","ɵ2$3","getConsignmentTrackingState","tracking","getDeliveryCountriesState","getDeliveryCountriesEntites","getAllDeliveryCountries","countrySelectorFactory","getOrderState","order","getOrderDetails","getOrderReturnRequestState","orderReturn","getOrderReturnRequest","getOrderReturnRequestLoading","getOrderReturnRequestSuccess","ɵ3$3","orderReturnList","getOrderReturnRequestListState","ɵ4","getOrderReturnRequestList","ɵ5","getPaymentMethodsState","getPaymentMethods","getPaymentMethodsLoading","getPaymentMethodsLoadedSuccess","getRegionsLoaderState","getAllRegions","getRegionsDataAndLoading","loaded","getRegionsCountry","getRegionsLoading","getRegionsLoaded","getResetPassword","getTitlesState","getTitlesEntites","getAllTitles","getAddressesLoaderState","getAddresses","getAddressesLoading","getAddressesLoadedSuccess","getConsentsState","getConsentsValue","getConsentByTemplateId","getConsentsLoading","getConsentsSuccess","getConsentsError","getDetailsState","account","getDetails","getOrdersState","orders","getOrdersLoaded","getOrders","getCustomerCouponsState","getCustomerCouponsLoaded","getCustomerCouponsLoading","getPreferencesLoaderState","notificationPreferences","getPreferences","getEnabledPreferences","enabled","getPreferencesLoading","getInterestsState","getInterestsLoading","UserConsentService","UserActions.LoadUserConsents","UsersSelectors.getConsentsValue","getConsentsResultLoading","getConsentsResultSuccess","UsersSelectors.getConsentsLoading","UsersSelectors.getConsentsSuccess","getConsentsResultError","UsersSelectors.getConsentsError","resetConsentsProcessState","UserActions.ResetLoadUserConsents","UsersSelectors.getConsentByTemplateId","currentConsent","consentGivenDate","consentWithdrawnDate","UserActions.GiveUserConsent","getGiveConsentResultLoading","getGiveConsentResultSuccess","getGiveConsentResultError","resetGiveConsentProcessState","UserActions.ResetGiveUserConsentProcess","UserActions.WithdrawUserConsent","getWithdrawConsentResultLoading","getWithdrawConsentResultSuccess","getWithdrawConsentResultError","resetWithdrawConsentProcessState","UserActions.ResetWithdrawUserConsentProcess","filterConsentTemplates","templateList","hideTemplateIds","updatedTemplateList","templateList_1","templateList_1_1","AnonymousConsentTemplatesConnector","AnonymousConsentsEffects","anonymousConsentTemplatesConnector","anonymousConsentsConfig","anonymousConsentService","userConsentService","loadAnonymousConsentTemplates$","concatMap","newConsentTemplates","currentConsentTemplates","AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess","AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail","transferAnonymousConsentsToUser$","registerAction","actions","consents_1","consents_1_1","templates_1","e_2","templates_1_1","UserActions.TransferAnonymousConsent","giveRequiredConsentsToUser$","templates_2","templates_2_1","SiteConnector","getLanguages","getCurrencies","getCountries","getRegions","getBaseSite","serviceMapFactory","contextServiceMapProvider","ContextServiceMap","baseSiteConfigValidator","defaultSiteContextConfigFactory","ConfigInitializerService","initializerGuard","ongoingScopes$","BehaviorSubject","getStableConfig","isStable","ongoingScopes","areReady","mapTo","finishScopes","newScopes","scopes_1","scopes_1_1","scopes_2","scopes_2_1","ongoingScopes_1","ongoingScopes_1_1","ongoingScope","scopesOverlap","initializers","asyncConfigs","initializer","this_1","all","SiteContextParamsService","serviceMap","getContextParameters","getUrlEncodingParameters","getParamValues","getParamDefaultValue","getSiteContextService","getValue","service","setValue","getValues","UrlSplit","SiteContextUrlSerializer","siteContextParams","urlEncodingParameters","hasContextInRoutes","urlWithParams","urlExtractContextParameters","parsed","urlTreeIncludeContextParameters","queryPart","paramId","segmentId","siteContext","serialize","urlTreeExtractContextParameters","urlIncludeContextParameters","DefaultUrlSerializer","SiteContextRoutesHandler","serializer","subscription","contextValues","init","Location","routingParams","subscribeChanges","subscribeRouting","replaceState","onContextInitialized","contextInitialized","events","NavigationStart","NavigationEnd","NavigationError","NavigationCancel","setContextParamsFromRoute","ngOnDestroy","initializeContext","langService","currService","configInit","siteContextRoutesHandler","contextServiceProviders","APP_INITIALIZER","siteContextParamsProviders","UrlSerializer","LanguagesEffects","siteConnector","loadLanguages$","SiteContextActions.LOAD_LANGUAGES","SiteContextActions.LoadLanguagesSuccess","SiteContextActions.LoadLanguagesFail","persist$","SiteContextActions.SET_ACTIVE_LANGUAGE","switchMapTo","NEVER","activateLanguage$","bufferCount","SiteContextActions.LanguageChange","CurrenciesEffects","loadCurrencies$","SiteContextActions.LOAD_CURRENCIES","SiteContextActions.LoadCurrenciesSuccess","SiteContextActions.LoadCurrenciesFail","SiteContextActions.SET_ACTIVE_CURRENCY","activateCurrency$","SiteContextActions.CurrencyChange","BaseSiteEffects","loadBaseSite$","SiteContextActions.LOAD_BASE_SITE","SiteContextActions.LoadBaseSiteSuccess","SiteContextActions.LoadBaseSiteFail","initialState$1","initialState$2","currEntities","currency","initialState$3","langEntities","language","fromLanguages.reducer","fromCurrencies.reducer","fromBaseSite.reducer","siteContextStoreConfigFactory","SiteContextStoreModule","SiteContextModule","SiteContextModule_1","toggleConsentStatus","initialState$6","fromAnonymousConsents.reducer","fromAnonymousConsentsBanner.reducer","fromAnonymousConsentsUpdate.reducer","clearAnonymousConsentTemplates","SiteContextActions.LANGUAGE_CHANGE","anonymousConsentsStoreConfigFactory","AnonymousConsentsStoreModule","metaReducers$1","AnonymousConsentsModule","AnonymousConsentsModule_1","defaultAsmConfig","asm","agentSessionTimer","startingDelayInSeconds","maxResults","CSAGENT_TOKEN_DATA","AsmConnector","asmAdapter","AsmUiUpdate","CustomerSearch","CustomerSearchFail","CustomerSearchSuccess","CustomerSearchReset","LoadCustomerSupportAgentToken","LoadCustomerSupportAgentTokenFail","LoadCustomerSupportAgentTokenSuccess","LogoutCustomerSupportAgent","CustomerEffects","asmConnector","customerSearch$","customerSearchResults","AsmActions.CustomerSearchSuccess","AsmActions.CustomerSearchFail","CustomerSupportAgentTokenEffects","loadCustomerSupportAgentToken$","AsmActions.LoadCustomerSupportAgentTokenSuccess","AsmActions.LoadCustomerSupportAgentTokenFail","collapsed","initialState$7","customerSearchResult","asmUi","fromAsmUiReducer.reducer","csagentToken","clearCustomerSupportAgentAsmState","asmStoreConfigFactory","asm.asmUi","asm.csagentToken.value.access_token","asm.csagentToken.value.token_type","asm.csagentToken.value.expires_in","asm.csagentToken.value.expiration_time","asm.csagentToken.value.scope","asm.csagentToken.value.userId","GlobalMessageType","AsmStoreModule","metaReducers$2","HttpResponseStatus","GlobalMessageConfig","ADD_MESSAGE","REMOVE_MESSAGE","AddMessage","RemoveMessage","RemoveMessagesByType","getGlobalMessageState","getGlobalMessageEntities","ɵ0$r","getGlobalMessageEntitiesByType","getGlobalMessageCountByType","GlobalMessageService","GlobalMessageSelectors.getGlobalMessageEntities","text","timeout","GlobalMessageActions.AddMessage","raw","GlobalMessageActions.RemoveMessage","GlobalMessageActions.RemoveMessagesByType","HttpErrorHandler","globalMessageService","hasMatch","errorResponse","responseStatus","BadGatewayHandler","BAD_GATEWAY","handleError","MSG_TYPE_ERROR","getPriority","getCartIdByUserId","isCartNotFoundError","subjectType","subject","getWishlistName","customerId","isTempCartId","BadRequestHandler","BAD_REQUEST","handleBadPassword","handleBadLoginResponse","handleBadCartRequest","handleValidationError","handleVoucherOperationError","errorMessage","error_description","MSG_TYPE_CONFIRMATION","_request","getErrors","ConflictHandler","CONFLICT","ForbiddenHandler","FORBIDDEN","GatewayTimeoutHandler","GATEWAY_TIMEOUT","InternalServerErrorHandler","INTERNAL_SERVER_ERROR","NotFoundHandler","NOT_FOUND","UnauthorizedErrorHandler","UNAUTHORIZED","UnknownErrorHandler","UNKNOWN","_errorResponse","resolveApplicable","applicables","matchParams","priorityParams","matchedApplicables","applicable","lastPriority","Infinity","currPriority","HttpErrorInterceptor","handlers","handleErrorResponse","handler","getResponseHandler","errorHandlers","httpErrorInterceptors","initialState$8","GlobalMessageActions.ADD_MESSAGE","currentMessages","GlobalMessageActions.REMOVE_MESSAGE","msgType","msgIndex","messages","fromGlobalMessage.reducer","GlobalMessageStoreModule","deepEqualObjects","objA","objB","indexOfFirstOccurrence","obj","arr","GlobalMessageEffect","removeDuplicated$","GlobalMessageSelectors.getGlobalMessageEntitiesByType","hideAfterDelay$","globalMessages","GlobalMessageSelectors.getGlobalMessageCountByType","delay","defaultGlobalMessageConfigFactory","MSG_TYPE_INFO","MSG_TYPE_WARNING","GlobalMessageModule","GlobalMessageModule_1","getAsmState","getAsmUi","ɵ0$s","getCustomerSearchResultsLoaderState","getCustomerSearchResults","ɵ1$l","getCustomerSearchResultsLoading","ɵ2$e","getCustomerSupportAgentTokenState","getCustomerSupportAgentToken","getCustomerSupportAgentTokenLoading","AsmAuthService","authorizeCustomerSupportAgent","AsmActions.LoadCustomerSupportAgentToken","startCustomerEmulationSession","customerSupportAgentToken","isCustomerEmulationToken","AsmSelectors.getCustomerSupportAgentToken","AsmSelectors.getCustomerSupportAgentTokenLoading","logoutCustomerSupportAgent","AsmActions.LogoutCustomerSupportAgent","CustomerSupportAgentErrorHandlingService","asmAuthService","terminateCustomerSupportAgentExpiredSession","CustomerSupportAgentAuthErrorInterceptor","csagentErrorHandlingService","isCustomerSupportAgentRequest","CustomerSupportAgentTokenInterceptor","AsmModule","AsmModule_1","AsmService","AsmActions.CustomerSearch","customerSearchReset","AsmActions.CustomerSearchReset","AsmSelectors.getCustomerSearchResults","AsmSelectors.getCustomerSearchResultsLoading","updateAsmUiState","AsmActions.AsmUiUpdate","getAsmUiState","AsmSelectors.getAsmUi","PageMetaResolver","getScore","score","pageTemplate","EMAIL_PATTERN","MULTI_CART_DATA","getMultiCartState","getMultiCartEntities","ɵ0$v","getCartEntitySelectorFactory","getCartSelectorFactory","getCartIsStableSelectorFactory","getCartHasPendingProcessesSelectorFactory","getCartEntriesSelectorFactory","getCartEntrySelectorFactory","getActiveCartId","ɵ1$n","wishList","getWishListId","ɵ2$g","CartAddEntry","CartAddEntrySuccess","CartAddEntryFail","CartRemoveEntry","CartRemoveEntrySuccess","CartRemoveEntryFail","CartUpdateEntry","CartUpdateEntrySuccess","CartUpdateEntryFail","CART_ADD_VOUCHER","CartAddVoucher","CartAddVoucherFail","CartAddVoucherSuccess","CartResetAddVoucher","CartRemoveVoucher","CartRemoveVoucherFail","CartRemoveVoucherSuccess","CREATE_CART","CreateCart","tempCartId","CreateCartFail","CreateCartSuccess","AddEmailToCart","AddEmailToCartFail","AddEmailToCartSuccess","LoadCart","LoadCartFail","LoadCartSuccess","MergeCart","MergeCartSuccess","ResetCartDetails","RemoveCart","DeleteCart","DeleteCartSuccess","DeleteCartFail","SetTempCart","CartProcessesIncrement","CartProcessesDecrement","SetActiveCartId","ClearCartState","CreateWishList","CreateWishListSuccess","CreateWishListFail","LoadWishList","LoadWishListSuccess","LoadWishListFail","MultiCartService","getCart","MultiCartSelectors.getCartSelectorFactory","getCartEntity","MultiCartSelectors.getCartEntitySelectorFactory","MultiCartSelectors.getCartIsStableSelectorFactory","debounce","timer","generateTempCartId","Math","random","extraData","CartActions.CreateCart","mergeToCurrentCart","CartActions.MergeCart","loadCart","CartActions.LoadCart","getEntries","MultiCartSelectors.getCartEntriesSelectorFactory","addEntry","CartActions.CartAddEntry","removeEntry","CartActions.CartRemoveEntry","updateEntry","CartActions.CartUpdateEntry","getEntry","MultiCartSelectors.getCartEntrySelectorFactory","assignEmail","CartActions.AddEmailToCart","CartActions.DeleteCart","ActiveCartService","multiCartService","PREVIOUS_USER_ID_INITIAL_VALUE","previousUserId","activeCartId$","MultiCartSelectors.getActiveCartId","cartSelector$","isJustLoggedIn","loadOrMerge","initActiveCart","activeCart$","cartEntity","activeCartId","isEmpty","cartUser","bufferSize","refCount","getLoading","isGuestCart","guestCartMerge","addEntriesGuestMerge","cartEntries","entriesToAdd","requireLoadedCartForGuestMerge","cartState","requireLoadedCart","isCartCreating","customCartSelector$","getAssignedUser","isEmail","str","withdrawOn","notifier","CartEntryConnector","CartEntryEffects","cartEntryConnector","contextChange$","SiteContextActions.CURRENCY_CHANGE","addEntry$","cartModification","CartActions.CartAddEntrySuccess","from","CartActions.CartAddEntryFail","removeEntry$","CartActions.CartRemoveEntrySuccess","CartActions.CartRemoveEntryFail","updateEntry$","CartActions.CartUpdateEntrySuccess","CartActions.CartUpdateEntryFail","CartVoucherConnector","CartVoucherEffects","cartVoucherConnector","messageService","addCartVoucher$","CartActions.CART_ADD_VOUCHER","showGlobalMessage","CartActions.CartAddVoucherSuccess","CartActions.CartAddVoucherFail","CartActions.CartProcessesDecrement","removeCartVoucher$","CartActions.CartRemoveVoucherSuccess","CartActions.CartRemoveVoucherFail","messageType","voucherCode","VerifyAddress","VerifyAddressFail","VerifyAddressSuccess","ClearAddressVerificationResults","LoadCardTypes","LoadCardTypesFail","LoadCardTypesSuccess","CHECKOUT_DETAILS","PLACE_ORDER","AddDeliveryAddress","AddDeliveryAddressFail","AddDeliveryAddressSuccess","SetDeliveryAddress","SetDeliveryAddressFail","SetDeliveryAddressSuccess","ResetSetDeliveryAddressProcess","LoadSupportedDeliveryModes","LoadSupportedDeliveryModesFail","LoadSupportedDeliveryModesSuccess","ResetLoadSupportedDeliveryModesProcess","SetDeliveryMode","SetDeliveryModeFail","SetDeliveryModeSuccess","ResetSetDeliveryModeProcess","CreatePaymentDetails","CreatePaymentDetailsFail","CreatePaymentDetailsSuccess","PaymentProcessSuccess","SetPaymentDetails","SetPaymentDetailsFail","SetPaymentDetailsSuccess","ResetSetPaymentDetailsProcess","PlaceOrder","PlaceOrderFail","PlaceOrderSuccess","ClearSupportedDeliveryModes","ClearCheckoutStep","ClearCheckoutData","LoadCheckoutDetails","LoadCheckoutDetailsFail","LoadCheckoutDetailsSuccess","CheckoutClearMiscsData","ClearCheckoutDeliveryAddress","ClearCheckoutDeliveryAddressSuccess","ClearCheckoutDeliveryAddressFail","ClearCheckoutDeliveryMode","ClearCheckoutDeliveryModeSuccess","ClearCheckoutDeliveryModeFail","CartConnector","CartEffects","cartConnector","loadCart$","groupBy","group$","CartActions.LoadCartSuccess","CartActions.RemoveCart","CartActions.LoadCartFail","err","createCart$","CartActions.CREATE_CART","conditionalActions","CartActions.MergeCartSuccess","CartActions.CreateCartSuccess","CartActions.SetTempCart","CartActions.CreateCartFail","mergeCart$","currentCart","refresh$","refreshWithoutProcesses$","resetCartDetailsOnSiteContextChange$","CartActions.ResetCartDetails","addEmail$","CartActions.AddEmailToCartSuccess","CartActions.AddEmailToCartFail","deleteCart$","CartActions.DeleteCartSuccess","CartActions.DeleteCartFail","SaveCartConnector","WishListEffects","saveCartConnector","createWishList$","description","saveCartResult","CartActions.CreateWishListSuccess","savedCartData","CartActions.CreateWishListFail","loadWishList$","CartActions.LoadWishListSuccess","CartActions.CreateWishList","CartActions.LoadWishListFail","resetWishList$","MultiCartSelectors.getWishListId","wishListId","activeCartReducer","cartEntitiesReducer","wishListReducer","clearMultiCartState","multiCartMetaReducers","multiCartReducerToken","getMultiCartReducers","multiCartReducerProvider","CartAddEntryEvent","CartEventBuilder","activeCartService","registerAddEntry","registerMapped","CartAddEntrySuccessEvent","CartAddEntryFailEvent","eventStream$","getAction","actionType","CartEventModule","_CartEventBuilder","COMPONENT_ENTITY","LoadCmsComponent","LoadCmsComponentFail","LoadCmsComponentSuccess","CmsGetComponentFromPage","cmp","LoadCmsNavigationItems","nodeId","LoadCmsNavigationItemsFail","LoadCmsNavigationItemsSuccess","LoadCmsPageData","LoadCmsPageDataFail","LoadCmsPageDataSuccess","CmsSetPageSuccessIndex","CmsSetPageFailIndex","getCmsState","getComponentsState","ɵ0$w","componentsContextSelectorFactory","componentsState","StateUtils.entitySelector","componentsLoaderStateSelectorFactory","componentsContext","StateUtils.initialLoaderState","componentsContextExistsSelectorFactory","componentsDataSelectorFactory","componentsSelectorFactory","componentState","exists","getNavigationEntryItemState","getSelectedNavigationEntryItemState","nodes","getNavigationEntryItems","itemState","getPageEntitiesSelector","pageData","getIndexByType","category","catalog","getPageComponentTypesSelector","componentTypes","getPageState","ɵ3$9","getPageStateIndex","ɵ4$2","getPageStateIndexEntityLoaderState","getPageStateIndexLoaderState","indexState","getPageStateIndexValue","getPageEntities","getPageData","indexValue","getPageComponentTypes","getCurrentSlotSelectorFactory","serializePageContext","ignoreContentPageId","PageRobotsMeta","CmsService","getCurrentPage","CmsSelectors.getPageData","getComponentData","createComponentData","currentContext","loading$","CmsSelectors.componentsLoaderStateSelectorFactory","observeOn","queueScheduler","nextContext","loadingState","attemptedLoad","couldBeLoadedWithPageData","CmsActions.LoadCmsComponent","component$","CmsSelectors.componentsSelectorFactory","using","getContentSlot","CmsSelectors.getCurrentSlotSelectorFactory","navigationNodeUid","CmsSelectors.getNavigationEntryItems","loadNavigationItems","rootUid","CmsActions.LoadCmsNavigationItems","items","refreshLatestPage","CmsActions.LoadCmsPageData","refreshPageById","refreshComponent","CmsSelectors.getPageComponentTypes","hasPage","forceReload","CmsSelectors.getPageStateIndexLoaderState","shouldReload","getPage","getPageIndex","CmsSelectors.getPageStateIndexValue","setPageFailIndex","CmsActions.CmsSetPageFailIndex","CartPageMetaResolver","cms","cms$","resolveTitle","resolveRobots","NOFOLLOW","NOINDEX","MultiCartStatePersistenceService","statePersistenceService","siteContextParamsService","sync","getCartState","MultiCartSelectors.getMultiCartState","distinctUntilKeyChanged","CartActions.ClearCartState","CartActions.SetActiveCartId","MultiCartEffects","setTempCart$","processesIncrement$","CartActions.CartProcessesIncrement","MultiCartStoreModule","cartStatePersistenceFactory","cartStatePersistenceService","CartModule","CartModule_1","CartConfig","CartVoucherService","addVoucher","combineUserAndCartId","occUserId","cartIdentifier","CartActions.CartAddVoucher","removeVoucher","CartActions.CartRemoveVoucher","getAddVoucherResultError","getAddVoucherResultSuccess","getAddVoucherResultLoading","resetAddVoucherProcessingState","CartActions.CartResetAddVoucher","UserService","UsersSelectors.getDetails","UserActions.LoadUserDetails","userRegisterFormData","UserActions.RegisterUser","UserActions.RegisterGuest","getRegisterUserResultLoading","getRegisterUserResultSuccess","getRegisterUserResultError","resetRegisterUserProcessState","UserActions.ResetRegisterUserProcess","UserActions.RemoveUser","getRemoveUserResultLoading","getRemoveUserResultError","getRemoveUserResultSuccess","resetRemoveUserProcessState","UserActions.RemoveUserReset","getTitles","UsersSelectors.getAllTitles","UserActions.LoadTitles","isPasswordReset","UsersSelectors.getResetPassword","updatePersonalDetails","userDetails","UserActions.UpdateUserDetails","username","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultError","getUpdatePersonalDetailsResultSuccess","resetUpdatePersonalDetailsProcessingState","UserActions.ResetUpdateUserDetails","UserActions.ResetPassword","UserActions.ForgotPasswordEmailRequest","UserActions.UpdateEmailAction","getUpdateEmailResultSuccess","getUpdateEmailResultError","getUpdateEmailResultLoading","resetUpdateEmailResultState","UserActions.ResetUpdateEmailAction","UserActions.UpdatePassword","getUpdatePasswordResultLoading","getUpdatePasswordResultError","getUpdatePasswordResultSuccess","resetUpdatePasswordProcessState","UserActions.UpdatePasswordReset","CartConfigService","isSelectiveCartEnabled","selectiveCart","SelectiveCartService","userService","cartConfigService","cartId$","selectiveCart$","getLoaded","isLoggedIn","loadAttempted","isEnabled","WishListService","createWishList","getWishList","loadWishList","CartActions.LoadWishList","getWishListLoading","stable","CheckoutPageMetaResolver","translation","cart$","translate","totalItems","TranslationService","initialState$9","initialState$a","cardTypesEntities","deliveryMode","supported","orderDetails","initialState$b","supportedModes","modes","mode","deliveryAddress","paymentInfo","steps","fromCheckout.reducer","fromCardTypes.reducer","fromAddressVerification.reducer","UserAddressConnector","AddressVerificationEffect","userAddressConnector","verifyAddress$","CheckoutActions.VerifyAddressSuccess","CheckoutActions.VerifyAddressFail","CheckoutPaymentConnector","getCardTypes","CardTypesEffects","checkoutPaymentConnector","loadCardTypes$","CheckoutActions.LoadCardTypesSuccess","CheckoutActions.LoadCardTypesFail","CheckoutConnector","CheckoutDeliveryConnector","CheckoutEffects","checkoutDeliveryConnector","checkoutConnector","addDeliveryAddress$","CheckoutActions.SetDeliveryAddress","UserActions.LoadUserAddresses","CheckoutActions.AddDeliveryAddressFail","setDeliveryAddress$","CheckoutActions.SetDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryMode","CheckoutActions.ClearSupportedDeliveryModes","CheckoutActions.ResetLoadSupportedDeliveryModesProcess","CheckoutActions.LoadSupportedDeliveryModes","CheckoutActions.SetDeliveryAddressFail","loadSupportedDeliveryModes$","CheckoutActions.LoadSupportedDeliveryModesSuccess","CheckoutActions.LoadSupportedDeliveryModesFail","clearCheckoutMiscsDataOnLanguageChange$","CheckoutActions.CheckoutClearMiscsData","clearDeliveryModesOnCurrencyChange$","clearCheckoutDataOnLogout$","CheckoutActions.ClearCheckoutData","clearCheckoutDataOnLogin$","AuthActions.LOGIN","setDeliveryMode$","selectedModeId","CheckoutActions.SetDeliveryModeSuccess","CheckoutActions.SetDeliveryModeFail","createPaymentDetails$","CheckoutActions.CreatePaymentDetailsSuccess","UserActions.LoadUserPaymentMethods","CheckoutActions.CreatePaymentDetailsFail","setPaymentDetails$","CheckoutActions.SetPaymentDetailsSuccess","CheckoutActions.SetPaymentDetailsFail","placeOrder$","CheckoutActions.PLACE_ORDER","CheckoutActions.PlaceOrderSuccess","CheckoutActions.PlaceOrderFail","loadCheckoutDetails$","CheckoutActions.LoadCheckoutDetailsSuccess","CheckoutActions.LoadCheckoutDetailsFail","reloadDetailsOnMergeCart$","CheckoutActions.LoadCheckoutDetails","clearCheckoutDeliveryAddress$","CheckoutActions.ClearCheckoutDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryAddressFail","clearCheckoutDeliveryMode$","CheckoutActions.ClearCheckoutDeliveryModeSuccess","CheckoutActions.ClearCheckoutDeliveryModeFail","CheckoutStoreModule","CheckoutModule","CheckoutModule_1","getDeliveryAddressSelector","getDeliveryModeSelector","getPaymentDetailsSelector","getOrderDetailsSelector","getCheckoutState","checkoutState","getCheckoutStepsState","ɵ4$3","getCheckoutSteps","ɵ5$2","getDeliveryAddress","getDeliveryMode","getSupportedDeliveryModes","ɵ6","getSelectedDeliveryModeCode","ɵ7","getSelectedDeliveryMode","ɵ8","getPaymentDetails","getCheckoutOrderDetails","getCheckoutDetailsLoaded","ɵ9","getAddressVerificationResultsState","ɵ0$A","getAddressVerificationResults","getCardTypesState","getCardTypesEntites","getAllCardTypes","ɵ1$q","CheckoutService","checkoutStore","userId_1","cartId_1","actionAllowed","CheckoutActions.PlaceOrder","clearCheckoutData","clearCheckoutStep","stepNumber","CheckoutActions.ClearCheckoutStep","CheckoutSelectors.getCheckoutDetailsLoaded","CheckoutSelectors.getCheckoutOrderDetails","CheckoutDeliveryService","CheckoutSelectors.getSupportedDeliveryModes","loadSupportedDeliveryModes","CheckoutSelectors.getSelectedDeliveryMode","CheckoutSelectors.getSelectedDeliveryModeCode","CheckoutSelectors.getDeliveryAddress","getSetDeliveryAddressProcess","resetSetDeliveryAddressProcess","CheckoutActions.ResetSetDeliveryAddressProcess","getSetDeliveryModeProcess","resetSetDeliveryModeProcess","CheckoutActions.ResetSetDeliveryModeProcess","resetLoadSupportedDeliveryModesProcess","getLoadSupportedDeliveryModeProcess","clearCheckoutDeliveryModes","CheckoutSelectors.getAddressVerificationResults","createAndSetAddress","CheckoutActions.AddDeliveryAddress","userId_2","cartId_2","setDeliveryMode","userId_3","cartId_3","CheckoutActions.SetDeliveryMode","verifyAddress","userId_4","CheckoutActions.VerifyAddress","setDeliveryAddress","userId_5","cartId_4","clearAddressVerificationResults","CheckoutActions.ClearAddressVerificationResults","CheckoutActions.ClearCheckoutDeliveryAddress","clearCheckoutDeliveryDetails","CheckoutPaymentService","CheckoutSelectors.getAllCardTypes","CheckoutSelectors.getPaymentDetails","getSetPaymentDetailsResultProcess","resetSetPaymentDetailsProcess","CheckoutActions.ResetSetPaymentDetailsProcess","loadSupportedCardTypes","CheckoutActions.LoadCardTypes","createPaymentDetails","CheckoutActions.CreatePaymentDetails","setPaymentDetails","cart_1","activeCart","CheckoutActions.SetPaymentDetails","paymentProcessSuccess","CheckoutActions.PaymentProcessSuccess","defaultCmsModuleConfig","pages","legacy","cmsComponents","ContentPageMetaResolver","resolveBreadcrumbs","link","CmsPageTitleModule","bufferDebounceTime","time","scheduler","bufferedValues","TEST_CONFIG_COOKIE_NAME","configFromCookieFactory","cookieName","cookie","parseConfigJSON","exec","TestConfigModule","TestConfigModule_1","configValidatorFactory","configInitializer","validators","ConfigValidatorModule","ConfigValidatorModule_1","configInitializerFactory","ConfigInitializerModule","ConfigInitializerModule_1","CmsStructureConfig","CmsStructureConfigService","cmsDataConfig","mergePageStructure","pageStructure","mergePage","mergeSlots","shouldIgnoreBackend","getPageFromConfig","ignoreBackend","getComponentFromConfig","componentId","getComponentById","getComponentsFromConfig","cmsStructure","getComponentsByPosition","componentIds","CmsComponentConnector","cmsStructureConfigService","configuredComponent","getList","configuredComponents","missingIds","loadedComponents","ComponentsEffects","cmsComponentConnector","loadComponent$","createEffect","actionGroup","loadComponentsEffect","componentUids","uidsLeft","components_1","components_1_1","CmsActions.LoadCmsComponentSuccess","CmsActions.LoadCmsComponentFail","TO_ESCAPE_BASE","with","TO_ESCAPE_WILDCARD_QM","TO_ESCAPE_LITERAL_QM","globToRegex","glob","literalQuestionMark","toEscape","reverse","regex","seg","escape","processGlobPatterns","urls","positive","GlobService","getValidator","patterns","processedPatterns","includePatterns","spec","excludePatterns","some","pattern","UrlMatcherService","globService","getFalsy","getFromPaths","matchers","getFromPath","matcher","getCombined","segmentGroup","route","pathMatch","hasChildren","consumed","posParams","part","substring","getOpposite","originalMatcher","getFromGlob","globPatterns","globValidator","fullPath","ConfigurableRoutesService","urlMatcherService","initCalled","configure","resetConfig","configureRoutes","configuredRoute","configureRoute","getRouteName","validateRouteConfig","disabled","resolveUrlMatchers","matchersOrFactories","matcherOrFactory","resolveUrlMatcherFactory","factoryToken","UrlPipe","urlService","Pipe","ProductURLPipe","semanticPath","UrlModule","ExternalRoutesConfig","ExternalRoutesGuard","addExternalRoutesFactory","addRoutes","ExternalRoutesService","internal","newRoutes","getRoutes","internalUrlPatterns","getUrlMatcher","ExternalRoutesModule","ExternalRoutesModule_1","ProtectedRoutesService","nonProtectedPaths","shouldProtect","getNonProtectedPaths","getSegments","routingConfig","protected","isUrlProtected","urlSegments","matchAnyPath","pathsSegments","pathSegments","matchPath","pathSeg","urlSeg","ProtectedRoutesGuard","authGuard","RouterEffects","navigate$","navigateBuUrl$","navigateByUrl","clearCmsRoutes$","filteredConfig","cxCmsRouteContext","navigateBack$","navigateForward$","cmsRequired","initialState$c","fromNgrxRouter.ROUTER_NAVIGATION","routerState","fromNgrxRouter.ROUTER_ERROR","fromNgrxRouter.ROUTER_CANCEL","fromNgrxRouter.ROUTER_NAVIGATED","CustomSerializer","firstChild","x","guardName","pageLabel","urlSegment","initConfigurableRoutes","RoutingModule","RoutingModule_1","RouterStateSerializer","StoreRouterConnectingModule","stateKey","DEFAULT_URL_MATCHER","inject","NavigationEntryItemEffects","loadNavigationItems$","getIdListByItemType","CmsActions.LoadCmsNavigationItemsSuccess","CmsActions.LoadCmsNavigationItemsFail","pageIds","mediaIds","superType","CmsPageConnector","cmsPageAdapter","loadFromConfig","mergeDefaultPageStructure","PageEffects","cmsPageConnector","refreshPage$","loadPageData$","CmsActions.CmsGetComponentFromPage","CmsActions.LoadCmsPageDataSuccess","CmsActions.CmsSetPageSuccessIndex","CmsActions.LoadCmsPageDataFail","componentExistsReducer","initialState$d","pageContextReducer","newItem","compItems","initialState$f","fromPageReducer.reducer","fromPageIndexReducer.reducer","fromComponentsReducer.reducer","fromNavigation.reducer","clearCmsState","cmsStoreConfigFactory","CmsStoreModule","metaReducers$3","CmsModule","CmsModule_1","PageMetaService","resolvers","resolverMethods","heading","breadcrumbs","robots","getMeta","metaResolver","getMetaResolver","resolveMethods","SmartEditService","cmsService","zone","isPreviewPage","_launchedInSmartEdit","getCmsTicket","window_1","smartedit","renderComponent","componentType","parentId","reprocessPage","_cmsTicketId","takeWhile","getDefaultPreviewCode","defaultPreviewCategoryCode","defaultPreviewProductCode","addPageContract","cmsPage","_currentPageId","goToPreviewPage","previousContract_1","classList","attr","classes","classItem","run","isLaunchedInSmartEdit","NgZone","DynamicAttributeService","smartEditService","addDynamicAttributes","element","renderer","cmsRenderingContext","componentData","slotData","groupProps","propName","propValue","setAttribute","toLowerCase","FeaturesConfig","isFeatureConfig","features","isInLevel","level","levelParts","versionParts","versionNumberPart","Number","levelNumberPart","isFeatureLevel","isFeatureEnabled","feature","featureConfig","FeatureConfigService","isLevel","FeatureLevelDirective","templateRef","viewContainer","hasView","createEmbeddedView","clear","TemplateRef","ViewContainerRef","Input","Directive","selector","FeatureDirective","FeaturesConfigModule","defaultLevel","FeaturesConfigModule_1","CxDatePipe","timezone","getLang","getActiveLang","getLocaleId","reportMissingLocaleData","DatePipe","TranslatePipe","cd","translatedValue","lastKey","aKeys","bKeys","aKeysLen","shallowEqualObjects","lastOptions","markForCheck","ChangeDetectorRef","pure","I18nConfig","TranslationChunkService","duplicates","KEY_SEPARATOR","chunk","warnDuplicates","getChunkNameForKey","mainKey","dupes","defaultI18nConfig","debug","i18nextInit","httpClient","serverRequestOrigin","i18nextConfig","ns","fallbackLng","interpolation","escapeValue","i18next","use","i18nextXhrBackend","loadPath","getLoadPath","ajax","i18nextGetHttpClient","resources","chunkName","addResourceBundle","i18nextAddTranslations","changeLanguage","_options","callback","_data","i18nextProviders","ɵ0$C","I18nextTranslationService","translationChunk","NON_BREAKING_SPACE","fromCharCode","NAMESPACE_SEPARATOR","whitespaceUntilLoaded","namespacedKey","getNamespacedKey","subscriber","isInitialized","loadNamespaces","reportMissingKey","getFallbackValue","on","off","loadChunks","chunkNames","I18nModule","I18nModule_1","mockTranslate","optionsString","optionName","MockTranslatePipe","MockTranslationService","_whitespaceUntilLoaded","complete","_chunks","MockDatePipe","I18nTestingModule","KymaConfig","OPEN_ID_TOKEN_DATA","LoadOpenIdToken","LoadOpenIdTokenFail","LoadOpenIdTokenSuccess","getKymaState","openIdToken","getOpenIdTokenState","ɵ0$D","getOpenIdTokenValue","getOpenIdTokenLoading","getOpenIdTokenSuccess","getOpenIdTokenError","KymaService","authorizeOpenId","KymaActions.LoadOpenIdToken","getOpenIdToken","KymaSelectors.getOpenIdTokenValue","defaultKymaConfig","kyma_client_id","kyma_client_secret","OpenIdAuthenticationTokenService","loadOpenIdAuthenticationToken","getOAuthEndpoint","OpenIdTokenEffect","openIdTokenService","triggerOpenIdTokenLoading$","loginAction","loadOpenIdToken$","KymaActions.LoadOpenIdTokenSuccess","KymaActions.LoadOpenIdTokenFail","clearKymaState","kymaStoreConfigFactory","kyma.openIdToken.value","KymaStoreModule","metaReducers$4","KymaModule","defaultPersonalizationConfig","personalization","httpHeaderName","timestamp","slotPosition","PersonalizationConfig","OccPersonalizationIdInterceptor","requestHeader","personalizationId","removeItem","receivedId","OccPersonalizationTimeInterceptor","receivedTimestamp","PersonalizationModule","PersonalizationModule_1","PersonalizationContextService","getPersonalizationContext","buildPersonalizationContext","script","atob","EntityScopedLoaderActions","ProcessStoreModule","ProcessModule","ProcessModule_1","ProductConnector","getMany","ProductReferencesConnector","ProductReviewsConnector","ProductSearchConnector","getSuggestions","LoadProductReferences","LoadProductReferencesFail","LoadProductReferencesSuccess","CleanProductReferences","LoadProductReviews","LoadProductReviewsFail","LoadProductReviewsSuccess","PostProductReview","PostProductReviewFail","PostProductReviewSuccess","SearchProducts","auxiliary","SearchProductsFail","SearchProductsSuccess","GetProductSuggestions","GetProductSuggestionsSuccess","GetProductSuggestionsFail","ClearProductSearchResult","clearPageResults","clearSearchboxResults","entityScopedLoadMeta","entityScopedFailMeta","entityScopedSuccessMeta","entityScopedResetMeta","EntityScopedLoadAction","EntityScopedFailAction","EntityScopedSuccessAction","EntityScopedResetAction","LOAD_PRODUCT","LoadProduct","LoadProductFail","LoadProductSuccess","getProductsState","getProductReferencesState","ɵ0$E","getSelectedProductReferencesFactory","referenceTypeData","getProductReviewsState","reviews","getSelectedProductReviewsFactory","reviewData","suggestions","auxResults","initialState$h","res","getProductsSearchState","getSearchResults","getAuxSearchResults","getProductSuggestions","getProductState","getSelectedProductStateFactory","getSelectedProductFactory","productState","getSelectedProductLoadingFactory","getSelectedProductSuccessFactory","getSelectedProductErrorFactory","getAllProductCodes","ɵ1$r","ProductReferenceService","ProductSelectors.getSelectedProductReferencesFactory","ProductActions.LoadProductReferences","cleanReferences","ProductActions.CleanProductReferences","ProductReviewService","getByProductCode","ProductSelectors.getSelectedProductReviewsFactory","ProductActions.LoadProductReviews","ProductActions.PostProductReview","ProductSearchService","ProductActions.SearchProducts","queryText","getResults","ProductSelectors.getSearchResults","clearResults","ProductActions.ClearProductSearchResult","ProductLoadingService","initProductScopes","getScopesIndex","getProductForScope","auditTime","productParts","shouldLoad$","ProductSelectors.getSelectedProductStateFactory","isLoading$","ProductSelectors.getSelectedProductLoadingFactory","productLoadLogic$","merge","getProductReloadTriggers","ProductActions.LoadProduct","productData$","ProductSelectors.getSelectedProductFactory","triggers","loadFinish$","loadStart$","ProductActions.LOAD_PRODUCT","getMaxAgeTrigger","timestamp$","defer","age","timestampRefresh$","ProductService","productLoading","isLoading","isSuccess","ProductSelectors.getSelectedProductSuccessFactory","hasError","ProductSelectors.getSelectedProductErrorFactory","reload","SearchboxService","ProductSelectors.getAuxSearchResults","getSuggestionResults","ProductSelectors.getProductSuggestions","searchSuggestions","ProductActions.GetProductSuggestions","CategoryPageMetaResolver","productSearchService","searchPage$","hasProductListComponent","facetValueName","resolveBreadcrumbData","br","facetCode","facetValueCode","CouponSearchPageResolver","total$","homeLabel","couponLabel","total","coupon","snapshot","couponcode","ActivatedRoute","ProductPageMetaResolver","productService","product$","DETAILS","resolveHeading","resolveFirstCategory","resolveManufacturer","resolveDescription","summary","categories","name_1","resolveImage","PRIMARY","zoom","firstCategory","manufacturer","FOLLOW","INDEX","SearchPageMetaResolver","query$","q","ProductReferencesEffects","productReferencesConnector","loadProductReferences$","ProductActions.LoadProductReferencesSuccess","_error","ProductActions.LoadProductReferencesFail","ProductReviewsEffects","productReviewsConnector","loadProductReviews$","ProductActions.LoadProductReviewsSuccess","ProductActions.LoadProductReviewsFail","postProductReview","reviewResponse","ProductActions.PostProductReviewSuccess","ProductActions.PostProductReviewFail","showGlobalMessageOnPostProductReviewSuccess$","ProductsSearchEffects","productSearchConnector","searchProducts$","ProductActions.SearchProductsSuccess","ProductActions.SearchProductsFail","getProductSuggestions$","ProductActions.GetProductSuggestionsSuccess","ProductActions.GetProductSuggestionsFail","ProductEffects","productConnector","loadProduct$","productLoadEffect","productLoad","ProductActions.LoadProductSuccess","ProductActions.LoadProductFail","initialState$i","productReference","initialState$j","initialScopedLoaderState","scopedLoaderReducer","entityScopedLoaderReducer","fromProductsSearch.reducer","fromProductReviews.reducer","fromProductReferences.reducer","clearProductsState","productStoreConfigFactory","ProductStoreModule","metaReducers$5","pageTitleResolvers","ProductModule","ProductModule_1","CmsTicketInterceptor","cmsTicketId","SmartEditModule","SmartEditModule_1","NgExpressEngineDecorator","ngExpressEngine","setupOptions","filePath","getServerRequestProviders","engineInstance","req","getRequestOrigin","originalUrl","protocol","StoreFinderConfig","STORE_FINDER_DATA","FIND_STORES","FIND_STORE_BY_ID","FindStoresOnHold","FindStores","FindStoresFail","FindStoresSuccess","FindStoreById","FindStoreByIdFail","FindStoreByIdSuccess","ViewAllStores","ViewAllStoresFail","ViewAllStoresSuccess","getStoreFinderState","storesState","findStores","getFindStoresState","ɵ0$I","getFindStoresEntities","ɵ1$s","getStoresLoading","ɵ2$j","getViewAllStoresState","viewAllStores","getViewAllStoresEntities","getViewAllStoresLoading","StoreFinderService","geolocationWatchId","StoreFinderSelectors.getStoresLoading","StoreFinderSelectors.getFindStoresEntities","StoreFinderSelectors.getViewAllStoresLoading","StoreFinderSelectors.getViewAllStoresEntities","findStoresAction","useMyLocation","clearWatchGeolocation","StoreFinderActions.FindStoresOnHold","navigator","geolocation","watchPosition","pos","coords","StoreFinderActions.FindStores","StoreFinderActions.ViewAllStores","viewStoreById","StoreFinderActions.FindStoreById","callbackAction","clearWatch","StoreDataService","weekDays","0","1","2","3","4","5","6","getStoreLatitude","geoPoint","getStoreLongitude","getStoreClosingTime","requestedDaySchedule","getSchedule","closed","closingTime","formattedHour","getStoreOpeningTime","openingTime","weekday","getDay","openingHours","weekDayOpeningList","weekDayOpeningListItem","weekDay","ExternalJsFileLoader","src","createElement","parseParams","async","addEventListener","head","appendChild","keysArray","GoogleMapRendererService","externalJsFileLoader","storeDataService","googleMap","renderMap","mapElement","locations","selectMarkerHandler","googleMaps","apiUrl","apiKey","drawMap","centerMap","latitute","panTo","lat","lng","setZoom","selectedMarkerScale","defineMapCenter","google","maps","LatLng","initMap","mapCenter","mapProp","center","scale","mapTypeId","MapTypeId","ROADMAP","gestureHandling","createMarkers","markers","marker","Marker","setMap","addListener","setAnimation","Animation","BOUNCE","defaultStoreFinderConfig","FindStoresEffect","storeFinderConnector","findStores$","StoreFinderActions.FIND_STORES","StoreFinderActions.FindStoresSuccess","StoreFinderActions.FindStoresFail","findStoreById$","StoreFinderActions.FIND_STORE_BY_ID","StoreFinderActions.FindStoreByIdSuccess","StoreFinderActions.FindStoreByIdFail","ViewAllStoresEffect","viewAllStores$","StoreFinderActions.ViewAllStoresSuccess","StoreFinderActions.ViewAllStoresFail","StoreFinderStoreModule","StoreFinderCoreModule","UserConnector","UserConsentConnector","UserPaymentConnector","UserOrderConnector","getHistory","getReturnRequestDetail","getReturnRequestList","CustomerCouponConnector","UserInterestsConnector","ConsentService","checkConsentGivenByTemplateId","isAnonymousConsentType","checkConsentWithdrawnByTemplateId","isConsentType","UserAddressService","loadAddresses","addUserAddress","UserActions.AddUserAddress","setAddressAsDefault","UserActions.UpdateUserAddress","defaultAddress","updateUserAddress","deleteUserAddress","UserActions.DeleteUserAddress","UsersSelectors.getAddresses","UsersSelectors.getAddressesLoading","UsersSelectors.getAddressesLoadedSuccess","loadDeliveryCountries","UserActions.LoadDeliveryCountries","getDeliveryCountries","UsersSelectors.getAllDeliveryCountries","getCountry","UsersSelectors.countrySelectorFactory","UserActions.LoadRegions","clearRegions","UserActions.ClearRegions","UsersSelectors.getRegionsDataAndLoading","UserOrderService","UsersSelectors.getOrderDetails","loadOrderDetails","UserActions.LoadOrderDetails","clearOrderDetails","UserActions.ClearOrderDetails","getOrderHistoryList","UsersSelectors.getOrdersState","orderListState","loadOrderList","getOrderHistoryListLoaded","UsersSelectors.getOrdersLoaded","UserActions.LoadUserOrders","clearOrderList","UserActions.ClearUserOrders","UsersSelectors.getConsignmentTracking","loadConsignmentTracking","UserActions.LoadConsignmentTracking","clearConsignmentTracking","UserActions.ClearConsignmentTracking","UserActions.CancelOrder","getCancelOrderLoading","getCancelOrderSuccess","resetCancelOrderProcessState","UserActions.ResetCancelOrderProcess","CustomerCouponService","loadCustomerCoupons","UserActions.LoadCustomerCoupons","UsersSelectors.getCustomerCouponsState","getClaimCustomerCouponResultLoading","customerCouponsState","UsersSelectors.getCustomerCouponsLoaded","UsersSelectors.getCustomerCouponsLoading","subscribeCustomerCoupon","UserActions.SubscribeCustomerCoupon","getSubscribeCustomerCouponResultLoading","getSubscribeCustomerCouponResultSuccess","getSubscribeCustomerCouponResultError","unsubscribeCustomerCoupon","UserActions.UnsubscribeCustomerCoupon","getUnsubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultSuccess","getUnsubscribeCustomerCouponResultError","UserActions.ClaimCustomerCoupon","getClaimCustomerCouponResultSuccess","UserPaymentService","loadPaymentMethods","UsersSelectors.getPaymentMethods","UsersSelectors.getPaymentMethodsLoading","UsersSelectors.getPaymentMethodsLoadedSuccess","setPaymentMethodAsDefault","paymentMethodId","UserActions.SetDefaultUserPaymentMethod","deletePaymentMethod","UserActions.DeleteUserPaymentMethod","UsersSelectors.getAllBillingCountries","loadBillingCountries","UserActions.LoadBillingCountries","OrderReturnRequestService","createOrderReturnRequest","UserActions.CreateOrderReturnRequest","UsersSelectors.getOrderReturnRequest","UsersSelectors.getOrderReturnRequestListState","returnListState","loadOrderReturnRequestList","loadOrderReturnRequestDetail","UserActions.LoadOrderReturnRequest","UserActions.LoadOrderReturnRequestList","clearOrderReturnRequestList","UserActions.ClearOrderReturnRequestList","getReturnRequestLoading","UsersSelectors.getOrderReturnRequestLoading","getReturnRequestSuccess","UsersSelectors.getOrderReturnRequestSuccess","clearOrderReturnRequestDetail","UserActions.ClearOrderReturnRequest","cancelOrderReturnRequest","UserActions.CancelOrderReturnRequest","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","resetCancelReturnRequestProcessState","UserActions.ResetCancelReturnProcess","UserNotificationPreferenceService","UsersSelectors.getPreferences","UsersSelectors.getEnabledPreferences","loadPreferences","UserActions.LoadNotificationPreferences","clearPreferences","UserActions.ClearNotificationPreferences","UsersSelectors.getPreferencesLoading","updatePreferences","UserActions.UpdateNotificationPreferences","getUpdatePreferencesResultLoading","resetNotificationPreferences","UserActions.ResetNotificationPreferences","UserInterestsService","loadProductInterests","UserActions.LoadProductInterests","UsersSelectors.getInterests","getAndLoadProductInterests","UsersSelectors.getInterestsState","interestListState","getProdutInterestsLoading","UsersSelectors.getInterestsLoading","removeProdutInterest","singleDelete","UserActions.RemoveProductInterest","getRemoveProdutInterestLoading","getRemoveProdutInterestSuccess","addProductInterest","UserActions.AddProductInterest","getAddProductInterestSuccess","getAddProductInterestError","resetAddInterestState","UserActions.ResetAddInterestState","resetRemoveInterestState","UserActions.ResetRemoveInterestState","clearProductInterests","UserActions.ClearProductInterests","initialState$k","countryEntities","initialState$l","initialState$m","initialState$n","initialState$o","initialState$p","initialState$q","initialState$s","titleEntities","initialState$t","initialState$u","updatedConsentTemplate_1","initialState$v","updatedDetails","sorts","initialState$w","coupons","initialState$x","updatedCustomerCoupon_1","customerCoupons_1","customerCoupon","couponId","updatedCouponCode_1","customerCoupons_2","notificationOn","initialState$y","returnRequests","initialState$z","fromUserDetailsReducer.reducer","fromAddressesReducer.reducer","fromBillingCountriesReducer.reducer","fromUserConsentsReducer.reducer","fromPaymentReducer.reducer","fromUserOrdersReducer.reducer","fromOrderDetailsReducer.reducer","fromOrderReturnRequestReducer.reducer","fromDeliveryCountries.reducer","fromTitlesReducer.reducer","fromRegionsReducer.reducer","fromResetPasswordReducer.reducer","fromConsignmentTrackingReducer.reducer","fromCustomerCouponReducer.reducer","fromNotificationPreferenceReducer.reducer","fromInterestsReducer.reducer","clearUserState","BillingCountriesEffect","loadBillingCountries$","BILLING","UserActions.LoadBillingCountriesSuccess","UserActions.LoadBillingCountriesFail","ClearMiscsDataEffect","clearMiscsData$","UserActions.ClearUserMiscsData","ConsignmentTrackingEffects","userOrderConnector","loadConsignmentTracking$","UserActions.LoadConsignmentTrackingSuccess","UserActions.LoadConsignmentTrackingFail","DeliveryCountriesEffects","loadDeliveryCountries$","SHIPPING","UserActions.LoadDeliveryCountriesSuccess","UserActions.LoadDeliveryCountriesFail","ForgotPasswordEffects","userAccountConnector","requestForgotPasswordEmail$","UserActions.ForgotPasswordEmailRequestSuccess","UserActions.ForgotPasswordEmailRequestFail","NotificationPreferenceEffects","connector","loadPreferences$","UserActions.LoadNotificationPreferencesSuccess","UserActions.LoadNotificationPreferencesFail","updatePreferences$","UserActions.UpdateNotificationPreferencesSuccess","UserActions.UpdateNotificationPreferencesFail","OrderDetailsEffect","orderConnector","loadOrderDetails$","UserActions.LoadOrderDetailsSuccess","UserActions.LoadOrderDetailsFail","cancelOrder$","UserActions.CancelOrderSuccess","UserActions.CancelOrderFail","OrderReturnRequestEffect","createReturnRequest$","returnRequest","UserActions.CreateOrderReturnRequestSuccess","UserActions.CreateOrderReturnRequestFail","loadReturnRequest$","UserActions.LoadOrderReturnRequestSuccess","UserActions.LoadOrderReturnRequestFail","cancelReturnRequest$","UserActions.CancelOrderReturnRequestSuccess","UserActions.CancelOrderReturnRequestFail","loadReturnRequestList$","returnRequestList","UserActions.LoadOrderReturnRequestListSuccess","UserActions.LoadOrderReturnRequestListFail","UserPaymentMethodsEffects","userPaymentMethodConnector","loadUserPaymentMethods$","UserActions.LoadUserPaymentMethodsSuccess","UserActions.LoadUserPaymentMethodsFail","setDefaultUserPaymentMethod$","UserActions.SetDefaultUserPaymentMethodSuccess","UserActions.SetDefaultUserPaymentMethodFail","deleteUserPaymentMethod$","UserActions.DeleteUserPaymentMethodSuccess","UserActions.DeleteUserPaymentMethodFail","RegionsEffects","loadRegions$","countryCode","UserActions.LoadRegionsSuccess","UserActions.LoadRegionsFail","resetRegions$","ResetPasswordEffects","resetPassword$","UserActions.ResetPasswordSuccess","UserActions.ResetPasswordFail","TitlesEffects","loadTitles$","UserActions.LoadTitlesSuccess","UserActions.LoadTitlesFail","UpdateEmailEffects","updateEmail$","UserActions.UpdateEmailSuccessAction","UserActions.UpdateEmailErrorAction","UpdatePasswordEffects","updatePassword$","UserActions.UpdatePasswordSuccess","UserActions.UpdatePasswordFail","UserAddressesEffects","userAddressService","loadUserAddresses$","UserActions.LoadUserAddressesSuccess","UserActions.LoadUserAddressesFail","addUserAddress$","UserActions.AddUserAddressSuccess","UserActions.AddUserAddressFail","updateUserAddress$","UserActions.UpdateUserAddressSuccess","UserActions.UpdateUserAddressFail","deleteUserAddress$","UserActions.DeleteUserAddressSuccess","UserActions.DeleteUserAddressFail","showGlobalMessageOnAddSuccess$","showGlobalMessageOnUpdateSuccess$","showGlobalMessageOnDeleteSuccess$","UserConsentsEffect","userConsentConnector","resetConsents$","getConsents$","UserActions.LoadUserConsentsSuccess","UserActions.LoadUserConsentsFail","giveConsent$","UserActions.GiveUserConsentSuccess","UserActions.GiveUserConsentFail","withdrawConsent$","UserActions.WithdrawUserConsentSuccess","UserActions.WithdrawUserConsentFail","UserDetailsEffects","userConnector","loadUserDetails$","UserActions.LoadUserDetailsSuccess","UserActions.LoadUserDetailsFail","updateUserDetails$","UserActions.UpdateUserDetailsSuccess","UserActions.UpdateUserDetailsFail","UserOrdersEffect","loadUserOrders$","UserActions.LoadUserOrdersSuccess","UserActions.LoadUserOrdersFail","resetUserOrders$","UserRegisterEffects","registerUser$","UserActions.RegisterUserSuccess","UserActions.RegisterUserFail","registerGuest$","UserActions.RegisterGuestSuccess","UserActions.RegisterGuestFail","removeUser$","UserActions.RemoveUserSuccess","UserActions.RemoveUserFail","CustomerCouponEffects","customerCouponConnector","loadCustomerCoupons$","fromCustomerCouponsAction.LoadCustomerCouponsSuccess","fromCustomerCouponsAction.LoadCustomerCouponsFail","subscribeCustomerCoupon$","fromCustomerCouponsAction.SubscribeCustomerCouponSuccess","fromCustomerCouponsAction.SubscribeCustomerCouponFail","unsubscribeCustomerCoupon$","fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess","fromCustomerCouponsAction.UnsubscribeCustomerCouponFail","claimCustomerCoupon$","fromCustomerCouponsAction.ClaimCustomerCouponSuccess","fromCustomerCouponsAction.ClaimCustomerCouponFail","ProductInterestsEffect","userInterestsConnector","loadProductInteres$","interests","UserActions.LoadProductInterestsSuccess","UserActions.LoadProductInterestsFail","removeProductInterest$","UserActions.RemoveProductInterestSuccess","UserActions.RemoveProductInterestFail","addProductInterest$","UserActions.AddProductInterestSuccess","UserActions.AddProductInterestFail","UserStoreModule","metaReducers$7","RouterModule","UserModule","UserModule_1","Meta"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export function isObject(item: any): boolean {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nexport function deepMerge(target = {}, ...sources: any[]): any {\n  if (!sources.length) {\n    return target;\n  }\n  const source = sources.shift() || {};\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (source[key] instanceof Date) {\n        Object.assign(target, { [key]: source[key] });\n      } else if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, { [key]: {} });\n        }\n        deepMerge(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return deepMerge(target, ...sources);\n}\n","import { CommonModule } from '@angular/common';\r\nimport {\r\n  InjectionToken,\r\n  ModuleWithProviders,\r\n  NgModule,\r\n  Optional,\r\n  Provider,\r\n} from '@angular/core';\r\nimport { deepMerge } from './utils/deep-merge';\r\n\r\n/**\r\n * Global Configuration injection token, can be used to inject configuration to any part of the app\r\n */\r\nexport const Config = new InjectionToken('Configuration');\r\n\r\n/**\r\n * Config chunk token, can be used to provide configuration chunk and contribute to the global configuration object.\r\n * Should not be used directly, use `provideConfig` or import `ConfigModule.withConfig` instead.\r\n */\r\nexport const ConfigChunk = new InjectionToken('ConfigurationChunk');\r\n\r\n/**\r\n * Config chunk token, can be used to provide configuration chunk and contribute to the default configuration.\r\n * Should not be used directly, use `provideDefaultConfig` or `provideDefaultConfigFactory` instead.\r\n *\r\n * General rule is, that all config provided in libraries should be provided as default config.\r\n */\r\nexport const DefaultConfigChunk = new InjectionToken(\r\n  'DefaultConfigurationChunk'\r\n);\r\n\r\n/**\r\n * Helper function to provide configuration chunk using ConfigChunk token\r\n *\r\n * To provide default configuration in libraries provideDefaultConfig should be used instead.\r\n *\r\n * @param config Config object to merge with the global configuration\r\n */\r\nexport function provideConfig(\r\n  config: any = {},\r\n  defaultConfig = false\r\n): Provider {\r\n  return {\r\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\r\n    useValue: config,\r\n    multi: true,\r\n  };\r\n}\r\n\r\n/**\r\n * Helper function to provide configuration with factory function, using ConfigChunk token\r\n *\r\n * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\r\n *\r\n * @param configFactory Factory Function that will generate config object\r\n * @param deps Optional dependencies to a factory function\r\n */\r\nexport function provideConfigFactory(\r\n  configFactory: Function,\r\n  deps?: any[],\r\n  defaultConfig = false\r\n): Provider {\r\n  return {\r\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\r\n    useFactory: configFactory,\r\n    multi: true,\r\n    deps: deps,\r\n  };\r\n}\r\n\r\n/**\r\n * Helper function to provide default configuration chunk using DefaultConfigChunk token\r\n *\r\n * @param config Config object to merge with the default configuration\r\n */\r\nexport function provideDefaultConfig(config: any = {}): Provider {\r\n  return {\r\n    provide: DefaultConfigChunk,\r\n    useValue: config,\r\n    multi: true,\r\n  };\r\n}\r\n\r\n/**\r\n * Helper function to provide default configuration with factory function, using DefaultConfigChunk token\r\n *\r\n * @param configFactory Factory Function that will generate config object\r\n * @param deps Optional dependencies to a factory function\r\n */\r\nexport function provideDefaultConfigFactory(\r\n  configFactory: Function,\r\n  deps?: any[]\r\n): Provider {\r\n  return {\r\n    provide: DefaultConfigChunk,\r\n    useFactory: configFactory,\r\n    multi: true,\r\n    deps: deps,\r\n  };\r\n}\r\n\r\n/**\r\n * Factory function that merges all configurations chunks. Should not be used directly without explicit reason.\r\n *\r\n */\r\nexport function configurationFactory(\r\n  configChunks: any[] = [],\r\n  defaultConfigChunks: any[] = []\r\n) {\r\n  const config = deepMerge(\r\n    {},\r\n    ...(defaultConfigChunks ?? []),\r\n    ...(configChunks ?? [])\r\n  );\r\n  return config;\r\n}\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [],\r\n})\r\nexport class ConfigModule {\r\n  /**\r\n   * Import ConfigModule and contribute config to the global configuration\r\n   *\r\n   * To provide default configuration in libraries provideDefaultConfig should be used instead.\r\n   *\r\n   * @param config Config object to merge with the global configuration\r\n   */\r\n  static withConfig(config: object): ModuleWithProviders<ConfigModule> {\r\n    return {\r\n      ngModule: ConfigModule,\r\n      providers: [provideConfig(config)],\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Import ConfigModule and contribute config to the global configuration using factory function\r\n   *\r\n   * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\r\n   *\r\n   * @param configFactory Factory function that will generate configuration\r\n   * @param deps Optional dependencies to factory function\r\n   */\r\n  static withConfigFactory(\r\n    configFactory: Function,\r\n    deps?: any[]\r\n  ): ModuleWithProviders<ConfigModule> {\r\n    return {\r\n      ngModule: ConfigModule,\r\n      providers: [provideConfigFactory(configFactory, deps)],\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Module with providers, should be imported only once, if possible, at the root of the app.\r\n   *\r\n   * @param config\r\n   */\r\n  static forRoot(config: any = {}): ModuleWithProviders<ConfigModule> {\r\n    return {\r\n      ngModule: ConfigModule,\r\n      providers: [\r\n        provideConfig(config),\r\n        {\r\n          provide: Config,\r\n          useFactory: configurationFactory,\r\n          deps: [\r\n            [new Optional(), ConfigChunk],\r\n            [new Optional(), DefaultConfigChunk],\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { AnonymousConsentsConfig } from './anonymous-consents-config';\n\nexport const defaultAnonymousConsentsConfig: AnonymousConsentsConfig = {\n  anonymousConsents: {\n    registerConsent: 'MARKETING_NEWSLETTER',\n    showLegalDescriptionInDialog: true,\n    requiredConsents: [],\n    consentManagementPage: {\n      showAnonymousConsents: true,\n      hideConsents: [],\n    },\n  },\n};\n","import { AuthConfig } from './auth-config';\n\nexport const defaultAuthConfig: AuthConfig = {\n  authentication: {\n    client_id: 'mobile_android',\n    client_secret: 'secret',\n  },\n  backend: {\n    occ: {\n      endpoints: {\n        login: '/authorizationserver/oauth/token',\n        revoke: '/authorizationserver/oauth/revoke',\n      },\n    },\n  },\n};\n","import { HttpHeaders, HttpRequest } from '@angular/common/http';\n\nexport const USE_CLIENT_TOKEN = 'cx-use-client-token';\nexport const USE_CUSTOMER_SUPPORT_AGENT_TOKEN = 'cx-use-csagent-token';\nexport const TOKEN_REVOCATION_HEADER = 'cx-token-revocation';\n\nexport class InterceptorUtil {\n  static createHeader<T>(\n    headerName: string,\n    interceptorParam: T,\n    headers?: HttpHeaders\n  ): HttpHeaders {\n    if (headers) {\n      return headers.append(headerName, JSON.stringify(interceptorParam));\n    }\n    headers = new HttpHeaders().set(\n      headerName,\n      JSON.stringify(interceptorParam)\n    );\n    return headers;\n  }\n\n  static removeHeader(\n    headerName: string,\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    const updatedHeaders = request.headers.delete(headerName);\n    return request.clone({ headers: updatedHeaders });\n  }\n\n  static getInterceptorParam<T>(headerName: string, headers: HttpHeaders): T {\n    const rawValue = headers.get(headerName);\n    if (rawValue) {\n      return JSON.parse(rawValue);\n    }\n    return undefined;\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const ENTITY_REMOVE_ACTION = '[ENTITY] REMOVE';\nexport const ENTITY_REMOVE_ALL_ACTION = '[ENTITY] REMOVE ALL';\n\nexport interface EntityMeta {\n  entityType: string;\n  entityId: string | string[];\n  entityRemove?: boolean;\n}\n\nexport function entityMeta(type: string, id: string | string[]): EntityMeta {\n  return {\n    entityType: type,\n    entityId: id,\n  };\n}\n\nexport function entityRemoveMeta(\n  type: string,\n  id: string | string[]\n): EntityMeta {\n  return {\n    entityId: id,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport function entityRemoveAllMeta(type: string): EntityMeta {\n  return {\n    entityId: null,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport interface EntityAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityMeta;\n}\n\nexport class EntityRemoveAction implements EntityAction {\n  type = ENTITY_REMOVE_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityRemoveMeta(entityType, id);\n  }\n}\n\nexport class EntityRemoveAllAction implements EntityAction {\n  type = ENTITY_REMOVE_ALL_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string) {\n    this.meta = entityRemoveAllMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOADER_LOAD_ACTION = '[LOADER] LOAD';\nexport const LOADER_FAIL_ACTION = '[LOADER] FAIL';\nexport const LOADER_SUCCESS_ACTION = '[LOADER] SUCCESS';\nexport const LOADER_RESET_ACTION = '[LOADER] RESET';\n\nexport interface LoaderMeta {\n  entityType: string;\n  loader: {\n    load?: boolean;\n    error?: any;\n    success?: boolean;\n  };\n}\n\nexport interface LoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: LoaderMeta;\n}\n\nexport function loadMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      load: true,\n    },\n  };\n}\n\nexport function failMeta(entityType: string, error?: any): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      error: error ? error : true,\n    },\n  };\n}\n\nexport function successMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      success: true,\n    },\n  };\n}\n\nexport function resetMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {},\n  };\n}\nexport class LoaderLoadAction implements LoaderAction {\n  type = LOADER_LOAD_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = loadMeta(entityType);\n  }\n}\n\nexport class LoaderFailAction implements LoaderAction {\n  type = LOADER_FAIL_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string, error?: any) {\n    this.meta = failMeta(entityType, error);\n  }\n}\n\nexport class LoaderSuccessAction implements LoaderAction {\n  type = LOADER_SUCCESS_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = successMeta(entityType);\n  }\n}\n\nexport class LoaderResetAction implements LoaderAction {\n  type = LOADER_RESET_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = resetMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\r\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\r\nimport {\r\n  failMeta,\r\n  LoaderMeta,\r\n  loadMeta,\r\n  resetMeta,\r\n  successMeta,\r\n} from '../loader/loader.action';\r\n\r\nexport const ENTITY_LOAD_ACTION = '[ENTITY] LOAD';\r\nexport const ENTITY_FAIL_ACTION = '[ENTITY] LOAD FAIL';\r\nexport const ENTITY_SUCCESS_ACTION = '[ENTITY] LOAD SUCCESS';\r\nexport const ENTITY_RESET_ACTION = '[ENTITY] RESET';\r\n\r\nexport interface EntityLoaderMeta extends EntityMeta, LoaderMeta {}\r\n\r\nexport interface EntityLoaderAction extends Action {\r\n  readonly payload?: any;\r\n  readonly meta?: EntityLoaderMeta;\r\n}\r\n\r\nexport function entityLoadMeta(\r\n  entityType: string,\r\n  id: string | string[]\r\n): EntityLoaderMeta {\r\n  return {\r\n    ...loadMeta(entityType),\r\n    ...entityMeta(entityType, id),\r\n  };\r\n}\r\n\r\nexport function entityFailMeta(\r\n  entityType: string,\r\n  id: string | string[],\r\n  error?: any\r\n): EntityLoaderMeta {\r\n  return {\r\n    ...failMeta(entityType, error),\r\n    ...entityMeta(entityType, id),\r\n  };\r\n}\r\n\r\nexport function entitySuccessMeta(\r\n  entityType: string,\r\n  id: string | string[]\r\n): EntityLoaderMeta {\r\n  return {\r\n    ...successMeta(entityType),\r\n    ...entityMeta(entityType, id),\r\n  };\r\n}\r\n\r\nexport function entityResetMeta(\r\n  entityType: string,\r\n  id: string | string[]\r\n): EntityLoaderMeta {\r\n  return {\r\n    ...resetMeta(entityType),\r\n    ...entityMeta(entityType, id),\r\n  };\r\n}\r\n\r\nexport class EntityLoadAction implements EntityLoaderAction {\r\n  type = ENTITY_LOAD_ACTION;\r\n  readonly meta: EntityLoaderMeta;\r\n  constructor(entityType: string, id: string | string[]) {\r\n    this.meta = entityLoadMeta(entityType, id);\r\n  }\r\n}\r\n\r\nexport class EntityFailAction implements EntityLoaderAction {\r\n  type = ENTITY_FAIL_ACTION;\r\n  readonly meta: EntityLoaderMeta;\r\n  constructor(entityType: string, id: string | string[], error?: any) {\r\n    this.meta = entityFailMeta(entityType, id, error);\r\n  }\r\n}\r\n\r\nexport class EntitySuccessAction implements EntityLoaderAction {\r\n  type = ENTITY_SUCCESS_ACTION;\r\n  readonly meta: EntityLoaderMeta;\r\n  constructor(entityType: string, id: string | string[], public payload?: any) {\r\n    this.meta = entitySuccessMeta(entityType, id);\r\n  }\r\n}\r\n\r\nexport class EntityLoaderResetAction implements EntityLoaderAction {\r\n  type = ENTITY_RESET_ACTION;\r\n  readonly meta: EntityLoaderMeta;\r\n  constructor(entityType: string, id: string | string[]) {\r\n    this.meta = entityResetMeta(entityType, id);\r\n  }\r\n}\r\n","import { Action } from '@ngrx/store';\nimport { LoaderState } from './loader-state';\nimport { LoaderAction } from './loader.action';\n\nexport const initialLoaderState: LoaderState<any> = {\n  loading: false,\n  error: false,\n  success: false,\n  value: undefined,\n};\n\n/**\n * Higher order reducer that adds generic loading flag to chunk of the state\n *\n * Utilizes \"loader\" meta field of actions to set specific flags for specific\n * action (LOAD, SUCCESS, FAIL, RESET)\n */\nexport function loaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (state: LoaderState<T>, action: LoaderAction) => LoaderState<T> {\n  return (\n    state: LoaderState<T> = initialLoaderState,\n    action: LoaderAction\n  ): LoaderState<T> => {\n    if (\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType\n    ) {\n      const entity = action.meta.loader;\n\n      if (entity.load) {\n        return {\n          ...state,\n          loading: true,\n          value: reducer ? reducer(state.value, action) : state.value,\n        };\n      } else if (entity.error) {\n        return {\n          ...state,\n          loading: false,\n          error: true,\n          success: false,\n          value: reducer ? reducer(state.value, action) : undefined,\n        };\n      } else if (entity.success) {\n        return {\n          ...state,\n          value: reducer ? reducer(state.value, action) : action.payload,\n          loading: false,\n          error: false,\n          success: true,\n        };\n      } else {\n        // reset state action\n        return {\n          ...initialLoaderState,\n          value: reducer\n            ? reducer(initialLoaderState.value, action)\n            : initialLoaderState.value,\n        };\n      }\n    }\n\n    if (reducer) {\n      const newValue = reducer(state.value, action);\n      if (newValue !== state.value) {\n        return { ...state, value: newValue };\n      }\n    }\n    return state;\n  };\n}\n","import { LoaderState } from './loader-state';\n\nexport function loaderValueSelector<T>(state: LoaderState<T>): T {\n  return state.value;\n}\n\nexport function loaderLoadingSelector<T>(state: LoaderState<T>): boolean {\n  return state.loading;\n}\n\nexport function loaderErrorSelector<T>(state: LoaderState<T>): boolean {\n  return state.error;\n}\n\nexport function loaderSuccessSelector<T>(state: LoaderState<T>): boolean {\n  return state.success;\n}\n","import { LoaderState } from '../loader/loader-state';\r\nimport { initialLoaderState } from '../loader/loader.reducer';\r\nimport { EntityLoaderState } from './entity-loader-state';\r\nimport {\r\n  loaderValueSelector,\r\n  loaderLoadingSelector,\r\n  loaderErrorSelector,\r\n  loaderSuccessSelector,\r\n} from '../loader';\r\n\r\nexport function entityLoaderStateSelector<T>(\r\n  state: EntityLoaderState<T>,\r\n  id: string\r\n): LoaderState<T> {\r\n  return state.entities[id] || initialLoaderState;\r\n}\r\n\r\nexport function entityValueSelector<T>(\r\n  state: EntityLoaderState<T>,\r\n  id: string\r\n): T {\r\n  const entityState = entityLoaderStateSelector(state, id);\r\n  return loaderValueSelector(entityState);\r\n}\r\n\r\nexport function entityLoadingSelector<T>(\r\n  state: EntityLoaderState<T>,\r\n  id: string\r\n): boolean {\r\n  const entityState = entityLoaderStateSelector(state, id);\r\n  return loaderLoadingSelector(entityState);\r\n}\r\n\r\nexport function entityErrorSelector<T>(\r\n  state: EntityLoaderState<T>,\r\n  id: string\r\n): boolean {\r\n  const entityState = entityLoaderStateSelector(state, id);\r\n  return loaderErrorSelector(entityState);\r\n}\r\n\r\nexport function entitySuccessSelector<T>(\r\n  state: EntityLoaderState<T>,\r\n  id: string\r\n): boolean {\r\n  const entityState = entityLoaderStateSelector(state, id);\r\n  return loaderSuccessSelector(entityState);\r\n}\r\n","import { Action } from '@ngrx/store';\n\nimport { EntityState } from './entity-state';\nimport { EntityAction } from './entity.action';\n\nexport const initialEntityState: EntityState<any> = { entities: {} };\n\n/**\n * Higher order reducer for reusing reducer logic for multiple entities\n *\n * Utilizes entityId meta field to target entity by id in actions\n */\nexport function entityReducer<T>(\n  entityType: string,\n  reducer: (state: T, action: Action) => T\n) {\n  return (\n    state: EntityState<T> = initialEntityState,\n    action: EntityAction\n  ): EntityState<T> => {\n    let ids: string[];\n    let partitionPayload = false;\n    if (\n      action.meta &&\n      action.meta.entityType === entityType &&\n      action.meta.entityId !== undefined\n    ) {\n      ids = [].concat(action.meta.entityId);\n\n      // remove selected entities\n      if (action.meta.entityRemove) {\n        if (action.meta.entityId === null) {\n          return initialEntityState;\n        } else {\n          let removed = false;\n          const newEntities = Object.keys(state.entities).reduce((acc, cur) => {\n            if (ids.includes(cur)) {\n              removed = true;\n            } else {\n              acc[cur] = state.entities[cur];\n            }\n            return acc;\n          }, {});\n\n          return removed ? { entities: newEntities } : state;\n        }\n      }\n\n      partitionPayload =\n        Array.isArray(action.meta.entityId) && Array.isArray(action.payload);\n    } else {\n      ids = Object.keys(state.entities);\n    }\n\n    const entityUpdates: { [id: string]: T } = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const subAction = partitionPayload\n        ? { ...action, payload: action.payload[i] }\n        : action;\n      const newState = reducer(state.entities[id], subAction);\n      if (newState) {\n        entityUpdates[id] = newState;\n      }\n    }\n\n    if (Object.keys(entityUpdates).length > 0) {\n      return {\n        ...state,\n        entities: { ...state.entities, ...entityUpdates },\n      };\n    }\n\n    return state;\n  };\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { loaderReducer } from '../loader/loader.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityLoaderState } from './entity-loader-state';\nimport { EntityLoaderAction } from './entity-loader.action';\n\n/**\n * Higher order reducer that wraps LoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags\n */\nexport function entityLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityLoaderState<T>,\n  action: EntityLoaderAction\n) => EntityLoaderState<T> {\n  return entityReducer(entityType, loaderReducer(entityType, reducer));\n}\n","import { Action } from '@ngrx/store';\nimport {\n  LoaderMeta,\n  resetMeta as loaderResetMeta,\n} from '../loader/loader.action';\n\nexport const PROCESSES_INCREMENT_ACTION = '[PROCESSES LOADER] INCREMENT';\nexport const PROCESSES_DECREMENT_ACTION = '[PROCESSES LOADER] DECREMENT';\nexport const PROCESSES_LOADER_RESET_ACTION = '[PROCESSES LOADER] RESET';\n\nexport interface ProcessesLoaderMeta extends LoaderMeta {\n  entityType: string;\n  processesCountDiff?: number;\n}\n\nexport interface ProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProcessesLoaderMeta;\n}\n\nexport function processesIncrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: 1,\n  };\n}\n\nexport function processesDecrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: -1,\n  };\n}\n\nexport function processesLoaderResetMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  // processes reset action is a reset action for loader reducer, but not the other way around\n  return {\n    ...loaderResetMeta(entityType),\n    processesCountDiff: null,\n  };\n}\n\nexport class ProcessesLoaderResetAction implements ProcessesLoaderAction {\n  type = PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesLoaderResetMeta(entityType);\n  }\n}\n\nexport class ProcessesIncrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_INCREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesIncrementMeta(entityType);\n  }\n}\n\nexport class ProcessesDecrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_DECREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesDecrementMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  processesDecrementMeta,\n  processesIncrementMeta,\n  ProcessesLoaderMeta,\n  processesLoaderResetMeta,\n} from '../processes-loader/processes-loader.action';\n\nexport const ENTITY_PROCESSES_LOADER_RESET_ACTION =\n  '[ENTITY] PROCESSES LOADER RESET';\nexport const ENTITY_PROCESSES_INCREMENT_ACTION = '[ENTITY] PROCESSES INCREMENT';\nexport const ENTITY_PROCESSES_DECREMENT_ACTION = '[ENTITY] PROCESSES DECREMENT';\n\nexport interface EntityProcessesLoaderMeta\n  extends EntityMeta,\n    ProcessesLoaderMeta {}\n\nexport interface EntityProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityProcessesLoaderMeta;\n}\n\nexport function entityProcessesLoaderResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesLoaderResetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesIncrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesIncrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesDecrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesDecrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityProcessesLoaderResetAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesLoaderResetMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesIncrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_INCREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesIncrementMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesDecrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_DECREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesDecrementMeta(entityType, id);\n  }\n}\n","import { ProcessesLoaderState } from './processes-loader-state';\n\nexport function isStableSelector<T>(state: ProcessesLoaderState<T>): boolean {\n  return state.processesCount === 0 && !state.loading;\n}\n\nexport function hasPendingProcessesSelector<T>(\n  state: ProcessesLoaderState<T>\n): boolean {\n  return state.processesCount > 0;\n}\n","import { isDevMode } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { initialLoaderState, loaderReducer } from '../loader/loader.reducer';\nimport { ProcessesLoaderState } from './processes-loader-state';\nimport { ProcessesLoaderAction } from './processes-loader.action';\n\nexport const initialProcessesState: ProcessesLoaderState<any> = {\n  processesCount: 0,\n};\n\n/**\n * Higher order reducer that adds processes count\n */\nexport function processesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ProcessesLoaderState<T>,\n  action: ProcessesLoaderAction\n) => ProcessesLoaderState<T> {\n  return (\n    state: ProcessesLoaderState<T> = {\n      ...initialProcessesState,\n      ...initialLoaderState,\n    },\n    action: ProcessesLoaderAction\n  ): ProcessesLoaderState<T> => {\n    const loaderState = loaderReducer(entityType, reducer)(state, action);\n    if (action.meta && action.meta.entityType === entityType) {\n      const processesCountDiff = action.meta.processesCountDiff;\n      if (isDevMode() && state.processesCount + processesCountDiff < 0) {\n        console.error(\n          `Action '${action.type}' sets processesCount to value < 0!\\n` +\n            'Make sure to keep processesCount in sync.\\n' +\n            'There should always be only one decrement action for each increment action.\\n' +\n            \"Make sure that you don't reset state in between those actions.\\n\",\n          action\n        );\n      }\n      if (processesCountDiff) {\n        return {\n          ...loaderState,\n          processesCount: state.processesCount\n            ? state.processesCount + processesCountDiff\n            : processesCountDiff,\n        };\n      } else if (processesCountDiff === null) {\n        // reset action\n        return {\n          ...loaderState,\n          ...initialProcessesState,\n        };\n      }\n    }\n\n    return loaderState;\n  };\n}\n","import { entityLoaderStateSelector } from '../entity-loader/entity-loader.selectors';\r\nimport { initialLoaderState } from '../loader/loader.reducer';\r\nimport {\r\n  initialProcessesState,\r\n  ProcessesLoaderState,\r\n} from '../processes-loader';\r\nimport {\r\n  hasPendingProcessesSelector,\r\n  isStableSelector,\r\n} from '../processes-loader/processes-loader.selectors';\r\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\r\n\r\nconst initialProcessesLoaderState = {\r\n  ...initialLoaderState,\r\n  ...initialProcessesState,\r\n};\r\n\r\nexport function entityHasPendingProcessesSelector<T>(\r\n  state: EntityProcessesLoaderState<T>,\r\n  id: string\r\n): boolean {\r\n  const entityState = entityLoaderStateSelector(state, id);\r\n  return hasPendingProcessesSelector(entityState);\r\n}\r\n\r\nexport function entityIsStableSelector<T>(\r\n  state: EntityProcessesLoaderState<T>,\r\n  id: string\r\n): boolean {\r\n  const entityState = entityLoaderStateSelector(state, id);\r\n  return isStableSelector(entityState);\r\n}\r\n\r\nexport function entityProcessesLoaderStateSelector<T>(\r\n  state: EntityProcessesLoaderState<T>,\r\n  id: string\r\n): ProcessesLoaderState<T> {\r\n  return state.entities[id] || initialProcessesLoaderState;\r\n}\r\n","import { entityReducer } from '../entity/entity.reducer';\nimport { processesLoaderReducer } from '../processes-loader';\nimport { ProcessesLoaderAction } from '../processes-loader/processes-loader.action';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\nimport { EntityProcessesLoaderAction } from './entity-processes-loader.action';\n\n/**\n * Higher order reducer that wraps ProcessesLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic processesCount flag\n */\nexport function entityProcessesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: ProcessesLoaderAction) => T\n): (\n  state: EntityProcessesLoaderState<T>,\n  action: EntityProcessesLoaderAction\n) => EntityProcessesLoaderState<T> {\n  return entityReducer(entityType, processesLoaderReducer(entityType, reducer));\n}\n","import { EntityState } from './entity-state';\n\nexport function entitySelector<T>(state: EntityState<T>, id: string): T {\n  return state.entities[id] || undefined;\n}\n","import { deepMerge } from '../../config/utils/deep-merge';\r\nimport { StateTransferType, StorageSyncType } from '../config/state-config';\r\n\r\nconst OBJECT_SEPARATOR = '.';\r\n\r\nexport function getStateSliceValue<T, E>(keys: string, state: T): E {\r\n  return keys\r\n    .split(OBJECT_SEPARATOR)\r\n    .reduce(\r\n      (previous, current) => (previous ? previous[current] : undefined),\r\n      state\r\n    );\r\n}\r\n\r\nexport function createShellObject<T, E>(\r\n  key: string,\r\n  excludeKeys: string[],\r\n  value: T\r\n): E {\r\n  if (!key || !value || Object.keys(value).length === 0) {\r\n    return {} as E;\r\n  }\r\n\r\n  const shell = key.split(OBJECT_SEPARATOR).reduceRight((acc, previous) => {\r\n    return ({ [previous]: acc } as unknown) as T;\r\n  }, value);\r\n  return handleExclusions(key, excludeKeys, shell);\r\n}\r\n\r\nexport function getStateSlice<T, E>(\r\n  keys: string[],\r\n  excludeKeys: string[],\r\n  state: T\r\n): E {\r\n  if (keys && keys.length === 0) {\r\n    return {} as E;\r\n  }\r\n\r\n  let stateSlices = {};\r\n  for (const currentKey of keys) {\r\n    const stateValue = getStateSliceValue(currentKey, state);\r\n    const shell = createShellObject(currentKey, excludeKeys, stateValue);\r\n    stateSlices = deepMerge(stateSlices, shell);\r\n  }\r\n\r\n  return stateSlices as E;\r\n}\r\n\r\nexport function handleExclusions(\r\n  key: string,\r\n  excludeKeys: string[],\r\n  value: any\r\n): any {\r\n  const exclusionKeys = getExclusionKeys(key, excludeKeys);\r\n  if (exclusionKeys.length === 0) {\r\n    return value;\r\n  }\r\n\r\n  const finalValue = deepMerge({}, value);\r\n  for (const currentExclusionKey of exclusionKeys) {\r\n    const exclusionChunksSplit = currentExclusionKey.split(OBJECT_SEPARATOR);\r\n\r\n    let nestedTemp = finalValue;\r\n    for (let i = 0; i < exclusionChunksSplit.length; i++) {\r\n      const currentChunk = exclusionChunksSplit[i];\r\n\r\n      // last iteration\r\n      if (i === exclusionChunksSplit.length - 1) {\r\n        if (nestedTemp && nestedTemp[currentChunk]) {\r\n          delete nestedTemp[currentChunk];\r\n        }\r\n      } else {\r\n        nestedTemp = nestedTemp[currentChunk];\r\n      }\r\n    }\r\n  }\r\n\r\n  return finalValue;\r\n}\r\n\r\nexport function getExclusionKeys(key: string, excludeKeys: string[]): string[] {\r\n  if (!key || !excludeKeys) {\r\n    return [];\r\n  }\r\n\r\n  const exclusionKeys: string[] = [];\r\n  for (const exclusionKey of excludeKeys) {\r\n    if (exclusionKey.includes(key)) {\r\n      exclusionKeys.push(exclusionKey);\r\n    }\r\n  }\r\n\r\n  return exclusionKeys;\r\n}\r\n\r\nexport function filterKeysByType(\r\n  keys: { [key: string]: StorageSyncType | StateTransferType },\r\n  type: StorageSyncType | StateTransferType\r\n): string[] {\r\n  if (!keys) {\r\n    return [];\r\n  }\r\n  return Object.keys(keys).filter((key) => keys[key] === type);\r\n}\r\n","import { StateUtils } from '../../../state/utils/index';\r\nimport { ClientToken } from '../../models/token-types.model';\r\nimport { CLIENT_TOKEN_DATA } from '../auth-state';\r\n\r\nexport const LOAD_CLIENT_TOKEN = '[Token] Load Client Token';\r\nexport const LOAD_CLIENT_TOKEN_FAIL = '[Token] Load Client Token Fail';\r\nexport const LOAD_CLIENT_TOKEN_SUCCESS = '[Token] Load Client Token Success';\r\n\r\nexport class LoadClientToken extends StateUtils.LoaderLoadAction {\r\n  readonly type = LOAD_CLIENT_TOKEN;\r\n  constructor() {\r\n    super(CLIENT_TOKEN_DATA);\r\n  }\r\n}\r\n\r\nexport class LoadClientTokenFail extends StateUtils.LoaderFailAction {\r\n  readonly type = LOAD_CLIENT_TOKEN_FAIL;\r\n  constructor(public payload: any) {\r\n    super(CLIENT_TOKEN_DATA, payload);\r\n  }\r\n}\r\n\r\nexport class LoadClientTokenSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = LOAD_CLIENT_TOKEN_SUCCESS;\r\n  constructor(public payload: ClientToken) {\r\n    super(CLIENT_TOKEN_DATA);\r\n  }\r\n}\r\n\r\nexport type ClientTokenAction =\r\n  | LoadClientToken\r\n  | LoadClientTokenFail\r\n  | LoadClientTokenSuccess;\r\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\n\nexport const AUTH_FEATURE = 'auth';\nexport const CLIENT_TOKEN_DATA = '[Auth] Client Token Data';\n\nexport interface StateWithAuth {\n  [AUTH_FEATURE]: AuthState;\n}\n\nexport interface AuthState {\n  userToken: UserTokenState;\n  clientToken: LoaderState<ClientToken>;\n}\n\nexport interface UserTokenState {\n  token: UserToken;\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOGIN = '[Auth] Login';\nexport const LOGOUT = '[Auth] Logout';\nexport const LOGOUT_CUSTOMER_SUPPORT_AGENT =\n  '[Auth] Logout Customer Support Agent';\n\nexport class Login implements Action {\n  readonly type = LOGIN;\n}\n\nexport class Logout implements Action {\n  readonly type = LOGOUT;\n}\n\n// action types\nexport type LoginLogoutAction = Login | Logout;\n","import { Action } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\n\nexport const LOAD_USER_TOKEN = '[Auth] Load User Token';\nexport const LOAD_USER_TOKEN_FAIL = '[Auth] Load User Token Fail';\nexport const LOAD_USER_TOKEN_SUCCESS = '[Auth] Load User Token Success';\nexport const REFRESH_USER_TOKEN = '[Auth] Refresh User Token';\nexport const REFRESH_USER_TOKEN_FAIL = '[Auth] Refresh User Token Fail';\nexport const REFRESH_USER_TOKEN_SUCCESS = '[Auth] Refresh User Token Success';\nexport const REVOKE_USER_TOKEN = '[Auth] Revoke User Token';\nexport const REVOKE_USER_TOKEN_FAIL = '[Auth] Revoke User Token Fail';\nexport const REVOKE_USER_TOKEN_SUCCESS = '[Auth] Revoke User Token Success';\n\nexport class LoadUserToken implements Action {\n  readonly type = LOAD_USER_TOKEN;\n  constructor(public payload: { userId: string; password: string }) {}\n}\n\nexport class LoadUserTokenFail implements Action {\n  readonly type = LOAD_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserTokenSuccess implements Action {\n  readonly type = LOAD_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserToken implements Action {\n  readonly type = REFRESH_USER_TOKEN;\n  constructor(public payload: { refreshToken: string }) {}\n}\n\nexport class RefreshUserTokenSuccess implements Action {\n  readonly type = REFRESH_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserTokenFail implements Action {\n  readonly type = REFRESH_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RevokeUserToken implements Action {\n  readonly type = REVOKE_USER_TOKEN;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenSuccess implements Action {\n  readonly type = REVOKE_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenFail implements Action {\n  readonly type = REVOKE_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\n// action types\nexport type UserTokenAction =\n  | LoadUserToken\n  | LoadUserTokenFail\n  | LoadUserTokenSuccess\n  | RefreshUserToken\n  | RefreshUserTokenFail\n  | RefreshUserTokenSuccess\n  | RevokeUserToken\n  | RevokeUserTokenFail\n  | RevokeUserTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AuthState, AUTH_FEATURE, StateWithAuth } from '../auth-state';\n\nexport const getAuthState: MemoizedSelector<\n  StateWithAuth,\n  AuthState\n> = createFeatureSelector<AuthState>(AUTH_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport { ClientToken } from '../../models/token-types.model';\r\nimport { AuthState, StateWithAuth } from '../auth-state';\r\nimport { getAuthState } from './feature.selector';\r\n\r\nexport const getClientTokenState: MemoizedSelector<\r\n  StateWithAuth,\r\n  LoaderState<ClientToken>\r\n> = createSelector(getAuthState, (state: AuthState) => state.clientToken);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { UserToken } from '../../models/token-types.model';\r\nimport { AuthState, StateWithAuth, UserTokenState } from '../auth-state';\r\nimport { getAuthState } from './feature.selector';\r\n\r\nconst getUserTokenSelector = (state: UserTokenState) => state.token;\r\n\r\nexport const getUserTokenState: MemoizedSelector<\r\n  StateWithAuth,\r\n  UserTokenState\r\n> = createSelector(getAuthState, (state: AuthState) => state.userToken);\r\n\r\nexport const getUserToken: MemoizedSelector<\r\n  StateWithAuth,\r\n  UserToken\r\n> = createSelector(getUserTokenState, getUserTokenSelector);\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { filter, map, take } from 'rxjs/operators';\r\nimport {\r\n  OCC_USER_ID_ANONYMOUS,\r\n  OCC_USER_ID_CURRENT,\r\n} from '../../occ/utils/occ-constants';\r\nimport { LoaderState } from '../../state/utils/loader/loader-state';\r\nimport { ClientToken, UserToken } from '../models/token-types.model';\r\nimport { AuthActions } from '../store/actions/index';\r\nimport { StateWithAuth } from '../store/auth-state';\r\nimport { AuthSelectors } from '../store/selectors/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  constructor(protected store: Store<StateWithAuth>) {}\r\n\r\n  /**\r\n   * Loads a new user token\r\n   * @param userId\r\n   * @param password\r\n   */\r\n  authorize(userId: string, password: string): void {\r\n    this.store.dispatch(\r\n      new AuthActions.LoadUserToken({\r\n        userId: userId,\r\n        password: password,\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This function provides the userId the OCC calls should use, depending\r\n   * on whether there is an active storefront session or not.\r\n   *\r\n   * It returns the userId of the current storefront user or 'anonymous'\r\n   * in the case there are no signed in user in the storefront.\r\n   *\r\n   * The user id of a regular customer session is 'current'.  In the case of an\r\n   * asm customer emulation session, the userId will be the customerId.\r\n   */\r\n  getOccUserId(): Observable<string> {\r\n    return this.getUserToken().pipe(\r\n      map((userToken) => {\r\n        if (!!userToken && !!userToken.userId) {\r\n          return userToken.userId;\r\n        } else {\r\n          return OCC_USER_ID_ANONYMOUS;\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Calls provided callback with current user id.\r\n   *\r\n   * @param cb callback function to invoke\r\n   */\r\n  invokeWithUserId(cb: (userId: string) => any): Subscription {\r\n    return this.getOccUserId()\r\n      .pipe(take(1))\r\n      .subscribe((id) => cb(id));\r\n  }\r\n\r\n  /**\r\n   * Returns the user's token\r\n   */\r\n  getUserToken(): Observable<UserToken> {\r\n    return this.store.pipe(select(AuthSelectors.getUserToken));\r\n  }\r\n\r\n  /**\r\n   * Refreshes the user token\r\n   * @param token a user token to refresh\r\n   */\r\n  refreshUserToken(token: UserToken): void {\r\n    this.store.dispatch(\r\n      new AuthActions.RefreshUserToken({\r\n        refreshToken: token.refresh_token,\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Store the provided token\r\n   */\r\n  authorizeWithToken(token: UserToken): void {\r\n    this.store.dispatch(new AuthActions.LoadUserTokenSuccess(token));\r\n  }\r\n\r\n  /**\r\n   * Logout a storefront customer\r\n   */\r\n  logout(): void {\r\n    this.getUserToken()\r\n      .pipe(take(1))\r\n      .subscribe((userToken) => {\r\n        this.store.dispatch(new AuthActions.Logout());\r\n        if (Boolean(userToken) && userToken.userId === OCC_USER_ID_CURRENT) {\r\n          this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Returns a client token.  The client token from the store is returned if there is one.\r\n   * Otherwise, an new token is fetched from the backend and saved in the store.\r\n   */\r\n  getClientToken(): Observable<ClientToken> {\r\n    return this.store.pipe(\r\n      select(AuthSelectors.getClientTokenState),\r\n      filter((state: LoaderState<ClientToken>) => {\r\n        if (this.isClientTokenLoaded(state)) {\r\n          return true;\r\n        } else {\r\n          if (!state.loading) {\r\n            this.store.dispatch(new AuthActions.LoadClientToken());\r\n          }\r\n          return false;\r\n        }\r\n      }),\r\n      map((state: LoaderState<ClientToken>) => state.value)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Fetches a clientToken from the backend ans saves it in the store where getClientToken can use it.\r\n   * The new clientToken is returned.\r\n   */\r\n  refreshClientToken(): Observable<ClientToken> {\r\n    this.store.dispatch(new AuthActions.LoadClientToken());\r\n\r\n    return this.store.pipe(\r\n      select(AuthSelectors.getClientTokenState),\r\n      filter((state: LoaderState<ClientToken>) =>\r\n        this.isClientTokenLoaded(state)\r\n      ),\r\n      map((state: LoaderState<ClientToken>) => state.value)\r\n    );\r\n  }\r\n\r\n  protected isClientTokenLoaded(state: LoaderState<ClientToken>): boolean {\r\n    return (state.success || state.error) && !state.loading;\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the user is logged in; and `false` if the user is anonymous.\r\n   */\r\n  isUserLoggedIn(): Observable<boolean> {\r\n    return this.getUserToken().pipe(\r\n      map((userToken) => Boolean(userToken) && Boolean(userToken.access_token))\r\n    );\r\n  }\r\n}\r\n","export const OCC_USER_ID_CURRENT = 'current';\nexport const OCC_USER_ID_ANONYMOUS = 'anonymous';\nexport const OCC_USER_ID_GUEST = 'guest';\n\nexport const OCC_CART_ID_CURRENT = 'current';\n","import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { switchMap, take } from 'rxjs/operators';\r\n\r\nimport { AuthService } from '../../facade/auth.service';\r\nimport { ClientToken } from '../../models/token-types.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ClientErrorHandlingService {\r\n  constructor(protected authService: AuthService) {}\r\n\r\n  public handleExpiredClientToken(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<any> {\r\n    return this.authService.refreshClientToken().pipe(\r\n      take(1),\r\n      switchMap((token: ClientToken) => {\r\n        return next.handle(this.createNewRequestWithNewToken(request, token));\r\n      })\r\n    );\r\n  }\r\n\r\n  protected createNewRequestWithNewToken(\r\n    request: HttpRequest<any>,\r\n    token: ClientToken\r\n  ): HttpRequest<any> {\r\n    request = request.clone({\r\n      setHeaders: {\r\n        Authorization: `${token.token_type} ${token.access_token}`,\r\n      },\r\n    });\r\n    return request;\r\n  }\r\n}\r\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, startWith } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WindowRef {\n  readonly document: Document;\n\n  constructor(@Inject(DOCUMENT) document) {\n    // it's a workaround to have document property properly typed\n    // see: https://github.com/angular/angular/issues/15640\n    this.document = document;\n  }\n\n  get nativeWindow(): Window {\n    return typeof window !== 'undefined' ? window : undefined;\n  }\n\n  get sessionStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.sessionStorage : undefined;\n  }\n\n  get localStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.localStorage : undefined;\n  }\n\n  /**\n   * Returns an observable for the window resize event and emits an event\n   * every 300ms in case of resizing. An event is simulated initially.\n   *\n   * If there's no window object availale (i.e. in SSR), a null value is emitted.\n   */\n  get resize$(): Observable<any> {\n    if (!this.nativeWindow) {\n      return of(null);\n    } else {\n      return fromEvent(this.nativeWindow, 'resize').pipe(\n        debounceTime(300),\n        startWith({ target: this.nativeWindow }),\n        distinctUntilChanged()\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { UrlSegmentGroup, PRIMARY_OUTLET } from '@angular/router';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UrlParsingService {\r\n  constructor(private router: Router) {}\r\n\r\n  getPrimarySegments(url: string): string[] {\r\n    const urlTree = this.router.parseUrl(url);\r\n    return this._getPrimarySegmentsFromUrlTree(urlTree.root);\r\n  }\r\n\r\n  private _getPrimarySegmentsFromUrlTree(tree: UrlSegmentGroup): string[] {\r\n    const segments = tree.segments.map((s) => s.path);\r\n    const childrenSegments = tree.children[PRIMARY_OUTLET]\r\n      ? this._getPrimarySegmentsFromUrlTree(tree.children[PRIMARY_OUTLET])\r\n      : [];\r\n    return segments.concat(childrenSegments);\r\n  }\r\n}\r\n","export const isParam = (segment: string): boolean => segment.startsWith(':');\n\nexport const getParamName = (segment: string): string => segment.slice(1); // it just removes leading ':'\n\nexport const ensureLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path : '/' + path;\n\nexport const removeLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path.slice(1) : path;\n","import { RoutesConfig } from '../routes-config';\r\nimport { Injectable } from '@angular/core';\r\nimport { Config } from '../../../config/config.module';\r\n\r\nexport const enum RouteLoadStrategy {\r\n  /**\r\n   * Don't reload the data on navigation if it was loaded before\r\n   */\r\n  ONCE = 'once',\r\n  /**\r\n   * Always reload the data on navigation\r\n   */\r\n  ALWAYS = 'always',\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class RoutingConfig {\r\n  routing?: {\r\n    /**\r\n     * Configuration of semantic routes. Key is route's name. Value is the config specific to this route.\r\n     */\r\n    routes?: RoutesConfig;\r\n\r\n    /**\r\n     * When true, it closes the storefront for unauthorized users, except from routes that have individual config flag `protected: false`\r\n     */\r\n    protected?: boolean;\r\n\r\n    /**\r\n     * Global load strategy which is used as a fallback for loading data on each navigation\r\n     */\r\n    loadStrategy?: RouteLoadStrategy;\r\n  };\r\n}\r\n","import { Injectable, isDevMode } from '@angular/core';\r\nimport { RouteConfig } from './routes-config';\r\nimport { RouteLoadStrategy, RoutingConfig } from './config/routing-config';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class RoutingConfigService {\r\n  constructor(protected config: RoutingConfig) {}\r\n\r\n  getRouteConfig(routeName: string): RouteConfig {\r\n    const routeConfig = this.config?.routing?.routes;\r\n\r\n    const result = routeConfig && routeConfig[routeName];\r\n    if (!routeConfig || result === undefined) {\r\n      this.warn(`No path was configured for the named route '${routeName}'!`);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private warn(...args) {\r\n    if (isDevMode()) {\r\n      console.warn(...args);\r\n    }\r\n  }\r\n\r\n  getLoadStrategy(): RouteLoadStrategy {\r\n    return this.config?.routing?.loadStrategy ?? RouteLoadStrategy.ALWAYS;\r\n  }\r\n}\r\n","import { Injectable, isDevMode } from '@angular/core';\r\nimport { UrlParsingService } from './url-parsing.service';\r\nimport { RouteConfig, ParamsMapping } from '../routes-config';\r\nimport { getParamName, isParam } from './path-utils';\r\nimport { UrlCommandRoute, UrlCommands, UrlCommand } from './url-command';\r\nimport { RoutingConfigService } from '../routing-config.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SemanticPathService {\r\n  readonly ROOT_URL = ['/'];\r\n\r\n  constructor(\r\n    protected routingConfigService: RoutingConfigService,\r\n    protected urlParser: UrlParsingService\r\n  ) {}\r\n\r\n  /**\r\n   * Returns the first path alias configured for a given route name. It adds `/` at the beginning.\r\n   */\r\n  get(routeName: string): string {\r\n    const routeConfig = this.routingConfigService.getRouteConfig(routeName);\r\n    return routeConfig && Array.isArray(routeConfig.paths)\r\n      ? '/' + routeConfig.paths[0]\r\n      : undefined;\r\n  }\r\n\r\n  /**\r\n   * Transforms the array of url commands. Each command can be:\r\n   * a) string - will be left untouched\r\n   * b) object { cxRoute: <route name> } - will be replaced with semantic path\r\n   * c) object { cxRoute: <route name>, params: { ... } } - same as above, but with passed params\r\n   *\r\n   * If the first command is the object with the `cxRoute` property, returns an absolute url (with the first element of the array `'/'`)\r\n   */\r\n  transform(commands: UrlCommands): any[] {\r\n    if (!Array.isArray(commands)) {\r\n      commands = [commands];\r\n    }\r\n\r\n    const result: string[] = [];\r\n    for (const command of commands) {\r\n      if (!this.isRouteCommand(command)) {\r\n        // don't modify segment that is not route command:\r\n        result.push(command);\r\n      } else {\r\n        // generate array with url segments for given route command:\r\n        const partialResult = this.generateUrlPart(command);\r\n\r\n        if (partialResult === null) {\r\n          return this.ROOT_URL;\r\n        }\r\n\r\n        result.push(...partialResult);\r\n      }\r\n    }\r\n\r\n    if (this.shouldOutputAbsolute(commands)) {\r\n      result.unshift('/');\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  private isRouteCommand(command: UrlCommand): boolean {\r\n    return command && Boolean(command.cxRoute);\r\n  }\r\n\r\n  private shouldOutputAbsolute(commands: UrlCommands): boolean {\r\n    return this.isRouteCommand(commands[0]);\r\n  }\r\n\r\n  private generateUrlPart(command: UrlCommandRoute): string[] | null {\r\n    this.standarizeRouteCommand(command);\r\n\r\n    if (!command.cxRoute) {\r\n      return null;\r\n    }\r\n\r\n    const routeConfig = this.routingConfigService.getRouteConfig(\r\n      command.cxRoute\r\n    );\r\n\r\n    // if no route translation was configured, return null:\r\n    if (!routeConfig || !routeConfig.paths) {\r\n      return null;\r\n    }\r\n\r\n    // find first path that can satisfy it's parameters with given parameters\r\n    const path = this.findPathWithFillableParams(routeConfig, command.params);\r\n\r\n    // if there is no configured path that can be satisfied with given params, return null\r\n    if (!path) {\r\n      return null;\r\n    }\r\n\r\n    const result = this.provideParamsValues(\r\n      path,\r\n      command.params,\r\n      routeConfig.paramsMapping\r\n    );\r\n\r\n    return result;\r\n  }\r\n\r\n  private standarizeRouteCommand(command: UrlCommandRoute): void {\r\n    command.params = command.params || {};\r\n  }\r\n\r\n  private provideParamsValues(\r\n    path: string,\r\n    params: object,\r\n    paramsMapping: ParamsMapping\r\n  ): string[] {\r\n    return this.urlParser.getPrimarySegments(path).map((segment) => {\r\n      if (isParam(segment)) {\r\n        const paramName = getParamName(segment);\r\n        const mappedParamName = this.getMappedParamName(\r\n          paramName,\r\n          paramsMapping\r\n        );\r\n        return params[mappedParamName];\r\n      }\r\n      return segment;\r\n    });\r\n  }\r\n\r\n  private findPathWithFillableParams(\r\n    routeConfig: RouteConfig,\r\n    params: object\r\n  ): string {\r\n    const foundPath = routeConfig.paths.find((path) =>\r\n      this.getParams(path).every((paramName) => {\r\n        const mappedParamName = this.getMappedParamName(\r\n          paramName,\r\n          routeConfig.paramsMapping\r\n        );\r\n\r\n        return params[mappedParamName] !== undefined;\r\n      })\r\n    );\r\n\r\n    if (foundPath === undefined || foundPath === null) {\r\n      this.warn(\r\n        `No configured path matches all its params to given object. `,\r\n        `Route config: `,\r\n        routeConfig,\r\n        `Params object: `,\r\n        params\r\n      );\r\n      return null;\r\n    }\r\n    return foundPath;\r\n  }\r\n\r\n  private getParams(path: string) {\r\n    return this.urlParser\r\n      .getPrimarySegments(path)\r\n      .filter(isParam)\r\n      .map(getParamName);\r\n  }\r\n\r\n  private getMappedParamName(paramName: string, paramsMapping: object): string {\r\n    if (paramsMapping) {\r\n      return paramsMapping[paramName] || paramName;\r\n    }\r\n    return paramName;\r\n  }\r\n\r\n  private warn(...args) {\r\n    if (isDevMode()) {\r\n      console.warn(...args);\r\n    }\r\n  }\r\n}\r\n","import { NavigationExtras } from '@angular/router';\nimport { Action } from '@ngrx/store';\n\nexport const ROUTER_GO = '[Router] Go';\nexport const ROUTER_GO_BY_URL = '[Router] Go By Url';\nexport const ROUTER_BACK = '[Router] Back';\nexport const ROUTER_FORWARD = '[Router] Forward';\n\nexport class RouteGoAction implements Action {\n  readonly type = ROUTER_GO;\n  constructor(\n    public payload: {\n      path: string[];\n      query?: object;\n      extras?: NavigationExtras;\n    }\n  ) {}\n}\n\nexport class RouteGoByUrlAction implements Action {\n  readonly type = ROUTER_GO_BY_URL;\n  constructor(public payload: string) {}\n}\n\nexport class RouteBackAction implements Action {\n  readonly type = ROUTER_BACK;\n}\n\nexport class RouteForwardAction implements Action {\n  readonly type = ROUTER_FORWARD;\n}\n\nexport type RoutingAction =\n  | RouteGoAction\n  | RouteGoByUrlAction\n  | RouteBackAction\n  | RouteForwardAction;\n","import {\r\n  createFeatureSelector,\r\n  createSelector,\r\n  MemoizedSelector,\r\n} from '@ngrx/store';\r\nimport { PageContext } from '../../models/page-context.model';\r\nimport { RouterState, ROUTING_FEATURE, State } from '../routing-state';\r\n\r\nexport const getRouterFeatureState: MemoizedSelector<\r\n  any,\r\n  State\r\n> = createFeatureSelector<State>(ROUTING_FEATURE);\r\n\r\nexport const getRouterState: MemoizedSelector<\r\n  any,\r\n  RouterState\r\n> = createSelector(getRouterFeatureState, (state) => state.router);\r\n\r\nexport const getPageContext: MemoizedSelector<\r\n  any,\r\n  PageContext\r\n> = createSelector(\r\n  getRouterState,\r\n  (routingState: RouterState) =>\r\n    (routingState.state && routingState.state.context) || { id: '' }\r\n);\r\n\r\nexport const getNextPageContext: MemoizedSelector<\r\n  any,\r\n  PageContext\r\n> = createSelector(\r\n  getRouterState,\r\n  (routingState: RouterState) =>\r\n    routingState.nextState && routingState.nextState.context\r\n);\r\n\r\nexport const isNavigating: MemoizedSelector<any, boolean> = createSelector(\r\n  getNextPageContext,\r\n  (context) => !!context\r\n);\r\n","import { Params } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { PageContext } from '../models/page-context.model';\n\nexport const ROUTING_FEATURE = 'router';\n\nexport interface RouterState\n  extends fromNgrxRouter.RouterReducerState<ActivatedRouterStateSnapshot> {\n  nextState?: ActivatedRouterStateSnapshot;\n}\n\nexport interface ActivatedRouterStateSnapshot {\n  url: string;\n  queryParams: Params;\n  params: Params;\n  context: PageContext;\n  cmsRequired: boolean;\n}\n\nexport interface State {\n  [ROUTING_FEATURE]: RouterState;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { WindowRef } from '../../window/window-ref';\nimport { SemanticPathService } from '../configurable-routes/url-translation/semantic-path.service';\nimport { UrlCommands } from '../configurable-routes/url-translation/url-command';\nimport { PageContext } from '../models/page-context.model';\nimport { RoutingActions } from '../store/actions/index';\nimport { RouterState } from '../store/routing-state';\nimport { RoutingSelector } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoutingService {\n  constructor(\n    protected store: Store<RouterState>,\n    protected winRef: WindowRef,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Get the current router state\n   */\n  getRouterState(): Observable<RouterState> {\n    return this.store.pipe(select(RoutingSelector.getRouterState));\n  }\n\n  /**\n   * Get the `PageContext` from the state\n   */\n  getPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getPageContext));\n  }\n\n  /**\n   * Get the next `PageContext` from the state\n   */\n  getNextPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getNextPageContext));\n  }\n\n  /**\n   * Get the `isNavigating` info from the state\n   */\n  isNavigating(): Observable<boolean> {\n    return this.store.pipe(select(RoutingSelector.isNavigating));\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param commands: url commands\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  go(commands: UrlCommands, query?: object, extras?: NavigationExtras): void {\n    const path = this.semanticPathService.transform(commands);\n\n    return this.navigate(path, query, extras);\n  }\n\n  /**\n   * Navigation using URL\n   * @param url\n   */\n  goByUrl(url: string) {\n    this.store.dispatch(new RoutingActions.RouteGoByUrlAction(url));\n  }\n\n  /**\n   * Navigating back\n   */\n  back(): void {\n    const isLastPageInApp = this.winRef.document.referrer.includes(\n      this.winRef.nativeWindow.location.origin\n    );\n    if (isLastPageInApp) {\n      this.store.dispatch(new RoutingActions.RouteBackAction());\n      return;\n    }\n    this.go(['/']);\n    return;\n  }\n\n  /**\n   * Navigating forward\n   */\n  forward(): void {\n    this.store.dispatch(new RoutingActions.RouteForwardAction());\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param path\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  protected navigate(\n    path: any[],\n    query?: object,\n    extras?: NavigationExtras\n  ): void {\n    this.store.dispatch(\n      new RoutingActions.RouteGoAction({\n        path,\n        query,\n        extras,\n      })\n    );\n  }\n}\n","import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, switchMap, take, tap } from 'rxjs/operators';\r\nimport { RoutingService } from '../../../routing/facade/routing.service';\r\nimport { AuthService } from '../../facade/auth.service';\r\nimport { UserToken } from '../../models/token-types.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserErrorHandlingService {\r\n  constructor(\r\n    protected authService: AuthService,\r\n    protected routingService: RoutingService\r\n  ) {}\r\n\r\n  public handleExpiredUserToken(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<UserToken>> {\r\n    return this.handleExpiredToken().pipe(\r\n      switchMap((token: UserToken) => {\r\n        return next.handle(this.createNewRequestWithNewToken(request, token));\r\n      })\r\n    );\r\n  }\r\n\r\n  public handleExpiredRefreshToken(): void {\r\n    // Logout user\r\n    this.authService.logout();\r\n  }\r\n\r\n  protected handleExpiredToken(): Observable<UserToken> {\r\n    let oldToken: UserToken;\r\n    return this.authService.getUserToken().pipe(\r\n      tap((token: UserToken) => {\r\n        if (token.access_token && token.refresh_token && !oldToken) {\r\n          this.authService.refreshUserToken(token);\r\n        } else if (!token.access_token && !token.refresh_token) {\r\n          this.routingService.go({ cxRoute: 'login' });\r\n        } else if (!token.refresh_token) {\r\n          this.authService.logout();\r\n          this.routingService.go({ cxRoute: 'login' });\r\n        }\r\n        oldToken = oldToken || token;\r\n      }),\r\n      filter(\r\n        (token: UserToken) => oldToken.access_token !== token.access_token\r\n      ),\r\n      take(1)\r\n    );\r\n  }\r\n\r\n  protected createNewRequestWithNewToken(\r\n    request: HttpRequest<any>,\r\n    token: UserToken\r\n  ): HttpRequest<any> {\r\n    request = request.clone({\r\n      setHeaders: {\r\n        Authorization: `${token.token_type} ${token.access_token}`,\r\n      },\r\n    });\r\n    return request;\r\n  }\r\n}\r\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AuthService } from '../facade/auth.service';\nimport { ClientErrorHandlingService } from '../services/client-error/client-error-handling.service';\nimport { UserErrorHandlingService } from '../services/user-error/user-error-handling.service';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthErrorInterceptor implements HttpInterceptor {\n  constructor(\n    private userErrorHandlingService: UserErrorHandlingService,\n    private clientErrorHandlingService: ClientErrorHandlingService,\n    private authService: AuthService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isClientTokenRequest = this.isClientTokenRequest(request);\n    if (isClientTokenRequest) {\n      request = InterceptorUtil.removeHeader(USE_CLIENT_TOKEN, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          switch (errResponse.status) {\n            case 401: // Unauthorized\n              if (isClientTokenRequest) {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.clientErrorHandlingService.handleExpiredClientToken(\n                    request,\n                    next\n                  );\n                }\n                // user token request\n              } else {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.userErrorHandlingService.handleExpiredUserToken(\n                    request,\n                    next\n                  );\n                } else if (\n                  // Refresh expired token\n                  // Check that the OAUTH endpoint was called and the error is for refresh token is expired\n                  errResponse.url.includes(OAUTH_ENDPOINT) &&\n                  errResponse.error.error === 'invalid_token'\n                ) {\n                  this.userErrorHandlingService.handleExpiredRefreshToken();\n                  return of();\n                }\n              }\n              break;\n            case 400: // Bad Request\n              if (\n                errResponse.url.includes(OAUTH_ENDPOINT) &&\n                errResponse.error.error === 'invalid_grant'\n              ) {\n                if (request.body.get('grant_type') === 'refresh_token') {\n                  // refresh token fail, force user logout\n                  this.authService.logout();\n                }\n              }\n              break;\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isClientTokenRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CLIENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n\n  private isExpiredToken(resp: HttpErrorResponse): boolean {\n    if (\n      resp.error &&\n      resp.error.errors &&\n      resp.error.errors instanceof Array &&\n      resp.error.errors[0]\n    ) {\n      return resp.error.errors[0].type === 'InvalidTokenError';\n    }\n    return false;\n  }\n}\n","export class DynamicTemplate {\n  static resolve(templateString: string, templateVariables: Object) {\n    for (const variableLabel of Object.keys(templateVariables)) {\n      const placeholder = new RegExp('\\\\${' + variableLabel + '}', 'g');\n      templateString = templateString.replace(\n        placeholder,\n        templateVariables[variableLabel]\n      );\n    }\n    return templateString;\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\n\n/**\n * Helper function for safely getting context parameter config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterValues(\n  config: SiteContextConfig,\n  parameter: string\n): string[] {\n  return (config.context && config.context[parameter]) || [];\n}\n\n/**\n * Helper function for calculating default value for context parameter from config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterDefault(\n  config: SiteContextConfig,\n  parameter: string\n): string {\n  const param = getContextParameterValues(config, parameter);\n  return param && param.length ? param[0] : undefined;\n}\n","import { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\nexport enum StorageSyncType {\r\n  NO_STORAGE = 'NO_STORAGE',\r\n  LOCAL_STORAGE = 'LOCAL_STORAGE',\r\n  SESSION_STORAGE = 'SESSION_STORAGE',\r\n}\r\n\r\nexport enum StateTransferType {\r\n  TRANSFER_STATE = 'SSR',\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class StateConfig {\r\n  state?: {\r\n    storageSync?: {\r\n      /**\r\n       * A key name for the data stored in `localStorage`.\r\n       * Default is `DEFAULT_LOCAL_STORAGE_KEY`.\r\n       */\r\n      localStorageKeyName?: string;\r\n      /**\r\n       * A key name for the data stored in `sessionStorage`.\r\n       * Default is `DEFAULT_SESSION_STORAGE_KEY`.\r\n       */\r\n      sessionStorageKeyName?: string;\r\n      /**\r\n       * A set of state keys that should be synced with the specified browser's storage.\r\n       */\r\n      keys?: {\r\n        [key: string]: StorageSyncType;\r\n      };\r\n      /**\r\n       * A set of keys not to sync with the specified browser's storage.\r\n       */\r\n      excludeKeys?: {\r\n        [key: string]: StorageSyncType;\r\n      };\r\n    };\r\n    ssrTransfer?: {\r\n      keys?: {\r\n        /**\r\n         * A set of state keys that should be transferred from server.\r\n         */\r\n        [key: string]: StateTransferType;\r\n      };\r\n    };\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class SiteContextConfig {\r\n  context?: {\r\n    urlParameters?: string[];\r\n    [contextName: string]: string[];\r\n  };\r\n}\r\n","import { Action } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\n\nexport const LOAD_BASE_SITE = '[Site-context] Load BaseSite';\nexport const LOAD_BASE_SITE_FAIL = '[Site-context] Load BaseSite Fail';\nexport const LOAD_BASE_SITE_SUCCESS = '[Site-context] Load BaseSite Success';\nexport const SET_ACTIVE_BASE_SITE = '[Site-context] Set Active BaseSite';\nexport const BASE_SITE_CHANGE = '[Site-context] BaseSite Change';\n\nexport class LoadBaseSite implements Action {\n  readonly type = LOAD_BASE_SITE;\n}\n\nexport class LoadBaseSiteFail implements Action {\n  readonly type = LOAD_BASE_SITE_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBaseSiteSuccess implements Action {\n  readonly type = LOAD_BASE_SITE_SUCCESS;\n  constructor(public payload: BaseSite) {}\n}\n\nexport class SetActiveBaseSite implements Action {\n  readonly type = SET_ACTIVE_BASE_SITE;\n  constructor(public payload: string) {}\n}\n\nexport class BaseSiteChange implements Action {\n  readonly type = BASE_SITE_CHANGE;\n}\n\n// action types\nexport type BaseSiteAction =\n  | LoadBaseSite\n  | LoadBaseSiteFail\n  | LoadBaseSiteSuccess\n  | SetActiveBaseSite\n  | BaseSiteChange;\n","import { Action } from '@ngrx/store';\r\nimport { Currency } from '../../../model/misc.model';\r\n\r\nexport const LOAD_CURRENCIES = '[Site-context] Load Currencies';\r\nexport const LOAD_CURRENCIES_FAIL = '[Site-context] Load Currencies Fail';\r\nexport const LOAD_CURRENCIES_SUCCESS = '[Site-context] Load Currencies Success';\r\nexport const SET_ACTIVE_CURRENCY = '[Site-context] Set Active Currency';\r\nexport const CURRENCY_CHANGE = '[Site-context] Currency Change';\r\n\r\nexport class LoadCurrencies implements Action {\r\n  readonly type = LOAD_CURRENCIES;\r\n}\r\n\r\nexport class LoadCurrenciesFail implements Action {\r\n  readonly type = LOAD_CURRENCIES_FAIL;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LoadCurrenciesSuccess implements Action {\r\n  readonly type = LOAD_CURRENCIES_SUCCESS;\r\n  constructor(public payload: Currency[]) {}\r\n}\r\n\r\nexport class SetActiveCurrency implements Action {\r\n  readonly type = SET_ACTIVE_CURRENCY;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class CurrencyChange implements Action {\r\n  readonly type = CURRENCY_CHANGE;\r\n  constructor(public payload: { previous: string; current: string }) {}\r\n}\r\n\r\n// action types\r\nexport type CurrenciesAction =\r\n  | LoadCurrencies\r\n  | LoadCurrenciesFail\r\n  | LoadCurrenciesSuccess\r\n  | SetActiveCurrency\r\n  | CurrencyChange;\r\n","import { Action } from '@ngrx/store';\r\nimport { Language } from '../../../model/misc.model';\r\n\r\nexport const LOAD_LANGUAGES = '[Site-context] Load Languages';\r\nexport const LOAD_LANGUAGES_FAIL = '[Site-context] Load Languages Fail';\r\nexport const LOAD_LANGUAGES_SUCCESS = '[Site-context] Load Languages Success';\r\nexport const SET_ACTIVE_LANGUAGE = '[Site-context] Set Active Language';\r\nexport const LANGUAGE_CHANGE = '[Site-context] Language Change';\r\n\r\nexport class LoadLanguages implements Action {\r\n  readonly type = LOAD_LANGUAGES;\r\n}\r\n\r\nexport class LoadLanguagesFail implements Action {\r\n  readonly type = LOAD_LANGUAGES_FAIL;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LoadLanguagesSuccess implements Action {\r\n  readonly type = LOAD_LANGUAGES_SUCCESS;\r\n  constructor(public payload: Language[]) {}\r\n}\r\n\r\nexport class SetActiveLanguage implements Action {\r\n  readonly type = SET_ACTIVE_LANGUAGE;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class LanguageChange implements Action {\r\n  readonly type = LANGUAGE_CHANGE;\r\n  constructor(public payload: { previous: string; current: string }) {}\r\n}\r\n\r\n// action types\r\nexport type LanguagesAction =\r\n  | LoadLanguages\r\n  | LoadLanguagesFail\r\n  | LoadLanguagesSuccess\r\n  | SetActiveLanguage\r\n  | LanguageChange;\r\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  SiteContextState,\n  SITE_CONTEXT_FEATURE,\n  StateWithSiteContext,\n} from '../state';\n\nexport const getSiteContextState: MemoizedSelector<\n  StateWithSiteContext,\n  SiteContextState\n> = createFeatureSelector<SiteContextState>(SITE_CONTEXT_FEATURE);\n","import { Currency, Language, BaseSite } from '../../model/misc.model';\nexport const SITE_CONTEXT_FEATURE = 'siteContext';\n\nexport interface StateWithSiteContext {\n  [SITE_CONTEXT_FEATURE]: SiteContextState;\n}\n\nexport interface SiteContextState {\n  languages: LanguagesState;\n  currencies: CurrenciesState;\n  baseSite: BaseSiteState;\n}\n\nexport interface CurrencyEntities {\n  [isocode: string]: Currency;\n}\n\nexport interface CurrenciesState {\n  entities: CurrencyEntities;\n  activeCurrency: string;\n}\nexport interface LanguagesEntities {\n  [isocode: string]: Language;\n}\n\nexport interface LanguagesState {\n  entities: LanguagesEntities;\n  activeLanguage: string;\n}\n\nexport interface BaseSiteState {\n  activeSite: string;\n  details: BaseSite;\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\nimport { SiteContextState, StateWithSiteContext } from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nexport const getActiveBaseSite: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) =>\n    state && state.baseSite && state.baseSite.activeSite\n);\n\nexport const getBaseSiteData: MemoizedSelector<\n  StateWithSiteContext,\n  BaseSite\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state && state.baseSite && state.baseSite.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { Currency } from '../../../model/misc.model';\r\nimport {\r\n  CurrenciesState,\r\n  CurrencyEntities,\r\n  SiteContextState,\r\n  StateWithSiteContext,\r\n} from '../state';\r\nimport { getSiteContextState } from './site-context.selector';\r\n\r\nconst currenciesEntitiesSelector = (state: CurrenciesState) => state.entities;\r\nconst activeCurrencySelector = (state: CurrenciesState) => state.activeCurrency;\r\n\r\nexport const getCurrenciesState: MemoizedSelector<\r\n  StateWithSiteContext,\r\n  CurrenciesState\r\n> = createSelector(\r\n  getSiteContextState,\r\n  (state: SiteContextState) => state.currencies\r\n);\r\n\r\nexport const getCurrenciesEntities: MemoizedSelector<\r\n  StateWithSiteContext,\r\n  CurrencyEntities\r\n> = createSelector(getCurrenciesState, currenciesEntitiesSelector);\r\n\r\nexport const getActiveCurrency: MemoizedSelector<\r\n  StateWithSiteContext,\r\n  string\r\n> = createSelector(getCurrenciesState, activeCurrencySelector);\r\n\r\nexport const getAllCurrencies: MemoizedSelector<\r\n  StateWithSiteContext,\r\n  Currency[]\r\n> = createSelector(getCurrenciesEntities, (entities) => {\r\n  return entities\r\n    ? Object.keys(entities).map((isocode) => entities[isocode])\r\n    : null;\r\n});\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { Language } from '../../../model/misc.model';\r\nimport {\r\n  LanguagesEntities,\r\n  LanguagesState,\r\n  SiteContextState,\r\n  StateWithSiteContext,\r\n} from '../state';\r\nimport { getSiteContextState } from './site-context.selector';\r\n\r\nconst activeLanguageSelector = (state: LanguagesState) => state.activeLanguage;\r\nconst languagesEntitiesSelector = (state: LanguagesState) => state.entities;\r\n\r\nexport const getLanguagesState: MemoizedSelector<\r\n  StateWithSiteContext,\r\n  LanguagesState\r\n> = createSelector(\r\n  getSiteContextState,\r\n  (state: SiteContextState) => state.languages\r\n);\r\n\r\nexport const getLanguagesEntities: MemoizedSelector<\r\n  StateWithSiteContext,\r\n  LanguagesEntities\r\n> = createSelector(getLanguagesState, languagesEntitiesSelector);\r\n\r\nexport const getActiveLanguage: MemoizedSelector<\r\n  StateWithSiteContext,\r\n  string\r\n> = createSelector(getLanguagesState, activeLanguageSelector);\r\n\r\nexport const getAllLanguages: MemoizedSelector<\r\n  StateWithSiteContext,\r\n  Language[]\r\n> = createSelector(getLanguagesEntities, (entities) => {\r\n  return entities\r\n    ? Object.keys(entities).map((isocode) => entities[isocode])\r\n    : null;\r\n});\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { filter, map, take, tap } from 'rxjs/operators';\r\nimport { BaseSite } from '../../model/misc.model';\r\nimport { getContextParameterDefault } from '../config/context-config-utils';\r\nimport { SiteContextConfig } from '../config/site-context-config';\r\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\r\nimport { SiteContextActions } from '../store/actions/index';\r\nimport { SiteContextSelectors } from '../store/selectors/index';\r\nimport { StateWithSiteContext } from '../store/state';\r\nimport { SiteContext } from './site-context.interface';\r\n\r\n@Injectable()\r\nexport class BaseSiteService implements SiteContext<string> {\r\n  constructor(\r\n    protected store: Store<StateWithSiteContext>,\r\n    protected config: SiteContextConfig\r\n  ) {}\r\n\r\n  /**\r\n   * Represents the current baseSite uid.\r\n   */\r\n  getActive(): Observable<string> {\r\n    return this.store.pipe(\r\n      select(SiteContextSelectors.getActiveBaseSite),\r\n      filter((active) => Boolean(active))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * We currently don't support switching baseSite at run time\r\n   */\r\n  getAll(): Observable<string[]> {\r\n    return this.getActive().pipe(map((baseSite) => [baseSite]));\r\n  }\r\n\r\n  setActive(baseSite: string): Subscription {\r\n    return this.store\r\n      .pipe(select(SiteContextSelectors.getActiveBaseSite), take(1))\r\n      .subscribe((activeBaseSite) => {\r\n        if (baseSite && activeBaseSite !== baseSite) {\r\n          this.store.dispatch(\r\n            new SiteContextActions.SetActiveBaseSite(baseSite)\r\n          );\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Initializes the active baseSite.\r\n   */\r\n  initialize(): void {\r\n    let value;\r\n    this.getActive()\r\n      .subscribe((val) => (value = val))\r\n      .unsubscribe();\r\n    if (value) {\r\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\r\n      return;\r\n    }\r\n\r\n    this.setActive(\r\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the base site details data\r\n   */\r\n  getBaseSiteData(): Observable<BaseSite> {\r\n    return this.store.pipe(\r\n      select(SiteContextSelectors.getBaseSiteData),\r\n      tap((baseSite) => {\r\n        if (Object.keys(baseSite).length === 0) {\r\n          this.store.dispatch(new SiteContextActions.LoadBaseSite());\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n","export const LANGUAGE_CONTEXT_ID = 'language';\nexport const CURRENCY_CONTEXT_ID = 'currency';\nexport const BASE_SITE_CONTEXT_ID = 'baseSite';\n","/**\n * Angular uses the native encodeURIComponent function,\n * but then un-encoded some characters that are allowed\n * to be part of the query according to IETF RFC 3986.\n * So, to make these characters still encoded, this encoder only\n * uses the encodeURIComponent.\n */\nimport { HttpParameterCodec } from '@angular/common/http';\n\nexport class CustomEncoder implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\n","import { SiteContextConfig } from '../../site-context/config/site-context-config';\r\nimport { OccEndpoints } from '../occ-models/occ-endpoints.model';\r\nimport { LoadingScopes } from './loading-scopes-config';\r\nimport { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class OccConfig extends SiteContextConfig {\r\n  backend?: {\r\n    occ?: {\r\n      baseUrl?: string;\r\n      prefix?: string;\r\n      /**\r\n       * Indicates whether or not cross-site Access-Control requests should be made\r\n       * using credentials such as cookies, authorization headers or TLS client certificates\r\n       */\r\n      useWithCredentials?: boolean;\r\n\r\n      endpoints?: OccEndpoints;\r\n      legacy?: boolean;\r\n    };\r\n    media?: {\r\n      /**\r\n       * Media URLs are typically relative, so that the host can be configured.\r\n       * Configurable media baseURLs are useful for SEO, multi-site,\r\n       * switching environments, etc.\r\n       */\r\n      baseUrl?: string;\r\n    };\r\n    loadingScopes?: LoadingScopes;\r\n  };\r\n}\r\n","import { HttpParams } from '@angular/common/http';\r\nimport { Injectable, isDevMode, Optional } from '@angular/core';\r\nimport { DynamicTemplate } from '../../config/utils/dynamic-template';\r\nimport { getContextParameterDefault } from '../../site-context/config/context-config-utils';\r\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\r\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\r\nimport { CustomEncoder } from '../adapters/cart/custom.encoder';\r\nimport { OccConfig } from '../config/occ-config';\r\nimport { DEFAULT_SCOPE } from '../occ-models/occ-endpoints.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OccEndpointsService {\r\n  private activeBaseSite: string;\r\n\r\n  constructor(\r\n    private config: OccConfig,\r\n    @Optional() private baseSiteService: BaseSiteService\r\n  ) {\r\n    this.activeBaseSite =\r\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID) || '';\r\n\r\n    if (this.baseSiteService) {\r\n      this.baseSiteService\r\n        .getActive()\r\n        .subscribe((value) => (this.activeBaseSite = value));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns and endpoint starting from the OCC baseUrl (no baseSite)\r\n   * @param endpoint Endpoint suffix\r\n   */\r\n  getRawEndpoint(endpoint: string): string {\r\n    if (!this.config?.backend?.occ) {\r\n      return '';\r\n    }\r\n    endpoint = this.config.backend.occ.endpoints?.[endpoint];\r\n\r\n    if (!endpoint.startsWith('/')) {\r\n      endpoint = '/' + endpoint;\r\n    }\r\n\r\n    return this.config.backend.occ.baseUrl + endpoint;\r\n  }\r\n\r\n  /**\r\n   * Returns base OCC endpoint (baseUrl + prefix + baseSite)\r\n   */\r\n  getBaseEndpoint(): string {\r\n    if (!this.config?.backend?.occ) {\r\n      return '';\r\n    }\r\n\r\n    return (\r\n      (this.config.backend.occ.baseUrl || '') +\r\n      this.config.backend.occ.prefix +\r\n      this.activeBaseSite\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns an OCC endpoint including baseUrl and baseSite\r\n   * @param endpoint Endpoint suffix\r\n   */\r\n  getEndpoint(endpoint: string): string {\r\n    if (!endpoint.startsWith('/')) {\r\n      endpoint = '/' + endpoint;\r\n    }\r\n    return this.getBaseEndpoint() + endpoint;\r\n  }\r\n\r\n  /**\r\n   * Returns a fully qualified OCC Url (including baseUrl and baseSite)\r\n   * @param endpoint Name of the OCC endpoint key config\r\n   * @param urlParams  URL parameters\r\n   * @param queryParams Query parameters\r\n   * @param scope\r\n   */\r\n  getUrl(\r\n    endpoint: string,\r\n    urlParams?: object,\r\n    queryParams?: object,\r\n    scope?: string\r\n  ): string {\r\n    endpoint = this.getEndpointForScope(endpoint, scope);\r\n\r\n    if (urlParams) {\r\n      Object.keys(urlParams).forEach((key) => {\r\n        urlParams[key] = encodeURIComponent(urlParams[key]);\r\n      });\r\n      endpoint = DynamicTemplate.resolve(endpoint, urlParams);\r\n    }\r\n\r\n    if (queryParams) {\r\n      let httpParamsOptions = { encoder: new CustomEncoder() };\r\n\r\n      if (endpoint.includes('?')) {\r\n        let queryParamsFromEndpoint;\r\n        [endpoint, queryParamsFromEndpoint] = endpoint.split('?');\r\n\r\n        httpParamsOptions = {\r\n          ...httpParamsOptions,\r\n          ...{ fromString: queryParamsFromEndpoint },\r\n        };\r\n      }\r\n\r\n      let httpParams = new HttpParams(httpParamsOptions);\r\n      Object.keys(queryParams).forEach((key) => {\r\n        const value = queryParams[key];\r\n        if (value !== undefined) {\r\n          if (value === null) {\r\n            httpParams = httpParams.delete(key);\r\n          } else {\r\n            httpParams = httpParams.set(key, value);\r\n          }\r\n        }\r\n      });\r\n\r\n      const params = httpParams.toString();\r\n      if (params.length) {\r\n        endpoint += '?' + params;\r\n      }\r\n    }\r\n\r\n    return this.getEndpoint(endpoint);\r\n  }\r\n\r\n  private getEndpointForScope(endpoint: string, scope?: string): string {\r\n    const endpointsConfig = this.config.backend?.occ?.endpoints;\r\n    const endpointConfig = endpointsConfig[endpoint];\r\n\r\n    if (scope) {\r\n      if (endpointConfig?.[scope]) {\r\n        return endpointConfig?.[scope];\r\n      }\r\n      if (scope === DEFAULT_SCOPE && typeof endpointConfig === 'string') {\r\n        return endpointConfig;\r\n      }\r\n      if (isDevMode()) {\r\n        console.warn(\r\n          `${endpoint} endpoint configuration missing for scope \"${scope}\"`\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      (typeof endpointConfig === 'string'\r\n        ? endpointConfig\r\n        : endpointConfig?.[DEFAULT_SCOPE]) || endpoint\r\n    );\r\n  }\r\n}\r\n","export const DEFAULT_SCOPE = 'default';\r\n\r\nexport interface OccEndpoint {\r\n  default?: string;\r\n  [scope: string]: string;\r\n}\r\n\r\nexport interface ProductOccEndpoint extends OccEndpoint {\r\n  list?: string;\r\n  details?: string;\r\n  attributes?: string;\r\n  variants?: string;\r\n}\r\n\r\nexport interface OccEndpoints {\r\n  /**\r\n   * Client login (get authorization token)\r\n   *\r\n   * @member {string}\r\n   */\r\n  login?: string | OccEndpoint;\r\n\r\n  /**\r\n   * Client logout (revoke authorization token)\r\n   *\r\n   * @member {string}\r\n   */\r\n  revoke?: string | OccEndpoint;\r\n\r\n  /**\r\n   * Get product details for scope\r\n   *\r\n   * @member Object\r\n   */\r\n  product?: string | ProductOccEndpoint;\r\n  /**\r\n   * Get reviews for a product\r\n   *\r\n   * @member {string}\r\n   */\r\n  productReviews?: string | OccEndpoint;\r\n  /**\r\n   * Get a list of product references\r\n   *\r\n   * @member {string}\r\n   */\r\n  productReferences?: string | OccEndpoint;\r\n  /**\r\n   * Get a list of products and additional data\r\n   *\r\n   * @member {string}\r\n   */\r\n  productSearch?: string | OccEndpoint;\r\n  /**\r\n   * Get a list of available suggestions\r\n   *\r\n   * @member {string}\r\n   */\r\n  productSuggestions?: string | OccEndpoint;\r\n  /**\r\n   * Get CMS component details\r\n   *\r\n   * @member {string}\r\n   */\r\n  component?: string | OccEndpoint;\r\n  /**\r\n   * Get a list of CMS component details\r\n   *\r\n   * @member {string}\r\n   */\r\n  components?: string | OccEndpoint;\r\n  /**\r\n   * Get page data with list of cms content slots\r\n   *\r\n   * @member {string}\r\n   */\r\n  pages?: string | OccEndpoint;\r\n  /**\r\n   * Get page data with list of cms content slots\r\n   *\r\n   * @member {string}\r\n   */\r\n  page?: string | OccEndpoint;\r\n  /**\r\n   * Get all carts\r\n   *\r\n   * @member {string} [carts]\r\n   */\r\n  carts?: string | OccEndpoint;\r\n  /**\r\n   * Get a cart with a given identifier\r\n   *\r\n   * @member {string} [cart]\r\n   */\r\n  cart?: string | OccEndpoint;\r\n  /**\r\n   * Creates or restore a cart for a user\r\n   *\r\n   * @member {string} [createCart]\r\n   */\r\n  createCart?: string | OccEndpoint;\r\n  /**\r\n   * Deletes a cart with a given cart id\r\n   *\r\n   * @member {string} [deleteCart]\r\n   */\r\n  deleteCart?: string | OccEndpoint;\r\n  /**\r\n   * Adds a product to the cart\r\n   *\r\n   * @member {string} [addEntries]\r\n   */\r\n  addEntries?: string | OccEndpoint;\r\n  /**\r\n   * Update quantity and store the details of a cart entry\r\n   *\r\n   * @member {string} [updateEntries]\r\n   */\r\n  updateEntries?: string | OccEndpoint;\r\n  /**\r\n   * Deletes cart entry\r\n   *\r\n   * @member {string} [removeEntries]\r\n   */\r\n  removeEntries?: string | OccEndpoint;\r\n  /**\r\n   * Assign email to cart\r\n   *\r\n   * @member {string} [addEmail]\r\n   */\r\n  addEmail?: string | OccEndpoint;\r\n  /**\r\n   * Get a store location\r\n   *\r\n   * @member {string} [page]\r\n   */\r\n  store?: string | OccEndpoint;\r\n  /**\r\n   * Get a list of store locations\r\n   *\r\n   * @member {string} [page]\r\n   */\r\n  stores?: string | OccEndpoint;\r\n  /**\r\n   * Gets a store location count per country and regions\r\n   *\r\n   * @member {string} [page]\r\n   */\r\n  storescounts?: string | OccEndpoint;\r\n  /**\r\n   * Get a list of available languages\r\n   *\r\n   * @member {string}\r\n   */\r\n  languages?: string | OccEndpoint;\r\n  /**\r\n   * Get a list of available currencies\r\n   *\r\n   * @member {string}\r\n   */\r\n  currencies?: string | OccEndpoint;\r\n  /**\r\n   * Get a list of countries\r\n   *\r\n   * @member {string}\r\n   */\r\n  countries?: string | OccEndpoint;\r\n  /**\r\n   * Fetch the list of regions for the provided country\r\n   *\r\n   * @member {string}\r\n   */\r\n  regions?: string | OccEndpoint;\r\n  /**\r\n   * Titles used for user's personal info.\r\n   *\r\n   * @member {string}\r\n   */\r\n  titles?: string | OccEndpoint;\r\n  /**\r\n   * Get user details\r\n   *\r\n   * @member {string}\r\n   */\r\n  user?: string | OccEndpoint;\r\n  /**\r\n   * Register a new user.\r\n   *\r\n   * @member {string}\r\n   */\r\n  userRegister?: string | OccEndpoint;\r\n  /**\r\n   * Request an email to reset the password\r\n   *\r\n   * @member {string}\r\n   */\r\n  userForgotPassword?: string | OccEndpoint;\r\n  /**\r\n   * Reset the password once the email is recieved.\r\n   *\r\n   * @member {string}\r\n   */\r\n  userResetPassword?: string | OccEndpoint;\r\n  /**\r\n   * Update the user id with which the user authenticates.\r\n   *\r\n   * @member {string}\r\n   */\r\n  userUpdateLoginId?: string | OccEndpoint;\r\n  /**\r\n   * Update the user's password\r\n   *\r\n   * @member {string}\r\n   */\r\n  userUpdatePassword?: string | OccEndpoint;\r\n  /**\r\n   * Payment details root endpoint.\r\n   *\r\n   * @member {string}\r\n   */\r\n  paymentDetailsAll?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for a specific payment method.\r\n   *\r\n   * @member {string}\r\n   */\r\n  paymentDetail?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for the list of one user's orders\r\n   *\r\n   * @member {string}\r\n   */\r\n  orderHistory?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for the details of one user's order\r\n   *\r\n   * @member {string}\r\n   */\r\n  orderDetail?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for anonymous consent templates\r\n   *\r\n   * @member {string}\r\n   */\r\n  anonymousConsentTemplates?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for consent templates\r\n   *\r\n   * @member {string}\r\n   */\r\n  consentTemplates?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for a user's consents\r\n   *\r\n   * @member {string}\r\n   */\r\n  consents?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for a user's specific previously given consent.\r\n   *\r\n   * @member {string}\r\n   */\r\n  consentDetail?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for a user's addresses\r\n   *\r\n   * @member {string}\r\n   */\r\n  addresses?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for a user's specific address\r\n   *\r\n   * @member {string}\r\n   */\r\n  addressDetail?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for address verification\r\n   *\r\n   * @member {string}\r\n   */\r\n  addressVerification?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for consignment tracking\r\n   *\r\n   * @member {string}\r\n   */\r\n  consignmentTracking?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for asm customer search\r\n   *\r\n   * @member {string}\r\n   */\r\n  asmCustomerSearch?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for cart voucher\r\n   *\r\n   * @member {string}\r\n   */\r\n  cartVoucher?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for coupons\r\n   *\r\n   * @member {string}\r\n   */\r\n  customerCoupons?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for claiming coupon\r\n   *\r\n   * @member {string}\r\n   */\r\n  claimCoupon?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for coupons\r\n   *\r\n   * @member {string}\r\n   */\r\n  couponNotification?: string | OccEndpoint;\r\n  /**\r\n   * Explicitly saves a cart\r\n   *\r\n   * @member {string}\r\n   */\r\n  saveCart?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for notification preference\r\n   *\r\n   * @member {string}\r\n   */\r\n  notificationPreference?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for product interests\r\n   *\r\n   * @member {string}\r\n   */\r\n  productInterests?: string | OccEndpoint;\r\n  /**\r\n   * Endpoint for getting product interests\r\n   *\r\n   * @member {string}\r\n   */\r\n  getProductInterests?: string | OccEndpoint;\r\n\r\n  /**\r\n   * Endpoint for cancel an order\r\n   */\r\n  cancelOrder?: string | OccEndpoint;\r\n\r\n  /**\r\n   * Endpoint for creating order return request\r\n   */\r\n  returnOrder?: string | OccEndpoint;\r\n\r\n  /**\r\n   * Endpoint for user's order return requests\r\n   */\r\n  orderReturns?: string | OccEndpoint;\r\n\r\n  /**\r\n   * Endpoint for order return request details\r\n   */\r\n  orderReturnDetail?: string | OccEndpoint;\r\n\r\n  /**\r\n   * Endpoint for cancelling return request\r\n   */\r\n  cancelReturn?: string | OccEndpoint;\r\n}\r\n","import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n} from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../facade/auth.service';\nimport {\n  USE_CLIENT_TOKEN,\n  InterceptorUtil,\n} from '../../occ/utils/interceptor-util';\nimport { ClientToken } from '../models/token-types.model';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ClientTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getClientToken(request).pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        if (\n          token &&\n          request.url.includes(this.occEndpoints.getBaseEndpoint())\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getClientToken(request: HttpRequest<any>): Observable<ClientToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(USE_CLIENT_TOKEN, request.headers)\n    ) {\n      return this.authService.getClientToken();\n    }\n    return of(null);\n  }\n}\n","import {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { switchMap, take } from 'rxjs/operators';\r\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\r\nimport { AuthService } from '../facade/auth.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserTokenInterceptor implements HttpInterceptor {\r\n  constructor(\r\n    private authService: AuthService,\r\n    private occEndpoints: OccEndpointsService\r\n  ) {}\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    return this.authService.getUserToken().pipe(\r\n      take(1),\r\n      switchMap((token) => {\r\n        if (\r\n          token &&\r\n          this.isOccUrl(request.url) &&\r\n          !request.headers.get('Authorization')\r\n        ) {\r\n          request = request.clone({\r\n            setHeaders: {\r\n              Authorization: `${token.token_type} ${token.access_token}`,\r\n            },\r\n          });\r\n        }\r\n\r\n        return next.handle(request);\r\n      })\r\n    );\r\n  }\r\n\r\n  private isOccUrl(url: string): boolean {\r\n    return url.includes(this.occEndpoints.getBaseEndpoint());\r\n  }\r\n}\r\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { EMPTY, Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  TOKEN_REVOCATION_HEADER,\n} from '../../occ/utils/interceptor-util';\n\n@Injectable({ providedIn: 'root' })\nexport class TokenRevocationInterceptor implements HttpInterceptor {\n  constructor() {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isTokenRevocationRequest = this.isTokenRevocationRequest(request);\n    if (isTokenRevocationRequest) {\n      request = InterceptorUtil.removeHeader(TOKEN_REVOCATION_HEADER, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((error: any) => {\n        if (isTokenRevocationRequest) {\n          return EMPTY;\n        }\n        return throwError(error);\n      })\n    );\n  }\n\n  protected isTokenRevocationRequest(request: HttpRequest<any>): boolean {\n    const isTokenRevocationHeaderPresent = InterceptorUtil.getInterceptorParam<\n      string\n    >(TOKEN_REVOCATION_HEADER, request.headers);\n    return Boolean(isTokenRevocationHeaderPresent);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AuthErrorInterceptor } from './auth-error.interceptor';\nimport { ClientTokenInterceptor } from './client-token.interceptor';\nimport { UserTokenInterceptor } from './user-token.interceptor';\nimport { TokenRevocationInterceptor } from './token-revocation.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: ClientTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: UserTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AuthErrorInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: TokenRevocationInterceptor,\n    multi: true,\n  },\n];\n","import { StateConfig } from './state-config';\n\nexport const DEFAULT_LOCAL_STORAGE_KEY = 'spartacus-local-data';\nexport const DEFAULT_SESSION_STORAGE_KEY = 'spartacus-session-data';\n\nexport const defaultStateConfig: StateConfig = {\n  state: {\n    storageSync: {\n      localStorageKeyName: DEFAULT_LOCAL_STORAGE_KEY,\n      sessionStorageKeyName: DEFAULT_SESSION_STORAGE_KEY,\n      keys: {},\n      excludeKeys: {},\n    },\n  },\n};\n","import { Action, ActionReducer, INIT, MetaReducer, UPDATE } from '@ngrx/store';\r\nimport { deepMerge } from '../../config/utils/deep-merge';\r\nimport { WindowRef } from '../../window/window-ref';\r\nimport { StateConfig, StorageSyncType } from '../config/state-config';\r\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\r\n\r\nexport function getStorageSyncReducer<T>(\r\n  winRef: WindowRef,\r\n  config?: StateConfig\r\n): MetaReducer<T, Action> {\r\n  if (\r\n    !winRef.nativeWindow ||\r\n    !config ||\r\n    !config.state ||\r\n    !config.state.storageSync ||\r\n    !config.state.storageSync.keys\r\n  ) {\r\n    return (reducer) => reducer;\r\n  }\r\n\r\n  const storageSyncConfig = config.state.storageSync;\r\n\r\n  return (reducer: ActionReducer<T, Action>): ActionReducer<T, Action> => {\r\n    return (state, action): T => {\r\n      const newState = reducer(state, action);\r\n\r\n      if (action.type === INIT || action.type === UPDATE) {\r\n        const rehydratedState = rehydrate(config, winRef);\r\n        return deepMerge({}, newState, rehydratedState);\r\n      }\r\n\r\n      if (action.type !== INIT) {\r\n        // handle local storage\r\n        const localStorageKeys = filterKeysByType(\r\n          storageSyncConfig.keys,\r\n          StorageSyncType.LOCAL_STORAGE\r\n        );\r\n        const localStorageExclusionKeys = filterKeysByType(\r\n          storageSyncConfig.excludeKeys,\r\n          StorageSyncType.LOCAL_STORAGE\r\n        );\r\n        const localStorageStateSlices = getStateSlice(\r\n          localStorageKeys,\r\n          localStorageExclusionKeys,\r\n          newState\r\n        );\r\n        persistToStorage(\r\n          config.state.storageSync.localStorageKeyName,\r\n          localStorageStateSlices,\r\n          winRef.localStorage\r\n        );\r\n\r\n        // handle session storage\r\n        const sessionStorageKeys = filterKeysByType(\r\n          storageSyncConfig.keys,\r\n          StorageSyncType.SESSION_STORAGE\r\n        );\r\n        const sessionStorageExclusionKeys = filterKeysByType(\r\n          storageSyncConfig.excludeKeys,\r\n          StorageSyncType.SESSION_STORAGE\r\n        );\r\n        const sessionStorageStateSlices = getStateSlice(\r\n          sessionStorageKeys,\r\n          sessionStorageExclusionKeys,\r\n          newState\r\n        );\r\n        persistToStorage(\r\n          config.state.storageSync.sessionStorageKeyName,\r\n          sessionStorageStateSlices,\r\n          winRef.sessionStorage\r\n        );\r\n      }\r\n\r\n      return newState;\r\n    };\r\n  };\r\n}\r\n\r\nexport function rehydrate<T>(config: StateConfig, winRef: WindowRef): T {\r\n  const localStorageValue = readFromStorage(\r\n    winRef.localStorage,\r\n    config.state.storageSync.localStorageKeyName\r\n  );\r\n  const sessionStorageValue = readFromStorage(\r\n    winRef.sessionStorage,\r\n    config.state.storageSync.sessionStorageKeyName\r\n  );\r\n\r\n  return deepMerge(localStorageValue, sessionStorageValue);\r\n}\r\n\r\nexport function exists(value: Object): boolean {\r\n  if (value != null) {\r\n    if (typeof value === 'object') {\r\n      return Object.keys(value).length !== 0;\r\n    }\r\n    return value !== '';\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function getStorage(\r\n  storageType: StorageSyncType,\r\n  winRef: WindowRef\r\n): Storage {\r\n  let storage: Storage;\r\n\r\n  switch (storageType) {\r\n    case StorageSyncType.LOCAL_STORAGE: {\r\n      storage = winRef.localStorage;\r\n      break;\r\n    }\r\n    case StorageSyncType.SESSION_STORAGE: {\r\n      storage = winRef.sessionStorage;\r\n      break;\r\n    }\r\n    case StorageSyncType.NO_STORAGE: {\r\n      storage = undefined;\r\n      break;\r\n    }\r\n\r\n    default: {\r\n      storage = winRef.sessionStorage;\r\n    }\r\n  }\r\n\r\n  return storage;\r\n}\r\n\r\nexport function persistToStorage(\r\n  configKey: string,\r\n  value: any,\r\n  storage: Storage\r\n): void {\r\n  if (!isSsr(storage) && value) {\r\n    storage.setItem(configKey, JSON.stringify(value));\r\n  }\r\n}\r\n\r\nexport function readFromStorage(storage: Storage, key: string): any {\r\n  if (isSsr(storage)) {\r\n    return;\r\n  }\r\n\r\n  const storageValue = storage.getItem(key);\r\n  if (!storageValue) {\r\n    return;\r\n  }\r\n\r\n  return JSON.parse(storageValue);\r\n}\r\n\r\nexport function isSsr(storage: Storage): boolean {\r\n  return !Boolean(storage);\r\n}\r\n","import { isPlatformBrowser, isPlatformServer } from '@angular/common';\r\nimport {\r\n  makeStateKey,\r\n  StateKey,\r\n  TransferState,\r\n} from '@angular/platform-browser';\r\nimport { INIT } from '@ngrx/store';\r\nimport { AUTH_FEATURE, StateWithAuth } from '../../auth/store/auth-state';\r\nimport { deepMerge } from '../../config/utils/deep-merge';\r\nimport { StateConfig, StateTransferType } from '../config/state-config';\r\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\r\n\r\nexport const CX_KEY: StateKey<string> = makeStateKey<string>('cx-state');\r\n\r\nexport function getTransferStateReducer(\r\n  platformId,\r\n  transferState?: TransferState,\r\n  config?: StateConfig\r\n) {\r\n  if (\r\n    transferState &&\r\n    config &&\r\n    config.state &&\r\n    config.state.ssrTransfer &&\r\n    config.state.ssrTransfer.keys\r\n  ) {\r\n    if (isPlatformBrowser(platformId)) {\r\n      return getBrowserTransferStateReducer(\r\n        transferState,\r\n        config.state.ssrTransfer.keys\r\n      );\r\n    } else if (isPlatformServer(platformId)) {\r\n      return getServerTransferStateReducer(\r\n        transferState,\r\n        config.state.ssrTransfer.keys\r\n      );\r\n    }\r\n  }\r\n\r\n  return (reducer) => reducer;\r\n}\r\n\r\nexport function getServerTransferStateReducer(\r\n  transferState: TransferState,\r\n  keys: { [key: string]: StateTransferType }\r\n) {\r\n  const transferStateKeys = filterKeysByType(\r\n    keys,\r\n    StateTransferType.TRANSFER_STATE\r\n  );\r\n\r\n  return function (reducer) {\r\n    return function (state, action: any) {\r\n      const newState = reducer(state, action);\r\n      if (newState) {\r\n        const stateSlice = getStateSlice(transferStateKeys, [], newState);\r\n        transferState.set(CX_KEY, stateSlice);\r\n      }\r\n\r\n      return newState;\r\n    };\r\n  };\r\n}\r\n\r\nexport function getBrowserTransferStateReducer(\r\n  transferState: TransferState,\r\n  keys: { [key: string]: StateTransferType }\r\n) {\r\n  const transferStateKeys = filterKeysByType(\r\n    keys,\r\n    StateTransferType.TRANSFER_STATE\r\n  );\r\n\r\n  return function (reducer) {\r\n    return function (state, action: any) {\r\n      if (action.type === INIT) {\r\n        if (!state) {\r\n          state = reducer(state, action);\r\n        }\r\n\r\n        // we should not utilize transfer state if user is logged in\r\n        const authState = (state as StateWithAuth)[AUTH_FEATURE];\r\n        const isLoggedIn =\r\n          authState && authState.userToken && authState.userToken.token;\r\n\r\n        if (!isLoggedIn && transferState.hasKey(CX_KEY)) {\r\n          const cxKey = transferState.get(CX_KEY, {});\r\n          const transferredStateSlice = getStateSlice(\r\n            transferStateKeys,\r\n            [],\r\n            cxKey\r\n          );\r\n\r\n          state = deepMerge({}, state, transferredStateSlice);\r\n        }\r\n        return state;\r\n      }\r\n      return reducer(state, action);\r\n    };\r\n  };\r\n}\r\n","import { Optional, PLATFORM_ID, Provider, InjectionToken } from '@angular/core';\nimport { TransferState } from '@angular/platform-browser';\nimport { META_REDUCERS } from '@ngrx/store';\nimport { Config } from '../../config/config.module';\nimport { WindowRef } from '../../window/window-ref';\nimport { getStorageSyncReducer } from './storage-sync.reducer';\nimport { getTransferStateReducer } from './transfer-state.reducer';\n\nexport { getStateSlice } from '../utils/get-state-slice';\nexport { getStorageSyncReducer } from './storage-sync.reducer';\nexport * from './transfer-state.reducer';\n\nexport const TRANSFER_STATE_META_REDUCER = new InjectionToken(\n  'TransferStateMetaReducer'\n);\nexport const STORAGE_SYNC_META_REDUCER = new InjectionToken(\n  'StorageSyncMetaReducer'\n);\n\nexport const stateMetaReducers: Provider[] = [\n  {\n    provide: TRANSFER_STATE_META_REDUCER,\n    useFactory: getTransferStateReducer,\n    deps: [\n      PLATFORM_ID,\n      [new Optional(), TransferState],\n      [new Optional(), Config],\n    ],\n  },\n  {\n    provide: STORAGE_SYNC_META_REDUCER,\n    useFactory: getStorageSyncReducer,\n    deps: [WindowRef, [new Optional(), Config]],\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: TRANSFER_STATE_META_REDUCER,\n    multi: true,\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: STORAGE_SYNC_META_REDUCER,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '../config/config.module';\r\nimport { defaultStateConfig } from './config/default-state-config';\r\nimport { stateMetaReducers } from './reducers/index';\r\n\r\n@NgModule({})\r\nexport class StateModule {\r\n  static forRoot(): ModuleWithProviders<StateModule> {\r\n    return {\r\n      ngModule: StateModule,\r\n      providers: [\r\n        ...stateMetaReducers,\r\n        provideDefaultConfig(defaultStateConfig),\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { isObject } from '../config/utils/deep-merge';\nimport { ErrorModel, HttpErrorModel } from '../model/misc.model';\n\nexport const UNKNOWN_ERROR = {\n  error: 'unknown error',\n};\n\nconst circularReplacer = () => {\n  const seen = new WeakSet();\n  return (_key: any, value: any) => {\n    if (typeof value === 'object' && value !== null) {\n      if (seen.has(value)) {\n        return;\n      }\n      seen.add(value);\n    }\n    return value;\n  };\n};\n\nexport function makeErrorSerializable(\n  error: HttpErrorResponse | ErrorModel | any\n): HttpErrorModel | Error | any {\n  if (error instanceof Error) {\n    return {\n      message: error.message,\n      type: error.name,\n      reason: error.stack,\n    } as ErrorModel;\n  }\n\n  if (error instanceof HttpErrorResponse) {\n    let serializableError = error.error;\n    if (isObject(error.error)) {\n      serializableError = JSON.stringify(error.error, circularReplacer());\n    }\n\n    return {\n      message: error.message,\n      error: serializableError,\n      status: error.status,\n      statusText: error.statusText,\n      url: error.url,\n    } as HttpErrorModel;\n  }\n\n  return isObject(error) ? UNKNOWN_ERROR : error;\n}\n","import { OccConfig } from '../../occ/config/occ-config';\r\nimport { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class AuthConfig extends OccConfig {\r\n  authentication?: {\r\n    client_id?: string;\r\n    client_secret?: string;\r\n  };\r\n}\r\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\r\nimport { AuthConfig } from '../../config/auth-config';\r\nimport { ClientToken } from '../../models/token-types.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ClientAuthenticationTokenService {\r\n  constructor(\r\n    protected config: AuthConfig,\r\n    protected http: HttpClient,\r\n    protected occEndpointsService: OccEndpointsService\r\n  ) {}\r\n\r\n  loadClientAuthenticationToken(): Observable<ClientToken> {\r\n    const url: string = this.occEndpointsService.getRawEndpoint('login');\r\n    const params = new HttpParams()\r\n      .set(\r\n        'client_id',\r\n        encodeURIComponent(this.config.authentication.client_id)\r\n      )\r\n      .set(\r\n        'client_secret',\r\n        encodeURIComponent(this.config.authentication.client_secret)\r\n      )\r\n      .set('grant_type', 'client_credentials');\r\n\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n    return this.http.post<ClientToken>(url, params, { headers });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { ClientToken } from '../../models/token-types.model';\r\nimport { ClientAuthenticationTokenService } from '../../services/client-authentication/client-authentication-token.service';\r\nimport { AuthActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class ClientTokenEffect {\r\n  @Effect()\r\n  loadClientToken$: Observable<\r\n    AuthActions.ClientTokenAction\r\n  > = this.actions$.pipe(\r\n    ofType(AuthActions.LOAD_CLIENT_TOKEN),\r\n    exhaustMap(() => {\r\n      return this.clientAuthenticationTokenService\r\n        .loadClientAuthenticationToken()\r\n        .pipe(\r\n          map((token: ClientToken) => {\r\n            return new AuthActions.LoadClientTokenSuccess(token);\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new AuthActions.LoadClientTokenFail(makeErrorSerializable(error))\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private clientAuthenticationTokenService: ClientAuthenticationTokenService\r\n  ) {}\r\n}\r\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\r\nimport {\r\n  InterceptorUtil,\r\n  TOKEN_REVOCATION_HEADER,\r\n} from '../../../occ/utils/interceptor-util';\r\nimport { AuthConfig } from '../../config/auth-config';\r\nimport { UserToken } from '../../models/token-types.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserAuthenticationTokenService {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected config: AuthConfig,\r\n    protected occEndpointsService: OccEndpointsService\r\n  ) {}\r\n\r\n  loadToken(userId: string, password: string): Observable<UserToken> {\r\n    const url = this.occEndpointsService.getRawEndpoint('login');\r\n    const params = new HttpParams()\r\n      .set('client_id', this.config.authentication.client_id)\r\n      .set('client_secret', this.config.authentication.client_secret)\r\n      .set('grant_type', 'password')\r\n      .set('username', userId)\r\n      .set('password', password);\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n\r\n    return this.http\r\n      .post<UserToken>(url, params, { headers })\r\n      .pipe(catchError((error: any) => throwError(error)));\r\n  }\r\n\r\n  refreshToken(refreshToken: string): Observable<UserToken> {\r\n    const url = this.occEndpointsService.getRawEndpoint('login');\r\n    const params = new HttpParams()\r\n      .set(\r\n        'client_id',\r\n        encodeURIComponent(this.config.authentication.client_id)\r\n      )\r\n      .set(\r\n        'client_secret',\r\n        encodeURIComponent(this.config.authentication.client_secret)\r\n      )\r\n      .set('refresh_token', encodeURI(refreshToken))\r\n      .set('grant_type', 'refresh_token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n\r\n    return this.http\r\n      .post<UserToken>(url, params, { headers })\r\n      .pipe(catchError((error: any) => throwError(error)));\r\n  }\r\n\r\n  revoke(userToken: UserToken): Observable<{}> {\r\n    const url = this.occEndpointsService.getRawEndpoint('revoke');\r\n    const headers = InterceptorUtil.createHeader(\r\n      TOKEN_REVOCATION_HEADER,\r\n      true,\r\n      new HttpHeaders({\r\n        Authorization: `${userToken.token_type} ${userToken.access_token}`,\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n      })\r\n    );\r\n    const params = new HttpParams().set('token', userToken.access_token);\r\n    return this.http\r\n      .post<{}>(url, params, { headers })\r\n      .pipe(catchError((error: any) => throwError(error)));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, exhaustMap, map, mergeMap } from 'rxjs/operators';\r\nimport { OCC_USER_ID_CURRENT } from '../../../occ/utils/occ-constants';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserToken } from '../../models/token-types.model';\r\nimport { UserAuthenticationTokenService } from '../../services/user-authentication/user-authentication-token.service';\r\nimport { AuthActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class UserTokenEffects {\r\n  @Effect()\r\n  loadUserToken$: Observable<AuthActions.UserTokenAction> = this.actions$.pipe(\r\n    ofType(AuthActions.LOAD_USER_TOKEN),\r\n    map((action: AuthActions.LoadUserToken) => action.payload),\r\n    mergeMap(({ userId, password }) =>\r\n      this.userTokenService.loadToken(userId, password).pipe(\r\n        map((token: UserToken) => {\r\n          const date = new Date();\r\n          date.setSeconds(date.getSeconds() + token.expires_in);\r\n          token.expiration_time = date.toJSON();\r\n          token.userId = OCC_USER_ID_CURRENT;\r\n          return new AuthActions.LoadUserTokenSuccess(token);\r\n        }),\r\n        catchError((error) =>\r\n          of(new AuthActions.LoadUserTokenFail(makeErrorSerializable(error)))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  login$: Observable<AuthActions.Login> = this.actions$.pipe(\r\n    ofType(AuthActions.LOAD_USER_TOKEN_SUCCESS),\r\n    map(() => new AuthActions.Login())\r\n  );\r\n\r\n  @Effect()\r\n  refreshUserToken$: Observable<\r\n    AuthActions.UserTokenAction\r\n  > = this.actions$.pipe(\r\n    ofType(AuthActions.REFRESH_USER_TOKEN),\r\n    map((action: AuthActions.RefreshUserToken) => action.payload),\r\n    exhaustMap(({ refreshToken }) => {\r\n      return this.userTokenService.refreshToken(refreshToken).pipe(\r\n        map(\r\n          (token: UserToken) => {\r\n            const date = new Date();\r\n            date.setSeconds(date.getSeconds() + token.expires_in);\r\n            token.expiration_time = date.toJSON();\r\n            return new AuthActions.RefreshUserTokenSuccess(token);\r\n          },\r\n          catchError((error) =>\r\n            of(\r\n              new AuthActions.RefreshUserTokenFail(makeErrorSerializable(error))\r\n            )\r\n          )\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  revokeUserToken$: Observable<\r\n    AuthActions.UserTokenAction\r\n  > = this.actions$.pipe(\r\n    ofType(AuthActions.REVOKE_USER_TOKEN),\r\n    map((action: AuthActions.RevokeUserToken) => {\r\n      return action.payload;\r\n    }),\r\n    mergeMap((userToken: UserToken) => {\r\n      return this.userTokenService.revoke(userToken).pipe(\r\n        map(() => new AuthActions.RevokeUserTokenSuccess(userToken)),\r\n        catchError((error) => of(new AuthActions.RevokeUserTokenFail(error)))\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userTokenService: UserAuthenticationTokenService\r\n  ) {}\r\n}\r\n","import { ClientTokenEffect } from './client-token.effect';\nimport { UserTokenEffects } from './user-token.effect';\n\nexport const effects: any[] = [UserTokenEffects, ClientTokenEffect];\n\nexport * from './client-token.effect';\nexport * from './user-token.effect';\n","import * as fromUpdateEmailAction from '../../../user/store/actions/update-email.action';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\n\nexport const initialState: UserToken = <UserToken>{};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | AuthActions.UserTokenAction\n    | fromUpdateEmailAction.UpdateEmailSuccessAction\n): UserToken {\n  switch (action.type) {\n    case AuthActions.LOAD_USER_TOKEN:\n    case AuthActions.REFRESH_USER_TOKEN: {\n      return {\n        ...state,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_SUCCESS:\n    case AuthActions.REFRESH_USER_TOKEN_SUCCESS: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_FAIL:\n    case AuthActions.REFRESH_USER_TOKEN_FAIL: {\n      return {\n        ...state,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\r\nimport {\r\n  Action,\r\n  ActionReducer,\r\n  ActionReducerMap,\r\n  combineReducers,\r\n  MetaReducer,\r\n} from '@ngrx/store';\r\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\r\nimport { ClientToken } from '../../models/token-types.model';\r\nimport { AuthActions } from '../actions/index';\r\nimport { AuthState, CLIENT_TOKEN_DATA } from '../auth-state';\r\nimport * as fromUserTokenReducer from './user-token.reducer';\r\n\r\nexport function getReducers(): ActionReducerMap<AuthState> {\r\n  return {\r\n    userToken: combineReducers({ token: fromUserTokenReducer.reducer }),\r\n    clientToken: loaderReducer<ClientToken>(CLIENT_TOKEN_DATA),\r\n  };\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducerMap<\r\n  AuthState\r\n>> = new InjectionToken<ActionReducerMap<AuthState>>('AuthReducers');\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n\r\nexport function clearAuthState(\r\n  reducer: ActionReducer<AuthState, Action>\r\n): ActionReducer<AuthState, Action> {\r\n  return function (state, action) {\r\n    if (action.type === AuthActions.LOGOUT) {\r\n      state = {\r\n        ...state,\r\n        userToken: undefined,\r\n      };\r\n    }\r\n    return reducer(state, action);\r\n  };\r\n}\r\n\r\nexport const metaReducers: MetaReducer<any>[] = [clearAuthState];\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { provideDefaultConfigFactory } from '../../config/config.module';\r\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\r\nimport { StateModule } from '../../state/state.module';\r\nimport { AUTH_FEATURE } from './auth-state';\r\nimport { effects } from './effects/index';\r\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\r\n\r\nexport function authStoreConfigFactory(): StateConfig {\r\n  // if we want to reuse AUTH_FEATURE const in config, we have to use factory instead of plain object\r\n  const config: StateConfig = {\r\n    state: {\r\n      storageSync: {\r\n        keys: {\r\n          'auth.userToken.token.access_token': StorageSyncType.LOCAL_STORAGE,\r\n          'auth.userToken.token.token_type': StorageSyncType.LOCAL_STORAGE,\r\n          'auth.userToken.token.expires_in': StorageSyncType.LOCAL_STORAGE,\r\n          'auth.userToken.token.expiration_time': StorageSyncType.LOCAL_STORAGE,\r\n          'auth.userToken.token.scope': StorageSyncType.LOCAL_STORAGE,\r\n          'auth.userToken.token.userId': StorageSyncType.LOCAL_STORAGE,\r\n        },\r\n      },\r\n    },\r\n  };\r\n  return config;\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    StateModule,\r\n    StoreModule.forFeature(AUTH_FEATURE, reducerToken, { metaReducers }),\r\n    EffectsModule.forFeature(effects),\r\n  ],\r\n  providers: [\r\n    provideDefaultConfigFactory(authStoreConfigFactory),\r\n    reducerProvider,\r\n  ],\r\n})\r\nexport class AuthStoreModule {}\r\n","import { ErrorModel } from './misc.model';\n\nexport interface Country {\n  isocode?: string;\n  name?: string;\n}\n\nexport enum CountryType {\n  BILLING = 'BILLING',\n  SHIPPING = 'SHIPPING',\n}\n\nexport interface Region {\n  countryIso?: string;\n  isocode?: string;\n  isocodeShort?: string;\n  name?: string;\n}\n\nexport interface Address {\n  companyName?: string;\n  country?: Country;\n  defaultAddress?: boolean;\n  email?: string;\n  firstName?: string;\n  formattedAddress?: string;\n  id?: string;\n  lastName?: string;\n  line1?: string;\n  line2?: string;\n  phone?: string;\n  postalCode?: string;\n  region?: Region;\n  shippingAddress?: boolean;\n  title?: string;\n  titleCode?: string;\n  town?: string;\n  visibleInAddressBook?: boolean;\n}\n\nexport interface AddressValidation {\n  decision?: string;\n  // TODO: Simplify with converter\n  errors?: { errors: ErrorModel[] };\n  suggestedAddresses?: Address[];\n}\n","import { Address } from './address.model';\nimport { Currency } from './misc.model';\nimport {\n  DeliveryMode,\n  OrderEntry,\n  PickupOrderEntryGroup,\n  PromotionOrderEntryConsumed,\n} from './order.model';\nimport { Price, Promotion } from './product.model';\n\nexport interface PromotionResult {\n  consumedEntries?: PromotionOrderEntryConsumed[];\n  description?: string;\n  promotion?: Promotion;\n}\n\nexport enum PromotionLocation {\n  ActiveCart = 'CART',\n  Checkout = 'CHECKOUT',\n  Order = 'ORDER',\n}\n\nexport interface Voucher {\n  appliedValue?: Price;\n  code?: string;\n  currency?: Currency;\n  description?: string;\n  freeShipping?: boolean;\n  name?: string;\n  value?: number;\n  valueFormatted?: string;\n  valueString?: string;\n  voucherCode?: string;\n}\n\nexport interface DeliveryOrderEntryGroup {\n  deliveryAddress?: Address;\n  entries?: OrderEntry[];\n  quantity?: number;\n  totalPriceWithTax?: Price;\n}\n\nexport interface Principal {\n  name?: string;\n  uid?: string;\n}\n\nexport interface CardType {\n  code?: string;\n  name?: string;\n}\n\nexport interface PaymentDetails {\n  accountHolderName?: string;\n  billingAddress?: Address;\n  cardNumber?: string;\n  cardType?: CardType;\n  cvn?: string;\n  defaultPayment?: boolean;\n  expiryMonth?: string;\n  expiryYear?: string;\n  id?: string;\n  issueNumber?: string;\n  saved?: boolean;\n  startMonth?: string;\n  startYear?: string;\n  subscriptionId?: string;\n}\n\nexport interface SaveCartResult {\n  savedCartData?: Cart;\n}\n\nexport interface Cart {\n  appliedOrderPromotions?: PromotionResult[];\n  appliedProductPromotions?: PromotionResult[];\n  appliedVouchers?: Voucher[];\n  calculated?: boolean;\n  code?: string;\n  deliveryAddress?: Address;\n  deliveryCost?: Price;\n  deliveryItemsQuantity?: number;\n  deliveryMode?: DeliveryMode;\n  deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n  description?: string;\n  entries?: OrderEntry[];\n  expirationTime?: Date;\n  guid?: string;\n  name?: string;\n  net?: boolean;\n  orderDiscounts?: Price;\n  paymentInfo?: PaymentDetails;\n  pickupItemsQuantity?: number;\n  pickupOrderGroups?: PickupOrderEntryGroup[];\n  potentialOrderPromotions?: PromotionResult[];\n  potentialProductPromotions?: PromotionResult[];\n  productDiscounts?: Price;\n  saveTime?: Date;\n  savedBy?: Principal;\n  site?: string;\n  store?: string;\n  subTotal?: Price;\n  totalDiscounts?: Price;\n  totalItems?: number;\n  totalPrice?: Price;\n  totalPriceWithTax?: Price;\n  totalTax?: Price;\n  totalUnitCount?: number;\n  user?: Principal;\n}\n\nexport interface CartModification {\n  deliveryModeChanged?: boolean;\n  entry?: OrderEntry;\n  quantity?: number;\n  quantityAdded?: number;\n  statusCode?: string;\n  statusMessage?: string;\n}\n","export interface CmsComponent {\n  modifiedTime?: Date;\n  name?: string;\n  otherProperties?: any;\n  typeCode?: string;\n  uid?: string;\n}\n\nexport enum PageType {\n  CONTENT_PAGE = 'ContentPage',\n  PRODUCT_PAGE = 'ProductPage',\n  CATEGORY_PAGE = 'CategoryPage',\n  CATALOG_PAGE = 'CatalogPage',\n}\n\nexport interface CmsLinkComponent extends CmsComponent {\n  url?: string;\n  container?: boolean;\n  external?: boolean;\n  contentPage?: string;\n  contentPageLabelOrId?: string;\n  linkName?: string;\n  target?: boolean;\n}\n\nexport interface CmsSiteContextSelectorComponent extends CmsComponent {\n  context?: string;\n}\n\nexport interface CmsSearchBoxComponent extends CmsComponent {\n  container?: boolean;\n  maxSuggestions?: number;\n  maxProducts?: number;\n  displaySuggestions?: boolean;\n  displayProducts?: boolean;\n  displayProductImages?: boolean;\n  waitTimeBeforeRequest?: number;\n  minCharactersBeforeRequest?: number;\n}\n\nexport interface CmsParagraphComponent extends CmsComponent {\n  content?: string;\n  container?: string;\n  title?: string;\n}\n\nexport interface CMSTabParagraphContainer extends CmsComponent {\n  container?: string;\n  components?: string;\n}\n\nexport interface CmsBannerComponentMedia {\n  altText?: string;\n  code?: string;\n  mime?: string;\n  url?: string;\n}\n\nexport interface CmsResponsiveBannerComponentMedia {\n  desktop?: CmsBannerComponentMedia;\n  mobile?: CmsBannerComponentMedia;\n  tablet?: CmsBannerComponentMedia;\n  widescreen?: CmsBannerComponentMedia;\n}\n\nexport interface CmsBannerComponent extends CmsComponent {\n  headline?: string;\n  content?: string;\n  container?: string;\n  media?: CmsBannerComponentMedia | CmsResponsiveBannerComponentMedia;\n  urlLink?: string;\n  external?: string;\n}\n\nexport enum CmsBannerCarouselEffect {\n  FADE = 'FADE',\n  ZOOM = 'ZOOM',\n  CURTAIN = 'CURTAINX',\n  TURNDOWN = 'TURNDOWN',\n}\n\nexport interface CmsBannerCarouselComponent extends CmsComponent {\n  banners?: string;\n  effect?: CmsBannerCarouselEffect;\n}\n\nexport interface CmsProductCarouselComponent extends CmsComponent {\n  title?: string;\n  productCodes?: string;\n  container?: string;\n  popup?: string;\n  scroll?: string;\n}\n\nexport interface CmsProductReferencesComponent extends CmsComponent {\n  title?: string;\n  displayProductTitles?: string;\n  displayProductPrices?: string;\n  maximumNumberProducts?: number;\n  productReferenceTypes?: string;\n  container?: string;\n}\n\nexport interface CmsMiniCartComponent extends CmsComponent {\n  container?: string;\n  shownProductCount?: string;\n  title?: string;\n  totalDisplay?: string;\n  lightboxBannerComponent?: CmsBannerComponent;\n}\n\n// TODO: Upgrade model when Breadcrumbs will be finally used in project\nexport interface CmsBreadcrumbsComponent extends CmsComponent {\n  container?: string;\n}\n\nexport interface CmsNavigationNode {\n  uid?: string;\n  title?: string;\n  children?: Array<CmsNavigationNode>;\n  entries?: Array<CmsNavigationEntry>;\n}\n\nexport interface CmsNavigationEntry {\n  itemId?: string;\n  itemSuperType?: string;\n  itemType?: string;\n}\n\nexport interface CmsNavigationComponent extends CmsComponent {\n  container?: string;\n  styleClass?: string;\n  wrapAfter?: string;\n  notice?: string;\n  showLanguageCurrency?: string;\n  navigationNode?: CmsNavigationNode;\n}\n\nexport interface CmsProductFacetNavigationComponent extends CmsComponent {\n  container?: string;\n  activeFacetValueCode?: string;\n  searchResult?: string;\n  minPerFacet?: string;\n}\n","export interface ConsentTemplate {\n  id?: string;\n  name?: string;\n  description?: string;\n  version?: number;\n  currentConsent?: Consent;\n}\n\nexport interface Consent {\n  code?: string;\n  consentGivenDate?: Date;\n  consentWithdrawnDate?: Date;\n}\n\nexport interface AnonymousConsent {\n  templateCode?: string;\n  version?: number;\n  consentState?: ANONYMOUS_CONSENT_STATUS;\n}\n\nexport enum ANONYMOUS_CONSENT_STATUS {\n  GIVEN = 'GIVEN',\n  WITHDRAWN = 'WITHDRAWN',\n}\n","export interface Images {\n  [imageType: string]: ImageGroup | ImageGroup[];\n}\n\nexport interface Image {\n  altText?: string;\n  format?: string;\n  galleryIndex?: number;\n  imageType?: ImageType;\n  url?: string;\n}\n\nexport enum ImageType {\n  PRIMARY = 'PRIMARY',\n  GALLERY = 'GALLERY',\n}\n\nexport interface ImageGroup {\n  [format: string]: Image;\n}\n","import { Image, Images } from './image.model';\nimport { User } from './misc.model';\n\nexport interface VariantOptionQualifier {\n  image?: Image;\n  name?: string;\n  qualifier?: VariantQualifier;\n  value?: string;\n}\n\nexport interface PromotionRestriction {\n  description?: string;\n  restrictionType?: string;\n}\n\nexport interface FeatureUnit {\n  name?: string;\n  symbol?: string;\n  unitType?: string;\n}\n\nexport interface FeatureValue {\n  value?: string;\n}\n\nexport interface Feature {\n  code?: string;\n  comparable?: boolean;\n  description?: string;\n  featureUnit?: FeatureUnit;\n  featureValues?: FeatureValue[];\n  name?: string;\n  range?: boolean;\n  type?: string;\n}\n\nexport interface VariantCategory {\n  hasImage?: boolean;\n  name?: string;\n  priority?: number;\n}\n\nexport interface VariantValueCategory {\n  name?: string;\n  sequence?: number;\n  superCategories?: VariantCategory[];\n}\n\nexport enum VariantType {\n  SIZE = 'ApparelSizeVariantProduct',\n  STYLE = 'ApparelStyleVariantProduct',\n  COLOR = 'ElectronicsColorVariantProduct',\n}\n\nexport enum PriceType {\n  BUY = 'BUY',\n  FROM = 'FROM',\n}\n\nexport interface Price {\n  currencyIso?: string;\n  formattedValue?: string;\n  maxQuantity?: number;\n  minQuantity?: number;\n  priceType?: PriceType;\n  value?: number;\n}\n\nexport interface Stock {\n  stockLevel?: number;\n  stockLevelStatus?: string;\n}\n\nexport interface VariantOption {\n  code?: string;\n  priceData?: Price;\n  stock?: Stock;\n  url?: string;\n  variantOptionQualifiers?: VariantOptionQualifier[];\n}\n\nexport interface Promotion {\n  code?: string;\n  couldFireMessages?: string[];\n  description?: string;\n  enabled?: boolean;\n  endDate?: Date;\n  firedMessages?: string[];\n  priority?: number;\n  productBanner?: Image;\n  promotionGroup?: string;\n  promotionType?: string;\n  restrictions?: PromotionRestriction[];\n  startDate?: Date;\n  title?: string;\n}\n\nexport interface Category {\n  code?: string;\n  name?: string;\n  image?: Image;\n  url?: string;\n}\n\nexport interface Classification {\n  code?: string;\n  features?: Feature[];\n  name?: string;\n}\n\nexport interface FutureStock {\n  date?: Date;\n  formattedDate?: string;\n  stock?: Stock;\n}\n\nexport interface PriceRange {\n  maxPrice?: Price;\n  minPrice?: Price;\n}\n\nexport interface ProductReference {\n  description?: string;\n  preselected?: boolean;\n  quantity?: number;\n  referenceType?: string;\n  target?: Product;\n}\n\nexport interface Review {\n  alias?: string;\n  comment?: string;\n  date?: Date;\n  headline?: string;\n  id?: string;\n  principal?: User;\n  rating?: number;\n}\n\nexport interface VariantMatrixElement {\n  elements?: VariantMatrixElement[];\n  isLeaf?: boolean;\n  parentVariantCategory?: VariantCategory;\n  variantOption?: VariantOption;\n  variantValueCategory?: VariantValueCategory;\n}\n\nexport interface ProductReferences {\n  [referenceType: string]: ProductReference[];\n}\n\nexport interface BaseOption {\n  options?: VariantOption[];\n  selected?: VariantOption;\n  variantType?: VariantType;\n}\n\nexport interface Product {\n  availableForPickup?: boolean;\n  averageRating?: number;\n  baseOptions?: BaseOption[];\n  baseProduct?: string;\n  categories?: Category[];\n  classifications?: Classification[];\n  code?: string;\n  description?: string;\n  futureStocks?: FutureStock[];\n  images?: Images;\n  manufacturer?: string;\n  multidimensional?: boolean;\n  name?: string;\n  nameHtml?: string;\n  numberOfReviews?: number;\n  potentialPromotions?: Promotion[];\n  price?: Price;\n  priceRange?: PriceRange;\n  productReferences?: ProductReferences;\n  purchasable?: boolean;\n  reviews?: Review[];\n  stock?: Stock;\n  summary?: string;\n  url?: string;\n  variantMatrix?: VariantMatrixElement[];\n  variantOptions?: VariantOption[];\n  variantType?: VariantType;\n  volumePrices?: Price[];\n  volumePricesFlag?: boolean;\n}\n\nexport enum VariantQualifier {\n  SIZE = 'size',\n  STYLE = 'style',\n  COLOR = 'color',\n  THUMBNAIL = 'thumbnail',\n  PRODUCT = 'product',\n  ROLLUP_PROPERTY = 'rollupProperty',\n}\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '../config/config.module';\r\nimport { defaultAuthConfig } from './config/default-auth-config';\r\nimport { interceptors } from './http-interceptors/index';\r\nimport { AuthStoreModule } from './store/auth-store.module';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, HttpClientModule, AuthStoreModule],\r\n})\r\nexport class AuthModule {\r\n  static forRoot(): ModuleWithProviders<AuthModule> {\r\n    return {\r\n      ngModule: AuthModule,\r\n      providers: [provideDefaultConfig(defaultAuthConfig), ...interceptors],\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { RoutingService } from '../../routing/facade/routing.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthRedirectService {\n  /**\n   * This service is responsible for redirecting to the last page before authorization. \"The last page\" can be:\n   * 1. Just the previously opened page; or\n   * 2. The page that we just tried to open, but AuthGuard cancelled it\n   *\n   * For example:\n   * 1. The user opens the product page, then clicks /login link and signs in\n   *    -> Then we should redirect to the product page; or\n   * 2. The user opens the product page, then he clicks /my-account link,\n   *    but is automatically redirected to the login page by the AuthGuard, and he signs in\n   *    -> Then we should redirect to the my-account page, not the product page\n   */\n  constructor(private routing: RoutingService, private router: Router) {}\n\n  private redirectUrl: string;\n  private ignoredUrls = new Set<string>();\n  private lastAuthGuardNavigation: {\n    url: string;\n    navigationId: number;\n  };\n\n  redirect() {\n    if (this.redirectUrl === undefined) {\n      this.routing.go('/');\n    } else {\n      this.routing.goByUrl(this.redirectUrl);\n    }\n    this.redirectUrl = undefined;\n    this.lastAuthGuardNavigation = undefined;\n  }\n\n  reportAuthGuard() {\n    const { url, navigationId } = this.getCurrentNavigation();\n    this.lastAuthGuardNavigation = { url, navigationId };\n    this.redirectUrl = url;\n  }\n\n  reportNotAuthGuard() {\n    const { url, initialUrl, navigationId } = this.getCurrentNavigation();\n\n    this.ignoredUrls.add(url);\n\n    // Don't save redirect url if you've already come from page with NotAuthGuard (i.e. user has come from login to register)\n    if (!this.ignoredUrls.has(initialUrl)) {\n      // We compare the navigation id to find out if the url cancelled by AuthGuard (i.e. my-account) is more recent\n      // than the last opened page\n      if (\n        !this.lastAuthGuardNavigation ||\n        this.lastAuthGuardNavigation.navigationId < navigationId - 1\n      ) {\n        this.redirectUrl = initialUrl;\n        this.lastAuthGuardNavigation = undefined;\n      }\n    }\n  }\n\n  private getCurrentNavigation(): {\n    navigationId: number;\n    url: string;\n    initialUrl: string;\n  } {\n    const initialUrl = this.router.url;\n    const navigation = this.router.getCurrentNavigation();\n    const url = this.router.serializeUrl(navigation.finalUrl);\n    return {\n      navigationId: navigation.id,\n      url,\n      initialUrl,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { UserToken } from '../models/token-types.model';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected router: Router\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token: UserToken) => {\n        if (!token.access_token) {\n          this.authRedirectService.reportAuthGuard();\n          this.routingService.go({ cxRoute: 'login' });\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { RoutingService } from '../../routing/facade/routing.service';\r\nimport { AuthService } from '../facade/auth.service';\r\nimport { AuthRedirectService } from './auth-redirect.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NotAuthGuard implements CanActivate {\r\n  constructor(\r\n    protected routingService: RoutingService,\r\n    protected authService: AuthService,\r\n    private authRedirectService: AuthRedirectService\r\n  ) {}\r\n\r\n  canActivate(): Observable<boolean> {\r\n    this.authRedirectService.reportNotAuthGuard();\r\n\r\n    // redirect, if user is already logged in:\r\n    return this.authService.getUserToken().pipe(\r\n      map((token) => {\r\n        if (token.access_token) {\r\n          this.routingService.go({ cxRoute: 'home' });\r\n        }\r\n        return !token.access_token;\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Product } from './product.model';\nimport { Pagination, Sort } from './unused.model';\n\nexport interface ProductInterestEntry {\n  interestType?: NotificationType;\n  dateAdded?: string;\n  expirationDate?: string;\n}\n\nexport interface ProductInterestEntryRelation {\n  product?: Product;\n  productInterestEntry?: ProductInterestEntry[];\n}\n\nexport interface ProductInterestSearchResult {\n  results?: ProductInterestEntryRelation[];\n  sorts?: Sort[];\n  pagination?: Pagination;\n}\n\nexport enum NotificationType {\n  BACK_IN_STOCK = 'BACK_IN_STOCK',\n}\n","import { Injectable, StaticProvider } from '@angular/core';\r\nimport { Routes } from '@angular/router';\r\nimport { AuthConfig } from '../../auth/config/auth-config';\r\nimport { KymaConfig } from '../../kyma/config/kyma-config';\r\nimport { OccConfig } from '../../occ/config/occ-config';\r\nimport { Config } from '../../config/config.module';\r\n\r\nexport interface StandardCmsComponentConfig {\r\n  CMSSiteContextComponent?: CmsComponentMapping;\r\n  CMSLinkComponent?: CmsComponentMapping;\r\n  SimpleResponsiveBannerComponent?: CmsComponentMapping;\r\n  SimpleBannerComponent?: CmsComponentMapping;\r\n  BannerComponent?: CmsComponentMapping;\r\n  CMSParagraphComponent?: CmsComponentMapping;\r\n  BreadcrumbComponent?: CmsComponentMapping;\r\n  NavigationComponent?: CmsComponentMapping;\r\n  FooterNavigationComponent?: CmsComponentMapping;\r\n  CategoryNavigationComponent?: CmsComponentMapping;\r\n  ProductAddToCartComponent?: CmsComponentMapping;\r\n  MiniCartComponent?: CmsComponentMapping;\r\n  ProductCarouselComponent?: CmsComponentMapping;\r\n  SearchBoxComponent?: CmsComponentMapping;\r\n  ProductReferencesComponent?: CmsComponentMapping;\r\n  CMSTabParagraphComponent?: CmsComponentMapping;\r\n  LoginComponent?: CmsComponentMapping;\r\n}\r\n\r\nexport interface JspIncludeCmsComponentConfig {\r\n  AccountAddressBookComponent?: CmsComponentMapping;\r\n  ForgotPasswordComponent?: CmsComponentMapping;\r\n  ResetPasswordComponent?: CmsComponentMapping;\r\n  ProductDetailsTabComponent?: CmsComponentMapping;\r\n  ProductSpecsTabComponent?: CmsComponentMapping;\r\n  ProductReviewsTabComponent?: CmsComponentMapping;\r\n}\r\n\r\nexport const JSP_INCLUDE_CMS_COMPONENT_TYPE = 'JspIncludeComponent';\r\nexport const CMS_FLEX_COMPONENT_TYPE = 'CMSFlexComponent';\r\n\r\nexport interface CmsComponentMapping {\r\n  component?: any;\r\n  providers?: StaticProvider[];\r\n  childRoutes?: Routes;\r\n  disableSSR?: boolean;\r\n  i18nKeys?: string[];\r\n  guards?: any[];\r\n\r\n  /**\r\n   * DeferLoading can be specified globally, but also per component.\r\n   * Some components require direct loading while it's not initially\r\n   * in the viewport.\r\n   */\r\n  deferLoading?: DeferLoadingStrategy;\r\n}\r\n\r\n/** Strategy to control the loading strategy of DOM elements. */\r\nexport enum DeferLoadingStrategy {\r\n  /** Defers loading of DOM elements until element is near/in the users view port */\r\n  DEFER = 'DEFERRED-LOADING',\r\n  /** Renders the DOM instantly without being concerned with the view port */\r\n  INSTANT = 'INSTANT-LOADING',\r\n}\r\n\r\nexport interface CMSComponentConfig\r\n  extends StandardCmsComponentConfig,\r\n    JspIncludeCmsComponentConfig {\r\n  [componentType: string]: CmsComponentMapping;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class CmsConfig extends OccConfig\r\n  implements AuthConfig, KymaConfig {\r\n  authentication?: {\r\n    client_id?: string;\r\n    client_secret?: string;\r\n    kyma_client_id?: string;\r\n    kyma_client_secret?: string;\r\n  };\r\n\r\n  cmsComponents?: CMSComponentConfig;\r\n}\r\n","import { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\r\nimport { StateUtils } from '../../state';\r\n\r\nexport const ANONYMOUS_CONSENTS_STORE_FEATURE = 'anonymous-consents';\r\nexport const ANONYMOUS_CONSENTS = '[Anonymous Consents] Anonymous Consents';\r\n\r\nexport interface StateWithAnonymousConsents {\r\n  [ANONYMOUS_CONSENTS_STORE_FEATURE]: AnonymousConsentsState;\r\n}\r\n\r\nexport interface AnonymousConsentsState {\r\n  templates: StateUtils.LoaderState<ConsentTemplate[]>;\r\n  consents: AnonymousConsent[];\r\n  ui: {\r\n    bannerDismissed: boolean;\r\n    updated: boolean;\r\n  };\r\n}\r\n","import {\r\n  AnonymousConsent,\r\n  ConsentTemplate,\r\n} from '../../../model/consent.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { ANONYMOUS_CONSENTS } from '../anonymous-consents-state';\r\n\r\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES =\r\n  '[Anonymous Consents] Load Anonymous Consent Templates';\r\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS =\r\n  '[Anonymous Consents] Load Anonymous Consent Templates Success';\r\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL =\r\n  '[Anonymous Consents] Load Anonymous Consent Templates Fail';\r\nexport const RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES =\r\n  '[Anonymous Consents] Reset Load Anonymous Consent Templates';\r\n\r\nexport const GET_ALL_ANONYMOUS_CONSENTS =\r\n  '[Anonymous Consents] Get All Anonymous Consents';\r\nexport const GET_ANONYMOUS_CONSENT =\r\n  '[Anonymous Consents] Get Anonymous Consent';\r\nexport const SET_ANONYMOUS_CONSENTS =\r\n  '[Anonymous Consents] Set Anonymous Consents';\r\nexport const GIVE_ANONYMOUS_CONSENT =\r\n  '[Anonymous Consents] Give Anonymous Consent';\r\nexport const WITHDRAW_ANONYMOUS_CONSENT =\r\n  '[Anonymous Consents] Withdraw Anonymous Consent';\r\n\r\nexport const TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED =\r\n  '[Anonymous Consents] Toggle Anonymous Consents Banner Dismissed';\r\nexport const TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED =\r\n  '[Anonymous Consents] Anonymous Consent Templates Updated';\r\n\r\nexport class LoadAnonymousConsentTemplates extends StateUtils.LoaderLoadAction {\r\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES;\r\n  constructor() {\r\n    super(ANONYMOUS_CONSENTS);\r\n  }\r\n}\r\n\r\nexport class LoadAnonymousConsentTemplatesSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS;\r\n  constructor(public payload: ConsentTemplate[]) {\r\n    super(ANONYMOUS_CONSENTS);\r\n  }\r\n}\r\nexport class LoadAnonymousConsentTemplatesFail extends StateUtils.LoaderFailAction {\r\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL;\r\n  constructor(payload: any) {\r\n    super(ANONYMOUS_CONSENTS, payload);\r\n  }\r\n}\r\n\r\nexport class ResetLoadAnonymousConsentTemplates extends StateUtils.LoaderResetAction {\r\n  readonly type = RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES;\r\n  constructor() {\r\n    super(ANONYMOUS_CONSENTS);\r\n  }\r\n}\r\n\r\nexport class GetAllAnonymousConsents {\r\n  readonly type = GET_ALL_ANONYMOUS_CONSENTS;\r\n  constructor() {}\r\n}\r\n\r\nexport class GetAnonymousConsent {\r\n  readonly type = GET_ANONYMOUS_CONSENT;\r\n  constructor(public templateCode: string) {}\r\n}\r\n\r\nexport class SetAnonymousConsents {\r\n  readonly type = SET_ANONYMOUS_CONSENTS;\r\n  constructor(public payload: AnonymousConsent[]) {}\r\n}\r\n\r\nexport class GiveAnonymousConsent {\r\n  readonly type = GIVE_ANONYMOUS_CONSENT;\r\n  constructor(public templateCode: string) {}\r\n}\r\n\r\nexport class WithdrawAnonymousConsent {\r\n  readonly type = WITHDRAW_ANONYMOUS_CONSENT;\r\n  constructor(public templateCode: string) {}\r\n}\r\n\r\nexport class ToggleAnonymousConsentsBannerDissmissed {\r\n  readonly type = TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED;\r\n  constructor(public dismissed: boolean) {}\r\n}\r\n\r\nexport class ToggleAnonymousConsentTemplatesUpdated {\r\n  readonly type = TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED;\r\n  constructor(public updated: boolean) {}\r\n}\r\n\r\nexport type AnonymousConsentsActions =\r\n  | LoadAnonymousConsentTemplates\r\n  | LoadAnonymousConsentTemplatesSuccess\r\n  | LoadAnonymousConsentTemplatesFail\r\n  | ResetLoadAnonymousConsentTemplates\r\n  | GetAllAnonymousConsents\r\n  | SetAnonymousConsents\r\n  | GetAnonymousConsent\r\n  | GiveAnonymousConsent\r\n  | WithdrawAnonymousConsent\r\n  | ToggleAnonymousConsentsBannerDissmissed\r\n  | ToggleAnonymousConsentTemplatesUpdated;\r\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS_STORE_FEATURE,\n  StateWithAnonymousConsents,\n} from '../anonymous-consents-state';\n\nexport const getAnonymousConsentState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsentsState\n> = createFeatureSelector<AnonymousConsentsState>(\n  ANONYMOUS_CONSENTS_STORE_FEATURE\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { ConsentTemplate } from '../../../model/consent.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\r\nimport { getAnonymousConsentState } from './feature.selector';\r\n\r\nexport const getAnonymousConsentTemplatesState: MemoizedSelector<\r\n  StateWithAnonymousConsents,\r\n  LoaderState<ConsentTemplate[]>\r\n> = createSelector(getAnonymousConsentState, (state) => state.templates);\r\n\r\nexport const getAnonymousConsentTemplatesValue: MemoizedSelector<\r\n  StateWithAnonymousConsents,\r\n  ConsentTemplate[]\r\n> = createSelector(\r\n  getAnonymousConsentTemplatesState,\r\n  StateUtils.loaderValueSelector\r\n);\r\n\r\nexport const getAnonymousConsentTemplatesLoading: MemoizedSelector<\r\n  StateWithAnonymousConsents,\r\n  boolean\r\n> = createSelector(\r\n  getAnonymousConsentTemplatesState,\r\n  StateUtils.loaderLoadingSelector\r\n);\r\n\r\nexport const getAnonymousConsentTemplatesSuccess: MemoizedSelector<\r\n  StateWithAnonymousConsents,\r\n  boolean\r\n> = createSelector(\r\n  getAnonymousConsentTemplatesState,\r\n  StateUtils.loaderSuccessSelector\r\n);\r\n\r\nexport const getAnonymousConsentTemplatesError: MemoizedSelector<\r\n  StateWithAnonymousConsents,\r\n  boolean\r\n> = createSelector(\r\n  getAnonymousConsentTemplatesState,\r\n  StateUtils.loaderErrorSelector\r\n);\r\n\r\nexport const getAnonymousConsentTemplate = (\r\n  templateCode: string\r\n): MemoizedSelector<StateWithAnonymousConsents, ConsentTemplate> => {\r\n  return createSelector(getAnonymousConsentTemplatesValue, (templates) => {\r\n    return templates\r\n      ? templates.find((template) => template.id === templateCode)\r\n      : null;\r\n  });\r\n};\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\r\nimport { getAnonymousConsentState } from './feature.selector';\r\n\r\nexport const getAnonymousConsentTemplatesUpdate: MemoizedSelector<\r\n  StateWithAnonymousConsents,\r\n  boolean\r\n> = createSelector(getAnonymousConsentState, (state) => state.ui.updated);\r\n\r\nexport const getAnonymousConsentsBannerDismissed: MemoizedSelector<\r\n  StateWithAnonymousConsents,\r\n  boolean\r\n> = createSelector(\r\n  getAnonymousConsentState,\r\n  (state) => state.ui.bannerDismissed\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { AnonymousConsent } from '../../../model/consent.model';\r\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\r\nimport { getAnonymousConsentState } from './feature.selector';\r\n\r\nexport const getAnonymousConsents: MemoizedSelector<\r\n  StateWithAnonymousConsents,\r\n  AnonymousConsent[]\r\n> = createSelector(getAnonymousConsentState, (state) => state.consents);\r\n\r\nexport const getAnonymousConsentByTemplateCode = (\r\n  templateCode: string\r\n): MemoizedSelector<StateWithAnonymousConsents, AnonymousConsent> =>\r\n  createSelector(getAnonymousConsents, (consents) =>\r\n    consents.find((consent) => consent.templateCode === templateCode)\r\n  );\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { combineLatest, iif, Observable } from 'rxjs';\r\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/index';\r\nimport {\r\n  AnonymousConsent,\r\n  ANONYMOUS_CONSENT_STATUS,\r\n  ConsentTemplate,\r\n} from '../../model/index';\r\nimport { AnonymousConsentsActions } from '../store/actions/index';\r\nimport { StateWithAnonymousConsents } from '../store/anonymous-consents-state';\r\nimport { AnonymousConsentsSelectors } from '../store/selectors/index';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AnonymousConsentsService {\r\n  constructor(\r\n    protected store: Store<StateWithAnonymousConsents>,\r\n    protected authService: AuthService\r\n  ) {}\r\n\r\n  /**\r\n   * Retrieves the anonymous consent templates.\r\n   */\r\n  loadTemplates(): void {\r\n    this.store.dispatch(\r\n      new AnonymousConsentsActions.LoadAnonymousConsentTemplates()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Conditionally triggers the load of the anonymous consent templates if:\r\n   *   - `loadIfMissing` parameter is set to `true`\r\n   *   - the `templates` in the store are `undefined`\r\n   *\r\n   * Othewise it just returns the value from the store.\r\n   *\r\n   * @param loadIfMissing setting to `true` will trigger the load of the templates if the currently stored templates are `undefined`\r\n   */\r\n  getTemplates(loadIfMissing = false): Observable<ConsentTemplate[]> {\r\n    return iif(\r\n      () => loadIfMissing,\r\n      this.store.pipe(\r\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue),\r\n        withLatestFrom(this.getLoadTemplatesLoading()),\r\n        filter(([_templates, loading]) => !loading),\r\n        tap(([templates, _loading]) => {\r\n          if (!Boolean(templates)) {\r\n            this.loadTemplates();\r\n          }\r\n        }),\r\n        filter(([templates, _loading]) => Boolean(templates)),\r\n        map(([templates, _loading]) => templates)\r\n      ),\r\n      this.store.pipe(\r\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue)\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the anonymous consent templates with the given template code.\r\n   * @param templateCode a template code by which to filter anonymous consent templates.\r\n   */\r\n  getTemplate(templateCode: string): Observable<ConsentTemplate> {\r\n    return this.store.pipe(\r\n      select(\r\n        AnonymousConsentsSelectors.getAnonymousConsentTemplate(templateCode)\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns an indicator for the loading status for the anonymous consent templates.\r\n   */\r\n  getLoadTemplatesLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns an indicator for the success status for the anonymous consent templates.\r\n   */\r\n  getLoadTemplatesSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns an indicator for the error status for the anonymous consent templates.\r\n   */\r\n  getLoadTemplatesError(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesError)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resets the loading, success and error indicators for the anonymous consent templates.\r\n   */\r\n  resetLoadTemplatesState(): void {\r\n    this.store.dispatch(\r\n      new AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns all the anonymous consents.\r\n   */\r\n  getConsents(): Observable<AnonymousConsent[]> {\r\n    return this.store.pipe(\r\n      select(AnonymousConsentsSelectors.getAnonymousConsents)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Puts the provided anonymous consents into the store.\r\n   */\r\n  setConsents(consents: AnonymousConsent[]): void {\r\n    return this.store.dispatch(\r\n      new AnonymousConsentsActions.SetAnonymousConsents(consents)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the anonymous consent for the given template ID.\r\n   *\r\n   * As a side-effect, the method will call `getTemplates(true)` to load the templates if those are not present.\r\n   *\r\n   * @param templateId a template ID by which to filter anonymous consent templates.\r\n   */\r\n  getConsent(templateId: string): Observable<AnonymousConsent> {\r\n    return this.authService.isUserLoggedIn().pipe(\r\n      filter((authenticated) => !authenticated),\r\n      tap(() => this.getTemplates(true)),\r\n      switchMap(() =>\r\n        this.store.pipe(\r\n          select(\r\n            AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode(\r\n              templateId\r\n            )\r\n          )\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Give a consent for the given `templateCode`\r\n   * @param templateCode for which to give the consent\r\n   */\r\n  giveConsent(templateCode: string): void {\r\n    this.store.dispatch(\r\n      new AnonymousConsentsActions.GiveAnonymousConsent(templateCode)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sets all the anonymous consents' state to given.\r\n   */\r\n  giveAllConsents(): Observable<ConsentTemplate[]> {\r\n    return this.getTemplates(true).pipe(\r\n      tap((templates) =>\r\n        templates.forEach((template) => this.giveConsent(template.id))\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the provided `consent` is given.\r\n   * @param consent a consent to test\r\n   */\r\n  isConsentGiven(consent: AnonymousConsent): boolean {\r\n    return consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN;\r\n  }\r\n\r\n  /**\r\n   * Withdraw a consent for the given `templateCode`\r\n   * @param templateCode for which to withdraw the consent\r\n   */\r\n  withdrawConsent(templateCode: string): void {\r\n    this.store.dispatch(\r\n      new AnonymousConsentsActions.WithdrawAnonymousConsent(templateCode)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sets all the anonymous consents' state to withdrawn.\r\n   */\r\n  withdrawAllConsents(): Observable<ConsentTemplate[]> {\r\n    return this.getTemplates(true).pipe(\r\n      tap((templates) =>\r\n        templates.forEach((template) => this.withdrawConsent(template.id))\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the provided `consent` is withdrawn.\r\n   * @param consent a consent to test\r\n   */\r\n  isConsentWithdrawn(consent: AnonymousConsent): boolean {\r\n    return (\r\n      consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.WITHDRAWN\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Toggles the dismissed state of the anonymous consents banner.\r\n   * @param dismissed the banner will be dismissed if `true` is passed, otherwise it will be visible.\r\n   */\r\n  toggleBannerDismissed(dismissed: boolean): void {\r\n    this.store.dispatch(\r\n      new AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed(\r\n        dismissed\r\n      )\r\n    );\r\n    if (dismissed) {\r\n      this.toggleTemplatesUpdated(false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the banner was dismissed, `false` otherwise.\r\n   */\r\n  isBannerDismissed(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the consent templates were updated on the back-end.\r\n   * If the templates are not present in the store, it triggers the load.\r\n   */\r\n  getTemplatesUpdated(): Observable<boolean> {\r\n    return this.getTemplates(true).pipe(\r\n      switchMap(() =>\r\n        this.store.pipe(\r\n          select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate)\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Toggles the `updated` slice of the state\r\n   * @param updated\r\n   */\r\n  toggleTemplatesUpdated(updated: boolean): void {\r\n    this.store.dispatch(\r\n      new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\r\n        updated\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if either the banner is not dismissed or if the templates were updated on the back-end.\r\n   * Otherwise, it returns `false`.\r\n   */\r\n  isBannerVisible(): Observable<boolean> {\r\n    return combineLatest([\r\n      this.isBannerDismissed(),\r\n      this.getTemplatesUpdated(),\r\n    ]).pipe(map(([dismissed, updated]) => !dismissed || updated));\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if there's a missmatch in template versions between the provided `currentTemplates` and `newTemplates`\r\n   * @param currentTemplates current templates to check\r\n   * @param newTemplates new templates to check\r\n   */\r\n  detectUpdatedTemplates(\r\n    currentTemplates: ConsentTemplate[],\r\n    newTemplates: ConsentTemplate[]\r\n  ): boolean {\r\n    if (newTemplates.length !== currentTemplates.length) {\r\n      return true;\r\n    }\r\n\r\n    for (let i = 0; i < newTemplates.length; i++) {\r\n      const newTemplate = newTemplates[i];\r\n      const currentTemplate = currentTemplates[i];\r\n      if (newTemplate.version !== currentTemplate.version) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Serializes using `JSON.stringify()` and encodes using `encodeURIComponent()` methods\r\n   * @param consents to serialize and encode\r\n   */\r\n  serializeAndEncode(consents: AnonymousConsent[]): string {\r\n    if (!consents) {\r\n      return '';\r\n    }\r\n    const serialized = JSON.stringify(consents);\r\n    const encoded = encodeURIComponent(serialized);\r\n    return encoded;\r\n  }\r\n\r\n  /**\r\n   * Decodes using `decodeURIComponent()` and deserializes using `JSON.parse()`\r\n   * @param rawConsents to decode an deserialize\r\n   */\r\n  decodeAndDeserialize(rawConsents: string): AnonymousConsent[] {\r\n    const decoded = decodeURIComponent(rawConsents);\r\n    const unserialized = JSON.parse(decoded) as AnonymousConsent[];\r\n    return unserialized;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Compares the given `newConsents` and `previousConsents` and returns `true` if there are differences (the `newConsents` are updates).\r\n   * Otherwise it returns `false`.\r\n   *\r\n   * @param newConsents new consents to compare\r\n   * @param previousConsents old consents to compare\r\n   */\r\n  consentsUpdated(\r\n    newConsents: AnonymousConsent[],\r\n    previousConsents: AnonymousConsent[]\r\n  ): boolean {\r\n    const newRawConsents = this.serializeAndEncode(newConsents);\r\n    const previousRawConsents = this.serializeAndEncode(previousConsents);\r\n    return newRawConsents !== previousRawConsents;\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\n\nexport abstract class AsmAdapter {\n  /**\n   * Abstract function used to search for customers.\n   */\n  abstract customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccAsmConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        asmCustomerSearch: '/assistedservicewebservices/customers/search',\n      },\n    },\n  },\n};\n","import { OccConfig } from '../../occ/config/occ-config';\r\nimport { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class AsmConfig extends OccConfig {\r\n  asm?: {\r\n    agentSessionTimer?: {\r\n      startingDelayInSeconds?: number;\r\n    };\r\n    customerSearch?: {\r\n      maxResults?: number;\r\n    };\r\n  };\r\n}\r\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { CustomerSearchPage } from '../models/asm.models';\n\nexport const CUSTOMER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerSearchPage>\n>('CustomerSearchPageNormalizer');\n","import { Injectable, InjectionToken, Injector } from '@angular/core';\r\nimport { Observable, OperatorFunction } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n/**\r\n * Converter is used to convert source data model to target data model.\r\n * By convention, we distinguish two flows:\r\n *   - *Normalize* is the conversion from backend models to UI models\r\n *   - *Serialize* is the conversion of UI models to backend models (in case of submitting data to the backend).\r\n *\r\n * Converters can be stacked together to to apply decoupled customizations\r\n */\r\nexport interface Converter<S, T> {\r\n  /**\r\n   * Convert converts source model to target model. Can use optional target parameter,\r\n   * used in case of stacking multiple converters (for example, to implement populator pattern).\r\n   *\r\n   * @param source Source data model\r\n   * @param target Optional, partially converted target model\r\n   */\r\n  convert(source: S, target?: T): T;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ConverterService {\r\n  constructor(protected injector: Injector) {}\r\n\r\n  private converters: Map<\r\n    InjectionToken<Converter<any, any>>,\r\n    Converter<any, any>[]\r\n  > = new Map();\r\n\r\n  private getConverters<S, T>(\r\n    injectionToken: InjectionToken<Converter<S, T>>\r\n  ): Converter<S, T>[] {\r\n    if (!this.converters.has(injectionToken)) {\r\n      const converters = this.injector.get<Converter<S, T>[]>(\r\n        injectionToken,\r\n        []\r\n      );\r\n      if (!Array.isArray(converters)) {\r\n        console.warn(\r\n          'Converter must be multi-provided, please use \"multi: true\" for',\r\n          injectionToken.toString()\r\n        );\r\n      }\r\n      this.converters.set(injectionToken, converters);\r\n    }\r\n\r\n    return this.converters.get(injectionToken);\r\n  }\r\n\r\n  /**\r\n   * Will return true if converters for specified token were provided\r\n   */\r\n  hasConverters<S, T>(\r\n    injectionToken: InjectionToken<Converter<S, T>>\r\n  ): boolean {\r\n    const converters = this.getConverters(injectionToken);\r\n    return Array.isArray(converters) && converters.length > 0;\r\n  }\r\n\r\n  /**\r\n   * Pipeable operator to apply converter logic in a observable stream\r\n   */\r\n  pipeable<S, T>(\r\n    injectionToken: InjectionToken<Converter<S, T>>\r\n  ): OperatorFunction<S, T> {\r\n    if (this.hasConverters(injectionToken)) {\r\n      return map((model: S) => this.convertSource(model, injectionToken));\r\n    } else {\r\n      return (observable: Observable<any>) => observable as Observable<T>;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pipeable operator to apply converter logic in a observable stream to collection of items\r\n   */\r\n  pipeableMany<S, T>(\r\n    injectionToken: InjectionToken<Converter<S, T>>\r\n  ): OperatorFunction<S[], T[]> {\r\n    if (this.hasConverters(injectionToken)) {\r\n      return map((model: S[]) => this.convertMany(model, injectionToken));\r\n    } else {\r\n      return (observable: Observable<any[]>) => observable as Observable<T[]>;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply converter logic specified by injection token to source data\r\n   */\r\n  convert<S, T>(source: S, injectionToken: InjectionToken<Converter<S, T>>): T {\r\n    if (this.hasConverters(injectionToken)) {\r\n      return this.convertSource(source, injectionToken);\r\n    } else {\r\n      return source as any;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply converter logic specified by injection token to a collection\r\n   */\r\n  convertMany<S, T>(\r\n    sources: S[],\r\n    injectionToken: InjectionToken<Converter<S, T>>\r\n  ): T[] {\r\n    if (this.hasConverters(injectionToken) && Array.isArray(sources)) {\r\n      return sources.map((source) =>\r\n        this.convertSource(source, injectionToken)\r\n      );\r\n    } else {\r\n      return sources as any[];\r\n    }\r\n  }\r\n\r\n  private convertSource<S, T>(\r\n    source: S,\r\n    injectionToken: InjectionToken<Converter<S, T>>\r\n  ): T {\r\n    return this.getConverters(injectionToken).reduce((target, converter) => {\r\n      return converter.convert(source, target);\r\n    }, undefined as T);\r\n  }\r\n}\r\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { AsmConfig } from '../../../asm/config/asm-config';\r\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\r\nimport { CUSTOMER_SEARCH_PAGE_NORMALIZER } from '../../../asm/connectors/converters';\r\nimport {\r\n  CustomerSearchOptions,\r\n  CustomerSearchPage,\r\n} from '../../../asm/models/asm.models';\r\nimport { BaseSiteService } from '../../../site-context/facade/base-site.service';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\nimport {\r\n  InterceptorUtil,\r\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\r\n} from '../../utils/interceptor-util';\r\n\r\n@Injectable()\r\nexport class OccAsmAdapter implements AsmAdapter {\r\n  private activeBaseSite: string;\r\n\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpointsService: OccEndpointsService,\r\n    protected converterService: ConverterService,\r\n    protected config: AsmConfig,\r\n    protected baseSiteService: BaseSiteService\r\n  ) {\r\n    this.baseSiteService\r\n      .getActive()\r\n      .subscribe((value) => (this.activeBaseSite = value));\r\n  }\r\n\r\n  customerSearch(\r\n    options: CustomerSearchOptions\r\n  ): Observable<CustomerSearchPage> {\r\n    const headers = InterceptorUtil.createHeader(\r\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\r\n      true,\r\n      new HttpHeaders()\r\n    );\r\n    let params: HttpParams = new HttpParams()\r\n      .set('baseSite', this.activeBaseSite)\r\n      .set('sort', 'byNameAsc');\r\n\r\n    if (typeof options['query'] !== 'undefined') {\r\n      params = params.set('query', '' + options.query);\r\n    }\r\n\r\n    if (typeof options['pageSize'] !== 'undefined') {\r\n      params = params.set('pageSize', '' + options.pageSize);\r\n    }\r\n\r\n    const url = this.occEndpointsService.getRawEndpoint('asmCustomerSearch');\r\n\r\n    return this.http\r\n      .get<CustomerSearchPage>(url, { headers, params })\r\n      .pipe(this.converterService.pipeable(CUSTOMER_SEARCH_PAGE_NORMALIZER));\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\r\nimport { provideDefaultConfig } from '../../../config/config.module';\r\nimport { defaultOccAsmConfig } from './default-occ-asm-config';\r\nimport { OccAsmAdapter } from './occ-asm.adapter';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, HttpClientModule],\r\n  providers: [\r\n    provideDefaultConfig(defaultOccAsmConfig),\r\n    {\r\n      provide: AsmAdapter,\r\n      useClass: OccAsmAdapter,\r\n    },\r\n  ],\r\n})\r\nexport class AsmOccModule {}\r\n","import { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\n\nexport abstract class CartAdapter {\n  /**\n   * Abstract method used to load all carts\n   *\n   * @param userId\n   */\n  abstract loadAll(userId: string): Observable<Cart[]>;\n\n  /**\n   * Abstract method used to load cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract load(userId: string, cartId: string): Observable<Cart>;\n\n  /**\n   * Abstract method used to create cart. If toMergeCartGuid is specified, cart will be merged with existing one\n   *\n   * @param userId\n   * @param oldCartId\n   * @param toMergeCartGuid\n   */\n  abstract create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart>;\n\n  /**\n   * Abstract method used to delete cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract delete(userId: string, cartId: string): Observable<{}>;\n\n  /**\n   * Abstract method to assign an email to the cart. This step is required to make a guest checkout\n   * @param userId\n   * @param cartId\n   * @param email\n   */\n  abstract addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Cart } from '../../../model/cart.model';\n\nexport const CART_NORMALIZER = new InjectionToken<Converter<any, Cart>>(\n  'CartNormalizer'\n);\n","import { Observable } from 'rxjs';\nimport { CartModification } from '../../../model/cart.model';\n\nexport abstract class CartEntryAdapter {\n  /**\n   * Abstract method used to add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to update entry in cart\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param qty\n   * @param pickupStore\n   */\n  abstract update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any>;\n}\n","import { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\n\nexport abstract class SaveCartAdapter {\n  /**\n   * Abstract method used to save a cart\n   *\n   * @param userId: string\n   * @param cartId: string\n   * @param saveCartName?: string\n   * @param saveCartDescription?: string\n   */\n  abstract saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult>;\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class CartVoucherAdapter {\n  /**\n   * Abstract method used to apply voucher to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to remove voucher from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Product } from '../../../model/product.model';\n\nexport const PRODUCT_NORMALIZER = new InjectionToken<Converter<any, Product>>(\n  'ProductNormalizer'\n);\n","import { Injectable } from '@angular/core';\r\nimport { Cart } from '../../../../model/cart.model';\r\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\r\nimport {\r\n  Converter,\r\n  ConverterService,\r\n} from '../../../../util/converter.service';\r\nimport { Occ } from '../../../occ-models/occ.models';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OccCartNormalizer implements Converter<Occ.Cart, Cart> {\r\n  constructor(private converter: ConverterService) {}\r\n\r\n  convert(source: Occ.Cart, target?: Cart): Cart {\r\n    if (target === undefined) {\r\n      target = { ...(source as any) };\r\n    }\r\n\r\n    if (source && source.entries) {\r\n      target.entries = source.entries.map((entry) => ({\r\n        ...entry,\r\n        product: this.converter.convert(entry.product, PRODUCT_NORMALIZER),\r\n      }));\r\n    }\r\n\r\n    this.removeDuplicatePromotions(source, target);\r\n    return target;\r\n  }\r\n\r\n  /**\r\n   * Remove all duplicate promotions\r\n   */\r\n  private removeDuplicatePromotions(source: any, target: Cart): void {\r\n    if (source && source.potentialOrderPromotions) {\r\n      target.potentialOrderPromotions = this.removeDuplicateItems(\r\n        source.potentialOrderPromotions\r\n      );\r\n    }\r\n\r\n    if (source && source.potentialProductPromotions) {\r\n      target.potentialProductPromotions = this.removeDuplicateItems(\r\n        source.potentialProductPromotions\r\n      );\r\n    }\r\n\r\n    if (source && source.appliedOrderPromotions) {\r\n      target.appliedOrderPromotions = this.removeDuplicateItems(\r\n        source.appliedOrderPromotions\r\n      );\r\n    }\r\n\r\n    if (source && source.appliedProductPromotions) {\r\n      target.appliedProductPromotions = this.removeDuplicateItems(\r\n        source.appliedProductPromotions\r\n      );\r\n    }\r\n  }\r\n\r\n  private removeDuplicateItems(itemList: any[]): any[] {\r\n    return itemList.filter((p, i, a) => {\r\n      const b = a.map((el) => JSON.stringify(el));\r\n      return i === b.indexOf(JSON.stringify(p));\r\n    });\r\n  }\r\n}\r\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccCartConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        carts:\n          'users/${userId}/carts?fields=carts(DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),saveTime,user,name)',\n        cart:\n          'users/${userId}/carts/${cartId}?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        createCart:\n          'users/${userId}/carts?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        addEntries: 'users/${userId}/carts/${cartId}/entries',\n        updateEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        removeEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        addEmail: 'users/${userId}/carts/${cartId}/email',\n        deleteCart: 'users/${userId}/carts/${cartId}',\n        cartVoucher: 'users/${userId}/carts/${cartId}/vouchers',\n        saveCart: 'users/${userId}/carts/${cartId}/save',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CartModification } from '../../../model/cart.model';\n\nexport const CART_MODIFICATION_NORMALIZER = new InjectionToken<\n  Converter<any, CartModification>\n>('CartModificationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\r\nimport { CART_MODIFICATION_NORMALIZER } from '../../../cart/connectors/entry/converters';\r\nimport { CartModification } from '../../../model/cart.model';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\n\r\n@Injectable()\r\nexport class OccCartEntryAdapter implements CartEntryAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpointsService: OccEndpointsService,\r\n    protected converterService: ConverterService\r\n  ) {}\r\n\r\n  public add(\r\n    userId: string,\r\n    cartId: string,\r\n    productCode: string,\r\n    quantity: number = 1\r\n  ): Observable<CartModification> {\r\n    const toAdd = JSON.stringify({});\r\n\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n\r\n    const url = this.occEndpointsService.getUrl(\r\n      'addEntries',\r\n      {\r\n        userId,\r\n        cartId,\r\n      },\r\n      { code: productCode, qty: quantity }\r\n    );\r\n\r\n    return this.http\r\n      .post<CartModification>(url, toAdd, { headers })\r\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\r\n  }\r\n\r\n  public update(\r\n    userId: string,\r\n    cartId: string,\r\n    entryNumber: string,\r\n    qty: number,\r\n    pickupStore?: string\r\n  ): Observable<CartModification> {\r\n    let params = {};\r\n    if (pickupStore) {\r\n      params = { pickupStore };\r\n    }\r\n\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n\r\n    const url = this.occEndpointsService.getUrl(\r\n      'updateEntries',\r\n      { userId, cartId, entryNumber },\r\n      { qty, ...params }\r\n    );\r\n\r\n    return this.http\r\n      .patch<CartModification>(url, {}, { headers })\r\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\r\n  }\r\n\r\n  public remove(\r\n    userId: string,\r\n    cartId: string,\r\n    entryNumber: string\r\n  ): Observable<any> {\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n\r\n    const url = this.occEndpointsService.getUrl('removeEntries', {\r\n      userId,\r\n      cartId,\r\n      entryNumber,\r\n    });\r\n\r\n    return this.http.delete(url, { headers });\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\nimport { Voucher } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CART_VOUCHER_NORMALIZER = new InjectionToken<\n  Converter<any, Voucher>\n>('CartVoucherNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\r\nimport { CART_VOUCHER_NORMALIZER } from '../../../cart/connectors/voucher/converters';\r\nimport { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\nimport {\r\n  InterceptorUtil,\r\n  USE_CLIENT_TOKEN,\r\n} from '../../utils/interceptor-util';\r\n\r\n@Injectable()\r\nexport class OccCartVoucherAdapter implements CartVoucherAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpoints: OccEndpointsService,\r\n    protected converter: ConverterService\r\n  ) {}\r\n\r\n  protected getCartVoucherEndpoint(userId: string, cartId): string {\r\n    return this.occEndpoints.getUrl('cartVoucher', { userId, cartId });\r\n  }\r\n\r\n  protected getHeaders(userId: string): HttpHeaders {\r\n    let headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n\r\n    if (userId === OCC_USER_ID_ANONYMOUS) {\r\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\r\n    }\r\n\r\n    return headers;\r\n  }\r\n\r\n  add(userId: string, cartId: string, voucherId: string): Observable<{}> {\r\n    const url = this.getCartVoucherEndpoint(userId, cartId);\r\n\r\n    const toAdd = JSON.stringify({});\r\n\r\n    const params: HttpParams = new HttpParams().set('voucherId', voucherId);\r\n\r\n    const headers = this.getHeaders(userId);\r\n\r\n    return this.http.post(url, toAdd, { headers, params }).pipe(\r\n      catchError((error: any) => throwError(error)),\r\n      this.converter.pipeable(CART_VOUCHER_NORMALIZER)\r\n    );\r\n  }\r\n\r\n  remove(userId: string, cartId: string, voucherId: string): Observable<{}> {\r\n    const url =\r\n      this.getCartVoucherEndpoint(userId, cartId) +\r\n      '/' +\r\n      encodeURIComponent(voucherId);\r\n\r\n    const headers = this.getHeaders(userId);\r\n\r\n    return this.http\r\n      .delete(url, { headers })\r\n      .pipe(catchError((error: any) => throwError(error)));\r\n  }\r\n}\r\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map, pluck } from 'rxjs/operators';\r\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\r\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\r\nimport { Cart } from '../../../model/cart.model';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { Occ } from '../../occ-models/occ.models';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\nimport {\r\n  InterceptorUtil,\r\n  USE_CLIENT_TOKEN,\r\n} from '../../utils/interceptor-util';\r\nimport {\r\n  OCC_CART_ID_CURRENT,\r\n  OCC_USER_ID_ANONYMOUS,\r\n} from '../../utils/occ-constants';\r\n\r\n@Injectable()\r\nexport class OccCartAdapter implements CartAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpointsService: OccEndpointsService,\r\n    protected converterService: ConverterService\r\n  ) {}\r\n\r\n  public loadAll(userId: string): Observable<Cart[]> {\r\n    return this.http\r\n      .get<Occ.CartList>(this.occEndpointsService.getUrl('carts', { userId }))\r\n      .pipe(\r\n        pluck('carts'),\r\n        this.converterService.pipeableMany(CART_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  public load(userId: string, cartId: string): Observable<Cart> {\r\n    if (cartId === OCC_CART_ID_CURRENT) {\r\n      return this.loadAll(userId).pipe(\r\n        map((carts) => {\r\n          if (carts) {\r\n            const activeCart = carts.find((cart) => {\r\n              return cart['saveTime'] === undefined;\r\n            });\r\n            return activeCart;\r\n          } else {\r\n            return null;\r\n          }\r\n        })\r\n      );\r\n    } else {\r\n      return this.http\r\n        .get<Occ.Cart>(\r\n          this.occEndpointsService.getUrl('cart', { userId, cartId })\r\n        )\r\n        .pipe(this.converterService.pipeable(CART_NORMALIZER));\r\n    }\r\n  }\r\n\r\n  create(\r\n    userId: string,\r\n    oldCartId?: string,\r\n    toMergeCartGuid?: string\r\n  ): Observable<Cart> {\r\n    const toAdd = JSON.stringify({});\r\n\r\n    let params = {};\r\n\r\n    if (oldCartId) {\r\n      params = { oldCartId: oldCartId };\r\n    }\r\n    if (toMergeCartGuid) {\r\n      params['toMergeCartGuid'] = toMergeCartGuid;\r\n    }\r\n\r\n    return this.http\r\n      .post<Occ.Cart>(\r\n        this.occEndpointsService.getUrl('createCart', { userId }, params),\r\n        toAdd\r\n      )\r\n      .pipe(this.converterService.pipeable(CART_NORMALIZER));\r\n  }\r\n\r\n  delete(userId: string, cartId: string): Observable<{}> {\r\n    let headers = new HttpHeaders();\r\n    if (userId === OCC_USER_ID_ANONYMOUS) {\r\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\r\n    }\r\n    return this.http.delete<{}>(\r\n      this.occEndpointsService.getUrl('deleteCart', { userId, cartId }),\r\n      { headers }\r\n    );\r\n  }\r\n\r\n  addEmail(userId: string, cartId: string, email: string): Observable<{}> {\r\n    let headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\r\n\r\n    const httpParams: HttpParams = new HttpParams().set('email', email);\r\n\r\n    const url = this.occEndpointsService.getUrl('addEmail', {\r\n      userId,\r\n      cartId,\r\n    });\r\n\r\n    return this.http.put(url, httpParams, { headers });\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const SAVE_CART_NORMALIZER = new InjectionToken<\n  Converter<any, SaveCartResult>\n>('SaveCartNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SAVE_CART_NORMALIZER } from '../../../cart/connectors/save-cart/converters';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSaveCartAdapter implements SaveCartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    let httpParams = new HttpParams();\n\n    if (Boolean(saveCartName)) {\n      httpParams = httpParams.set('saveCartName', saveCartName);\n    }\n\n    if (Boolean(saveCartDescription)) {\n      httpParams = httpParams.set('saveCartDescription', saveCartDescription);\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .patch<Occ.SaveCartResult>(\n        this.occEndpointsService.getUrl('saveCart', { userId, cartId }),\n        httpParams,\n        { headers }\n      )\n      .pipe(this.converterService.pipeable(SAVE_CART_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\r\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\r\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\r\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\r\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\r\nimport { provideDefaultConfig } from '../../../config/config.module';\r\nimport { OccCartNormalizer } from './converters/occ-cart-normalizer';\r\nimport { defaultOccCartConfig } from './default-occ-cart-config';\r\nimport { OccCartEntryAdapter } from './occ-cart-entry.adapter';\r\nimport { OccCartVoucherAdapter } from './occ-cart-voucher.adapter';\r\nimport { OccCartAdapter } from './occ-cart.adapter';\r\nimport { OccSaveCartAdapter } from './occ-save-cart.adapter';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, HttpClientModule],\r\n  providers: [\r\n    provideDefaultConfig(defaultOccCartConfig),\r\n    {\r\n      provide: CartAdapter,\r\n      useClass: OccCartAdapter,\r\n    },\r\n    {\r\n      provide: CART_NORMALIZER,\r\n      useExisting: OccCartNormalizer,\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: CartEntryAdapter,\r\n      useClass: OccCartEntryAdapter,\r\n    },\r\n    {\r\n      provide: CartVoucherAdapter,\r\n      useClass: OccCartVoucherAdapter,\r\n    },\r\n    {\r\n      provide: SaveCartAdapter,\r\n      useClass: OccSaveCartAdapter,\r\n    },\r\n  ],\r\n})\r\nexport class CartOccModule {}\r\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Order } from '../../../model/order.model';\n\nexport const ORDER_NORMALIZER = new InjectionToken<Converter<any, Order>>(\n  'OrderNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { Order } from '../../../model/order.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n// To be changed to a more optimised params after ticket: C3PO-1076\nconst FULL_PARAMS = 'fields=FULL';\nconst CHECKOUT_PARAMS = 'deliveryAddress(FULL),deliveryMode,paymentInfo(FULL)';\nconst ORDERS_ENDPOINT = '/orders';\nconst CARTS_ENDPOINT = '/carts/';\n\n@Injectable()\nexport class OccCheckoutAdapter implements CheckoutAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getEndpoint(userId: string, subEndpoint: string): string {\n    const orderEndpoint = 'users/' + userId + subEndpoint;\n    return this.occEndpoints.getEndpoint(orderEndpoint);\n  }\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    const url = this.getEndpoint(userId, ORDERS_ENDPOINT);\n    const params = new HttpParams({\n      fromString: 'cartId=' + cartId + '&' + FULL_PARAMS,\n    });\n\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return this.http\n      .post<Occ.Order>(url, {}, { headers, params })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    const url = this.getEndpoint(userId, CARTS_ENDPOINT) + cartId;\n    const params = new HttpParams({\n      fromString: `fields=${CHECKOUT_PARAMS}`,\n    });\n    return this.http.get<CheckoutDetails>(url, { params });\n  }\n\n  clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/addresses/delivery`;\n    return this.http.delete<any>(url);\n  }\n\n  clearCheckoutDeliveryMode(userId: string, cartId: string): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/deliverymode`;\n    return this.http.delete<any>(url);\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport const DELIVERY_MODE_NORMALIZER = new InjectionToken<\n  Converter<any, DeliveryMode>\n>('DeliveryModeNormalizer');\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const ADDRESS_NORMALIZER = new InjectionToken<Converter<any, Address>>(\n  'AddressNormalizer'\n);\n\nexport const ADDRESS_SERIALIZER = new InjectionToken<Converter<Address, any>>(\n  'AddressSerializer'\n);\n\nexport const ADDRESS_VALIDATION_NORMALIZER = new InjectionToken<\n  Converter<any, AddressValidation>\n>('AddressValidationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { DELIVERY_MODE_NORMALIZER } from '../../../checkout/connectors/delivery/converters';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n} from '../../../user/connectors/address/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCheckoutDeliveryAdapter implements CheckoutDeliveryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<Occ.Address>(\n        this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n        address,\n        {\n          headers: new HttpHeaders().set('Content-Type', 'application/json'),\n        }\n      )\n      .pipe(this.converter.pipeable(ADDRESS_NORMALIZER));\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n      {},\n      {\n        params: { addressId: addressId },\n      }\n    );\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/deliverymode',\n      {},\n      {\n        params: { deliveryModeId: deliveryModeId },\n      }\n    );\n  }\n\n  public getMode(userId: string, cartId: string): Observable<any> {\n    return this.http\n      .get(this.getCartEndpoint(userId) + cartId + '/deliverymode')\n      .pipe(this.converter.pipeable(DELIVERY_MODE_NORMALIZER));\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.http\n      .get<Occ.DeliveryModeList>(\n        this.getCartEndpoint(userId) + cartId + '/deliverymodes'\n      )\n      .pipe(\n        pluck('deliveryModes'),\n        this.converter.pipeableMany(DELIVERY_MODE_NORMALIZER)\n      );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport const PAYMENT_DETAILS_NORMALIZER = new InjectionToken<\n  Converter<any, PaymentDetails>\n>('PaymentDetailsNormalizer');\n\nexport const PAYMENT_DETAILS_SERIALIZER = new InjectionToken<\n  Converter<PaymentDetails, any>\n>('PaymentDetailsSerializer');\n\nexport const CARD_TYPE_NORMALIZER = new InjectionToken<\n  Converter<any, CardType>\n>('CardTypeNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\r\nimport {\r\n  CARD_TYPE_NORMALIZER,\r\n  PAYMENT_DETAILS_NORMALIZER,\r\n  PAYMENT_DETAILS_SERIALIZER,\r\n} from '../../../checkout/connectors/payment/converters';\r\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { Occ } from '../../occ-models';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\nimport { CustomEncoder } from '../cart/custom.encoder';\r\n\r\nconst ENDPOINT_CARD_TYPES = 'cardtypes';\r\n\r\n@Injectable()\r\nexport class OccCheckoutPaymentAdapter implements CheckoutPaymentAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpoints: OccEndpointsService,\r\n    protected converter: ConverterService\r\n  ) {\r\n    if (typeof DOMParser !== 'undefined') {\r\n      this.domparser = new DOMParser();\r\n    }\r\n  }\r\n\r\n  private domparser: DOMParser;\r\n\r\n  protected getCartEndpoint(userId: string): string {\r\n    const cartEndpoint = 'users/' + userId + '/carts/';\r\n    return this.occEndpoints.getEndpoint(cartEndpoint);\r\n  }\r\n\r\n  public create(\r\n    userId: string,\r\n    cartId: string,\r\n    paymentDetails: PaymentDetails\r\n  ): Observable<PaymentDetails> {\r\n    paymentDetails = this.converter.convert(\r\n      paymentDetails,\r\n      PAYMENT_DETAILS_SERIALIZER\r\n    );\r\n    return this.getProviderSubInfo(userId, cartId).pipe(\r\n      map((data) => {\r\n        const labelsMap = this.convertToMap(data.mappingLabels.entry);\r\n        return {\r\n          url: data.postUrl,\r\n          parameters: this.getParamsForPaymentProvider(\r\n            paymentDetails,\r\n            data.parameters.entry,\r\n            labelsMap\r\n          ),\r\n          mappingLabels: labelsMap,\r\n        };\r\n      }),\r\n      mergeMap((sub) => {\r\n        // create a subscription directly with payment provider\r\n        return this.createSubWithProvider(sub.url, sub.parameters).pipe(\r\n          map((response) => this.extractPaymentDetailsFromHtml(response)),\r\n          mergeMap((fromPaymentProvider) => {\r\n            fromPaymentProvider['defaultPayment'] =\r\n              paymentDetails.defaultPayment;\r\n            fromPaymentProvider['savePaymentInfo'] = true;\r\n            return this.createDetailsWithParameters(\r\n              userId,\r\n              cartId,\r\n              fromPaymentProvider\r\n            ).pipe(this.converter.pipeable(PAYMENT_DETAILS_NORMALIZER));\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  public set(\r\n    userId: string,\r\n    cartId: string,\r\n    paymentDetailsId: string\r\n  ): Observable<any> {\r\n    return this.http.put(\r\n      this.getCartEndpoint(userId) + cartId + '/paymentdetails',\r\n      {},\r\n      {\r\n        params: { paymentDetailsId: paymentDetailsId },\r\n      }\r\n    );\r\n  }\r\n\r\n  loadCardTypes(): Observable<CardType[]> {\r\n    return this.http\r\n      .get<Occ.CardTypeList>(this.occEndpoints.getEndpoint(ENDPOINT_CARD_TYPES))\r\n      .pipe(\r\n        map((cardTypeList) => cardTypeList.cardTypes),\r\n        this.converter.pipeableMany(CARD_TYPE_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  protected getProviderSubInfo(\r\n    userId: string,\r\n    cartId: string\r\n  ): Observable<any> {\r\n    return this.http.get(\r\n      this.getCartEndpoint(userId) +\r\n        cartId +\r\n        '/payment/sop/request?responseUrl=sampleUrl'\r\n    );\r\n  }\r\n\r\n  protected createSubWithProvider(\r\n    postUrl: string,\r\n    parameters: any\r\n  ): Observable<any> {\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n      Accept: 'text/html',\r\n    });\r\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\r\n    Object.keys(parameters).forEach((key) => {\r\n      httpParams = httpParams.append(key, parameters[key]);\r\n    });\r\n\r\n    return this.http.post(postUrl, httpParams, {\r\n      headers,\r\n      responseType: 'text',\r\n    });\r\n  }\r\n\r\n  protected createDetailsWithParameters(\r\n    userId: string,\r\n    cartId: string,\r\n    parameters: any\r\n  ): Observable<PaymentDetails> {\r\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\r\n    Object.keys(parameters).forEach((key) => {\r\n      httpParams = httpParams.append(key, parameters[key]);\r\n    });\r\n\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n\r\n    return this.http.post<PaymentDetails>(\r\n      this.getCartEndpoint(userId) + cartId + '/payment/sop/response',\r\n      httpParams,\r\n      { headers }\r\n    );\r\n  }\r\n\r\n  private getParamsForPaymentProvider(\r\n    paymentDetails: PaymentDetails,\r\n    parameters: { key; value }[],\r\n    mappingLabels: any\r\n  ) {\r\n    const params = this.convertToMap(parameters);\r\n    params[mappingLabels['hybris_account_holder_name']] =\r\n      paymentDetails.accountHolderName;\r\n    params[mappingLabels['hybris_card_type']] = paymentDetails.cardType.code;\r\n    params[mappingLabels['hybris_card_number']] = paymentDetails.cardNumber;\r\n    if (mappingLabels['hybris_combined_expiry_date'] === 'true') {\r\n      params[mappingLabels['hybris_card_expiry_date']] =\r\n        paymentDetails.expiryMonth +\r\n        mappingLabels['hybris_separator_expiry_date'] +\r\n        paymentDetails.expiryYear;\r\n    } else {\r\n      params[mappingLabels['hybris_card_expiration_month']] =\r\n        paymentDetails.expiryMonth;\r\n      params[mappingLabels['hybris_card_expiration_year']] =\r\n        paymentDetails.expiryYear;\r\n    }\r\n    params[mappingLabels['hybris_card_cvn']] = paymentDetails.cvn;\r\n\r\n    // billing address\r\n    params[mappingLabels['hybris_billTo_country']] =\r\n      paymentDetails.billingAddress.country.isocode;\r\n    params[mappingLabels['hybris_billTo_firstname']] =\r\n      paymentDetails.billingAddress.firstName;\r\n    params[mappingLabels['hybris_billTo_lastname']] =\r\n      paymentDetails.billingAddress.lastName;\r\n    params[mappingLabels['hybris_billTo_street1']] =\r\n      paymentDetails.billingAddress.line1 +\r\n      ' ' +\r\n      paymentDetails.billingAddress.line2;\r\n    params[mappingLabels['hybris_billTo_city']] =\r\n      paymentDetails.billingAddress.town;\r\n    if (paymentDetails.billingAddress.region) {\r\n      params[mappingLabels['hybris_billTo_region']] =\r\n        paymentDetails.billingAddress.region.isocodeShort;\r\n    } else {\r\n      params[mappingLabels['hybris_billTo_region']] = '';\r\n    }\r\n    params[mappingLabels['hybris_billTo_postalcode']] =\r\n      paymentDetails.billingAddress.postalCode;\r\n    return params;\r\n  }\r\n\r\n  private extractPaymentDetailsFromHtml(html: string): any {\r\n    const domdoc = this.domparser.parseFromString(html, 'text/xml');\r\n    const responseForm = domdoc.getElementsByTagName('form')[0];\r\n    const inputs = responseForm.getElementsByTagName('input');\r\n\r\n    const values = {};\r\n    for (let i = 0; inputs[i]; i++) {\r\n      const input = inputs[i];\r\n      if (\r\n        input.getAttribute('name') !== '{}' &&\r\n        input.getAttribute('value') !== ''\r\n      ) {\r\n        values[input.getAttribute('name')] = input.getAttribute('value');\r\n      }\r\n    }\r\n\r\n    return values;\r\n  }\r\n\r\n  private convertToMap(paramList: { key; value }[]) {\r\n    return paramList.reduce(function (result, item) {\r\n      const key = item.key;\r\n      result[key] = item.value;\r\n      return result;\r\n    }, {});\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\nexport abstract class CheckoutAdapter {\n  /**\n   * Abstract method used to place an order.\n   *\n   * @param userId The `userId` for given user\n   * @param cartId The `cartId` for cart used for placing order\n   */\n  abstract placeOrder(userId: string, cartId: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load checkout details\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails>;\n\n  /**\n   * Abstract method used to clear checkout delivery address\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to clear checkout delivery mode\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\r\nimport { Occ } from '../../../occ-models/occ.models';\r\nimport {\r\n  Converter,\r\n  ConverterService,\r\n} from '../../../../util/converter.service';\r\nimport { Order, OrderEntry } from '../../../../model/order.model';\r\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OccOrderNormalizer implements Converter<Occ.Order, Order> {\r\n  constructor(private converter: ConverterService) {}\r\n\r\n  convert(source: Occ.Order, target?: Order): Order {\r\n    if (target === undefined) {\r\n      target = { ...(source as any) };\r\n    }\r\n\r\n    if (source.entries) {\r\n      target.entries = source.entries.map((entry) =>\r\n        this.convertOrderEntry(entry)\r\n      );\r\n    }\r\n\r\n    if (source.consignments) {\r\n      target.consignments = source.consignments.map((consignment) => ({\r\n        ...consignment,\r\n        entries: consignment.entries.map((entry) => ({\r\n          ...entry,\r\n          orderEntry: this.convertOrderEntry(entry.orderEntry),\r\n        })),\r\n      }));\r\n    }\r\n\r\n    if (source.unconsignedEntries) {\r\n      target.unconsignedEntries = source.unconsignedEntries.map((entry) =>\r\n        this.convertOrderEntry(entry)\r\n      );\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\r\n    return {\r\n      ...source,\r\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\r\n    };\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport abstract class CheckoutDeliveryAdapter {\n  /**\n   * Abstract method used to create address in cart\n   *\n   * @param userId\n   * @param cartId\n   * @param address\n   */\n  abstract createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address>;\n\n  /**\n   * Abstract method used to set adress for delivery\n   *\n   * @param userId\n   * @param cartId\n   * @param addressId\n   */\n  abstract setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to set delivery mode on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param deliveryModeId\n   */\n  abstract setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get current delivery mode from cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getMode(userId: string, cartId: string): Observable<DeliveryMode>;\n\n  /**\n   * Abstract method used to get supported delivery modes for cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]>;\n}\n","import { Observable } from 'rxjs';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class CheckoutPaymentAdapter {\n  /**\n   * Abstract method used to create payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetails\n   */\n  abstract create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails>;\n\n  /**\n   * Abstract method used to set payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetailsId\n   */\n  abstract set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get available cart types\n   */\n  abstract loadCardTypes(): Observable<CardType[]>;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { OccCheckoutAdapter } from './occ-checkout.adapter';\nimport { OccOrderNormalizer } from './converters/occ-order-normalizer';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { OccCheckoutDeliveryAdapter } from './occ-checkout-delivery.adapter';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport { OccCheckoutPaymentAdapter } from './occ-checkout-payment.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CheckoutAdapter,\n      useClass: OccCheckoutAdapter,\n    },\n    { provide: ORDER_NORMALIZER, useExisting: OccOrderNormalizer, multi: true },\n    {\n      provide: CheckoutDeliveryAdapter,\n      useClass: OccCheckoutDeliveryAdapter,\n    },\n    {\n      provide: CheckoutPaymentAdapter,\n      useClass: OccCheckoutPaymentAdapter,\n    },\n  ],\n})\nexport class CheckoutOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CmsStructureModel>\n>('CmsPageNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsStructureModel } from '../../../cms/model/page.model';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsPageAdapter implements CmsPageAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<CmsStructureModel> {\n    // load page by Id\n    if (pageContext.type === undefined) {\n      return this.http\n        .get(\n          this.occEndpoints.getUrl(\n            'page',\n            {\n              id: pageContext.id,\n            },\n            { fields: fields ? fields : 'DEFAULT' }\n          ),\n          {\n            headers: this.headers,\n          }\n        )\n        .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n    }\n\n    // load page by PageContext\n    const httpParams = this.getPagesRequestParams(pageContext);\n    return this.http\n      .get(this.getPagesEndpoint(httpParams, fields), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n  }\n\n  private getPagesEndpoint(\n    params: {\n      [key: string]: string;\n    },\n    fields?: string\n  ): string {\n    fields = fields ? fields : 'DEFAULT';\n    return this.occEndpoints.getUrl('pages', {}, { fields, ...params });\n  }\n\n  private getPagesRequestParams(\n    pageContext: PageContext\n  ): { [key: string]: any } {\n    let httpParams = {};\n\n    // smartedit preview page is loaded by previewToken which added by interceptor\n    if (pageContext.id !== 'smartedit-preview') {\n      httpParams = { pageType: pageContext.type };\n\n      if (pageContext.type === PageType.CONTENT_PAGE) {\n        httpParams['pageLabelOrId'] = pageContext.id;\n      } else {\n        httpParams['code'] = pageContext.id;\n      }\n    }\n    return httpParams;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_COMPONENT_NORMALIZER = new InjectionToken<\n  Converter<any, CmsComponent>\n>('CmsComponentNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\nimport { CMS_COMPONENT_NORMALIZER } from '../../../cms/connectors/component/converters';\nimport { CmsComponent, PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsComponentAdapter implements CmsComponentAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.http\n      .get<T>(this.getComponentEndPoint(id, pageContext), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable<any, T>(CMS_COMPONENT_NORMALIZER));\n  }\n\n  findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    requestParams['componentIds'] = ids.toString();\n\n    return this.http\n      .get<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const idList: Occ.ComponentIDList = { idList: ids };\n\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    return this.http\n      .post<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        idList,\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  protected getComponentEndPoint(id: string, pageContext: PageContext): string {\n    return this.occEndpoints.getUrl(\n      'component',\n      { id },\n      this.getContextParams(pageContext)\n    );\n  }\n\n  protected getComponentsEndpoint(requestParams: any, fields: string): string {\n    return this.occEndpoints.getUrl(\n      'components',\n      {},\n      { fields, ...requestParams }\n    );\n  }\n\n  private getPaginationParams(\n    currentPage?: number,\n    pageSize?: number,\n    sort?: string\n  ): { [key: string]: string } {\n    const requestParams = {};\n    if (currentPage !== undefined) {\n      requestParams['currentPage'] = currentPage.toString();\n    }\n    if (pageSize !== undefined) {\n      requestParams['pageSize'] = pageSize.toString();\n    }\n    if (sort !== undefined) {\n      requestParams['sort'] = sort;\n    }\n\n    return requestParams;\n  }\n\n  private getContextParams(\n    pageContext: PageContext\n  ): { [key: string]: string } {\n    let requestParams = {};\n    switch (pageContext.type) {\n      case PageType.PRODUCT_PAGE: {\n        requestParams = { productCode: pageContext.id };\n        break;\n      }\n      case PageType.CATEGORY_PAGE: {\n        requestParams = { categoryCode: pageContext.id };\n        break;\n      }\n      case PageType.CATALOG_PAGE: {\n        requestParams = { catalogCode: pageContext.id };\n        break;\n      }\n    }\n\n    return requestParams;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CMS_FLEX_COMPONENT_TYPE,\n  JSP_INCLUDE_CMS_COMPONENT_TYPE,\n} from '../../../../cms/config/cms-config';\nimport { ContentSlotComponentData } from '../../../../cms/model/content-slot-component-data.model';\nimport { ContentSlotData } from '../../../../cms/model/content-slot-data.model';\nimport { CmsStructureModel } from '../../../../cms/model/page.model';\nimport { Converter } from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCmsPageNormalizer\n  implements Converter<Occ.CMSPage, CmsStructureModel> {\n  convert(\n    source: Occ.CMSPage,\n    target: CmsStructureModel = {}\n  ): CmsStructureModel {\n    this.normalizePageData(source, target);\n    this.normalizePageSlotData(source, target);\n    this.normalizePageComponentData(source, target);\n    this.normalizeComponentData(source, target);\n    return target;\n  }\n\n  private normalizePageData(source: any, target: CmsStructureModel): void {\n    target.page = {\n      loadTime: Date.now(),\n      name: source.name,\n      type: source.typeCode,\n      title: source.title,\n      pageId: source.uid,\n      template: source.template,\n      slots: {},\n      properties: source.properties,\n      label: source.label,\n    };\n  }\n\n  private normalizePageSlotData(source: any, target: CmsStructureModel): void {\n    for (const slot of source.contentSlots.contentSlot) {\n      target.page.slots[slot.position] = {\n        components: [],\n        properties: slot.properties,\n      } as ContentSlotData;\n    }\n  }\n\n  private normalizePageComponentData(\n    source: any,\n    target: CmsStructureModel\n  ): void {\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component) {\n          const comp: ContentSlotComponentData = {\n            uid: component.uid,\n            typeCode: component.typeCode,\n            properties: component.properties,\n          };\n\n          if (component.typeCode === CMS_FLEX_COMPONENT_TYPE) {\n            comp.flexType = component.flexType;\n          } else if (component.typeCode === JSP_INCLUDE_CMS_COMPONENT_TYPE) {\n            comp.flexType = component.uid;\n          } else {\n            comp.flexType = component.typeCode;\n          }\n          target.page.slots[slot.position].components.push(comp);\n        }\n      }\n    }\n  }\n\n  private normalizeComponentData(source: any, target: CmsStructureModel): void {\n    target.components = [];\n\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component as any) {\n          // we dont put properties into component state\n          if (component.properties) {\n            component.properties = undefined;\n          }\n          target.components.push(component);\n        }\n      }\n    }\n  }\n}\n","import { Observable } from 'rxjs';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n/**\n * Abstract class that can be used to implement custom loader logic\n * in order to load CMS structure from third-party CMS system.\n */\nexport abstract class CmsPageAdapter {\n  /**\n   * Abstract method must be used to load the page structure for a given `PageContext`.\n   * The page can be loaded from alternative sources, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load(pageContext: PageContext): Observable<CmsStructureModel>;\n}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/models/page-context.model';\n\nexport abstract class CmsComponentAdapter {\n  /**\n   * Abstract method must be used to load the component for a given `id` and `PageContext`.\n   * The component can be loaded from alternative backend, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<T>;\n\n  abstract findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n\n  abstract findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { OccCmsComponentAdapter } from './occ-cms-component.adapter';\nimport { OccCmsPageNormalizer } from './converters/occ-cms-page-normalizer';\nimport { OccCmsPageAdapter } from './occ-cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CmsPageAdapter,\n      useClass: OccCmsPageAdapter,\n    },\n    {\n      provide: CMS_PAGE_NORMALIZER,\n      useExisting: OccCmsPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: CmsComponentAdapter,\n      useClass: OccCmsComponentAdapter,\n    },\n  ],\n})\nexport class CmsOccModule {}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\nimport { Images } from '../../../../model/image.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductImageNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.images) {\n      target.images = this.normalize(source.images);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the image structure we'd like to have. Instead of\n   * having a single list with all images despite type and format\n   * we create a proper structure. With that we can do:\n   * - images.primary.thumnail.url\n   * - images.GALLERY[0].thumnail.url\n   */\n  normalize(source: Occ.Image[]): Images {\n    const images = {};\n    if (source) {\n      for (const image of source) {\n        const isList = image.hasOwnProperty('galleryIndex');\n        if (!images.hasOwnProperty(image.imageType)) {\n          images[image.imageType] = isList ? [] : {};\n        }\n\n        let imageContainer;\n        if (isList && !images[image.imageType][image.galleryIndex]) {\n          images[image.imageType][image.galleryIndex] = {};\n        }\n\n        if (isList) {\n          imageContainer = images[image.imageType][image.galleryIndex];\n        } else {\n          imageContainer = images[image.imageType];\n        }\n\n        const targetImage = { ...image };\n        targetImage.url = this.normalizeImageUrl(targetImage.url);\n        imageContainer[image.format] = targetImage;\n      }\n    }\n    return images;\n  }\n  /**\n   * Traditionally, in an on-prem world, medias and other backend related calls\n   * are hosted at the same platform, but in a cloud setup, applications are are\n   * typically distributed cross different environments. For media, we use the\n   * `backend.media.baseUrl` by default, but fallback to `backend.occ.baseUrl`\n   * if none provided.\n   */\n  private normalizeImageUrl(url: string): string {\n    if (new RegExp(/^(http|data:image|\\/\\/)/i).test(url)) {\n      return url;\n    }\n    return (\n      (this.config.backend.media.baseUrl ||\n        this.config.backend.occ.baseUrl ||\n        '') + url\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product, ProductReferences } from '../../../../model/product.model';\n\n@Injectable()\nexport class ProductReferenceNormalizer\n  implements Converter<Occ.Product, Product> {\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.productReferences) {\n      target.productReferences = this.normalize(source.productReferences);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the reference structure we'd like to have. Instead of\n   * having a single list with all references we create a proper structure.\n   * With that we have a semantic API for the clients\n   * - product.references.SIMILAR[0].code\n   */\n  protected normalize(source: Occ.ProductReference[]): ProductReferences {\n    const references = {};\n\n    if (source) {\n      for (const reference of source) {\n        if (!references.hasOwnProperty(reference.referenceType)) {\n          references[reference.referenceType] = [];\n        }\n        references[reference.referenceType].push(reference);\n      }\n    }\n    return references;\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  Facet,\r\n  ProductSearchPage,\r\n} from '../../../../model/product-search.model';\r\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\r\nimport {\r\n  Converter,\r\n  ConverterService,\r\n} from '../../../../util/converter.service';\r\nimport { Occ } from '../../../occ-models/occ.models';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OccProductSearchPageNormalizer\r\n  implements Converter<Occ.ProductSearchPage, ProductSearchPage> {\r\n  constructor(private converterService: ConverterService) {}\r\n\r\n  /**\r\n   * Specifies the minimal number of top values in case\r\n   * non have been setup by the business.\r\n   */\r\n  protected DEFAULT_TOP_VALUES = 6;\r\n\r\n  convert(\r\n    source: Occ.ProductSearchPage,\r\n    target: ProductSearchPage = {}\r\n  ): ProductSearchPage {\r\n    target = {\r\n      ...target,\r\n      ...(source as any),\r\n    };\r\n\r\n    this.normalizeFacets(target);\r\n    if (source.products) {\r\n      target.products = source.products.map((product) =>\r\n        this.converterService.convert(product, PRODUCT_NORMALIZER)\r\n      );\r\n    }\r\n    return target;\r\n  }\r\n\r\n  private normalizeFacets(target: ProductSearchPage): void {\r\n    this.normalizeFacetValues(target);\r\n    this.normalizeUselessFacets(target);\r\n  }\r\n\r\n  /**\r\n   * The (current) backend returns facets with values that do not contribute\r\n   * to the facet navigation much, as the number in the result list will not get\r\n   * behaviour, see https://jira.hybris.com/browse/CS-427.\r\n   *\r\n   * As long as this is not in place, we manually filter the facet from the list;\r\n   * any facet that does not have a count < the total results will be dropped from\r\n   * the facets.\r\n   */\r\n  private normalizeUselessFacets(target: ProductSearchPage): void {\r\n    target.facets = target.facets.filter((facet) => {\r\n      return (\r\n        !target.pagination ||\r\n        !target.pagination.totalResults ||\r\n        ((!facet.hasOwnProperty('visible') || facet.visible) &&\r\n          facet.values &&\r\n          facet.values.find((value) => {\r\n            return (\r\n              value.selected || value.count < target.pagination.totalResults\r\n            );\r\n          }))\r\n      );\r\n    });\r\n  }\r\n\r\n  /*\r\n   * In case there are so-called `topValues` given for the facet values,\r\n   * values are obsolete.\r\n   *\r\n   * `topValues` is a feature in Adaptive Search which can limit a large\r\n   * amount of facet values to a small set (5 by default). As long as the backend\r\n   * provides all facet values AND topValues, we normalize the data to not bother\r\n   * the UI with this specific feature.\r\n   */\r\n  private normalizeFacetValues(target: ProductSearchPage): void {\r\n    if (target.facets) {\r\n      target.facets = target.facets.map((facetSource: Facet) => {\r\n        const { topValues, ...facetTarget } = facetSource;\r\n        facetTarget.topValueCount = topValues\r\n          ? topValues.length\r\n          : this.DEFAULT_TOP_VALUES;\r\n        return facetTarget;\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ProductReference } from '../../../../model/product.model';\r\nimport { Occ } from '../../../occ-models/occ.models';\r\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\r\nimport {\r\n  Converter,\r\n  ConverterService,\r\n} from '../../../../util/converter.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OccProductReferencesListNormalizer\r\n  implements Converter<Occ.ProductReferenceList, ProductReference[]> {\r\n  constructor(private converter: ConverterService) {}\r\n\r\n  convert(\r\n    source: Occ.ProductReferenceList,\r\n    target: ProductReference[] = []\r\n  ): ProductReference[] {\r\n    if (target === undefined) {\r\n      target = { ...(source as any) };\r\n    }\r\n\r\n    if (source && source.references) {\r\n      target = source.references.map((reference) => ({\r\n        ...reference,\r\n        target: this.converter.convert(reference.target, PRODUCT_NORMALIZER),\r\n      }));\r\n\r\n      return target;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductNameNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.name) {\n      target.name = this.normalize(source.name);\n      target.nameHtml = source.name;\n    }\n    return target;\n  }\n\n  protected normalize(name: string): string {\n    return name.replace(/<[^>]*>/g, '');\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { ProductReference } from '../../../model/product.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const PRODUCT_REFERENCES_NORMALIZER = new InjectionToken<\n  Converter<any, ProductReference[]>\n>('ProductReferencesListNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\n\n@Injectable()\nexport class OccProductReferencesAdapter implements ProductReferencesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, referenceType, pageSize))\n      .pipe(this.converter.pipeable(PRODUCT_REFERENCES_NORMALIZER));\n  }\n\n  protected getEndpoint(\n    code: string,\n    reference?: string,\n    pageSize?: number\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productReferences',\n      {\n        productCode: code,\n      },\n      { referenceType: reference, pageSize }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Review } from '../../../model/product.model';\n\nexport const PRODUCT_REVIEW_NORMALIZER = new InjectionToken<\n  Converter<any, Review>\n>('ProductReviewNormalizer');\n\nexport const PRODUCT_REVIEW_SERIALIZER = new InjectionToken<\n  Converter<Review, any>\n>('ProductReviewSerializer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { pluck } from 'rxjs/operators';\r\nimport { Review } from '../../../model/product.model';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport {\r\n  PRODUCT_REVIEW_NORMALIZER,\r\n  PRODUCT_REVIEW_SERIALIZER,\r\n} from '../../../product/connectors/reviews/converters';\r\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\r\n\r\n@Injectable()\r\nexport class OccProductReviewsAdapter implements ProductReviewsAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpoints: OccEndpointsService,\r\n    protected converter: ConverterService\r\n  ) {}\r\n\r\n  load(productCode: string, maxCount?: number): Observable<Review[]> {\r\n    return this.http\r\n      .get(this.getEndpoint(productCode, maxCount))\r\n      .pipe(\r\n        pluck('reviews'),\r\n        this.converter.pipeableMany(PRODUCT_REVIEW_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  post(productCode: string, review: any): Observable<Review> {\r\n    review = this.converter.convert(review, PRODUCT_REVIEW_SERIALIZER);\r\n\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n\r\n    const body = new URLSearchParams();\r\n    body.append('headline', review.headline);\r\n    body.append('comment', review.comment);\r\n    body.append('rating', review.rating.toString());\r\n    body.append('alias', review.alias);\r\n\r\n    return this.http.post(this.getEndpoint(productCode), body.toString(), {\r\n      headers,\r\n    });\r\n  }\r\n\r\n  protected getEndpoint(code: string, maxCount?: number): string {\r\n    return this.occEndpoints.getUrl(\r\n      'productReviews',\r\n      {\r\n        productCode: code,\r\n      },\r\n      { maxCount }\r\n    );\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport const PRODUCT_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, ProductSearchPage>\n>('ProductSearchPageNormalizer');\n\nexport const PRODUCT_SUGGESTION_NORMALIZER = new InjectionToken<\n  Converter<any, Suggestion>\n>('ProductSuggestionNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  PRODUCT_SEARCH_PAGE_NORMALIZER,\n  PRODUCT_SUGGESTION_NORMALIZER,\n} from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { SearchConfig } from '../../../product/model/search-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst DEFAULT_SEARCH_CONFIG: SearchConfig = {\n  pageSize: 20,\n};\n\n@Injectable()\nexport class OccProductSearchAdapter implements ProductSearchAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: SearchConfig = DEFAULT_SEARCH_CONFIG\n  ): Observable<ProductSearchPage> {\n    return this.http\n      .get(this.getSearchEndpoint(query, searchConfig))\n      .pipe(this.converter.pipeable(PRODUCT_SEARCH_PAGE_NORMALIZER));\n  }\n\n  loadSuggestions(\n    term: string,\n    pageSize: number = 3\n  ): Observable<Suggestion[]> {\n    return this.http\n      .get(this.getSuggestionEndpoint(term, pageSize.toString()))\n      .pipe(\n        pluck('suggestions'),\n        this.converter.pipeableMany(PRODUCT_SUGGESTION_NORMALIZER)\n      );\n  }\n\n  protected getSearchEndpoint(\n    query: string,\n    searchConfig: SearchConfig\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productSearch',\n      {},\n      {\n        query,\n        pageSize: searchConfig.pageSize,\n        currentPage: searchConfig.currentPage,\n        sort: searchConfig.sortCode,\n      }\n    );\n  }\n\n  protected getSuggestionEndpoint(term: string, max: string): string {\n    return this.occEndpoints.getUrl('productSuggestions', {}, { term, max });\n  }\n}\n","import { deepMerge, isObject } from '../../config/utils/deep-merge';\r\n\r\n/**\r\n * Merge occ fields parameters\r\n *\r\n * @param fields Fields definition as string or object\r\n */\r\nexport function mergeFields(fields: (string | object)[]): string {\r\n  const parsedFields = fields.map((f) =>\r\n    typeof f === 'string' ? parseFields(f) : f\r\n  );\r\n  const mergedFields = optimizeFields(deepMerge({}, ...parsedFields));\r\n  return stringifyFields(mergedFields);\r\n}\r\n\r\n/**\r\n * Optimize fields definition by removing not needed groups\r\n *\r\n * @param fields\r\n */\r\nexport function optimizeFields(fields: object = {}): object {\r\n  const keys = Object.keys(fields);\r\n  if (keys.includes('FULL')) {\r\n    delete fields['DEFAULT'];\r\n    delete fields['BASIC'];\r\n  } else if (keys.includes('DEFAULT')) {\r\n    delete fields['BASIC'];\r\n  }\r\n  Object.keys(fields).forEach((key) => {\r\n    fields[key] = optimizeFields(fields[key]);\r\n  });\r\n  return fields;\r\n}\r\n\r\n/**\r\n * Parse string field definition to an AST object\r\n *\r\n * @param fields Fields string definition\r\n * @param startIndex Used for recurrence\r\n */\r\nexport function parseFields(\r\n  fields: string,\r\n  startIndex = 0\r\n): [object, number] | object {\r\n  const parsedFields = {};\r\n\r\n  let i = startIndex;\r\n  while (i < fields.length) {\r\n    if (fields[i] === ',') {\r\n      if (i > startIndex) {\r\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\r\n      }\r\n      startIndex = i + 1;\r\n    } else if (fields[i] === '(') {\r\n      const subFields = parseFields(fields, i + 1);\r\n      if (Array.isArray(subFields)) {\r\n        parsedFields[fields.substr(startIndex, i - startIndex)] = subFields[0];\r\n        startIndex = subFields[1];\r\n        i = startIndex - 1;\r\n      } else {\r\n        return parsedFields;\r\n      }\r\n    } else if (fields[i] === ')') {\r\n      if (i > startIndex) {\r\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\r\n      }\r\n      return [parsedFields, i + 1];\r\n    }\r\n    i++;\r\n  }\r\n\r\n  if (startIndex < fields.length) {\r\n    parsedFields[fields.substr(startIndex, i - startIndex)] = {};\r\n  }\r\n\r\n  return parsedFields;\r\n}\r\n\r\n/**\r\n * Convert AST object fields definition to string representation\r\n *\r\n * @param fields\r\n */\r\nexport function stringifyFields(fields: object): string {\r\n  return Object.keys(fields)\r\n    .map((key) => {\r\n      const subFields = stringifyFields(fields[key]);\r\n      return subFields ? `${key}(${subFields})` : key;\r\n    })\r\n    .join(',');\r\n}\r\n\r\n/**\r\n * Extract part of the object described by fields definition\r\n *\r\n * @param data\r\n * @param fields\r\n */\r\nexport function extractFields<T>(data: T, fields: string | object): T {\r\n  const parsedFields =\r\n    typeof fields === 'string' ? parseFields(fields) : fields;\r\n  return getObjectPart<T>(data, parsedFields);\r\n}\r\n\r\nfunction getObjectPart<T>(data: T, fields: object): T {\r\n  if (!isObject(data)) {\r\n    return data;\r\n  }\r\n\r\n  const keys = Object.keys(fields);\r\n\r\n  if (\r\n    keys.length === 0 ||\r\n    // we should not extract parts of the object with ambiguous fields definitions\r\n    keys.find((el) => el === 'BASIC' || el === 'DEFAULT' || el === 'FULL')\r\n  ) {\r\n    return data;\r\n  }\r\n\r\n  const result = {} as T;\r\n\r\n  keys.forEach((key) => {\r\n    if (data.hasOwnProperty(key)) {\r\n      result[key] = getObjectPart(data[key], fields[key]);\r\n    }\r\n  });\r\n\r\n  return result;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { mergeFields, parseFields } from '../utils/occ-fields';\r\nimport { ScopedData } from '../../model/scoped-data';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nexport interface ScopedDataWithUrl {\r\n  /** Url (with fields) to load scoped data */\r\n  url?: string;\r\n  /** scoped data model */\r\n  scopedData: ScopedData<any>;\r\n}\r\n\r\n/**\r\n * Intermediate model to accommodate all data needed to perform occ fields optimizations\r\n * wrapping ScopedData with url and fields\r\n */\r\nexport interface OccFieldsModel extends ScopedDataWithUrl {\r\n  /** extracted fields object, used to extract data from broader model */\r\n  fields?: object;\r\n}\r\n\r\n/**\r\n * Grouped rest calls with optimal urls\r\n *\r\n * One url groups all scopes it covers with related occFieldsModels\r\n */\r\nexport interface OccOptimimalUrlGroups {\r\n  [optimalUrl: string]: {\r\n    [scope: string]: OccFieldsModel;\r\n  };\r\n}\r\n\r\n/**\r\n * Helper service for optimizing endpoint calls to occ backend\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OccFieldsService {\r\n  constructor(protected http: HttpClient) {}\r\n\r\n  protected FIELDS_PARAM = 'fields';\r\n\r\n  /**\r\n   * Merge similar occ endpoints calls by merging fields parameter\r\n   *\r\n   * We assume that different scopes are defined by different fields parameters,\r\n   * so we are grouping all requests with the same urls (except fields definition)\r\n   * and merging into one request with fields that will satisfy all separate ones.\r\n   *\r\n   * @param models\r\n   */\r\n  getOptimalUrlGroups(models: ScopedDataWithUrl[]): OccOptimimalUrlGroups {\r\n    const groupedByUrls: OccOptimimalUrlGroups = {};\r\n    for (const model of models as OccFieldsModel[]) {\r\n      const [urlPart, fields] = this.splitFields(model.url);\r\n      if (!groupedByUrls[urlPart]) {\r\n        groupedByUrls[urlPart] = {};\r\n      }\r\n      model.fields = fields ? parseFields(fields) : {};\r\n      groupedByUrls[urlPart][model.scopedData.scope] = model;\r\n    }\r\n\r\n    const mergedUrls: OccOptimimalUrlGroups = {};\r\n    for (const [url, group] of Object.entries(groupedByUrls)) {\r\n      const urlWithFields = this.getUrlWithFields(\r\n        url,\r\n        Object.values(group).map((lo) => lo.fields)\r\n      );\r\n      mergedUrls[urlWithFields] = group;\r\n    }\r\n\r\n    return mergedUrls;\r\n  }\r\n\r\n  /**\r\n   * Extract fields parameter from occ endpoint url\r\n   *\r\n   * @param urlWithFields\r\n   */\r\n  private splitFields(urlWithFields: string): [string, string] {\r\n    const [url, params] = urlWithFields.split('?');\r\n\r\n    const paramsMap = {};\r\n\r\n    if (params) {\r\n      params.split('&').map((param) => {\r\n        const keyValue = param.split('=');\r\n        paramsMap[keyValue[0]] = keyValue[1];\r\n      });\r\n    }\r\n\r\n    const nonFieldsParams = Object.keys(paramsMap)\r\n      .sort()\r\n      .reduce((id, par) => {\r\n        if (par !== this.FIELDS_PARAM) {\r\n          id.push(paramsMap[par] ? `${par}=${paramsMap[par]}` : par);\r\n        }\r\n        return id;\r\n      }, []);\r\n\r\n    const nonFields = nonFieldsParams.join('&');\r\n\r\n    return [\r\n      nonFields ? `${url}?${nonFields}` : url,\r\n      paramsMap[this.FIELDS_PARAM],\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Combine url with field parameters\r\n   *\r\n   * @param url\r\n   * @param fields\r\n   */\r\n  private getUrlWithFields(url: string, fields: (string | object)[]): string {\r\n    const mergedFields = mergeFields(fields);\r\n\r\n    if (mergedFields) {\r\n      url += url.includes('?') ? '&' : '?';\r\n      url += `${this.FIELDS_PARAM}=${mergedFields}`;\r\n    }\r\n\r\n    return url;\r\n  }\r\n}\r\n","export enum ProductScope {\n  LIST = 'list',\n  DETAILS = 'details',\n  ATTRIBUTES = 'attributes',\n  VARIANTS = 'variants',\n}\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ScopedData } from '../../model/scoped-data';\r\nimport { map, shareReplay } from 'rxjs/operators';\r\nimport { extractFields } from '../utils/occ-fields';\r\nimport {\r\n  OccFieldsModel,\r\n  OccFieldsService,\r\n  ScopedDataWithUrl,\r\n} from './occ-fields.service';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OccRequestsOptimizerService {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occFields: OccFieldsService\r\n  ) {}\r\n\r\n  /**\r\n   * Optimize occ endpoint calls merging requests to the same url by merging field parameters\r\n   *\r\n   * @param scopedDataWithUrls\r\n   * @param dataFactory\r\n   */\r\n  scopedDataLoad<T>(\r\n    scopedDataWithUrls: ScopedDataWithUrl[],\r\n    dataFactory?: (url: string) => Observable<T>\r\n  ): ScopedData<T>[] {\r\n    const result = [];\r\n\r\n    if (!dataFactory) {\r\n      dataFactory = (url) => this.http.get<any>(url);\r\n    }\r\n\r\n    const mergedUrls = this.occFields.getOptimalUrlGroups(scopedDataWithUrls);\r\n\r\n    Object.entries(mergedUrls).forEach(\r\n      ([url, groupedModelsSet]: [\r\n        string,\r\n        {\r\n          [scope: string]: OccFieldsModel;\r\n        }\r\n      ]) => {\r\n        const groupedModels = Object.values(groupedModelsSet);\r\n\r\n        if (groupedModels.length === 1) {\r\n          // only one scope for url, we can pass the data straightaway\r\n          result.push({\r\n            ...groupedModels[0].scopedData,\r\n            data$: dataFactory(url),\r\n          });\r\n        } else {\r\n          // multiple scopes per url\r\n          // we have to split the model per each scope\r\n          const data$ = dataFactory(url).pipe(shareReplay(1));\r\n\r\n          groupedModels.forEach((modelData) => {\r\n            result.push({\r\n              ...modelData.scopedData,\r\n              data$: data$.pipe(\r\n                map((data) => extractFields<T>(data, modelData.fields))\r\n              ),\r\n            });\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    return result;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\r\nimport { Product } from '../../../model/product.model';\r\nimport { ScopedProductData } from '../../../product/connectors/product/scoped-product-data';\r\nimport { ScopedDataWithUrl } from '../../services/occ-fields.service';\r\nimport { Occ } from '../../occ-models';\r\nimport { OccRequestsOptimizerService } from '../../services/occ-requests-optimizer.service';\r\n\r\n@Injectable()\r\nexport class OccProductAdapter implements ProductAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpoints: OccEndpointsService,\r\n    protected converter: ConverterService,\r\n    protected requestsOptimizer: OccRequestsOptimizerService\r\n  ) {}\r\n\r\n  load(productCode: string, scope?: string): Observable<Product> {\r\n    return this.http\r\n      .get(this.getEndpoint(productCode, scope))\r\n      .pipe(this.converter.pipeable(PRODUCT_NORMALIZER));\r\n  }\r\n\r\n  loadMany(products: ScopedProductData[]): ScopedProductData[] {\r\n    const scopedDataWithUrls: ScopedDataWithUrl[] = products.map((model) => ({\r\n      scopedData: model,\r\n      url: this.getEndpoint(model.code, model.scope),\r\n    }));\r\n\r\n    return this.requestsOptimizer\r\n      .scopedDataLoad<Occ.Product>(scopedDataWithUrls)\r\n      .map(\r\n        (scopedProduct) =>\r\n          ({\r\n            ...scopedProduct,\r\n            data$: scopedProduct.data$.pipe(\r\n              this.converter.pipeable(PRODUCT_NORMALIZER)\r\n            ),\r\n          } as ScopedProductData)\r\n      );\r\n  }\r\n\r\n  protected getEndpoint(code: string, scope?: string): string {\r\n    return this.occEndpoints.getUrl(\r\n      'product',\r\n      {\r\n        productCode: code,\r\n      },\r\n      undefined,\r\n      scope\r\n    );\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from './scoped-product-data';\n\nexport abstract class ProductAdapter {\n  /**\n   * Abstract method used to load product's details data.\n   * Product's data can be loaded from alternative sources, as long as the structure\n   * converts to the `Product`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param scope The product scope to load\n   */\n  abstract load(productCode: string, scope?: string): Observable<Product>;\n\n  /**\n   * Abstract method used to load data for multiple product and scopes\n   * Adapter is able to optimize necessary backend calls and load\n   * products in the most efficient way possible.\n   *\n   * @param products\n   */\n  abstract loadMany?(products: ScopedProductData[]): ScopedProductData[];\n}\n","import { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\n\nexport abstract class ProductReferencesAdapter {\n  /**\n   * Abstract method used to load product references for a given product.\n   * References can be loaded from alternative sources, as long as the structure\n   * converts to the `ProductReference[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param referenceType Reference type according to enum ProductReferenceTypeEnum\n   * @param pageSize Maximum number of product refrence to load\n   */\n  abstract load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Review } from '../../../model/product.model';\n\nexport abstract class ProductReviewsAdapter {\n  /**\n   * Abstract method used to load reviews for a given product.\n   * Reviews can be loaded from alternative sources, as long as the structure\n   * converts to the `Review[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param maxCount Maximum number of review to load\n   */\n  abstract load(productCode: string, maxCount?: number): Observable<Review[]>;\n\n  /**\n   * Abstract method used to post review for a given product.\n   *\n   * @param productCode The `productCode` for given product\n   * @param review Review to post\n   */\n  abstract post(productCode: string, review: any): Observable<Review>;\n}\n","import { SearchConfig } from '../../model/search-config';\n\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport abstract class ProductSearchAdapter {\n  abstract search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage>;\n\n  abstract loadSuggestions(\n    term: string,\n    pageSize?: number\n  ): Observable<Suggestion[]>;\n}\n","import { ProductScope } from '../../../product/model/product-scope';\r\nimport { OccConfig } from '../../config/occ-config';\r\n\r\nexport const defaultOccProductConfig: OccConfig = {\r\n  backend: {\r\n    occ: {\r\n      endpoints: {\r\n        product: {\r\n          default:\r\n            'products/${productCode}?fields=DEFAULT,averageRating,images(FULL),classifications,manufacturer,numberOfReviews,categories(FULL),baseOptions,baseProduct,variantOptions,variantType',\r\n          list:\r\n            'products/${productCode}?fields=code,name,summary,price(formattedValue),images(DEFAULT,galleryIndex)',\r\n          details:\r\n            'products/${productCode}?fields=averageRating,stock(DEFAULT),description,availableForPickup,code,url,price(DEFAULT),numberOfReviews,manufacturer,categories(FULL),priceRange,multidimensional,configuratorType,configurable,tags,images(FULL)',\r\n          attributes: 'products/${productCode}?fields=classifications',\r\n          variants:\r\n            'products/${productCode}?fields=name,purchasable,baseOptions(DEFAULT),baseProduct,variantOptions(DEFAULT),variantType',\r\n        },\r\n        productReviews: 'products/${productCode}/reviews',\r\n        // Uncomment this when occ gets configured\r\n        // productReferences:\r\n        //   'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))&referenceType=${referenceType}',\r\n        productReferences:\r\n          'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))',\r\n        // tslint:disable:max-line-length\r\n        productSearch:\r\n          'products/search?fields=products(code,name,summary,price(FULL),images(DEFAULT),stock(FULL),averageRating,variantOptions),facets,breadcrumbs,pagination(DEFAULT),sorts(DEFAULT),freeTextSearch,currentQuery',\r\n        // tslint:enable\r\n        productSuggestions: 'products/suggestions',\r\n      },\r\n    },\r\n    loadingScopes: {\r\n      product: {\r\n        details: {\r\n          include: [ProductScope.LIST, ProductScope.VARIANTS],\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '../../../config/config.module';\r\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\r\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\r\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\r\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\r\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\r\nimport { PRODUCT_SEARCH_PAGE_NORMALIZER } from '../../../product/connectors/search/converters';\r\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\r\nimport { OccProductReferencesListNormalizer } from './converters/occ-product-references-list-normalizer';\r\nimport { OccProductSearchPageNormalizer } from './converters/occ-product-search-page-normalizer';\r\nimport { ProductImageNormalizer } from './converters/product-image-normalizer';\r\nimport { OccProductReferencesAdapter } from './occ-product-references.adapter';\r\nimport { OccProductReviewsAdapter } from './occ-product-reviews.adapter';\r\nimport { OccProductSearchAdapter } from './occ-product-search.adapter';\r\nimport { OccProductAdapter } from './occ-product.adapter';\r\nimport { ProductNameNormalizer } from './converters/product-name-normalizer';\r\nimport { defaultOccProductConfig } from './default-occ-product-config';\r\nimport './product-occ-config';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, HttpClientModule],\r\n  providers: [\r\n    provideDefaultConfig(defaultOccProductConfig),\r\n    {\r\n      provide: ProductAdapter,\r\n      useClass: OccProductAdapter,\r\n    },\r\n    {\r\n      provide: PRODUCT_NORMALIZER,\r\n      useExisting: ProductImageNormalizer,\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: PRODUCT_NORMALIZER,\r\n      useExisting: ProductNameNormalizer,\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: ProductReferencesAdapter,\r\n      useClass: OccProductReferencesAdapter,\r\n    },\r\n    {\r\n      provide: PRODUCT_REFERENCES_NORMALIZER,\r\n      useExisting: OccProductReferencesListNormalizer,\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: ProductSearchAdapter,\r\n      useClass: OccProductSearchAdapter,\r\n    },\r\n    {\r\n      provide: PRODUCT_SEARCH_PAGE_NORMALIZER,\r\n      useExisting: OccProductSearchPageNormalizer,\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: ProductReviewsAdapter,\r\n      useClass: OccProductReviewsAdapter,\r\n    },\r\n  ],\r\n})\r\nexport class ProductOccModule {}\r\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { Currency, Language } from '../../model/misc.model';\nimport { Country, Region } from '../../model/address.model';\n\nexport const LANGUAGE_NORMALIZER = new InjectionToken<Converter<any, Language>>(\n  'LanguageNormalizer'\n);\n\nexport const CURRENCY_NORMALIZER = new InjectionToken<Converter<any, Currency>>(\n  'CurrencyNormalizer'\n);\n\nexport const COUNTRY_NORMALIZER = new InjectionToken<Converter<any, Country>>(\n  'CountryNormalizer'\n);\n\nexport const REGION_NORMALIZER = new InjectionToken<Converter<any, Region>>(\n  'RegionNormalizer'\n);\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Country, CountryType, Region } from '../../../model/address.model';\r\nimport { BaseSite, Currency, Language } from '../../../model/misc.model';\r\nimport {\r\n  COUNTRY_NORMALIZER,\r\n  CURRENCY_NORMALIZER,\r\n  LANGUAGE_NORMALIZER,\r\n  REGION_NORMALIZER,\r\n} from '../../../site-context/connectors/converters';\r\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { Occ } from '../../occ-models/occ.models';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\n\r\n@Injectable()\r\nexport class OccSiteAdapter implements SiteAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpointsService: OccEndpointsService,\r\n    protected converterService: ConverterService\r\n  ) {}\r\n\r\n  loadLanguages(): Observable<Language[]> {\r\n    return this.http\r\n      .get<Occ.LanguageList>(this.occEndpointsService.getUrl('languages'))\r\n      .pipe(\r\n        map((languageList) => languageList.languages),\r\n        this.converterService.pipeableMany(LANGUAGE_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  loadCurrencies(): Observable<Currency[]> {\r\n    return this.http\r\n      .get<Occ.CurrencyList>(this.occEndpointsService.getUrl('currencies'))\r\n      .pipe(\r\n        map((currencyList) => currencyList.currencies),\r\n        this.converterService.pipeableMany(CURRENCY_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  loadCountries(type?: CountryType): Observable<Country[]> {\r\n    return this.http\r\n      .get<Occ.CountryList>(\r\n        this.occEndpointsService.getUrl(\r\n          'countries',\r\n          undefined,\r\n          type ? { type } : undefined\r\n        )\r\n      )\r\n      .pipe(\r\n        map((countryList) => countryList.countries),\r\n        this.converterService.pipeableMany(COUNTRY_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  loadRegions(countryIsoCode: string): Observable<Region[]> {\r\n    return this.http\r\n      .get<Occ.RegionList>(\r\n        this.occEndpointsService.getUrl('regions', { isoCode: countryIsoCode })\r\n      )\r\n      .pipe(\r\n        map((regionList) => regionList.regions),\r\n        this.converterService.pipeableMany(REGION_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  loadBaseSite(): Observable<BaseSite> {\r\n    const baseUrl = this.occEndpointsService.getBaseEndpoint();\r\n    const urlSplits = baseUrl.split('/');\r\n    const activeSite = urlSplits.pop();\r\n    const url = urlSplits.join('/') + '/basesites';\r\n\r\n    const params = new HttpParams({\r\n      fromString: 'fields=FULL',\r\n    });\r\n\r\n    return this.http\r\n      .get<{ baseSites: BaseSite[] }>(url, { params: params })\r\n      .pipe(\r\n        map((siteList) => {\r\n          return siteList.baseSites.find((site) => site.uid === activeSite);\r\n        })\r\n      );\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\n\nexport abstract class SiteAdapter {\n  /**\n   * Abstract method used to load languages.\n   */\n  abstract loadLanguages(): Observable<Language[]>;\n\n  /**\n   * Abstract method used to load currencies.\n   */\n  abstract loadCurrencies(): Observable<Currency[]>;\n\n  /**\n   * Abstract method used to get countries with optional type.\n   */\n  abstract loadCountries(type?: CountryType): Observable<Country[]>;\n\n  /**\n   * Abstract method used to get regions for a country.\n   */\n  abstract loadRegions(countryIsoCode: string): Observable<Region[]>;\n\n  /**\n   * Abstract method used to get base site data.\n   */\n  abstract loadBaseSite(): Observable<BaseSite>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccSiteContextConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        languages: 'languages',\n        currencies: 'currencies',\n        countries: 'countries',\n        regions:\n          'countries/${isoCode}/regions?fields=regions(name,isocode,isocodeShort)',\n      },\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, take, tap } from 'rxjs/operators';\r\nimport { Currency } from '../../model/misc.model';\r\nimport { WindowRef } from '../../window/window-ref';\r\nimport {\r\n  getContextParameterDefault,\r\n  getContextParameterValues,\r\n} from '../config/context-config-utils';\r\nimport { SiteContextConfig } from '../config/site-context-config';\r\nimport { CURRENCY_CONTEXT_ID } from '../providers/context-ids';\r\nimport { SiteContextActions } from '../store/actions/index';\r\nimport { SiteContextSelectors } from '../store/selectors/index';\r\nimport { StateWithSiteContext } from '../store/state';\r\nimport { SiteContext } from './site-context.interface';\r\n\r\n/**\r\n * Facade that provides easy access to curreny state, actions and selectors.\r\n */\r\n@Injectable()\r\nexport class CurrencyService implements SiteContext<Currency> {\r\n  private sessionStorage: Storage;\r\n\r\n  constructor(\r\n    protected store: Store<StateWithSiteContext>,\r\n    winRef: WindowRef,\r\n    protected config: SiteContextConfig\r\n  ) {\r\n    this.sessionStorage = winRef.sessionStorage;\r\n  }\r\n\r\n  /**\r\n   * Represents all the currencies supported by the current store.\r\n   */\r\n  getAll(): Observable<Currency[]> {\r\n    return this.store.pipe(\r\n      select(SiteContextSelectors.getAllCurrencies),\r\n      tap((currencies) => {\r\n        if (!currencies) {\r\n          this.store.dispatch(new SiteContextActions.LoadCurrencies());\r\n        }\r\n      }),\r\n      filter((currenies) => Boolean(currenies))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Represents the isocode of the active currency.\r\n   */\r\n  getActive(): Observable<string> {\r\n    return this.store.pipe(\r\n      select(SiteContextSelectors.getActiveCurrency),\r\n      filter((active) => Boolean(active))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sets the active language.\r\n   */\r\n  setActive(isocode: string) {\r\n    return this.store\r\n      .pipe(select(SiteContextSelectors.getActiveCurrency), take(1))\r\n      .subscribe((activeCurrency) => {\r\n        if (activeCurrency !== isocode) {\r\n          this.store.dispatch(\r\n            new SiteContextActions.SetActiveCurrency(isocode)\r\n          );\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Initials the active currency. The active currency is either given\r\n   * by the last visit (stored in session storage) or by the\r\n   * default session currency of the store.\r\n   */\r\n  initialize() {\r\n    let value;\r\n    this.getActive()\r\n      .subscribe((val) => (value = val))\r\n      .unsubscribe();\r\n    if (value) {\r\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\r\n      return;\r\n    }\r\n\r\n    const sessionCurrency =\r\n      this.sessionStorage && this.sessionStorage.getItem('currency');\r\n    if (\r\n      sessionCurrency &&\r\n      getContextParameterValues(this.config, CURRENCY_CONTEXT_ID).includes(\r\n        sessionCurrency\r\n      )\r\n    ) {\r\n      this.setActive(sessionCurrency);\r\n    } else {\r\n      this.setActive(\r\n        getContextParameterDefault(this.config, CURRENCY_CONTEXT_ID)\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, take, tap } from 'rxjs/operators';\r\nimport { Language } from '../../model/misc.model';\r\nimport { WindowRef } from '../../window/window-ref';\r\nimport {\r\n  getContextParameterDefault,\r\n  getContextParameterValues,\r\n} from '../config/context-config-utils';\r\nimport { SiteContextConfig } from '../config/site-context-config';\r\nimport { LANGUAGE_CONTEXT_ID } from '../providers/context-ids';\r\nimport { SiteContextActions } from '../store/actions/index';\r\nimport { SiteContextSelectors } from '../store/selectors/index';\r\nimport { StateWithSiteContext } from '../store/state';\r\nimport { SiteContext } from './site-context.interface';\r\n\r\n/**\r\n * Facade that provides easy access to language state, actions and selectors.\r\n */\r\n@Injectable()\r\nexport class LanguageService implements SiteContext<Language> {\r\n  private sessionStorage: Storage;\r\n\r\n  constructor(\r\n    protected store: Store<StateWithSiteContext>,\r\n    winRef: WindowRef,\r\n    protected config: SiteContextConfig\r\n  ) {\r\n    this.sessionStorage = winRef.sessionStorage;\r\n  }\r\n\r\n  /**\r\n   * Represents all the languages supported by the current store.\r\n   */\r\n  getAll(): Observable<Language[]> {\r\n    return this.store.pipe(\r\n      select(SiteContextSelectors.getAllLanguages),\r\n      tap((languages) => {\r\n        if (!languages) {\r\n          this.store.dispatch(new SiteContextActions.LoadLanguages());\r\n        }\r\n      }),\r\n      filter((languages) => Boolean(languages))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Represents the isocode of the active language.\r\n   */\r\n  getActive(): Observable<string> {\r\n    return this.store.pipe(\r\n      select(SiteContextSelectors.getActiveLanguage),\r\n      filter((active) => Boolean(active))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sets the active language.\r\n   */\r\n  setActive(isocode: string) {\r\n    return this.store\r\n      .pipe(select(SiteContextSelectors.getActiveLanguage), take(1))\r\n      .subscribe((activeLanguage) => {\r\n        if (activeLanguage !== isocode) {\r\n          this.store.dispatch(\r\n            new SiteContextActions.SetActiveLanguage(isocode)\r\n          );\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Initials the active language. The active language is either given\r\n   * by the last visit (stored in session storage) or by the\r\n   * default session language of the store.\r\n   */\r\n  initialize() {\r\n    let value;\r\n    this.getActive()\r\n      .subscribe((val) => (value = val))\r\n      .unsubscribe();\r\n    if (value) {\r\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\r\n      return;\r\n    }\r\n\r\n    const sessionLanguage =\r\n      this.sessionStorage && this.sessionStorage.getItem('language');\r\n    if (\r\n      sessionLanguage &&\r\n      getContextParameterValues(this.config, LANGUAGE_CONTEXT_ID).includes(\r\n        sessionLanguage\r\n      )\r\n    ) {\r\n      this.setActive(sessionLanguage);\r\n    } else {\r\n      this.setActive(\r\n        getContextParameterDefault(this.config, LANGUAGE_CONTEXT_ID)\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { CurrencyService } from '../../../site-context/facade/currency.service';\r\nimport { LanguageService } from '../../../site-context/facade/language.service';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\nimport { SiteContextConfig } from '../../../site-context/config/site-context-config';\r\nimport { getContextParameterDefault } from '../../../site-context/config/context-config-utils';\r\nimport {\r\n  CURRENCY_CONTEXT_ID,\r\n  LANGUAGE_CONTEXT_ID,\r\n} from '../../../site-context/providers/context-ids';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SiteContextInterceptor implements HttpInterceptor {\r\n  activeLang: string;\r\n  activeCurr: string;\r\n\r\n  constructor(\r\n    private languageService: LanguageService,\r\n    private currencyService: CurrencyService,\r\n    private occEndpoints: OccEndpointsService,\r\n    private config: SiteContextConfig\r\n  ) {\r\n    this.activeLang = getContextParameterDefault(\r\n      this.config,\r\n      LANGUAGE_CONTEXT_ID\r\n    );\r\n    this.activeCurr = getContextParameterDefault(\r\n      this.config,\r\n      CURRENCY_CONTEXT_ID\r\n    );\r\n\r\n    this.languageService\r\n      .getActive()\r\n      .subscribe((data) => (this.activeLang = data));\r\n\r\n    this.currencyService.getActive().subscribe((data) => {\r\n      this.activeCurr = data;\r\n    });\r\n  }\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    if (request.url.includes(this.occEndpoints.getBaseEndpoint())) {\r\n      request = request.clone({\r\n        setParams: {\r\n          lang: this.activeLang,\r\n          curr: this.activeCurr,\r\n        },\r\n      });\r\n    }\r\n\r\n    return next.handle(request);\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '../../../config/config.module';\r\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\r\nimport { defaultOccSiteContextConfig } from './default-occ-site-context-config';\r\nimport { OccSiteAdapter } from './occ-site.adapter';\r\nimport { SiteContextInterceptor } from './site-context.interceptor';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, HttpClientModule],\r\n  providers: [\r\n    provideDefaultConfig(defaultOccSiteContextConfig),\r\n    {\r\n      provide: SiteAdapter,\r\n      useClass: OccSiteAdapter,\r\n    },\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useExisting: SiteContextInterceptor,\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class SiteContextOccModule {}\r\n","import { StoreFinderSearchConfig } from '../model/search-config';\r\nimport { Observable } from 'rxjs';\r\nimport { PointOfService } from '../../model/point-of-service.model';\r\nimport { GeoPoint } from '../../model/misc.model';\r\nimport {\r\n  StoreFinderSearchPage,\r\n  StoreCount,\r\n} from '../../model/store-finder.model';\r\n\r\nexport abstract class StoreFinderAdapter {\r\n  abstract search(\r\n    query: string,\r\n    searchConfig: StoreFinderSearchConfig,\r\n    longitudeLatitude?: GeoPoint,\r\n    radius?: number\r\n  ): Observable<StoreFinderSearchPage>;\r\n\r\n  abstract loadCounts(): Observable<StoreCount[]>;\r\n\r\n  abstract load(storeId: string): Observable<PointOfService>;\r\n}\r\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccStoreFinderConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        store: 'stores/${storeId}?fields=FULL',\n        stores:\n          'stores?fields=stores(name,displayName,formattedDistance,openingHours(weekDayOpeningList(FULL),specialDayOpeningList(FULL)),geoPoint(latitude,longitude),address(line1,line2,town,region(FULL),postalCode,phone,country,email), features),pagination(DEFAULT),sorts(DEFAULT)',\n        storescounts: 'stores/storescounts',\n      },\n    },\n  },\n};\n","import { StoreFinderSearchConfig } from '../model/search-config';\r\nimport { Observable } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { StoreFinderAdapter } from './store-finder.adapter';\r\nimport { PointOfService } from '../../model/point-of-service.model';\r\nimport { GeoPoint } from '../../model/misc.model';\r\nimport {\r\n  StoreCount,\r\n  StoreFinderSearchPage,\r\n} from '../../model/store-finder.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class StoreFinderConnector {\r\n  constructor(protected adapter: StoreFinderAdapter) {}\r\n\r\n  search(\r\n    query: string,\r\n    searchConfig: StoreFinderSearchConfig,\r\n    longitudeLatitude?: GeoPoint,\r\n    radius?: number\r\n  ): Observable<StoreFinderSearchPage> {\r\n    return this.adapter.search(query, searchConfig, longitudeLatitude, radius);\r\n  }\r\n\r\n  getCounts(): Observable<StoreCount[]> {\r\n    return this.adapter.loadCounts();\r\n  }\r\n\r\n  get(storeId: string): Observable<PointOfService> {\r\n    return this.adapter.load(storeId);\r\n  }\r\n}\r\n","import { Converter } from '../../util/converter.service';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { InjectionToken } from '@angular/core';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport const POINT_OF_SERVICE_NORMALIZER = new InjectionToken<\n  Converter<any, PointOfService>\n>('PointOfServiceNormalizer');\n\nexport const STORE_FINDER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, StoreFinderSearchPage>\n>('StoreFinderSearchPageNormalizer');\n\nexport const STORE_COUNT_NORMALIZER = new InjectionToken<\n  Converter<any, StoreCount>\n>('StoreCountNormalizer');\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { GeoPoint } from '../../../model/misc.model';\r\nimport { PointOfService } from '../../../model/point-of-service.model';\r\nimport {\r\n  StoreCount,\r\n  StoreFinderSearchPage,\r\n} from '../../../model/store-finder.model';\r\nimport {\r\n  POINT_OF_SERVICE_NORMALIZER,\r\n  STORE_COUNT_NORMALIZER,\r\n  STORE_FINDER_SEARCH_PAGE_NORMALIZER,\r\n} from '../../../store-finder/connectors';\r\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\r\nimport { StoreFinderSearchConfig } from '../../../store-finder/model';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { Occ } from '../../occ-models/occ.models';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\n\r\n@Injectable()\r\nexport class OccStoreFinderAdapter implements StoreFinderAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpointsService: OccEndpointsService,\r\n    protected converterService: ConverterService\r\n  ) {}\r\n\r\n  search(\r\n    query: string,\r\n    searchConfig: StoreFinderSearchConfig,\r\n    longitudeLatitude?: GeoPoint,\r\n    radius?: number\r\n  ): Observable<StoreFinderSearchPage> {\r\n    return this.callOccFindStores(\r\n      query,\r\n      searchConfig,\r\n      longitudeLatitude,\r\n      radius\r\n    ).pipe(this.converterService.pipeable(STORE_FINDER_SEARCH_PAGE_NORMALIZER));\r\n  }\r\n\r\n  loadCounts(): Observable<StoreCount[]> {\r\n    return this.http\r\n      .get<Occ.StoreCountList>(this.occEndpointsService.getUrl('storescounts'))\r\n      .pipe(\r\n        map(\r\n          ({ countriesAndRegionsStoreCount }) => countriesAndRegionsStoreCount\r\n        ),\r\n        this.converterService.pipeableMany(STORE_COUNT_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  load(storeId: string): Observable<PointOfService> {\r\n    return this.http\r\n      .get<Occ.PointOfService>(\r\n        this.occEndpointsService.getUrl('store', { storeId })\r\n      )\r\n      .pipe(this.converterService.pipeable(POINT_OF_SERVICE_NORMALIZER));\r\n  }\r\n\r\n  protected callOccFindStores(\r\n    query: string,\r\n    searchConfig: StoreFinderSearchConfig,\r\n    longitudeLatitude?: GeoPoint,\r\n    radius?: number\r\n  ): Observable<Occ.StoreFinderSearchPage> {\r\n    const params = {};\r\n\r\n    if (longitudeLatitude) {\r\n      params['longitude'] = String(longitudeLatitude.longitude);\r\n      params['latitude'] = String(longitudeLatitude.latitude);\r\n      params['radius'] = String(radius);\r\n    } else {\r\n      params['query'] = query;\r\n    }\r\n\r\n    if (searchConfig.pageSize) {\r\n      params['pageSize'] = String(searchConfig.pageSize);\r\n    }\r\n    if (searchConfig.currentPage) {\r\n      params['currentPage'] = String(searchConfig.currentPage);\r\n    }\r\n    if (searchConfig.sort) {\r\n      params['sort'] = searchConfig.sort;\r\n    }\r\n\r\n    return this.http.get<Occ.StoreFinderSearchPage>(\r\n      this.occEndpointsService.getUrl('stores', undefined, params)\r\n    );\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '../../../config/config.module';\r\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\r\nimport { defaultOccStoreFinderConfig } from './default-occ-store-finder-config';\r\nimport { OccStoreFinderAdapter } from './occ-store-finder.adapter';\r\n\r\n@NgModule({\r\n  providers: [\r\n    provideDefaultConfig(defaultOccStoreFinderConfig),\r\n    { provide: StoreFinderAdapter, useClass: OccStoreFinderAdapter },\r\n  ],\r\n})\r\nexport class StoreFinderOccModule {}\r\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport const CONSENT_TEMPLATE_NORMALIZER = new InjectionToken<\n  Converter<any, ConsentTemplate>\n>('ConsentTemplateNormalizer');\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\r\nimport { ConsentTemplate } from '../../../model/consent.model';\r\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { Occ } from '../../occ-models/occ.models';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\n\r\n@Injectable()\r\nexport class OccAnonymousConsentTemplatesAdapter\r\n  implements AnonymousConsentTemplatesAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpoints: OccEndpointsService,\r\n    protected converter: ConverterService\r\n  ) {}\r\n\r\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\r\n    const url = this.occEndpoints.getUrl('anonymousConsentTemplates');\r\n    return this.http.get<Occ.ConsentTemplateList>(url).pipe(\r\n      catchError((error) => throwError(error)),\r\n      map((consentList) => consentList.consentTemplates),\r\n      this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\r\n    );\r\n  }\r\n}\r\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Address, AddressValidation } from '../../../model/address.model';\r\nimport {\r\n  ADDRESS_NORMALIZER,\r\n  ADDRESS_SERIALIZER,\r\n  ADDRESS_VALIDATION_NORMALIZER,\r\n} from '../../../user/connectors/address/converters';\r\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { Occ } from '../../occ-models/occ.models';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\nimport {\r\n  InterceptorUtil,\r\n  USE_CLIENT_TOKEN,\r\n} from '../../utils/interceptor-util';\r\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\r\n\r\n@Injectable()\r\nexport class OccUserAddressAdapter implements UserAddressAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpoints: OccEndpointsService,\r\n    protected converter: ConverterService\r\n  ) {}\r\n\r\n  loadAll(userId: string): Observable<Address[]> {\r\n    const url = this.occEndpoints.getUrl('addresses', { userId });\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n\r\n    return this.http\r\n      .get<Occ.AddressList>(url, { headers })\r\n      .pipe(\r\n        catchError((error: any) => throwError(error)),\r\n        map((addressList) => addressList.addresses),\r\n        this.converter.pipeableMany(ADDRESS_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  add(userId: string, address: Address): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('addresses', { userId });\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\r\n\r\n    return this.http\r\n      .post(url, address, { headers })\r\n      .pipe(catchError((error: any) => throwError(error)));\r\n  }\r\n\r\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('addressDetail', {\r\n      userId,\r\n      addressId,\r\n    });\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\r\n\r\n    return this.http\r\n      .patch(url, address, { headers })\r\n      .pipe(catchError((error: any) => throwError(error)));\r\n  }\r\n\r\n  verify(userId: string, address: Address): Observable<AddressValidation> {\r\n    const url = this.occEndpoints.getUrl('addressVerification', { userId });\r\n    let headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n    if (userId === OCC_USER_ID_ANONYMOUS) {\r\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\r\n    }\r\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\r\n\r\n    return this.http\r\n      .post<AddressValidation>(url, address, { headers })\r\n      .pipe(\r\n        catchError((error: any) => throwError(error)),\r\n        this.converter.pipeable(ADDRESS_VALIDATION_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  delete(userId: string, addressId: string): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('addressDetail', {\r\n      userId,\r\n      addressId,\r\n    });\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n\r\n    return this.http\r\n      .delete(url, { headers })\r\n      .pipe(catchError((error: any) => throwError(error)));\r\n  }\r\n}\r\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { ConsentTemplate } from '../../../model/consent.model';\r\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\r\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { Occ } from '../../occ-models/occ.models';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\n\r\n@Injectable()\r\nexport class OccUserConsentAdapter implements UserConsentAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpoints: OccEndpointsService,\r\n    protected converter: ConverterService\r\n  ) {}\r\n\r\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\r\n    const url = this.occEndpoints.getUrl('consentTemplates', { userId });\r\n    const headers = new HttpHeaders({ 'Cache-Control': 'no-cache' });\r\n    return this.http\r\n      .get<Occ.ConsentTemplateList>(url, { headers })\r\n      .pipe(\r\n        catchError((error: any) => throwError(error)),\r\n        map((consentList) => consentList.consentTemplates),\r\n        this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  giveConsent(\r\n    userId: string,\r\n    consentTemplateId: string,\r\n    consentTemplateVersion: number\r\n  ): Observable<ConsentTemplate> {\r\n    const url = this.occEndpoints.getUrl('consents', { userId });\r\n    const httpParams = new HttpParams()\r\n      .set('consentTemplateId', consentTemplateId)\r\n      .set('consentTemplateVersion', consentTemplateVersion.toString());\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n      'Cache-Control': 'no-cache',\r\n    });\r\n    return this.http\r\n      .post<Occ.ConsentTemplate>(url, httpParams, { headers })\r\n      .pipe(\r\n        catchError((error) => throwError(error)),\r\n        this.converter.pipeable(CONSENT_TEMPLATE_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\r\n    const headers = new HttpHeaders({\r\n      'Cache-Control': 'no-cache',\r\n    });\r\n    const url = this.occEndpoints.getUrl('consentDetail', {\r\n      userId,\r\n      consentId: consentCode,\r\n    });\r\n\r\n    return this.http.delete(url, { headers });\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  OrderHistoryList,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequest,\n} from '../../../model/order.model';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\n\nexport const ORDER_HISTORY_NORMALIZER = new InjectionToken<\n  Converter<any, OrderHistoryList>\n>('OrderHistoryNormalizer');\n\nexport const CONSIGNMENT_TRACKING_NORMALIZER = new InjectionToken<\n  Converter<any, ConsignmentTracking>\n>('ConsignmentTrackingNormalizer');\n\nexport const ORDER_RETURN_REQUEST_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequest>\n>('OrderReturnRequestNormalizer');\n\nexport const ORDER_RETURN_REQUEST_INPUT_SERIALIZER = new InjectionToken<\n  Converter<ReturnRequestEntryInputList, any>\n>('OrderReturnRequestInputSerializer');\n\nexport const ORDER_RETURNS_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequestList>\n>('OrderReturnsNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\r\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\r\nimport {\r\n  CancellationRequestEntryInputList,\r\n  Order,\r\n  OrderHistoryList,\r\n  ReturnRequest,\r\n  ReturnRequestEntryInputList,\r\n  ReturnRequestList,\r\n  ReturnRequestModification,\r\n} from '../../../model/order.model';\r\nimport {\r\n  CONSIGNMENT_TRACKING_NORMALIZER,\r\n  ORDER_HISTORY_NORMALIZER,\r\n  ORDER_RETURNS_NORMALIZER,\r\n  ORDER_RETURN_REQUEST_INPUT_SERIALIZER,\r\n  ORDER_RETURN_REQUEST_NORMALIZER,\r\n} from '../../../user/connectors/order/converters';\r\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { Occ } from '../../occ-models/occ.models';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\nimport {\r\n  InterceptorUtil,\r\n  USE_CLIENT_TOKEN,\r\n} from '../../utils/interceptor-util';\r\nimport {\r\n  OCC_USER_ID_ANONYMOUS,\r\n  OCC_USER_ID_CURRENT,\r\n} from '../../utils/occ-constants';\r\n\r\n@Injectable()\r\nexport class OccUserOrderAdapter implements UserOrderAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpoints: OccEndpointsService,\r\n    protected converter: ConverterService\r\n  ) {}\r\n\r\n  public load(userId: string, orderCode: string): Observable<Order> {\r\n    const url = this.occEndpoints.getUrl('orderDetail', {\r\n      userId,\r\n      orderId: orderCode,\r\n    });\r\n\r\n    let headers = new HttpHeaders();\r\n    if (userId === OCC_USER_ID_ANONYMOUS) {\r\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\r\n    }\r\n\r\n    return this.http\r\n      .get<Occ.Order>(url, { headers })\r\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\r\n  }\r\n\r\n  public loadHistory(\r\n    userId: string,\r\n    pageSize?: number,\r\n    currentPage?: number,\r\n    sort?: string\r\n  ): Observable<OrderHistoryList> {\r\n    const params = {};\r\n    if (pageSize) {\r\n      params['pageSize'] = pageSize.toString();\r\n    }\r\n    if (currentPage) {\r\n      params['currentPage'] = currentPage.toString();\r\n    }\r\n    if (sort) {\r\n      params['sort'] = sort.toString();\r\n    }\r\n\r\n    const url = this.occEndpoints.getUrl('orderHistory', { userId }, params);\r\n\r\n    return this.http\r\n      .get<Occ.OrderHistoryList>(url)\r\n      .pipe(this.converter.pipeable(ORDER_HISTORY_NORMALIZER));\r\n  }\r\n\r\n  public getConsignmentTracking(\r\n    orderCode: string,\r\n    consignmentCode: string,\r\n    userId: string = OCC_USER_ID_CURRENT\r\n  ): Observable<ConsignmentTracking> {\r\n    const url = this.occEndpoints.getUrl('consignmentTracking', {\r\n      userId,\r\n      orderCode,\r\n      consignmentCode,\r\n    });\r\n    return this.http\r\n      .get<ConsignmentTracking>(url)\r\n      .pipe(this.converter.pipeable(CONSIGNMENT_TRACKING_NORMALIZER));\r\n  }\r\n\r\n  public cancel(\r\n    userId: string,\r\n    orderCode: string,\r\n    cancelRequestInput: CancellationRequestEntryInputList\r\n  ): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('cancelOrder', {\r\n      userId,\r\n      orderId: orderCode,\r\n    });\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n\r\n    return this.http\r\n      .post(url, cancelRequestInput, { headers })\r\n      .pipe(catchError((error: any) => throwError(error)));\r\n  }\r\n\r\n  public createReturnRequest(\r\n    userId: string,\r\n    returnRequestInput: ReturnRequestEntryInputList\r\n  ): Observable<ReturnRequest> {\r\n    const url = this.occEndpoints.getUrl('returnOrder', {\r\n      userId,\r\n    });\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n\r\n    returnRequestInput = this.converter.convert(\r\n      returnRequestInput,\r\n      ORDER_RETURN_REQUEST_INPUT_SERIALIZER\r\n    );\r\n\r\n    return this.http.post(url, returnRequestInput, { headers }).pipe(\r\n      catchError((error: any) => throwError(error)),\r\n      this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER)\r\n    );\r\n  }\r\n\r\n  public loadReturnRequestList(\r\n    userId: string,\r\n    pageSize?: number,\r\n    currentPage?: number,\r\n    sort?: string\r\n  ): Observable<ReturnRequestList> {\r\n    const params = {};\r\n    if (pageSize) {\r\n      params['pageSize'] = pageSize.toString();\r\n    }\r\n    if (currentPage) {\r\n      params['currentPage'] = currentPage.toString();\r\n    }\r\n    if (sort) {\r\n      params['sort'] = sort.toString();\r\n    }\r\n\r\n    const url = this.occEndpoints.getUrl('orderReturns', { userId }, params);\r\n\r\n    return this.http\r\n      .get<ReturnRequestList>(url)\r\n      .pipe(this.converter.pipeable(ORDER_RETURNS_NORMALIZER));\r\n  }\r\n\r\n  public loadReturnRequestDetail(\r\n    userId: string,\r\n    returnRequestCode: string\r\n  ): Observable<ReturnRequest> {\r\n    const url = this.occEndpoints.getUrl('orderReturnDetail', {\r\n      userId,\r\n      returnRequestCode,\r\n    });\r\n\r\n    return this.http\r\n      .get<ReturnRequest>(url)\r\n      .pipe(this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER));\r\n  }\r\n\r\n  public cancelReturnRequest(\r\n    userId: string,\r\n    returnRequestCode: string,\r\n    returnRequestModification: ReturnRequestModification\r\n  ): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('cancelReturn', {\r\n      userId,\r\n      returnRequestCode,\r\n    });\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n\r\n    return this.http\r\n      .patch(url, returnRequestModification, { headers })\r\n      .pipe(catchError((error: any) => throwError(error)));\r\n  }\r\n}\r\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { PAYMENT_DETAILS_NORMALIZER } from '../../../checkout/connectors/payment/converters';\r\nimport { PaymentDetails } from '../../../model/cart.model';\r\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { Occ } from '../../occ-models/occ.models';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\n\r\n@Injectable()\r\nexport class OccUserPaymentAdapter implements UserPaymentAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpoints: OccEndpointsService,\r\n    protected converter: ConverterService\r\n  ) {}\r\n\r\n  loadAll(userId: string): Observable<PaymentDetails[]> {\r\n    const url =\r\n      this.occEndpoints.getUrl('paymentDetailsAll', { userId }) + '?saved=true';\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n\r\n    return this.http\r\n      .get<Occ.PaymentDetailsList>(url, { headers })\r\n      .pipe(\r\n        catchError((error: any) => throwError(error)),\r\n        map((methodList) => methodList.payments),\r\n        this.converter.pipeableMany(PAYMENT_DETAILS_NORMALIZER)\r\n      );\r\n  }\r\n\r\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('paymentDetail', {\r\n      userId,\r\n      paymentDetailId: paymentMethodID,\r\n    });\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n\r\n    return this.http\r\n      .delete(url, { headers })\r\n      .pipe(catchError((error: any) => throwError(error)));\r\n  }\r\n\r\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('paymentDetail', {\r\n      userId,\r\n      paymentDetailId: paymentMethodID,\r\n    });\r\n\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n\r\n    return this.http\r\n      .patch(\r\n        url,\r\n        // TODO: Remove billingAddress property\r\n        { billingAddress: { titleCode: 'mr' }, defaultPayment: true },\r\n        { headers }\r\n      )\r\n      .pipe(catchError((error: any) => throwError(error)));\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport const USER_NORMALIZER = new InjectionToken<Converter<any, User>>(\n  'UserNormalizer'\n);\n\nexport const USER_SERIALIZER = new InjectionToken<Converter<User, any>>(\n  'UserSerializer'\n);\n\nexport const USER_SIGN_UP_SERIALIZER = new InjectionToken<\n  Converter<UserSignUp, any>\n>('UserSignUpSerializer');\n\nexport const TITLE_NORMALIZER = new InjectionToken<Converter<any, Title>>(\n  'TitleNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\r\nimport {\r\n  TITLE_NORMALIZER,\r\n  USER_NORMALIZER,\r\n  USER_SERIALIZER,\r\n  USER_SIGN_UP_SERIALIZER,\r\n} from '../../../user/connectors/user/converters';\r\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { Occ } from '../../occ-models';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\nimport {\r\n  InterceptorUtil,\r\n  USE_CLIENT_TOKEN,\r\n} from '../../utils/interceptor-util';\r\n@Injectable()\r\nexport class OccUserAdapter implements UserAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpoints: OccEndpointsService,\r\n    protected converter: ConverterService\r\n  ) {}\r\n\r\n  load(userId: string): Observable<User> {\r\n    const url = this.occEndpoints.getUrl('user', { userId });\r\n    return this.http\r\n      .get<Occ.User>(url)\r\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\r\n  }\r\n\r\n  update(userId: string, user: User): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('user', { userId });\r\n    user = this.converter.convert(user, USER_SERIALIZER);\r\n    return this.http.patch(url, user);\r\n  }\r\n\r\n  register(user: UserSignUp): Observable<User> {\r\n    const url: string = this.occEndpoints.getUrl('userRegister');\r\n    let headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\r\n    user = this.converter.convert(user, USER_SIGN_UP_SERIALIZER);\r\n\r\n    return this.http\r\n      .post<User>(url, user, { headers })\r\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\r\n  }\r\n\r\n  registerGuest(guid: string, password: string): Observable<User> {\r\n    const url: string = this.occEndpoints.getUrl('userRegister');\r\n    let headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\r\n\r\n    const httpParams: HttpParams = new HttpParams()\r\n      .set('guid', guid)\r\n      .set('password', password);\r\n\r\n    return this.http\r\n      .post<User>(url, httpParams, { headers })\r\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\r\n  }\r\n\r\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('userForgotPassword');\r\n    const httpParams: HttpParams = new HttpParams().set(\r\n      'userId',\r\n      userEmailAddress\r\n    );\r\n    let headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\r\n    return this.http.post(url, httpParams, { headers });\r\n  }\r\n\r\n  resetPassword(token: string, newPassword: string): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('userResetPassword');\r\n    let headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\r\n\r\n    return this.http.post(url, { token, newPassword }, { headers });\r\n  }\r\n\r\n  updateEmail(\r\n    userId: string,\r\n    currentPassword: string,\r\n    newUserId: string\r\n  ): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('userUpdateLoginId', { userId });\r\n    const httpParams: HttpParams = new HttpParams()\r\n      .set('password', currentPassword)\r\n      .set('newLogin', newUserId);\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n    return this.http.put(url, httpParams, { headers });\r\n  }\r\n\r\n  updatePassword(\r\n    userId: string,\r\n    oldPassword: string,\r\n    newPassword: string\r\n  ): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('userUpdatePassword', { userId });\r\n    const httpParams: HttpParams = new HttpParams()\r\n      .set('old', oldPassword)\r\n      .set('new', newPassword);\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n    return this.http.put(url, httpParams, { headers });\r\n  }\r\n\r\n  remove(userId: string): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('user', { userId });\r\n    return this.http.delete<User>(url);\r\n  }\r\n\r\n  loadTitles(): Observable<Title[]> {\r\n    const url = this.occEndpoints.getUrl('titles');\r\n    return this.http.get<Occ.TitleList>(url).pipe(\r\n      map((titleList) => titleList.titles),\r\n      this.converter.pipeableMany(TITLE_NORMALIZER)\r\n    );\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../model/consent.model';\n\nexport abstract class AnonymousConsentTemplatesAdapter {\n  /**\n   * Abstract method used to load anonymous consents.\n   */\n  abstract loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport abstract class UserAddressAdapter {\n  abstract loadAll(userId: string): Observable<Address[]>;\n\n  abstract add(userId: string, address: Address): Observable<{}>;\n\n  abstract update(\n    userId: string,\n    addressId: string,\n    address: Address\n  ): Observable<{}>;\n\n  abstract verify(\n    userId: string,\n    address: Address\n  ): Observable<AddressValidation>;\n\n  abstract delete(userId: string, addressId: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport abstract class UserConsentAdapter {\n  abstract loadConsents(userId: string): Observable<ConsentTemplate[]>;\n\n  abstract giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate>;\n\n  abstract withdrawConsent(userId: string, consentCode: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\n\nexport abstract class UserOrderAdapter {\n  /**\n   * Abstract method used to load order data.\n   *\n   * @param userId The `userId` for given user\n   * @param orderCode The `orderCode` for given order\n   */\n  abstract load(userId: string, orderCode: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load order history for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   */\n  abstract loadHistory(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<OrderHistoryList>;\n\n  /**\n   * Abstract method used to get consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   * @param userId user id related to order\n   */\n  abstract getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking>;\n\n  /**\n   * Abstract method used to create return request\n   * @param userId The `userId` for given user\n   * @param returnRequestInput Return request entry input list\n   */\n  abstract createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request details\n   * @param userId\n   * @param returnRequestCode\n   */\n  abstract loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request list for an user.\n   * @param userId\n   * @param pageSize\n   * @param currentPage\n   * @param sort\n   */\n  abstract loadReturnRequestList(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<ReturnRequestList>;\n\n  /**\n   * Abstract method used to cancel order\n   * @param userId\n   * @param orderCode\n   * @param cancelRequestInput Cancel request entry input list\n   */\n  abstract cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to cancel one return request\n   * @param userId\n   * @param returnRequestCode\n   * @param returnRequestModification\n   */\n  abstract cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class UserPaymentAdapter {\n  abstract loadAll(userId: string): Observable<PaymentDetails[]>;\n\n  abstract delete(userId: string, paymentMethodID: string): Observable<{}>;\n\n  abstract setDefault(userId: string, paymentMethodID: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport abstract class UserAdapter {\n  abstract load(userId: string): Observable<User>;\n\n  abstract update(username: string, user: User): Observable<{}>;\n\n  abstract register(user: UserSignUp): Observable<User>;\n\n  abstract registerGuest(guid: string, password: string): Observable<User>;\n\n  abstract requestForgotPasswordEmail(userEmailAddress: string): Observable<{}>;\n\n  abstract resetPassword(token: string, newPassword: string): Observable<{}>;\n\n  abstract updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}>;\n\n  abstract updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}>;\n\n  abstract remove(userId: string): Observable<{}>;\n\n  abstract loadTitles(): Observable<Title[]>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccUserConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        user: 'users/${userId}',\n        userRegister: 'users',\n        userForgotPassword: 'forgottenpasswordtokens',\n        userResetPassword: 'resetpassword',\n        userUpdateLoginId: 'users/${userId}/login',\n        userUpdatePassword: 'users/${userId}/password',\n        titles: 'titles',\n        paymentDetailsAll: 'users/${userId}/paymentdetails',\n        paymentDetail: 'users/${userId}/paymentdetails/${paymentDetailId}',\n        orderHistory: 'users/${userId}/orders',\n        orderDetail: 'users/${userId}/orders/${orderId}?fields=FULL',\n        anonymousConsentTemplates: 'users/anonymous/consenttemplates',\n        consentTemplates: 'users/${userId}/consenttemplates',\n        consents: 'users/${userId}/consents',\n        consentDetail: 'users/${userId}/consents/${consentId}',\n        addresses: 'users/${userId}/addresses',\n        addressDetail: 'users/${userId}/addresses/${addressId}',\n        addressVerification: 'users/${userId}/addresses/verification',\n        consignmentTracking:\n          'users/${userId}/orders/${orderCode}/consignments/${consignmentCode}/tracking',\n        customerCoupons: 'users/${userId}/customercoupons',\n        claimCoupon: 'users/${userId}/customercoupons/${couponCode}/claim',\n        couponNotification:\n          'users/${userId}/customercoupons/${couponCode}/notification',\n        notificationPreference: 'users/${userId}/notificationpreferences',\n        productInterests: 'users/${userId}/productinterests',\n        getProductInterests:\n          'users/${userId}/productinterests?fields=sorts,pagination,results(productInterestEntry,product(code))',\n        cancelOrder: 'users/${userId}/orders/${orderId}/cancellation',\n        returnOrder:\n          'users/${userId}/orderReturns?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        orderReturns: 'users/${userId}/orderReturns?fields=BASIC',\n        orderReturnDetail:\n          'users/${userId}/orderReturns/${returnRequestCode}?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        cancelReturn: 'users/${userId}/orderReturns/${returnRequestCode}',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\n\nexport abstract class CustomerCouponAdapter {\n  abstract getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult>;\n\n  abstract turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification>;\n\n  abstract turnOffNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<{}>;\n\n  abstract claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerCouponSearchResult>\n>('CustomerCouponSearchResultNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport {\r\n  CustomerCoupon2Customer,\r\n  CustomerCouponNotification,\r\n  CustomerCouponSearchResult,\r\n} from '../../../model/customer-coupon.model';\r\nimport { CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER } from '../../../user/connectors/customer-coupon/converters';\r\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { Occ } from '../../occ-models/occ.models';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\r\n\r\n@Injectable()\r\nexport class OccCustomerCouponAdapter implements CustomerCouponAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected occEndpoints: OccEndpointsService,\r\n    protected converter: ConverterService\r\n  ) {}\r\n\r\n  getCustomerCoupons(\r\n    userId: string,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    sort: string\r\n  ): Observable<CustomerCouponSearchResult> {\r\n    // Currently OCC only supports calls for customer coupons in case of logged users\r\n    if (userId === OCC_USER_ID_ANONYMOUS) {\r\n      return of({});\r\n    }\r\n\r\n    const url = this.occEndpoints.getUrl('customerCoupons', { userId });\r\n\r\n    let params = new HttpParams().set('sort', sort ? sort : 'startDate:asc');\r\n\r\n    if (pageSize) {\r\n      params = params.set('pageSize', pageSize.toString());\r\n    }\r\n    if (currentPage) {\r\n      params = params.set('currentPage', currentPage.toString());\r\n    }\r\n\r\n    const headers = this.newHttpHeader();\r\n\r\n    return this.http\r\n      .get<Occ.CustomerCouponSearchResult>(url, { headers, params })\r\n      .pipe(this.converter.pipeable(CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER));\r\n  }\r\n\r\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\r\n    const url = this.occEndpoints.getUrl('couponNotification', {\r\n      userId,\r\n      couponCode,\r\n    });\r\n    const headers = this.newHttpHeader();\r\n\r\n    return this.http.delete(url, { headers });\r\n  }\r\n\r\n  turnOnNotification(\r\n    userId: string,\r\n    couponCode: string\r\n  ): Observable<CustomerCouponNotification> {\r\n    const url = this.occEndpoints.getUrl('couponNotification', {\r\n      userId,\r\n      couponCode,\r\n    });\r\n    const headers = this.newHttpHeader();\r\n\r\n    return this.http.post(url, { headers });\r\n  }\r\n\r\n  claimCustomerCoupon(\r\n    userId: string,\r\n    couponCode: string\r\n  ): Observable<CustomerCoupon2Customer> {\r\n    const url = this.occEndpoints.getUrl('claimCoupon', {\r\n      userId,\r\n      couponCode,\r\n    });\r\n    const headers = this.newHttpHeader();\r\n\r\n    return this.http.post(url, { headers });\r\n  }\r\n\r\n  private newHttpHeader() {\r\n    return new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    });\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport abstract class UserNotificationPreferenceAdapter {\n  /**\n   * Abstract method used to load notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   */\n  abstract loadAll(userId: string): Observable<NotificationPreference[]>;\n\n  /**\n   * Abstract method used to update notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param preferences The notification preferences to be updated.\n   */\n  abstract update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const NOTIFICATION_PREFERENCE_SERIALIZER = new InjectionToken<\n  Converter<NotificationPreference[], any>\n>('NotificationPreferenceSerializer');\n\nexport const NOTIFICATION_PREFERENCE_NORMALIZER = new InjectionToken<\n  Converter<any, NotificationPreference>\n>('NotificationPreferenceNormalizer');\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserNotificationPreferenceAdapter } from './user-notification-preference.adapter';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceConnector {\n  constructor(protected adapter: UserNotificationPreferenceAdapter) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  update(userId: string, preferences: NotificationPreference[]) {\n    return this.adapter.update(userId, preferences);\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport {\r\n  NotificationPreference,\r\n  NotificationPreferenceList,\r\n} from '../../../model/notification-preference.model';\r\nimport {\r\n  NOTIFICATION_PREFERENCE_NORMALIZER,\r\n  NOTIFICATION_PREFERENCE_SERIALIZER,\r\n} from '../../../user/connectors/notification-preference';\r\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\r\nimport { ConverterService } from '../../../util/converter.service';\r\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\r\n\r\nconst headers = new HttpHeaders({\r\n  'Content-Type': 'application/json',\r\n});\r\n\r\n@Injectable()\r\nexport class OccUserNotificationPreferenceAdapter\r\n  implements UserNotificationPreferenceAdapter {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected converter: ConverterService,\r\n    protected occEndpoints: OccEndpointsService\r\n  ) {}\r\n\r\n  loadAll(userId: string): Observable<NotificationPreference[]> {\r\n    return this.http\r\n      .get<NotificationPreferenceList>(\r\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\r\n        {\r\n          headers,\r\n        }\r\n      )\r\n      .pipe(\r\n        map((list) => list.preferences),\r\n        this.converter.pipeableMany(NOTIFICATION_PREFERENCE_NORMALIZER),\r\n        catchError((error: any) => throwError(error))\r\n      );\r\n  }\r\n\r\n  update(\r\n    userId: string,\r\n    preferences: NotificationPreference[]\r\n  ): Observable<{}> {\r\n    preferences = this.converter.convert(\r\n      preferences,\r\n      NOTIFICATION_PREFERENCE_SERIALIZER\r\n    );\r\n    return this.http\r\n      .patch(\r\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\r\n        { preferences: preferences },\r\n        { headers }\r\n      )\r\n      .pipe(catchError((error: any) => throwError(error)));\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const PRODUCT_INTERESTS_NORMALIZER = new InjectionToken<\n  Converter<any, ProductInterestSearchResult>\n>('ProductInterestsNormalizer');\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { Observable, throwError, forkJoin } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { OccConfig } from '../../config/occ-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserInterestsAdapter implements UserInterestsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected config: OccConfig,\n    protected converter: ConverterService\n  ) {}\n\n  public getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    let params = new HttpParams().set('sort', sort ? sort : 'name:asc');\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n    if (productCode) {\n      params = params.set('productCode', productCode);\n    }\n    if (notificationType) {\n      params = params.set('notificationType', notificationType.toString());\n    }\n\n    return this.http\n      .get(this.occEndpoints.getUrl('getProductInterests', { userId }), {\n        headers,\n        params,\n      })\n      .pipe(\n        this.converter.pipeable(PRODUCT_INTERESTS_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  public removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    const r: Observable<any>[] = [];\n    item.productInterestEntry.forEach((entry: any) => {\n      const params: HttpParams = new HttpParams()\n        .set('productCode', item.product.code)\n        .set('notificationType', entry.interestType);\n      r.push(\n        this.http\n          .delete(this.occEndpoints.getUrl('productInterests', { userId }), {\n            params: params,\n          })\n          .pipe(catchError((error: any) => throwError(error)))\n      );\n    });\n    return forkJoin(r);\n  }\n\n  public addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    const params = new HttpParams()\n      .set('productCode', productCode)\n      .set('notificationType', notificationType.toString());\n    return this.http\n      .post(\n        this.occEndpoints.getUrl('productInterests', { userId }),\n        {},\n        {\n          headers,\n          params,\n        }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\nexport abstract class UserInterestsAdapter {\n  /**\n   * Abstract method used to load product interests for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   * @param productCode The product code\n   * @param  notificationType The notification type\n   */\n  abstract getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult>;\n\n  /**\n   * Abstract method used to remove product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param ProductInterestRelation The product interest to be removed.\n   */\n  abstract removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]>;\n\n  /**\n   * Abstract method to add a product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param productCode The product code\n   * @param notificationType The notification type\n   */\n  abstract addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\r\nimport { Occ } from '../../../occ-models/occ.models';\r\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\r\nimport {\r\n  Converter,\r\n  ConverterService,\r\n} from '../../../../util/converter.service';\r\nimport { ProductInterestSearchResult } from '../../../../model/product-interest.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OccUserInterestsNormalizer\r\n  implements\r\n    Converter<Occ.ProductInterestSearchResult, ProductInterestSearchResult> {\r\n  constructor(private converter: ConverterService) {}\r\n\r\n  convert(\r\n    source: Occ.ProductInterestSearchResult,\r\n    target?: ProductInterestSearchResult\r\n  ): ProductInterestSearchResult {\r\n    if (target === undefined) {\r\n      target = { ...(source as any) };\r\n    }\r\n    if (source && source.results) {\r\n      target.results = source.results.map((result) => ({\r\n        ...result,\r\n        product: this.converter.convert(result.product, PRODUCT_NORMALIZER),\r\n      }));\r\n    }\r\n\r\n    return target;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Occ } from '../../../occ-models/occ.models';\r\nimport {\r\n  Converter,\r\n  ConverterService,\r\n} from '../../../../util/converter.service';\r\nimport { OrderEntry, ReturnRequest } from '../../../../model/order.model';\r\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OccReturnRequestNormalizer\r\n  implements Converter<Occ.ReturnRequest, ReturnRequest> {\r\n  constructor(private converter: ConverterService) {}\r\n\r\n  convert(source: Occ.ReturnRequest, target?: ReturnRequest): ReturnRequest {\r\n    if (target === undefined) {\r\n      target = { ...(source as any) };\r\n    }\r\n\r\n    if (source.returnEntries) {\r\n      target.returnEntries = source.returnEntries.map((entry) => ({\r\n        ...entry,\r\n        orderEntry: this.convertOrderEntry(entry.orderEntry),\r\n      }));\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\r\n    return {\r\n      ...source,\r\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\r\n    };\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\r\nimport { provideDefaultConfig } from '../../../config/config.module';\r\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\r\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\r\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\r\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\r\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\r\nimport { defaultOccUserConfig } from './default-occ-user-config';\r\nimport { OccAnonymousConsentTemplatesAdapter } from './occ-anonymous-consent-templates.adapter';\r\nimport { OccUserAddressAdapter } from './occ-user-address.adapter';\r\nimport { OccUserConsentAdapter } from './occ-user-consent.adapter';\r\nimport { OccUserOrderAdapter } from './occ-user-order.adapter';\r\nimport { OccUserPaymentAdapter } from './occ-user-payment.adapter';\r\nimport { OccUserAdapter } from './occ-user.adapter';\r\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\r\nimport { OccCustomerCouponAdapter } from '../user/occ-customer-coupon.adapter';\r\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\r\nimport { OccUserNotificationPreferenceAdapter } from './occ-user-notification-preference.adapter';\r\nimport { OccUserInterestsAdapter } from './occ-user-interests.adapter';\r\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\r\nimport { OccUserInterestsNormalizer } from './converters/occ-user-interests-normalizer';\r\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\r\nimport { ORDER_RETURN_REQUEST_NORMALIZER } from '../../../user/connectors/order/converters';\r\nimport { OccReturnRequestNormalizer } from './converters/index';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, HttpClientModule],\r\n  providers: [\r\n    provideDefaultConfig(defaultOccUserConfig),\r\n    { provide: UserAdapter, useClass: OccUserAdapter },\r\n    { provide: UserAddressAdapter, useClass: OccUserAddressAdapter },\r\n    { provide: UserConsentAdapter, useClass: OccUserConsentAdapter },\r\n    {\r\n      provide: AnonymousConsentTemplatesAdapter,\r\n      useClass: OccAnonymousConsentTemplatesAdapter,\r\n    },\r\n    {\r\n      provide: UserPaymentAdapter,\r\n      useClass: OccUserPaymentAdapter,\r\n    },\r\n    { provide: UserOrderAdapter, useClass: OccUserOrderAdapter },\r\n    { provide: CustomerCouponAdapter, useClass: OccCustomerCouponAdapter },\r\n    {\r\n      provide: UserNotificationPreferenceAdapter,\r\n      useClass: OccUserNotificationPreferenceAdapter,\r\n    },\r\n    { provide: UserInterestsAdapter, useClass: OccUserInterestsAdapter },\r\n    {\r\n      provide: PRODUCT_INTERESTS_NORMALIZER,\r\n      useExisting: OccUserInterestsNormalizer,\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: ORDER_RETURN_REQUEST_NORMALIZER,\r\n      useExisting: OccReturnRequestNormalizer,\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class UserOccModule {}\r\n","import { Injectable, isDevMode } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class JavaRegExpConverter {\n  /**\n   * Pattern that extracts modifiers from the Java regexp.\n   *\n   * Java regexps MAY start with ONE or MANY modifiers like `(?MODIFIERS)PATTERN`. Examples:\n   * - `(?i)` for Case Insensitive Mode: `(?i)PATTERN`\n   * - `(?u)` for Unicode-Aware Case Folding; `(?u)PATTERN`\n   * - or multiple combined:  `(?iu)PATTERN`\n   * - (more modifiers in the official Java docs https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html)\n   *\n   * This pattern extracts 3 parts from the input string, i.e. for `(?iu)PATTERN`:\n   *    1. original modifiers syntax, i.e. `(?iu)` (or undefined if no modifiers present)\n   *    2. extracted modifiers, i.e. `iu` (or undefined if no modifiers present)\n   *    3. the rest of the regexp, i.e. `PATTERN`\n   */\n  private readonly EXTRACT_JAVA_REGEXP_MODIFIERS: RegExp = /^(\\(\\?([a-z]+)\\))?(.*)/;\n\n  /**\n   * Converts RegExp from Java syntax to Javascript, by recognizing Java regexp modifiers\n   * and converting them to the Javascript ones (i.e. case insensitive mode: `(?i)PATTERN` -> `/pattern/i`)\n   *\n   * **CAUTION!** Not all features and modifiers of Java regexps are valid in Javascript!\n   * If unsupported feature or modifier is used, then `null` will be returned instead of Javascript RegExp.\n   *\n   * See differences between Java and Javascript regexps:\n   * - https://stackoverflow.com/questions/8754444/convert-javascript-regular-expression-to-java-syntax\n   * - https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Language_features\n   */\n  toJsRegExp(javaSyntax: string): RegExp {\n    const parts = javaSyntax.match(this.EXTRACT_JAVA_REGEXP_MODIFIERS);\n    if (!parts) {\n      return null;\n    }\n    const [, , modifiers, jsSyntax] = parts;\n    try {\n      return new RegExp(jsSyntax, modifiers);\n    } catch (error) {\n      if (isDevMode()) {\n        console.warn(\n          `WARNING: Could not convert Java regexp into Javascript. Original regexp: ${javaSyntax} \\nMessage: ${error}`\n        );\n      }\n      return null;\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const CONFIG_INITIALIZER = new InjectionToken('ConfigInitializer');\n\n/**\n * Used to provide asynchronous config during app initialization\n */\nexport interface ConfigInitializer {\n  /**\n   * List of config parts that are resolved by configFactory, e.g.:\n   * 'context.baseSite', 'context.language'\n   */\n  scopes: string[];\n  /**\n   * Promise that returns config chunk\n   */\n  configFactory: () => Promise<any>;\n}\n\nexport const CONFIG_INITIALIZER_FORROOT_GUARD = new InjectionToken<void>(\n  'CONFIG_INITIALIZER_FORROOT_GUARD'\n);\n","import { InjectionToken } from '@angular/core';\n\n/**\n * The url of the server request when running SSR\n * */\nexport const SERVER_REQUEST_URL = new InjectionToken<string>(\n  'SERVER_REQUEST_URL'\n);\n\n/**\n * The url of the server request host when running SSR\n * */\nexport const SERVER_REQUEST_ORIGIN = new InjectionToken<string>(\n  'SERVER_REQUEST_ORIGIN'\n);\n","import { Injectable } from '@angular/core';\r\nimport { I18nConfig } from '../../i18n';\r\nimport { BaseSite } from '../../model/misc.model';\r\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\r\nimport {\r\n  BASE_SITE_CONTEXT_ID,\r\n  CURRENCY_CONTEXT_ID,\r\n  LANGUAGE_CONTEXT_ID,\r\n} from '../../site-context/providers/context-ids';\r\nimport { Occ } from '../occ-models/occ.models';\r\nimport { JavaRegExpConverter } from './java-reg-exp-converter';\r\nimport { OccLoadedConfig } from './occ-loaded-config';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OccLoadedConfigConverter {\r\n  constructor(private javaRegExpConverter: JavaRegExpConverter) {}\r\n\r\n  fromOccBaseSites(baseSites: BaseSite[], currentUrl: string): OccLoadedConfig {\r\n    const baseSite = baseSites.find((site) =>\r\n      this.isCurrentBaseSite(site, currentUrl)\r\n    );\r\n    if (!baseSite) {\r\n      throw this.getError(\r\n        `Current url (${currentUrl}) doesn't match with any of url patterns of any base site.`\r\n      );\r\n    }\r\n\r\n    // Although `stores` property is an array, typically there is only one store. So we return the first store from the list.\r\n    const baseStore = baseSite.stores && baseSite.stores[0];\r\n    if (!baseStore) {\r\n      throw this.getError(\r\n        `Current base site (${baseSite.uid}) doesn't have any base store.`\r\n      );\r\n    }\r\n\r\n    return {\r\n      baseSite: baseSite.uid,\r\n      languages: this.getIsoCodes(\r\n        baseStore.languages,\r\n        baseSite.defaultLanguage || baseStore.defaultLanguage\r\n      ),\r\n      currencies: this.getIsoCodes(\r\n        baseStore.currencies,\r\n        baseStore.defaultCurrency\r\n      ),\r\n      urlParameters: this.getUrlParams(baseSite.urlEncodingAttributes),\r\n    };\r\n  }\r\n\r\n  toSiteContextConfig({\r\n    baseSite,\r\n    languages,\r\n    currencies,\r\n    urlParameters: urlEncodingAttributes,\r\n  }: OccLoadedConfig): SiteContextConfig {\r\n    const result = {\r\n      context: {\r\n        urlParameters: urlEncodingAttributes,\r\n        [BASE_SITE_CONTEXT_ID]: [baseSite],\r\n        [LANGUAGE_CONTEXT_ID]: languages,\r\n        [CURRENCY_CONTEXT_ID]: currencies,\r\n      },\r\n    };\r\n    return result;\r\n  }\r\n\r\n  toI18nConfig({ languages }: OccLoadedConfig): I18nConfig {\r\n    return { i18n: { fallbackLang: languages[0] } };\r\n  }\r\n\r\n  private isCurrentBaseSite(site: Occ.BaseSite, currentUrl: string): boolean {\r\n    const index = (site.urlPatterns || []).findIndex((javaRegexp) => {\r\n      const jsRegexp = this.javaRegExpConverter.toJsRegExp(javaRegexp);\r\n      if (jsRegexp) {\r\n        const result = jsRegexp.test(currentUrl);\r\n        return result;\r\n      }\r\n    });\r\n\r\n    return index !== -1;\r\n  }\r\n\r\n  /**\r\n   * Returns an array of url encoded site context parameters.\r\n   *\r\n   * It maps the string \"storefront\" (used in OCC) to the \"baseSite\" (used in Spartacus)\r\n   */\r\n  private getUrlParams(params: string[]): string[] {\r\n    const STOREFRONT_PARAM = 'storefront';\r\n\r\n    return (params || []).map((param) =>\r\n      param === STOREFRONT_PARAM ? BASE_SITE_CONTEXT_ID : param\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns iso codes in a array, where the first element is the default iso code.\r\n   */\r\n  private getIsoCodes(\r\n    elements: { isocode?: string }[],\r\n    defaultElement: { isocode?: string }\r\n  ) {\r\n    const result = this.moveToFirst(\r\n      elements,\r\n      (el) => el.isocode === defaultElement.isocode\r\n    ).map((el) => el.isocode);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Moves to the start of the array the first element that satisfies the given predicate.\r\n   *\r\n   * @param array array to modify\r\n   * @param predicate function called on elements\r\n   */\r\n  private moveToFirst(array: any[], predicate: (el: any) => boolean): any[] {\r\n    array = [...array];\r\n    const index = array.findIndex(predicate);\r\n    if (index !== -1) {\r\n      const [el] = array.splice(index, 1);\r\n      array.unshift(el);\r\n    }\r\n    return array;\r\n  }\r\n\r\n  private getError(message: string): Error {\r\n    return new Error(`Error: Cannot get base site config! ${message}`);\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { OccConfig } from '../config/occ-config';\nimport { Occ } from '../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccSitesConfigLoader {\n  constructor(protected config: OccConfig, protected http: HttpClient) {}\n\n  protected readonly endpoint =\n    'basesites?fields=baseSites(uid,defaultLanguage(isocode),urlEncodingAttributes,urlPatterns,stores(currencies(isocode),defaultCurrency(isocode),languages(isocode),defaultLanguage(isocode)))';\n\n  private get baseEndpoint(): string {\n    return (\n      (this.config.backend.occ.baseUrl || '') + this.config.backend.occ.prefix\n    );\n  }\n\n  private get url(): string {\n    return `${this.baseEndpoint}${this.endpoint}`;\n  }\n\n  load(): Observable<BaseSite[]> {\n    if (!this.config || !this.config.backend || !this.config.backend.occ) {\n      return throwError(new Error(`Missing config for OCC backend!`));\n    }\n\n    return this.http\n      .get<Occ.BaseSites>(this.url)\n      .pipe(map(({ baseSites }) => baseSites));\n  }\n}\n","import { DOCUMENT, isPlatformBrowser, isPlatformServer } from '@angular/common';\r\nimport {\r\n  Inject,\r\n  Injectable,\r\n  isDevMode,\r\n  Optional,\r\n  PLATFORM_ID,\r\n} from '@angular/core';\r\nimport {\r\n  makeStateKey,\r\n  StateKey,\r\n  TransferState,\r\n} from '@angular/platform-browser';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { Config } from '../../config/config.module';\r\nimport { deepMerge } from '../../config/utils/deep-merge';\r\nimport { I18nConfig } from '../../i18n/config/i18n-config';\r\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\r\nimport { SERVER_REQUEST_URL } from '../../ssr/ssr.providers';\r\nimport { OccLoadedConfig } from './occ-loaded-config';\r\nimport { OccLoadedConfigConverter } from './occ-loaded-config-converter';\r\nimport { OccSitesConfigLoader } from './occ-sites-config-loader';\r\n\r\nexport const EXTERNAL_CONFIG_TRANSFER_ID: StateKey<string> = makeStateKey<\r\n  string\r\n>('cx-external-config');\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OccConfigLoaderService {\r\n  constructor(\r\n    @Inject(PLATFORM_ID) protected platform: any,\r\n    @Inject(DOCUMENT) protected document: any,\r\n    @Inject(Config) protected config: any,\r\n    protected sitesConfigLoader: OccSitesConfigLoader,\r\n    protected converter: OccLoadedConfigConverter,\r\n    @Optional() protected transferState: TransferState,\r\n\r\n    @Optional()\r\n    @Inject(SERVER_REQUEST_URL)\r\n    protected serverRequestUrl?: string\r\n  ) {}\r\n\r\n  private get currentUrl(): string {\r\n    if (isPlatformBrowser(this.platform)) {\r\n      return this.document.location.href;\r\n    }\r\n    if (this.serverRequestUrl) {\r\n      return this.serverRequestUrl;\r\n    }\r\n    if (isDevMode()) {\r\n      console.error(\r\n        `Please provide token 'SERVER_REQUEST_URL' with the requested URL for SSR`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the Spartacus config asynchronously basing on the external config\r\n   */\r\n  loadConfig(): Promise<I18nConfig | SiteContextConfig> {\r\n    return this.get()\r\n      .pipe(\r\n        tap((externalConfig) => this.transfer(externalConfig)),\r\n        map((externalConfig) =>\r\n          deepMerge({}, ...this.getConfigChunks(externalConfig))\r\n        )\r\n      )\r\n      .toPromise();\r\n  }\r\n\r\n  /**\r\n   * Returns the external config\r\n   */\r\n  protected get(): Observable<OccLoadedConfig> {\r\n    const rehydratedExternalConfig = this.rehydrate();\r\n\r\n    return rehydratedExternalConfig\r\n      ? of(rehydratedExternalConfig)\r\n      : this.load();\r\n  }\r\n\r\n  /**\r\n   * Loads the external config from backend\r\n   */\r\n  protected load(): Observable<OccLoadedConfig> {\r\n    return this.sitesConfigLoader\r\n      .load()\r\n      .pipe(\r\n        map((baseSites) =>\r\n          this.converter.fromOccBaseSites(baseSites, this.currentUrl)\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Tries to rehydrate external config in the browser from SSR\r\n   */\r\n  protected rehydrate(): OccLoadedConfig {\r\n    if (this.transferState && isPlatformBrowser(this.platform)) {\r\n      return this.transferState.get(EXTERNAL_CONFIG_TRANSFER_ID, undefined);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transfers the given external config in SSR to the browser\r\n   *\r\n   * @param externalConfig\r\n   */\r\n  protected transfer(externalConfig: OccLoadedConfig) {\r\n    if (\r\n      this.transferState &&\r\n      isPlatformServer(this.platform) &&\r\n      externalConfig\r\n    ) {\r\n      this.transferState.set(EXTERNAL_CONFIG_TRANSFER_ID, externalConfig);\r\n    }\r\n  }\r\n\r\n  protected getConfigChunks(\r\n    externalConfig: OccLoadedConfig\r\n  ): (I18nConfig | SiteContextConfig)[] {\r\n    const chunks: any[] = [this.converter.toSiteContextConfig(externalConfig)];\r\n\r\n    if (this.shouldReturnI18nChunk()) {\r\n      chunks.push(this.converter.toI18nConfig(externalConfig));\r\n    }\r\n\r\n    return chunks;\r\n  }\r\n\r\n  private shouldReturnI18nChunk(): boolean {\r\n    const fallbackLangExists =\r\n      typeof (\r\n        this.config &&\r\n        this.config.i18n &&\r\n        this.config.i18n.fallbackLang\r\n      ) !== 'undefined';\r\n    if (fallbackLangExists && isDevMode()) {\r\n      console.warn(\r\n        `There is an already provided static config for 'i18n.fallbackLang', so the value from OCC loaded config is ignored.`\r\n      );\r\n    }\r\n    return !fallbackLangExists;\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  ConfigInitializer,\n  CONFIG_INITIALIZER,\n} from '../../config/config-initializer/config-initializer';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { OccConfigLoaderService } from './occ-config-loader.service';\n\n/**\n * Initializes the Spartacus config asynchronously basing on the external config\n */\nexport function initConfig(\n  configLoader: OccConfigLoaderService,\n  config: SiteContextConfig\n): ConfigInitializer {\n  /**\n   * Load config for `context` from backend only when there is no static config for `context.baseSite`\n   */\n  if (!config.context || !config.context[BASE_SITE_CONTEXT_ID]) {\n    return {\n      scopes: ['context', 'i18n.fallbackLang'],\n      configFactory: () => configLoader.loadConfig(),\n    };\n  }\n  return null;\n}\n\n/**\n * Re-provides the external config chunk given before Angular bootstrap\n */\n@NgModule()\nexport class OccConfigLoaderModule {\n  static forRoot(): ModuleWithProviders<OccConfigLoaderModule> {\n    return {\n      ngModule: OccConfigLoaderModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER,\n          useFactory: initConfig,\n          deps: [OccConfigLoaderService, SiteContextConfig],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Provider } from '@angular/core';\nimport { Meta } from '@angular/platform-browser';\nimport { provideConfigFactory } from '../../config/config.module';\nimport { OccConfig } from './occ-config';\n\nexport const OCC_BASE_URL_META_TAG_NAME = 'occ-backend-base-url';\nexport const OCC_BASE_URL_META_TAG_PLACEHOLDER = 'OCC_BACKEND_BASE_URL_VALUE';\nexport const MEDIA_BASE_URL_META_TAG_NAME = 'media-backend-base-url';\nexport const MEDIA_BASE_URL_META_TAG_PLACEHOLDER =\n  'MEDIA_BACKEND_BASE_URL_VALUE';\n\nexport function occServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(OCC_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== OCC_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { occ: { baseUrl } } }\n    : {};\n}\n\nexport function mediaServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(MEDIA_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== MEDIA_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { media: { baseUrl } } }\n    : {};\n}\n\nfunction getMetaTagContent(name: string, meta: Meta) {\n  const metaTag = meta.getTag(`name=\"${name}\"`);\n  return metaTag && metaTag.content;\n}\n\nexport function provideConfigFromMetaTags(): Provider[] {\n  return [\n    provideConfigFactory(occServerConfigFromMetaTagFactory, [Meta]),\n    provideConfigFactory(mediaServerConfigFromMetaTagFactory, [Meta]),\n  ];\n}\n","import { OccConfig } from './occ-config';\r\n\r\nexport const defaultOccConfig: OccConfig = {\r\n  backend: {\r\n    occ: {\r\n      prefix: '/rest/v2/',\r\n    },\r\n    media: {},\r\n  },\r\n};\r\n","import { OccConfig } from '../../occ';\n\nexport function occConfigValidator(config: OccConfig) {\n  if (\n    config.backend === undefined ||\n    config.backend.occ === undefined ||\n    config.backend.occ.baseUrl === undefined\n  ) {\n    return 'Please configure backend.occ.baseUrl before using storefront library!';\n  }\n}\n","import {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { OccConfig } from '../config/occ-config';\r\n\r\n/**\r\n * Http interceptor to add cookies to all cross-site requests.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class WithCredentialsInterceptor implements HttpInterceptor {\r\n  constructor(protected config: OccConfig) {}\r\n\r\n  /**\r\n   * Intercepts each request and adds the `withCredential` flag to it\r\n   * if it hasn't been added already.\r\n   */\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    if (this.requiresWithCredentials(request)) {\r\n      request = request.clone({\r\n        withCredentials: true,\r\n      });\r\n    }\r\n    return next.handle(request);\r\n  }\r\n\r\n  /**\r\n   * indicates whether the request should use the WithCredentials flag.\r\n   */\r\n  protected requiresWithCredentials(request: HttpRequest<any>): boolean {\r\n    return (\r\n      this.occConfig?.useWithCredentials &&\r\n      request.url.indexOf(this.occConfig?.prefix) > -1\r\n    );\r\n  }\r\n\r\n  private get occConfig() {\r\n    return this.config.backend.occ;\r\n  }\r\n}\r\n","export namespace Occ {\r\n  /**\r\n   *\r\n   * An interface representing Country.\r\n   */\r\n  export interface Country {\r\n    /**\r\n     * @member {string} [isocode]\r\n     */\r\n    isocode?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Region.\r\n   */\r\n  export interface Region {\r\n    /**\r\n     * @member {string} [countryIso]\r\n     */\r\n    countryIso?: string;\r\n    /**\r\n     * @member {string} [isocode]\r\n     */\r\n    isocode?: string;\r\n    /**\r\n     * @member {string} [isocodeShort]\r\n     */\r\n    isocodeShort?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing RegionList.\r\n   */\r\n  export interface RegionList {\r\n    /**\r\n     * @member {Region[]} [regions]\r\n     */\r\n    regions?: Region[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Address.\r\n   */\r\n  export interface Address {\r\n    /**\r\n     * @member {string} [companyName]\r\n     */\r\n    companyName?: string;\r\n    /**\r\n     * @member {Country} [country]\r\n     */\r\n    country?: Country;\r\n    /**\r\n     * @member {boolean} [defaultAddress]\r\n     */\r\n    defaultAddress?: boolean;\r\n    /**\r\n     * @member {string} [email]\r\n     */\r\n    email?: string;\r\n    /**\r\n     * @member {string} [firstName]\r\n     */\r\n    firstName?: string;\r\n    /**\r\n     * @member {string} [formattedAddress]\r\n     */\r\n    formattedAddress?: string;\r\n    /**\r\n     * @member {string} [id]\r\n     */\r\n    id?: string;\r\n    /**\r\n     * @member {string} [lastName]\r\n     */\r\n    lastName?: string;\r\n    /**\r\n     * @member {string} [line1]\r\n     */\r\n    line1?: string;\r\n    /**\r\n     * @member {string} [line2]\r\n     */\r\n    line2?: string;\r\n    /**\r\n     * @member {string} [phone]\r\n     */\r\n    phone?: string;\r\n    /**\r\n     * @member {string} [postalCode]\r\n     */\r\n    postalCode?: string;\r\n    /**\r\n     * @member {Region} [region]\r\n     */\r\n    region?: Region;\r\n    /**\r\n     * @member {boolean} [shippingAddress]\r\n     */\r\n    shippingAddress?: boolean;\r\n    /**\r\n     * @member {string} [title]\r\n     */\r\n    title?: string;\r\n    /**\r\n     * @member {string} [titleCode]\r\n     */\r\n    titleCode?: string;\r\n    /**\r\n     * @member {string} [town]\r\n     */\r\n    town?: string;\r\n    /**\r\n     * @member {boolean} [visibleInAddressBook]\r\n     */\r\n    visibleInAddressBook?: boolean;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing AddressList.\r\n   */\r\n  export interface AddressList {\r\n    /**\r\n     * @member {Address[]} [addresses]\r\n     */\r\n    addresses?: Address[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ErrorModel.\r\n   * Error message\r\n   *\r\n   */\r\n  export interface ErrorModel {\r\n    /**\r\n     * @member {string} [message] Descriptive, human readable error message.\r\n     */\r\n    message?: string;\r\n    /**\r\n     * @member {string} [reason] Additional classification specific for each\r\n     * error type e.g. 'noStock'.\r\n     */\r\n    reason?: string;\r\n    /**\r\n     * @member {string} [subject] Identifier of the related object e.g. '1'.\r\n     */\r\n    subject?: string;\r\n    /**\r\n     * @member {string} [subjectType] Type of the object related to the error\r\n     * e.g. 'entry'.\r\n     */\r\n    subjectType?: string;\r\n    /**\r\n     * @member {string} [type] Type of the error e.g. 'LowStockError'.\r\n     */\r\n    type?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ErrorList.\r\n   * List of errors\r\n   *\r\n   */\r\n  export interface ErrorList {\r\n    /**\r\n     * @member {ErrorModel[]} [errors]\r\n     */\r\n    errors?: ErrorModel[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing AddressValidation.\r\n   */\r\n  export interface AddressValidation {\r\n    /**\r\n     * @member {string} [decision]\r\n     */\r\n    decision?: string;\r\n    /**\r\n     * @member {ErrorList} [errors]\r\n     */\r\n    errors?: ErrorList;\r\n    /**\r\n     * @member {Address[]} [suggestedAddresses]\r\n     */\r\n    suggestedAddresses?: Address[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Price.\r\n   */\r\n  export interface Price {\r\n    /**\r\n     * @member {string} [currencyIso]\r\n     */\r\n    currencyIso?: string;\r\n    /**\r\n     * @member {string} [formattedValue]\r\n     */\r\n    formattedValue?: string;\r\n    /**\r\n     * @member {number} [maxQuantity]\r\n     */\r\n    maxQuantity?: number;\r\n    /**\r\n     * @member {number} [minQuantity]\r\n     */\r\n    minQuantity?: number;\r\n    /**\r\n     * @member {PriceType} [priceType] Possible values include: 'BUY', 'FROM'\r\n     */\r\n    priceType?: PriceType;\r\n    /**\r\n     * @member {number} [value]\r\n     */\r\n    value?: number;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Stock.\r\n   */\r\n  export interface Stock {\r\n    /**\r\n     * @member {number} [stockLevel]\r\n     */\r\n    stockLevel?: number;\r\n    /**\r\n     * @member {string} [stockLevelStatus]\r\n     */\r\n    stockLevelStatus?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Image.\r\n   */\r\n  export interface Image {\r\n    /**\r\n     * @member {string} [altText]\r\n     */\r\n    altText?: string;\r\n    /**\r\n     * @member {string} [format]\r\n     */\r\n    format?: string;\r\n    /**\r\n     * @member {number} [galleryIndex]\r\n     */\r\n    galleryIndex?: number;\r\n    /**\r\n     * @member {ImageType} [imageType] Possible values include: 'PRIMARY',\r\n     * 'GALLERY'\r\n     */\r\n    imageType?: ImageType;\r\n    /**\r\n     * @member {string} [url]\r\n     */\r\n    url?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing VariantOptionQualifier.\r\n   */\r\n  export interface VariantOptionQualifier {\r\n    /**\r\n     * @member {Image} [image]\r\n     */\r\n    image?: Image;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {string} [qualifier]\r\n     */\r\n    qualifier?: string;\r\n    /**\r\n     * @member {string} [value]\r\n     */\r\n    value?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing VariantOption.\r\n   */\r\n  export interface VariantOption {\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {Price} [priceData]\r\n     */\r\n    priceData?: Price;\r\n    /**\r\n     * @member {Stock} [stock]\r\n     */\r\n    stock?: Stock;\r\n    /**\r\n     * @member {string} [url]\r\n     */\r\n    url?: string;\r\n    /**\r\n     * @member {VariantOptionQualifier[]} [variantOptionQualifiers]\r\n     */\r\n    variantOptionQualifiers?: VariantOptionQualifier[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing BaseOption.\r\n   */\r\n  export interface BaseOption {\r\n    /**\r\n     * @member {VariantOption[]} [options]\r\n     */\r\n    options?: VariantOption[];\r\n    /**\r\n     * @member {VariantOption} [selected]\r\n     */\r\n    selected?: VariantOption;\r\n    /**\r\n     * @member {string} [variantType]\r\n     */\r\n    variantType?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing SearchQuery.\r\n   */\r\n  export interface SearchQuery {\r\n    /**\r\n     * @member {string} [value]\r\n     */\r\n    value?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing SearchState.\r\n   */\r\n  export interface SearchState {\r\n    /**\r\n     * @member {SearchQuery} [query]\r\n     */\r\n    query?: SearchQuery;\r\n    /**\r\n     * @member {string} [url]\r\n     */\r\n    url?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Breadcrumb.\r\n   */\r\n  export interface Breadcrumb {\r\n    /**\r\n     * @member {string} [facetCode]\r\n     */\r\n    facetCode?: string;\r\n    /**\r\n     * @member {string} [facetName]\r\n     */\r\n    facetName?: string;\r\n    /**\r\n     * @member {string} [facetValueCode]\r\n     */\r\n    facetValueCode?: string;\r\n    /**\r\n     * @member {string} [facetValueName]\r\n     */\r\n    facetValueName?: string;\r\n    /**\r\n     * @member {SearchState} [removeQuery]\r\n     */\r\n    removeQuery?: SearchState;\r\n    /**\r\n     * @member {SearchState} [truncateQuery]\r\n     */\r\n    truncateQuery?: SearchState;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Component.\r\n   */\r\n  export interface Component {\r\n    /**\r\n     * @member {Date} [modifiedTime]\r\n     */\r\n    modifiedTime?: Date;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {any} [otherProperties]\r\n     */\r\n    otherProperties?: any;\r\n    /**\r\n     * @member {string} [typeCode]\r\n     */\r\n    typeCode?: string;\r\n    /**\r\n     * @member {string} [uid]\r\n     */\r\n    uid?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ComponentList.\r\n   */\r\n  export interface ComponentList {\r\n    /**\r\n     * @member {Component[]} [component]\r\n     */\r\n    component?: Component[] | any[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ContentSlot.\r\n   */\r\n  export interface ContentSlot {\r\n    /**\r\n     * @member {ComponentList} [components]\r\n     */\r\n    components?: ComponentList;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {string} [position]\r\n     */\r\n    position?: string;\r\n    /**\r\n     * @member {string} [slotId]\r\n     */\r\n    slotId?: string;\r\n    /**\r\n     * @member {boolean} [slotShared]\r\n     */\r\n    slotShared?: boolean;\r\n    /**\r\n     * @member {string} [slotStatus]\r\n     */\r\n    slotStatus?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ContentSlotList.\r\n   */\r\n  export interface ContentSlotList {\r\n    /**\r\n     * @member {ContentSlot[]} [contentSlot]\r\n     */\r\n    contentSlot?: ContentSlot[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing CMSPage.\r\n   */\r\n  export interface CMSPage {\r\n    /**\r\n     * @member {ContentSlotList} [contentSlots]\r\n     */\r\n    contentSlots?: ContentSlotList;\r\n    /**\r\n     * @member {boolean} [defaultPage]\r\n     */\r\n    defaultPage?: boolean;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {string} [template]\r\n     */\r\n    template?: string;\r\n    /**\r\n     * @member {string} [title]\r\n     */\r\n    title?: string;\r\n    /**\r\n     * @member {string} [typeCode]\r\n     */\r\n    typeCode?: string;\r\n    /**\r\n     * @member {string} [uid]\r\n     */\r\n    uid?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing CardType.\r\n   */\r\n  export interface CardType {\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing CardTypeList.\r\n   */\r\n  export interface CardTypeList {\r\n    /**\r\n     * @member {CardType[]} [cardTypes]\r\n     */\r\n    cardTypes?: CardType[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing PromotionOrderEntryConsumed.\r\n   */\r\n  export interface PromotionOrderEntryConsumed {\r\n    /**\r\n     * @member {number} [adjustedUnitPrice]\r\n     */\r\n    adjustedUnitPrice?: number;\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {number} [orderEntryNumber]\r\n     */\r\n    orderEntryNumber?: number;\r\n    /**\r\n     * @member {number} [quantity]\r\n     */\r\n    quantity?: number;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing PromotionRestriction.\r\n   */\r\n  export interface PromotionRestriction {\r\n    /**\r\n     * @member {string} [description]\r\n     */\r\n    description?: string;\r\n    /**\r\n     * @member {string} [restrictionType]\r\n     */\r\n    restrictionType?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Promotion.\r\n   */\r\n  export interface Promotion {\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {string[]} [couldFireMessages]\r\n     */\r\n    couldFireMessages?: string[];\r\n    /**\r\n     * @member {string} [description]\r\n     */\r\n    description?: string;\r\n    /**\r\n     * @member {boolean} [enabled]\r\n     */\r\n    enabled?: boolean;\r\n    /**\r\n     * @member {Date} [endDate]\r\n     */\r\n    endDate?: Date;\r\n    /**\r\n     * @member {string[]} [firedMessages]\r\n     */\r\n    firedMessages?: string[];\r\n    /**\r\n     * @member {number} [priority]\r\n     */\r\n    priority?: number;\r\n    /**\r\n     * @member {Image} [productBanner]\r\n     */\r\n    productBanner?: Image;\r\n    /**\r\n     * @member {string} [promotionGroup]\r\n     */\r\n    promotionGroup?: string;\r\n    /**\r\n     * @member {string} [promotionType]\r\n     */\r\n    promotionType?: string;\r\n    /**\r\n     * @member {PromotionRestriction[]} [restrictions]\r\n     */\r\n    restrictions?: PromotionRestriction[];\r\n    /**\r\n     * @member {Date} [startDate]\r\n     */\r\n    startDate?: Date;\r\n    /**\r\n     * @member {string} [title]\r\n     */\r\n    title?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing PromotionResult.\r\n   */\r\n  export interface PromotionResult {\r\n    /**\r\n     * @member {PromotionOrderEntryConsumed[]} [consumedEntries]\r\n     */\r\n    consumedEntries?: PromotionOrderEntryConsumed[];\r\n    /**\r\n     * @member {string} [description]\r\n     */\r\n    description?: string;\r\n    /**\r\n     * @member {Promotion} [promotion]\r\n     */\r\n    promotion?: Promotion;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Currency.\r\n   */\r\n  export interface Currency {\r\n    /**\r\n     * @member {boolean} [active]\r\n     */\r\n    active?: boolean;\r\n    /**\r\n     * @member {string} [isocode]\r\n     */\r\n    isocode?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {string} [symbol]\r\n     */\r\n    symbol?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Voucher.\r\n   */\r\n  export interface Voucher {\r\n    /**\r\n     * @member {Price} [appliedValue]\r\n     */\r\n    appliedValue?: Price;\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {Currency} [currency]\r\n     */\r\n    currency?: Currency;\r\n    /**\r\n     * @member {string} [description]\r\n     */\r\n    description?: string;\r\n    /**\r\n     * @member {boolean} [freeShipping]\r\n     */\r\n    freeShipping?: boolean;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {number} [value]\r\n     */\r\n    value?: number;\r\n    /**\r\n     * @member {string} [valueFormatted]\r\n     */\r\n    valueFormatted?: string;\r\n    /**\r\n     * @member {string} [valueString]\r\n     */\r\n    valueString?: string;\r\n    /**\r\n     * @member {string} [voucherCode]\r\n     */\r\n    voucherCode?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing DeliveryMode.\r\n   */\r\n  export interface DeliveryMode {\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {Price} [deliveryCost]\r\n     */\r\n    deliveryCost?: Price;\r\n    /**\r\n     * @member {string} [description]\r\n     */\r\n    description?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing GeoPoint.\r\n   */\r\n  export interface GeoPoint {\r\n    /**\r\n     * @member {number} [latitude]\r\n     */\r\n    latitude?: number;\r\n    /**\r\n     * @member {number} [longitude]\r\n     */\r\n    longitude?: number;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Time.\r\n   */\r\n  export interface Time {\r\n    /**\r\n     * @member {string} [formattedHour]\r\n     */\r\n    formattedHour?: string;\r\n    /**\r\n     * @member {number} [hour]\r\n     */\r\n    hour?: number;\r\n    /**\r\n     * @member {number} [minute]\r\n     */\r\n    minute?: number;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing SpecialOpeningDay.\r\n   */\r\n  export interface SpecialOpeningDay {\r\n    /**\r\n     * @member {boolean} [closed]\r\n     */\r\n    closed?: boolean;\r\n    /**\r\n     * @member {Time} [closingTime]\r\n     */\r\n    closingTime?: Time;\r\n    /**\r\n     * @member {string} [comment]\r\n     */\r\n    comment?: string;\r\n    /**\r\n     * @member {Date} [date]\r\n     */\r\n    date?: Date;\r\n    /**\r\n     * @member {string} [formattedDate]\r\n     */\r\n    formattedDate?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {Time} [openingTime]\r\n     */\r\n    openingTime?: Time;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing WeekdayOpeningDay.\r\n   */\r\n  export interface WeekdayOpeningDay {\r\n    /**\r\n     * @member {boolean} [closed]\r\n     */\r\n    closed?: boolean;\r\n    /**\r\n     * @member {Time} [closingTime]\r\n     */\r\n    closingTime?: Time;\r\n    /**\r\n     * @member {Time} [openingTime]\r\n     */\r\n    openingTime?: Time;\r\n    /**\r\n     * @member {string} [weekDay]\r\n     */\r\n    weekDay?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing OpeningSchedule.\r\n   */\r\n  export interface OpeningSchedule {\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {SpecialOpeningDay[]} [specialDayOpeningList]\r\n     */\r\n    specialDayOpeningList?: SpecialOpeningDay[];\r\n    /**\r\n     * @member {WeekdayOpeningDay[]} [weekDayOpeningList]\r\n     */\r\n    weekDayOpeningList?: WeekdayOpeningDay[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing PointOfService.\r\n   */\r\n  export interface PointOfService {\r\n    /**\r\n     * @member {Address} [address]\r\n     */\r\n    address?: Address;\r\n    /**\r\n     * @member {string} [description]\r\n     */\r\n    description?: string;\r\n    /**\r\n     * @member {string} [displayName]\r\n     */\r\n    displayName?: string;\r\n    /**\r\n     * @member {number} [distanceKm]\r\n     */\r\n    distanceKm?: number;\r\n    /**\r\n     * @member {{ [propertyName: string]: string }} [features]\r\n     */\r\n    features?: { [propertyName: string]: string };\r\n    /**\r\n     * @member {string} [formattedDistance]\r\n     */\r\n    formattedDistance?: string;\r\n    /**\r\n     * @member {GeoPoint} [geoPoint]\r\n     */\r\n    geoPoint?: GeoPoint;\r\n    /**\r\n     * @member {Image} [mapIcon]\r\n     */\r\n    mapIcon?: Image;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {OpeningSchedule} [openingHours]\r\n     */\r\n    openingHours?: OpeningSchedule;\r\n    /**\r\n     * @member {string} [storeContent]\r\n     */\r\n    storeContent?: string;\r\n    /**\r\n     * @member {Image[]} [storeImages]\r\n     */\r\n    storeImages?: Image[];\r\n    /**\r\n     * @member {string} [url]\r\n     */\r\n    url?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Category.\r\n   */\r\n  export interface Category {\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {Image} [image]\r\n     */\r\n    image?: Image;\r\n    /**\r\n     * @member {string} [url]\r\n     */\r\n    url?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing FeatureUnit.\r\n   */\r\n  export interface FeatureUnit {\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {string} [symbol]\r\n     */\r\n    symbol?: string;\r\n    /**\r\n     * @member {string} [unitType]\r\n     */\r\n    unitType?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing FeatureValue.\r\n   */\r\n  export interface FeatureValue {\r\n    /**\r\n     * @member {string} [value]\r\n     */\r\n    value?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Feature.\r\n   */\r\n  export interface Feature {\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {boolean} [comparable]\r\n     */\r\n    comparable?: boolean;\r\n    /**\r\n     * @member {string} [description]\r\n     */\r\n    description?: string;\r\n    /**\r\n     * @member {FeatureUnit} [featureUnit]\r\n     */\r\n    featureUnit?: FeatureUnit;\r\n    /**\r\n     * @member {FeatureValue[]} [featureValues]\r\n     */\r\n    featureValues?: FeatureValue[];\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {boolean} [range]\r\n     */\r\n    range?: boolean;\r\n    /**\r\n     * @member {string} [type]\r\n     */\r\n    type?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Classification.\r\n   */\r\n  export interface Classification {\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {Feature[]} [features]\r\n     */\r\n    features?: Feature[];\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing FutureStock.\r\n   */\r\n  export interface FutureStock {\r\n    /**\r\n     * @member {Date} [date]\r\n     */\r\n    date?: Date;\r\n    /**\r\n     * @member {string} [formattedDate]\r\n     */\r\n    formattedDate?: string;\r\n    /**\r\n     * @member {Stock} [stock]\r\n     */\r\n    stock?: Stock;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing PriceRange.\r\n   */\r\n  export interface PriceRange {\r\n    /**\r\n     * @member {Price} [maxPrice]\r\n     */\r\n    maxPrice?: Price;\r\n    /**\r\n     * @member {Price} [minPrice]\r\n     */\r\n    minPrice?: Price;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ProductReference.\r\n   */\r\n  export interface ProductReference {\r\n    /**\r\n     * @member {string} [description]\r\n     */\r\n    description?: string;\r\n    /**\r\n     * @member {boolean} [preselected]\r\n     */\r\n    preselected?: boolean;\r\n    /**\r\n     * @member {number} [quantity]\r\n     */\r\n    quantity?: number;\r\n    /**\r\n     * @member {string} [referenceType]\r\n     */\r\n    referenceType?: string;\r\n    /**\r\n     * @member {Product} [target]\r\n     */\r\n    target?: Product;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Language.\r\n   */\r\n  export interface Language {\r\n    /**\r\n     * @member {boolean} [active]\r\n     */\r\n    active?: boolean;\r\n    /**\r\n     * @member {string} [isocode]\r\n     */\r\n    isocode?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {string} [nativeName]\r\n     */\r\n    nativeName?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing User.\r\n   */\r\n  export interface User {\r\n    /**\r\n     * @member {Currency} [currency]\r\n     */\r\n    currency?: Currency;\r\n    /**\r\n     * @member {string} [customerId]\r\n     */\r\n    customerId?: string;\r\n    /**\r\n     * @member {Date} [deactivationDate]\r\n     */\r\n    deactivationDate?: Date;\r\n    /**\r\n     * @member {Address} [defaultAddress]\r\n     */\r\n    defaultAddress?: Address;\r\n    /**\r\n     * @member {string} [displayUid]\r\n     */\r\n    displayUid?: string;\r\n    /**\r\n     * @member {string} [firstName]\r\n     */\r\n    firstName?: string;\r\n    /**\r\n     * @member {Language} [language]\r\n     */\r\n    language?: Language;\r\n    /**\r\n     * @member {string} [lastName]\r\n     */\r\n    lastName?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {string} [title]\r\n     */\r\n    title?: string;\r\n    /**\r\n     * @member {string} [titleCode]\r\n     */\r\n    titleCode?: string;\r\n    /**\r\n     * @member {string} [uid]\r\n     */\r\n    uid?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Review.\r\n   */\r\n  export interface Review {\r\n    /**\r\n     * @member {string} [alias]\r\n     */\r\n    alias?: string;\r\n    /**\r\n     * @member {string} [comment]\r\n     */\r\n    comment?: string;\r\n    /**\r\n     * @member {Date} [date]\r\n     */\r\n    date?: Date;\r\n    /**\r\n     * @member {string} [headline]\r\n     */\r\n    headline?: string;\r\n    /**\r\n     * @member {string} [id]\r\n     */\r\n    id?: string;\r\n    /**\r\n     * @member {User} [principal]\r\n     */\r\n    principal?: User;\r\n    /**\r\n     * @member {number} [rating]\r\n     */\r\n    rating?: number;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing VariantCategory.\r\n   */\r\n  export interface VariantCategory {\r\n    /**\r\n     * @member {boolean} [hasImage]\r\n     */\r\n    hasImage?: boolean;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {number} [priority]\r\n     */\r\n    priority?: number;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing VariantValueCategory.\r\n   */\r\n  export interface VariantValueCategory {\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {number} [sequence]\r\n     */\r\n    sequence?: number;\r\n    /**\r\n     * @member {VariantCategory[]} [superCategories]\r\n     */\r\n    superCategories?: VariantCategory[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing VariantMatrixElement.\r\n   */\r\n  export interface VariantMatrixElement {\r\n    /**\r\n     * @member {VariantMatrixElement[]} [elements]\r\n     */\r\n    elements?: VariantMatrixElement[];\r\n    /**\r\n     * @member {boolean} [isLeaf]\r\n     */\r\n    isLeaf?: boolean;\r\n    /**\r\n     * @member {VariantCategory} [parentVariantCategory]\r\n     */\r\n    parentVariantCategory?: VariantCategory;\r\n    /**\r\n     * @member {VariantOption} [variantOption]\r\n     */\r\n    variantOption?: VariantOption;\r\n    /**\r\n     * @member {VariantValueCategory} [variantValueCategory]\r\n     */\r\n    variantValueCategory?: VariantValueCategory;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Product.\r\n   */\r\n  export interface Product {\r\n    /**\r\n     * @member {boolean} [availableForPickup]\r\n     */\r\n    availableForPickup?: boolean;\r\n    /**\r\n     * @member {number} [averageRating]\r\n     */\r\n    averageRating?: number;\r\n    /**\r\n     * @member {BaseOption[]} [baseOptions]\r\n     */\r\n    baseOptions?: BaseOption[];\r\n    /**\r\n     * @member {string} [baseProduct]\r\n     */\r\n    baseProduct?: string;\r\n    /**\r\n     * @member {Category[]} [categories]\r\n     */\r\n    categories?: Category[];\r\n    /**\r\n     * @member {Classification[]} [classifications]\r\n     */\r\n    classifications?: Classification[];\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {string} [description]\r\n     */\r\n    description?: string;\r\n    /**\r\n     * @member {FutureStock[]} [futureStocks]\r\n     */\r\n    futureStocks?: FutureStock[];\r\n    /**\r\n     * @member {Image[]} [images]\r\n     */\r\n    images?: Image[];\r\n    /**\r\n     * @member {string} [manufacturer]\r\n     */\r\n    manufacturer?: string;\r\n    /**\r\n     * @member {boolean} [multidimensional]\r\n     */\r\n    multidimensional?: boolean;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {number} [numberOfReviews]\r\n     */\r\n    numberOfReviews?: number;\r\n    /**\r\n     * @member {Promotion[]} [potentialPromotions]\r\n     */\r\n    potentialPromotions?: Promotion[];\r\n    /**\r\n     * @member {Price} [price]\r\n     */\r\n    price?: Price;\r\n    /**\r\n     * @member {PriceRange} [priceRange]\r\n     */\r\n    priceRange?: PriceRange;\r\n    /**\r\n     * @member {ProductReference[]} [productReferences]\r\n     */\r\n    productReferences?: ProductReference[];\r\n    /**\r\n     * @member {boolean} [purchasable]\r\n     */\r\n    purchasable?: boolean;\r\n    /**\r\n     * @member {Review[]} [reviews]\r\n     */\r\n    reviews?: Review[];\r\n    /**\r\n     * @member {Stock} [stock]\r\n     */\r\n    stock?: Stock;\r\n    /**\r\n     * @member {string} [summary]\r\n     */\r\n    summary?: string;\r\n    /**\r\n     * @member {string} [url]\r\n     */\r\n    url?: string;\r\n    /**\r\n     * @member {VariantMatrixElement[]} [variantMatrix]\r\n     */\r\n    variantMatrix?: VariantMatrixElement[];\r\n    /**\r\n     * @member {VariantOption[]} [variantOptions]\r\n     */\r\n    variantOptions?: VariantOption[];\r\n    /**\r\n     * @member {string} [variantType]\r\n     */\r\n    variantType?: string;\r\n    /**\r\n     * @member {Price[]} [volumePrices]\r\n     */\r\n    volumePrices?: Price[];\r\n    /**\r\n     * @member {boolean} [volumePricesFlag]\r\n     */\r\n    volumePricesFlag?: boolean;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing OrderEntry.\r\n   */\r\n  export interface OrderEntry {\r\n    /**\r\n     * @member {Price} [basePrice]\r\n     */\r\n    basePrice?: Price;\r\n    /**\r\n     * @member {DeliveryMode} [deliveryMode]\r\n     */\r\n    deliveryMode?: DeliveryMode;\r\n    /**\r\n     * @member {PointOfService} [deliveryPointOfService]\r\n     */\r\n    deliveryPointOfService?: PointOfService;\r\n    /**\r\n     * @member {number} [entryNumber]\r\n     */\r\n    entryNumber?: number;\r\n    /**\r\n     * @member {Product} [product]\r\n     */\r\n    product?: Product;\r\n    /**\r\n     * @member {number} [quantity]\r\n     */\r\n    quantity?: number;\r\n    /**\r\n     * @member {Price} [totalPrice]\r\n     */\r\n    totalPrice?: Price;\r\n    /**\r\n     * @member {boolean} [updateable]\r\n     */\r\n    updateable?: boolean;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing DeliveryOrderEntryGroup.\r\n   */\r\n  export interface DeliveryOrderEntryGroup {\r\n    /**\r\n     * @member {Address} [deliveryAddress]\r\n     */\r\n    deliveryAddress?: Address;\r\n    /**\r\n     * @member {OrderEntry[]} [entries]\r\n     */\r\n    entries?: OrderEntry[];\r\n    /**\r\n     * @member {number} [quantity]\r\n     */\r\n    quantity?: number;\r\n    /**\r\n     * @member {Price} [totalPriceWithTax]\r\n     */\r\n    totalPriceWithTax?: Price;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing PaymentDetails.\r\n   */\r\n  export interface PaymentDetails {\r\n    /**\r\n     * @member {string} [accountHolderName]\r\n     */\r\n    accountHolderName?: string;\r\n    /**\r\n     * @member {Address} [billingAddress]\r\n     */\r\n    billingAddress?: Address;\r\n    /**\r\n     * @member {string} [cardNumber]\r\n     */\r\n    cardNumber?: string;\r\n    /**\r\n     * @member {CardType} [cardType]\r\n     */\r\n    cardType?: CardType;\r\n    /**\r\n     * @member {string} [cvn]\r\n     */\r\n    cvn?: string;\r\n    /**\r\n     * @member {boolean} [defaultPayment]\r\n     */\r\n    defaultPayment?: boolean;\r\n    /**\r\n     * @member {string} [expiryMonth]\r\n     */\r\n    expiryMonth?: string;\r\n    /**\r\n     * @member {string} [expiryYear]\r\n     */\r\n    expiryYear?: string;\r\n    /**\r\n     * @member {string} [id]\r\n     */\r\n    id?: string;\r\n    /**\r\n     * @member {string} [issueNumber]\r\n     */\r\n    issueNumber?: string;\r\n    /**\r\n     * @member {boolean} [saved]\r\n     */\r\n    saved?: boolean;\r\n    /**\r\n     * @member {string} [startMonth]\r\n     */\r\n    startMonth?: string;\r\n    /**\r\n     * @member {string} [startYear]\r\n     */\r\n    startYear?: string;\r\n    /**\r\n     * @member {string} [subscriptionId]\r\n     */\r\n    subscriptionId?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing PickupOrderEntryGroup.\r\n   */\r\n  export interface PickupOrderEntryGroup {\r\n    /**\r\n     * @member {PointOfService} [deliveryPointOfService]\r\n     */\r\n    deliveryPointOfService?: PointOfService;\r\n    /**\r\n     * @member {number} [distance]\r\n     */\r\n    distance?: number;\r\n    /**\r\n     * @member {OrderEntry[]} [entries]\r\n     */\r\n    entries?: OrderEntry[];\r\n    /**\r\n     * @member {number} [quantity]\r\n     */\r\n    quantity?: number;\r\n    /**\r\n     * @member {Price} [totalPriceWithTax]\r\n     */\r\n    totalPriceWithTax?: Price;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Principal.\r\n   */\r\n  export interface Principal {\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {string} [uid]\r\n     */\r\n    uid?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Cart.\r\n   */\r\n  export interface Cart {\r\n    /**\r\n     * @member {PromotionResult[]} [appliedOrderPromotions]\r\n     */\r\n    appliedOrderPromotions?: PromotionResult[];\r\n    /**\r\n     * @member {PromotionResult[]} [appliedProductPromotions]\r\n     */\r\n    appliedProductPromotions?: PromotionResult[];\r\n    /**\r\n     * @member {Voucher[]} [appliedVouchers]\r\n     */\r\n    appliedVouchers?: Voucher[];\r\n    /**\r\n     * @member {boolean} [calculated]\r\n     */\r\n    calculated?: boolean;\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {Address} [deliveryAddress]\r\n     */\r\n    deliveryAddress?: Address;\r\n    /**\r\n     * @member {Price} [deliveryCost]\r\n     */\r\n    deliveryCost?: Price;\r\n    /**\r\n     * @member {number} [deliveryItemsQuantity]\r\n     */\r\n    deliveryItemsQuantity?: number;\r\n    /**\r\n     * @member {DeliveryMode} [deliveryMode]\r\n     */\r\n    deliveryMode?: DeliveryMode;\r\n    /**\r\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\r\n     */\r\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\r\n    /**\r\n     * @member {string} [description]\r\n     */\r\n    description?: string;\r\n    /**\r\n     * @member {OrderEntry[]} [entries]\r\n     */\r\n    entries?: OrderEntry[];\r\n    /**\r\n     * @member {Date} [expirationTime]\r\n     */\r\n    expirationTime?: Date;\r\n    /**\r\n     * @member {string} [guid]\r\n     */\r\n    guid?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {boolean} [net]\r\n     */\r\n    net?: boolean;\r\n    /**\r\n     * @member {Price} [orderDiscounts]\r\n     */\r\n    orderDiscounts?: Price;\r\n    /**\r\n     * @member {PaymentDetails} [paymentInfo]\r\n     */\r\n    paymentInfo?: PaymentDetails;\r\n    /**\r\n     * @member {number} [pickupItemsQuantity]\r\n     */\r\n    pickupItemsQuantity?: number;\r\n    /**\r\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\r\n     */\r\n    pickupOrderGroups?: PickupOrderEntryGroup[];\r\n    /**\r\n     * @member {PromotionResult[]} [potentialOrderPromotions]\r\n     */\r\n    potentialOrderPromotions?: PromotionResult[];\r\n    /**\r\n     * @member {PromotionResult[]} [potentialProductPromotions]\r\n     */\r\n    potentialProductPromotions?: PromotionResult[];\r\n    /**\r\n     * @member {Price} [productDiscounts]\r\n     */\r\n    productDiscounts?: Price;\r\n    /**\r\n     * @member {Date} [saveTime]\r\n     */\r\n    saveTime?: Date;\r\n    /**\r\n     * @member {Principal} [savedBy]\r\n     */\r\n    savedBy?: Principal;\r\n    /**\r\n     * @member {string} [site]\r\n     */\r\n    site?: string;\r\n    /**\r\n     * @member {string} [store]\r\n     */\r\n    store?: string;\r\n    /**\r\n     * @member {Price} [subTotal]\r\n     */\r\n    subTotal?: Price;\r\n    /**\r\n     * @member {Price} [totalDiscounts]\r\n     */\r\n    totalDiscounts?: Price;\r\n    /**\r\n     * @member {number} [totalItems]\r\n     */\r\n    totalItems?: number;\r\n    /**\r\n     * @member {Price} [totalPrice]\r\n     */\r\n    totalPrice?: Price;\r\n    /**\r\n     * @member {Price} [totalPriceWithTax]\r\n     */\r\n    totalPriceWithTax?: Price;\r\n    /**\r\n     * @member {Price} [totalTax]\r\n     */\r\n    totalTax?: Price;\r\n    /**\r\n     * @member {number} [totalUnitCount]\r\n     */\r\n    totalUnitCount?: number;\r\n    /**\r\n     * @member {Principal} [user]\r\n     */\r\n    user?: Principal;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing CartList.\r\n   */\r\n  export interface CartList {\r\n    /**\r\n     * @member {Cart[]} [carts]\r\n     */\r\n    carts?: Cart[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing CartModification.\r\n   */\r\n  export interface CartModification {\r\n    /**\r\n     * @member {boolean} [deliveryModeChanged]\r\n     */\r\n    deliveryModeChanged?: boolean;\r\n    /**\r\n     * @member {OrderEntry} [entry]\r\n     */\r\n    entry?: OrderEntry;\r\n    /**\r\n     * @member {number} [quantity]\r\n     */\r\n    quantity?: number;\r\n    /**\r\n     * @member {number} [quantityAdded]\r\n     */\r\n    quantityAdded?: number;\r\n    /**\r\n     * @member {string} [statusCode]\r\n     */\r\n    statusCode?: string;\r\n    /**\r\n     * @member {string} [statusMessage]\r\n     */\r\n    statusMessage?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing CategoryHierarchy.\r\n   */\r\n  export interface CategoryHierarchy {\r\n    /**\r\n     * @member {string} [id]\r\n     */\r\n    id?: string;\r\n    /**\r\n     * @member {Date} [lastModified]\r\n     */\r\n    lastModified?: Date;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {CategoryHierarchy[]} [subcategories]\r\n     */\r\n    subcategories?: CategoryHierarchy[];\r\n    /**\r\n     * @member {string} [url]\r\n     */\r\n    url?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing CatalogVersion.\r\n   */\r\n  export interface CatalogVersion {\r\n    /**\r\n     * @member {CategoryHierarchy[]} [categories]\r\n     */\r\n    categories?: CategoryHierarchy[];\r\n    /**\r\n     * @member {string} [id]\r\n     */\r\n    id?: string;\r\n    /**\r\n     * @member {Date} [lastModified]\r\n     */\r\n    lastModified?: Date;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {string} [url]\r\n     */\r\n    url?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Catalog.\r\n   */\r\n  export interface Catalog {\r\n    /**\r\n     * @member {CatalogVersion[]} [catalogVersions]\r\n     */\r\n    catalogVersions?: CatalogVersion[];\r\n    /**\r\n     * @member {string} [id]\r\n     */\r\n    id?: string;\r\n    /**\r\n     * @member {Date} [lastModified]\r\n     */\r\n    lastModified?: Date;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {string} [url]\r\n     */\r\n    url?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing CatalogList.\r\n   */\r\n  export interface CatalogList {\r\n    /**\r\n     * @member {Catalog[]} [catalogs]\r\n     */\r\n    catalogs?: Catalog[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ComponentIDList.\r\n   */\r\n  export interface ComponentIDList {\r\n    /**\r\n     * @member {string[]} [idList]\r\n     */\r\n    idList?: string[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ConsignmentEntry.\r\n   */\r\n  export interface ConsignmentEntry {\r\n    /**\r\n     * @member {OrderEntry} [orderEntry]\r\n     */\r\n    orderEntry?: OrderEntry;\r\n    /**\r\n     * @member {number} [quantity]\r\n     */\r\n    quantity?: number;\r\n    /**\r\n     * @member {number} [shippedQuantity]\r\n     */\r\n    shippedQuantity?: number;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Consignment.\r\n   */\r\n  export interface Consignment {\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {PointOfService} [deliveryPointOfService]\r\n     */\r\n    deliveryPointOfService?: PointOfService;\r\n    /**\r\n     * @member {ConsignmentEntry[]} [entries]\r\n     */\r\n    entries?: ConsignmentEntry[];\r\n    /**\r\n     * @member {Address} [shippingAddress]\r\n     */\r\n    shippingAddress?: Address;\r\n    /**\r\n     * @member {string} [status]\r\n     */\r\n    status?: string;\r\n    /**\r\n     * @member {Date} [statusDate]\r\n     */\r\n    statusDate?: Date;\r\n    /**\r\n     * @member {string} [trackingID]\r\n     */\r\n    trackingID?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing CountryList.\r\n   */\r\n  export interface CountryList {\r\n    /**\r\n     * @member {Country[]} [countries]\r\n     */\r\n    countries?: Country[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing CurrencyList.\r\n   */\r\n  export interface CurrencyList {\r\n    /**\r\n     * @member {Currency[]} [currencies]\r\n     */\r\n    currencies?: Currency[];\r\n  }\r\n\r\n  /**\r\n   * An interface representing CustomerCoupon\r\n   */\r\n  export interface CustomerCoupon {\r\n    /**\r\n     * @member {string} [couponId]\r\n     */\r\n    couponId?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {string} [startDate]\r\n     */\r\n    startDate?: string;\r\n    /**\r\n     * @member {string} [endDate]\r\n     */\r\n    endDate?: string;\r\n    /**\r\n     * @member {string} [endDate]\r\n     */\r\n    status?: string;\r\n    /**\r\n     * @member {string} [description]\r\n     */\r\n    description?: string;\r\n    /**\r\n     * @member {boolean} [notificationOn]\r\n     */\r\n    notificationOn?: boolean;\r\n    /**\r\n     * @member {boolean} [allProductsApplicable]\r\n     */\r\n    allProductsApplicable?: boolean;\r\n  }\r\n\r\n  /**\r\n   * An interface representing CustomerCouponSearchResult\r\n   */\r\n  export interface CustomerCouponSearchResult {\r\n    /**\r\n     * @member {CustomerCoupon[]} [coupons]\r\n     */\r\n    coupons?: CustomerCoupon[];\r\n    /**\r\n     * @member {Sort[]} [sorts]\r\n     */\r\n    sorts?: Sort[];\r\n    /**\r\n     * @member {Pagination} [pagination]\r\n     */\r\n    pagination?: Pagination;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing DeliveryModeList.\r\n   */\r\n  export interface DeliveryModeList {\r\n    /**\r\n     * @member {DeliveryMode[]} [deliveryModes]\r\n     */\r\n    deliveryModes?: DeliveryMode[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing FacetValue.\r\n   */\r\n  export interface FacetValue {\r\n    /**\r\n     * @member {number} [count]\r\n     */\r\n    count?: number;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {SearchState} [query]\r\n     */\r\n    query?: SearchState;\r\n    /**\r\n     * @member {boolean} [selected]\r\n     */\r\n    selected?: boolean;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Facet.\r\n   */\r\n  export interface Facet {\r\n    /**\r\n     * @member {boolean} [category]\r\n     */\r\n    category?: boolean;\r\n    /**\r\n     * @member {boolean} [multiSelect]\r\n     */\r\n    multiSelect?: boolean;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {number} [priority]\r\n     */\r\n    priority?: number;\r\n    /**\r\n     * @member {FacetValue[]} [topValues]\r\n     */\r\n    topValues?: FacetValue[];\r\n    /**\r\n     * @member {FacetValue[]} [values]\r\n     */\r\n    values?: FacetValue[];\r\n    /**\r\n     * @member {boolean} [visible]\r\n     */\r\n    visible?: boolean;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing LanguageList.\r\n   */\r\n  export interface LanguageList {\r\n    /**\r\n     * @member {Language[]} [languages]\r\n     */\r\n    languages?: Language[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Pagination.\r\n   * Pagination info\r\n   *\r\n   */\r\n  export interface Pagination {\r\n    /**\r\n     * @member {number} [count] Number of elements on this page\r\n     */\r\n    count?: number;\r\n    /**\r\n     * @member {number} [page] Current page number\r\n     */\r\n    page?: number;\r\n    /**\r\n     * @member {number} [totalCount] Total number of elements\r\n     */\r\n    totalCount?: number;\r\n    /**\r\n     * @member {number} [totalPages] Total number of pages\r\n     */\r\n    totalPages?: number;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Sort.\r\n   * Sort option\r\n   *\r\n   */\r\n  export interface Sort {\r\n    /**\r\n     * @member {boolean} [asc]\r\n     */\r\n    asc?: boolean;\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ListAdaptedComponents.\r\n   */\r\n  export interface ListAdaptedComponents {\r\n    /**\r\n     * @member {any[]} [components]\r\n     */\r\n    components?: any[];\r\n    /**\r\n     * @member {Pagination} [pagination]\r\n     */\r\n    pagination?: Pagination;\r\n    /**\r\n     * @member {Sort[]} [sorts]\r\n     */\r\n    sorts?: Sort[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing MemberList.\r\n   */\r\n  export interface MemberList {\r\n    /**\r\n     * @member {Principal[]} [members]\r\n     */\r\n    members?: Principal[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing OrderEntryList.\r\n   */\r\n  export interface OrderEntryList {\r\n    /**\r\n     * @member {OrderEntry[]} [orderEntries]\r\n     */\r\n    orderEntries?: OrderEntry[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing OrderHistory.\r\n   */\r\n  export interface OrderHistory {\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {string} [guid]\r\n     */\r\n    guid?: string;\r\n    /**\r\n     * @member {Date} [placed]\r\n     */\r\n    placed?: Date;\r\n    /**\r\n     * @member {string} [status]\r\n     */\r\n    status?: string;\r\n    /**\r\n     * @member {string} [statusDisplay]\r\n     */\r\n    statusDisplay?: string;\r\n    /**\r\n     * @member {Price} [total]\r\n     */\r\n    total?: Price;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing PaginationModel.\r\n   */\r\n  export interface PaginationModel {\r\n    /**\r\n     * @member {number} [currentPage]\r\n     */\r\n    currentPage?: number;\r\n    /**\r\n     * @member {number} [pageSize]\r\n     */\r\n    pageSize?: number;\r\n    /**\r\n     * @member {string} [sort]\r\n     */\r\n    sort?: string;\r\n    /**\r\n     * @member {number} [totalPages]\r\n     */\r\n    totalPages?: number;\r\n    /**\r\n     * @member {number} [totalResults]\r\n     */\r\n    totalResults?: number;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing SortModel.\r\n   */\r\n  export interface SortModel {\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {boolean} [selected]\r\n     */\r\n    selected?: boolean;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing OrderHistoryList.\r\n   */\r\n  export interface OrderHistoryList {\r\n    /**\r\n     * @member {OrderHistory[]} [orders]\r\n     */\r\n    orders?: OrderHistory[];\r\n    /**\r\n     * @member {PaginationModel} [pagination]\r\n     */\r\n    pagination?: PaginationModel;\r\n    /**\r\n     * @member {SortModel[]} [sorts]\r\n     */\r\n    sorts?: SortModel[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing OrderStatusUpdateElement.\r\n   */\r\n  export interface OrderStatusUpdateElement {\r\n    /**\r\n     * @member {string} [baseSiteId]\r\n     */\r\n    baseSiteId?: string;\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {string} [status]\r\n     */\r\n    status?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing OrderStatusUpdateElementList.\r\n   */\r\n  export interface OrderStatusUpdateElementList {\r\n    /**\r\n     * @member {OrderStatusUpdateElement[]} [orderStatusUpdateElements]\r\n     */\r\n    orderStatusUpdateElements?: OrderStatusUpdateElement[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Order.\r\n   */\r\n  export interface Order {\r\n    /**\r\n     * @member {PromotionResult[]} [appliedOrderPromotions]\r\n     */\r\n    appliedOrderPromotions?: PromotionResult[];\r\n    /**\r\n     * @member {PromotionResult[]} [appliedProductPromotions]\r\n     */\r\n    appliedProductPromotions?: PromotionResult[];\r\n    /**\r\n     * @member {Voucher[]} [appliedVouchers]\r\n     */\r\n    appliedVouchers?: Voucher[];\r\n    /**\r\n     * @member {boolean} [calculated]\r\n     */\r\n    calculated?: boolean;\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {Consignment[]} [consignments]\r\n     */\r\n    consignments?: Consignment[];\r\n    /**\r\n     * @member {Date} [created]\r\n     */\r\n    created?: Date;\r\n    /**\r\n     * @member {Address} [deliveryAddress]\r\n     */\r\n    deliveryAddress?: Address;\r\n    /**\r\n     * @member {Price} [deliveryCost]\r\n     */\r\n    deliveryCost?: Price;\r\n    /**\r\n     * @member {number} [deliveryItemsQuantity]\r\n     */\r\n    deliveryItemsQuantity?: number;\r\n    /**\r\n     * @member {DeliveryMode} [deliveryMode]\r\n     */\r\n    deliveryMode?: DeliveryMode;\r\n    /**\r\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\r\n     */\r\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\r\n    /**\r\n     * @member {string} [deliveryStatus]\r\n     */\r\n    deliveryStatus?: string;\r\n    /**\r\n     * @member {string} [deliveryStatusDisplay]\r\n     */\r\n    deliveryStatusDisplay?: string;\r\n    /**\r\n     * @member {OrderEntry[]} [entries]\r\n     */\r\n    entries?: OrderEntry[];\r\n    /**\r\n     * @member {boolean} [guestCustomer]\r\n     */\r\n    guestCustomer?: boolean;\r\n    /**\r\n     * @member {string} [guid]\r\n     */\r\n    guid?: string;\r\n    /**\r\n     * @member {boolean} [net]\r\n     */\r\n    net?: boolean;\r\n    /**\r\n     * @member {Price} [orderDiscounts]\r\n     */\r\n    orderDiscounts?: Price;\r\n    /**\r\n     * @member {PaymentDetails} [paymentInfo]\r\n     */\r\n    paymentInfo?: PaymentDetails;\r\n    /**\r\n     * @member {number} [pickupItemsQuantity]\r\n     */\r\n    pickupItemsQuantity?: number;\r\n    /**\r\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\r\n     */\r\n    pickupOrderGroups?: PickupOrderEntryGroup[];\r\n    /**\r\n     * @member {Price} [productDiscounts]\r\n     */\r\n    productDiscounts?: Price;\r\n    /**\r\n     * @member {string} [site]\r\n     */\r\n    site?: string;\r\n    /**\r\n     * @member {string} [status]\r\n     */\r\n    status?: string;\r\n    /**\r\n     * @member {string} [statusDisplay]\r\n     */\r\n    statusDisplay?: string;\r\n    /**\r\n     * @member {string} [store]\r\n     */\r\n    store?: string;\r\n    /**\r\n     * @member {Price} [subTotal]\r\n     */\r\n    subTotal?: Price;\r\n    /**\r\n     * @member {Price} [totalDiscounts]\r\n     */\r\n    totalDiscounts?: Price;\r\n    /**\r\n     * @member {number} [totalItems]\r\n     */\r\n    totalItems?: number;\r\n    /**\r\n     * @member {Price} [totalPrice]\r\n     */\r\n    totalPrice?: Price;\r\n    /**\r\n     * @member {Price} [totalPriceWithTax]\r\n     */\r\n    totalPriceWithTax?: Price;\r\n    /**\r\n     * @member {Price} [totalTax]\r\n     */\r\n    totalTax?: Price;\r\n    /**\r\n     * @member {OrderEntry[]} [unconsignedEntries]\r\n     */\r\n    unconsignedEntries?: OrderEntry[];\r\n    /**\r\n     * @member {Principal} [user]\r\n     */\r\n    user?: Principal;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ReturnRequest.\r\n   */\r\n  export interface ReturnRequest {\r\n    /**\r\n     * @member {boolean} [cancellable]\r\n     */\r\n    cancellable?: boolean;\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {Date} [creationTime]\r\n     */\r\n    creationTime?: Date;\r\n    /**\r\n     * @member {Price} [deliveryCost]\r\n     */\r\n    deliveryCost?: Price;\r\n    /**\r\n     * @member {order} [order]\r\n     */\r\n    order?: Order;\r\n    /**\r\n     * @member {boolean} [refundDeliveryCost]\r\n     */\r\n    refundDeliveryCost?: boolean;\r\n    /**\r\n     * @member {ReturnRequestEntry[]} [returnEntries]\r\n     */\r\n    returnEntries?: ReturnRequestEntry[];\r\n    /**\r\n     * @member {string} [returnLabelDownloadUrl]\r\n     */\r\n    returnLabelDownloadUrl?: string;\r\n    /**\r\n     * @member {string} [rma]\r\n     */\r\n    rma?: string;\r\n    /**\r\n     * @member {string} [status]\r\n     */\r\n    status?: string;\r\n    /**\r\n     * @member {Price} [subTotal]\r\n     */\r\n    subTotal?: Price;\r\n    /**\r\n     * @member {Price} [totalPrice]\r\n     */\r\n    totalPrice?: Price;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ReturnRequestEntry.\r\n   */\r\n  export interface ReturnRequestEntry {\r\n    /**\r\n     * @member {OrderEntry} [orderEntry]\r\n     */\r\n    orderEntry?: OrderEntry;\r\n    /**\r\n     * @member {number} [expectedQuantity]\r\n     */\r\n    expectedQuantity?: number;\r\n    /**\r\n     * @member {Price} [refundAmount]\r\n     */\r\n    refundAmount?: Price;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing PaymentDetailsList.\r\n   */\r\n  export interface PaymentDetailsList {\r\n    /**\r\n     * @member {PaymentDetails[]} [payments]\r\n     */\r\n    payments?: PaymentDetails[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing PointOfServiceStock.\r\n   */\r\n  export interface PointOfServiceStock {\r\n    /**\r\n     * @member {Address} [address]\r\n     */\r\n    address?: Address;\r\n    /**\r\n     * @member {string} [description]\r\n     */\r\n    description?: string;\r\n    /**\r\n     * @member {string} [displayName]\r\n     */\r\n    displayName?: string;\r\n    /**\r\n     * @member {number} [distanceKm]\r\n     */\r\n    distanceKm?: number;\r\n    /**\r\n     * @member {{ [propertyName: string]: string }} [features]\r\n     */\r\n    features?: { [propertyName: string]: string };\r\n    /**\r\n     * @member {string} [formattedDistance]\r\n     */\r\n    formattedDistance?: string;\r\n    /**\r\n     * @member {GeoPoint} [geoPoint]\r\n     */\r\n    geoPoint?: GeoPoint;\r\n    /**\r\n     * @member {Image} [mapIcon]\r\n     */\r\n    mapIcon?: Image;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {OpeningSchedule} [openingHours]\r\n     */\r\n    openingHours?: OpeningSchedule;\r\n    /**\r\n     * @member {Stock} [stockInfo]\r\n     */\r\n    stockInfo?: Stock;\r\n    /**\r\n     * @member {string} [storeContent]\r\n     */\r\n    storeContent?: string;\r\n    /**\r\n     * @member {Image[]} [storeImages]\r\n     */\r\n    storeImages?: Image[];\r\n    /**\r\n     * @member {string} [url]\r\n     */\r\n    url?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ProductExpressUpdateElement.\r\n   */\r\n  export interface ProductExpressUpdateElement {\r\n    /**\r\n     * @member {string} [catalogId]\r\n     */\r\n    catalogId?: string;\r\n    /**\r\n     * @member {string} [catalogVersion]\r\n     */\r\n    catalogVersion?: string;\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ProductExpressUpdateElementList.\r\n   */\r\n  export interface ProductExpressUpdateElementList {\r\n    /**\r\n     * @member {ProductExpressUpdateElement[]} [productExpressUpdateElements]\r\n     */\r\n    productExpressUpdateElements?: ProductExpressUpdateElement[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ProductList.\r\n   */\r\n  export interface ProductList {\r\n    /**\r\n     * @member {string} [catalog]\r\n     */\r\n    catalog?: string;\r\n    /**\r\n     * @member {number} [currentPage]\r\n     */\r\n    currentPage?: number;\r\n    /**\r\n     * @member {Product[]} [products]\r\n     */\r\n    products?: Product[];\r\n    /**\r\n     * @member {number} [totalPageCount]\r\n     */\r\n    totalPageCount?: number;\r\n    /**\r\n     * @member {number} [totalProductCount]\r\n     */\r\n    totalProductCount?: number;\r\n    /**\r\n     * @member {string} [version]\r\n     */\r\n    version?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ProductReferenceList.\r\n   */\r\n  export interface ProductReferenceList {\r\n    /**\r\n     * @member {ProductReference[]} [references]\r\n     */\r\n    references?: ProductReference[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing SpellingSuggestion.\r\n   */\r\n  export interface SpellingSuggestion {\r\n    /**\r\n     * @member {string} [query]\r\n     */\r\n    query?: string;\r\n    /**\r\n     * @member {string} [suggestion]\r\n     */\r\n    suggestion?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ProductSearchPage.\r\n   */\r\n  export interface ProductSearchPage {\r\n    /**\r\n     * @member {Breadcrumb[]} [breadcrumbs]\r\n     */\r\n    breadcrumbs?: Breadcrumb[];\r\n    /**\r\n     * @member {string} [categoryCode]\r\n     */\r\n    categoryCode?: string;\r\n    /**\r\n     * @member {SearchState} [currentQuery]\r\n     */\r\n    currentQuery?: SearchState;\r\n    /**\r\n     * @member {Facet[]} [facets]\r\n     */\r\n    facets?: Facet[];\r\n    /**\r\n     * @member {string} [freeTextSearch]\r\n     */\r\n    freeTextSearch?: string;\r\n    /**\r\n     * @member {string} [keywordRedirectUrl]\r\n     */\r\n    keywordRedirectUrl?: string;\r\n    /**\r\n     * @member {PaginationModel} [pagination]\r\n     */\r\n    pagination?: PaginationModel;\r\n    /**\r\n     * @member {Product[]} [products]\r\n     */\r\n    products?: Product[];\r\n    /**\r\n     * @member {SortModel[]} [sorts]\r\n     */\r\n    sorts?: SortModel[];\r\n    /**\r\n     * @member {SpellingSuggestion} [spellingSuggestion]\r\n     */\r\n    spellingSuggestion?: SpellingSuggestion;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing PromotionList.\r\n   */\r\n  export interface PromotionList {\r\n    /**\r\n     * @member {Promotion[]} [promotions]\r\n     */\r\n    promotions?: Promotion[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing PromotionResultList.\r\n   */\r\n  export interface PromotionResultList {\r\n    /**\r\n     * @member {PromotionResult[]} [promotions]\r\n     */\r\n    promotions?: PromotionResult[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing ReviewList.\r\n   */\r\n  export interface ReviewList {\r\n    /**\r\n     * @member {Review[]} [reviews]\r\n     */\r\n    reviews?: Review[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing SaveCartResult.\r\n   */\r\n  export interface SaveCartResult {\r\n    /**\r\n     * @member {Cart} [savedCartData]\r\n     */\r\n    savedCartData?: Cart;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing StoreFinderSearchPage.\r\n   */\r\n  export interface StoreFinderSearchPage {\r\n    /**\r\n     * @member {number} [boundEastLongitude]\r\n     */\r\n    boundEastLongitude?: number;\r\n    /**\r\n     * @member {number} [boundNorthLatitude]\r\n     */\r\n    boundNorthLatitude?: number;\r\n    /**\r\n     * @member {number} [boundSouthLatitude]\r\n     */\r\n    boundSouthLatitude?: number;\r\n    /**\r\n     * @member {number} [boundWestLongitude]\r\n     */\r\n    boundWestLongitude?: number;\r\n    /**\r\n     * @member {string} [locationText]\r\n     */\r\n    locationText?: string;\r\n    /**\r\n     * @member {PaginationModel} [pagination]\r\n     */\r\n    pagination?: PaginationModel;\r\n    /**\r\n     * @member {SortModel[]} [sorts]\r\n     */\r\n    sorts?: SortModel[];\r\n    /**\r\n     * @member {number} [sourceLatitude]\r\n     */\r\n    sourceLatitude?: number;\r\n    /**\r\n     * @member {number} [sourceLongitude]\r\n     */\r\n    sourceLongitude?: number;\r\n    /**\r\n     * @member {PointOfService[]} [stores]\r\n     */\r\n    stores?: PointOfService[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing StoreFinderStockSearchPage.\r\n   */\r\n  export interface StoreFinderStockSearchPage {\r\n    /**\r\n     * @member {number} [boundEastLongitude]\r\n     */\r\n    boundEastLongitude?: number;\r\n    /**\r\n     * @member {number} [boundNorthLatitude]\r\n     */\r\n    boundNorthLatitude?: number;\r\n    /**\r\n     * @member {number} [boundSouthLatitude]\r\n     */\r\n    boundSouthLatitude?: number;\r\n    /**\r\n     * @member {number} [boundWestLongitude]\r\n     */\r\n    boundWestLongitude?: number;\r\n    /**\r\n     * @member {string} [locationText]\r\n     */\r\n    locationText?: string;\r\n    /**\r\n     * @member {PaginationModel} [pagination]\r\n     */\r\n    pagination?: PaginationModel;\r\n    /**\r\n     * @member {Product} [product]\r\n     */\r\n    product?: Product;\r\n    /**\r\n     * @member {SortModel[]} [sorts]\r\n     */\r\n    sorts?: SortModel[];\r\n    /**\r\n     * @member {number} [sourceLatitude]\r\n     */\r\n    sourceLatitude?: number;\r\n    /**\r\n     * @member {number} [sourceLongitude]\r\n     */\r\n    sourceLongitude?: number;\r\n    /**\r\n     * @member {PointOfServiceStock[]} [stores]\r\n     */\r\n    stores?: PointOfServiceStock[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Suggestion.\r\n   */\r\n  export interface Suggestion {\r\n    /**\r\n     * @member {string} [value]\r\n     */\r\n    value?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing SuggestionList.\r\n   */\r\n  export interface SuggestionList {\r\n    /**\r\n     * @member {Suggestion[]} [suggestions]\r\n     */\r\n    suggestions?: Suggestion[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing Title.\r\n   */\r\n  export interface Title {\r\n    /**\r\n     * @member {string} [code]\r\n     */\r\n    code?: string;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing TitleList.\r\n   */\r\n  export interface TitleList {\r\n    /**\r\n     * @member {Title[]} [titles]\r\n     */\r\n    titles?: Title[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing UserGroup.\r\n   */\r\n  export interface UserGroup {\r\n    /**\r\n     * @member {Principal[]} [members]\r\n     */\r\n    members?: Principal[];\r\n    /**\r\n     * @member {number} [membersCount]\r\n     */\r\n    membersCount?: number;\r\n    /**\r\n     * @member {string} [name]\r\n     */\r\n    name?: string;\r\n    /**\r\n     * @member {UserGroup[]} [subGroups]\r\n     */\r\n    subGroups?: UserGroup[];\r\n    /**\r\n     * @member {string} [uid]\r\n     */\r\n    uid?: string;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing UserGroupList.\r\n   */\r\n  export interface UserGroupList {\r\n    /**\r\n     * @member {number} [currentPage]\r\n     */\r\n    currentPage?: number;\r\n    /**\r\n     * @member {number} [numberOfPages]\r\n     */\r\n    numberOfPages?: number;\r\n    /**\r\n     * @member {number} [pageSize]\r\n     */\r\n    pageSize?: number;\r\n    /**\r\n     * @member {number} [totalNumber]\r\n     */\r\n    totalNumber?: number;\r\n    /**\r\n     * @member {UserGroup[]} [userGroups]\r\n     */\r\n    userGroups?: UserGroup[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing UserSignUp.\r\n   */\r\n  export interface UserSignUp {\r\n    /**\r\n     * @member {string} [firstName]\r\n     */\r\n    firstName?: string;\r\n    /**\r\n     * @member {string} [lastName]\r\n     */\r\n    lastName?: string;\r\n    /**\r\n     * @member {string} [password]\r\n     */\r\n    password?: string;\r\n    /**\r\n     * @member {string} [titleCode]\r\n     */\r\n    titleCode?: string;\r\n    /**\r\n     * @member {string} [uid]\r\n     */\r\n    uid?: string;\r\n  }\r\n\r\n  export interface StoreCount {\r\n    count?: number;\r\n    isoCode?: string;\r\n    name?: string;\r\n    type?: string;\r\n  }\r\n\r\n  export interface StoreCountList {\r\n    countriesAndRegionsStoreCount?: StoreCount[];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * An interface representing VoucherList.\r\n   */\r\n  export interface VoucherList {\r\n    /**\r\n     * @member {Voucher[]} [vouchers]\r\n     */\r\n    vouchers?: Voucher[];\r\n  }\r\n\r\n  /**\r\n   * Defines values for PriceType.\r\n   * Possible values include: 'BUY', 'FROM'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: PriceType = <PriceType>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum PriceType {\r\n    BUY = 'BUY',\r\n    FROM = 'FROM',\r\n  }\r\n\r\n  /**\r\n   * Defines values for ImageType.\r\n   * Possible values include: 'PRIMARY', 'GALLERY'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: ImageType = <ImageType>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum ImageType {\r\n    PRIMARY = 'PRIMARY',\r\n    GALLERY = 'GALLERY',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields = <Fields>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields1.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields1 = <Fields1>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields1 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields2.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields2 = <Fields2>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields2 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields3.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields3 = <Fields3>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields3 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields4.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields4 = <Fields4>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields4 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields5.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields5 = <Fields5>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields5 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields6.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields6 = <Fields6>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields6 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for PageType.\r\n   * Possible values include: 'ContentPage', 'ProductPage', 'CategoryPage',\r\n   * 'CatalogPage'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: PageType = <PageType>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum PageType {\r\n    CONTENT_PAGE = 'ContentPage',\r\n    PRODUCT_PAGE = 'ProductPage',\r\n    CATEGORY_PAGE = 'CategoryPage',\r\n    CATALOG_PAGE = 'CatalogPage',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields7.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields7 = <Fields7>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields7 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields8.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields8 = <Fields8>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields8 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields9.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields9 = <Fields9>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields9 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields10.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields10 = <Fields10>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields10 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields11.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields11 = <Fields11>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields11 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields12.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields12 = <Fields12>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields12 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields13.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields13 = <Fields13>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields13 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields14.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields14 = <Fields14>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields14 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields15.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields15 = <Fields15>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields15 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields16.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields16 = <Fields16>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields16 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for SortEnum.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: SortEnum = <SortEnum>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum SortEnum {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields17.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields17 = <Fields17>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields17 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields18.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields18 = <Fields18>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields18 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields19.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields19 = <Fields19>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields19 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields20.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields20 = <Fields20>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields20 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields21.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields21 = <Fields21>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields21 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields22.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields22 = <Fields22>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields22 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields23.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields23 = <Fields23>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields23 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields24.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields24 = <Fields24>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields24 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields25.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields25 = <Fields25>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields25 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields26.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields26 = <Fields26>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields26 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields27.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields27 = <Fields27>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields27 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields28.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields28 = <Fields28>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields28 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields29.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields29 = <Fields29>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields29 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields30.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields30 = <Fields30>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields30 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields31.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields31 = <Fields31>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields31 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields32.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields32 = <Fields32>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields32 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields33.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields33 = <Fields33>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields33 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields34.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields34 = <Fields34>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields34 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields35.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields35 = <Fields35>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields35 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields36.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields36 = <Fields36>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields36 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields37.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields37 = <Fields37>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields37 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields38.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields38 = <Fields38>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields38 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields39.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields39 = <Fields39>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields39 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields40.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields40 = <Fields40>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields40 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields41.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields41 = <Fields41>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields41 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields42.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields42 = <Fields42>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields42 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields43.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields43 = <Fields43>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields43 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields44.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields44 = <Fields44>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields44 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields45.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields45 = <Fields45>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields45 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields46.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields46 = <Fields46>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields46 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields47.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields47 = <Fields47>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields47 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields48.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields48 = <Fields48>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields48 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields49.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields49 = <Fields49>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields49 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields50.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields50 = <Fields50>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields50 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields51.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields51 = <Fields51>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields51 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields52.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields52 = <Fields52>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields52 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields53.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields53 = <Fields53>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields53 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields54.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields54 = <Fields54>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields54 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields55.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields55 = <Fields55>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields55 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields56.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields56 = <Fields56>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields56 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields57.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields57 = <Fields57>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields57 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields58.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields58 = <Fields58>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields58 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields59.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields59 = <Fields59>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields59 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields60.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields60 = <Fields60>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields60 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Fields61.\r\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Fields61 = <Fields61>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Fields61 {\r\n    BASIC = 'BASIC',\r\n    DEFAULT = 'DEFAULT',\r\n    FULL = 'FULL',\r\n  }\r\n\r\n  /**\r\n   * Defines values for Type.\r\n   * Possible values include: 'all', 'product', 'order'\r\n   * There could be more values for this enum apart from the ones defined here.If\r\n   * you want to set a value that is not from the known values then you can do\r\n   * the following:\r\n   * let param: Type = <Type>\"someUnknownValueThatWillStillBeValid\";\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  export enum Type {\r\n    All = 'all',\r\n    Product = 'product',\r\n    Order = 'order',\r\n  }\r\n\r\n  export interface AnonymousConsent {\r\n    templateCode?: string;\r\n    version?: number;\r\n    consentState?: CONSENT_STATUS;\r\n  }\r\n\r\n  export enum CONSENT_STATUS {\r\n    ANONYMOUS_CONSENT_GIVEN = 'GIVEN',\r\n    ANONYMOUS_CONSENT_WITHDRAWN = 'WITHDRAWN',\r\n  }\r\n\r\n  export interface ConsentTemplate {\r\n    id?: string;\r\n    name?: string;\r\n    description?: string;\r\n    version?: number;\r\n    currentConsent?: Consent;\r\n  }\r\n\r\n  export interface Consent {\r\n    code?: string;\r\n    consentGivenDate?: Date;\r\n    consentWithdrawnDate?: Date;\r\n  }\r\n\r\n  export interface ConsentTemplateList {\r\n    consentTemplates?: ConsentTemplate[];\r\n  }\r\n\r\n  export interface BaseSites {\r\n    baseSites?: BaseSite[];\r\n  }\r\n\r\n  export interface BaseSite {\r\n    channel?: string;\r\n    defaultLanguage?: Language;\r\n    defaultPreviewCatalogId?: string;\r\n    defaultPreviewCategoryCode?: string;\r\n    defaultPreviewProductCode?: string;\r\n    locale?: string;\r\n    name?: string;\r\n    theme?: string;\r\n    uid?: string;\r\n    stores?: BaseStore[];\r\n    urlPatterns?: string[];\r\n    urlEncodingAttributes?: string[];\r\n  }\r\n\r\n  export interface BaseStore {\r\n    currencies?: Currency[];\r\n    defaultCurrency?: Currency;\r\n    languages?: Language[];\r\n    defaultLanguage?: Language;\r\n  }\r\n\r\n  export interface ProductInterestEntry {\r\n    interestType?: NotificationType;\r\n    dateAdded?: string;\r\n    expirationDate?: string;\r\n  }\r\n\r\n  export interface ProductInterestEntryRelation {\r\n    product?: Product;\r\n    productInterestEntry?: ProductInterestEntry[];\r\n  }\r\n\r\n  export interface ProductInterestSearchResult {\r\n    results?: ProductInterestEntryRelation[];\r\n    sorts?: Sort[];\r\n    pagination?: Pagination;\r\n  }\r\n\r\n  export enum NotificationType {\r\n    BACK_IN_STOCK = 'BACK_IN_STOCK',\r\n  }\r\n}\r\n","import { InjectionToken, Provider } from '@angular/core';\n\nexport const ConfigValidatorToken = new InjectionToken(\n  'ConfigurationValidator'\n);\n\n/**\n * ConfigValidator is used to validate config and display warning messages in development mode.\n *\n * In case of failed validation, should return a string with error message.\n */\nexport type ConfigValidator = (config: any) => string | void;\n\n/**\n * Use to probide config validation at app bootstrap (when all config chunks are merged)\n *\n * @param configValidator\n */\nexport function provideConfigValidator(\n  configValidator: ConfigValidator\n): Provider {\n  return {\n    provide: ConfigValidatorToken,\n    useValue: configValidator,\n    multi: true,\n  };\n}\n\nexport function validateConfig(\n  config: any,\n  configValidators: ConfigValidator[]\n) {\n  for (const validate of configValidators) {\n    const warning = validate(config);\n    if (warning) {\n      console.warn(warning);\n    }\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\r\nimport { provideDefaultConfig } from '../config/config.module';\r\nimport { AsmOccModule } from './adapters/asm/asm-occ.module';\r\nimport { CartOccModule } from './adapters/cart/cart-occ.module';\r\nimport { CheckoutOccModule } from './adapters/checkout/checkout-occ.module';\r\nimport { CmsOccModule } from './adapters/cms/cms-occ.module';\r\nimport { ProductOccModule } from './adapters/product/product-occ.module';\r\nimport { SiteContextOccModule } from './adapters/site-context/site-context-occ.module';\r\nimport { StoreFinderOccModule } from './adapters/store-finder/store-finder-occ.module';\r\nimport { UserOccModule } from './adapters/user/user-occ.module';\r\nimport { OccConfigLoaderModule } from './config-loader/occ-config-loader.module';\r\nimport { defaultOccConfig } from './config/default-occ-config';\r\nimport { occConfigValidator } from './config/occ-config-validator';\r\nimport { WithCredentialsInterceptor } from './interceptors/with-credentials.interceptor';\r\n\r\n@NgModule({\r\n  imports: [\r\n    AsmOccModule,\r\n    CmsOccModule,\r\n    CartOccModule,\r\n    CheckoutOccModule,\r\n    ProductOccModule,\r\n    SiteContextOccModule,\r\n    StoreFinderOccModule,\r\n    UserOccModule,\r\n    OccConfigLoaderModule.forRoot(),\r\n  ],\r\n})\r\nexport class OccModule {\r\n  static forRoot(): ModuleWithProviders<OccModule> {\r\n    return {\r\n      ngModule: OccModule,\r\n      providers: [\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useExisting: WithCredentialsInterceptor,\r\n          multi: true,\r\n        },\r\n        provideDefaultConfig(defaultOccConfig),\r\n        provideConfigValidator(occConfigValidator),\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../config/occ-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoadingScopesService {\n  constructor(protected config: OccConfig) {}\n\n  /**\n   * Aims to expand scopes based on loading scopes config.\n   *\n   * I.e. if 'details' scope includes 'list' scope by configuration, it'll return ['details', 'list']\n   *\n   * If scope data overlaps with each other, the data should be merged in the order of scopes provided,\n   * i.e. the last scope is merged last, overwriting parts of the data already provided by preceding scope.\n   * It should apply also to implicit scopes (that are included by configuration).\n   *\n   * @param model\n   * @param scopes\n   */\n  expand(model: string, scopes: string[]): string[] {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n\n    if (scopesConfig) {\n      const expandedScopes = [...scopes];\n      let i = expandedScopes.length;\n\n      while (i > 0) {\n        i--;\n        const includedScopes =\n          scopesConfig[expandedScopes[i]] &&\n          scopesConfig[expandedScopes[i]].include;\n        if (includedScopes) {\n          for (const includedScope of includedScopes) {\n            if (!expandedScopes.includes(includedScope)) {\n              expandedScopes.splice(i, 0, includedScope);\n              i++;\n            }\n          }\n        }\n      }\n\n      return expandedScopes;\n    }\n\n    return scopes;\n  }\n\n  /**\n   * Return maxAge for product scope in milliseconds\n   *\n   * @param model\n   * @param scope\n   */\n  getMaxAge(model: string, scope: string): number {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n    return (scopesConfig[scope] && scopesConfig[scope].maxAge) * 1000 || 0;\n  }\n}\n","import { OccConfig } from '../../occ/config/occ-config';\r\nimport { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class AnonymousConsentsConfig extends OccConfig {\r\n  anonymousConsents?: {\r\n    /**\r\n     * Specify the consent template ID to be show on the registration page.\r\n     */\r\n    registerConsent?: string;\r\n    /**\r\n     * Show the legal description at the top of the anonymous consents dialog.\r\n     */\r\n    showLegalDescriptionInDialog?: boolean;\r\n    /**\r\n     * Specify the list of consent template IDs that are required and which can't be toggled off.\r\n     */\r\n    requiredConsents?: string[];\r\n    /**\r\n     * Consent management page configuration.\r\n     */\r\n    consentManagementPage?: {\r\n      /**\r\n       * Show all anonymous consents on the consent management page.\r\n       */\r\n      showAnonymousConsents?: boolean;\r\n      /**\r\n       * A list of consent template IDs that should be hidden on the consent management page.\r\n       */\r\n      hideConsents?: string[];\r\n    };\r\n  };\r\n}\r\n","import {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpResponse,\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { switchMap, take, tap, withLatestFrom } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/index';\r\nimport { AnonymousConsent, ANONYMOUS_CONSENT_STATUS } from '../../model/index';\r\nimport { OccEndpointsService } from '../../occ/index';\r\nimport { AnonymousConsentsConfig } from '../config/anonymous-consents-config';\r\nimport { AnonymousConsentsService } from '../facade/anonymous-consents.service';\r\n\r\nexport const ANONYMOUS_CONSENTS_HEADER = 'X-Anonymous-Consents';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AnonymousConsentsInterceptor implements HttpInterceptor {\r\n  constructor(\r\n    private anonymousConsentsService: AnonymousConsentsService,\r\n    private authService: AuthService,\r\n    private occEndpoints: OccEndpointsService,\r\n    private config: AnonymousConsentsConfig\r\n  ) {}\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    return this.anonymousConsentsService.getConsents().pipe(\r\n      take(1),\r\n      withLatestFrom(this.authService.isUserLoggedIn()),\r\n      switchMap(([consents, isUserLoggedIn]) => {\r\n        if (!this.isOccUrl(request.url)) {\r\n          return next.handle(request);\r\n        }\r\n\r\n        const clonedRequest = this.handleRequest(consents, request);\r\n        return next.handle(clonedRequest).pipe(\r\n          tap((event) => {\r\n            if (event instanceof HttpResponse) {\r\n              this.handleResponse(\r\n                isUserLoggedIn,\r\n                event.headers.get(ANONYMOUS_CONSENTS_HEADER),\r\n                consents\r\n              );\r\n            }\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  private handleResponse(\r\n    isUserLoggedIn: boolean,\r\n    newRawConsents: string,\r\n    previousConsents: AnonymousConsent[]\r\n  ): void {\r\n    if (!isUserLoggedIn && newRawConsents) {\r\n      let newConsents: AnonymousConsent[] = [];\r\n      newConsents = this.anonymousConsentsService.decodeAndDeserialize(\r\n        newRawConsents\r\n      );\r\n      newConsents = this.giveRequiredConsents(newConsents);\r\n\r\n      if (\r\n        this.anonymousConsentsService.consentsUpdated(\r\n          newConsents,\r\n          previousConsents\r\n        )\r\n      ) {\r\n        this.anonymousConsentsService.setConsents(newConsents);\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleRequest(\r\n    consents: AnonymousConsent[],\r\n    request: HttpRequest<any>\r\n  ): HttpRequest<any> {\r\n    if (!consents) {\r\n      return request;\r\n    }\r\n\r\n    const rawConsents = this.anonymousConsentsService.serializeAndEncode(\r\n      consents\r\n    );\r\n    return request.clone({\r\n      setHeaders: {\r\n        [ANONYMOUS_CONSENTS_HEADER]: rawConsents,\r\n      },\r\n    });\r\n  }\r\n\r\n  private isOccUrl(url: string): boolean {\r\n    return url.includes(this.occEndpoints.getBaseEndpoint());\r\n  }\r\n\r\n  private giveRequiredConsents(\r\n    consents: AnonymousConsent[]\r\n  ): AnonymousConsent[] {\r\n    const givenConsents = [...consents];\r\n\r\n    if (\r\n      Boolean(this.config.anonymousConsents) &&\r\n      Boolean(this.config.anonymousConsents.requiredConsents)\r\n    ) {\r\n      for (const consent of givenConsents) {\r\n        if (\r\n          this.config.anonymousConsents.requiredConsents.includes(\r\n            consent.templateCode\r\n          )\r\n        ) {\r\n          consent.consentState = ANONYMOUS_CONSENT_STATUS.GIVEN;\r\n        }\r\n      }\r\n    }\r\n    return givenConsents;\r\n  }\r\n}\r\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AnonymousConsentsInterceptor } from './anonymous-consents-interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AnonymousConsentsInterceptor,\n    multi: true,\n  },\n];\n","import { Observable, Subscriber, Subscription } from 'rxjs';\r\nimport { share } from 'rxjs/operators';\r\n\r\n// PRIVATE API\r\n\r\n/**\r\n * Allows for dynamic adding and removing source observables\r\n * and exposes them as one merged observable at a property `output$`.\r\n *\r\n * Thanks to the `share()` operator used inside, it subscribes to source observables\r\n * only when someone subscribes to it. And it unsubscribes from source observables\r\n * when the counter of consumers drops to 0.\r\n *\r\n * **To avoid memory leaks**, all manually added sources should be manually removed\r\n * when not plan to emit values anymore. In particular closed event sources won't be\r\n * automatically removed.\r\n */\r\nexport class MergingSubject<T> {\r\n  /**\r\n   * List of already added sources (but not removed yet)\r\n   */\r\n  private sources: Observable<T>[] = [];\r\n\r\n  /**\r\n   * For each source: it stores a subscription responsible for\r\n   * passing all values from source to the consumer\r\n   */\r\n  private subscriptionsToSources = new Map<Observable<T>, Subscription>();\r\n\r\n  /**\r\n   * Observable with all sources merged.\r\n   *\r\n   * Only after subscribing to it, under the hood it subscribes to the source observables.\r\n   * When the number of subscribers drops to 0, it unsubscribes from all source observables.\r\n   * But if later on something subscribes to it again, it subscribes to the source observables again.\r\n   *\r\n   * It multicasts the emissions for each subscriber.\r\n   */\r\n  readonly output$: Observable<T> = new Observable<T>((consumer) => {\r\n    // There can be only 0 or 1 consumer of this observable coming from the `share()` operator\r\n    // that is piped right after this observable.\r\n    // `share()` not only multicasts the results but also  When all end-subscribers unsubscribe from `share()` operator, it will unsubscribe\r\n    // from this observable (by the nature `refCount`-nature of the `share()` operator).\r\n\r\n    this.consumer = consumer;\r\n    this.bindAllSourcesToConsumer(consumer);\r\n\r\n    return () => {\r\n      this.consumer = null;\r\n      this.unbindAllSourcesFromConsumer();\r\n    };\r\n  }).pipe(share());\r\n\r\n  /**\r\n   * Reference to the subscriber coming from the `share()` operator piped to the `output$` observable.\r\n   * For more, see docs of the `output$` observable;\r\n   */\r\n  private consumer: Subscriber<any> = null;\r\n\r\n  /**\r\n   * Registers the given source to pass its values to the `output$` observable.\r\n   *\r\n   * It does nothing, when the source has been already added (but not removed yet).\r\n   */\r\n  add(source: Observable<T>): void {\r\n    if (this.has(source)) {\r\n      return;\r\n    }\r\n\r\n    if (this.consumer) {\r\n      this.bindSourceToConsumer(source, this.consumer);\r\n    }\r\n    this.sources.push(source);\r\n  }\r\n\r\n  /**\r\n   * Starts passing all values from already added sources to consumer\r\n   */\r\n  private bindAllSourcesToConsumer(consumer: Subscriber<T>) {\r\n    this.sources.forEach((source) =>\r\n      this.bindSourceToConsumer(source, consumer)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Stops passing all values from already added sources to consumer\r\n   * (if any consumer is active at the moment)\r\n   */\r\n  private unbindAllSourcesFromConsumer() {\r\n    this.sources.forEach((source) => this.unbindSourceFromConsumer(source));\r\n  }\r\n\r\n  /**\r\n   * Starts passing all values from a single source to consumer\r\n   */\r\n  private bindSourceToConsumer(source: Observable<T>, consumer: Subscriber<T>) {\r\n    const subscriptionToSource = source.subscribe((val) => consumer.next(val)); // passes all emissions from source to consumer\r\n    this.subscriptionsToSources.set(source, subscriptionToSource);\r\n  }\r\n\r\n  /**\r\n   * Stops passing all values from a single source to consumer\r\n   * (if any consumer is active at the moment)\r\n   */\r\n  private unbindSourceFromConsumer(source: Observable<T>) {\r\n    const subscriptionToSource = this.subscriptionsToSources.get(source);\r\n    if (subscriptionToSource !== undefined) {\r\n      subscriptionToSource.unsubscribe();\r\n      this.subscriptionsToSources.delete(source);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unregisters the given source so it stops passing its values to `output$` observable.\r\n   *\r\n   * Should be used when a source is no longer maintained **to avoid memory leaks**.\r\n   */\r\n  remove(source: Observable<T>): void {\r\n    // clear binding from source to consumer (if any consumer exists at the moment)\r\n    this.unbindSourceFromConsumer(source);\r\n\r\n    // remove source from array\r\n    let i: number;\r\n    if ((i = this.sources.findIndex((s) => s === source)) !== -1) {\r\n      this.sources.splice(i, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns whether the given source has been already addded\r\n   */\r\n  has(source: Observable<T>): boolean {\r\n    return this.sources.includes(source);\r\n  }\r\n}\r\n","import { Injectable, isDevMode, Type } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { MergingSubject } from './utils/merging-subject';\r\n\r\n/**\r\n * The object holds registered source observables as well as the merged result observable.\r\n */\r\ninterface EventMeta<T> {\r\n  /**\r\n   * Input subject used for dispatching occasional event (without registering a source)\r\n   */\r\n  inputSubject$: Subject<T>;\r\n\r\n  /**\r\n   * A custom subject that allows for dynamic adding and removing sources to be merged as an output\r\n   */\r\n  mergingSubject: MergingSubject<T>;\r\n}\r\n\r\n/**\r\n * A service to register and observe event sources. Events are driven by event types, which are class signatures\r\n * for the given event.\r\n *\r\n * It is possible to register multiple sources to a single event, even without\r\n * knowing as multiple decoupled features can attach sources to the same\r\n * event type.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class EventService {\r\n  /**\r\n   * The various events meta are collected in a map, stored by the event type class\r\n   */\r\n  private eventsMeta = new Map<Type<any>, EventMeta<any>>();\r\n\r\n  /**\r\n   * Register an event source for the given event type.\r\n   *\r\n   * CAUTION: To avoid memory leaks, the returned teardown function should be called\r\n   *  when the event source is no longer maintained by its creator\r\n   * (i.e. in `ngOnDestroy` if the event source was registered in the component).\r\n   *\r\n   * @param eventType the event type\r\n   * @param source$ an observable that represents the source\r\n   *\r\n   * @returns a teardown function which unregisters the given event source\r\n   */\r\n  register<T>(eventType: Type<T>, source$: Observable<T>): () => void {\r\n    const eventMeta = this.getEventMeta(eventType);\r\n    if (eventMeta.mergingSubject.has(source$)) {\r\n      if (isDevMode()) {\r\n        console.warn(\r\n          `EventService: the event source`,\r\n          source$,\r\n          `has been already registered for the type`,\r\n          eventType\r\n        );\r\n      }\r\n    } else {\r\n      eventMeta.mergingSubject.add(source$);\r\n    }\r\n\r\n    return () => eventMeta.mergingSubject.remove(source$);\r\n  }\r\n\r\n  /**\r\n   * Returns a stream of events for the given event type\r\n   * @param eventTypes event type\r\n   */\r\n  get<T>(eventType: Type<T>): Observable<T> {\r\n    let output$ = this.getEventMeta(eventType).mergingSubject.output$;\r\n    if (isDevMode()) {\r\n      output$ = this.getValidatedEventStream(output$, eventType);\r\n    }\r\n    return output$;\r\n  }\r\n\r\n  /**\r\n   * Dispatches an instance of an individual event.\r\n   */\r\n  dispatch(event: Object): void {\r\n    const eventType = event.constructor as Type<any>;\r\n    const inputSubject$ = this.getInputSubject(eventType);\r\n    inputSubject$.next(event);\r\n  }\r\n\r\n  /**\r\n   * Returns the input subject used to dispatch a single event.\r\n   * The subject is created on demand, when it's needed for the first time.\r\n   * @param eventType type of event\r\n   */\r\n  private getInputSubject<T>(eventType: Type<T>): Subject<T> {\r\n    const eventMeta = this.getEventMeta(eventType);\r\n\r\n    if (!eventMeta.inputSubject$) {\r\n      eventMeta.inputSubject$ = new Subject<any>();\r\n      this.register(eventType, eventMeta.inputSubject$);\r\n    }\r\n    return eventMeta.inputSubject$;\r\n  }\r\n\r\n  /**\r\n   * Returns the event meta object for the given event type\r\n   */\r\n  private getEventMeta<T>(eventType: Type<T>): EventMeta<T> {\r\n    if (isDevMode()) {\r\n      this.validateEventType(eventType);\r\n    }\r\n\r\n    if (!this.eventsMeta.get(eventType)) {\r\n      this.createEventMeta(eventType);\r\n    }\r\n    return this.eventsMeta.get(eventType);\r\n  }\r\n\r\n  /**\r\n   * Creates the event meta object for the given event type\r\n   */\r\n  private createEventMeta<T>(eventType: Type<T>): void {\r\n    this.eventsMeta.set(eventType, {\r\n      inputSubject$: null, // will be created lazily by the `dispatch` method\r\n      mergingSubject: new MergingSubject(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Checks if the event type is a valid type (is a class with constructor).\r\n   *\r\n   * Should be used only in dev mode.\r\n   */\r\n  private validateEventType<T>(eventType: Type<T>): void {\r\n    if (!eventType?.constructor) {\r\n      throw new Error(\r\n        `EventService:  ${eventType} is not a valid event type. Please provide a class reference.`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the given event source with runtime validation whether the emitted values are instances of given event type.\r\n   *\r\n   * Should be used only in dev mode.\r\n   */\r\n  private getValidatedEventStream<T>(\r\n    source$: Observable<T>,\r\n    eventType: Type<T>\r\n  ): Observable<T> {\r\n    return source$.pipe(\r\n      tap((event) => {\r\n        if (!(event instanceof eventType)) {\r\n          console.warn(\r\n            `EventService: The stream`,\r\n            source$,\r\n            `emitted the event`,\r\n            event,\r\n            `that is not an instance of the declared type`,\r\n            eventType.name\r\n          );\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Type } from '@angular/core';\r\n\r\n/**\r\n * Creates an instance of the given class and fills its properties with the given data.\r\n *\r\n * @param type reference to the class\r\n * @param data object with properties to be copied to the class\r\n */\r\nexport function createFrom<T>(type: Type<T>, data: T): T {\r\n  return Object.assign(new type(), data);\r\n}\r\n","import { Injectable, Type } from '@angular/core';\r\nimport { ofType } from '@ngrx/effects';\r\nimport { ActionsSubject } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { EventService } from '../../event/event.service';\r\nimport { createFrom } from '../../util/create-from';\r\nimport { ActionToEventMapping } from './action-to-event-mapping';\r\n\r\n/**\r\n * Registers streams of ngrx actions as events source streams\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class StateEventService {\r\n  constructor(\r\n    protected actionsSubject: ActionsSubject,\r\n    protected eventService: EventService\r\n  ) {}\r\n\r\n  /**\r\n   * Registers an event source stream of specific events\r\n   * mapped from a given action type.\r\n   *\r\n   * @param mapping mapping from action to event\r\n   *\r\n   * @returns a teardown function that unregisters the event source\r\n   */\r\n  register<T>(mapping: ActionToEventMapping<T>): () => void {\r\n    return this.eventService.register(\r\n      mapping.event,\r\n      this.getFromAction(mapping)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a stream of specific events mapped from a specific action.\r\n   * @param mapping mapping from action to event\r\n   */\r\n  protected getFromAction<T>(mapping: ActionToEventMapping<T>): Observable<T> {\r\n    return this.actionsSubject\r\n      .pipe(ofType(...[].concat(mapping.action)))\r\n      .pipe(\r\n        map((action: { type: string; payload: T }) =>\r\n          this.createEvent(action, mapping.event, mapping.factory)\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Creates an event instance for given class out from the action object.\r\n   * Unless the `factory` parameter is given, the action's `payload` is used\r\n   * as the argument for the event's constructor.\r\n   *\r\n   * @param action instance of an Action\r\n   * @param mapping mapping from action to event\r\n   * @param factory optional function getting an action instance and returning an event instance\r\n   *\r\n   * @returns instance of an Event\r\n   */\r\n  protected createEvent<T>(\r\n    action: { type: string; payload?: any },\r\n    eventType: Type<T>,\r\n    factory?: (action: any) => T\r\n  ): T {\r\n    return factory\r\n      ? factory(action)\r\n      : createFrom(eventType, action.payload ?? {});\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, Subscription } from 'rxjs';\r\nimport { map, tap, withLatestFrom } from 'rxjs/operators';\r\nimport { StorageSyncType } from '../../state/config/state-config';\r\nimport {\r\n  getStorage,\r\n  persistToStorage,\r\n  readFromStorage,\r\n} from '../../state/reducers/storage-sync.reducer';\r\nimport { WindowRef } from '../../window/window-ref';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class StatePersistenceService {\r\n  constructor(protected winRef: WindowRef) {}\r\n\r\n  /**\r\n   * Helper to synchronize state to more persistent storage (localStorage, sessionStorage).\r\n   * It is context aware, so you can keep different state for te same feature based on specified context.\r\n   *\r\n   * Eg. cart is valid only under the same base site. So you want to synchronize cart only with the same base site.\r\n   * Usage for that case: `syncWithStorage({ key: 'cart', state$: activeCartSelector$, context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]), onRead: (state) => setCorrectStateInStore(state) })`.\r\n   * Active cart for the `electronics` base site will be stored under `spartacus⚿electronics⚿cart` and for apparel under `spartacus⚿apparel⚿cart`.\r\n   *\r\n   * On each context change onRead function will be executed with state from storage provided as a parameter.\r\n   *\r\n   * Omitting context$ will trigger onRead only once at initialization.\r\n   *\r\n   * @param key Key to use in storage for the synchronized state. Should be unique for each feature.\r\n   * @param state$ State to be saved and later restored.\r\n   * @param context$ Context for state\r\n   * @param storageType Storage type to be used to persist state\r\n   * @param onRead Function to be executed on each storage read after context change\r\n   *\r\n   * @returns Subscriptions for reading/writing in storage on context/state change\r\n   */\r\n  syncWithStorage<T>({\r\n    key,\r\n    state$,\r\n    context$ = of(''),\r\n    storageType = StorageSyncType.LOCAL_STORAGE,\r\n    onRead = () => {},\r\n  }: {\r\n    key: string;\r\n    state$: Observable<T>;\r\n    context$?: Observable<string | Array<string>>;\r\n    storageType?: StorageSyncType;\r\n    onRead?: (stateFromStorage: T) => void;\r\n  }): Subscription {\r\n    const storage = getStorage(storageType, this.winRef);\r\n\r\n    const subscriptions = new Subscription();\r\n\r\n    // Do not change order of subscription! Read should happen before write on context change.\r\n    subscriptions.add(\r\n      context$\r\n        .pipe(\r\n          map((context) => {\r\n            return readFromStorage(\r\n              storage,\r\n              this.generateKeyWithContext(context, key)\r\n            ) as T;\r\n          }),\r\n          tap((state) => onRead(state))\r\n        )\r\n        .subscribe()\r\n    );\r\n\r\n    subscriptions.add(\r\n      state$.pipe(withLatestFrom(context$)).subscribe(([state, context]) => {\r\n        persistToStorage(\r\n          this.generateKeyWithContext(context, key),\r\n          state,\r\n          storage\r\n        );\r\n      })\r\n    );\r\n\r\n    return subscriptions;\r\n  }\r\n\r\n  protected generateKeyWithContext(\r\n    context: string | Array<string>,\r\n    key: string\r\n  ): string {\r\n    return `spartacus⚿${[].concat(context).join('⚿')}⚿${key}`;\r\n  }\r\n}\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport {\r\n  loaderErrorSelector,\r\n  loaderLoadingSelector,\r\n  loaderSuccessSelector,\r\n} from '../../../state/utils/loader/loader.selectors';\r\nimport { StateWithProcess } from '../process-state';\r\nimport { getProcessState } from './feature.selector';\r\n\r\nexport function getProcessStateFactory<T>(\r\n  processId: string\r\n): MemoizedSelector<StateWithProcess<T>, LoaderState<T>> {\r\n  return createSelector(getProcessState(), (entityState) =>\r\n    StateUtils.entityLoaderStateSelector(entityState, processId)\r\n  );\r\n}\r\n\r\nexport function getProcessLoadingFactory<T>(\r\n  processId: string\r\n): MemoizedSelector<StateWithProcess<T>, boolean> {\r\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\r\n    loaderLoadingSelector(loaderState)\r\n  );\r\n}\r\n\r\nexport function getProcessSuccessFactory<T>(\r\n  processId: string\r\n): MemoizedSelector<StateWithProcess<T>, boolean> {\r\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\r\n    loaderSuccessSelector(loaderState)\r\n  );\r\n}\r\n\r\nexport function getProcessErrorFactory<T>(\r\n  processId: string\r\n): MemoizedSelector<StateWithProcess<T>, boolean> {\r\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\r\n    loaderErrorSelector(loaderState)\r\n  );\r\n}\r\n","import { MemoizedSelector, createFeatureSelector } from '@ngrx/store';\n\nimport { StateWithProcess, PROCESS_FEATURE } from '../process-state';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\n\nexport function getProcessState<T>(): MemoizedSelector<\n  StateWithProcess<T>,\n  EntityLoaderState<T>\n> {\n  return createFeatureSelector<EntityLoaderState<T>>(PROCESS_FEATURE);\n}\n","import { EntityLoaderState } from '../../state/utils/entity-loader/entity-loader-state';\n\nexport const PROCESS_FEATURE = 'process';\n\nexport interface StateWithProcess<T> {\n  [PROCESS_FEATURE]: EntityLoaderState<T>;\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOAD_BILLING_COUNTRIES = '[User] Load Billing Countries';\nexport const LOAD_BILLING_COUNTRIES_FAIL = '[User] Load Billing Countries Fail';\nexport const LOAD_BILLING_COUNTRIES_SUCCESS =\n  '[User] Load Billing Countries Success';\n\nexport class LoadBillingCountries implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadBillingCountriesFail implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBillingCountriesSuccess implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport type BillingCountriesAction =\n  | LoadBillingCountries\n  | LoadBillingCountriesFail\n  | LoadBillingCountriesSuccess;\n","import { Action } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\n\nexport const LOAD_CONSIGNMENT_TRACKING = '[User] Load Consignment Tracking';\nexport const LOAD_CONSIGNMENT_TRACKING_FAIL =\n  '[User] Load Consignment Tracking Fail';\nexport const LOAD_CONSIGNMENT_TRACKING_SUCCESS =\n  '[User] Load Consignment Tracking Success';\nexport const CLEAR_CONSIGNMENT_TRACKING = '[User] Clear Consignment Tracking';\n\nexport class LoadConsignmentTracking implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING;\n  constructor(\n    public payload: {\n      userId?: string;\n      orderCode: string;\n      consignmentCode: string;\n    }\n  ) {}\n}\n\nexport class LoadConsignmentTrackingFail implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadConsignmentTrackingSuccess implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_SUCCESS;\n  constructor(public payload: ConsignmentTracking) {}\n}\n\nexport class ClearConsignmentTracking {\n  readonly type = CLEAR_CONSIGNMENT_TRACKING;\n  constructor() {}\n}\n\nexport type ConsignmentTrackingAction =\n  | LoadConsignmentTracking\n  | LoadConsignmentTrackingFail\n  | LoadConsignmentTrackingSuccess\n  | ClearConsignmentTracking;\n","import { Action } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\n\nexport const LOAD_DELIVERY_COUNTRIES = '[User] Load Delivery Countries';\nexport const LOAD_DELIVERY_COUNTRIES_FAIL =\n  '[User] Load Delivery Countries Fail';\nexport const LOAD_DELIVERY_COUNTRIES_SUCCESS =\n  '[User] Load Delivery Countries Success';\n\nexport class LoadDeliveryCountries implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadDeliveryCountriesFail implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadDeliveryCountriesSuccess implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_SUCCESS;\n  constructor(public payload: Country[]) {}\n}\n\nexport type DeliveryCountriesAction =\n  | LoadDeliveryCountries\n  | LoadDeliveryCountriesFail\n  | LoadDeliveryCountriesSuccess;\n","import { Action } from '@ngrx/store';\n\nexport const FORGOT_PASSWORD_EMAIL_REQUEST =\n  '[User] Forgot Password Email Request';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS =\n  '[User] Forgot Password Email Request Success';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_FAIL =\n  '[User] Forgot Password Email Request Fail';\n\nexport class ForgotPasswordEmailRequest implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST;\n  constructor(public payload: string) {}\n}\n\nexport class ForgotPasswordEmailRequestFail implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ForgotPasswordEmailRequestSuccess implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS;\n}\n\nexport type ForgotPasswordEmailRequestAction =\n  | ForgotPasswordEmailRequest\n  | ForgotPasswordEmailRequestFail\n  | ForgotPasswordEmailRequestSuccess;\n","import { Address, Country, Region } from '../../model/address.model';\r\nimport { PaymentDetails } from '../../model/cart.model';\r\nimport { ConsentTemplate } from '../../model/consent.model';\r\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\r\nimport { Title, User } from '../../model/misc.model';\r\nimport {\r\n  Order,\r\n  OrderHistoryList,\r\n  ReturnRequest,\r\n  ReturnRequestList,\r\n} from '../../model/order.model';\r\nimport { StateUtils } from '../../state';\r\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\r\nimport { NotificationPreference } from '../../model';\r\nimport { ProductInterestSearchResult } from '../../model/product-interest.model';\r\n\r\nexport const USER_FEATURE = 'user';\r\nexport const UPDATE_EMAIL_PROCESS_ID = 'updateEmail';\r\nexport const UPDATE_PASSWORD_PROCESS_ID = 'updatePassword';\r\nexport const UPDATE_USER_DETAILS_PROCESS_ID = 'updateUserDetails';\r\nexport const REGISTER_USER_PROCESS_ID = 'registerUser';\r\nexport const REMOVE_USER_PROCESS_ID = 'removeUser';\r\nexport const GIVE_CONSENT_PROCESS_ID = 'giveConsent';\r\nexport const WITHDRAW_CONSENT_PROCESS_ID = 'withdrawConsent';\r\nexport const UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID =\r\n  'updateNotificationPreferences';\r\nexport const ADD_PRODUCT_INTEREST_PROCESS_ID = 'addProductInterests';\r\nexport const REMOVE_PRODUCT_INTERESTS_PROCESS_ID = 'removeProductInterests';\r\nexport const CANCEL_ORDER_PROCESS_ID = 'cancelOrder';\r\nexport const CANCEL_RETURN_PROCESS_ID = 'cancelReturn';\r\n\r\nexport const USER_CONSENTS = '[User] User Consents';\r\nexport const USER_PAYMENT_METHODS = '[User] User Payment Methods';\r\nexport const USER_ORDERS = '[User] User Orders';\r\nexport const USER_ADDRESSES = '[User] User Addresses';\r\nexport const USER_RETURN_REQUESTS = '[User] Order Return Requests';\r\nexport const USER_RETURN_REQUEST_DETAILS = '[User] Return Request Details';\r\nexport const USER_ORDER_DETAILS = '[User] User Order Details';\r\nexport const REGIONS = '[User] Regions';\r\n\r\nexport const CUSTOMER_COUPONS = '[User] Customer Coupons';\r\nexport const SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID = 'subscribeCustomerCoupon';\r\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID =\r\n  'unsubscribeCustomerCoupon';\r\nexport const CLAIM_CUSTOMER_COUPON_PROCESS_ID = 'claimCustomerCoupon';\r\nexport const NOTIFICATION_PREFERENCES = '[User] Notification Preferences';\r\nexport const PRODUCT_INTERESTS = '[User] Product Interests';\r\n\r\nexport interface StateWithUser {\r\n  [USER_FEATURE]: UserState;\r\n}\r\n\r\nexport interface UserState {\r\n  account: UserDetailsState;\r\n  addresses: StateUtils.LoaderState<Address[]>;\r\n  consents: StateUtils.LoaderState<ConsentTemplate[]>;\r\n  billingCountries: BillingCountriesState;\r\n  countries: DeliveryCountriesState;\r\n  payments: StateUtils.LoaderState<PaymentDetails[]>;\r\n  orders: StateUtils.LoaderState<OrderHistoryList>;\r\n  order: StateUtils.LoaderState<Order>;\r\n  orderReturn: StateUtils.LoaderState<ReturnRequest>;\r\n  orderReturnList: StateUtils.LoaderState<ReturnRequestList>;\r\n  titles: TitlesState;\r\n  regions: StateUtils.LoaderState<RegionsState>;\r\n  resetPassword: boolean;\r\n  consignmentTracking: ConsignmentTrackingState;\r\n  customerCoupons: StateUtils.LoaderState<CustomerCouponSearchResult>;\r\n  notificationPreferences: StateUtils.LoaderState<NotificationPreference[]>;\r\n  productInterests: StateUtils.LoaderState<ProductInterestSearchResult>;\r\n}\r\n\r\nexport interface RegionsState {\r\n  entities: Region[];\r\n  country: string;\r\n}\r\n\r\nexport interface BillingCountryEntities {\r\n  [key: string]: Country;\r\n}\r\n\r\nexport interface BillingCountriesState {\r\n  entities: BillingCountryEntities;\r\n}\r\n\r\nexport interface DeliveryCountryEntities {\r\n  [key: string]: Country;\r\n}\r\n\r\nexport interface DeliveryCountriesState {\r\n  entities: DeliveryCountryEntities;\r\n}\r\n\r\nexport interface TitleEntities {\r\n  [key: string]: Title;\r\n}\r\n\r\nexport interface TitlesState {\r\n  entities: TitleEntities;\r\n}\r\n\r\nexport interface UserDetailsState {\r\n  details: User;\r\n}\r\n\r\nexport interface ConsignmentTrackingState {\r\n  tracking?: ConsignmentTracking;\r\n}\r\n","import {\r\n  Order,\r\n  CancellationRequestEntryInputList,\r\n} from '../../../model/order.model';\r\nimport {\r\n  LoaderFailAction,\r\n  LoaderLoadAction,\r\n  LoaderSuccessAction,\r\n  LoaderResetAction,\r\n} from '../../../state/utils/loader/loader.action';\r\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { USER_ORDER_DETAILS, CANCEL_ORDER_PROCESS_ID } from '../user-state';\r\n\r\nexport const LOAD_ORDER_DETAILS = '[User] Load Order Details';\r\nexport const LOAD_ORDER_DETAILS_FAIL = '[User] Load Order Details Fail';\r\nexport const LOAD_ORDER_DETAILS_SUCCESS = '[User] Load Order Details Success';\r\nexport const CLEAR_ORDER_DETAILS = '[User] Clear Order Details';\r\n\r\nexport const CANCEL_ORDER = '[User] Cancel Order';\r\nexport const CANCEL_ORDER_FAIL = '[User] Cancel Order Fail';\r\nexport const CANCEL_ORDER_SUCCESS = '[User] Cancel Order Success';\r\nexport const RESET_CANCEL_ORDER_PROCESS = '[User] Reset Cancel Order Process';\r\n\r\nexport class LoadOrderDetails extends LoaderLoadAction {\r\n  readonly type = LOAD_ORDER_DETAILS;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      orderCode: string;\r\n    }\r\n  ) {\r\n    super(USER_ORDER_DETAILS);\r\n  }\r\n}\r\n\r\nexport class LoadOrderDetailsFail extends LoaderFailAction {\r\n  readonly type = LOAD_ORDER_DETAILS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_ORDER_DETAILS, payload);\r\n  }\r\n}\r\n\r\nexport class LoadOrderDetailsSuccess extends LoaderSuccessAction {\r\n  readonly type = LOAD_ORDER_DETAILS_SUCCESS;\r\n  constructor(public payload: Order) {\r\n    super(USER_ORDER_DETAILS);\r\n  }\r\n}\r\n\r\nexport class ClearOrderDetails extends LoaderResetAction {\r\n  readonly type = CLEAR_ORDER_DETAILS;\r\n  constructor() {\r\n    super(USER_ORDER_DETAILS);\r\n  }\r\n}\r\n\r\nexport class CancelOrder extends StateUtils.EntityLoadAction {\r\n  readonly type = CANCEL_ORDER;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      orderCode: string;\r\n      cancelRequestInput: CancellationRequestEntryInputList;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class CancelOrderFail extends StateUtils.EntityFailAction {\r\n  readonly type = CANCEL_ORDER_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class CancelOrderSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = CANCEL_ORDER_SUCCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ResetCancelOrderProcess extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = RESET_CANCEL_ORDER_PROCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport type OrderDetailsAction =\r\n  | LoadOrderDetails\r\n  | LoadOrderDetailsFail\r\n  | LoadOrderDetailsSuccess\r\n  | ClearOrderDetails\r\n  | CancelOrder\r\n  | CancelOrderFail\r\n  | CancelOrderSuccess;\r\n","import { PaymentDetails } from '../../../model/cart.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { USER_PAYMENT_METHODS } from '../user-state';\r\n\r\nexport const LOAD_USER_PAYMENT_METHODS = '[User] Load User Payment Methods';\r\nexport const LOAD_USER_PAYMENT_METHODS_FAIL =\r\n  '[User] Load User Payment Methods Fail';\r\nexport const LOAD_USER_PAYMENT_METHODS_SUCCESS =\r\n  '[User] Load User Payment Methods Success';\r\n\r\nexport const SET_DEFAULT_USER_PAYMENT_METHOD =\r\n  '[User] Set Default User Payment Method';\r\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_FAIL =\r\n  '[User] Set Default User Payment Method Fail';\r\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS =\r\n  '[User] Set Default User Payment Method Success';\r\n\r\nexport const DELETE_USER_PAYMENT_METHOD = '[User] Delete User Payment Method';\r\nexport const DELETE_USER_PAYMENT_METHOD_FAIL =\r\n  '[User] Delete User Payment Method Fail';\r\nexport const DELETE_USER_PAYMENT_METHOD_SUCCESS =\r\n  '[User] Delete User  Payment Method Success';\r\n\r\nexport class LoadUserPaymentMethods extends StateUtils.LoaderLoadAction {\r\n  readonly type = LOAD_USER_PAYMENT_METHODS;\r\n  constructor(public payload: string) {\r\n    super(USER_PAYMENT_METHODS);\r\n  }\r\n}\r\n\r\nexport class LoadUserPaymentMethodsFail extends StateUtils.LoaderFailAction {\r\n  readonly type = LOAD_USER_PAYMENT_METHODS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_PAYMENT_METHODS, payload);\r\n  }\r\n}\r\n\r\nexport class LoadUserPaymentMethodsSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = LOAD_USER_PAYMENT_METHODS_SUCCESS;\r\n  constructor(public payload: PaymentDetails[]) {\r\n    super(USER_PAYMENT_METHODS);\r\n  }\r\n}\r\n\r\nexport class SetDefaultUserPaymentMethod extends StateUtils.LoaderLoadAction {\r\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD;\r\n  constructor(public payload: any) {\r\n    super(USER_PAYMENT_METHODS);\r\n  }\r\n}\r\n\r\nexport class SetDefaultUserPaymentMethodFail extends StateUtils.LoaderFailAction {\r\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_PAYMENT_METHODS, payload);\r\n  }\r\n}\r\n\r\nexport class SetDefaultUserPaymentMethodSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS;\r\n  constructor(public payload: any) {\r\n    super(USER_PAYMENT_METHODS);\r\n  }\r\n}\r\n\r\nexport class DeleteUserPaymentMethod extends StateUtils.LoaderLoadAction {\r\n  readonly type = DELETE_USER_PAYMENT_METHOD;\r\n  constructor(public payload: any) {\r\n    super(USER_PAYMENT_METHODS);\r\n  }\r\n}\r\n\r\nexport class DeleteUserPaymentMethodFail extends StateUtils.LoaderFailAction {\r\n  readonly type = DELETE_USER_PAYMENT_METHOD_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_PAYMENT_METHODS, payload);\r\n  }\r\n}\r\n\r\nexport class DeleteUserPaymentMethodSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = DELETE_USER_PAYMENT_METHOD_SUCCESS;\r\n  constructor(public payload: any) {\r\n    super(USER_PAYMENT_METHODS);\r\n  }\r\n}\r\n\r\n// action types\r\nexport type UserPaymentMethodsAction =\r\n  | LoadUserPaymentMethods\r\n  | LoadUserPaymentMethodsFail\r\n  | LoadUserPaymentMethodsSuccess\r\n  | SetDefaultUserPaymentMethod\r\n  | SetDefaultUserPaymentMethodFail\r\n  | SetDefaultUserPaymentMethodSuccess\r\n  | DeleteUserPaymentMethod\r\n  | DeleteUserPaymentMethodFail\r\n  | DeleteUserPaymentMethodSuccess;\r\n","import { Action } from '@ngrx/store';\r\nimport { Region } from '../../../model/address.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { REGIONS } from '../user-state';\r\n\r\nexport const LOAD_REGIONS = '[User] Load Regions';\r\nexport const LOAD_REGIONS_SUCCESS = '[User] Load Regions Success';\r\nexport const LOAD_REGIONS_FAIL = '[User] Load Regions Fail';\r\nexport const CLEAR_REGIONS = '[User] Clear Regions';\r\n\r\nexport class LoadRegions extends StateUtils.LoaderLoadAction {\r\n  readonly type = LOAD_REGIONS;\r\n  constructor(public payload: string) {\r\n    super(REGIONS);\r\n  }\r\n}\r\n\r\nexport class LoadRegionsFail extends StateUtils.LoaderFailAction {\r\n  readonly type = LOAD_REGIONS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(REGIONS, payload);\r\n  }\r\n}\r\n\r\nexport class LoadRegionsSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = LOAD_REGIONS_SUCCESS;\r\n  constructor(public payload: { entities: Region[]; country: string }) {\r\n    super(REGIONS);\r\n  }\r\n}\r\n\r\nexport class ClearRegions implements Action {\r\n  readonly type = CLEAR_REGIONS;\r\n  constructor() {}\r\n}\r\n\r\nexport type RegionsAction =\r\n  | LoadRegions\r\n  | LoadRegionsFail\r\n  | LoadRegionsSuccess\r\n  | ClearRegions;\r\n","import { Action } from '@ngrx/store';\n\nexport const RESET_PASSWORD = '[User] Reset Password';\nexport const RESET_PASSWORD_SUCCESS = '[User] Reset Password Success';\nexport const RESET_PASSWORD_FAIL = '[User] Reset Password Fail';\n\nexport class ResetPassword implements Action {\n  readonly type = RESET_PASSWORD;\n  constructor(public payload: { token: string; password: string }) {}\n}\n\nexport class ResetPasswordFail implements Action {\n  readonly type = RESET_PASSWORD_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ResetPasswordSuccess implements Action {\n  readonly type = RESET_PASSWORD_SUCCESS;\n}\n\nexport type ResetPasswordAction =\n  | ResetPassword\n  | ResetPasswordFail\n  | ResetPasswordSuccess;\n","import { Action } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\n\nexport const LOAD_TITLES = '[User] Load Tiltes';\nexport const LOAD_TITLES_FAIL = '[User] Load Titles Fail';\nexport const LOAD_TITLES_SUCCESS = '[User] Load Titles Success';\n\nexport class LoadTitles implements Action {\n  readonly type = LOAD_TITLES;\n  constructor() {}\n}\n\nexport class LoadTitlesFail implements Action {\n  readonly type = LOAD_TITLES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadTitlesSuccess implements Action {\n  readonly type = LOAD_TITLES_SUCCESS;\n  constructor(public payload: Title[]) {}\n}\n\nexport type TitlesAction = LoadTitles | LoadTitlesFail | LoadTitlesSuccess;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { UPDATE_EMAIL_PROCESS_ID } from '../user-state';\r\n\r\nexport const UPDATE_EMAIL = '[User] Update Email';\r\nexport const UPDATE_EMAIL_ERROR = '[User] Update Email Error';\r\nexport const UPDATE_EMAIL_SUCCESS = '[User] Update Email Success';\r\nexport const RESET_EMAIL = '[User] Reset Email';\r\n\r\nexport class UpdateEmailAction extends StateUtils.EntityLoadAction {\r\n  readonly type = UPDATE_EMAIL;\r\n  constructor(\r\n    public payload: {\r\n      uid: string;\r\n      password: string;\r\n      newUid: string;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class UpdateEmailSuccessAction extends StateUtils.EntitySuccessAction {\r\n  readonly type = UPDATE_EMAIL_SUCCESS;\r\n  constructor(public newUid: string) {\r\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class UpdateEmailErrorAction extends StateUtils.EntityFailAction {\r\n  readonly type = UPDATE_EMAIL_ERROR;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class ResetUpdateEmailAction extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = RESET_EMAIL;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport type EmailActions =\r\n  | UpdateEmailAction\r\n  | UpdateEmailSuccessAction\r\n  | UpdateEmailErrorAction\r\n  | ResetUpdateEmailAction;\r\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { UPDATE_PASSWORD_PROCESS_ID } from '../user-state';\r\n\r\nexport const UPDATE_PASSWORD = '[User] Update Password';\r\nexport const UPDATE_PASSWORD_FAIL = '[User] Update Password Fail';\r\nexport const UPDATE_PASSWORD_SUCCESS = '[User] Update Password Success';\r\nexport const UPDATE_PASSWORD_RESET =\r\n  '[User] Reset Update Password Process State';\r\n\r\nexport class UpdatePassword extends StateUtils.EntityLoadAction {\r\n  readonly type = UPDATE_PASSWORD;\r\n  constructor(\r\n    public payload: { userId: string; oldPassword: string; newPassword: string }\r\n  ) {\r\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class UpdatePasswordFail extends StateUtils.EntityFailAction {\r\n  readonly type = UPDATE_PASSWORD_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class UpdatePasswordSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = UPDATE_PASSWORD_SUCCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class UpdatePasswordReset extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = UPDATE_PASSWORD_RESET;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\r\n  }\r\n}\r\n\r\n// action types\r\nexport type UpdatePasswordAction =\r\n  | UpdatePassword\r\n  | UpdatePasswordFail\r\n  | UpdatePasswordSuccess\r\n  | UpdatePasswordReset;\r\n","import { Address } from '../../../model/address.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { USER_ADDRESSES } from '../user-state';\r\n\r\nexport const LOAD_USER_ADDRESSES = '[User] Load User Addresses';\r\nexport const LOAD_USER_ADDRESSES_FAIL = '[User] Load User Addresses Fail';\r\nexport const LOAD_USER_ADDRESSES_SUCCESS = '[User] Load User Addresses Success';\r\n\r\nexport const ADD_USER_ADDRESS = '[User] Add User Address';\r\nexport const ADD_USER_ADDRESS_FAIL = '[User] Add User Address Fail';\r\nexport const ADD_USER_ADDRESS_SUCCESS = '[User] Add User Address Success';\r\n\r\nexport const UPDATE_USER_ADDRESS = '[User] Update User Address';\r\nexport const UPDATE_USER_ADDRESS_FAIL = '[User] Update User Address Fail';\r\nexport const UPDATE_USER_ADDRESS_SUCCESS = '[User] Update User Address Success';\r\n\r\nexport const DELETE_USER_ADDRESS = '[User] Delete User Address';\r\nexport const DELETE_USER_ADDRESS_FAIL = '[User] Delete User Address Fail';\r\nexport const DELETE_USER_ADDRESS_SUCCESS = '[User] Delete User Address Success';\r\n\r\nexport class LoadUserAddresses extends StateUtils.LoaderLoadAction {\r\n  readonly type = LOAD_USER_ADDRESSES;\r\n  constructor(public payload: string) {\r\n    super(USER_ADDRESSES);\r\n  }\r\n}\r\n\r\nexport class LoadUserAddressesFail extends StateUtils.LoaderFailAction {\r\n  readonly type = LOAD_USER_ADDRESSES_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_ADDRESSES, payload);\r\n  }\r\n}\r\n\r\nexport class LoadUserAddressesSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = LOAD_USER_ADDRESSES_SUCCESS;\r\n  constructor(public payload: Address[]) {\r\n    super(USER_ADDRESSES);\r\n  }\r\n}\r\n\r\n// Adding address actions\r\nexport class AddUserAddress extends StateUtils.LoaderLoadAction {\r\n  readonly type = ADD_USER_ADDRESS;\r\n  constructor(public payload: { userId: string; address: Address }) {\r\n    super(USER_ADDRESSES);\r\n  }\r\n}\r\n\r\nexport class AddUserAddressFail extends StateUtils.LoaderFailAction {\r\n  readonly type = ADD_USER_ADDRESS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_ADDRESSES, payload);\r\n  }\r\n}\r\n\r\nexport class AddUserAddressSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = ADD_USER_ADDRESS_SUCCESS;\r\n  constructor(public payload: any) {\r\n    super(USER_ADDRESSES);\r\n  }\r\n}\r\n\r\n// Updating address actions\r\nexport class UpdateUserAddress extends StateUtils.LoaderLoadAction {\r\n  readonly type = UPDATE_USER_ADDRESS;\r\n  constructor(\r\n    public payload: { userId: string; addressId: string; address: Address }\r\n  ) {\r\n    super(USER_ADDRESSES);\r\n  }\r\n}\r\n\r\nexport class UpdateUserAddressFail extends StateUtils.LoaderFailAction {\r\n  readonly type = UPDATE_USER_ADDRESS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_ADDRESSES, payload);\r\n  }\r\n}\r\n\r\nexport class UpdateUserAddressSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = UPDATE_USER_ADDRESS_SUCCESS;\r\n  constructor(public payload: any) {\r\n    super(USER_ADDRESSES);\r\n  }\r\n}\r\n\r\n// Deleting address actions\r\nexport class DeleteUserAddress extends StateUtils.LoaderLoadAction {\r\n  readonly type = DELETE_USER_ADDRESS;\r\n  constructor(public payload: any) {\r\n    super(USER_ADDRESSES);\r\n  }\r\n}\r\n\r\nexport class DeleteUserAddressFail extends StateUtils.LoaderFailAction {\r\n  readonly type = DELETE_USER_ADDRESS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_ADDRESSES, payload);\r\n  }\r\n}\r\n\r\nexport class DeleteUserAddressSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = DELETE_USER_ADDRESS_SUCCESS;\r\n  constructor(public payload: any) {\r\n    super(USER_ADDRESSES);\r\n  }\r\n}\r\n\r\n// action types\r\nexport type UserAddressesAction =\r\n  | LoadUserAddresses\r\n  | LoadUserAddressesFail\r\n  | LoadUserAddressesSuccess\r\n  | AddUserAddress\r\n  | AddUserAddressFail\r\n  | AddUserAddressSuccess\r\n  | UpdateUserAddress\r\n  | UpdateUserAddressFail\r\n  | UpdateUserAddressSuccess\r\n  | DeleteUserAddress\r\n  | DeleteUserAddressFail\r\n  | DeleteUserAddressSuccess;\r\n","import { ConsentTemplate } from '../../../model/consent.model';\r\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport {\r\n  GIVE_CONSENT_PROCESS_ID,\r\n  USER_CONSENTS,\r\n  WITHDRAW_CONSENT_PROCESS_ID,\r\n} from '../user-state';\r\n\r\nexport const LOAD_USER_CONSENTS = '[User] Load User Consents';\r\nexport const LOAD_USER_CONSENTS_SUCCESS = '[User] Load User Consents Success';\r\nexport const LOAD_USER_CONSENTS_FAIL = '[User] Load User Consents Fail';\r\nexport const RESET_LOAD_USER_CONSENTS = '[User] Reset Load User Consents';\r\n\r\nexport const GIVE_USER_CONSENT = '[User] Give User Consent';\r\nexport const GIVE_USER_CONSENT_FAIL = '[User] Give User Consent Fail';\r\nexport const GIVE_USER_CONSENT_SUCCESS = '[User] Give User Consent Success';\r\nexport const RESET_GIVE_USER_CONSENT_PROCESS =\r\n  '[User] Reset Give User Consent Process';\r\nexport const TRANSFER_ANONYMOUS_CONSENT = '[User] Transfer Anonymous Consent';\r\n\r\nexport const WITHDRAW_USER_CONSENT = '[User] Withdraw User Consent';\r\nexport const WITHDRAW_USER_CONSENT_FAIL = '[User] Withdraw User Consent Fail';\r\nexport const WITHDRAW_USER_CONSENT_SUCCESS =\r\n  '[User] Withdraw User Consent Success';\r\nexport const RESET_WITHDRAW_USER_CONSENT_PROCESS =\r\n  '[User] Reset Withdraw User Consent Process';\r\n\r\nexport class LoadUserConsents extends StateUtils.LoaderLoadAction {\r\n  readonly type = LOAD_USER_CONSENTS;\r\n  constructor(public payload: string) {\r\n    super(USER_CONSENTS);\r\n  }\r\n}\r\n\r\nexport class LoadUserConsentsFail extends StateUtils.LoaderFailAction {\r\n  readonly type = LOAD_USER_CONSENTS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_CONSENTS, payload);\r\n  }\r\n}\r\n\r\nexport class LoadUserConsentsSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = LOAD_USER_CONSENTS_SUCCESS;\r\n  constructor(public payload: ConsentTemplate[]) {\r\n    super(USER_CONSENTS);\r\n  }\r\n}\r\n\r\nexport class ResetLoadUserConsents extends StateUtils.LoaderResetAction {\r\n  readonly type = RESET_LOAD_USER_CONSENTS;\r\n  constructor() {\r\n    super(USER_CONSENTS);\r\n  }\r\n}\r\n\r\nexport class GiveUserConsent extends StateUtils.EntityLoadAction {\r\n  readonly type = GIVE_USER_CONSENT;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      consentTemplateId: string;\r\n      consentTemplateVersion: number;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class GiveUserConsentFail extends StateUtils.EntityFailAction {\r\n  readonly type = GIVE_USER_CONSENT_FAIL;\r\n  constructor(payload: any) {\r\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class GiveUserConsentSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = GIVE_USER_CONSENT_SUCCESS;\r\n  constructor(public consentTemplate: ConsentTemplate) {\r\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ResetGiveUserConsentProcess extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = RESET_GIVE_USER_CONSENT_PROCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class TransferAnonymousConsent {\r\n  readonly type = TRANSFER_ANONYMOUS_CONSENT;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      consentTemplateId: string;\r\n      consentTemplateVersion: number;\r\n    }\r\n  ) {}\r\n}\r\n\r\nexport class WithdrawUserConsent extends StateUtils.EntityLoadAction {\r\n  readonly type = WITHDRAW_USER_CONSENT;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      consentCode: string;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class WithdrawUserConsentFail extends StateUtils.EntityFailAction {\r\n  readonly type = WITHDRAW_USER_CONSENT_FAIL;\r\n  constructor(payload: any) {\r\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class WithdrawUserConsentSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = WITHDRAW_USER_CONSENT_SUCCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ResetWithdrawUserConsentProcess extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = RESET_WITHDRAW_USER_CONSENT_PROCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport type UserConsentsAction =\r\n  | LoadUserConsents\r\n  | LoadUserConsentsFail\r\n  | LoadUserConsentsSuccess\r\n  | ResetLoadUserConsents\r\n  | GiveUserConsent\r\n  | GiveUserConsentFail\r\n  | GiveUserConsentSuccess\r\n  | ResetGiveUserConsentProcess\r\n  | WithdrawUserConsent\r\n  | WithdrawUserConsentFail\r\n  | WithdrawUserConsentSuccess\r\n  | ResetWithdrawUserConsentProcess;\r\n","import { Action } from '@ngrx/store';\r\nimport { User } from '../../../model/misc.model';\r\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { UPDATE_USER_DETAILS_PROCESS_ID } from '../user-state';\r\n\r\nexport const LOAD_USER_DETAILS = '[User] Load User Details';\r\nexport const LOAD_USER_DETAILS_FAIL = '[User] Load User Details Fail';\r\nexport const LOAD_USER_DETAILS_SUCCESS = '[User] Load User Details Success';\r\n\r\nexport const UPDATE_USER_DETAILS = '[User] Update User Details';\r\nexport const UPDATE_USER_DETAILS_FAIL = '[User] Update User Details Fail';\r\nexport const UPDATE_USER_DETAILS_SUCCESS = '[User] Update User Details Success';\r\nexport const RESET_USER_DETAILS = '[User] Reset User Details';\r\n\r\nexport class LoadUserDetails implements Action {\r\n  readonly type = LOAD_USER_DETAILS;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class LoadUserDetailsFail implements Action {\r\n  readonly type = LOAD_USER_DETAILS_FAIL;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LoadUserDetailsSuccess implements Action {\r\n  readonly type = LOAD_USER_DETAILS_SUCCESS;\r\n  constructor(public payload: User) {}\r\n}\r\n\r\nexport class UpdateUserDetails extends StateUtils.EntityLoadAction {\r\n  readonly type = UPDATE_USER_DETAILS;\r\n  constructor(public payload: { username: string; userDetails: User }) {\r\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class UpdateUserDetailsFail extends StateUtils.EntityFailAction {\r\n  readonly type = UPDATE_USER_DETAILS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class UpdateUserDetailsSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = UPDATE_USER_DETAILS_SUCCESS;\r\n  constructor(public userUpdates: User) {\r\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ResetUpdateUserDetails extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = RESET_USER_DETAILS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\r\n  }\r\n}\r\n\r\n// action types\r\nexport type UserDetailsAction =\r\n  | LoadUserDetails\r\n  | LoadUserDetailsFail\r\n  | LoadUserDetailsSuccess\r\n  | UpdateUserDetails\r\n  | UpdateUserDetailsFail\r\n  | UpdateUserDetailsSuccess\r\n  | ResetUpdateUserDetails;\r\n","import { Action } from '@ngrx/store';\nexport const CLEAR_USER_MISCS_DATA = '[User] Clear User Misc Data';\n\nexport class ClearUserMiscsData implements Action {\n  readonly type = CLEAR_USER_MISCS_DATA;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { USER_ORDERS } from '../user-state';\r\n\r\nexport const LOAD_USER_ORDERS = '[User] Load User Orders';\r\nexport const LOAD_USER_ORDERS_FAIL = '[User] Load User Orders Fail';\r\nexport const LOAD_USER_ORDERS_SUCCESS = '[User] Load User Orders Success';\r\nexport const CLEAR_USER_ORDERS = '[User] Clear User Orders';\r\n\r\nexport class LoadUserOrders extends StateUtils.LoaderLoadAction {\r\n  readonly type = LOAD_USER_ORDERS;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      pageSize: number;\r\n      currentPage?: number;\r\n      sort?: string;\r\n    }\r\n  ) {\r\n    super(USER_ORDERS);\r\n  }\r\n}\r\n\r\nexport class LoadUserOrdersFail extends StateUtils.LoaderFailAction {\r\n  readonly type = LOAD_USER_ORDERS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_ORDERS, payload);\r\n  }\r\n}\r\n\r\nexport class LoadUserOrdersSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = LOAD_USER_ORDERS_SUCCESS;\r\n  constructor(public payload: OrderHistoryList) {\r\n    super(USER_ORDERS);\r\n  }\r\n}\r\n\r\nexport class ClearUserOrders extends StateUtils.LoaderResetAction {\r\n  readonly type = CLEAR_USER_ORDERS;\r\n  constructor() {\r\n    super(USER_ORDERS);\r\n  }\r\n}\r\n\r\nexport type UserOrdersAction =\r\n  | LoadUserOrders\r\n  | LoadUserOrdersFail\r\n  | LoadUserOrdersSuccess\r\n  | ClearUserOrders;\r\n","import { Action } from '@ngrx/store';\r\nimport { UserSignUp } from '../../../model/misc.model';\r\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport {\r\n  REGISTER_USER_PROCESS_ID,\r\n  REMOVE_USER_PROCESS_ID,\r\n} from '../user-state';\r\n\r\nexport const REGISTER_USER = '[User] Register User';\r\nexport const REGISTER_USER_FAIL = '[User] Register User Fail';\r\nexport const REGISTER_USER_SUCCESS = '[User] Register User Success';\r\nexport const RESET_REGISTER_USER_PROCESS = '[User] Reset Register User Process';\r\n\r\nexport const REGISTER_GUEST = '[User] Register Guest';\r\nexport const REGISTER_GUEST_FAIL = '[User] Register Guest Fail';\r\nexport const REGISTER_GUEST_SUCCESS = '[User] Register Guest Success';\r\n\r\nexport const REMOVE_USER = '[User] Remove User';\r\nexport const REMOVE_USER_FAIL = '[User] Remove User Fail';\r\nexport const REMOVE_USER_SUCCESS = '[User] Remove User Success';\r\nexport const REMOVE_USER_RESET = '[User] Reset Remove User Process State';\r\n\r\nexport class RegisterUser extends StateUtils.EntityLoadAction {\r\n  readonly type = REGISTER_USER;\r\n  constructor(public payload: UserSignUp) {\r\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class RegisterUserFail extends StateUtils.EntityFailAction {\r\n  readonly type = REGISTER_USER_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class RegisterUserSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = REGISTER_USER_SUCCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ResetRegisterUserProcess extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = RESET_REGISTER_USER_PROCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class RegisterGuest implements Action {\r\n  readonly type = REGISTER_GUEST;\r\n  constructor(public payload: { guid: string; password: string }) {}\r\n}\r\n\r\nexport class RegisterGuestFail implements Action {\r\n  readonly type = REGISTER_GUEST_FAIL;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class RegisterGuestSuccess implements Action {\r\n  readonly type = REGISTER_GUEST_SUCCESS;\r\n}\r\n\r\nexport class RemoveUser extends StateUtils.EntityLoadAction {\r\n  readonly type = REMOVE_USER;\r\n  constructor(public payload: string) {\r\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class RemoveUserFail extends StateUtils.EntityFailAction {\r\n  readonly type = REMOVE_USER_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class RemoveUserSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = REMOVE_USER_SUCCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class RemoveUserReset extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = REMOVE_USER_RESET;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\r\n  }\r\n}\r\n\r\n// action types\r\nexport type UserRegisterOrRemoveAction =\r\n  | RegisterUser\r\n  | RegisterUserFail\r\n  | RegisterUserSuccess\r\n  | ResetRegisterUserProcess\r\n  | RegisterGuest\r\n  | RegisterGuestFail\r\n  | RegisterGuestSuccess\r\n  | RemoveUser\r\n  | RemoveUserFail\r\n  | RemoveUserSuccess\r\n  | RemoveUserReset;\r\n","import {\r\n  CUSTOMER_COUPONS,\r\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\r\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\r\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\r\n} from '../user-state';\r\nimport {\r\n  LoaderLoadAction,\r\n  LoaderFailAction,\r\n  LoaderSuccessAction,\r\n  LoaderResetAction,\r\n} from '../../../state/utils/loader/loader.action';\r\nimport {\r\n  CustomerCouponSearchResult,\r\n  CustomerCouponNotification,\r\n  CustomerCoupon2Customer,\r\n} from '../../../model/customer-coupon.model';\r\nimport {\r\n  EntityFailAction,\r\n  EntityLoadAction,\r\n  EntityLoaderResetAction,\r\n  EntitySuccessAction,\r\n} from '../../../state/utils/entity-loader/entity-loader.action';\r\nimport { PROCESS_FEATURE } from '../../../process/store';\r\n\r\nexport const LOAD_CUSTOMER_COUPONS = '[User] Load Customer Coupons';\r\nexport const LOAD_CUSTOMER_COUPONS_FAIL = '[User] Load Customer Coupons Fail';\r\nexport const LOAD_CUSTOMER_COUPONS_SUCCESS =\r\n  '[User] Load Customer Coupons Success';\r\nexport const RESET_LOAD_CUSTOMER_COUPONS = '[User] Reset Load Customer Coupons';\r\n\r\nexport const SUBSCRIBE_CUSTOMER_COUPON =\r\n  '[User] Subscribe Customer Notification Coupon';\r\nexport const SUBSCRIBE_CUSTOMER_COUPON_FAIL =\r\n  '[User] Subscribe Customer Coupon Notification Fail';\r\nexport const SUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\r\n  '[User] Subscribe Customer Coupon Notification Success';\r\nexport const RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS =\r\n  '[User] Reset Subscribe Customer Coupon Process';\r\n\r\nexport const UNSUBSCRIBE_CUSTOMER_COUPON =\r\n  '[User] Unsubscribe Customer Notification Coupon';\r\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_FAIL =\r\n  '[User] Unsubscribe Customer Coupon Notification Fail';\r\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\r\n  '[User] Unsubscribe Customer Coupon Notification Success';\r\nexport const RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS =\r\n  '[User] Reset Unsubscribe Customer Coupon Process';\r\n\r\nexport const CLAIM_CUSTOMER_COUPON = '[User] Claim Customer';\r\nexport const CLAIM_CUSTOMER_COUPON_FAIL = '[User] Claim Customer Fail';\r\nexport const CLAIM_CUSTOMER_COUPON_SUCCESS = '[User] Claim Customer Success';\r\n\r\nexport class LoadCustomerCoupons extends LoaderLoadAction {\r\n  readonly type = LOAD_CUSTOMER_COUPONS;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      pageSize: number;\r\n      currentPage?: number;\r\n      sort?: string;\r\n    }\r\n  ) {\r\n    super(CUSTOMER_COUPONS);\r\n  }\r\n}\r\n\r\nexport class LoadCustomerCouponsFail extends LoaderFailAction {\r\n  readonly type = LOAD_CUSTOMER_COUPONS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(CUSTOMER_COUPONS, payload);\r\n  }\r\n}\r\n\r\nexport class LoadCustomerCouponsSuccess extends LoaderSuccessAction {\r\n  readonly type = LOAD_CUSTOMER_COUPONS_SUCCESS;\r\n  constructor(public payload: CustomerCouponSearchResult) {\r\n    super(CUSTOMER_COUPONS);\r\n  }\r\n}\r\n\r\nexport class ResetLoadCustomerCoupons extends LoaderResetAction {\r\n  readonly type = RESET_LOAD_CUSTOMER_COUPONS;\r\n  constructor() {\r\n    super(CUSTOMER_COUPONS);\r\n  }\r\n}\r\n\r\n// Subscribe coupon notification actions\r\nexport class SubscribeCustomerCoupon extends EntityLoadAction {\r\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      couponCode: string;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class SubscribeCustomerCouponFail extends EntityFailAction {\r\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class SubscribeCustomerCouponSuccess extends EntitySuccessAction {\r\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\r\n  constructor(public payload: CustomerCouponNotification) {\r\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class ResetSubscribeCustomerCouponProcess extends EntityLoaderResetAction {\r\n  readonly type = RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class UnsubscribeCustomerCoupon extends EntityLoadAction {\r\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      couponCode: string;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class UnsubscribeCustomerCouponFail extends EntityFailAction {\r\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class UnsubscribeCustomerCouponSuccess extends EntitySuccessAction {\r\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class ResetUnsubscribeCustomerCouponProcess extends EntityLoaderResetAction {\r\n  readonly type = RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ClaimCustomerCoupon extends EntityLoadAction {\r\n  readonly type = CLAIM_CUSTOMER_COUPON;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      couponCode;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ClaimCustomerCouponFail extends EntityFailAction {\r\n  readonly type = CLAIM_CUSTOMER_COUPON_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class ClaimCustomerCouponSuccess extends EntitySuccessAction {\r\n  readonly type = CLAIM_CUSTOMER_COUPON_SUCCESS;\r\n  constructor(public payload: CustomerCoupon2Customer) {\r\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\n// action types\r\nexport type CustomerCouponAction =\r\n  | LoadCustomerCoupons\r\n  | LoadCustomerCouponsFail\r\n  | LoadCustomerCouponsSuccess\r\n  | ResetLoadCustomerCoupons\r\n  | SubscribeCustomerCoupon\r\n  | SubscribeCustomerCouponFail\r\n  | SubscribeCustomerCouponSuccess\r\n  | ResetSubscribeCustomerCouponProcess\r\n  | UnsubscribeCustomerCoupon\r\n  | UnsubscribeCustomerCouponFail\r\n  | UnsubscribeCustomerCouponSuccess\r\n  | ResetUnsubscribeCustomerCouponProcess\r\n  | ClaimCustomerCoupon\r\n  | ClaimCustomerCouponFail\r\n  | ClaimCustomerCouponSuccess;\r\n","import { StateUtils } from '../../../state/utils/index';\r\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\r\nimport {\r\n  EntityFailAction,\r\n  EntityLoadAction,\r\n  EntityLoaderResetAction,\r\n  EntitySuccessAction,\r\n} from '../../../state/utils/entity-loader/entity-loader.action';\r\nimport {\r\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\r\n  NOTIFICATION_PREFERENCES,\r\n} from '../user-state';\r\nimport { NotificationPreference } from '../../../model/notification-preference.model';\r\n\r\nexport const LOAD_NOTIFICATION_PREFERENCES =\r\n  '[User] Load Notification Preferences';\r\nexport const LOAD_NOTIFICATION_PREFERENCES_FAIL =\r\n  '[User] Load Notification Preferences Fail';\r\nexport const LOAD_NOTIFICATION_PREFERENCES_SUCCESS =\r\n  '[User] Load Notification Preferences Success';\r\nexport const UPDATE_NOTIFICATION_PREFERENCES =\r\n  '[User] Update Notification Preferences';\r\nexport const UPDATE_NOTIFICATION_PREFERENCES_FAIL =\r\n  '[User] Update Notification Preferences Fail';\r\nexport const UPDATE_NOTIFICATION_PREFERENCES_SUCCESS =\r\n  '[User] Update Notification Preferences Success';\r\nexport const RESET_NOTIFICATION_PREFERENCES =\r\n  '[User] Reset Notification Preferences';\r\nexport const CLEAR_NOTIFICATION_PREFERENCES =\r\n  '[User] Clear Notification Preferences';\r\n\r\nexport class LoadNotificationPreferences extends StateUtils.LoaderLoadAction {\r\n  readonly type = LOAD_NOTIFICATION_PREFERENCES;\r\n  constructor(public payload: string) {\r\n    super(NOTIFICATION_PREFERENCES);\r\n  }\r\n}\r\n\r\nexport class LoadNotificationPreferencesFail extends StateUtils.LoaderFailAction {\r\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_FAIL;\r\n  constructor(public payload: any) {\r\n    super(NOTIFICATION_PREFERENCES, payload);\r\n  }\r\n}\r\n\r\nexport class LoadNotificationPreferencesSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_SUCCESS;\r\n  constructor(public payload: NotificationPreference[]) {\r\n    super(NOTIFICATION_PREFERENCES);\r\n  }\r\n}\r\n\r\nexport class UpdateNotificationPreferences extends EntityLoadAction {\r\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES;\r\n  constructor(\r\n    public payload: { userId: string; preferences: NotificationPreference[] }\r\n  ) {\r\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class UpdateNotificationPreferencesFail extends EntityFailAction {\r\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class UpdateNotificationPreferencesSuccess extends EntitySuccessAction {\r\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_SUCCESS;\r\n  constructor(public payload: NotificationPreference[]) {\r\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ResetNotificationPreferences extends EntityLoaderResetAction {\r\n  readonly type = RESET_NOTIFICATION_PREFERENCES;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ClearNotificationPreferences extends StateUtils.LoaderResetAction {\r\n  readonly type = CLEAR_NOTIFICATION_PREFERENCES;\r\n  constructor() {\r\n    super(NOTIFICATION_PREFERENCES);\r\n  }\r\n}\r\n\r\nexport type NotificationPreferenceAction =\r\n  | LoadNotificationPreferences\r\n  | LoadNotificationPreferencesFail\r\n  | LoadNotificationPreferencesSuccess\r\n  | UpdateNotificationPreferences\r\n  | UpdateNotificationPreferencesFail\r\n  | UpdateNotificationPreferencesSuccess\r\n  | ResetNotificationPreferences\r\n  | ClearNotificationPreferences;\r\n","import {\r\n  PRODUCT_INTERESTS,\r\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\r\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\r\n} from '../user-state';\r\nimport {\r\n  ProductInterestSearchResult,\r\n  ProductInterestEntryRelation,\r\n  NotificationType,\r\n} from '../../../model/product-interest.model';\r\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\r\nimport {\r\n  LoaderLoadAction,\r\n  LoaderFailAction,\r\n  LoaderSuccessAction,\r\n  LoaderResetAction,\r\n} from '../../../state/utils/loader/loader.action';\r\nimport {\r\n  EntityFailAction,\r\n  EntityLoadAction,\r\n  EntitySuccessAction,\r\n  EntityLoaderResetAction,\r\n} from '../../../state/utils/entity-loader/entity-loader.action';\r\n\r\nexport const LOAD_PRODUCT_INTERESTS = 'Load Product Interests';\r\nexport const LOAD_PRODUCT_INTERESTS_FAIL = 'Load Product Interests Fail';\r\nexport const LOAD_PRODUCT_INTERESTS_SUCCESS = 'Load Product Interests Success';\r\n\r\nexport const REMOVE_PRODUCT_INTEREST = 'Remove Product Interest';\r\nexport const REMOVE_PRODUCT_INTEREST_SUCCESS =\r\n  'Remove Product Interest Success';\r\nexport const REMOVE_PRODUCT_INTEREST_FAIL = 'Remove Product Interest Fail';\r\n\r\nexport const ADD_PRODUCT_INTEREST = 'Add Product Interest';\r\nexport const ADD_PRODUCT_INTEREST_FAIL = 'Add Product Interest Fail';\r\nexport const ADD_PRODUCT_INTEREST_SUCCESS = 'Add Product Interest Success';\r\n\r\nexport const ADD_PRODUCT_INTEREST_RESET = 'Add Product Interest Reset';\r\nexport const REMOVE_PRODUCT_INTEREST_RESET = 'Remove Product Interest Reset';\r\n\r\nexport const CLEAR_PRODUCT_INTERESTS = 'Clear Product Interests';\r\n\r\nexport class LoadProductInterests extends LoaderLoadAction {\r\n  readonly type = LOAD_PRODUCT_INTERESTS;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      pageSize?: number;\r\n      currentPage?: number;\r\n      sort?: string;\r\n      productCode?: string;\r\n      notificationType?: NotificationType;\r\n    }\r\n  ) {\r\n    super(PRODUCT_INTERESTS);\r\n  }\r\n}\r\n\r\nexport class LoadProductInterestsFail extends LoaderFailAction {\r\n  readonly type = LOAD_PRODUCT_INTERESTS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PRODUCT_INTERESTS, payload);\r\n  }\r\n}\r\n\r\nexport class LoadProductInterestsSuccess extends LoaderSuccessAction {\r\n  readonly type = LOAD_PRODUCT_INTERESTS_SUCCESS;\r\n  constructor(public payload: ProductInterestSearchResult) {\r\n    super(PRODUCT_INTERESTS);\r\n  }\r\n}\r\n\r\nexport class RemoveProductInterest extends EntityLoadAction {\r\n  readonly type = REMOVE_PRODUCT_INTEREST;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      item: ProductInterestEntryRelation;\r\n      singleDelete?: boolean;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class RemoveProductInterestSuccess extends EntitySuccessAction {\r\n  readonly type = REMOVE_PRODUCT_INTEREST_SUCCESS;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class RemoveProductInterestFail extends EntityFailAction {\r\n  readonly type = REMOVE_PRODUCT_INTEREST_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class AddProductInterest extends EntityLoadAction {\r\n  readonly type = ADD_PRODUCT_INTEREST;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      productCode: string;\r\n      notificationType: NotificationType;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class AddProductInterestSuccess extends EntitySuccessAction {\r\n  readonly type = ADD_PRODUCT_INTEREST_SUCCESS;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class AddProductInterestFail extends EntityFailAction {\r\n  readonly type = ADD_PRODUCT_INTEREST_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class ResetAddInterestState extends EntityLoaderResetAction {\r\n  readonly type = ADD_PRODUCT_INTEREST_RESET;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ResetRemoveInterestState extends EntityLoaderResetAction {\r\n  readonly type = REMOVE_PRODUCT_INTEREST_RESET;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ClearProductInterests extends LoaderResetAction {\r\n  readonly type = CLEAR_PRODUCT_INTERESTS;\r\n  constructor() {\r\n    super(PRODUCT_INTERESTS);\r\n  }\r\n}\r\n\r\nexport type ProductInterestsAction =\r\n  | LoadProductInterests\r\n  | LoadProductInterestsFail\r\n  | LoadProductInterestsSuccess\r\n  | RemoveProductInterest\r\n  | RemoveProductInterestSuccess\r\n  | RemoveProductInterestFail\r\n  | AddProductInterest\r\n  | AddProductInterestFail\r\n  | AddProductInterestSuccess\r\n  | ResetAddInterestState\r\n  | ResetRemoveInterestState\r\n  | ClearProductInterests;\r\n","import {\r\n  ReturnRequest,\r\n  ReturnRequestEntryInputList,\r\n  ReturnRequestList,\r\n  ReturnRequestModification,\r\n} from '../../../model/order.model';\r\nimport {\r\n  USER_RETURN_REQUESTS,\r\n  USER_RETURN_REQUEST_DETAILS,\r\n  CANCEL_RETURN_PROCESS_ID,\r\n} from '../user-state';\r\nimport {\r\n  LoaderFailAction,\r\n  LoaderLoadAction,\r\n  LoaderSuccessAction,\r\n  LoaderResetAction,\r\n} from '../../../state/utils/loader/loader.action';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\r\n\r\nexport const CREATE_ORDER_RETURN_REQUEST = '[User] Create Order Return Request';\r\nexport const CREATE_ORDER_RETURN_REQUEST_FAIL =\r\n  '[User] Create Order Return Request Fail';\r\nexport const CREATE_ORDER_RETURN_REQUEST_SUCCESS =\r\n  '[User] Create Order Return Request Success';\r\n\r\nexport const LOAD_ORDER_RETURN_REQUEST =\r\n  '[User] Load Order Return Request details';\r\nexport const LOAD_ORDER_RETURN_REQUEST_FAIL =\r\n  '[User] Load Order Return Request details Fail';\r\nexport const LOAD_ORDER_RETURN_REQUEST_SUCCESS =\r\n  '[User] Load Order Return Request details Success';\r\n\r\nexport const CANCEL_ORDER_RETURN_REQUEST = '[User] Cancel Order Return Request';\r\nexport const CANCEL_ORDER_RETURN_REQUEST_FAIL =\r\n  '[User] Cancel Order Return Request Fail';\r\nexport const CANCEL_ORDER_RETURN_REQUEST_SUCCESS =\r\n  '[User] Cancel Order Return Request Success';\r\n\r\nexport const LOAD_ORDER_RETURN_REQUEST_LIST =\r\n  '[User] Load User Order Return Request List';\r\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_FAIL =\r\n  '[User] Load User Order Return Request List Fail';\r\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS =\r\n  '[User] Load User Order Return Request List Success';\r\n\r\nexport const CLEAR_ORDER_RETURN_REQUEST =\r\n  '[User] Clear Order Return Request Details';\r\nexport const CLEAR_ORDER_RETURN_REQUEST_LIST =\r\n  '[User] Clear Order Return Request List';\r\nexport const RESET_CANCEL_RETURN_PROCESS =\r\n  '[User] Reset Cancel Return Request Process';\r\n\r\nexport class CreateOrderReturnRequest extends LoaderLoadAction {\r\n  readonly type = CREATE_ORDER_RETURN_REQUEST;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      returnRequestInput: ReturnRequestEntryInputList;\r\n    }\r\n  ) {\r\n    super(USER_RETURN_REQUEST_DETAILS);\r\n  }\r\n}\r\n\r\nexport class CreateOrderReturnRequestFail extends LoaderFailAction {\r\n  readonly type = CREATE_ORDER_RETURN_REQUEST_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_RETURN_REQUEST_DETAILS, payload);\r\n  }\r\n}\r\n\r\nexport class CreateOrderReturnRequestSuccess extends LoaderSuccessAction {\r\n  readonly type = CREATE_ORDER_RETURN_REQUEST_SUCCESS;\r\n  constructor(public payload: ReturnRequest) {\r\n    super(USER_RETURN_REQUEST_DETAILS);\r\n  }\r\n}\r\n\r\nexport class LoadOrderReturnRequest extends LoaderLoadAction {\r\n  readonly type = LOAD_ORDER_RETURN_REQUEST;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      returnRequestCode: string;\r\n    }\r\n  ) {\r\n    super(USER_RETURN_REQUEST_DETAILS);\r\n  }\r\n}\r\n\r\nexport class LoadOrderReturnRequestFail extends LoaderFailAction {\r\n  readonly type = LOAD_ORDER_RETURN_REQUEST_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_RETURN_REQUEST_DETAILS, payload);\r\n  }\r\n}\r\n\r\nexport class LoadOrderReturnRequestSuccess extends LoaderSuccessAction {\r\n  readonly type = LOAD_ORDER_RETURN_REQUEST_SUCCESS;\r\n  constructor(public payload: ReturnRequest) {\r\n    super(USER_RETURN_REQUEST_DETAILS);\r\n  }\r\n}\r\n\r\nexport class CancelOrderReturnRequest extends StateUtils.EntityLoadAction {\r\n  readonly type = CANCEL_ORDER_RETURN_REQUEST;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      returnRequestCode: string;\r\n      returnRequestModification: ReturnRequestModification;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class CancelOrderReturnRequestFail extends StateUtils.EntityFailAction {\r\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class CancelOrderReturnRequestSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_SUCCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class LoadOrderReturnRequestList extends LoaderLoadAction {\r\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      pageSize?: number;\r\n      currentPage?: number;\r\n      sort?: string;\r\n    }\r\n  ) {\r\n    super(USER_RETURN_REQUESTS);\r\n  }\r\n}\r\n\r\nexport class LoadOrderReturnRequestListFail extends LoaderFailAction {\r\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_FAIL;\r\n  constructor(public payload: any) {\r\n    super(USER_RETURN_REQUESTS, payload);\r\n  }\r\n}\r\n\r\nexport class LoadOrderReturnRequestListSuccess extends LoaderSuccessAction {\r\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS;\r\n  constructor(public payload: ReturnRequestList) {\r\n    super(USER_RETURN_REQUESTS);\r\n  }\r\n}\r\n\r\nexport class ClearOrderReturnRequest extends LoaderResetAction {\r\n  readonly type = CLEAR_ORDER_RETURN_REQUEST;\r\n  constructor() {\r\n    super(USER_RETURN_REQUEST_DETAILS);\r\n  }\r\n}\r\n\r\nexport class ClearOrderReturnRequestList extends LoaderResetAction {\r\n  readonly type = CLEAR_ORDER_RETURN_REQUEST_LIST;\r\n  constructor() {\r\n    super(USER_RETURN_REQUESTS);\r\n  }\r\n}\r\n\r\nexport class ResetCancelReturnProcess extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = RESET_CANCEL_RETURN_PROCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport type OrderReturnRequestAction =\r\n  | CreateOrderReturnRequest\r\n  | CreateOrderReturnRequestFail\r\n  | CreateOrderReturnRequestSuccess\r\n  | LoadOrderReturnRequest\r\n  | LoadOrderReturnRequestFail\r\n  | LoadOrderReturnRequestSuccess\r\n  | CancelOrderReturnRequest\r\n  | CancelOrderReturnRequestFail\r\n  | CancelOrderReturnRequestSuccess\r\n  | LoadOrderReturnRequestList\r\n  | LoadOrderReturnRequestListFail\r\n  | LoadOrderReturnRequestListSuccess\r\n  | ClearOrderReturnRequest\r\n  | ClearOrderReturnRequestList\r\n  | ResetCancelReturnProcess;\r\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState, USER_FEATURE } from '../user-state';\n\nexport const getUserState: MemoizedSelector<\n  StateWithUser,\n  UserState\n> = createFeatureSelector<UserState>(USER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { Country } from '../../../model/address.model';\r\nimport {\r\n  BillingCountriesState,\r\n  BillingCountryEntities,\r\n  StateWithUser,\r\n  UserState,\r\n} from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\n\r\nexport const getBillingCountriesState: MemoizedSelector<\r\n  StateWithUser,\r\n  BillingCountriesState\r\n> = createSelector(getUserState, (state: UserState) => state.billingCountries);\r\n\r\nexport const getBillingCountriesEntites: MemoizedSelector<\r\n  StateWithUser,\r\n  BillingCountryEntities\r\n> = createSelector(\r\n  getBillingCountriesState,\r\n  (state: BillingCountriesState) => state.entities\r\n);\r\n\r\nexport const getAllBillingCountries: MemoizedSelector<\r\n  StateWithUser,\r\n  Country[]\r\n> = createSelector(getBillingCountriesEntites, (entites) =>\r\n  Object.keys(entites).map((isocode) => entites[isocode])\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\nimport {\n  ConsignmentTrackingState,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsignmentTrackingState: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTrackingState\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.consignmentTracking\n);\n\nexport const getConsignmentTracking: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTracking\n> = createSelector(\n  getConsignmentTrackingState,\n  (state: ConsignmentTrackingState) => state.tracking\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { Country } from '../../../model/address.model';\r\nimport {\r\n  DeliveryCountriesState,\r\n  DeliveryCountryEntities,\r\n  StateWithUser,\r\n  UserState,\r\n} from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\n\r\nexport const getDeliveryCountriesState: MemoizedSelector<\r\n  StateWithUser,\r\n  DeliveryCountriesState\r\n> = createSelector(getUserState, (state: UserState) => state.countries);\r\n\r\nexport const getDeliveryCountriesEntites: MemoizedSelector<\r\n  StateWithUser,\r\n  DeliveryCountryEntities\r\n> = createSelector(\r\n  getDeliveryCountriesState,\r\n  (state: DeliveryCountriesState) => state.entities\r\n);\r\n\r\nexport const getAllDeliveryCountries: MemoizedSelector<\r\n  StateWithUser,\r\n  Country[]\r\n> = createSelector(getDeliveryCountriesEntites, (entites) =>\r\n  Object.keys(entites).map((isocode) => entites[isocode])\r\n);\r\n\r\nexport const countrySelectorFactory = (\r\n  isocode: string\r\n): MemoizedSelector<StateWithUser, Country> =>\r\n  createSelector(getDeliveryCountriesEntites, (entities) =>\r\n    Object.keys(entities).length !== 0 ? entities[isocode] : null\r\n  );\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { Order } from '../../../model/order.model';\r\nimport { StateWithUser, UserState } from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport { StateUtils } from '../../../state/utils/index';\r\n\r\nexport const getOrderState: MemoizedSelector<\r\n  StateWithUser,\r\n  LoaderState<Order>\r\n> = createSelector(getUserState, (state: UserState) => state.order);\r\n\r\nexport const getOrderDetails: MemoizedSelector<\r\n  StateWithUser,\r\n  Order\r\n> = createSelector(getOrderState, (state: LoaderState<Order>) =>\r\n  StateUtils.loaderValueSelector(state)\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\r\nimport { StateWithUser, UserState } from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport { StateUtils } from '../../../state/utils/index';\r\n\r\nexport const getOrderReturnRequestState: MemoizedSelector<\r\n  StateWithUser,\r\n  LoaderState<ReturnRequest>\r\n> = createSelector(getUserState, (state: UserState) => state.orderReturn);\r\n\r\nexport const getOrderReturnRequest: MemoizedSelector<\r\n  StateWithUser,\r\n  ReturnRequest\r\n> = createSelector(\r\n  getOrderReturnRequestState,\r\n  (state: LoaderState<ReturnRequest>) => StateUtils.loaderValueSelector(state)\r\n);\r\n\r\nexport const getOrderReturnRequestLoading: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(\r\n  getOrderReturnRequestState,\r\n  (state: LoaderState<ReturnRequest>) => StateUtils.loaderLoadingSelector(state)\r\n);\r\n\r\nexport const getOrderReturnRequestSuccess: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(\r\n  getOrderReturnRequestState,\r\n  (state: LoaderState<ReturnRequest>) =>\r\n    StateUtils.loaderSuccessSelector(state) &&\r\n    !StateUtils.loaderLoadingSelector(state)\r\n);\r\n\r\nexport const getOrderReturnRequestListState: MemoizedSelector<\r\n  StateWithUser,\r\n  LoaderState<ReturnRequestList>\r\n> = createSelector(getUserState, (state: UserState) => state.orderReturnList);\r\n\r\nexport const getOrderReturnRequestList: MemoizedSelector<\r\n  StateWithUser,\r\n  ReturnRequestList\r\n> = createSelector(\r\n  getOrderReturnRequestListState,\r\n  (state: LoaderState<ReturnRequestList>) =>\r\n    StateUtils.loaderValueSelector(state)\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { PaymentDetails } from '../../../model/cart.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport { StateWithUser, UserState } from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\n\r\nexport const getPaymentMethodsState: MemoizedSelector<\r\n  StateWithUser,\r\n  LoaderState<PaymentDetails[]>\r\n> = createSelector(getUserState, (state: UserState) => state.payments);\r\n\r\nexport const getPaymentMethods: MemoizedSelector<\r\n  StateWithUser,\r\n  PaymentDetails[]\r\n> = createSelector(\r\n  getPaymentMethodsState,\r\n  (state: LoaderState<PaymentDetails[]>) =>\r\n    StateUtils.loaderValueSelector(state)\r\n);\r\n\r\nexport const getPaymentMethodsLoading: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(\r\n  getPaymentMethodsState,\r\n  (state: LoaderState<PaymentDetails[]>) =>\r\n    StateUtils.loaderLoadingSelector(state)\r\n);\r\n\r\nexport const getPaymentMethodsLoadedSuccess: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(\r\n  getPaymentMethodsState,\r\n  (state: LoaderState<PaymentDetails[]>) =>\r\n    StateUtils.loaderSuccessSelector(state) &&\r\n    !StateUtils.loaderLoadingSelector(state)\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { Region } from '../../../model/address.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport { RegionsState, StateWithUser, UserState } from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\n\r\nexport const getRegionsLoaderState: MemoizedSelector<\r\n  StateWithUser,\r\n  LoaderState<RegionsState>\r\n> = createSelector(getUserState, (state: UserState) => state.regions);\r\n\r\nexport const getAllRegions: MemoizedSelector<\r\n  StateWithUser,\r\n  Region[]\r\n> = createSelector(\r\n  getRegionsLoaderState,\r\n  (state: LoaderState<RegionsState>) => {\r\n    return StateUtils.loaderValueSelector(state).entities;\r\n  }\r\n);\r\n\r\nexport const getRegionsDataAndLoading: MemoizedSelector<\r\n  StateWithUser,\r\n  {\r\n    loaded: boolean;\r\n    loading: boolean;\r\n    regions: Region[];\r\n    country: string;\r\n  }\r\n> = createSelector(\r\n  getRegionsLoaderState,\r\n  (state: LoaderState<RegionsState>) => ({\r\n    loaded: StateUtils.loaderSuccessSelector(state),\r\n    loading: StateUtils.loaderLoadingSelector(state),\r\n    regions: StateUtils.loaderValueSelector(state).entities,\r\n    country: StateUtils.loaderValueSelector(state).country,\r\n  })\r\n);\r\n\r\nexport const getRegionsCountry: MemoizedSelector<\r\n  StateWithUser,\r\n  string\r\n> = createSelector(\r\n  getRegionsLoaderState,\r\n  (state: LoaderState<RegionsState>) =>\r\n    StateUtils.loaderValueSelector(state).country\r\n);\r\n\r\nexport const getRegionsLoading: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\r\n  StateUtils.loaderLoadingSelector(state)\r\n);\r\n\r\nexport const getRegionsLoaded: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\r\n  StateUtils.loaderSuccessSelector(state)\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { StateWithUser, UserState } from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\n\r\nexport const getResetPassword: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(getUserState, (state: UserState) => state.resetPassword);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { Title } from '../../../model/misc.model';\r\nimport {\r\n  StateWithUser,\r\n  TitleEntities,\r\n  TitlesState,\r\n  UserState,\r\n} from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\n\r\nexport const getTitlesState: MemoizedSelector<\r\n  StateWithUser,\r\n  TitlesState\r\n> = createSelector(getUserState, (state: UserState) => state.titles);\r\n\r\nexport const getTitlesEntites: MemoizedSelector<\r\n  StateWithUser,\r\n  TitleEntities\r\n> = createSelector(getTitlesState, (state: TitlesState) => state.entities);\r\n\r\nexport const getAllTitles: MemoizedSelector<\r\n  StateWithUser,\r\n  Title[]\r\n> = createSelector(getTitlesEntites, (entites) =>\r\n  Object.keys(entites).map((code) => entites[code])\r\n);\r\n\r\nexport const titleSelectorFactory = (\r\n  code: string\r\n): MemoizedSelector<StateWithUser, Title> =>\r\n  createSelector(getTitlesEntites, (entities) =>\r\n    Object.keys(entities).length !== 0 ? entities[code] : null\r\n  );\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { Address } from '../../../model/address.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport { StateWithUser, UserState } from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\n\r\nexport const getAddressesLoaderState: MemoizedSelector<\r\n  StateWithUser,\r\n  LoaderState<Address[]>\r\n> = createSelector(getUserState, (state: UserState) => state.addresses);\r\n\r\nexport const getAddresses: MemoizedSelector<\r\n  StateWithUser,\r\n  Address[]\r\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\r\n  StateUtils.loaderValueSelector(state)\r\n);\r\n\r\nexport const getAddressesLoading: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\r\n  StateUtils.loaderLoadingSelector(state)\r\n);\r\n\r\nexport const getAddressesLoadedSuccess: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(\r\n  getAddressesLoaderState,\r\n  (state: LoaderState<Address[]>) =>\r\n    StateUtils.loaderSuccessSelector(state) &&\r\n    !StateUtils.loaderLoadingSelector(state)\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { ConsentTemplate } from '../../../model/consent.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport { StateWithUser, UserState } from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\n\r\nexport const getConsentsState: MemoizedSelector<\r\n  StateWithUser,\r\n  LoaderState<ConsentTemplate[]>\r\n> = createSelector(getUserState, (state: UserState) => state.consents);\r\n\r\nexport const getConsentsValue: MemoizedSelector<\r\n  StateWithUser,\r\n  ConsentTemplate[]\r\n> = createSelector(getConsentsState, StateUtils.loaderValueSelector);\r\n\r\nexport const getConsentByTemplateId = (\r\n  templateId: string\r\n): MemoizedSelector<StateWithUser, ConsentTemplate> =>\r\n  createSelector(getConsentsValue, (templates) =>\r\n    templates.find((template) => template.id === templateId)\r\n  );\r\n\r\nexport const getConsentsLoading: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(getConsentsState, StateUtils.loaderLoadingSelector);\r\n\r\nexport const getConsentsSuccess: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(getConsentsState, StateUtils.loaderSuccessSelector);\r\n\r\nexport const getConsentsError: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(getConsentsState, StateUtils.loaderErrorSelector);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { User } from '../../../model/misc.model';\r\nimport { StateWithUser, UserDetailsState, UserState } from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\n\r\nexport const getDetailsState: MemoizedSelector<\r\n  StateWithUser,\r\n  UserDetailsState\r\n> = createSelector(getUserState, (state: UserState) => state.account);\r\n\r\nexport const getDetails: MemoizedSelector<StateWithUser, User> = createSelector(\r\n  getDetailsState,\r\n  (state: UserDetailsState) => state.details\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { OrderHistoryList } from '../../../model/order.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport { StateWithUser, UserState } from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\n\r\nexport const getOrdersState: MemoizedSelector<\r\n  StateWithUser,\r\n  LoaderState<OrderHistoryList>\r\n> = createSelector(getUserState, (state: UserState) => state.orders);\r\n\r\nexport const getOrdersLoaded: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\r\n  StateUtils.loaderSuccessSelector(state)\r\n);\r\n\r\nexport const getOrders: MemoizedSelector<\r\n  StateWithUser,\r\n  OrderHistoryList\r\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\r\n  StateUtils.loaderValueSelector(state)\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\n\r\nimport { UserState, StateWithUser } from '../user-state';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport {\r\n  loaderValueSelector,\r\n  loaderSuccessSelector,\r\n  loaderLoadingSelector,\r\n} from '../../../state/utils/loader/loader.selectors';\r\n\r\nimport { getUserState } from './feature.selector';\r\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\r\n\r\nexport const getCustomerCouponsState: MemoizedSelector<\r\n  StateWithUser,\r\n  LoaderState<CustomerCouponSearchResult>\r\n> = createSelector(getUserState, (state: UserState) => state.customerCoupons);\r\n\r\nexport const getCustomerCouponsLoaded: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(\r\n  getCustomerCouponsState,\r\n  (state: LoaderState<CustomerCouponSearchResult>) =>\r\n    loaderSuccessSelector(state)\r\n);\r\n\r\nexport const getCustomerCouponsLoading: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(\r\n  getCustomerCouponsState,\r\n  (state: LoaderState<CustomerCouponSearchResult>) =>\r\n    loaderLoadingSelector(state)\r\n);\r\n\r\nexport const getCustomerCoupons: MemoizedSelector<\r\n  StateWithUser,\r\n  CustomerCouponSearchResult\r\n> = createSelector(\r\n  getCustomerCouponsState,\r\n  (state: LoaderState<CustomerCouponSearchResult>) => loaderValueSelector(state)\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { NotificationPreference } from '../../../model/notification-preference.model';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport { StateWithUser, UserState } from '../user-state';\r\nimport { getUserState } from './feature.selector';\r\nimport {\r\n  loaderValueSelector,\r\n  loaderLoadingSelector,\r\n} from '../../../state/utils/loader/loader.selectors';\r\n\r\nexport const getPreferencesLoaderState: MemoizedSelector<\r\n  StateWithUser,\r\n  LoaderState<NotificationPreference[]>\r\n> = createSelector(\r\n  getUserState,\r\n  (state: UserState) => state.notificationPreferences\r\n);\r\n\r\nexport const getPreferences: MemoizedSelector<\r\n  StateWithUser,\r\n  NotificationPreference[]\r\n> = createSelector(\r\n  getPreferencesLoaderState,\r\n  (state: LoaderState<NotificationPreference[]>) => loaderValueSelector(state)\r\n);\r\n\r\nexport const getEnabledPreferences: MemoizedSelector<\r\n  StateWithUser,\r\n  NotificationPreference[]\r\n> = createSelector(\r\n  getPreferencesLoaderState,\r\n  (state: LoaderState<NotificationPreference[]>) =>\r\n    loaderValueSelector(state).filter((p) => p.enabled)\r\n);\r\n\r\nexport const getPreferencesLoading: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(\r\n  getPreferencesLoaderState,\r\n  (state: LoaderState<NotificationPreference[]>) => loaderLoadingSelector(state)\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { UserState, StateWithUser } from '../user-state';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport {\r\n  loaderValueSelector,\r\n  loaderLoadingSelector,\r\n} from '../../../state/utils/loader/loader.selectors';\r\nimport { getUserState } from './feature.selector';\r\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\r\n\r\nexport const getInterestsState: MemoizedSelector<\r\n  StateWithUser,\r\n  LoaderState<ProductInterestSearchResult>\r\n> = createSelector(getUserState, (state: UserState) => state.productInterests);\r\n\r\nexport const getInterests: MemoizedSelector<\r\n  StateWithUser,\r\n  ProductInterestSearchResult\r\n> = createSelector(\r\n  getInterestsState,\r\n  (state: LoaderState<ProductInterestSearchResult>) =>\r\n    loaderValueSelector(state)\r\n);\r\n\r\nexport const getInterestsLoading: MemoizedSelector<\r\n  StateWithUser,\r\n  boolean\r\n> = createSelector(\r\n  getInterestsState,\r\n  (state: LoaderState<ProductInterestSearchResult>) =>\r\n    loaderLoadingSelector(state)\r\n);\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { iif, Observable } from 'rxjs';\r\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { Consent, ConsentTemplate } from '../../model/consent.model';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport {\r\n  getProcessErrorFactory,\r\n  getProcessLoadingFactory,\r\n  getProcessSuccessFactory,\r\n} from '../../process/store/selectors/process.selectors';\r\nimport { UserActions } from '../store/actions/index';\r\nimport { UsersSelectors } from '../store/selectors/index';\r\nimport {\r\n  GIVE_CONSENT_PROCESS_ID,\r\n  StateWithUser,\r\n  WITHDRAW_CONSENT_PROCESS_ID,\r\n} from '../store/user-state';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserConsentService {\r\n  constructor(\r\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\r\n    protected authService: AuthService\r\n  ) {}\r\n\r\n  /**\r\n   * Retrieves all consents.\r\n   */\r\n  loadConsents(): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(new UserActions.LoadUserConsents(userId));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns all consent templates. If `loadIfMissing` parameter is set to `true`, the method triggers the load if consent templates.\r\n   * @param loadIfMissing is set to `true`, the method will load templates if those are not already present. The default value is `false`.\r\n   */\r\n  getConsents(loadIfMissing = false): Observable<ConsentTemplate[]> {\r\n    return iif(\r\n      () => loadIfMissing,\r\n      this.store.pipe(\r\n        select(UsersSelectors.getConsentsValue),\r\n        withLatestFrom(\r\n          this.getConsentsResultLoading(),\r\n          this.getConsentsResultSuccess()\r\n        ),\r\n        filter(([_templates, loading, _success]) => !loading),\r\n        tap(([templates, _loading, success]) => {\r\n          if (!templates || templates.length === 0) {\r\n            // avoid infite loop - if we've already attempted to load templates and we got an empty array as the response\r\n            if (!success) {\r\n              this.loadConsents();\r\n            }\r\n          }\r\n        }),\r\n        filter(([templates, _loading]) => Boolean(templates)),\r\n        map(([templates, _loading]) => templates)\r\n      ),\r\n      this.store.pipe(select(UsersSelectors.getConsentsValue))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the consents loading flag\r\n   */\r\n  getConsentsResultLoading(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getConsentsLoading));\r\n  }\r\n\r\n  /**\r\n   * Returns the consents success flag\r\n   */\r\n  getConsentsResultSuccess(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getConsentsSuccess));\r\n  }\r\n\r\n  /**\r\n   * Returns the consents error flag\r\n   */\r\n  getConsentsResultError(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getConsentsError));\r\n  }\r\n\r\n  /**\r\n   * Resets the processing state for consent retrieval\r\n   */\r\n  resetConsentsProcessState(): void {\r\n    this.store.dispatch(new UserActions.ResetLoadUserConsents());\r\n  }\r\n\r\n  /**\r\n   * Returns the registered consent for the given template ID.\r\n   *\r\n   * As a side-effect, the method will call `getConsents(true)` to load the templates if those are not present.\r\n   *\r\n   * @param templateId a template ID by which to filter the registered templates.\r\n   */\r\n  getConsent(templateId: string): Observable<Consent> {\r\n    return this.authService.isUserLoggedIn().pipe(\r\n      filter(Boolean),\r\n      tap(() => this.getConsents(true)),\r\n      switchMap(() =>\r\n        this.store.pipe(\r\n          select(UsersSelectors.getConsentByTemplateId(templateId))\r\n        )\r\n      ),\r\n      filter((template) => Boolean(template)),\r\n      map((template) => template.currentConsent)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the consent is truthy and if `consentWithdrawnDate` doesn't exist.\r\n   * Otherwise, `false` is returned.\r\n   *\r\n   * @param consent to check\r\n   */\r\n  isConsentGiven(consent: Consent): boolean {\r\n    return (\r\n      Boolean(consent) &&\r\n      Boolean(consent.consentGivenDate) &&\r\n      !Boolean(consent.consentWithdrawnDate)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the consent is either falsy or if `consentWithdrawnDate` is present.\r\n   * Otherwise, `false` is returned.\r\n   *\r\n   * @param consent to check\r\n   */\r\n  isConsentWithdrawn(consent: Consent): boolean {\r\n    if (Boolean(consent)) {\r\n      return Boolean(consent.consentWithdrawnDate);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Give consent for specified consent template ID and version.\r\n   * @param consentTemplateId a template ID for which to give a consent\r\n   * @param consentTemplateVersion a template version for which to give a consent\r\n   */\r\n  giveConsent(consentTemplateId: string, consentTemplateVersion: number): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.GiveUserConsent({\r\n          userId,\r\n          consentTemplateId,\r\n          consentTemplateVersion,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the give consent process loading flag\r\n   */\r\n  getGiveConsentResultLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(GIVE_CONSENT_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the give consent process success flag\r\n   */\r\n  getGiveConsentResultSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(GIVE_CONSENT_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the give consent process error flag\r\n   */\r\n  getGiveConsentResultError(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessErrorFactory(GIVE_CONSENT_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resents the give consent process flags\r\n   */\r\n  resetGiveConsentProcessState(): void {\r\n    return this.store.dispatch(new UserActions.ResetGiveUserConsentProcess());\r\n  }\r\n\r\n  /**\r\n   * Withdraw consent for the given `consentCode`\r\n   * @param consentCode for which to withdraw the consent\r\n   */\r\n  withdrawConsent(consentCode: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.WithdrawUserConsent({\r\n          userId,\r\n          consentCode,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the withdraw consent process loading flag\r\n   */\r\n  getWithdrawConsentResultLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(WITHDRAW_CONSENT_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the withdraw consent process success flag\r\n   */\r\n  getWithdrawConsentResultSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(WITHDRAW_CONSENT_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the withdraw consent process error flag\r\n   */\r\n  getWithdrawConsentResultError(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessErrorFactory(WITHDRAW_CONSENT_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resets the process flags for withdraw consent\r\n   */\r\n  resetWithdrawConsentProcessState(): void {\r\n    return this.store.dispatch(\r\n      new UserActions.ResetWithdrawUserConsentProcess()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Filters the provided `templateList`' templates by hiding the template IDs specified in `hideTemplateIds`.\r\n   * If the `hideTemplateIds` is empty, the provided `templateList` is returned.\r\n   *\r\n   * @param templateList a list of consent templates to filter\r\n   * @param hideTemplateIds template IDs to hide\r\n   */\r\n  filterConsentTemplates(\r\n    templateList: ConsentTemplate[],\r\n    hideTemplateIds: string[] = []\r\n  ): ConsentTemplate[] {\r\n    if (hideTemplateIds.length === 0) {\r\n      return templateList;\r\n    }\r\n\r\n    const updatedTemplateList: ConsentTemplate[] = [];\r\n    for (const template of templateList) {\r\n      const show = !hideTemplateIds.includes(template.id);\r\n      if (show) {\r\n        updatedTemplateList.push(template);\r\n      }\r\n    }\r\n\r\n    return updatedTemplateList;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../model/consent.model';\nimport { AnonymousConsentTemplatesAdapter } from './anonymous-consent-templates.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AnonymousConsentTemplatesConnector {\n  constructor(protected adapter: AnonymousConsentTemplatesAdapter) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    return this.adapter.loadAnonymousConsentTemplates();\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { EMPTY, Observable, of } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  concatMap,\r\n  filter,\r\n  map,\r\n  mergeMap,\r\n  switchMap,\r\n  tap,\r\n  withLatestFrom,\r\n} from 'rxjs/operators';\r\nimport { AuthActions, AuthService } from '../../../auth/index';\r\nimport { UserConsentService } from '../../../user/facade/user-consent.service';\r\nimport { UserActions } from '../../../user/store/actions/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { AnonymousConsentsConfig } from '../../config/anonymous-consents-config';\r\nimport { AnonymousConsentTemplatesConnector } from '../../connectors/anonymous-consent-templates.connector';\r\nimport { AnonymousConsentsService } from '../../facade/index';\r\nimport { AnonymousConsentsActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class AnonymousConsentsEffects {\r\n  @Effect()\r\n  loadAnonymousConsentTemplates$: Observable<\r\n    AnonymousConsentsActions.AnonymousConsentsActions\r\n  > = this.actions$.pipe(\r\n    ofType(AnonymousConsentsActions.LOAD_ANONYMOUS_CONSENT_TEMPLATES),\r\n    concatMap(() =>\r\n      this.anonymousConsentTemplatesConnector\r\n        .loadAnonymousConsentTemplates()\r\n        .pipe(\r\n          withLatestFrom(this.anonymousConsentService.getTemplates()),\r\n          mergeMap(([newConsentTemplates, currentConsentTemplates]) => {\r\n            let updated = false;\r\n            if (\r\n              Boolean(currentConsentTemplates) &&\r\n              currentConsentTemplates.length !== 0\r\n            ) {\r\n              updated = this.anonymousConsentService.detectUpdatedTemplates(\r\n                currentConsentTemplates,\r\n                newConsentTemplates\r\n              );\r\n            }\r\n\r\n            return [\r\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess(\r\n                newConsentTemplates\r\n              ),\r\n              new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\r\n                updated\r\n              ),\r\n            ];\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  transferAnonymousConsentsToUser$: Observable<\r\n    UserActions.TransferAnonymousConsent | Observable<never>\r\n  > = this.actions$.pipe(\r\n    ofType<AuthActions.LoadUserTokenSuccess>(\r\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\r\n    ),\r\n    filter(() => Boolean(this.anonymousConsentsConfig.anonymousConsents)),\r\n    withLatestFrom(\r\n      this.actions$.pipe(\r\n        ofType<UserActions.RegisterUserSuccess>(\r\n          UserActions.REGISTER_USER_SUCCESS\r\n        )\r\n      )\r\n    ),\r\n    filter(([, registerAction]) => Boolean(registerAction)),\r\n    switchMap(() =>\r\n      this.anonymousConsentService.getConsents().pipe(\r\n        withLatestFrom(\r\n          this.authService.getOccUserId(),\r\n          this.anonymousConsentService.getTemplates(),\r\n          this.authService.isUserLoggedIn()\r\n        ),\r\n        filter(([, , , loggedIn]) => loggedIn),\r\n        concatMap(([consents, userId, templates, _loggedIn]) => {\r\n          const actions: UserActions.TransferAnonymousConsent[] = [];\r\n          for (const consent of consents) {\r\n            if (\r\n              this.anonymousConsentService.isConsentGiven(consent) &&\r\n              (!this.anonymousConsentsConfig.anonymousConsents\r\n                .requiredConsents ||\r\n                !this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\r\n                  consent.templateCode\r\n                ))\r\n            ) {\r\n              for (const template of templates) {\r\n                if (template.id === consent.templateCode) {\r\n                  actions.push(\r\n                    new UserActions.TransferAnonymousConsent({\r\n                      userId,\r\n                      consentTemplateId: template.id,\r\n                      consentTemplateVersion: template.version,\r\n                    })\r\n                  );\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n          }\r\n          if (actions.length > 0) {\r\n            return actions;\r\n          }\r\n          return EMPTY;\r\n        })\r\n      )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  giveRequiredConsentsToUser$: Observable<\r\n    UserActions.GiveUserConsent | Observable<never>\r\n  > = this.actions$.pipe(\r\n    ofType<AuthActions.LoadUserTokenSuccess>(\r\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\r\n    ),\r\n    filter(\r\n      (action) =>\r\n        Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\r\n        Boolean(\r\n          this.anonymousConsentsConfig.anonymousConsents.requiredConsents\r\n        ) &&\r\n        Boolean(action)\r\n    ),\r\n    concatMap(() =>\r\n      this.userConsentService.getConsentsResultSuccess().pipe(\r\n        withLatestFrom(\r\n          this.authService.getOccUserId(),\r\n          this.userConsentService.getConsents(),\r\n          this.authService.isUserLoggedIn()\r\n        ),\r\n        filter(([, , , loggedIn]) => loggedIn),\r\n        tap(([loaded, _userId, _templates, _loggedIn]) => {\r\n          if (!loaded) {\r\n            this.userConsentService.loadConsents();\r\n          }\r\n        }),\r\n        map(([_loaded, userId, templates, _loggedIn]) => {\r\n          return { userId, templates };\r\n        }),\r\n        concatMap(({ userId, templates }) => {\r\n          const actions: UserActions.GiveUserConsent[] = [];\r\n          for (const template of templates) {\r\n            if (\r\n              this.userConsentService.isConsentWithdrawn(\r\n                template.currentConsent\r\n              ) &&\r\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\r\n                template.id\r\n              )\r\n            ) {\r\n              actions.push(\r\n                new UserActions.GiveUserConsent({\r\n                  userId,\r\n                  consentTemplateId: template.id,\r\n                  consentTemplateVersion: template.version,\r\n                })\r\n              );\r\n            }\r\n          }\r\n          if (actions.length > 0) {\r\n            return actions;\r\n          }\r\n          return EMPTY;\r\n        })\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private anonymousConsentTemplatesConnector: AnonymousConsentTemplatesConnector,\r\n    private authService: AuthService,\r\n    private anonymousConsentsConfig: AnonymousConsentsConfig,\r\n    private anonymousConsentService: AnonymousConsentsService,\r\n    private userConsentService: UserConsentService\r\n  ) {}\r\n}\r\n","import { AnonymousConsentsEffects } from './anonymous-consents.effect';\n\nexport const effects: any[] = [AnonymousConsentsEffects];\n\nexport * from './anonymous-consents.effect';\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\nimport { SiteAdapter } from './site.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteConnector {\n  constructor(protected adapter: SiteAdapter) {}\n\n  getLanguages(): Observable<Language[]> {\n    return this.adapter.loadLanguages();\n  }\n\n  getCurrencies(): Observable<Currency[]> {\n    return this.adapter.loadCurrencies();\n  }\n\n  getCountries(type?: CountryType): Observable<Country[]> {\n    return this.adapter.loadCountries(type);\n  }\n\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.adapter.loadRegions(countryIsoCode);\n  }\n\n  getBaseSite(): Observable<BaseSite> {\n    return this.adapter.loadBaseSite();\n  }\n}\n","import { Provider, Type } from '@angular/core';\nimport { LanguageService } from '../facade/language.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from './context-ids';\n\nexport abstract class ContextServiceMap {\n  [context: string]: Type<SiteContext<any>>;\n}\n\nexport function serviceMapFactory() {\n  return {\n    [LANGUAGE_CONTEXT_ID]: LanguageService,\n    [CURRENCY_CONTEXT_ID]: CurrencyService,\n    [BASE_SITE_CONTEXT_ID]: BaseSiteService,\n  };\n}\n\nexport const contextServiceMapProvider: Provider = {\n  provide: ContextServiceMap,\n  useFactory: serviceMapFactory,\n};\n","import { SiteContextConfig } from './site-context-config';\nimport { getContextParameterDefault } from './context-config-utils';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\n\nexport function baseSiteConfigValidator(config: SiteContextConfig) {\n  if (getContextParameterDefault(config, BASE_SITE_CONTEXT_ID) === undefined) {\n    return 'Please configure context.parameters.baseSite before using storefront library!';\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../providers/context-ids';\n\nexport function defaultSiteContextConfigFactory(): SiteContextConfig {\n  return {\n    context: {\n      [LANGUAGE_CONTEXT_ID]: [\n        'en',\n        'de',\n        'ja',\n        'zh',\n        'ru',\n        'fr',\n        'tr',\n        'it',\n        'es',\n        'uk',\n        'pl',\n        'nl',\n        'hi',\n        'ar',\n        'pt',\n        'bn',\n        'pa',\n      ],\n      [CURRENCY_CONTEXT_ID]: [\n        'USD',\n        'EUR',\n        'JPY',\n        'GBP',\n        'AUD',\n        'CAD',\n        'CHF',\n        'CNY',\n        'SEK',\n        'NZD',\n        'MXN',\n        'SGD',\n        'HKD',\n        'NOK',\n        'KRW',\n        'TRY',\n        'RUB',\n        'INR',\n        'BRL',\n        'ZAR',\n      ],\n    },\n  };\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\r\nimport {\r\n  CONFIG_INITIALIZER_FORROOT_GUARD,\r\n  ConfigInitializer,\r\n} from './config-initializer';\r\nimport { Config } from '../config.module';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { filter, mapTo, take } from 'rxjs/operators';\r\nimport { deepMerge } from '../utils/deep-merge';\r\n\r\n/**\r\n * Provides support for CONFIG_INITIALIZERS\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ConfigInitializerService {\r\n  constructor(\r\n    @Inject(Config) protected config: any,\r\n    @Optional()\r\n    @Inject(CONFIG_INITIALIZER_FORROOT_GUARD)\r\n    protected initializerGuard\r\n  ) {}\r\n\r\n  protected ongoingScopes$ = new BehaviorSubject<string[]>(undefined);\r\n\r\n  /**\r\n   * Returns true if config is stable, i.e. all CONFIG_INITIALIZERS resolved correctly\r\n   */\r\n  get isStable(): boolean {\r\n    return (\r\n      !this.initializerGuard ||\r\n      (this.ongoingScopes$.value && this.ongoingScopes$.value.length === 0)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Recommended way to get config for code that can run before app will finish\r\n   * initialization (APP_INITIALIZERS, selected service constructors)\r\n   *\r\n   * Used without parameters waits for the whole config to become stable\r\n   *\r\n   * Parameters allow to describe which part of the config should be stable using\r\n   * string describing config part, e.g.:\r\n   * 'siteContext', 'siteContext.language', etc.\r\n   *\r\n   * @param scopes String describing parts of the config we want to be sure are stable\r\n   */\r\n  async getStableConfig(...scopes: string[]): Promise<any> {\r\n    if (this.isStable) {\r\n      return this.config;\r\n    }\r\n    return this.ongoingScopes$\r\n      .pipe(\r\n        filter(\r\n          (ongoingScopes) =>\r\n            ongoingScopes && this.areReady(scopes, ongoingScopes)\r\n        ),\r\n        take(1),\r\n        mapTo(this.config)\r\n      )\r\n      .toPromise();\r\n  }\r\n\r\n  /**\r\n   * Removes provided scopes from currently ongoingScopes\r\n   *\r\n   * @param scopes\r\n   */\r\n  protected finishScopes(scopes: string[]) {\r\n    const newScopes = [...this.ongoingScopes$.value];\r\n    for (const scope of scopes) {\r\n      newScopes.splice(newScopes.indexOf(scope), 1);\r\n    }\r\n    this.ongoingScopes$.next(newScopes);\r\n  }\r\n\r\n  /**\r\n   * Return true if provided scopes are not part of ongoingScopes\r\n   *\r\n   * @param scopes\r\n   * @param ongoingScopes\r\n   */\r\n  protected areReady(scopes: string[], ongoingScopes: string[]): boolean {\r\n    if (!scopes.length) {\r\n      return !ongoingScopes.length;\r\n    }\r\n    for (const scope of scopes) {\r\n      for (const ongoingScope of ongoingScopes) {\r\n        if (this.scopesOverlap(scope, ongoingScope)) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Check if two scopes overlap.\r\n   *\r\n   * Example of scopes that overlap:\r\n   * 'test' and 'test', 'test.a' and 'test', 'test' and 'test.a'\r\n   *\r\n   * Example of scopes that do not overlap:\r\n   * 'test' and 'testA', 'test.a' and 'test.b', 'test.nested' and 'test.nest'\r\n   *\r\n   * @param a ScopeA\r\n   * @param b ScopeB\r\n   */\r\n  protected scopesOverlap(a: string, b: string): boolean {\r\n    if (b.length > a.length) {\r\n      [a, b] = [b, a];\r\n    }\r\n    return a.startsWith(b) && (a[b.length] || '.') === '.';\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   *\r\n   * Not a part of a public API, used by APP_INITIALIZER to initialize all provided CONFIG_INITIALIZERS\r\n   *\r\n   */\r\n  async initialize(initializers?: ConfigInitializer[]) {\r\n    if (this.ongoingScopes$.value) {\r\n      // guard for double initialization\r\n      return;\r\n    }\r\n\r\n    const ongoingScopes: string[] = [];\r\n\r\n    const asyncConfigs: Promise<void>[] = [];\r\n\r\n    for (const initializer of initializers || []) {\r\n      if (!initializer) {\r\n        continue;\r\n      }\r\n      if (!initializer.scopes || !initializer.scopes.length) {\r\n        throw new Error('CONFIG_INITIALIZER should provide scope!');\r\n      }\r\n\r\n      if (isDevMode() && !this.areReady(initializer.scopes, ongoingScopes)) {\r\n        console.warn(\r\n          'More than one CONFIG_INITIALIZER is initializing the same config scope.'\r\n        );\r\n      }\r\n\r\n      ongoingScopes.push(...initializer.scopes);\r\n\r\n      asyncConfigs.push(\r\n        (async () => {\r\n          deepMerge(this.config, await initializer.configFactory());\r\n          this.finishScopes(initializer.scopes);\r\n        })()\r\n      );\r\n    }\r\n    this.ongoingScopes$.next(ongoingScopes);\r\n\r\n    if (asyncConfigs.length) {\r\n      await Promise.all(asyncConfigs);\r\n    }\r\n  }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { combineLatest, Observable, of } from 'rxjs';\r\nimport { distinctUntilChanged, filter } from 'rxjs/operators';\r\nimport {\r\n  getContextParameterDefault,\r\n  getContextParameterValues,\r\n} from '../config/context-config-utils';\r\nimport { SiteContextConfig } from '../config/site-context-config';\r\nimport { SiteContext } from '../facade/site-context.interface';\r\nimport { ContextServiceMap } from '../providers/context-service-map';\r\n\r\n@Injectable()\r\nexport class SiteContextParamsService {\r\n  constructor(\r\n    private config: SiteContextConfig,\r\n    private injector: Injector,\r\n    private serviceMap: ContextServiceMap\r\n  ) {}\r\n\r\n  getContextParameters(): string[] {\r\n    if (this.config.context) {\r\n      return Object.keys(this.config.context).filter(\r\n        (param) => param !== 'urlParameters'\r\n      );\r\n    }\r\n    return [];\r\n  }\r\n\r\n  getUrlEncodingParameters(): string[] {\r\n    return (this.config.context && this.config.context.urlParameters) || [];\r\n  }\r\n\r\n  getParamValues(param: string): string[] {\r\n    return getContextParameterValues(this.config, param);\r\n  }\r\n\r\n  getParamDefaultValue(param: string): string {\r\n    return getContextParameterDefault(this.config, param);\r\n  }\r\n\r\n  getSiteContextService(param: string): SiteContext<any> {\r\n    if (this.serviceMap[param]) {\r\n      return this.injector.get<SiteContext<any>>(this.serviceMap[param], null);\r\n    }\r\n  }\r\n\r\n  getValue(param: string): string {\r\n    let value: string;\r\n\r\n    const service = this.getSiteContextService(param);\r\n    if (service) {\r\n      service\r\n        .getActive()\r\n        .subscribe((val) => (value = val))\r\n        .unsubscribe();\r\n    }\r\n\r\n    return value !== undefined ? value : this.getParamDefaultValue(param);\r\n  }\r\n\r\n  setValue(param: string, value: string) {\r\n    const service = this.getSiteContextService(param);\r\n    if (service) {\r\n      service.setActive(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get active values for all provided context parameters\r\n   *\r\n   * @param params Context parameters\r\n   *\r\n   * @returns Observable emitting array of all passed active context values\r\n   */\r\n  getValues(params: string[]): Observable<Array<string>> {\r\n    if (params.length === 0) {\r\n      return of([]);\r\n    }\r\n\r\n    return combineLatest(\r\n      params.map((param) =>\r\n        this.getSiteContextService(param)\r\n          .getActive()\r\n          .pipe(distinctUntilChanged())\r\n      )\r\n    ).pipe(filter((value) => value.every((param) => !!param)));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { DefaultUrlSerializer, UrlTree } from '@angular/router';\r\nimport { SiteContextParamsService } from './site-context-params.service';\r\n\r\nexport interface ParamValuesMap {\r\n  [name: string]: string;\r\n}\r\n\r\nexport interface UrlTreeWithSiteContext extends UrlTree {\r\n  siteContext?: ParamValuesMap;\r\n}\r\n\r\nconst UrlSplit = /(^[^#?]*)(.*)/; // used to split url into path and query/fragment parts\r\n\r\n@Injectable()\r\nexport class SiteContextUrlSerializer extends DefaultUrlSerializer {\r\n  private get urlEncodingParameters(): string[] {\r\n    return this.siteContextParams.getUrlEncodingParameters();\r\n  }\r\n\r\n  get hasContextInRoutes() {\r\n    return this.urlEncodingParameters.length > 0;\r\n  }\r\n\r\n  constructor(private siteContextParams: SiteContextParamsService) {\r\n    super();\r\n  }\r\n\r\n  parse(url: string): UrlTreeWithSiteContext {\r\n    if (this.hasContextInRoutes) {\r\n      const urlWithParams = this.urlExtractContextParameters(url);\r\n      const parsed = super.parse(urlWithParams.url) as UrlTreeWithSiteContext;\r\n      this.urlTreeIncludeContextParameters(parsed, urlWithParams.params);\r\n      return parsed;\r\n    } else {\r\n      return super.parse(url);\r\n    }\r\n  }\r\n\r\n  urlExtractContextParameters(\r\n    url: string\r\n  ): { url: string; params: ParamValuesMap } {\r\n    const [, urlPart, queryPart] = url.match(UrlSplit);\r\n\r\n    const segments = urlPart.split('/');\r\n    if (segments[0] === '') {\r\n      segments.shift();\r\n    }\r\n    const params = {};\r\n\r\n    let paramId = 0;\r\n    let segmentId = 0;\r\n    while (\r\n      paramId < this.urlEncodingParameters.length &&\r\n      segmentId < segments.length\r\n    ) {\r\n      const paramName = this.urlEncodingParameters[paramId];\r\n      const paramValues = this.siteContextParams.getParamValues(paramName);\r\n\r\n      if (paramValues.includes(segments[segmentId])) {\r\n        params[paramName] = segments[segmentId];\r\n        segmentId++;\r\n      }\r\n      paramId++;\r\n    }\r\n\r\n    url = segments.slice(Object.keys(params).length).join('/') + queryPart;\r\n    return { url, params };\r\n  }\r\n\r\n  private urlTreeIncludeContextParameters(\r\n    urlTree: UrlTreeWithSiteContext,\r\n    params: ParamValuesMap\r\n  ) {\r\n    urlTree.siteContext = params;\r\n  }\r\n\r\n  serialize(tree: UrlTreeWithSiteContext): string {\r\n    const params = this.urlTreeExtractContextParameters(tree);\r\n    const url = super.serialize(tree);\r\n    const serialized = this.urlIncludeContextParameters(url, params);\r\n    return serialized;\r\n  }\r\n\r\n  urlTreeExtractContextParameters(\r\n    urlTree: UrlTreeWithSiteContext\r\n  ): ParamValuesMap {\r\n    return urlTree.siteContext ? urlTree.siteContext : {};\r\n  }\r\n\r\n  private urlIncludeContextParameters(url: string, params: ParamValuesMap) {\r\n    const contextRoutePart = this.urlEncodingParameters\r\n      .map((param) => {\r\n        return params[param]\r\n          ? params[param]\r\n          : this.siteContextParams.getValue(param);\r\n      })\r\n      .join('/');\r\n\r\n    return contextRoutePart + url;\r\n  }\r\n}\r\n","import { Location } from '@angular/common';\r\nimport { Injectable, Injector, OnDestroy } from '@angular/core';\r\nimport {\r\n  NavigationCancel,\r\n  NavigationEnd,\r\n  NavigationError,\r\n  NavigationStart,\r\n  Router,\r\n  RouterEvent,\r\n} from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { SiteContextParamsService } from './site-context-params.service';\r\nimport { SiteContextUrlSerializer } from './site-context-url-serializer';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SiteContextRoutesHandler implements OnDestroy {\r\n  constructor(\r\n    private siteContextParams: SiteContextParamsService,\r\n    private serializer: SiteContextUrlSerializer,\r\n    private injector: Injector\r\n  ) {}\r\n\r\n  private subscription = new Subscription();\r\n\r\n  private contextValues: {\r\n    [param: string]: string;\r\n  } = {};\r\n\r\n  private router: Router;\r\n  private location: Location;\r\n\r\n  /**\r\n   * Tells whether there is a pending navigation at the moment, so we can avoid an infinite loop caused by the cyclic dependency:\r\n   * - `subscribeChanges` method triggers a navigation on update of site context state\r\n   * - `subscribeRouting` method updates the site context state on navigation\r\n   */\r\n  private isNavigating = false;\r\n\r\n  /**\r\n   * Initializes the two-way synchronization between the site context state and the URL.\r\n   *\r\n   * @returns Promise that is resolved when the site context state is initialized (updated for the first time) based on the URL.\r\n   */\r\n  init(): Promise<void> {\r\n    return new Promise((resolve) => {\r\n      this.router = this.injector.get<Router>(Router);\r\n\r\n      this.location = this.injector.get<Location>(Location);\r\n      const routingParams = this.siteContextParams.getUrlEncodingParameters();\r\n\r\n      if (routingParams.length) {\r\n        this.subscribeChanges(routingParams);\r\n        this.subscribeRouting(resolve);\r\n      } else {\r\n        resolve();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * After each change of the site context state, it modifies the current URL in place.\r\n   * But it happens only for the parameters configured to be persisted in the URL.\r\n   */\r\n  private subscribeChanges(params: string[]) {\r\n    params.forEach((param) => {\r\n      const service = this.siteContextParams.getSiteContextService(param);\r\n      if (service) {\r\n        this.subscription.add(\r\n          service.getActive().subscribe((value) => {\r\n            if (\r\n              !this.isNavigating &&\r\n              this.contextValues[param] &&\r\n              this.contextValues[param] !== value\r\n            ) {\r\n              const parsed = this.router.parseUrl(this.router.url);\r\n              const serialized = this.router.serializeUrl(parsed);\r\n              this.location.replaceState(serialized);\r\n            }\r\n            this.contextValues[param] = value;\r\n          })\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * After each Angular NavigationStart event it updates the site context state based on\r\n   * site context params encoded in the anticipated URL.\r\n   *\r\n   * In particular, it's responsible for initializing the state of the context params\r\n   * on page start, reading the values from the URL.\r\n   *\r\n   * @param onContextInitialized notify that the initialization of the context was done based on the URL\r\n   */\r\n  private subscribeRouting(onContextInitialized: Function) {\r\n    let contextInitialized = false;\r\n\r\n    this.subscription.add(\r\n      this.router.events\r\n        .pipe(\r\n          filter(\r\n            (event) =>\r\n              event instanceof NavigationStart ||\r\n              event instanceof NavigationEnd ||\r\n              event instanceof NavigationError ||\r\n              event instanceof NavigationCancel\r\n          )\r\n        )\r\n        .subscribe((event: RouterEvent) => {\r\n          this.isNavigating = event instanceof NavigationStart;\r\n          if (this.isNavigating) {\r\n            this.setContextParamsFromRoute(event.url);\r\n\r\n            if (!contextInitialized) {\r\n              contextInitialized = true;\r\n              onContextInitialized();\r\n            }\r\n          }\r\n        })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates the site context state based on the context params encoded in the given URL\r\n   *\r\n   * @param url URL with encoded context params\r\n   */\r\n  private setContextParamsFromRoute(url: string) {\r\n    const { params } = this.serializer.urlExtractContextParameters(url);\r\n    Object.keys(params).forEach((param) =>\r\n      this.siteContextParams.setValue(param, params[param])\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n}\r\n","import { APP_INITIALIZER, Provider } from '@angular/core';\r\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\r\nimport { BaseSiteService } from '../facade/base-site.service';\r\nimport { CurrencyService } from '../facade/currency.service';\r\nimport { LanguageService } from '../facade/language.service';\r\nimport { SiteContextRoutesHandler } from '../services/site-context-routes-handler';\r\n\r\nexport function initializeContext(\r\n  baseSiteService: BaseSiteService,\r\n  langService: LanguageService,\r\n  currService: CurrencyService,\r\n  configInit: ConfigInitializerService,\r\n  siteContextRoutesHandler: SiteContextRoutesHandler\r\n) {\r\n  return () => {\r\n    configInit.getStableConfig('context').then(() => {\r\n      siteContextRoutesHandler.init().then(() => {\r\n        baseSiteService.initialize();\r\n        langService.initialize();\r\n        currService.initialize();\r\n      });\r\n    });\r\n  };\r\n}\r\n\r\nexport const contextServiceProviders: Provider[] = [\r\n  BaseSiteService,\r\n  LanguageService,\r\n  CurrencyService,\r\n  {\r\n    provide: APP_INITIALIZER,\r\n    useFactory: initializeContext,\r\n    deps: [\r\n      BaseSiteService,\r\n      LanguageService,\r\n      CurrencyService,\r\n      ConfigInitializerService,\r\n      SiteContextRoutesHandler,\r\n    ],\r\n    multi: true,\r\n  },\r\n];\r\n","import { Provider } from '@angular/core';\r\nimport { UrlSerializer } from '@angular/router';\r\nimport { SiteContextParamsService } from '../services/site-context-params.service';\r\nimport { SiteContextUrlSerializer } from '../services/site-context-url-serializer';\r\n\r\n// functions below should not be exposed in public API:\r\n\r\nexport const siteContextParamsProviders: Provider[] = [\r\n  SiteContextParamsService,\r\n  SiteContextUrlSerializer,\r\n  { provide: UrlSerializer, useExisting: SiteContextUrlSerializer },\r\n];\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { NEVER, Observable, of } from 'rxjs';\r\nimport {\r\n  bufferCount,\r\n  catchError,\r\n  exhaustMap,\r\n  filter,\r\n  map,\r\n  switchMapTo,\r\n  tap,\r\n} from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { WindowRef } from '../../../window/window-ref';\r\nimport { SiteConnector } from '../../connectors/site.connector';\r\nimport { SiteContextActions } from '../actions/index';\r\nimport { getActiveLanguage } from '../selectors/languages.selectors';\r\nimport { StateWithSiteContext } from '../state';\r\n\r\n@Injectable()\r\nexport class LanguagesEffects {\r\n  @Effect()\r\n  loadLanguages$: Observable<\r\n    | SiteContextActions.LoadLanguagesSuccess\r\n    | SiteContextActions.LoadLanguagesFail\r\n  > = this.actions$.pipe(\r\n    ofType(SiteContextActions.LOAD_LANGUAGES),\r\n    exhaustMap(() => {\r\n      return this.siteConnector.getLanguages().pipe(\r\n        map(\r\n          (languages) => new SiteContextActions.LoadLanguagesSuccess(languages)\r\n        ),\r\n        catchError((error) =>\r\n          of(\r\n            new SiteContextActions.LoadLanguagesFail(\r\n              makeErrorSerializable(error)\r\n            )\r\n          )\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  persist$: Observable<void> = this.actions$.pipe(\r\n    ofType(SiteContextActions.SET_ACTIVE_LANGUAGE),\r\n    tap((action: SiteContextActions.SetActiveLanguage) => {\r\n      if (this.winRef.sessionStorage) {\r\n        this.winRef.sessionStorage.setItem('language', action.payload);\r\n      }\r\n    }),\r\n    switchMapTo(NEVER)\r\n  );\r\n\r\n  @Effect()\r\n  activateLanguage$: Observable<\r\n    SiteContextActions.LanguageChange\r\n  > = this.state.select(getActiveLanguage).pipe(\r\n    bufferCount(2, 1),\r\n\r\n    // avoid dispatching `change` action when we're just setting the initial value:\r\n    filter(([previous]) => !!previous),\r\n    map(\r\n      ([previous, current]) =>\r\n        new SiteContextActions.LanguageChange({ previous, current })\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private siteConnector: SiteConnector,\r\n    private winRef: WindowRef,\r\n    private state: Store<StateWithSiteContext>\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { NEVER, Observable, of } from 'rxjs';\r\nimport {\r\n  bufferCount,\r\n  catchError,\r\n  exhaustMap,\r\n  filter,\r\n  map,\r\n  switchMapTo,\r\n  tap,\r\n} from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { WindowRef } from '../../../window/window-ref';\r\nimport { SiteConnector } from '../../connectors/site.connector';\r\nimport { SiteContextActions } from '../actions/index';\r\nimport { getActiveCurrency } from '../selectors/currencies.selectors';\r\nimport { StateWithSiteContext } from '../state';\r\n\r\n@Injectable()\r\nexport class CurrenciesEffects {\r\n  @Effect()\r\n  loadCurrencies$: Observable<\r\n    | SiteContextActions.LoadCurrenciesSuccess\r\n    | SiteContextActions.LoadCurrenciesFail\r\n  > = this.actions$.pipe(\r\n    ofType(SiteContextActions.LOAD_CURRENCIES),\r\n    exhaustMap(() => {\r\n      return this.siteConnector.getCurrencies().pipe(\r\n        map(\r\n          (currencies) =>\r\n            new SiteContextActions.LoadCurrenciesSuccess(currencies)\r\n        ),\r\n        catchError((error) =>\r\n          of(\r\n            new SiteContextActions.LoadCurrenciesFail(\r\n              makeErrorSerializable(error)\r\n            )\r\n          )\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  persist$: Observable<void> = this.actions$.pipe(\r\n    ofType(SiteContextActions.SET_ACTIVE_CURRENCY),\r\n    tap((action: SiteContextActions.SetActiveCurrency) => {\r\n      if (this.winRef.sessionStorage) {\r\n        this.winRef.sessionStorage.setItem('currency', action.payload);\r\n      }\r\n    }),\r\n    switchMapTo(NEVER)\r\n  );\r\n\r\n  @Effect()\r\n  activateCurrency$: Observable<\r\n    SiteContextActions.CurrencyChange\r\n  > = this.state.select(getActiveCurrency).pipe(\r\n    bufferCount(2, 1),\r\n\r\n    // avoid dispatching `change` action when we're just setting the initial value:\r\n    filter(([previous]) => !!previous),\r\n    map(\r\n      ([previous, current]) =>\r\n        new SiteContextActions.CurrencyChange({ previous, current })\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private siteConnector: SiteConnector,\r\n    private winRef: WindowRef,\r\n    private state: Store<StateWithSiteContext>\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { SiteConnector } from '../../connectors/site.connector';\r\nimport { SiteContextActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class BaseSiteEffects {\r\n  @Effect()\r\n  loadBaseSite$: Observable<\r\n    SiteContextActions.LoadBaseSiteSuccess | SiteContextActions.LoadBaseSiteFail\r\n  > = this.actions$.pipe(\r\n    ofType(SiteContextActions.LOAD_BASE_SITE),\r\n    exhaustMap(() => {\r\n      return this.siteConnector.getBaseSite().pipe(\r\n        map((baseSite) => new SiteContextActions.LoadBaseSiteSuccess(baseSite)),\r\n        catchError((error) =>\r\n          of(\r\n            new SiteContextActions.LoadBaseSiteFail(\r\n              makeErrorSerializable(error)\r\n            )\r\n          )\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private siteConnector: SiteConnector\r\n  ) {}\r\n}\r\n","import { LanguagesEffects } from './languages.effect';\nimport { CurrenciesEffects } from './currencies.effect';\nimport { BaseSiteEffects } from './base-site.effect';\n\nexport const effects: any[] = [\n  LanguagesEffects,\n  CurrenciesEffects,\n  BaseSiteEffects,\n];\n\nexport * from './languages.effect';\nexport * from './currencies.effect';\nexport * from './base-site.effect';\n","import { SiteContextActions } from '../actions/index';\nimport { BaseSiteState } from '../state';\n\nexport const initialState: BaseSiteState = {\n  details: {},\n  activeSite: '',\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.BaseSiteAction\n): BaseSiteState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_BASE_SITE_SUCCESS: {\n      return {\n        ...state,\n        details: action.payload,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_BASE_SITE: {\n      return {\n        ...state,\n        activeSite: action.payload,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Currency } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { CurrenciesState } from '../state';\n\nexport const initialState: CurrenciesState = {\n  entities: null,\n  activeCurrency: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.CurrenciesAction\n): CurrenciesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_CURRENCIES_SUCCESS: {\n      const currencies: Currency[] = action.payload;\n      const entities = currencies.reduce(\n        (currEntities: { [isocode: string]: Currency }, currency: Currency) => {\n          return {\n            ...currEntities,\n            [currency.isocode]: currency,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_CURRENCY: {\n      const isocode: string = action.payload;\n\n      return {\n        ...state,\n        activeCurrency: isocode,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Language } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { LanguagesState } from '../state';\n\nexport const initialState: LanguagesState = {\n  entities: null,\n  activeLanguage: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.LanguagesAction\n): LanguagesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_LANGUAGES_SUCCESS: {\n      const languages: Language[] = action.payload;\n      const entities = languages.reduce(\n        (langEntities: { [isocode: string]: Language }, language: Language) => {\n          return {\n            ...langEntities,\n            [language.isocode]: language,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_LANGUAGE: {\n      const isocode = action.payload;\n\n      return {\n        ...state,\n        activeLanguage: isocode,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\r\nimport { ActionReducerMap } from '@ngrx/store';\r\nimport { SiteContextState } from '../state';\r\nimport * as fromBaseSite from './base-site.reducer';\r\nimport * as fromCurrencies from './currencies.reducer';\r\nimport * as fromLanguages from './languages.reducer';\r\n\r\nexport function getReducers(): ActionReducerMap<SiteContextState> {\r\n  return {\r\n    languages: fromLanguages.reducer,\r\n    currencies: fromCurrencies.reducer,\r\n    baseSite: fromBaseSite.reducer,\r\n  };\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducerMap<\r\n  SiteContextState\r\n>> = new InjectionToken<ActionReducerMap<SiteContextState>>(\r\n  'SiteContextReducers'\r\n);\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { provideDefaultConfigFactory } from '../../config/config.module';\r\nimport {\r\n  StateConfig,\r\n  StateTransferType,\r\n} from '../../state/config/state-config';\r\nimport { effects } from './effects/index';\r\nimport { reducerProvider, reducerToken } from './reducers/index';\r\nimport { SITE_CONTEXT_FEATURE } from './state';\r\n\r\nexport function siteContextStoreConfigFactory(): StateConfig {\r\n  // if we want to reuse SITE_CONTEXT_FEATURE const in config, we have to use factory instead of plain object\r\n  const config: StateConfig = {\r\n    state: {\r\n      ssrTransfer: {\r\n        keys: { [SITE_CONTEXT_FEATURE]: StateTransferType.TRANSFER_STATE },\r\n      },\r\n    },\r\n  };\r\n  return config;\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    StoreModule.forFeature(SITE_CONTEXT_FEATURE, reducerToken),\r\n    EffectsModule.forFeature(effects),\r\n  ],\r\n  providers: [\r\n    provideDefaultConfigFactory(siteContextStoreConfigFactory),\r\n    reducerProvider,\r\n  ],\r\n})\r\nexport class SiteContextStoreModule {}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { provideDefaultConfigFactory } from '../config/config.module';\r\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\r\nimport { StateModule } from '../state/index';\r\nimport { baseSiteConfigValidator } from './config/base-site-config-validator';\r\nimport { defaultSiteContextConfigFactory } from './config/default-site-context-config';\r\nimport { contextServiceMapProvider } from './providers/context-service-map';\r\nimport { contextServiceProviders } from './providers/context-service-providers';\r\nimport { siteContextParamsProviders } from './providers/site-context-params-providers';\r\nimport { SiteContextStoreModule } from './store/site-context-store.module';\r\n\r\n// @dynamic\r\n@NgModule({\r\n  imports: [StateModule, SiteContextStoreModule],\r\n})\r\nexport class SiteContextModule {\r\n  static forRoot(): ModuleWithProviders<SiteContextModule> {\r\n    return {\r\n      ngModule: SiteContextModule,\r\n      providers: [\r\n        provideDefaultConfigFactory(defaultSiteContextConfigFactory),\r\n        contextServiceMapProvider,\r\n        ...contextServiceProviders,\r\n        ...siteContextParamsProviders,\r\n        provideConfigValidator(baseSiteConfigValidator),\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED: {\n      return action.dismissed;\n    }\n  }\n\n  return state;\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED: {\n      return action.updated;\n    }\n  }\n\n  return state;\n}\n","import {\r\n  AnonymousConsent,\r\n  ANONYMOUS_CONSENT_STATUS,\r\n} from '../../../model/consent.model';\r\nimport { AnonymousConsentsActions } from '../actions/index';\r\n\r\nexport const initialState: AnonymousConsent[] = [];\r\n\r\nexport function toggleConsentStatus(\r\n  consents: AnonymousConsent[],\r\n  templateCode: string,\r\n  status: ANONYMOUS_CONSENT_STATUS\r\n): AnonymousConsent[] {\r\n  if (!consents) {\r\n    return [];\r\n  }\r\n\r\n  return consents.map((consent) => {\r\n    if (consent.templateCode === templateCode) {\r\n      consent = {\r\n        ...consent,\r\n        consentState: status,\r\n      };\r\n    }\r\n    return consent;\r\n  });\r\n}\r\n\r\nexport function reducer(\r\n  state = initialState,\r\n  action: AnonymousConsentsActions.AnonymousConsentsActions\r\n): AnonymousConsent[] {\r\n  switch (action.type) {\r\n    case AnonymousConsentsActions.GIVE_ANONYMOUS_CONSENT: {\r\n      return toggleConsentStatus(\r\n        state,\r\n        action.templateCode,\r\n        ANONYMOUS_CONSENT_STATUS.GIVEN\r\n      );\r\n    }\r\n\r\n    case AnonymousConsentsActions.WITHDRAW_ANONYMOUS_CONSENT: {\r\n      return toggleConsentStatus(\r\n        state,\r\n        action.templateCode,\r\n        ANONYMOUS_CONSENT_STATUS.WITHDRAWN\r\n      );\r\n    }\r\n\r\n    case AnonymousConsentsActions.SET_ANONYMOUS_CONSENTS: {\r\n      return action.payload;\r\n    }\r\n  }\r\n\r\n  return state;\r\n}\r\n","import { InjectionToken, Provider } from '@angular/core';\r\nimport {\r\n  Action,\r\n  ActionReducer,\r\n  ActionReducerMap,\r\n  combineReducers,\r\n  MetaReducer,\r\n} from '@ngrx/store';\r\nimport { AuthActions } from '../../../auth/index';\r\nimport { ConsentTemplate } from '../../../model/consent.model';\r\nimport { SiteContextActions } from '../../../site-context/index';\r\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\r\nimport {\r\n  AnonymousConsentsState,\r\n  ANONYMOUS_CONSENTS,\r\n} from '../anonymous-consents-state';\r\nimport * as fromAnonymousConsentsBanner from './anonymous-consents-banner.reducer';\r\nimport * as fromAnonymousConsentsUpdate from './anonymous-consents-update.reducer';\r\nimport * as fromAnonymousConsents from './anonymous-consents.reducer';\r\n\r\nexport function getReducers(): ActionReducerMap<AnonymousConsentsState> {\r\n  return {\r\n    templates: loaderReducer<ConsentTemplate[]>(ANONYMOUS_CONSENTS),\r\n    consents: fromAnonymousConsents.reducer,\r\n    ui: combineReducers({\r\n      bannerDismissed: fromAnonymousConsentsBanner.reducer,\r\n      updated: fromAnonymousConsentsUpdate.reducer,\r\n    }),\r\n  };\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducerMap<\r\n  AnonymousConsentsState\r\n>> = new InjectionToken<ActionReducerMap<AnonymousConsentsState>>(\r\n  'AnonymousConsentsReducers'\r\n);\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n\r\nexport function clearAnonymousConsentTemplates(\r\n  reducer: ActionReducer<AnonymousConsentsState, Action>\r\n): ActionReducer<AnonymousConsentsState, Action> {\r\n  return function (state, action) {\r\n    if (\r\n      action.type === AuthActions.LOGOUT ||\r\n      action.type === SiteContextActions.LANGUAGE_CHANGE\r\n    ) {\r\n      state = {\r\n        ...state,\r\n        templates: undefined,\r\n      };\r\n    }\r\n    return reducer(state, action);\r\n  };\r\n}\r\n\r\nexport const metaReducers: MetaReducer<any>[] = [\r\n  clearAnonymousConsentTemplates,\r\n];\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { provideDefaultConfigFactory } from '../../config/config.module';\r\nimport { StateConfig, StorageSyncType } from '../../state/index';\r\nimport { StateModule } from '../../state/state.module';\r\nimport { ANONYMOUS_CONSENTS_STORE_FEATURE } from './anonymous-consents-state';\r\nimport { effects } from './effects/index';\r\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\r\n\r\nexport function anonymousConsentsStoreConfigFactory(): StateConfig {\r\n  const config: StateConfig = {\r\n    state: {\r\n      storageSync: {\r\n        keys: {\r\n          [ANONYMOUS_CONSENTS_STORE_FEATURE]: StorageSyncType.LOCAL_STORAGE,\r\n        },\r\n      },\r\n    },\r\n  };\r\n  return config;\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    StateModule,\r\n    StoreModule.forFeature(ANONYMOUS_CONSENTS_STORE_FEATURE, reducerToken, {\r\n      metaReducers,\r\n    }),\r\n    EffectsModule.forFeature(effects),\r\n  ],\r\n  providers: [\r\n    provideDefaultConfigFactory(anonymousConsentsStoreConfigFactory),\r\n    reducerProvider,\r\n  ],\r\n})\r\nexport class AnonymousConsentsStoreModule {}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '../config/config.module';\r\nimport { defaultAnonymousConsentsConfig } from './config/default-anonymous-consents-config';\r\nimport { AnonymousConsentsService } from './facade/anonymous-consents.service';\r\nimport { interceptors } from './http-interceptors/index';\r\nimport { AnonymousConsentsStoreModule } from './store/anonymous-consents-store.module';\r\n\r\n@NgModule({\r\n  imports: [AnonymousConsentsStoreModule],\r\n})\r\nexport class AnonymousConsentsModule {\r\n  static forRoot(): ModuleWithProviders<AnonymousConsentsModule> {\r\n    return {\r\n      ngModule: AnonymousConsentsModule,\r\n      providers: [\r\n        ...interceptors,\r\n        AnonymousConsentsService,\r\n        provideDefaultConfig(defaultAnonymousConsentsConfig),\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { AsmConfig } from './asm-config';\n\nexport const defaultAsmConfig: AsmConfig = {\n  asm: {\n    agentSessionTimer: {\n      startingDelayInSeconds: 600,\n    },\n    customerSearch: {\n      maxResults: 20,\n    },\n  },\n};\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { AsmUi, CustomerSearchPage } from '../models/asm.models';\nimport { UserToken } from '../../auth';\n\nexport const ASM_FEATURE = 'asm';\nexport const CUSTOMER_SEARCH_DATA = '[asm] Customer search data';\nexport const CSAGENT_TOKEN_DATA = '[Auth] Customer Support Agent Token Data';\n\nexport interface StateWithAsm {\n  [ASM_FEATURE]: AsmState;\n}\n\nexport interface AsmState {\n  customerSearchResult: LoaderState<CustomerSearchPage>;\n  asmUi: AsmUi;\n  csagentToken: LoaderState<UserToken>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmAdapter } from './asm.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmConnector {\n  constructor(protected asmAdapter: AsmAdapter) {}\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    return this.asmAdapter.customerSearch(options);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\n\nexport const ASM_UI_UPDATE = '[Asm] UI Update';\n\nexport class AsmUiUpdate implements Action {\n  readonly type = ASM_UI_UPDATE;\n  constructor(public payload: AsmUi) {}\n}\n// action types\nexport type AsmUiAction = AsmUiUpdate;\n","import { StateUtils } from '../../../state/utils/index';\r\nimport {\r\n  CustomerSearchOptions,\r\n  CustomerSearchPage,\r\n} from '../../models/asm.models';\r\nimport { CUSTOMER_SEARCH_DATA } from '../asm-state';\r\n\r\nexport const CUSTOMER_SEARCH = '[Asm] Customer Search';\r\nexport const CUSTOMER_SEARCH_FAIL = '[Asm] Customer Search Fail';\r\nexport const CUSTOMER_SEARCH_SUCCESS = '[Asm] Customer Search Success';\r\nexport const CUSTOMER_SEARCH_RESET = '[Asm] Customer Search Reset';\r\n\r\nexport class CustomerSearch extends StateUtils.LoaderLoadAction {\r\n  readonly type = CUSTOMER_SEARCH;\r\n  constructor(public payload: CustomerSearchOptions) {\r\n    super(CUSTOMER_SEARCH_DATA);\r\n  }\r\n}\r\n\r\nexport class CustomerSearchFail extends StateUtils.LoaderFailAction {\r\n  readonly type = CUSTOMER_SEARCH_FAIL;\r\n  constructor(public payload: any) {\r\n    super(CUSTOMER_SEARCH_DATA);\r\n  }\r\n}\r\n\r\nexport class CustomerSearchSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = CUSTOMER_SEARCH_SUCCESS;\r\n  constructor(public payload: CustomerSearchPage) {\r\n    super(CUSTOMER_SEARCH_DATA);\r\n  }\r\n}\r\n\r\nexport class CustomerSearchReset extends StateUtils.LoaderResetAction {\r\n  readonly type = CUSTOMER_SEARCH_RESET;\r\n  constructor() {\r\n    super(CUSTOMER_SEARCH_DATA);\r\n  }\r\n}\r\n\r\n// action types\r\nexport type CustomerAction =\r\n  | CustomerSearch\r\n  | CustomerSearchFail\r\n  | CustomerSearchSuccess\r\n  | CustomerSearchReset;\r\n","import { StateUtils } from '../../../state/utils/index';\r\nimport { UserToken } from '../../../auth/models/token-types.model';\r\nimport { CSAGENT_TOKEN_DATA } from '../asm-state';\r\nimport { Action } from '@ngrx/store';\r\nimport { LOGOUT_CUSTOMER_SUPPORT_AGENT } from '../../../auth/store/actions/login-logout.action';\r\n\r\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN =\r\n  '[Auth] Load Customer Service Agent Token';\r\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL =\r\n  '[Auth] Load Customer Service Agent Token Fail';\r\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS =\r\n  '[Auth] Load Customer Service Agent Token Success';\r\n\r\nexport class LoadCustomerSupportAgentToken extends StateUtils.LoaderLoadAction {\r\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN;\r\n\r\n  constructor(public payload: { userId: string; password: string }) {\r\n    super(CSAGENT_TOKEN_DATA);\r\n  }\r\n}\r\n\r\nexport class LoadCustomerSupportAgentTokenFail extends StateUtils.LoaderFailAction {\r\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL;\r\n  constructor(public payload: any) {\r\n    super(CSAGENT_TOKEN_DATA);\r\n  }\r\n}\r\n\r\nexport class LoadCustomerSupportAgentTokenSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS;\r\n  constructor(public payload: UserToken) {\r\n    super(CSAGENT_TOKEN_DATA);\r\n  }\r\n}\r\n\r\nexport class LogoutCustomerSupportAgent implements Action {\r\n  readonly type = LOGOUT_CUSTOMER_SUPPORT_AGENT;\r\n}\r\n\r\n// action types\r\nexport type CustomerSupportAgentTokenAction =\r\n  | LoadCustomerSupportAgentToken\r\n  | LoadCustomerSupportAgentTokenFail\r\n  | LoadCustomerSupportAgentTokenSuccess\r\n  | LogoutCustomerSupportAgent;\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { AsmConnector } from '../../connectors/asm.connector';\r\nimport { CustomerSearchPage } from '../../models/asm.models';\r\nimport { AsmActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class CustomerEffects {\r\n  @Effect()\r\n  customerSearch$: Observable<AsmActions.CustomerAction> = this.actions$.pipe(\r\n    ofType(AsmActions.CUSTOMER_SEARCH),\r\n    map((action: AsmActions.CustomerSearch) => action.payload),\r\n    switchMap((options) =>\r\n      this.asmConnector.customerSearch(options).pipe(\r\n        map((customerSearchResults: CustomerSearchPage) => {\r\n          return new AsmActions.CustomerSearchSuccess(customerSearchResults);\r\n        }),\r\n        catchError((error) =>\r\n          of(new AsmActions.CustomerSearchFail(makeErrorSerializable(error)))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(private actions$: Actions, private asmConnector: AsmConnector) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserToken } from '../../../auth/models/token-types.model';\r\nimport { UserAuthenticationTokenService } from '../../../auth/services/user-authentication/user-authentication-token.service';\r\nimport { AsmActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class CustomerSupportAgentTokenEffects {\r\n  @Effect()\r\n  loadCustomerSupportAgentToken$: Observable<\r\n    AsmActions.CustomerSupportAgentTokenAction\r\n  > = this.actions$.pipe(\r\n    ofType(AsmActions.LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN),\r\n    map((action: AsmActions.LoadCustomerSupportAgentToken) => action.payload),\r\n    switchMap(({ userId, password }) =>\r\n      this.userTokenService.loadToken(userId, password).pipe(\r\n        map((token: UserToken) => {\r\n          const date = new Date();\r\n          date.setSeconds(date.getSeconds() + token.expires_in);\r\n          token.expiration_time = date.toJSON();\r\n          return new AsmActions.LoadCustomerSupportAgentTokenSuccess(token);\r\n        }),\r\n        catchError((error) =>\r\n          of(\r\n            new AsmActions.LoadCustomerSupportAgentTokenFail(\r\n              makeErrorSerializable(error)\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userTokenService: UserAuthenticationTokenService\r\n  ) {}\r\n}\r\n","import { CustomerEffects } from './customer.effect';\nimport { CustomerSupportAgentTokenEffects } from './csagent-token.effect';\n\nexport const effects: any[] = [\n  CustomerEffects,\n  CustomerSupportAgentTokenEffects,\n];\n\nexport * from './customer.effect';\n","import { AsmUi } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\nexport const initialState: AsmUi = <AsmUi>{ collapsed: false };\n\nexport function reducer(\n  state = initialState,\n  action: AsmActions.AsmUiAction\n): AsmUi {\n  switch (action.type) {\n    case AsmActions.ASM_UI_UPDATE: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\r\nimport {\r\n  Action,\r\n  ActionReducer,\r\n  ActionReducerMap,\r\n  MetaReducer,\r\n} from '@ngrx/store';\r\nimport { AuthActions } from '../../../auth/store/actions/index';\r\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\r\nimport { CustomerSearchPage } from '../../models/asm.models';\r\nimport {\r\n  AsmState,\r\n  CSAGENT_TOKEN_DATA,\r\n  CUSTOMER_SEARCH_DATA,\r\n} from '../asm-state';\r\nimport * as fromAsmUiReducer from './asm-ui.reducer';\r\nimport { UserToken } from '../../../auth/models/token-types.model';\r\n\r\nexport function getReducers(): ActionReducerMap<AsmState> {\r\n  return {\r\n    customerSearchResult: loaderReducer<CustomerSearchPage>(\r\n      CUSTOMER_SEARCH_DATA\r\n    ),\r\n    asmUi: fromAsmUiReducer.reducer,\r\n    csagentToken: loaderReducer<UserToken>(CSAGENT_TOKEN_DATA),\r\n  };\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducerMap<\r\n  AsmState\r\n>> = new InjectionToken<ActionReducerMap<AsmState>>('AsmReducers');\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n\r\nexport function clearCustomerSupportAgentAsmState(\r\n  reducer: ActionReducer<AsmState, Action>\r\n): ActionReducer<AsmState, Action> {\r\n  return function (state, action) {\r\n    if (action.type === AuthActions.LOGOUT_CUSTOMER_SUPPORT_AGENT) {\r\n      state = {\r\n        ...state,\r\n        customerSearchResult: undefined,\r\n        csagentToken: undefined,\r\n      };\r\n    }\r\n    return reducer(state, action);\r\n  };\r\n}\r\n\r\nexport const metaReducers: MetaReducer<any>[] = [\r\n  clearCustomerSupportAgentAsmState,\r\n];\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { provideDefaultConfigFactory } from '../../config/config.module';\r\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\r\nimport { StateModule } from '../../state/state.module';\r\nimport { ASM_FEATURE } from './asm-state';\r\nimport { effects } from './effects/index';\r\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\r\n\r\nexport function asmStoreConfigFactory(): StateConfig {\r\n  const config: StateConfig = {\r\n    state: {\r\n      storageSync: {\r\n        keys: {\r\n          'asm.asmUi': StorageSyncType.LOCAL_STORAGE,\r\n          'asm.csagentToken.value.access_token': StorageSyncType.LOCAL_STORAGE,\r\n          'asm.csagentToken.value.token_type': StorageSyncType.LOCAL_STORAGE,\r\n          'asm.csagentToken.value.expires_in': StorageSyncType.LOCAL_STORAGE,\r\n          'asm.csagentToken.value.expiration_time':\r\n            StorageSyncType.LOCAL_STORAGE,\r\n          'asm.csagentToken.value.scope': StorageSyncType.LOCAL_STORAGE,\r\n          'asm.csagentToken.value.userId': StorageSyncType.LOCAL_STORAGE,\r\n        },\r\n      },\r\n    },\r\n  };\r\n  return config;\r\n}\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    StateModule,\r\n    StoreModule.forFeature(ASM_FEATURE, reducerToken, { metaReducers }),\r\n    EffectsModule.forFeature(effects),\r\n  ],\r\n  providers: [\r\n    provideDefaultConfigFactory(asmStoreConfigFactory),\r\n    reducerProvider,\r\n  ],\r\n})\r\nexport class AsmStoreModule {}\r\n","import { Translatable } from '../../i18n/translatable';\r\n\r\nexport enum GlobalMessageType {\r\n  MSG_TYPE_CONFIRMATION = '[GlobalMessage] Confirmation',\r\n  MSG_TYPE_ERROR = '[GlobalMessage] Error',\r\n  MSG_TYPE_INFO = '[GlobalMessage] Information',\r\n  MSG_TYPE_WARNING = '[GlobalMessage] Warning',\r\n}\r\n\r\nexport interface GlobalMessage {\r\n  text: Translatable;\r\n  type: GlobalMessageType;\r\n  timeout?: number;\r\n}\r\n","export enum HttpResponseStatus {\r\n  UNKNOWN = -1,\r\n  BAD_REQUEST = 400,\r\n  UNAUTHORIZED = 401,\r\n  FORBIDDEN = 403,\r\n  NOT_FOUND = 404,\r\n  CONFLICT = 409,\r\n  BAD_GATEWAY = 502,\r\n  GATEWAY_TIMEOUT = 504,\r\n  INTERNAL_SERVER_ERROR = 500,\r\n}\r\n","import { GlobalMessageType } from '../models/global-message.model';\r\nimport { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\nexport type GlobalMessageTypeConfig = {\r\n  timeout?: number;\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class GlobalMessageConfig {\r\n  globalMessages: {\r\n    [GlobalMessageType.MSG_TYPE_CONFIRMATION]?: GlobalMessageTypeConfig;\r\n    [GlobalMessageType.MSG_TYPE_INFO]?: GlobalMessageTypeConfig;\r\n    [GlobalMessageType.MSG_TYPE_ERROR]?: GlobalMessageTypeConfig;\r\n    [GlobalMessageType.MSG_TYPE_WARNING]?: GlobalMessageTypeConfig;\r\n  };\r\n}\r\n","import { Action } from '@ngrx/store';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\n\nexport const ADD_MESSAGE = '[Global-message] Add a Message';\nexport const REMOVE_MESSAGE = '[Global-message] Remove a Message';\nexport const REMOVE_MESSAGES_BY_TYPE =\n  '[Global-message] Remove messages by type';\n\nexport class AddMessage implements Action {\n  readonly type = ADD_MESSAGE;\n  constructor(public payload: GlobalMessage) {}\n}\n\nexport class RemoveMessage implements Action {\n  readonly type = REMOVE_MESSAGE;\n  constructor(public payload: { type: GlobalMessageType; index: number }) {}\n}\n\nexport class RemoveMessagesByType implements Action {\n  readonly type = REMOVE_MESSAGES_BY_TYPE;\n  constructor(public payload: GlobalMessageType) {}\n}\n\nexport type GlobalMessageAction =\n  | AddMessage\n  | RemoveMessage\n  | RemoveMessagesByType;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  GlobalMessageState,\n  GLOBAL_MESSAGE_FEATURE,\n  StateWithGlobalMessage,\n} from '../global-message-state';\n\nexport const getGlobalMessageState: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageState\n> = createFeatureSelector<GlobalMessageState>(GLOBAL_MESSAGE_FEATURE);\n","import { Translatable } from '../../i18n/translatable';\n\nexport const GLOBAL_MESSAGE_FEATURE = 'global-message';\n\nexport interface StateWithGlobalMessage {\n  [GLOBAL_MESSAGE_FEATURE]: GlobalMessageState;\n}\n\nexport interface GlobalMessageState {\n  entities: GlobalMessageEntities;\n}\n\nexport interface GlobalMessageEntities {\n  [messageType: string]: Translatable[];\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { Translatable } from '../../../i18n/translatable';\r\nimport { GlobalMessageType } from '../../models/global-message.model';\r\nimport {\r\n  GlobalMessageEntities,\r\n  GlobalMessageState,\r\n  StateWithGlobalMessage,\r\n} from '../global-message-state';\r\nimport { getGlobalMessageState } from './feature.selector';\r\n\r\nexport const getGlobalMessageEntities: MemoizedSelector<\r\n  StateWithGlobalMessage,\r\n  GlobalMessageEntities\r\n> = createSelector(\r\n  getGlobalMessageState,\r\n  (state: GlobalMessageState) => state.entities\r\n);\r\n\r\nexport const getGlobalMessageEntitiesByType = (\r\n  type: GlobalMessageType\r\n): MemoizedSelector<StateWithGlobalMessage, Translatable[]> => {\r\n  return createSelector(\r\n    getGlobalMessageEntities,\r\n    (entities) => entities && entities[type]\r\n  );\r\n};\r\n\r\nexport const getGlobalMessageCountByType = (\r\n  type: GlobalMessageType\r\n): MemoizedSelector<StateWithGlobalMessage, number> => {\r\n  return createSelector(\r\n    getGlobalMessageEntitiesByType(type),\r\n    (entities) => entities && entities.length\r\n  );\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { Translatable } from '../../i18n/translatable';\r\nimport { GlobalMessageType } from '../models/global-message.model';\r\nimport { GlobalMessageActions } from '../store/actions/index';\r\nimport {\r\n  GlobalMessageEntities,\r\n  StateWithGlobalMessage,\r\n} from '../store/global-message-state';\r\nimport { GlobalMessageSelectors } from '../store/selectors/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class GlobalMessageService {\r\n  constructor(protected store: Store<StateWithGlobalMessage>) {}\r\n\r\n  /**\r\n   * Get all global messages\r\n   */\r\n  get(): Observable<GlobalMessageEntities> {\r\n    return this.store.pipe(\r\n      select(GlobalMessageSelectors.getGlobalMessageEntities),\r\n      filter((data) => data !== undefined)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Add one message into store\r\n   * @param text: string | Translatable\r\n   * @param type: GlobalMessageType object\r\n   * @param timeout: number\r\n   */\r\n  add(\r\n    text: string | Translatable,\r\n    type: GlobalMessageType,\r\n    timeout?: number\r\n  ): void {\r\n    this.store.dispatch(\r\n      new GlobalMessageActions.AddMessage({\r\n        text: typeof text === 'string' ? { raw: text } : text,\r\n        type,\r\n        timeout,\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Remove message(s) from store\r\n   * @param type: GlobalMessageType\r\n   * @param index:optional. Without it, messages will be removed by type; otherwise,\r\n   * message will be removed from list by index.\r\n   */\r\n  remove(type: GlobalMessageType, index?: number): void {\r\n    this.store.dispatch(\r\n      index !== undefined\r\n        ? new GlobalMessageActions.RemoveMessage({\r\n            type: type,\r\n            index: index,\r\n          })\r\n        : new GlobalMessageActions.RemoveMessagesByType(type)\r\n    );\r\n  }\r\n}\r\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\r\nimport { GlobalMessageService } from '../../facade/global-message.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { Applicable, Priority } from '../../../util/applicable';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport abstract class HttpErrorHandler implements Applicable {\r\n  constructor(protected globalMessageService: GlobalMessageService) {}\r\n\r\n  /**\r\n   * The http response status number which is handled by this handler.\r\n   * Implementations can set the response status number, i.e. 404, so that\r\n   * the handler can be found by the error interceptor.\r\n   */\r\n  responseStatus?: number;\r\n\r\n  /**\r\n   * Handles the error response for the respose status that is register for the handler\r\n   * @param { HttpRequest<any> } request : http request\r\n   * @param { HttpErrorResponse } errorResponse : Http error response\r\n   */\r\n  abstract handleError(\r\n    request: HttpRequest<any>,\r\n    errorResponse: HttpErrorResponse\r\n  ): void;\r\n\r\n  /**\r\n   * Error handlers are matched by the error `responseStatus` (i.e. 404). On top of the matching status\r\n   * a priority can be added to distinguish multiple handles for the same response status.\r\n   */\r\n  hasMatch(errorResponse: HttpErrorResponse): boolean {\r\n    return errorResponse.status === this.responseStatus;\r\n  }\r\n\r\n  abstract getPriority?(): Priority;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { GlobalMessageType } from '../../../models/global-message.model';\r\nimport { HttpResponseStatus } from '../../../models/response-status.model';\r\nimport { HttpErrorHandler } from '../http-error.handler';\r\nimport { Priority } from '../../../../util/applicable';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BadGatewayHandler extends HttpErrorHandler {\r\n  responseStatus = HttpResponseStatus.BAD_GATEWAY;\r\n\r\n  handleError() {\r\n    this.globalMessageService.add(\r\n      { key: 'httpHandlers.badGateway' },\r\n      GlobalMessageType.MSG_TYPE_ERROR\r\n    );\r\n  }\r\n\r\n  getPriority(): Priority {\r\n    return Priority.LOW;\r\n  }\r\n}\r\n","import { ErrorModel } from '../../model';\r\nimport { Cart } from '../../model/cart.model';\r\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\r\n\r\n/**\r\n * Extract cart identifier for current user. Anonymous calls use `guid` and for logged users `code` is used.\r\n */\r\nexport function getCartIdByUserId(cart: Cart, userId: string): string {\r\n  if (userId === OCC_USER_ID_ANONYMOUS) {\r\n    return cart.guid;\r\n  }\r\n  return cart.code;\r\n}\r\n\r\n/**\r\n * Check if cart is selective (save for later) based on id.\r\n */\r\nexport function isSelectiveCart(cartId = ''): boolean {\r\n  return cartId.startsWith('selectivecart');\r\n}\r\n\r\n/**\r\n * Check if the returned error is of type notFound.\r\n *\r\n * We additionally check if the cart is not a selective cart.\r\n * For selective cart this error can happen only when extension is disabled.\r\n * It should never happen, because in that case, selective cart should also be disabled in our configuration.\r\n * However if that happens we want to handle these errors silently.\r\n */\r\nexport function isCartNotFoundError(error: ErrorModel): boolean {\r\n  return (\r\n    error.reason === 'notFound' &&\r\n    error.subjectType === 'cart' &&\r\n    !isSelectiveCart(error.subject)\r\n  );\r\n}\r\n\r\n/**\r\n * Compute wishlist cart name for customer.\r\n */\r\nexport function getWishlistName(customerId: string): string {\r\n  return `wishlist${customerId}`;\r\n}\r\n\r\n/**\r\n * What is a temporary cart?\r\n * - frontend only cart entity!\r\n * - can be identified in store by `temp-` prefix with some unique id (multiple carts can be created at the same time eg. active cart, wishlist)\r\n *\r\n * Why we need temporary carts?\r\n * - to have information about cart creation process (meta flags: loading, error - for showing loader, error message)\r\n * - to know if there is currently a cart creation process in progress (eg. so, we don't create more than one active cart at the same time)\r\n * - cart identifiers are created in the backend, so those are only known after cart is created\r\n *\r\n * Temporary cart life cycle\r\n * - create cart method invoked\r\n * - new `temp-${uuid}` cart is created with `loading=true` state\r\n * - backend returns created cart\r\n * - normal cart entity is saved under correct id (eg. for logged user under cart `code` key)\r\n * - temporary cart value is set to backend response (anyone observing this cart can read code/guid from it and switch selector to normal cart)\r\n * - in next tick temporary cart is removed\r\n */\r\nexport function isTempCartId(cartId: string): boolean {\r\n  return cartId.startsWith('temp-');\r\n}\r\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { isCartNotFoundError } from '../../../../cart/utils/utils';\r\nimport { ErrorModel } from '../../../../model/misc.model';\r\nimport { Priority } from '../../../../util/applicable';\r\nimport { GlobalMessageType } from '../../../models/global-message.model';\r\nimport { HttpResponseStatus } from '../../../models/response-status.model';\r\nimport { HttpErrorHandler } from '../http-error.handler';\r\n\r\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BadRequestHandler extends HttpErrorHandler {\r\n  responseStatus = HttpResponseStatus.BAD_REQUEST;\r\n\r\n  handleError(request: HttpRequest<any>, response: HttpErrorResponse): void {\r\n    this.handleBadPassword(request, response);\r\n    this.handleBadLoginResponse(request, response);\r\n    this.handleBadCartRequest(request, response);\r\n    this.handleValidationError(request, response);\r\n    this.handleVoucherOperationError(request, response);\r\n  }\r\n\r\n  protected handleBadPassword(\r\n    request: HttpRequest<any>,\r\n    response: HttpErrorResponse\r\n  ): void {\r\n    if (\r\n      response.url?.includes(OAUTH_ENDPOINT) &&\r\n      response.error?.error === 'invalid_grant' &&\r\n      request.body?.get('grant_type') === 'password'\r\n    ) {\r\n      this.globalMessageService.add(\r\n        {\r\n          key: 'httpHandlers.badRequestPleaseLoginAgain',\r\n          params: {\r\n            errorMessage:\r\n              response.error.error_description || response.message || '',\r\n          },\r\n        },\r\n        GlobalMessageType.MSG_TYPE_ERROR\r\n      );\r\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_CONFIRMATION);\r\n    }\r\n  }\r\n\r\n  protected handleBadLoginResponse(\r\n    _request: HttpRequest<any>,\r\n    response: HttpErrorResponse\r\n  ) {\r\n    this.getErrors(response)\r\n      .filter((error) => error.type === 'PasswordMismatchError')\r\n      .forEach(() => {\r\n        this.globalMessageService.add(\r\n          { key: 'httpHandlers.badRequestOldPasswordIncorrect' },\r\n          GlobalMessageType.MSG_TYPE_ERROR\r\n        );\r\n      });\r\n  }\r\n\r\n  protected handleValidationError(\r\n    _request: HttpRequest<any>,\r\n    response: HttpErrorResponse\r\n  ): void {\r\n    this.getErrors(response)\r\n      .filter((e) => e.type === 'ValidationError')\r\n      .forEach((error) => {\r\n        this.globalMessageService.add(\r\n          {\r\n            key: `httpHandlers.validationErrors.${error.reason}.${error.subject}`,\r\n          },\r\n          GlobalMessageType.MSG_TYPE_ERROR\r\n        );\r\n      });\r\n  }\r\n\r\n  protected handleBadCartRequest(\r\n    _request: HttpRequest<any>,\r\n    response: HttpErrorResponse\r\n  ): void {\r\n    this.getErrors(response)\r\n      .filter((e) => isCartNotFoundError(e))\r\n      .forEach(() => {\r\n        this.globalMessageService.add(\r\n          { key: 'httpHandlers.cartNotFound' },\r\n          GlobalMessageType.MSG_TYPE_ERROR\r\n        );\r\n      });\r\n  }\r\n\r\n  protected handleVoucherOperationError(\r\n    _request: HttpRequest<any>,\r\n    response: HttpErrorResponse\r\n  ): void {\r\n    this.getErrors(response)\r\n      .filter(\r\n        (e) =>\r\n          e.message === 'coupon.invalid.code.provided' &&\r\n          e.type === 'VoucherOperationError'\r\n      )\r\n      .forEach(() => {\r\n        this.globalMessageService.add(\r\n          { key: 'httpHandlers.invalidCodeProvided' },\r\n          GlobalMessageType.MSG_TYPE_ERROR\r\n        );\r\n      });\r\n  }\r\n\r\n  protected getErrors(response: HttpErrorResponse): ErrorModel[] {\r\n    return (response.error?.errors || []).filter(\r\n      (error) => error.type !== 'JaloObjectNoLongerValidError'\r\n    );\r\n  }\r\n\r\n  getPriority(): Priority {\r\n    return Priority.LOW;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { GlobalMessageType } from '../../../models/global-message.model';\r\nimport { HttpResponseStatus } from '../../../models/response-status.model';\r\nimport { HttpErrorHandler } from '../http-error.handler';\r\nimport { Priority } from '../../../../util/applicable';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ConflictHandler extends HttpErrorHandler {\r\n  responseStatus = HttpResponseStatus.CONFLICT;\r\n\r\n  handleError() {\r\n    this.globalMessageService.add(\r\n      { key: 'httpHandlers.conflict' },\r\n      GlobalMessageType.MSG_TYPE_ERROR\r\n    );\r\n  }\r\n\r\n  getPriority(): Priority {\r\n    return Priority.LOW;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { GlobalMessageType } from '../../../models/global-message.model';\r\nimport { HttpResponseStatus } from '../../../models/response-status.model';\r\nimport { HttpErrorHandler } from '../http-error.handler';\r\nimport { Priority } from '../../../../util/applicable';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ForbiddenHandler extends HttpErrorHandler {\r\n  responseStatus = HttpResponseStatus.FORBIDDEN;\r\n\r\n  handleError() {\r\n    this.globalMessageService.add(\r\n      { key: 'httpHandlers.forbidden' },\r\n      GlobalMessageType.MSG_TYPE_ERROR\r\n    );\r\n  }\r\n\r\n  getPriority(): Priority {\r\n    return Priority.LOW;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { GlobalMessageType } from '../../../models/global-message.model';\r\nimport { HttpResponseStatus } from '../../../models/response-status.model';\r\nimport { HttpErrorHandler } from '../http-error.handler';\r\nimport { Priority } from '../../../../util/applicable';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class GatewayTimeoutHandler extends HttpErrorHandler {\r\n  responseStatus = HttpResponseStatus.GATEWAY_TIMEOUT;\r\n\r\n  handleError() {\r\n    this.globalMessageService.add(\r\n      { key: 'httpHandlers.gatewayTimeout' },\r\n      GlobalMessageType.MSG_TYPE_ERROR\r\n    );\r\n  }\r\n\r\n  getPriority(): Priority {\r\n    return Priority.LOW;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { GlobalMessageType } from '../../../models/global-message.model';\r\nimport { HttpResponseStatus } from '../../../models/response-status.model';\r\nimport { HttpErrorHandler } from '../http-error.handler';\r\nimport { Priority } from '../../../../util/applicable';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class InternalServerErrorHandler extends HttpErrorHandler {\r\n  responseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\r\n\r\n  handleError() {\r\n    this.globalMessageService.add(\r\n      { key: 'httpHandlers.internalServerError' },\r\n      GlobalMessageType.MSG_TYPE_ERROR\r\n    );\r\n  }\r\n\r\n  getPriority(): Priority {\r\n    return Priority.LOW;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpResponseStatus } from '../../../models/response-status.model';\r\nimport { HttpErrorHandler } from '../http-error.handler';\r\nimport { Priority } from '../../../../util/applicable';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NotFoundHandler extends HttpErrorHandler {\r\n  responseStatus = HttpResponseStatus.NOT_FOUND;\r\n\r\n  // empty error handler to avoid we fallabck to the unknown error handler\r\n  handleError(): void {}\r\n\r\n  getPriority() {\r\n    return Priority.LOW;\r\n  }\r\n}\r\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\r\nimport { Injectable, isDevMode } from '@angular/core';\r\nimport { GlobalMessageService } from '../../../facade/global-message.service';\r\nimport { GlobalMessageType } from '../../../models/global-message.model';\r\nimport { HttpResponseStatus } from '../../../models/response-status.model';\r\nimport { HttpErrorHandler } from './../http-error.handler';\r\nimport { Priority } from '../../../../util/applicable';\r\n\r\n/**\r\n * Handles Oauth client errors when a 401 is returned. This is the case for failing\r\n * authenticaton requests to OCC.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UnauthorizedErrorHandler extends HttpErrorHandler {\r\n  responseStatus = HttpResponseStatus.UNAUTHORIZED;\r\n\r\n  constructor(protected globalMessageService: GlobalMessageService) {\r\n    super(globalMessageService);\r\n  }\r\n\r\n  handleError(_request: HttpRequest<any>, response: HttpErrorResponse): void {\r\n    if (isDevMode()) {\r\n      console.warn(\r\n        `There's a problem with the \"Oauth client\" configuration. You must configure a matching Oauth client in the backend and Spartacus.`\r\n      );\r\n    }\r\n\r\n    if (response.error?.error === 'invalid_client') {\r\n      this.globalMessageService.add(\r\n        response.error?.error_description || {\r\n          key: 'httpHandlers.unauthorized.invalid_client',\r\n        },\r\n        GlobalMessageType.MSG_TYPE_ERROR\r\n      );\r\n    } else {\r\n      this.globalMessageService.add(\r\n        { key: 'httpHandlers.unauthorized.common' },\r\n        GlobalMessageType.MSG_TYPE_ERROR\r\n      );\r\n    }\r\n  }\r\n\r\n  getPriority() {\r\n    return Priority.LOW;\r\n  }\r\n}\r\n","import { Injectable, isDevMode } from '@angular/core';\r\nimport { HttpResponseStatus } from '../../../models/response-status.model';\r\nimport { HttpErrorHandler } from '../http-error.handler';\r\nimport { Priority } from '../../../../util/applicable';\r\n\r\n/**\r\n * Unknown Error Handler works as an fallback, to handle errors that were\r\n * not handled by any other error handlers\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UnknownErrorHandler extends HttpErrorHandler {\r\n  responseStatus = HttpResponseStatus.UNKNOWN;\r\n\r\n  /**\r\n   * hasMatch always returns true, to mach all errors\r\n   */\r\n  hasMatch(_errorResponse): boolean {\r\n    return true;\r\n  }\r\n\r\n  handleError() {\r\n    if (isDevMode()) {\r\n      console.warn(`Unknown http response error: ${this.responseStatus}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fallback priority assures that the handler is used as a last resort\r\n   */\r\n  getPriority() {\r\n    return Priority.FALLBACK;\r\n  }\r\n}\r\n","export const enum Priority {\r\n  /**\r\n   * Used as fallback, when there is no other matches\r\n   */\r\n  FALLBACK = -50,\r\n  /**\r\n   * Used mainly in libraries, easy overridable\r\n   */\r\n  LOW = -10,\r\n  /**\r\n   * Default priority\r\n   */\r\n  NORMAL = 0,\r\n  /**\r\n   * High priority for matches that should take precedence\r\n   */\r\n  HIGH = 10,\r\n}\r\n\r\n/**\r\n * Base interface for implementing applicables in a consistent way\r\n *\r\n * Applicables are mainly used to find best matching one from multi provided\r\n * classes, like handlers, resolvers, etc.\r\n */\r\nexport interface Applicable {\r\n  /**\r\n   * Returns true if applicable can be used to handle specified condition\r\n   */\r\n  hasMatch?(...params): boolean;\r\n\r\n  /**\r\n   * Returns priority or score for specified applicable.\r\n   *\r\n   * If multiple applicables can be applied to specified condition, the one\r\n   * with highest priority or score wins.\r\n   */\r\n  getPriority?(...params): Priority | number;\r\n}\r\n\r\n/**\r\n * Helper logic to resolve best matching Applicable\r\n *\r\n * Finding best match is a two step process:\r\n * 1. Find all matching applicables\r\n *    - all applicables for which hasMatch(...matchParams) will return true\r\n *    - all applicables without hasMatch method (implicit always match)\r\n * 2. Find the applicable with highest priority\r\n *    - applicable with highest getPriority(...priorityParams) will win\r\n *    - applicable without getPriority method is treated as Priotity.NORMAL or 0\r\n *    - applicables with the same priority are sorted by order of providers, the applicable that was provided later wins\r\n *\r\n * @param applicables - array or applicable-like instancese\r\n * @param matchParams - array of parameters passed for hasMatch calls\r\n * @param priorityParams - array of parameters passed for getPriority calls\r\n */\r\nexport function resolveApplicable<T extends Applicable>(\r\n  applicables: T[] = [],\r\n  matchParams: any[] = [],\r\n  priorityParams: any[] = []\r\n): T | undefined {\r\n  const matchedApplicables = applicables.filter(\r\n    (applicable) => !applicable.hasMatch || applicable.hasMatch(...matchParams)\r\n  );\r\n\r\n  if (matchedApplicables.length < 2) {\r\n    return matchedApplicables[0];\r\n  }\r\n\r\n  let lastPriority = -Infinity;\r\n  return matchedApplicables.reduce((acc, curr) => {\r\n    const currPriority = curr.getPriority\r\n      ? curr.getPriority(...priorityParams)\r\n      : Priority.NORMAL;\r\n    if (lastPriority > currPriority) {\r\n      return acc;\r\n    }\r\n    lastPriority = currPriority;\r\n    return curr;\r\n  }, undefined);\r\n}\r\n","import {\r\n  HttpErrorResponse,\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { HttpErrorHandler } from './handlers/http-error.handler';\r\nimport { resolveApplicable } from '../../util/applicable';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class HttpErrorInterceptor implements HttpInterceptor {\r\n  constructor(\r\n    @Inject(HttpErrorHandler) protected handlers: HttpErrorHandler[]\r\n  ) {}\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    return next.handle(request).pipe(\r\n      catchError((response: any) => {\r\n        if (response instanceof HttpErrorResponse) {\r\n          this.handleErrorResponse(request, response);\r\n          return throwError(response);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  protected handleErrorResponse(\r\n    request: HttpRequest<any>,\r\n    response: HttpErrorResponse\r\n  ): void {\r\n    const handler = this.getResponseHandler(response);\r\n    if (handler) {\r\n      handler.handleError(request, response);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * return the error handler that matches the `HttpResponseStatus` code.\r\n   * If no handler is available, the UNKNOWN handler is returned.\r\n   */\r\n  protected getResponseHandler(response: HttpErrorResponse): HttpErrorHandler {\r\n    return resolveApplicable(this.handlers, [response]);\r\n  }\r\n}\r\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { Provider } from '@angular/core';\r\nimport {\r\n  BadGatewayHandler,\r\n  BadRequestHandler,\r\n  ConflictHandler,\r\n  ForbiddenHandler,\r\n  GatewayTimeoutHandler,\r\n  HttpErrorHandler,\r\n  InternalServerErrorHandler,\r\n  NotFoundHandler,\r\n  UnauthorizedErrorHandler,\r\n  UnknownErrorHandler,\r\n} from './handlers/index';\r\nimport { HttpErrorInterceptor } from './http-error.interceptor';\r\n\r\nexport const errorHandlers: Provider[] = [\r\n  {\r\n    provide: HttpErrorHandler,\r\n    useExisting: UnknownErrorHandler,\r\n    multi: true,\r\n  },\r\n  {\r\n    provide: HttpErrorHandler,\r\n    useExisting: BadGatewayHandler,\r\n    multi: true,\r\n  },\r\n  {\r\n    provide: HttpErrorHandler,\r\n    useExisting: BadRequestHandler,\r\n    multi: true,\r\n  },\r\n  {\r\n    provide: HttpErrorHandler,\r\n    useExisting: ConflictHandler,\r\n    multi: true,\r\n  },\r\n  {\r\n    provide: HttpErrorHandler,\r\n    useExisting: ForbiddenHandler,\r\n    multi: true,\r\n  },\r\n  {\r\n    provide: HttpErrorHandler,\r\n    useExisting: GatewayTimeoutHandler,\r\n    multi: true,\r\n  },\r\n  {\r\n    provide: HttpErrorHandler,\r\n    useExisting: InternalServerErrorHandler,\r\n    multi: true,\r\n  },\r\n  {\r\n    provide: HttpErrorHandler,\r\n    useExisting: NotFoundHandler,\r\n    multi: true,\r\n  },\r\n  {\r\n    provide: HttpErrorHandler,\r\n    useExisting: UnauthorizedErrorHandler,\r\n    multi: true,\r\n  },\r\n];\r\n\r\nexport const httpErrorInterceptors: Provider[] = [\r\n  {\r\n    provide: HTTP_INTERCEPTORS,\r\n    useExisting: HttpErrorInterceptor,\r\n    multi: true,\r\n  },\r\n];\r\n","import { Translatable } from '../../../i18n/translatable';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { GlobalMessageState } from '../global-message-state';\n\nexport const initialState: GlobalMessageState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: GlobalMessageActions.GlobalMessageAction\n): GlobalMessageState {\n  switch (action.type) {\n    case GlobalMessageActions.ADD_MESSAGE: {\n      const message: GlobalMessage = action.payload;\n\n      if (state.entities[message.type] === undefined) {\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [message.text],\n          },\n        };\n      } else {\n        const currentMessages: Translatable[] = state.entities[message.type];\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [...currentMessages, message.text],\n          },\n        };\n      }\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGE: {\n      const msgType: GlobalMessageType = action.payload.type;\n      const msgIndex: number = action.payload.index;\n      if (\n        Object.keys(state.entities).length === 0 ||\n        !state.entities[msgType]\n      ) {\n        return state;\n      }\n\n      const messages = [...state.entities[msgType]];\n      messages.splice(msgIndex, 1);\n\n      return {\n        ...state,\n        entities: {\n          ...state.entities,\n          [msgType]: messages,\n        },\n      };\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGES_BY_TYPE: {\n      const entities = {\n        ...state.entities,\n        [action.payload]: [],\n      };\n      return {\n        ...state,\n        entities,\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\r\nimport * as fromGlobalMessage from './global-message.reducer';\r\nimport { GlobalMessageState } from '../global-message-state';\r\nimport { ActionReducer } from '@ngrx/store';\r\n\r\nexport function getReducers(): ActionReducer<GlobalMessageState> {\r\n  return fromGlobalMessage.reducer;\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducer<\r\n  GlobalMessageState\r\n>> = new InjectionToken<ActionReducer<GlobalMessageState>>(\r\n  'GlobalMessageReducers'\r\n);\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { GLOBAL_MESSAGE_FEATURE } from './global-message-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    StateModule,\n    StoreModule.forFeature(GLOBAL_MESSAGE_FEATURE, reducerToken),\n  ],\n  providers: [reducerProvider],\n})\nexport class GlobalMessageStoreModule {}\n","export function shallowEqualObjects(objA: object, objB: object): boolean {\r\n  if (objA === objB) {\r\n    return true;\r\n  }\r\n  if (!objA || !objB) {\r\n    return false;\r\n  }\r\n  const aKeys = Object.keys(objA);\r\n  const bKeys = Object.keys(objB);\r\n  const aKeysLen = aKeys.length;\r\n  const bKeysLen = bKeys.length;\r\n\r\n  if (aKeysLen !== bKeysLen) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < aKeysLen; i++) {\r\n    const key = aKeys[i];\r\n    if (objA[key] !== objB[key]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function deepEqualObjects(objA: object, objB: object): boolean {\r\n  if (objA === objB) {\r\n    return true; // if both objA and objB are null or undefined and exactly the same\r\n  } else if (!(objA instanceof Object) || !(objB instanceof Object)) {\r\n    return false; // if they are not strictly equal, they both need to be Objects\r\n  } else if (objA.constructor !== objB.constructor) {\r\n    // they must have the exact same prototype chain, the closest we can do is\r\n    // test their constructor.\r\n    return false;\r\n  } else {\r\n    for (const key in objA) {\r\n      if (!objA.hasOwnProperty(key)) {\r\n        continue; // other properties were tested using objA.constructor === y.constructor\r\n      }\r\n      if (!objB.hasOwnProperty(key)) {\r\n        return false; // allows to compare objA[ key ] and objB[ key ] when set to undefined\r\n      }\r\n      if (objA[key] === objB[key]) {\r\n        continue; // if they have the same strict value or identity then they are equal\r\n      }\r\n      if (typeof objA[key] !== 'object') {\r\n        return false; // Numbers, Strings, Functions, Booleans must be strictly equal\r\n      }\r\n      if (!deepEqualObjects(objA[key], objB[key])) {\r\n        return false;\r\n      }\r\n    }\r\n    for (const key in objB) {\r\n      if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport function countOfDeepEqualObjects(obj: any, arr: Array<any>): number {\r\n  return arr.reduce((acc, curr) => {\r\n    if (deepEqualObjects(obj, curr)) {\r\n      acc++;\r\n    }\r\n    return acc;\r\n  }, 0);\r\n}\r\n\r\nexport function indexOfFirstOccurrence(\r\n  obj: any,\r\n  arr: Array<any>\r\n): number | undefined {\r\n  for (let index = 0; index < arr.length; index++) {\r\n    if (deepEqualObjects(arr[index], obj)) {\r\n      return index;\r\n    }\r\n  }\r\n}\r\n","import { isPlatformBrowser } from '@angular/common';\r\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { EMPTY, Observable, of } from 'rxjs';\r\nimport {\r\n  concatMap,\r\n  delay,\r\n  filter,\r\n  map,\r\n  pluck,\r\n  switchMap,\r\n  take,\r\n  withLatestFrom,\r\n} from 'rxjs/operators';\r\nimport { Translatable } from '../../../i18n/translatable';\r\nimport {\r\n  countOfDeepEqualObjects,\r\n  indexOfFirstOccurrence,\r\n} from '../../../util/compare-equal-objects';\r\nimport { GlobalMessageConfig } from '../../config/global-message-config';\r\nimport { GlobalMessage } from '../../models/global-message.model';\r\nimport { GlobalMessageActions } from '../actions/index';\r\nimport { StateWithGlobalMessage } from '../global-message-state';\r\nimport { GlobalMessageSelectors } from '../selectors/index';\r\n\r\n@Injectable()\r\nexport class GlobalMessageEffect {\r\n  @Effect()\r\n  removeDuplicated$: Observable<\r\n    GlobalMessageActions.RemoveMessage\r\n  > = this.actions$.pipe(\r\n    ofType(GlobalMessageActions.ADD_MESSAGE),\r\n    pluck('payload'),\r\n    switchMap((message: GlobalMessage) =>\r\n      of(message.text).pipe(\r\n        withLatestFrom(\r\n          this.store.pipe(\r\n            select(\r\n              GlobalMessageSelectors.getGlobalMessageEntitiesByType(\r\n                message.type\r\n              )\r\n            )\r\n          )\r\n        ),\r\n        filter(\r\n          ([text, messages]: [Translatable, Translatable[]]) =>\r\n            countOfDeepEqualObjects(text, messages) > 1\r\n        ),\r\n        map(\r\n          ([text, messages]: [Translatable, Translatable[]]) =>\r\n            new GlobalMessageActions.RemoveMessage({\r\n              type: message.type,\r\n              index: indexOfFirstOccurrence(text, messages),\r\n            })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  hideAfterDelay$: Observable<\r\n    GlobalMessageActions.RemoveMessage\r\n  > = isPlatformBrowser(this.platformId) // we don't want to run this logic when doing SSR\r\n    ? this.actions$.pipe(\r\n        ofType(GlobalMessageActions.ADD_MESSAGE),\r\n        pluck('payload'),\r\n        concatMap((message: GlobalMessage) => {\r\n          const config = this.config.globalMessages[message.type];\r\n          return this.store.pipe(\r\n            select(\r\n              GlobalMessageSelectors.getGlobalMessageCountByType(message.type)\r\n            ),\r\n            take(1),\r\n            filter(\r\n              (count: number) =>\r\n                ((config && config.timeout !== undefined) || message.timeout) &&\r\n                count &&\r\n                count > 0\r\n            ),\r\n            delay(message.timeout || config.timeout),\r\n            switchMap(() =>\r\n              of(\r\n                new GlobalMessageActions.RemoveMessage({\r\n                  type: message.type,\r\n                  index: 0,\r\n                })\r\n              )\r\n            )\r\n          );\r\n        })\r\n      )\r\n    : EMPTY;\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private store: Store<StateWithGlobalMessage>,\r\n    private config: GlobalMessageConfig,\r\n    @Inject(PLATFORM_ID) private platformId: any\r\n  ) {}\r\n}\r\n","import { GlobalMessageType } from '../models/global-message.model';\r\nimport { GlobalMessageConfig } from './global-message-config';\r\n\r\nexport function defaultGlobalMessageConfigFactory(): GlobalMessageConfig {\r\n  return {\r\n    globalMessages: {\r\n      [GlobalMessageType.MSG_TYPE_CONFIRMATION]: {\r\n        timeout: 3000,\r\n      },\r\n      [GlobalMessageType.MSG_TYPE_INFO]: {\r\n        timeout: 3000,\r\n      },\r\n      [GlobalMessageType.MSG_TYPE_ERROR]: {\r\n        timeout: 7000,\r\n      },\r\n      [GlobalMessageType.MSG_TYPE_WARNING]: {\r\n        timeout: 7000,\r\n      },\r\n    },\r\n  };\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport {\r\n  errorHandlers,\r\n  httpErrorInterceptors,\r\n} from './http-interceptors/index';\r\nimport { GlobalMessageStoreModule } from './store/global-message-store.module';\r\nimport { GlobalMessageEffect } from './store/effects/global-message.effect';\r\n\r\nimport { provideDefaultConfigFactory } from '../config/config.module';\r\nimport { defaultGlobalMessageConfigFactory } from './config/default-global-message-config';\r\n\r\n@NgModule({\r\n  imports: [\r\n    GlobalMessageStoreModule,\r\n    EffectsModule.forFeature([GlobalMessageEffect]),\r\n  ],\r\n  providers: [provideDefaultConfigFactory(defaultGlobalMessageConfigFactory)],\r\n})\r\nexport class GlobalMessageModule {\r\n  static forRoot(): ModuleWithProviders<GlobalMessageModule> {\r\n    return {\r\n      ngModule: GlobalMessageModule,\r\n      providers: [...errorHandlers, ...httpErrorInterceptors],\r\n    };\r\n  }\r\n}\r\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmState, ASM_FEATURE, StateWithAsm } from '../asm-state';\n\nexport const getAsmState: MemoizedSelector<\n  StateWithAsm,\n  AsmState\n> = createFeatureSelector<AsmState>(ASM_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getAsmUi: MemoizedSelector<StateWithAsm, AsmUi> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.asmUi\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { CustomerSearchPage } from '../../models/asm.models';\r\nimport { AsmState, StateWithAsm } from '../asm-state';\r\nimport { getAsmState } from './feature.selector';\r\n\r\nexport const getCustomerSearchResultsLoaderState: MemoizedSelector<\r\n  StateWithAsm,\r\n  StateUtils.LoaderState<CustomerSearchPage>\r\n> = createSelector(\r\n  getAsmState,\r\n  (state: AsmState) => state.customerSearchResult\r\n);\r\n\r\nexport const getCustomerSearchResults: MemoizedSelector<\r\n  StateWithAsm,\r\n  CustomerSearchPage\r\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\r\n  StateUtils.loaderValueSelector(state)\r\n);\r\n\r\nexport const getCustomerSearchResultsLoading: MemoizedSelector<\r\n  StateWithAsm,\r\n  boolean\r\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\r\n  StateUtils.loaderLoadingSelector(state)\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { UserToken } from '../../../auth/models/token-types.model';\r\nimport { getAsmState } from './feature.selector';\r\nimport { AsmState, StateWithAsm } from '../asm-state';\r\n\r\nexport const getCustomerSupportAgentTokenState: MemoizedSelector<\r\n  StateWithAsm,\r\n  StateUtils.LoaderState<UserToken>\r\n> = createSelector(getAsmState, (state: AsmState) => state.csagentToken);\r\n\r\nexport const getCustomerSupportAgentToken: MemoizedSelector<\r\n  StateWithAsm,\r\n  UserToken\r\n> = createSelector(getCustomerSupportAgentTokenState, (state) =>\r\n  StateUtils.loaderValueSelector(state)\r\n);\r\n\r\nexport const getCustomerSupportAgentTokenLoading: MemoizedSelector<\r\n  StateWithAsm,\r\n  boolean\r\n> = createSelector(getCustomerSupportAgentTokenState, (state) =>\r\n  StateUtils.loaderLoadingSelector(state)\r\n);\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { take } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { UserToken } from '../../auth/models/token-types.model';\r\nimport { AuthActions } from '../../auth/store/actions';\r\nimport { OCC_USER_ID_CURRENT } from '../../occ/utils/occ-constants';\r\nimport { AsmActions } from '../store/actions/index';\r\nimport { StateWithAsm } from '../store/asm-state';\r\nimport { AsmSelectors } from '../store/selectors/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AsmAuthService {\r\n  constructor(\r\n    protected store: Store<StateWithAsm>,\r\n    protected authService: AuthService\r\n  ) {}\r\n\r\n  /**\r\n   * Loads a user token for a customer support agent\r\n   * @param userId\r\n   * @param password\r\n   */\r\n  authorizeCustomerSupportAgent(userId: string, password: string): void {\r\n    this.store.dispatch(\r\n      new AsmActions.LoadCustomerSupportAgentToken({\r\n        userId: userId,\r\n        password: password,\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Starts an ASM customer emulation session.\r\n   * A customer emulation session is stoped by calling logout().\r\n   * @param customerSupportAgentToken\r\n   * @param customerId\r\n   */\r\n  public startCustomerEmulationSession(\r\n    customerSupportAgentToken: UserToken,\r\n    customerId: string\r\n  ): void {\r\n    this.authService.authorizeWithToken({\r\n      ...customerSupportAgentToken,\r\n      userId: customerId,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Utility function to determine if a given token is a customer emulation session token.\r\n   * @param userToken\r\n   */\r\n  isCustomerEmulationToken(userToken: UserToken): boolean {\r\n    return (\r\n      Boolean(userToken) &&\r\n      Boolean(userToken.userId) &&\r\n      userToken.userId !== OCC_USER_ID_CURRENT\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the customer support agent's token\r\n   */\r\n  getCustomerSupportAgentToken(): Observable<UserToken> {\r\n    return this.store.pipe(select(AsmSelectors.getCustomerSupportAgentToken));\r\n  }\r\n\r\n  /**\r\n   * Returns the customer support agent's token loading status\r\n   */\r\n  getCustomerSupportAgentTokenLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(AsmSelectors.getCustomerSupportAgentTokenLoading)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Logout a customer support agent\r\n   */\r\n  logoutCustomerSupportAgent(): void {\r\n    this.getCustomerSupportAgentToken()\r\n      .pipe(take(1))\r\n      .subscribe((userToken) => {\r\n        this.store.dispatch(new AsmActions.LogoutCustomerSupportAgent());\r\n        this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\r\n      });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../global-message/index';\nimport { AsmAuthService } from '../facade/asm-auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentErrorHandlingService {\n  constructor(\n    protected asmAuthService: AsmAuthService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  terminateCustomerSupportAgentExpiredSession(): void {\n    this.asmAuthService.logoutCustomerSupportAgent();\n    this.globalMessageService.add(\n      {\n        key: 'asm.csagentTokenExpired',\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { CustomerSupportAgentErrorHandlingService } from '../../asm/services/csagent-error-handling.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentAuthErrorInterceptor\n  implements HttpInterceptor {\n  constructor(\n    private csagentErrorHandlingService: CustomerSupportAgentErrorHandlingService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isCustomerSupportAgentRequest = this.isCustomerSupportAgentRequest(\n      request\n    );\n    if (isCustomerSupportAgentRequest) {\n      request = InterceptorUtil.removeHeader(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request\n      );\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          // Unauthorized\n          if (isCustomerSupportAgentRequest && errResponse.status === 401) {\n            this.csagentErrorHandlingService.terminateCustomerSupportAgentExpiredSession();\n            return of(undefined as any);\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isCustomerSupportAgentRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AsmAuthService } from '../facade/asm-auth.service';\nimport { UserToken } from '../../auth/models/token-types.model';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentTokenInterceptor implements HttpInterceptor {\n  constructor(private asmAuthService: AsmAuthService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getCustomerSupportAgentToken(request).pipe(\n      take(1),\n      switchMap((token: UserToken) => {\n        if (token) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getCustomerSupportAgentToken(\n    request: HttpRequest<any>\n  ): Observable<UserToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request.headers\n      )\n    ) {\n      return this.asmAuthService.getCustomerSupportAgentToken();\n    }\n    return of(null);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { Provider } from '@angular/core';\r\nimport { CustomerSupportAgentAuthErrorInterceptor } from './csagent-auth-error.interceptor';\r\nimport { CustomerSupportAgentTokenInterceptor } from './csagent-token.interceptor';\r\n\r\nexport const interceptors: Provider[] = [\r\n  {\r\n    provide: HTTP_INTERCEPTORS,\r\n    useExisting: CustomerSupportAgentTokenInterceptor,\r\n    multi: true,\r\n  },\r\n  {\r\n    provide: HTTP_INTERCEPTORS,\r\n    useExisting: CustomerSupportAgentAuthErrorInterceptor,\r\n    multi: true,\r\n  },\r\n];\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '../config/config.module';\r\nimport { defaultAsmConfig } from './config/default-asm-config';\r\nimport { AsmStoreModule } from './store/asm-store.module';\r\nimport { interceptors } from './http-interceptors/index';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, HttpClientModule, AsmStoreModule],\r\n})\r\nexport class AsmModule {\r\n  static forRoot(): ModuleWithProviders<AsmModule> {\r\n    return {\r\n      ngModule: AsmModule,\r\n      providers: [...interceptors, provideDefaultConfig(defaultAsmConfig)],\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport {\r\n  AsmUi,\r\n  CustomerSearchOptions,\r\n  CustomerSearchPage,\r\n} from '../models/asm.models';\r\nimport { AsmActions } from '../store/actions/index';\r\nimport { StateWithAsm } from '../store/asm-state';\r\nimport { AsmSelectors } from '../store/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AsmService {\r\n  constructor(protected store: Store<StateWithAsm>) {}\r\n\r\n  /**\r\n   * Search for customers\r\n   * @param options\r\n   */\r\n  customerSearch(options: CustomerSearchOptions): void {\r\n    this.store.dispatch(new AsmActions.CustomerSearch(options));\r\n  }\r\n\r\n  /**\r\n   * Reset the customer search result data to the initial state.\r\n   */\r\n  customerSearchReset(): void {\r\n    this.store.dispatch(new AsmActions.CustomerSearchReset());\r\n  }\r\n\r\n  /**\r\n   * Returns the customer search result data.\r\n   */\r\n  getCustomerSearchResults(): Observable<CustomerSearchPage> {\r\n    return this.store.pipe(select(AsmSelectors.getCustomerSearchResults));\r\n  }\r\n\r\n  /**\r\n   * Returns the customer search result loading status.\r\n   */\r\n  getCustomerSearchResultsLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(AsmSelectors.getCustomerSearchResultsLoading)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates the state of the ASM UI\r\n   */\r\n  updateAsmUiState(asmUi: AsmUi): void {\r\n    this.store.dispatch(new AsmActions.AsmUiUpdate(asmUi));\r\n  }\r\n\r\n  /**\r\n   * Get the state of the ASM UI\r\n   */\r\n  getAsmUiState(): Observable<AsmUi> {\r\n    return this.store.pipe(select(AsmSelectors.getAsmUi));\r\n  }\r\n}\r\n","import { PageType } from '../../model/cms.model';\r\nimport { Page } from '../model/page.model';\r\nimport { Applicable } from '../../util/applicable';\r\n\r\n/**\r\n * Abstract class that can be used to resolve meta data for specific pages.\r\n * The `getScore` method is used to select the right resolver for a specific\r\n * page, based on a score. The score is calculated by the (non)matching page\r\n * type and page template.\r\n */\r\nexport abstract class PageMetaResolver implements Applicable {\r\n  /** The `PageType` is used to score the (non)matching page */\r\n  pageType: PageType;\r\n\r\n  /** The page template is used to score the (non)matching page template */\r\n  pageTemplate: string;\r\n\r\n  /**\r\n   * Returns the matching score for a resolver class, based on\r\n   * the page type and page template.\r\n   */\r\n  getScore(page: Page): number {\r\n    let score = 0;\r\n    if (this.pageType) {\r\n      score += page.type === this.pageType ? 1 : -1;\r\n    }\r\n    if (this.pageTemplate) {\r\n      score += page.template === this.pageTemplate ? 1 : -1;\r\n    }\r\n    return score;\r\n  }\r\n\r\n  hasMatch(page: Page): boolean {\r\n    return this.getScore(page) > 0;\r\n  }\r\n\r\n  getPriority(page: Page): number {\r\n    return this.getScore(page);\r\n  }\r\n}\r\n","// Email Standard RFC 5322:\nexport const EMAIL_PATTERN = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // tslint:disable-line\n\nexport const PASSWORD_PATTERN = /^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*()_\\-+{};:.,]).{6,}$/;\n","import { Cart } from '../../model/cart.model';\r\nimport { EntityProcessesLoaderState } from '../../state/utils/entity-processes-loader/entity-processes-loader-state';\r\n\r\nexport const MULTI_CART_FEATURE = 'cart';\r\nexport const MULTI_CART_DATA = '[Multi Cart] Multi Cart Data';\r\n\r\n// TODO(#7241): Drop after event system implementation for cart vouchers\r\n/**\r\n * Add voucher process const\r\n * @deprecated since 2.0\r\n */\r\nexport const ADD_VOUCHER_PROCESS_ID = 'addVoucher';\r\n\r\nexport interface StateWithMultiCart {\r\n  [MULTI_CART_FEATURE]: MultiCartState;\r\n}\r\n\r\nexport interface MultiCartState {\r\n  carts: EntityProcessesLoaderState<Cart>;\r\n  active: string;\r\n  wishList: string;\r\n}\r\n","import {\r\n  createFeatureSelector,\r\n  createSelector,\r\n  MemoizedSelector,\r\n} from '@ngrx/store';\r\nimport { Cart } from '../../../model/cart.model';\r\nimport { OrderEntry } from '../../../model/order.model';\r\nimport { entityValueSelector } from '../../../state/utils/entity-loader/entity-loader.selectors';\r\nimport { EntityProcessesLoaderState } from '../../../state/utils/entity-processes-loader/entity-processes-loader-state';\r\nimport {\r\n  entityHasPendingProcessesSelector,\r\n  entityIsStableSelector,\r\n  entityProcessesLoaderStateSelector,\r\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.selectors';\r\nimport { ProcessesLoaderState } from '../../../state/utils/processes-loader/processes-loader-state';\r\nimport {\r\n  MultiCartState,\r\n  MULTI_CART_FEATURE,\r\n  StateWithMultiCart,\r\n} from '../multi-cart-state';\r\n\r\nexport const getMultiCartState: MemoizedSelector<\r\n  StateWithMultiCart,\r\n  MultiCartState\r\n> = createFeatureSelector<MultiCartState>(MULTI_CART_FEATURE);\r\n\r\nexport const getMultiCartEntities: MemoizedSelector<\r\n  StateWithMultiCart,\r\n  EntityProcessesLoaderState<Cart>\r\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.carts);\r\n\r\nexport const getCartEntitySelectorFactory = (\r\n  cartId: string\r\n): MemoizedSelector<StateWithMultiCart, ProcessesLoaderState<Cart>> => {\r\n  return createSelector(\r\n    getMultiCartEntities,\r\n    (state: EntityProcessesLoaderState<Cart>) =>\r\n      entityProcessesLoaderStateSelector(state, cartId)\r\n  );\r\n};\r\n\r\nexport const getCartSelectorFactory = (\r\n  cartId: string\r\n): MemoizedSelector<StateWithMultiCart, Cart> => {\r\n  return createSelector(\r\n    getMultiCartEntities,\r\n    (state: EntityProcessesLoaderState<Cart>) =>\r\n      entityValueSelector(state, cartId)\r\n  );\r\n};\r\n\r\nexport const getCartIsStableSelectorFactory = (\r\n  cartId: string\r\n): MemoizedSelector<StateWithMultiCart, boolean> => {\r\n  return createSelector(\r\n    getMultiCartEntities,\r\n    (state: EntityProcessesLoaderState<Cart>) =>\r\n      entityIsStableSelector(state, cartId)\r\n  );\r\n};\r\n\r\nexport const getCartHasPendingProcessesSelectorFactory = (\r\n  cartId: string\r\n): MemoizedSelector<StateWithMultiCart, boolean> => {\r\n  return createSelector(\r\n    getMultiCartEntities,\r\n    (state: EntityProcessesLoaderState<Cart>) =>\r\n      entityHasPendingProcessesSelector(state, cartId)\r\n  );\r\n};\r\n\r\nexport const getCartEntriesSelectorFactory = (\r\n  cartId: string\r\n): MemoizedSelector<StateWithMultiCart, OrderEntry[]> => {\r\n  return createSelector(getCartSelectorFactory(cartId), (state: Cart) => {\r\n    return state && state.entries ? state.entries : [];\r\n  });\r\n};\r\n\r\nexport const getCartEntrySelectorFactory = (\r\n  cartId: string,\r\n  productCode: string\r\n): MemoizedSelector<StateWithMultiCart, OrderEntry> => {\r\n  return createSelector(\r\n    getCartEntriesSelectorFactory(cartId),\r\n    (state: OrderEntry[]) => {\r\n      return state\r\n        ? state.find((entry) => entry.product.code === productCode)\r\n        : undefined;\r\n    }\r\n  );\r\n};\r\n\r\nexport const getActiveCartId: MemoizedSelector<\r\n  StateWithMultiCart,\r\n  string\r\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.active);\r\n\r\nexport const getWishListId: MemoizedSelector<\r\n  StateWithMultiCart,\r\n  string\r\n> = createSelector(\r\n  getMultiCartState,\r\n  (state: MultiCartState) => state.wishList\r\n);\r\n","import { OrderEntry } from '../../../model/order.model';\r\nimport {\r\n  EntityProcessesDecrementAction,\r\n  EntityProcessesIncrementAction,\r\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\r\nimport { MULTI_CART_DATA } from '../multi-cart-state';\r\n\r\nexport const CART_ADD_ENTRY = '[Cart-entry] Add Entry';\r\nexport const CART_ADD_ENTRY_SUCCESS = '[Cart-entry] Add Entry Success';\r\nexport const CART_ADD_ENTRY_FAIL = '[Cart-entry] Add Entry Fail';\r\nexport const CART_REMOVE_ENTRY = '[Cart-entry] Remove Entry';\r\nexport const CART_REMOVE_ENTRY_SUCCESS = '[Cart-entry] Remove Entry Success';\r\nexport const CART_REMOVE_ENTRY_FAIL = '[Cart-entry] Remove Entry Fail';\r\n\r\nexport const CART_UPDATE_ENTRY = '[Cart-entry] Update Entry';\r\nexport const CART_UPDATE_ENTRY_SUCCESS = '[Cart-entry] Update Entry Success';\r\nexport const CART_UPDATE_ENTRY_FAIL = '[Cart-entry] Update Entry Fail';\r\n\r\nexport class CartAddEntry extends EntityProcessesIncrementAction {\r\n  readonly type = CART_ADD_ENTRY;\r\n  constructor(\r\n    public payload: {\r\n      cartId: string;\r\n      userId: string;\r\n      productCode: string;\r\n      quantity: number;\r\n    }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class CartAddEntrySuccess extends EntityProcessesDecrementAction {\r\n  readonly type = CART_ADD_ENTRY_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      cartId: string;\r\n      productCode: string;\r\n      quantity: number;\r\n      deliveryModeChanged: boolean;\r\n      entry: OrderEntry;\r\n      quantityAdded: number;\r\n      statusCode: string;\r\n      statusMessage: string;\r\n    }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class CartAddEntryFail extends EntityProcessesDecrementAction {\r\n  readonly type = CART_ADD_ENTRY_FAIL;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      cartId: string;\r\n      productCode: string;\r\n      quantity: number;\r\n      error: any;\r\n    }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class CartRemoveEntry extends EntityProcessesIncrementAction {\r\n  readonly type = CART_REMOVE_ENTRY;\r\n  constructor(\r\n    public payload: { cartId: string; userId: string; entryNumber: string }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class CartRemoveEntrySuccess extends EntityProcessesDecrementAction {\r\n  readonly type = CART_REMOVE_ENTRY_SUCCESS;\r\n  constructor(\r\n    public payload: { userId: string; cartId: string; entryNumber: string }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class CartRemoveEntryFail extends EntityProcessesDecrementAction {\r\n  readonly type = CART_REMOVE_ENTRY_FAIL;\r\n  constructor(\r\n    public payload: {\r\n      error: any;\r\n      cartId: string;\r\n      userId: string;\r\n      entryNumber: string;\r\n    }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class CartUpdateEntry extends EntityProcessesIncrementAction {\r\n  readonly type = CART_UPDATE_ENTRY;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      cartId: string;\r\n      entryNumber: string;\r\n      quantity: number;\r\n    }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class CartUpdateEntrySuccess extends EntityProcessesDecrementAction {\r\n  readonly type = CART_UPDATE_ENTRY_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      cartId: string;\r\n      entryNumber: string;\r\n      quantity: number;\r\n    }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class CartUpdateEntryFail extends EntityProcessesDecrementAction {\r\n  readonly type = CART_UPDATE_ENTRY_FAIL;\r\n  constructor(\r\n    public payload: {\r\n      error: any;\r\n      userId: string;\r\n      cartId: string;\r\n      entryNumber: string;\r\n      quantity: number;\r\n    }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport type CartEntryAction =\r\n  | CartAddEntry\r\n  | CartAddEntrySuccess\r\n  | CartAddEntryFail\r\n  | CartRemoveEntry\r\n  | CartRemoveEntrySuccess\r\n  | CartRemoveEntryFail\r\n  | CartUpdateEntry\r\n  | CartUpdateEntrySuccess\r\n  | CartUpdateEntryFail;\r\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\r\nimport {\r\n  EntityFailAction,\r\n  EntityLoadAction,\r\n  EntityLoaderResetAction,\r\n  EntitySuccessAction,\r\n} from '../../../state/utils/entity-loader/entity-loader.action';\r\nimport {\r\n  EntityProcessesDecrementAction,\r\n  EntityProcessesIncrementAction,\r\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\r\nimport { ADD_VOUCHER_PROCESS_ID, MULTI_CART_DATA } from '../multi-cart-state';\r\n\r\nexport const CART_ADD_VOUCHER = '[Cart-voucher] Add Cart Vouchers';\r\nexport const CART_ADD_VOUCHER_FAIL = '[Cart-voucher] Add Cart Voucher Fail';\r\nexport const CART_ADD_VOUCHER_SUCCESS =\r\n  '[Cart-voucher] Add Cart Voucher Success';\r\nexport const CART_RESET_ADD_VOUCHER = '[Cart-voucher] Reset Add Cart Voucher';\r\n\r\nexport const CART_REMOVE_VOUCHER = '[Cart-voucher] Remove Cart Voucher';\r\nexport const CART_REMOVE_VOUCHER_FAIL =\r\n  '[Cart-voucher] Remove Cart Voucher Fail';\r\nexport const CART_REMOVE_VOUCHER_SUCCESS =\r\n  '[Cart-voucher] Remove Cart Voucher Success';\r\n\r\n// Adding cart voucher actions\r\nexport class CartAddVoucher extends EntityLoadAction {\r\n  readonly type = CART_ADD_VOUCHER;\r\n  constructor(\r\n    public payload: { userId: string; cartId: string; voucherId: string }\r\n  ) {\r\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class CartAddVoucherFail extends EntityFailAction {\r\n  readonly type = CART_ADD_VOUCHER_FAIL;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      cartId: string;\r\n      voucherId: string;\r\n      error: any;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID, payload.error);\r\n  }\r\n}\r\n\r\nexport class CartAddVoucherSuccess extends EntitySuccessAction {\r\n  readonly type = CART_ADD_VOUCHER_SUCCESS;\r\n  constructor(\r\n    public payload: { userId: string; cartId: string; voucherId: string }\r\n  ) {\r\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\r\n  }\r\n}\r\n\r\n// TODO(#7241): Remove when switching to event system for vouchers\r\n/**\r\n * Resets add voucher process\r\n *\r\n * @deprecated since 2.0\r\n */\r\nexport class CartResetAddVoucher extends EntityLoaderResetAction {\r\n  readonly type = CART_RESET_ADD_VOUCHER;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\r\n  }\r\n}\r\n\r\n// Deleting cart voucher\r\nexport class CartRemoveVoucher extends EntityProcessesIncrementAction {\r\n  readonly type = CART_REMOVE_VOUCHER;\r\n  constructor(\r\n    public payload: { userId: string; cartId: string; voucherId: string }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class CartRemoveVoucherFail extends EntityProcessesDecrementAction {\r\n  readonly type = CART_REMOVE_VOUCHER_FAIL;\r\n  constructor(\r\n    public payload: {\r\n      error: any;\r\n      cartId: string;\r\n      userId: string;\r\n      voucherId: string;\r\n    }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class CartRemoveVoucherSuccess extends EntityProcessesDecrementAction {\r\n  readonly type = CART_REMOVE_VOUCHER_SUCCESS;\r\n  constructor(\r\n    public payload: { userId: string; cartId: string; voucherId: string }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\n// action types\r\nexport type CartVoucherAction =\r\n  | CartAddVoucher\r\n  | CartAddVoucherFail\r\n  | CartAddVoucherSuccess\r\n  | CartResetAddVoucher\r\n  | CartRemoveVoucher\r\n  | CartRemoveVoucherFail\r\n  | CartRemoveVoucherSuccess;\r\n","import { Action } from '@ngrx/store';\r\nimport { Cart } from '../../../model/cart.model';\r\nimport {\r\n  EntityFailAction,\r\n  EntityLoadAction,\r\n  EntitySuccessAction,\r\n} from '../../../state/utils/entity-loader/entity-loader.action';\r\nimport {\r\n  EntityProcessesDecrementAction,\r\n  EntityProcessesIncrementAction,\r\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\r\nimport { EntityRemoveAction } from '../../../state/utils/entity/entity.action';\r\nimport { ProcessesLoaderResetAction } from '../../../state/utils/processes-loader/processes-loader.action';\r\nimport { MULTI_CART_DATA } from '../multi-cart-state';\r\n\r\nexport const CREATE_CART = '[Cart] Create Cart';\r\nexport const CREATE_CART_FAIL = '[Cart] Create Cart Fail';\r\nexport const CREATE_CART_SUCCESS = '[Cart] Create Cart Success';\r\n\r\nexport const LOAD_CART = '[Cart] Load Cart';\r\nexport const LOAD_CART_FAIL = '[Cart] Load Cart Fail';\r\nexport const LOAD_CART_SUCCESS = '[Cart] Load Cart Success';\r\n\r\nexport const ADD_EMAIL_TO_CART = '[Cart] Add Email to Cart';\r\nexport const ADD_EMAIL_TO_CART_FAIL = '[Cart] Add Email to Cart Fail';\r\nexport const ADD_EMAIL_TO_CART_SUCCESS = '[Cart] Add Email to Cart Success';\r\n\r\nexport const MERGE_CART = '[Cart] Merge Cart';\r\nexport const MERGE_CART_SUCCESS = '[Cart] Merge Cart Success';\r\n\r\nexport const RESET_CART_DETAILS = '[Cart] Reset Cart Details';\r\n\r\nexport const REMOVE_CART = '[Cart] Remove Cart';\r\n\r\nexport const DELETE_CART = '[Cart] Delete Cart';\r\nexport const DELETE_CART_SUCCESS = '[Cart] Delete Cart Success';\r\nexport const DELETE_CART_FAIL = '[Cart] Delete Cart Fail';\r\n\r\ninterface CreateCartPayload {\r\n  userId: string;\r\n  /** Used as a unique key in ngrx carts store (we don't know cartId at that time) */\r\n  tempCartId: string;\r\n  extraData?: {\r\n    active?: boolean;\r\n  };\r\n  /** Anonymous cart which should be merged to new cart */\r\n  oldCartId?: string;\r\n  /** Cart to which should we merge (not passing this will create new cart) */\r\n  toMergeCartGuid?: string;\r\n}\r\n\r\nexport class CreateCart extends EntityLoadAction {\r\n  readonly type = CREATE_CART;\r\n  constructor(public payload: CreateCartPayload) {\r\n    super(MULTI_CART_DATA, payload.tempCartId);\r\n  }\r\n}\r\n\r\ninterface CreateCartFailPayload extends CreateCartPayload {\r\n  error: any;\r\n}\r\n\r\nexport class CreateCartFail extends EntityFailAction {\r\n  readonly type = CREATE_CART_FAIL;\r\n  constructor(public payload: CreateCartFailPayload) {\r\n    super(MULTI_CART_DATA, payload.tempCartId);\r\n  }\r\n}\r\n\r\ninterface CreateCartSuccessPayload extends CreateCartPayload {\r\n  cart: Cart;\r\n  cartId: string;\r\n}\r\n\r\nexport class CreateCartSuccess extends EntitySuccessAction {\r\n  readonly type = CREATE_CART_SUCCESS;\r\n  constructor(public payload: CreateCartSuccessPayload) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class AddEmailToCart extends EntityProcessesIncrementAction {\r\n  readonly type = ADD_EMAIL_TO_CART;\r\n  constructor(\r\n    public payload: { userId: string; cartId: string; email: string }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class AddEmailToCartFail extends EntityProcessesDecrementAction {\r\n  readonly type = ADD_EMAIL_TO_CART_FAIL;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      cartId: string;\r\n      error: any;\r\n      email: string;\r\n    }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class AddEmailToCartSuccess extends EntityProcessesDecrementAction {\r\n  readonly type = ADD_EMAIL_TO_CART_SUCCESS;\r\n  constructor(\r\n    public payload: { userId: string; cartId: string; email: string }\r\n  ) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\ninterface LoadCartPayload {\r\n  userId: string;\r\n  cartId: string;\r\n  extraData?: {\r\n    active?: boolean;\r\n  };\r\n}\r\n\r\nexport class LoadCart extends EntityLoadAction {\r\n  readonly type = LOAD_CART;\r\n  constructor(public payload: LoadCartPayload) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\ninterface LoadCartFailPayload extends LoadCartPayload {\r\n  error: any;\r\n}\r\n\r\nexport class LoadCartFail extends EntityFailAction {\r\n  readonly type = LOAD_CART_FAIL;\r\n  constructor(public payload: LoadCartFailPayload) {\r\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\r\n  }\r\n}\r\n\r\ninterface LoadCartSuccessPayload extends LoadCartPayload {\r\n  cart: Cart;\r\n}\r\n\r\nexport class LoadCartSuccess extends EntitySuccessAction {\r\n  readonly type = LOAD_CART_SUCCESS;\r\n  constructor(public payload: LoadCartSuccessPayload) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\ninterface MergeCartPayload {\r\n  cartId: string;\r\n  userId: string;\r\n  extraData?: { active?: boolean };\r\n  /**\r\n   * MergeCart actions triggers CreateCart which requires this parameter, so that's why it is required.\r\n   */\r\n  tempCartId: string;\r\n}\r\n\r\nexport class MergeCart implements Action {\r\n  readonly type = MERGE_CART;\r\n  constructor(public payload: MergeCartPayload) {}\r\n}\r\n\r\ninterface MergeCartSuccessPayload extends MergeCartPayload {\r\n  /**\r\n   * Previous cart id which was merged with new/user cart.\r\n   * Needed to know which obsolete entity should be removed.\r\n   */\r\n  oldCartId: string;\r\n}\r\n\r\nexport class MergeCartSuccess extends EntityRemoveAction {\r\n  readonly type = MERGE_CART_SUCCESS;\r\n  constructor(public payload: MergeCartSuccessPayload) {\r\n    super(MULTI_CART_DATA, payload.oldCartId);\r\n  }\r\n}\r\n\r\n/**\r\n * On site context change we want to keep current list of entities, but we want to clear the value and flags.\r\n * With ProcessesLoaderResetAction we run it on every entity of this type.\r\n */\r\nexport class ResetCartDetails extends ProcessesLoaderResetAction {\r\n  readonly type = RESET_CART_DETAILS;\r\n  constructor() {\r\n    super(MULTI_CART_DATA);\r\n  }\r\n}\r\n\r\n/**\r\n * Used for cleaning cart in local state, when we get information that it no longer exists in the backend.\r\n * For removing particular cart in both places use DeleteCart actions.\r\n */\r\nexport class RemoveCart extends EntityRemoveAction {\r\n  readonly type = REMOVE_CART;\r\n  constructor(public payload: { cartId: string }) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class DeleteCart implements Action {\r\n  readonly type = DELETE_CART;\r\n  constructor(public payload: { userId: string; cartId: string }) {}\r\n}\r\n\r\nexport class DeleteCartSuccess extends EntityRemoveAction {\r\n  readonly type = DELETE_CART_SUCCESS;\r\n  constructor(public payload: { userId: string; cartId: string }) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class DeleteCartFail implements Action {\r\n  readonly type = DELETE_CART_FAIL;\r\n  constructor(public payload: { userId: string; cartId: string; error: any }) {}\r\n}\r\n\r\nexport type CartAction =\r\n  | CreateCart\r\n  | CreateCartFail\r\n  | CreateCartSuccess\r\n  | LoadCart\r\n  | LoadCartFail\r\n  | LoadCartSuccess\r\n  | MergeCart\r\n  | MergeCartSuccess\r\n  | ResetCartDetails\r\n  | AddEmailToCart\r\n  | AddEmailToCartFail\r\n  | AddEmailToCartSuccess\r\n  | DeleteCart\r\n  | DeleteCartSuccess\r\n  | DeleteCartFail\r\n  | RemoveCart;\r\n","import { Action } from '@ngrx/store';\r\nimport { Cart } from '../../../model/cart.model';\r\nimport { EntitySuccessAction } from '../../../state/utils/entity-loader/entity-loader.action';\r\nimport {\r\n  EntityProcessesDecrementAction,\r\n  EntityProcessesIncrementAction,\r\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\r\nimport { EntityRemoveAllAction } from '../../../state/utils/entity/entity.action';\r\nimport { MULTI_CART_DATA } from '../multi-cart-state';\r\n\r\nexport const SET_TEMP_CART = '[Cart] Set Temp Cart';\r\n\r\nexport const CART_PROCESSES_INCREMENT = '[Cart] Cart Processes Increment';\r\nexport const CART_PROCESSES_DECREMENT = '[Cart] Cart Processes Decrement';\r\n\r\nexport const SET_ACTIVE_CART_ID = '[Cart] Set Active Cart Id';\r\n\r\nexport const CLEAR_CART_STATE = '[Cart] Clear Cart State';\r\n\r\n/**\r\n * To keep track of cart creation process we use cart with `temp-${uuid}` id.\r\n * After creating cart we switch to entity with `code` or `guid`.\r\n * We need `temp-${uuid}` cart entities for loading/error state.\r\n */\r\nexport class SetTempCart extends EntitySuccessAction {\r\n  readonly type = SET_TEMP_CART;\r\n  constructor(public payload: { cart: Cart; tempCartId: string }) {\r\n    super(MULTI_CART_DATA, payload.tempCartId, payload.cart);\r\n  }\r\n}\r\n\r\n// TODO(#7241): Remove when there won't be any usage\r\n/**\r\n * Increases process counter on cart entities\r\n * All actions that cause computations on cart should extend EntityProcessesIncrementAction instead of dispatching this action.\r\n * @deprecated since 2.0\r\n */\r\nexport class CartProcessesIncrement extends EntityProcessesIncrementAction {\r\n  readonly type = CART_PROCESSES_INCREMENT;\r\n  constructor(public payload: string) {\r\n    super(MULTI_CART_DATA, payload);\r\n  }\r\n}\r\n\r\n// TODO(#7241): Remove when there won't be any usage\r\n/**\r\n * Decrement process counter on cart entities\r\n * All actions that cause computations on cart should extend EntityProcessesDecrementAction instead of dispatching this action.\r\n * @deprecated since 2.0\r\n */\r\nexport class CartProcessesDecrement extends EntityProcessesDecrementAction {\r\n  readonly type = CART_PROCESSES_DECREMENT;\r\n  constructor(public payload: string) {\r\n    super(MULTI_CART_DATA, payload);\r\n  }\r\n}\r\n\r\n/**\r\n * Only sets active cart property with id of active cart. Then services take care of loading that cart.\r\n */\r\nexport class SetActiveCartId implements Action {\r\n  readonly type = SET_ACTIVE_CART_ID;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\n/**\r\n * Clear whole cart store state: all entities + reset rest of the cart state.\r\n */\r\nexport class ClearCartState extends EntityRemoveAllAction {\r\n  readonly type = CLEAR_CART_STATE;\r\n  constructor() {\r\n    super(MULTI_CART_DATA);\r\n  }\r\n}\r\n\r\nexport type MultiCartActions =\r\n  | SetTempCart\r\n  | CartProcessesIncrement\r\n  | CartProcessesDecrement\r\n  | SetActiveCartId\r\n  | ClearCartState;\r\n","import { Action } from '@ngrx/store';\r\nimport { Cart } from '../../../model/cart.model';\r\nimport {\r\n  EntityFailAction,\r\n  EntityLoadAction,\r\n  EntitySuccessAction,\r\n} from '../../../state/utils/entity-loader/entity-loader.action';\r\nimport { getCartIdByUserId } from '../../utils/utils';\r\nimport { MULTI_CART_DATA } from '../multi-cart-state';\r\n\r\nexport const CREATE_WISH_LIST = '[Wish List] Create Wish List';\r\nexport const CREATE_WISH_LIST_FAIL = '[Wish List] Create Wish List Fail';\r\nexport const CREATE_WISH_LIST_SUCCESS = '[Wish List] Create Wish List Success';\r\n\r\nexport const LOAD_WISH_LIST = '[Wish List] Load Wish List';\r\nexport const LOAD_WISH_LIST_SUCCESS = '[Wish List] Load Wish List Success';\r\nexport const LOAD_WISH_LIST_FAIL = '[Wish List] Load Wish List Fail';\r\n\r\nexport const RESET_WISH_LIST_DETAILS = '[Wish List] Reset Wish List';\r\n\r\nexport class CreateWishList implements Action {\r\n  readonly type = CREATE_WISH_LIST;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      name: string;\r\n      description?: string;\r\n    }\r\n  ) {}\r\n}\r\n\r\nexport class CreateWishListSuccess extends EntitySuccessAction {\r\n  readonly type = CREATE_WISH_LIST_SUCCESS;\r\n  constructor(public payload: { cart: Cart; userId: string }) {\r\n    super(MULTI_CART_DATA, getCartIdByUserId(payload.cart, payload.userId));\r\n  }\r\n}\r\n\r\nexport class CreateWishListFail extends EntityFailAction {\r\n  readonly type = CREATE_WISH_LIST_FAIL;\r\n  constructor(public payload: { cartId: string; error?: any }) {\r\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\r\n  }\r\n}\r\n\r\ninterface LoadWishListPayload {\r\n  userId: string;\r\n  /**\r\n   * Used to compute wishlist cart name and find it in list of all carts.\r\n   */\r\n  customerId: string;\r\n  /**\r\n   * When we try load wishlist for the first time we don't know cart id.\r\n   * Instead we create temporary cart with id equal to wishlist name to keep track of loading/error state.\r\n   */\r\n  tempCartId: string;\r\n}\r\n\r\nexport class LoadWishList extends EntityLoadAction {\r\n  readonly type = LOAD_WISH_LIST;\r\n  constructor(public payload: LoadWishListPayload) {\r\n    super(MULTI_CART_DATA, payload.tempCartId);\r\n  }\r\n}\r\n\r\ninterface LoadWishListSuccessPayload {\r\n  cart: Cart;\r\n  userId: string;\r\n  /**\r\n   * When LoadWishListSuccess action was dispatched as an completion to LoadWishList action\r\n   * we get temporary cartId that was used to keep track of loading state.\r\n   * In case of loading wish list with known cartId this property will be empty.\r\n   */\r\n  tempCartId?: string;\r\n  /**\r\n   * Used to compute wishlist cart name and find it in list of all carts.\r\n   * In case of loading wish list with known cartId this property will be empty.\r\n   */\r\n  customerId?: string;\r\n  /**\r\n   * Wish list cart id. Extracted from cart content (code property).\r\n   */\r\n  cartId: string;\r\n}\r\n\r\nexport class LoadWishListSuccess extends EntitySuccessAction {\r\n  readonly type = LOAD_WISH_LIST_SUCCESS;\r\n  constructor(public payload: LoadWishListSuccessPayload) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\ninterface LoadWishListFailPayload {\r\n  userId: string;\r\n  /**\r\n   * Used to compute wishlist cart name and find it in list of all carts.\r\n   * In case of loading wish list with known cartId this property will be empty.\r\n   */\r\n  customerId?: string;\r\n  /**\r\n   * Cart id used as a store entity key. This could point either to some\r\n   * temporary cart used to track loading/error state or to normal wish list entity.\r\n   */\r\n  cartId: string;\r\n  error: any;\r\n}\r\n\r\nexport class LoadWishListFail extends EntityFailAction {\r\n  readonly type = LOAD_WISH_LIST_FAIL;\r\n  constructor(public payload: LoadWishListFailPayload) {\r\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\r\n  }\r\n}\r\n\r\nexport type WishListActions =\r\n  | CreateWishList\r\n  | CreateWishListSuccess\r\n  | CreateWishListFail\r\n  | LoadWishList\r\n  | LoadWishListSuccess\r\n  | LoadWishListFail;\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { EMPTY, Observable, timer } from 'rxjs';\r\nimport { debounce, distinctUntilChanged } from 'rxjs/operators';\r\nimport { Cart } from '../../model/cart.model';\r\nimport { OrderEntry } from '../../model/order.model';\r\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\r\nimport { CartActions } from '../store/actions/index';\r\nimport { StateWithMultiCart } from '../store/multi-cart-state';\r\nimport { MultiCartSelectors } from '../store/selectors/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MultiCartService {\r\n  constructor(protected store: Store<StateWithMultiCart>) {}\r\n\r\n  /**\r\n   * Returns cart from store as an observable\r\n   *\r\n   * @param cartId\r\n   */\r\n  getCart(cartId: string): Observable<Cart> {\r\n    return this.store.pipe(\r\n      select(MultiCartSelectors.getCartSelectorFactory(cartId))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns cart entity from store (cart with loading, error, success flags) as an observable\r\n   *\r\n   * @param cartId\r\n   */\r\n  getCartEntity(cartId: string): Observable<ProcessesLoaderState<Cart>> {\r\n    return this.store.pipe(\r\n      select(MultiCartSelectors.getCartEntitySelectorFactory(cartId))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns true when there are no operations on that in progress and it is not currently loading\r\n   *\r\n   * @param cartId\r\n   */\r\n  isStable(cartId: string): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(MultiCartSelectors.getCartIsStableSelectorFactory(cartId)),\r\n      // We dispatch a lot of actions just after finishing some process or loading, so we want this flag not to flicker.\r\n      // This flickering should only be avoided when switching from false to true\r\n      // Start of loading should be showed instantly (no debounce)\r\n      // Extra actions are only dispatched after some loading\r\n      debounce((isStable) => (isStable ? timer(0) : EMPTY)),\r\n      distinctUntilChanged()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Simple random temp cart id generator\r\n   */\r\n  private generateTempCartId(): string {\r\n    const pseudoUuid = Math.random().toString(36).substr(2, 9);\r\n    return `temp-${pseudoUuid}`;\r\n  }\r\n\r\n  /**\r\n   * Create or merge cart\r\n   *\r\n   * @param params Object with userId, oldCartId, toMergeCartGuid and extraData\r\n   */\r\n  createCart({\r\n    userId,\r\n    oldCartId,\r\n    toMergeCartGuid,\r\n    extraData,\r\n  }: {\r\n    userId: string;\r\n    oldCartId?: string;\r\n    toMergeCartGuid?: string;\r\n    extraData?: {\r\n      active?: boolean;\r\n    };\r\n  }): Observable<ProcessesLoaderState<Cart>> {\r\n    // to support creating multiple carts at the same time we need to use different entity for every process\r\n    // simple random uuid generator is used here for entity names\r\n    const tempCartId = this.generateTempCartId();\r\n    this.store.dispatch(\r\n      new CartActions.CreateCart({\r\n        extraData,\r\n        userId,\r\n        oldCartId,\r\n        toMergeCartGuid,\r\n        tempCartId,\r\n      })\r\n    );\r\n    return this.getCartEntity(tempCartId);\r\n  }\r\n\r\n  /**\r\n   * Merge provided cart to current user cart\r\n   *\r\n   * @param params Object with userId, cartId and extraData\r\n   */\r\n  mergeToCurrentCart({\r\n    userId,\r\n    cartId,\r\n    extraData,\r\n  }: {\r\n    userId: string;\r\n    cartId: string;\r\n    extraData?: {\r\n      active?: boolean;\r\n    };\r\n  }) {\r\n    const tempCartId = this.generateTempCartId();\r\n    this.store.dispatch(\r\n      new CartActions.MergeCart({\r\n        userId,\r\n        cartId,\r\n        extraData,\r\n        tempCartId,\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Load cart\r\n   *\r\n   * @param params Object with userId, cartId and extraData\r\n   */\r\n  loadCart({\r\n    cartId,\r\n    userId,\r\n    extraData,\r\n  }: {\r\n    cartId: string;\r\n    userId: string;\r\n    extraData?: any;\r\n  }): void {\r\n    this.store.dispatch(\r\n      new CartActions.LoadCart({\r\n        userId,\r\n        cartId,\r\n        extraData,\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get cart entries as an observable\r\n   * @param cartId\r\n   */\r\n  getEntries(cartId: string): Observable<OrderEntry[]> {\r\n    return this.store.pipe(\r\n      select(MultiCartSelectors.getCartEntriesSelectorFactory(cartId))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Add entry to cart\r\n   *\r\n   * @param userId\r\n   * @param cartId\r\n   * @param productCode\r\n   * @param quantity\r\n   */\r\n  addEntry(\r\n    userId: string,\r\n    cartId: string,\r\n    productCode: string,\r\n    quantity: number\r\n  ): void {\r\n    this.store.dispatch(\r\n      new CartActions.CartAddEntry({\r\n        userId,\r\n        cartId,\r\n        productCode,\r\n        quantity,\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Add multiple entries to cart\r\n   *\r\n   * @param userId\r\n   * @param cartId\r\n   * @param products Array with items (productCode and quantity)\r\n   */\r\n  addEntries(\r\n    userId: string,\r\n    cartId: string,\r\n    products: Array<{ productCode: string; quantity: number }>\r\n  ): void {\r\n    products.forEach((product) => {\r\n      this.store.dispatch(\r\n        new CartActions.CartAddEntry({\r\n          userId,\r\n          cartId,\r\n          productCode: product.productCode,\r\n          quantity: product.quantity,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove entry from cart\r\n   *\r\n   * @param userId\r\n   * @param cartId\r\n   * @param entryNumber\r\n   */\r\n  removeEntry(userId: string, cartId: string, entryNumber: number): void {\r\n    this.store.dispatch(\r\n      new CartActions.CartRemoveEntry({\r\n        userId,\r\n        cartId,\r\n        entryNumber: `${entryNumber}`,\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update entry in cart. For quantity = 0 it removes entry\r\n   *\r\n   * @param userId\r\n   * @param cartId\r\n   * @param entryNumber\r\n   * @param quantity\r\n   */\r\n  updateEntry(\r\n    userId: string,\r\n    cartId: string,\r\n    entryNumber: number,\r\n    quantity: number\r\n  ): void {\r\n    if (quantity > 0) {\r\n      this.store.dispatch(\r\n        new CartActions.CartUpdateEntry({\r\n          userId,\r\n          cartId,\r\n          entryNumber: `${entryNumber}`,\r\n          quantity: quantity,\r\n        })\r\n      );\r\n    } else {\r\n      this.removeEntry(userId, cartId, entryNumber);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get specific entry from cart\r\n   *\r\n   * @param cartId\r\n   * @param productCode\r\n   */\r\n  getEntry(cartId: string, productCode: string): Observable<OrderEntry | null> {\r\n    return this.store.pipe(\r\n      select(\r\n        MultiCartSelectors.getCartEntrySelectorFactory(cartId, productCode)\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Assign email to the cart\r\n   *\r\n   * @param cartId\r\n   * @param userId\r\n   * @param email\r\n   */\r\n  assignEmail(cartId: string, userId: string, email: string): void {\r\n    this.store.dispatch(\r\n      new CartActions.AddEmailToCart({\r\n        userId,\r\n        cartId,\r\n        email,\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete cart\r\n   *\r\n   * @param cartId\r\n   * @param userId\r\n   */\r\n  deleteCart(cartId: string, userId: string) {\r\n    this.store.dispatch(\r\n      new CartActions.DeleteCart({\r\n        userId,\r\n        cartId,\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { EMPTY, Observable, timer } from 'rxjs';\r\nimport {\r\n  debounce,\r\n  distinctUntilChanged,\r\n  filter,\r\n  map,\r\n  shareReplay,\r\n  switchMap,\r\n  take,\r\n  tap,\r\n  withLatestFrom,\r\n} from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/index';\r\nimport { Cart } from '../../model/cart.model';\r\nimport { User } from '../../model/misc.model';\r\nimport { OrderEntry } from '../../model/order.model';\r\nimport {\r\n  OCC_CART_ID_CURRENT,\r\n  OCC_USER_ID_ANONYMOUS,\r\n  OCC_USER_ID_GUEST,\r\n} from '../../occ/utils/occ-constants';\r\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\r\nimport { EMAIL_PATTERN } from '../../util/regex-pattern';\r\nimport { StateWithMultiCart } from '../store/multi-cart-state';\r\nimport { MultiCartSelectors } from '../store/selectors/index';\r\nimport { getCartIdByUserId, isTempCartId } from '../utils/utils';\r\nimport { MultiCartService } from './multi-cart.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ActiveCartService {\r\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\r\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\r\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\r\n  private activeCart$: Observable<Cart>;\r\n\r\n  private userId = OCC_USER_ID_ANONYMOUS;\r\n  private cartId;\r\n  private cartUser: User;\r\n\r\n  private activeCartId$ = this.store.pipe(\r\n    select(MultiCartSelectors.getActiveCartId),\r\n    map((cartId) => {\r\n      if (!cartId) {\r\n        return OCC_CART_ID_CURRENT;\r\n      }\r\n      return cartId;\r\n    })\r\n  );\r\n  private cartSelector$ = this.activeCartId$.pipe(\r\n    switchMap((cartId) => this.multiCartService.getCartEntity(cartId))\r\n  );\r\n\r\n  constructor(\r\n    protected store: Store<StateWithMultiCart>,\r\n    protected authService: AuthService,\r\n    protected multiCartService: MultiCartService\r\n  ) {\r\n    this.authService.getOccUserId().subscribe((userId) => {\r\n      this.userId = userId;\r\n      if (this.userId !== OCC_USER_ID_ANONYMOUS) {\r\n        if (this.isJustLoggedIn(userId)) {\r\n          this.loadOrMerge(this.cartId);\r\n        }\r\n      }\r\n      this.previousUserId = userId;\r\n    });\r\n\r\n    this.activeCartId$.subscribe((cartId) => {\r\n      this.cartId = cartId;\r\n    });\r\n\r\n    this.initActiveCart();\r\n  }\r\n\r\n  private initActiveCart() {\r\n    this.activeCart$ = this.cartSelector$.pipe(\r\n      withLatestFrom(this.activeCartId$),\r\n      map(([cartEntity, activeCartId]: [ProcessesLoaderState<Cart>, string]): {\r\n        cart: Cart;\r\n        cartId: string;\r\n        isStable: boolean;\r\n        loaded: boolean;\r\n      } => {\r\n        return {\r\n          cart: cartEntity.value,\r\n          cartId: activeCartId,\r\n          isStable: !cartEntity.loading && cartEntity.processesCount === 0,\r\n          loaded:\r\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\r\n        };\r\n      }),\r\n      // we want to emit empty carts even if those are not stable\r\n      // on merge cart action we want to switch to empty cart so no one would use old cartId which can be already obsolete\r\n      // so on merge action the resulting stream looks like this: old_cart -> {} -> new_cart\r\n      filter(({ isStable, cart }) => isStable || this.isEmpty(cart)),\r\n      tap(({ cart, cartId, loaded, isStable }) => {\r\n        if (\r\n          isStable &&\r\n          this.isEmpty(cart) &&\r\n          !loaded &&\r\n          !isTempCartId(cartId)\r\n        ) {\r\n          this.load(cartId);\r\n        }\r\n      }),\r\n      map(({ cart }) => (cart ? cart : {})),\r\n      tap((cart) => {\r\n        if (cart) {\r\n          this.cartUser = cart.user;\r\n        }\r\n      }),\r\n      distinctUntilChanged(),\r\n      shareReplay({ bufferSize: 1, refCount: true })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns active cart\r\n   */\r\n  getActive(): Observable<Cart> {\r\n    return this.activeCart$;\r\n  }\r\n\r\n  /**\r\n   * Returns active cart id\r\n   */\r\n  getActiveCartId(): Observable<string> {\r\n    return this.activeCart$.pipe(\r\n      map((cart) => getCartIdByUserId(cart, this.userId)),\r\n      distinctUntilChanged()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns cart entries\r\n   */\r\n  getEntries(): Observable<OrderEntry[]> {\r\n    return this.activeCartId$.pipe(\r\n      switchMap((cartId) => this.multiCartService.getEntries(cartId)),\r\n      distinctUntilChanged()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns cart loading state\r\n   */\r\n  getLoading(): Observable<boolean> {\r\n    return this.cartSelector$.pipe(\r\n      map((cartEntity) => cartEntity.loading),\r\n      distinctUntilChanged()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns true when cart is stable (not loading and not pending processes on cart)\r\n   */\r\n  isStable(): Observable<boolean> {\r\n    // Debounce is used here, to avoid flickering when we switch between different cart entities.\r\n    // For example during `addEntry` method. We might try to load current cart, so `current cart will be then active id.\r\n    // After load fails we might create new cart so we switch to `temp-${uuid}` cart entity used when creating cart.\r\n    // At the end we finally switch to cart `code` for cart id. Between those switches cart `isStable` function should not flicker.\r\n    return this.activeCartId$.pipe(\r\n      switchMap((cartId) => this.multiCartService.isStable(cartId)),\r\n      debounce((state) => (state ? timer(0) : EMPTY)),\r\n      distinctUntilChanged()\r\n    );\r\n  }\r\n\r\n  private loadOrMerge(cartId: string): void {\r\n    // for login user, whenever there's an existing cart, we will load the user\r\n    // current cart and merge it into the existing cart\r\n    if (!cartId || cartId === OCC_CART_ID_CURRENT) {\r\n      this.multiCartService.loadCart({\r\n        userId: this.userId,\r\n        cartId: OCC_CART_ID_CURRENT,\r\n        extraData: {\r\n          active: true,\r\n        },\r\n      });\r\n    } else if (this.isGuestCart()) {\r\n      this.guestCartMerge(cartId);\r\n    } else {\r\n      this.multiCartService.mergeToCurrentCart({\r\n        userId: this.userId,\r\n        cartId,\r\n        extraData: {\r\n          active: true,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  private load(cartId: string): void {\r\n    if (this.userId !== OCC_USER_ID_ANONYMOUS) {\r\n      this.multiCartService.loadCart({\r\n        userId: this.userId,\r\n        cartId: cartId ? cartId : OCC_CART_ID_CURRENT,\r\n        extraData: {\r\n          active: true,\r\n        },\r\n      });\r\n    } else if (cartId && cartId !== OCC_CART_ID_CURRENT) {\r\n      this.multiCartService.loadCart({\r\n        userId: this.userId,\r\n        cartId: cartId,\r\n        extraData: {\r\n          active: true,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  private addEntriesGuestMerge(cartEntries: OrderEntry[]) {\r\n    const entriesToAdd = cartEntries.map((entry) => ({\r\n      productCode: entry.product.code,\r\n      quantity: entry.quantity,\r\n    }));\r\n    this.requireLoadedCartForGuestMerge().subscribe((cartState) => {\r\n      this.multiCartService.addEntries(\r\n        this.userId,\r\n        getCartIdByUserId(cartState.value, this.userId),\r\n        entriesToAdd\r\n      );\r\n    });\r\n  }\r\n\r\n  private requireLoadedCartForGuestMerge() {\r\n    return this.requireLoadedCart(\r\n      this.cartSelector$.pipe(filter(() => !this.isGuestCart()))\r\n    );\r\n  }\r\n\r\n  private isCartCreating(cartState) {\r\n    // cart creating is always represented with loading flags\r\n    // when all loading flags are false it means that we restored wrong cart id\r\n    // could happen on context change or reload right in the middle on cart create call\r\n    return (\r\n      isTempCartId(this.cartId) &&\r\n      (cartState.loading || cartState.success || cartState.error)\r\n    );\r\n  }\r\n\r\n  private requireLoadedCart(\r\n    customCartSelector$?: Observable<ProcessesLoaderState<Cart>>\r\n  ): Observable<ProcessesLoaderState<Cart>> {\r\n    // For guest cart merge we want to filter guest cart in the whole stream\r\n    // We have to wait with load/create/addEntry after guest cart will be deleted.\r\n    // That's why you can provide custom selector with this filter applied.\r\n    const cartSelector$ = customCartSelector$\r\n      ? customCartSelector$\r\n      : this.cartSelector$;\r\n\r\n    return cartSelector$.pipe(\r\n      filter((cartState) => !cartState.loading),\r\n      // Avoid load/create call when there are new cart creating at the moment\r\n      filter((cartState) => !this.isCartCreating(cartState)),\r\n      take(1),\r\n      switchMap((cartState) => {\r\n        // Try to load the cart, because it might have been created on another device between our login and add entry call\r\n        if (\r\n          this.isEmpty(cartState.value) &&\r\n          this.userId !== OCC_USER_ID_ANONYMOUS\r\n        ) {\r\n          this.load(undefined);\r\n        }\r\n        return cartSelector$;\r\n      }),\r\n      filter((cartState) => !cartState.loading),\r\n      // create cart can happen to anonymous user if it is not empty or to any other user if it is loaded and empty\r\n      filter(\r\n        (cartState) =>\r\n          this.userId === OCC_USER_ID_ANONYMOUS ||\r\n          cartState.success ||\r\n          cartState.error\r\n      ),\r\n      take(1),\r\n      switchMap((cartState) => {\r\n        if (this.isEmpty(cartState.value)) {\r\n          this.multiCartService.createCart({\r\n            userId: this.userId,\r\n            extraData: {\r\n              active: true,\r\n            },\r\n          });\r\n        }\r\n        return cartSelector$;\r\n      }),\r\n      filter((cartState) => !cartState.loading),\r\n      filter((cartState) => cartState.success || cartState.error),\r\n      // wait for active cart id to point to code/guid to avoid some work on temp cart entity\r\n      filter((cartState) => !this.isCartCreating(cartState)),\r\n      filter((cartState) => !this.isEmpty(cartState.value)),\r\n      take(1)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Add entry to active cart\r\n   *\r\n   * @param productCode\r\n   * @param quantity\r\n   */\r\n  addEntry(productCode: string, quantity: number): void {\r\n    this.requireLoadedCart().subscribe((cartState) => {\r\n      this.multiCartService.addEntry(\r\n        this.userId,\r\n        getCartIdByUserId(cartState.value, this.userId),\r\n        productCode,\r\n        quantity\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove entry\r\n   *\r\n   * @param entry\r\n   */\r\n  removeEntry(entry: OrderEntry): void {\r\n    this.multiCartService.removeEntry(\r\n      this.userId,\r\n      this.cartId,\r\n      entry.entryNumber\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update entry\r\n   *\r\n   * @param entryNumber\r\n   * @param quantity\r\n   */\r\n  updateEntry(entryNumber: number, quantity: number): void {\r\n    this.multiCartService.updateEntry(\r\n      this.userId,\r\n      this.cartId,\r\n      entryNumber,\r\n      quantity\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns cart entry\r\n   *\r\n   * @param productCode\r\n   */\r\n  getEntry(productCode: string): Observable<OrderEntry> {\r\n    return this.activeCartId$.pipe(\r\n      switchMap((cartId) =>\r\n        this.multiCartService.getEntry(cartId, productCode)\r\n      ),\r\n      distinctUntilChanged()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Assign email to cart\r\n   *\r\n   * @param email\r\n   */\r\n  addEmail(email: string): void {\r\n    this.multiCartService.assignEmail(this.cartId, this.userId, email);\r\n  }\r\n\r\n  /**\r\n   * Get assigned user to cart\r\n   */\r\n  getAssignedUser(): Observable<User> {\r\n    return this.getActive().pipe(map((cart) => cart.user));\r\n  }\r\n\r\n  /**\r\n   * Returns true for guest cart\r\n   */\r\n  isGuestCart(): boolean {\r\n    return (\r\n      this.cartUser &&\r\n      (this.cartUser.name === OCC_USER_ID_GUEST ||\r\n        this.isEmail(this.cartUser.uid.split('|').slice(1).join('|')))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Add multiple entries to a cart\r\n   *\r\n   * @param cartEntries : list of entries to add (OrderEntry[])\r\n   */\r\n  addEntries(cartEntries: OrderEntry[]): void {\r\n    cartEntries.forEach((entry) => {\r\n      this.addEntry(entry.product.code, entry.quantity);\r\n    });\r\n  }\r\n\r\n  private isEmail(str: string): boolean {\r\n    if (str) {\r\n      return str.match(EMAIL_PATTERN) ? true : false;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // TODO: Remove once backend is updated\r\n  /**\r\n   * Temporary method to merge guest cart with user cart because of backend limitation\r\n   * This is for an edge case\r\n   */\r\n  private guestCartMerge(cartId: string): void {\r\n    let cartEntries: OrderEntry[];\r\n    this.getEntries()\r\n      .pipe(take(1))\r\n      .subscribe((entries) => {\r\n        cartEntries = entries;\r\n      });\r\n\r\n    this.multiCartService.deleteCart(cartId, OCC_USER_ID_ANONYMOUS);\r\n\r\n    this.addEntriesGuestMerge(cartEntries);\r\n  }\r\n\r\n  private isEmpty(cart: Cart): boolean {\r\n    return (\r\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\r\n    );\r\n  }\r\n\r\n  private isJustLoggedIn(userId: string): boolean {\r\n    return (\r\n      this.previousUserId !== userId && // *just* logged in\r\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\r\n    );\r\n  }\r\n}\r\n","import { Observable, OperatorFunction } from 'rxjs';\r\nimport { startWith, switchMapTo } from 'rxjs/operators';\r\n\r\n/**\r\n *\r\n * Withdraw from the source observable when notifier emits a value\r\n *\r\n * Withdraw will result in resubscribing to the source observable\r\n * Operator is useful to kill ongoing emission transformation on notifier emission\r\n *\r\n * @param notifier\r\n */\r\nexport function withdrawOn<T>(\r\n  notifier: Observable<any>\r\n): OperatorFunction<T, T> {\r\n  return (source: Observable<T>) =>\r\n    notifier.pipe(startWith(undefined), switchMapTo(source));\r\n}\r\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CartEntryAdapter } from './cart-entry.adapter';\nimport { CartModification } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartEntryConnector {\n  constructor(protected adapter: CartEntryAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification> {\n    return this.adapter.add(userId, cartId, productCode, quantity);\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    return this.adapter.update(userId, cartId, entryNumber, qty, pickupStore);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    return this.adapter.remove(userId, cartId, entryNumber);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { from, Observable } from 'rxjs';\r\nimport { catchError, concatMap, map } from 'rxjs/operators';\r\nimport { CartModification } from '../../../model/cart.model';\r\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { withdrawOn } from '../../../util/withdraw-on';\r\nimport { CartEntryConnector } from '../../connectors/entry/cart-entry.connector';\r\nimport { CartActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class CartEntryEffects {\r\n  private contextChange$ = this.actions$.pipe(\r\n    ofType(\r\n      SiteContextActions.CURRENCY_CHANGE,\r\n      SiteContextActions.LANGUAGE_CHANGE\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  addEntry$: Observable<\r\n    | CartActions.CartAddEntrySuccess\r\n    | CartActions.CartAddEntryFail\r\n    | CartActions.LoadCart\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.CART_ADD_ENTRY),\r\n    map((action: CartActions.CartAddEntry) => action.payload),\r\n    concatMap((payload) => {\r\n      return this.cartEntryConnector\r\n        .add(\r\n          payload.userId,\r\n          payload.cartId,\r\n          payload.productCode,\r\n          payload.quantity\r\n        )\r\n        .pipe(\r\n          map(\r\n            (cartModification: CartModification) =>\r\n              new CartActions.CartAddEntrySuccess({\r\n                ...payload,\r\n                ...(cartModification as Required<CartModification>),\r\n              })\r\n          ),\r\n          catchError((error) =>\r\n            from([\r\n              new CartActions.CartAddEntryFail({\r\n                ...payload,\r\n                error: makeErrorSerializable(error),\r\n              }),\r\n              new CartActions.LoadCart({\r\n                cartId: payload.cartId,\r\n                userId: payload.userId,\r\n              }),\r\n            ])\r\n          )\r\n        );\r\n    }),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  removeEntry$: Observable<\r\n    | CartActions.CartRemoveEntrySuccess\r\n    | CartActions.CartRemoveEntryFail\r\n    | CartActions.LoadCart\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.CART_REMOVE_ENTRY),\r\n    map((action: CartActions.CartRemoveEntry) => action.payload),\r\n    concatMap((payload) =>\r\n      this.cartEntryConnector\r\n        .remove(payload.userId, payload.cartId, payload.entryNumber)\r\n        .pipe(\r\n          map(() => {\r\n            return new CartActions.CartRemoveEntrySuccess({\r\n              ...payload,\r\n            });\r\n          }),\r\n          catchError((error) =>\r\n            from([\r\n              new CartActions.CartRemoveEntryFail({\r\n                ...payload,\r\n                error: makeErrorSerializable(error),\r\n              }),\r\n              new CartActions.LoadCart({\r\n                cartId: payload.cartId,\r\n                userId: payload.userId,\r\n              }),\r\n            ])\r\n          )\r\n        )\r\n    ),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  updateEntry$: Observable<\r\n    | CartActions.CartUpdateEntrySuccess\r\n    | CartActions.CartUpdateEntryFail\r\n    | CartActions.LoadCart\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.CART_UPDATE_ENTRY),\r\n    map((action: CartActions.CartUpdateEntry) => action.payload),\r\n    concatMap((payload) =>\r\n      this.cartEntryConnector\r\n        .update(\r\n          payload.userId,\r\n          payload.cartId,\r\n          payload.entryNumber,\r\n          payload.quantity\r\n        )\r\n        .pipe(\r\n          map(() => {\r\n            return new CartActions.CartUpdateEntrySuccess({\r\n              ...payload,\r\n            });\r\n          }),\r\n          catchError((error) =>\r\n            from([\r\n              new CartActions.CartUpdateEntryFail({\r\n                ...payload,\r\n                error: makeErrorSerializable(error),\r\n              }),\r\n              new CartActions.LoadCart({\r\n                cartId: payload.cartId,\r\n                userId: payload.userId,\r\n              }),\r\n            ])\r\n          )\r\n        )\r\n    ),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private cartEntryConnector: CartEntryConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartVoucherAdapter } from './cart-voucher.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartVoucherConnector {\n  constructor(protected adapter: CartVoucherAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.add(userId, cartId, voucherId);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.remove(userId, cartId, voucherId);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { from, Observable } from 'rxjs';\r\nimport { catchError, map, mergeMap } from 'rxjs/operators';\r\nimport { GlobalMessageService } from '../../../global-message/facade/global-message.service';\r\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { CartVoucherConnector } from '../../connectors/voucher/cart-voucher.connector';\r\nimport { CartActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class CartVoucherEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private cartVoucherConnector: CartVoucherConnector,\r\n    private messageService: GlobalMessageService\r\n  ) {}\r\n\r\n  @Effect()\r\n  addCartVoucher$: Observable<\r\n    | CartActions.CartVoucherAction\r\n    | CartActions.LoadCart\r\n    | CartActions.CartProcessesDecrement\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.CART_ADD_VOUCHER),\r\n    map((action: CartActions.CartAddVoucher) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.cartVoucherConnector\r\n        .add(payload.userId, payload.cartId, payload.voucherId)\r\n        .pipe(\r\n          map(() => {\r\n            this.showGlobalMessage(\r\n              'voucher.applyVoucherSuccess',\r\n              payload.voucherId,\r\n              GlobalMessageType.MSG_TYPE_CONFIRMATION\r\n            );\r\n            return new CartActions.CartAddVoucherSuccess({\r\n              ...payload,\r\n            });\r\n          }),\r\n          catchError((error) =>\r\n            from([\r\n              new CartActions.CartAddVoucherFail({\r\n                ...payload,\r\n                error: makeErrorSerializable(error),\r\n              }),\r\n              new CartActions.CartProcessesDecrement(payload.cartId),\r\n              new CartActions.LoadCart({\r\n                userId: payload.userId,\r\n                cartId: payload.cartId,\r\n              }),\r\n            ])\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  removeCartVoucher$: Observable<\r\n    CartActions.CartVoucherAction | CartActions.LoadCart\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.CART_REMOVE_VOUCHER),\r\n    map((action: CartActions.CartRemoveVoucher) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.cartVoucherConnector\r\n        .remove(payload.userId, payload.cartId, payload.voucherId)\r\n        .pipe(\r\n          map(() => {\r\n            this.showGlobalMessage(\r\n              'voucher.removeVoucherSuccess',\r\n              payload.voucherId,\r\n              GlobalMessageType.MSG_TYPE_INFO\r\n            );\r\n            return new CartActions.CartRemoveVoucherSuccess({\r\n              userId: payload.userId,\r\n              cartId: payload.cartId,\r\n              voucherId: payload.voucherId,\r\n            });\r\n          }),\r\n          catchError((error) =>\r\n            from([\r\n              new CartActions.CartRemoveVoucherFail({\r\n                error: makeErrorSerializable(error),\r\n                cartId: payload.cartId,\r\n                userId: payload.userId,\r\n                voucherId: payload.voucherId,\r\n              }),\r\n              new CartActions.LoadCart({\r\n                userId: payload.userId,\r\n                cartId: payload.cartId,\r\n              }),\r\n            ])\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  private showGlobalMessage(\r\n    text: string,\r\n    param: string,\r\n    messageType: GlobalMessageType\r\n  ) {\r\n    this.messageService.add(\r\n      { key: text, params: { voucherCode: param } },\r\n      messageType\r\n    );\r\n  }\r\n}\r\n","import { Action } from '@ngrx/store';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const VERIFY_ADDRESS = '[Checkout] Verify Address';\nexport const VERIFY_ADDRESS_FAIL = '[Checkout] Verify Address Fail';\nexport const VERIFY_ADDRESS_SUCCESS = '[Checkout] Verify Address Success';\n\nexport const CLEAR_ADDRESS_VERIFICATION_RESULTS =\n  '[Checkout] Clear Address Verification Results';\n\nexport class VerifyAddress implements Action {\n  readonly type = VERIFY_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {}\n}\n\nexport class VerifyAddressFail implements Action {\n  readonly type = VERIFY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class VerifyAddressSuccess implements Action {\n  readonly type = VERIFY_ADDRESS_SUCCESS;\n  constructor(public payload: AddressValidation) {}\n}\n\nexport class ClearAddressVerificationResults implements Action {\n  readonly type = CLEAR_ADDRESS_VERIFICATION_RESULTS;\n  constructor() {}\n}\n\nexport type AddressVerificationActions =\n  | VerifyAddress\n  | VerifyAddressFail\n  | VerifyAddressSuccess\n  | ClearAddressVerificationResults;\n","import { Action } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\n\nexport const LOAD_CARD_TYPES = '[Checkout] Load Card Types';\nexport const LOAD_CARD_TYPES_FAIL = '[Checkout] Load Card Fail';\nexport const LOAD_CARD_TYPES_SUCCESS = '[Checkout] Load Card Success';\n\nexport class LoadCardTypes implements Action {\n  readonly type = LOAD_CARD_TYPES;\n  constructor() {}\n}\n\nexport class LoadCardTypesFail implements Action {\n  readonly type = LOAD_CARD_TYPES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCardTypesSuccess implements Action {\n  readonly type = LOAD_CARD_TYPES_SUCCESS;\n  constructor(public payload: CardType[]) {}\n}\n\nexport type CardTypesAction =\n  | LoadCardTypes\n  | LoadCardTypesFail\n  | LoadCardTypesSuccess;\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode, Order } from '../../model/order.model';\n\nexport const CHECKOUT_FEATURE = 'checkout';\nexport const CHECKOUT_DETAILS = '[Checkout] Checkout Details';\n\nexport const SET_DELIVERY_ADDRESS_PROCESS_ID = 'setDeliveryAddress';\nexport const SET_DELIVERY_MODE_PROCESS_ID = 'setDeliveryMode';\nexport const SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID =\n  'setSupportedDeliveryMode';\nexport const SET_PAYMENT_DETAILS_PROCESS_ID = 'setPaymentDetails';\n\nexport interface StateWithCheckout {\n  [CHECKOUT_FEATURE]: CheckoutState;\n}\n\nexport interface AddressVerificationState {\n  results: AddressValidation | string;\n}\n\nexport interface CardTypesState {\n  entities: { [code: string]: CardType };\n}\n\nexport interface CheckoutStepsState {\n  address: Address;\n  deliveryMode: {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  };\n  paymentDetails: PaymentDetails;\n  orderDetails: Order;\n}\n\nexport interface CheckoutState {\n  steps: LoaderState<CheckoutStepsState>;\n  cardTypes: CardTypesState;\n  addressVerification: AddressVerificationState;\n}\n","import { Action } from '@ngrx/store';\r\nimport { MULTI_CART_DATA } from '../../../cart/store/multi-cart-state';\r\nimport { Address } from '../../../model/address.model';\r\nimport { PaymentDetails } from '../../../model/cart.model';\r\nimport { DeliveryMode, Order } from '../../../model/order.model';\r\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\r\nimport {\r\n  EntityProcessesDecrementAction,\r\n  EntityProcessesIncrementAction,\r\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { CheckoutDetails } from '../../models/checkout.model';\r\nimport {\r\n  CHECKOUT_DETAILS,\r\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\r\n  SET_DELIVERY_MODE_PROCESS_ID,\r\n  SET_PAYMENT_DETAILS_PROCESS_ID,\r\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\r\n} from '../checkout-state';\r\n\r\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS =\r\n  '[Checkout] Clear Checkout Delivery Address';\r\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS =\r\n  '[Checkout] Clear Checkout Delivery Address Success';\r\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL =\r\n  '[Checkout] Clear Checkout Delivery Address Fail';\r\n\r\nexport const CLEAR_CHECKOUT_DELIVERY_MODE =\r\n  '[Checkout] Clear Checkout Delivery Mode';\r\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS =\r\n  '[Checkout] Clear Checkout Delivery Mode Success';\r\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_FAIL =\r\n  '[Checkout] Clear Checkout Delivery Mode Fail';\r\n\r\nexport const ADD_DELIVERY_ADDRESS = '[Checkout] Add Delivery Address';\r\nexport const ADD_DELIVERY_ADDRESS_FAIL = '[Checkout] Add Delivery Address Fail';\r\nexport const ADD_DELIVERY_ADDRESS_SUCCESS =\r\n  '[Checkout] Add Delivery Address Success';\r\n\r\nexport const SET_DELIVERY_ADDRESS = '[Checkout] Set Delivery Address';\r\nexport const SET_DELIVERY_ADDRESS_FAIL = '[Checkout] Set Delivery Address Fail';\r\nexport const SET_DELIVERY_ADDRESS_SUCCESS =\r\n  '[Checkout] Set Delivery Address Success';\r\nexport const RESET_SET_DELIVERY_ADDRESS_PROCESS =\r\n  '[Checkout] Reset Set Delivery Address Process';\r\n\r\nexport const LOAD_SUPPORTED_DELIVERY_MODES =\r\n  '[Checkout] Load Supported Delivery Modes';\r\nexport const LOAD_SUPPORTED_DELIVERY_MODES_FAIL =\r\n  '[Checkout] Load Supported Delivery Modes Fail';\r\nexport const LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS =\r\n  '[Checkout] Load Supported Delivery Modes Success';\r\nexport const CLEAR_SUPPORTED_DELIVERY_MODES =\r\n  '[Checkout] Clear Supported Delivery Modes';\r\n\r\nexport const SET_DELIVERY_MODE = '[Checkout] Set Delivery Mode';\r\nexport const SET_DELIVERY_MODE_FAIL = '[Checkout] Set Delivery Mode Fail';\r\nexport const SET_DELIVERY_MODE_SUCCESS = '[Checkout] Set Delivery Mode Success';\r\nexport const RESET_SET_DELIVERY_MODE_PROCESS =\r\n  '[Checkout] Reset Set Delivery Mode Process';\r\n\r\nexport const SET_SUPPORTED_DELIVERY_MODES =\r\n  '[Checkout] Set Supported Delivery Modes';\r\nexport const SET_SUPPORTED_DELIVERY_MODES_FAIL =\r\n  '[Checkout] Set Supported Delivery Modes Fail';\r\nexport const SET_SUPPORTED_DELIVERY_MODES_SUCCESS =\r\n  '[Checkout] Set Supported Delivery Modes Success';\r\nexport const RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS =\r\n  '[Checkout] Reset Set Supported Delivery Modes Process';\r\n\r\nexport const CREATE_PAYMENT_DETAILS = '[Checkout] Create Payment Details';\r\nexport const CREATE_PAYMENT_DETAILS_FAIL =\r\n  '[Checkout] Create Payment Details Fail';\r\nexport const CREATE_PAYMENT_DETAILS_SUCCESS =\r\n  '[Checkout] Create Payment Details Success';\r\n\r\nexport const SET_PAYMENT_DETAILS = '[Checkout] Set Payment Details';\r\nexport const SET_PAYMENT_DETAILS_FAIL = '[Checkout] Set Payment Details Fail';\r\nexport const SET_PAYMENT_DETAILS_SUCCESS =\r\n  '[Checkout] Set Payment Details Success';\r\nexport const RESET_SET_PAYMENT_DETAILS_PROCESS =\r\n  '[Checkout] Reset Set Payment Details Process';\r\n\r\nexport const PLACE_ORDER = '[Checkout] Place Order';\r\nexport const PLACE_ORDER_FAIL = '[Checkout] Place Order Fail';\r\nexport const PLACE_ORDER_SUCCESS = '[Checkout] Place Order Success';\r\n\r\nexport const CLEAR_CHECKOUT_STEP = '[Checkout] Clear One Checkout Step';\r\nexport const CLEAR_CHECKOUT_DATA = '[Checkout] Clear Checkout Data';\r\n\r\nexport const LOAD_CHECKOUT_DETAILS = '[Checkout] Load Checkout Details';\r\nexport const LOAD_CHECKOUT_DETAILS_FAIL =\r\n  '[Checkout] Load Checkout Details Fail';\r\nexport const LOAD_CHECKOUT_DETAILS_SUCCESS =\r\n  '[Checkout] Load Checkout Details Success';\r\n\r\nexport const CHECKOUT_CLEAR_MISCS_DATA = '[Checkout] Clear Miscs Data';\r\nexport const PAYMENT_PROCESS_SUCCESS = '[Checkout] Payment Process Success';\r\n\r\nexport class AddDeliveryAddress implements Action {\r\n  readonly type = ADD_DELIVERY_ADDRESS;\r\n  constructor(\r\n    public payload: { userId: string; cartId: string; address: Address }\r\n  ) {}\r\n}\r\n\r\nexport class AddDeliveryAddressFail implements Action {\r\n  readonly type = ADD_DELIVERY_ADDRESS_FAIL;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class AddDeliveryAddressSuccess implements Action {\r\n  readonly type = ADD_DELIVERY_ADDRESS_SUCCESS;\r\n  constructor(public payload: Address) {}\r\n}\r\n\r\nexport class SetDeliveryAddress extends StateUtils.EntityLoadAction {\r\n  readonly type = SET_DELIVERY_ADDRESS;\r\n  constructor(\r\n    public payload: { userId: string; cartId: string; address: Address }\r\n  ) {\r\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class SetDeliveryAddressFail extends StateUtils.EntityFailAction {\r\n  readonly type = SET_DELIVERY_ADDRESS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class SetDeliveryAddressSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = SET_DELIVERY_ADDRESS_SUCCESS;\r\n  constructor(public payload: Address) {\r\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ResetSetDeliveryAddressProcess extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = RESET_SET_DELIVERY_ADDRESS_PROCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class LoadSupportedDeliveryModes extends StateUtils.EntityLoadAction {\r\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES;\r\n  constructor(public payload: { userId: string; cartId: string }) {\r\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class LoadSupportedDeliveryModesFail extends StateUtils.EntityFailAction {\r\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class LoadSupportedDeliveryModesSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS;\r\n  constructor(public payload: DeliveryMode[]) {\r\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ResetLoadSupportedDeliveryModesProcess extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class SetDeliveryMode extends StateUtils.EntityLoadAction {\r\n  readonly type = SET_DELIVERY_MODE;\r\n  constructor(\r\n    public payload: { userId: string; cartId: string; selectedModeId: string }\r\n  ) {\r\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class SetDeliveryModeFail extends StateUtils.EntityFailAction {\r\n  readonly type = SET_DELIVERY_MODE_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class SetDeliveryModeSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = SET_DELIVERY_MODE_SUCCESS;\r\n  constructor(public payload: string) {\r\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ResetSetDeliveryModeProcess extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = RESET_SET_DELIVERY_MODE_PROCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class CreatePaymentDetails extends StateUtils.EntityLoadAction {\r\n  readonly type = CREATE_PAYMENT_DETAILS;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      cartId: string;\r\n      paymentDetails: PaymentDetails;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class CreatePaymentDetailsFail extends StateUtils.EntityFailAction {\r\n  readonly type = CREATE_PAYMENT_DETAILS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class CreatePaymentDetailsSuccess implements Action {\r\n  readonly type = CREATE_PAYMENT_DETAILS_SUCCESS;\r\n  constructor(public payload: PaymentDetails) {}\r\n}\r\n\r\nexport class PaymentProcessSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = PAYMENT_PROCESS_SUCCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class SetPaymentDetails extends StateUtils.EntityLoadAction {\r\n  readonly type = SET_PAYMENT_DETAILS;\r\n  constructor(\r\n    public payload: {\r\n      userId: string;\r\n      cartId: string;\r\n      paymentDetails: PaymentDetails;\r\n    }\r\n  ) {\r\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class SetPaymentDetailsFail extends StateUtils.EntityFailAction {\r\n  readonly type = SET_PAYMENT_DETAILS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID, payload);\r\n  }\r\n}\r\n\r\nexport class SetPaymentDetailsSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = SET_PAYMENT_DETAILS_SUCCESS;\r\n  constructor(public payload: PaymentDetails) {\r\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class ResetSetPaymentDetailsProcess extends StateUtils.EntityLoaderResetAction {\r\n  readonly type = RESET_SET_PAYMENT_DETAILS_PROCESS;\r\n  constructor() {\r\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\r\n  }\r\n}\r\n\r\nexport class PlaceOrder implements Action {\r\n  readonly type = PLACE_ORDER;\r\n  constructor(public payload: { userId: string; cartId: string }) {}\r\n}\r\n\r\nexport class PlaceOrderFail implements Action {\r\n  readonly type = PLACE_ORDER_FAIL;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class PlaceOrderSuccess implements Action {\r\n  readonly type = PLACE_ORDER_SUCCESS;\r\n  constructor(public payload: Order) {}\r\n}\r\n\r\nexport class ClearSupportedDeliveryModes implements Action {\r\n  readonly type = CLEAR_SUPPORTED_DELIVERY_MODES;\r\n}\r\n\r\nexport class ClearCheckoutStep implements Action {\r\n  readonly type = CLEAR_CHECKOUT_STEP;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class ClearCheckoutData implements Action {\r\n  readonly type = CLEAR_CHECKOUT_DATA;\r\n}\r\n\r\nexport class LoadCheckoutDetails extends StateUtils.LoaderLoadAction {\r\n  readonly type = LOAD_CHECKOUT_DETAILS;\r\n  constructor(public payload: { userId: string; cartId: string }) {\r\n    super(CHECKOUT_DETAILS);\r\n  }\r\n}\r\n\r\nexport class LoadCheckoutDetailsFail extends StateUtils.LoaderFailAction {\r\n  readonly type = LOAD_CHECKOUT_DETAILS_FAIL;\r\n  constructor(public payload: any) {\r\n    super(CHECKOUT_DETAILS, payload);\r\n  }\r\n}\r\n\r\nexport class LoadCheckoutDetailsSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = LOAD_CHECKOUT_DETAILS_SUCCESS;\r\n  constructor(public payload: CheckoutDetails) {\r\n    super(CHECKOUT_DETAILS);\r\n  }\r\n}\r\n\r\nexport class CheckoutClearMiscsData implements Action {\r\n  readonly type = CHECKOUT_CLEAR_MISCS_DATA;\r\n}\r\n\r\nexport class ClearCheckoutDeliveryAddress implements Action {\r\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS;\r\n  constructor(public payload: { userId: string; cartId: string }) {}\r\n}\r\n\r\nexport class ClearCheckoutDeliveryAddressSuccess implements Action {\r\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class ClearCheckoutDeliveryAddressFail implements Action {\r\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class ClearCheckoutDeliveryMode extends EntityProcessesIncrementAction {\r\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE;\r\n  constructor(public payload: { userId: string; cartId: string }) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class ClearCheckoutDeliveryModeSuccess extends EntityProcessesDecrementAction {\r\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS;\r\n  constructor(public payload: { userId: string; cartId: string }) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport class ClearCheckoutDeliveryModeFail extends EntityProcessesDecrementAction {\r\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_FAIL;\r\n  constructor(public payload: { userId: string; cartId: string; error: any }) {\r\n    super(MULTI_CART_DATA, payload.cartId);\r\n  }\r\n}\r\n\r\nexport type CheckoutAction =\r\n  | AddDeliveryAddress\r\n  | AddDeliveryAddressFail\r\n  | AddDeliveryAddressSuccess\r\n  | SetDeliveryAddress\r\n  | SetDeliveryAddressFail\r\n  | SetDeliveryAddressSuccess\r\n  | ResetSetDeliveryAddressProcess\r\n  | LoadSupportedDeliveryModes\r\n  | LoadSupportedDeliveryModesFail\r\n  | LoadSupportedDeliveryModesSuccess\r\n  | SetDeliveryMode\r\n  | SetDeliveryModeFail\r\n  | SetDeliveryModeSuccess\r\n  | ResetSetDeliveryModeProcess\r\n  | ClearSupportedDeliveryModes\r\n  | CreatePaymentDetails\r\n  | CreatePaymentDetailsFail\r\n  | CreatePaymentDetailsSuccess\r\n  | SetPaymentDetails\r\n  | SetPaymentDetailsFail\r\n  | SetPaymentDetailsSuccess\r\n  | ResetSetPaymentDetailsProcess\r\n  | PlaceOrder\r\n  | PlaceOrderFail\r\n  | PlaceOrderSuccess\r\n  | ClearCheckoutStep\r\n  | ClearCheckoutData\r\n  | ClearCheckoutDeliveryAddress\r\n  | ClearCheckoutDeliveryAddressFail\r\n  | ClearCheckoutDeliveryAddressSuccess\r\n  | ClearCheckoutDeliveryMode\r\n  | ClearCheckoutDeliveryModeFail\r\n  | ClearCheckoutDeliveryModeSuccess\r\n  | LoadCheckoutDetails\r\n  | LoadCheckoutDetailsFail\r\n  | LoadCheckoutDetailsSuccess\r\n  | CheckoutClearMiscsData;\r\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\nimport { CartAdapter } from './cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartConnector {\n  constructor(protected adapter: CartAdapter) {}\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    return this.adapter.load(userId, cartId);\n  }\n\n  public create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    return this.adapter.create(userId, oldCartId, toMergeCartGuid);\n  }\n\n  public delete(userId: string, cartId: string): Observable<{}> {\n    return this.adapter.delete(userId, cartId);\n  }\n\n  public addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}> {\n    return this.adapter.addEmail(userId, cartId, email);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { from, Observable, of } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  concatMap,\r\n  filter,\r\n  groupBy,\r\n  map,\r\n  mergeMap,\r\n  switchMap,\r\n  withLatestFrom,\r\n} from 'rxjs/operators';\r\nimport { CheckoutActions } from '../../../checkout/store/actions';\r\nimport { Cart } from '../../../model/cart.model';\r\nimport { OCC_CART_ID_CURRENT } from '../../../occ/utils/occ-constants';\r\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { withdrawOn } from '../../../util/withdraw-on';\r\nimport { CartConnector } from '../../connectors/cart/cart.connector';\r\nimport { getCartIdByUserId, isCartNotFoundError } from '../../utils/utils';\r\nimport { CartActions } from '../actions/index';\r\nimport { StateWithMultiCart } from '../multi-cart-state';\r\nimport { getCartHasPendingProcessesSelectorFactory } from '../selectors/multi-cart.selector';\r\n\r\n@Injectable()\r\nexport class CartEffects {\r\n  private contextChange$ = this.actions$.pipe(\r\n    ofType(\r\n      SiteContextActions.CURRENCY_CHANGE,\r\n      SiteContextActions.LANGUAGE_CHANGE\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  loadCart$: Observable<\r\n    | CartActions.LoadCartFail\r\n    | CartActions.LoadCartSuccess\r\n    | CartActions.RemoveCart\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.LOAD_CART),\r\n    map((action: CartActions.LoadCart) => action.payload),\r\n    groupBy((payload) => payload.cartId),\r\n    mergeMap((group$) =>\r\n      group$.pipe(\r\n        switchMap((payload) => {\r\n          return of(payload).pipe(\r\n            withLatestFrom(\r\n              this.store.pipe(\r\n                select(\r\n                  getCartHasPendingProcessesSelectorFactory(payload.cartId)\r\n                )\r\n              )\r\n            )\r\n          );\r\n        }),\r\n        filter(([_, hasPendingProcesses]) => !hasPendingProcesses),\r\n        map(([payload]) => payload),\r\n        switchMap((payload) => {\r\n          return this.cartConnector.load(payload.userId, payload.cartId).pipe(\r\n            mergeMap((cart: Cart) => {\r\n              let actions = [];\r\n              if (cart) {\r\n                actions.push(\r\n                  new CartActions.LoadCartSuccess({\r\n                    ...payload,\r\n                    cart,\r\n                    cartId: getCartIdByUserId(cart, payload.userId),\r\n                  })\r\n                );\r\n\r\n                if (payload.cartId === OCC_CART_ID_CURRENT) {\r\n                  // Removing cart from entity object under `current` key as it is no longer needed.\r\n                  // Current cart is loaded under it's code entity.\r\n                  actions.push(\r\n                    new CartActions.RemoveCart({ cartId: OCC_CART_ID_CURRENT })\r\n                  );\r\n                }\r\n              } else {\r\n                actions = [\r\n                  new CartActions.LoadCartFail({\r\n                    ...payload,\r\n                    error: {},\r\n                  }),\r\n                ];\r\n              }\r\n              return actions;\r\n            }),\r\n            catchError((error) => {\r\n              if (error?.error?.errors) {\r\n                const couponExpiredErrors = error.error.errors.filter(\r\n                  (err) => err.reason === 'invalid'\r\n                );\r\n                if (couponExpiredErrors.length > 0) {\r\n                  // Reload in case of expired coupon.\r\n                  return of(new CartActions.LoadCart({ ...payload }));\r\n                }\r\n\r\n                const cartNotFoundErrors = error.error.errors.filter(\r\n                  (err) =>\r\n                    isCartNotFoundError(err) ||\r\n                    err.reason === 'UnknownResourceError'\r\n                );\r\n                if (cartNotFoundErrors.length > 0) {\r\n                  // Remove cart as it doesn't exist on backend (selective cart always exists).\r\n                  return of(\r\n                    new CartActions.RemoveCart({ cartId: payload.cartId })\r\n                  );\r\n                }\r\n              }\r\n              return of(\r\n                new CartActions.LoadCartFail({\r\n                  ...payload,\r\n                  error: makeErrorSerializable(error),\r\n                })\r\n              );\r\n            })\r\n          );\r\n        })\r\n      )\r\n    ),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  createCart$: Observable<\r\n    | CartActions.MergeCartSuccess\r\n    | CartActions.CreateCartSuccess\r\n    | CartActions.CreateCartFail\r\n    | CartActions.SetTempCart\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.CREATE_CART),\r\n    map((action: CartActions.CreateCart) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.cartConnector\r\n        .create(payload.userId, payload.oldCartId, payload.toMergeCartGuid)\r\n        .pipe(\r\n          switchMap((cart: Cart) => {\r\n            const conditionalActions = [];\r\n            if (payload.oldCartId) {\r\n              conditionalActions.push(\r\n                new CartActions.MergeCartSuccess({\r\n                  extraData: payload.extraData,\r\n                  userId: payload.userId,\r\n                  tempCartId: payload.tempCartId,\r\n                  cartId: getCartIdByUserId(cart, payload.userId),\r\n                  oldCartId: payload.oldCartId,\r\n                })\r\n              );\r\n            }\r\n            return [\r\n              new CartActions.CreateCartSuccess({\r\n                ...payload,\r\n                cart,\r\n                cartId: getCartIdByUserId(cart, payload.userId),\r\n              }),\r\n              new CartActions.SetTempCart({\r\n                cart,\r\n                tempCartId: payload.tempCartId,\r\n              }),\r\n              ...conditionalActions,\r\n            ];\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new CartActions.CreateCartFail({\r\n                ...payload,\r\n                error: makeErrorSerializable(error),\r\n              })\r\n            )\r\n          )\r\n        );\r\n    }),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  mergeCart$: Observable<CartActions.CreateCart> = this.actions$.pipe(\r\n    ofType(CartActions.MERGE_CART),\r\n    map((action: CartActions.MergeCart) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.cartConnector.load(payload.userId, OCC_CART_ID_CURRENT).pipe(\r\n        mergeMap((currentCart) => {\r\n          return [\r\n            new CartActions.CreateCart({\r\n              userId: payload.userId,\r\n              oldCartId: payload.cartId,\r\n              toMergeCartGuid: currentCart ? currentCart.guid : undefined,\r\n              extraData: payload.extraData,\r\n              tempCartId: payload.tempCartId,\r\n            }),\r\n          ];\r\n        })\r\n      );\r\n    }),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  // TODO(#7241): Remove when AddVoucherSuccess actions will extend processes actions\r\n  @Effect()\r\n  refresh$: Observable<\r\n    CartActions.LoadCart | CartActions.CartProcessesDecrement\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.CART_ADD_VOUCHER_SUCCESS),\r\n    map((action: CartActions.CartAddVoucherSuccess) => action.payload),\r\n    concatMap((payload) =>\r\n      from([\r\n        new CartActions.CartProcessesDecrement(payload.cartId),\r\n        new CartActions.LoadCart({\r\n          userId: payload.userId,\r\n          cartId: payload.cartId,\r\n        }),\r\n      ])\r\n    )\r\n  );\r\n\r\n  // TODO: Switch to automatic cart reload on processes count reaching 0 for cart entity\r\n  @Effect()\r\n  refreshWithoutProcesses$: Observable<\r\n    CartActions.LoadCart\r\n  > = this.actions$.pipe(\r\n    ofType(\r\n      CartActions.CART_ADD_ENTRY_SUCCESS,\r\n      CartActions.CART_REMOVE_ENTRY_SUCCESS,\r\n      CartActions.CART_UPDATE_ENTRY_SUCCESS,\r\n      CartActions.CART_REMOVE_VOUCHER_SUCCESS,\r\n      CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS\r\n    ),\r\n    map(\r\n      (\r\n        action:\r\n          | CartActions.CartAddEntrySuccess\r\n          | CartActions.CartUpdateEntrySuccess\r\n          | CartActions.CartRemoveEntrySuccess\r\n          | CartActions.CartRemoveVoucherSuccess\r\n          | CheckoutActions.ClearCheckoutDeliveryModeSuccess\r\n      ) => action.payload\r\n    ),\r\n    map(\r\n      (payload) =>\r\n        new CartActions.LoadCart({\r\n          userId: payload.userId,\r\n          cartId: payload.cartId,\r\n        })\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  resetCartDetailsOnSiteContextChange$: Observable<\r\n    CartActions.ResetCartDetails\r\n  > = this.actions$.pipe(\r\n    ofType(\r\n      SiteContextActions.LANGUAGE_CHANGE,\r\n      SiteContextActions.CURRENCY_CHANGE\r\n    ),\r\n    mergeMap(() => {\r\n      return [new CartActions.ResetCartDetails()];\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  addEmail$: Observable<\r\n    | CartActions.AddEmailToCartSuccess\r\n    | CartActions.AddEmailToCartFail\r\n    | CartActions.LoadCart\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.ADD_EMAIL_TO_CART),\r\n    map((action: CartActions.AddEmailToCart) => action.payload),\r\n    mergeMap((payload) =>\r\n      this.cartConnector\r\n        .addEmail(payload.userId, payload.cartId, payload.email)\r\n        .pipe(\r\n          mergeMap(() => {\r\n            return [\r\n              new CartActions.AddEmailToCartSuccess({\r\n                ...payload,\r\n              }),\r\n              new CartActions.LoadCart({\r\n                userId: payload.userId,\r\n                cartId: payload.cartId,\r\n              }),\r\n            ];\r\n          }),\r\n          catchError((error) =>\r\n            from([\r\n              new CartActions.AddEmailToCartFail({\r\n                ...payload,\r\n                error: makeErrorSerializable(error),\r\n              }),\r\n              new CartActions.LoadCart({\r\n                userId: payload.userId,\r\n                cartId: payload.cartId,\r\n              }),\r\n            ])\r\n          )\r\n        )\r\n    ),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  deleteCart$: Observable<\r\n    | CartActions.DeleteCartSuccess\r\n    | CartActions.DeleteCartFail\r\n    | CartActions.LoadCart\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.DELETE_CART),\r\n    map((action: CartActions.DeleteCart) => action.payload),\r\n    mergeMap((payload) =>\r\n      this.cartConnector.delete(payload.userId, payload.cartId).pipe(\r\n        map(() => {\r\n          return new CartActions.DeleteCartSuccess({ ...payload });\r\n        }),\r\n        catchError((error) =>\r\n          from([\r\n            new CartActions.DeleteCartFail({\r\n              ...payload,\r\n              error: makeErrorSerializable(error),\r\n            }),\r\n            // Error might happen in higher backend layer and cart could still be removed.\r\n            // When load fail with NotFound error then RemoveCart action will kick in and clear that cart in our state.\r\n            new CartActions.LoadCart({\r\n              ...payload,\r\n            }),\r\n          ])\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private cartConnector: CartConnector,\r\n    private store: Store<StateWithMultiCart>\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { SaveCartAdapter } from './save-cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SaveCartConnector {\n  constructor(protected adapter: SaveCartAdapter) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    return this.adapter.saveCart(\n      userId,\n      cartId,\n      saveCartName,\n      saveCartDescription\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { EMPTY, from, Observable } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  concatMap,\r\n  map,\r\n  switchMap,\r\n  withLatestFrom,\r\n} from 'rxjs/operators';\r\nimport { AuthService } from '../../../auth/facade/auth.service';\r\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { CartConnector } from '../../connectors/cart/cart.connector';\r\nimport { SaveCartConnector } from '../../connectors/save-cart/save-cart.connecter';\r\nimport { getCartIdByUserId, getWishlistName } from '../../utils/utils';\r\nimport { CartActions } from '../actions';\r\nimport { StateWithMultiCart } from '../multi-cart-state';\r\nimport { MultiCartSelectors } from '../selectors';\r\n\r\n@Injectable()\r\nexport class WishListEffects {\r\n  @Effect()\r\n  createWishList$: Observable<\r\n    CartActions.CreateWishListSuccess | CartActions.CreateWishListFail\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.CREATE_WISH_LIST),\r\n    map((action: CartActions.CreateWishList) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.cartConnector.create(payload.userId).pipe(\r\n        switchMap((cart) => {\r\n          return this.saveCartConnector\r\n            .saveCart(\r\n              payload.userId,\r\n              cart.code,\r\n              payload.name,\r\n              payload.description\r\n            )\r\n            .pipe(\r\n              switchMap((saveCartResult) => [\r\n                new CartActions.CreateWishListSuccess({\r\n                  cart: saveCartResult.savedCartData,\r\n                  userId: payload.userId,\r\n                }),\r\n              ]),\r\n              catchError((error) =>\r\n                from([\r\n                  new CartActions.CreateWishListFail({\r\n                    cartId: cart.code,\r\n                    error: makeErrorSerializable(error),\r\n                  }),\r\n                ])\r\n              )\r\n            );\r\n        })\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  loadWishList$: Observable<\r\n    | CartActions.LoadWishListSuccess\r\n    | CartActions.RemoveCart\r\n    | CartActions.CreateWishList\r\n    | CartActions.LoadWishListFail\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.LOAD_WISH_LIST),\r\n    map((action: CartActions.LoadWishList) => action.payload),\r\n    concatMap((payload) => {\r\n      const { userId, customerId, tempCartId } = payload;\r\n      return this.cartConnector.loadAll(userId).pipe(\r\n        switchMap((carts) => {\r\n          if (carts) {\r\n            const wishList = carts.find(\r\n              (cart) => cart.name === getWishlistName(customerId)\r\n            );\r\n            if (Boolean(wishList)) {\r\n              return [\r\n                new CartActions.LoadWishListSuccess({\r\n                  cart: wishList,\r\n                  userId,\r\n                  tempCartId,\r\n                  customerId,\r\n                  cartId: getCartIdByUserId(wishList, userId),\r\n                }),\r\n                new CartActions.RemoveCart({ cartId: tempCartId }),\r\n              ];\r\n            } else {\r\n              return [\r\n                new CartActions.CreateWishList({\r\n                  userId,\r\n                  name: getWishlistName(customerId),\r\n                }),\r\n              ];\r\n            }\r\n          }\r\n        }),\r\n        catchError((error) =>\r\n          from([\r\n            new CartActions.LoadWishListFail({\r\n              userId,\r\n              cartId: tempCartId,\r\n              customerId,\r\n              error: makeErrorSerializable(error),\r\n            }),\r\n          ])\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  resetWishList$: Observable<\r\n    CartActions.LoadWishListSuccess | CartActions.LoadWishListFail\r\n  > = this.actions$.pipe(\r\n    ofType(\r\n      SiteContextActions.LANGUAGE_CHANGE,\r\n      SiteContextActions.CURRENCY_CHANGE\r\n    ),\r\n    withLatestFrom(\r\n      this.authService.getOccUserId(),\r\n      this.store.pipe(select(MultiCartSelectors.getWishListId))\r\n    ),\r\n    switchMap(([, userId, wishListId]) => {\r\n      if (Boolean(wishListId)) {\r\n        return this.cartConnector.load(userId, wishListId).pipe(\r\n          switchMap((wishList) => [\r\n            new CartActions.LoadWishListSuccess({\r\n              cart: wishList,\r\n              userId,\r\n              cartId: getCartIdByUserId(wishList, userId),\r\n            }),\r\n          ]),\r\n          catchError((error) =>\r\n            from([\r\n              new CartActions.LoadWishListFail({\r\n                userId,\r\n                cartId: wishListId,\r\n                error: makeErrorSerializable(error),\r\n              }),\r\n            ])\r\n          )\r\n        );\r\n      }\r\n      return EMPTY;\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private cartConnector: CartConnector,\r\n    private saveCartConnector: SaveCartConnector,\r\n    private authService: AuthService,\r\n    private store: Store<StateWithMultiCart>\r\n  ) {}\r\n}\r\n","import { Cart } from '../../../model/cart.model';\r\nimport { LoaderAction } from '../../../state/utils/loader/loader.action';\r\nimport { CartActions } from '../actions/index';\r\n\r\nexport const activeCartInitialState = '';\r\nexport const wishListInitialState = '';\r\n\r\nexport function activeCartReducer(\r\n  state = activeCartInitialState,\r\n  action: CartActions.CartAction | CartActions.MultiCartActions\r\n): string {\r\n  switch (action.type) {\r\n    case CartActions.LOAD_CART_SUCCESS:\r\n    case CartActions.CREATE_CART_SUCCESS:\r\n    // point to `temp-${uuid}` cart when we are creating/merging cart\r\n    case CartActions.CREATE_CART:\r\n      if (action?.payload?.extraData?.active) {\r\n        return action.meta.entityId as string;\r\n      } else {\r\n        return state;\r\n      }\r\n    case CartActions.SET_ACTIVE_CART_ID:\r\n      return action.payload;\r\n    case CartActions.REMOVE_CART:\r\n    case CartActions.DELETE_CART_SUCCESS:\r\n      if (action.payload?.cartId === state) {\r\n        return activeCartInitialState;\r\n      }\r\n      return state;\r\n    case CartActions.CLEAR_CART_STATE:\r\n      return activeCartInitialState;\r\n  }\r\n  return state;\r\n}\r\n\r\nexport const cartEntitiesInitialState = undefined;\r\n\r\nexport function cartEntitiesReducer(\r\n  state = cartEntitiesInitialState,\r\n  action: LoaderAction\r\n): Cart {\r\n  switch (action.type) {\r\n    case CartActions.LOAD_CART_SUCCESS:\r\n    case CartActions.CREATE_CART_SUCCESS:\r\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\r\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\r\n    case CartActions.SET_TEMP_CART:\r\n      return action.payload.cart;\r\n  }\r\n  return state;\r\n}\r\n\r\nexport function wishListReducer(\r\n  state = wishListInitialState,\r\n  action: CartActions.WishListActions | CartActions.ClearCartState\r\n): string {\r\n  switch (action.type) {\r\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\r\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\r\n      return action.meta.entityId as string;\r\n    case CartActions.CLEAR_CART_STATE:\r\n      return wishListInitialState;\r\n  }\r\n  return state;\r\n}\r\n","import { InjectionToken, Provider } from '@angular/core';\r\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\r\nimport { AuthActions } from '../../../auth/store/actions/index';\r\nimport { Cart } from '../../../model/cart.model';\r\nimport { entityProcessesLoaderReducer } from '../../../state/utils/entity-processes-loader/entity-processes-loader.reducer';\r\nimport { MultiCartState, MULTI_CART_DATA } from '../multi-cart-state';\r\nimport {\r\n  activeCartReducer,\r\n  cartEntitiesReducer,\r\n  wishListReducer,\r\n} from './multi-cart.reducer';\r\n\r\nexport function clearMultiCartState(\r\n  reducer: ActionReducer<any>\r\n): ActionReducer<any> {\r\n  return function (state, action) {\r\n    if (action.type === AuthActions.LOGOUT) {\r\n      state = undefined;\r\n    }\r\n    return reducer(state, action);\r\n  };\r\n}\r\n\r\nexport const multiCartMetaReducers: MetaReducer<any>[] = [clearMultiCartState];\r\n\r\nexport const multiCartReducerToken: InjectionToken<ActionReducerMap<\r\n  MultiCartState\r\n>> = new InjectionToken<ActionReducerMap<MultiCartState>>('MultiCartReducers');\r\n\r\nexport function getMultiCartReducers(): ActionReducerMap<MultiCartState> {\r\n  return {\r\n    carts: entityProcessesLoaderReducer<Cart>(\r\n      MULTI_CART_DATA,\r\n      cartEntitiesReducer\r\n    ),\r\n    active: activeCartReducer,\r\n    wishList: wishListReducer,\r\n  };\r\n}\r\n\r\nexport const multiCartReducerProvider: Provider = {\r\n  provide: multiCartReducerToken,\r\n  useFactory: getMultiCartReducers,\r\n};\r\n","import { OrderEntry } from '../../model/order.model';\r\n\r\n/**\r\n * Base cart event. Most cart events should have `cartId` and `userId`.\r\n */\r\nexport interface CartEvent {\r\n  cartId: string;\r\n  userId: string;\r\n}\r\n\r\n// =====================================================================\r\n\r\nexport class CartAddEntryEvent implements CartEvent {\r\n  cartId: string;\r\n  userId: string;\r\n  productCode: string;\r\n  quantity: number;\r\n}\r\n\r\nexport class CartAddEntrySuccessEvent implements CartEvent {\r\n  cartId: string;\r\n  userId: string;\r\n  productCode: string;\r\n  quantity: number;\r\n  entry: OrderEntry;\r\n  quantityAdded: number;\r\n  deliveryModeChanged: boolean;\r\n}\r\n\r\nexport class CartAddEntryFailEvent implements CartEvent {\r\n  cartId: string;\r\n  userId: string;\r\n  productCode: string;\r\n  quantity: number;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ofType } from '@ngrx/effects';\r\nimport { ActionsSubject } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map, withLatestFrom } from 'rxjs/operators';\r\nimport { EventService } from '../../event/event.service';\r\nimport { ActionToEventMapping } from '../../state/event/action-to-event-mapping';\r\nimport { createFrom } from '../../util/create-from';\r\nimport { ActiveCartService } from '../facade/active-cart.service';\r\nimport { CartActions } from '../store';\r\nimport {\r\n  CartAddEntryEvent,\r\n  CartAddEntryFailEvent,\r\n  CartAddEntrySuccessEvent,\r\n} from './cart.events';\r\n\r\n/**\r\n * Registers events for the active cart\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class CartEventBuilder {\r\n  constructor(\r\n    protected actionsSubject: ActionsSubject,\r\n    protected event: EventService,\r\n    protected activeCartService: ActiveCartService\r\n  ) {\r\n    this.register();\r\n  }\r\n\r\n  /**\r\n   * Registers events for the active cart\r\n   */\r\n  protected register() {\r\n    this.registerAddEntry();\r\n  }\r\n\r\n  /**\r\n   * Register events for adding entry to the active cart\r\n   */\r\n  protected registerAddEntry() {\r\n    this.registerMapped({\r\n      action: CartActions.CART_ADD_ENTRY,\r\n      event: CartAddEntryEvent,\r\n    });\r\n    this.registerMapped({\r\n      action: CartActions.CART_ADD_ENTRY_SUCCESS,\r\n      event: CartAddEntrySuccessEvent,\r\n    });\r\n    this.registerMapped({\r\n      action: CartActions.CART_ADD_ENTRY_FAIL,\r\n      event: CartAddEntryFailEvent,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registers a stream of target events mapped from the source actions that contain the cart id equal to the active cart id.\r\n   *\r\n   * @param mapping mapping declaration - from `action` string type to `event` class type\r\n   *   (an with optional `factory` function - by default `action.payload` will be assigned to the properties of the event instance).\r\n   */\r\n  protected registerMapped<T>(mapping: ActionToEventMapping<T>): () => void {\r\n    const eventStream$ = this.getAction(mapping.action).pipe(\r\n      withLatestFrom(this.activeCartService.getActiveCartId()),\r\n      filter(\r\n        ([action, activeCartId]) => action.payload['cartId'] === activeCartId // assuming that action's payload contains the cart id\r\n      ),\r\n      map(([action]) => createFrom(mapping.event, action.payload))\r\n    );\r\n\r\n    return this.event.register(mapping.event, eventStream$);\r\n  }\r\n\r\n  /**\r\n   * Returns a stream of actions only of a given type(s)\r\n   *\r\n   * @param actionType type(s) of actions\r\n   */\r\n  protected getAction(\r\n    actionType: string | string[]\r\n  ): Observable<{ type: string; payload?: any }> {\r\n    return this.actionsSubject.pipe(ofType(...[].concat(actionType)));\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CartEventBuilder } from './cart-event.builder';\r\n\r\n@NgModule({})\r\nexport class CartEventModule {\r\n  constructor(_CartEventBuilder: CartEventBuilder) {}\r\n}\r\n","import { CmsComponent } from '../../model';\r\nimport { StateUtils } from '../../state/index';\r\nimport { NodeItem } from '../model/node-item.model';\r\nimport { Page } from '../model/page.model';\r\n\r\nexport const CMS_FEATURE = 'cms';\r\nexport const NAVIGATION_DETAIL_ENTITY = '[Cms] Navigation Entity';\r\nexport const COMPONENT_ENTITY = '[Cms] Component Entity';\r\n\r\nexport interface StateWithCms {\r\n  [CMS_FEATURE]: CmsState;\r\n}\r\n\r\nexport type ComponentsState = StateUtils.EntityState<ComponentsContext>;\r\n\r\nexport interface ComponentsContext {\r\n  component: CmsComponent;\r\n  /**\r\n   * Page context stores an information for which context does the component exist.\r\n   * For example, if `SiteLogoComponent` was successfully loaded for a product page with an ID of 1776948, then this object will contain:\r\n   *\r\n   * ```ts\r\n   * ProductPage-1776948: {\r\n   *  success: true,\r\n   *  loading: false,\r\n   *  error: false,\r\n   *  // The `value` property indicates that the component exists for the given page context.\r\n   *  value: true\r\n   * }\r\n   * ```\r\n   *\r\n   * If the same `SiteLogoComponent` component was tried to be loaded on homepage (page context id is `homepage`),\r\n   * and it doesn't exist for some reason (maybe it has a restriction), then this object will contain:\r\n   *\r\n   * ```ts\r\n   * ProductPage-1776948: {\r\n   *  success: true,\r\n   *  loading: false,\r\n   *  error: false,\r\n   *  // The `value` property indicates that the component exists for the given page context.\r\n   *  value: true\r\n   * },\r\n   * ContentPage-homepage: {\r\n   *  success: true,\r\n   *  loading: false,\r\n   *  error: false,\r\n   *  // The `value` in this case is `false` indicating that the component was tried to be loaded, but it doesn't exist or has a restriction.\r\n   *  value: false\r\n   * }\r\n   * ```\r\n   *\r\n   */\r\n  pageContext: {\r\n    [context: string]: StateUtils.LoaderState<boolean>;\r\n  };\r\n}\r\n\r\nexport type IndexType = {\r\n  content: StateUtils.EntityLoaderState<string>;\r\n  product: StateUtils.EntityLoaderState<string>;\r\n  category: StateUtils.EntityLoaderState<string>;\r\n  catalog: StateUtils.EntityLoaderState<string>;\r\n};\r\n\r\nexport interface NavigationNodes {\r\n  [nodeId: string]: NodeItem;\r\n}\r\n\r\nexport interface PageState {\r\n  pageData: StateUtils.EntityState<Page>;\r\n  index: IndexType;\r\n}\r\n\r\nexport interface CmsState {\r\n  page: PageState;\r\n  components: ComponentsState;\r\n  navigation: StateUtils.EntityLoaderState<NodeItem>;\r\n}\r\n","import { CmsComponent } from '../../../model/cms.model';\r\nimport { PageContext } from '../../../routing/index';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { COMPONENT_ENTITY } from '../cms-state';\r\n\r\nexport const LOAD_CMS_COMPONENT = '[Cms] Load Component';\r\nexport const LOAD_CMS_COMPONENT_FAIL = '[Cms] Load Component Fail';\r\nexport const LOAD_CMS_COMPONENT_SUCCESS = '[Cms] Load Component Success';\r\nexport const CMS_GET_COMPONENT_FROM_PAGE = '[Cms] Get Component from Page';\r\n\r\nexport class LoadCmsComponent extends StateUtils.EntityLoadAction {\r\n  readonly type = LOAD_CMS_COMPONENT;\r\n  constructor(\r\n    public payload: {\r\n      uid: string;\r\n      pageContext: PageContext;\r\n    }\r\n  ) {\r\n    super(COMPONENT_ENTITY, payload.uid);\r\n  }\r\n}\r\n\r\nexport class LoadCmsComponentFail extends StateUtils.EntityFailAction {\r\n  readonly type = LOAD_CMS_COMPONENT_FAIL;\r\n  constructor(\r\n    public payload: { uid: string; error?: any; pageContext: PageContext }\r\n  ) {\r\n    super(COMPONENT_ENTITY, payload.uid, payload.error);\r\n  }\r\n}\r\n\r\nexport class LoadCmsComponentSuccess<\r\n  T extends CmsComponent\r\n> extends StateUtils.EntitySuccessAction {\r\n  readonly type = LOAD_CMS_COMPONENT_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      component: T;\r\n      uid?: string;\r\n      pageContext: PageContext;\r\n    }\r\n  ) {\r\n    super(COMPONENT_ENTITY, payload.uid || payload.component.uid || '');\r\n  }\r\n}\r\n\r\nexport class CmsGetComponentFromPage<\r\n  T extends CmsComponent\r\n> extends StateUtils.EntitySuccessAction {\r\n  readonly type = CMS_GET_COMPONENT_FROM_PAGE;\r\n  constructor(\r\n    public payload:\r\n      | { component: T; pageContext: PageContext }\r\n      | { component: T; pageContext: PageContext }[]\r\n  ) {\r\n    super(\r\n      COMPONENT_ENTITY,\r\n      [].concat(payload).map((cmp) => cmp.component.uid)\r\n    );\r\n  }\r\n}\r\n\r\n// action types\r\nexport type CmsComponentAction<T extends CmsComponent> =\r\n  | LoadCmsComponent\r\n  | LoadCmsComponentFail\r\n  | LoadCmsComponentSuccess<T>\r\n  | CmsGetComponentFromPage<T>;\r\n","import { StateUtils } from '../../../state/utils/index';\r\nimport { NAVIGATION_DETAIL_ENTITY } from '../cms-state';\r\n\r\nexport const LOAD_CMS_NAVIGATION_ITEMS = '[Cms] Load NavigationEntry items';\r\nexport const LOAD_CMS_NAVIGATION_ITEMS_FAIL =\r\n  '[Cms] Load NavigationEntry items Fail';\r\nexport const LOAD_CMS_NAVIGATION_ITEMS_SUCCESS =\r\n  '[Cms] Load NavigationEntry items Success';\r\n\r\nexport class LoadCmsNavigationItems extends StateUtils.EntityLoadAction {\r\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS;\r\n  constructor(public payload: { nodeId: string; items: any[] }) {\r\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\r\n  }\r\n}\r\n\r\nexport class LoadCmsNavigationItemsFail extends StateUtils.EntityFailAction {\r\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_FAIL;\r\n  constructor(nodeId: string, public payload: any) {\r\n    super(NAVIGATION_DETAIL_ENTITY, nodeId, payload);\r\n  }\r\n}\r\n\r\nexport class LoadCmsNavigationItemsSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_SUCCESS;\r\n  constructor(public payload: { nodeId: string; components: any[] }) {\r\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\r\n  }\r\n}\r\n\r\n// action types\r\nexport type CmsNavigationEntryItemAction =\r\n  | LoadCmsNavigationItems\r\n  | LoadCmsNavigationItemsFail\r\n  | LoadCmsNavigationItemsSuccess;\r\n","import { PageContext } from '../../../routing/index';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { Page } from '../../model/page.model';\r\n\r\nexport const LOAD_CMS_PAGE_DATA = '[Cms] Load Page Data';\r\nexport const LOAD_CMS_PAGE_DATA_FAIL = '[Cms] Load Page Data Fail';\r\nexport const LOAD_CMS_PAGE_DATA_SUCCESS = '[Cms] Load Page Data Success';\r\nexport const CMS_SET_PAGE_SUCCESS_INDEX = '[Cms] Set Page Success Index';\r\nexport const CMS_SET_PAGE_FAIL_INDEX = '[Cms] Set Page Fail Index';\r\n\r\nexport class LoadCmsPageData extends StateUtils.EntityLoadAction {\r\n  readonly type = LOAD_CMS_PAGE_DATA;\r\n  constructor(public payload: PageContext) {\r\n    super(payload.type, payload.id);\r\n  }\r\n}\r\n\r\nexport class LoadCmsPageDataFail extends StateUtils.EntityFailAction {\r\n  readonly type = LOAD_CMS_PAGE_DATA_FAIL;\r\n  constructor(pageContext: PageContext, error: any) {\r\n    super(pageContext.type, pageContext.id, error);\r\n  }\r\n}\r\n\r\nexport class LoadCmsPageDataSuccess extends StateUtils.EntitySuccessAction {\r\n  readonly type = LOAD_CMS_PAGE_DATA_SUCCESS;\r\n  constructor(pageContext: PageContext, payload: Page) {\r\n    super(pageContext.type, pageContext.id, payload);\r\n  }\r\n}\r\n\r\nexport class CmsSetPageSuccessIndex extends StateUtils.EntitySuccessAction {\r\n  readonly type = CMS_SET_PAGE_SUCCESS_INDEX;\r\n  constructor(pageContext: PageContext, payload: Page) {\r\n    super(pageContext.type, pageContext.id, payload);\r\n  }\r\n}\r\n\r\nexport class CmsSetPageFailIndex extends StateUtils.EntityFailAction {\r\n  readonly type = CMS_SET_PAGE_FAIL_INDEX;\r\n  constructor(pageContext: PageContext, public payload: string) {\r\n    super(pageContext.type, pageContext.id);\r\n  }\r\n}\r\n\r\n// action types\r\nexport type CmsPageAction =\r\n  | LoadCmsPageData\r\n  | LoadCmsPageDataFail\r\n  | LoadCmsPageDataSuccess\r\n  | CmsSetPageFailIndex;\r\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsState, CMS_FEATURE, StateWithCms } from '../cms-state';\n\nexport const getCmsState: MemoizedSelector<\n  StateWithCms,\n  CmsState\n> = createFeatureSelector<CmsState>(CMS_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { CmsComponent } from '../../../model/cms.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { ComponentsContext, ComponentsState, StateWithCms } from '../cms-state';\r\nimport { getCmsState } from './feature.selectors';\r\n\r\nexport const getComponentsState: MemoizedSelector<\r\n  StateWithCms,\r\n  ComponentsState\r\n> = createSelector(getCmsState, (state) => state.components);\r\n\r\nexport const componentsContextSelectorFactory = (\r\n  uid: string\r\n): MemoizedSelector<StateWithCms, ComponentsContext> => {\r\n  return createSelector(getComponentsState, (componentsState) =>\r\n    StateUtils.entitySelector(componentsState, uid)\r\n  );\r\n};\r\n\r\nexport const componentsLoaderStateSelectorFactory = (\r\n  uid: string,\r\n  context: string\r\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<boolean>> => {\r\n  return createSelector(\r\n    componentsContextSelectorFactory(uid),\r\n    (componentsContext) =>\r\n      (componentsContext &&\r\n        componentsContext.pageContext &&\r\n        componentsContext.pageContext[context]) ||\r\n      StateUtils.initialLoaderState\r\n  );\r\n};\r\n\r\n/**\r\n * This selector will return:\r\n *   - true: component for this context exists\r\n *   - false: component for this context doesn't exist\r\n *   - undefined: if the exists status for component is unknown\r\n *\r\n * @param uid\r\n * @param context\r\n */\r\nexport const componentsContextExistsSelectorFactory = (\r\n  uid: string,\r\n  context: string\r\n): MemoizedSelector<StateWithCms, boolean | undefined> => {\r\n  return createSelector(\r\n    componentsLoaderStateSelectorFactory(uid, context),\r\n    (loaderState) => StateUtils.loaderValueSelector(loaderState)\r\n  );\r\n};\r\n\r\nexport const componentsDataSelectorFactory = (\r\n  uid: string\r\n): MemoizedSelector<StateWithCms, CmsComponent | undefined> => {\r\n  return createSelector(componentsContextSelectorFactory(uid), (state) =>\r\n    state ? state.component : undefined\r\n  );\r\n};\r\n\r\n/**\r\n * This selector will return:\r\n *   - CmsComponent instance: if we have component data for specified context\r\n *   - null: if there is no component data for specified context\r\n *   - undefined: if status of component data for specified context is unknown\r\n *\r\n * @param uid\r\n * @param context\r\n */\r\nexport const componentsSelectorFactory = (\r\n  uid: string,\r\n  context: string\r\n): MemoizedSelector<StateWithCms, CmsComponent | null | undefined> => {\r\n  return createSelector(\r\n    componentsDataSelectorFactory(uid),\r\n    componentsContextExistsSelectorFactory(uid, context),\r\n    (componentState, exists) => {\r\n      switch (exists) {\r\n        case true:\r\n          return componentState;\r\n        case false:\r\n          return null;\r\n        case undefined:\r\n          return undefined;\r\n      }\r\n    }\r\n  );\r\n};\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { NodeItem } from '../../model/node-item.model';\r\nimport { CmsState, StateWithCms } from '../cms-state';\r\nimport { getCmsState } from './feature.selectors';\r\n\r\nexport const getNavigationEntryItemState: MemoizedSelector<\r\n  StateWithCms,\r\n  StateUtils.EntityLoaderState<NodeItem>\r\n> = createSelector(getCmsState, (state: CmsState) => state.navigation);\r\n\r\nexport const getSelectedNavigationEntryItemState = (\r\n  nodeId: string\r\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<NodeItem>> => {\r\n  return createSelector(getNavigationEntryItemState, (nodes) =>\r\n    StateUtils.entityLoaderStateSelector(nodes, nodeId)\r\n  );\r\n};\r\n\r\nexport const getNavigationEntryItems = (\r\n  nodeId: string\r\n): MemoizedSelector<StateWithCms, NodeItem> => {\r\n  return createSelector(\r\n    getSelectedNavigationEntryItemState(nodeId),\r\n    (itemState) => StateUtils.loaderValueSelector(itemState)\r\n  );\r\n};\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { PageType } from '../../../model/cms.model';\r\nimport { PageContext } from '../../../routing';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { ContentSlotData } from '../../model/content-slot-data.model';\r\nimport { Page } from '../../model/page.model';\r\nimport { CmsState, IndexType, PageState, StateWithCms } from '../cms-state';\r\nimport { getCmsState } from './feature.selectors';\r\n\r\nconst getPageEntitiesSelector = (state: PageState) => state.pageData.entities;\r\nconst getIndexByType = (\r\n  index: IndexType,\r\n  type: PageType\r\n): StateUtils.EntityLoaderState<string> => {\r\n  switch (type) {\r\n    case PageType.CONTENT_PAGE: {\r\n      return index.content;\r\n    }\r\n    case PageType.PRODUCT_PAGE: {\r\n      return index.product;\r\n    }\r\n    case PageType.CATEGORY_PAGE: {\r\n      return index.category;\r\n    }\r\n    case PageType.CATALOG_PAGE: {\r\n      return index.catalog;\r\n    }\r\n  }\r\n  return { entities: {} };\r\n};\r\n\r\nconst getPageComponentTypesSelector: (page: Page) => string[] = (\r\n  page: Page\r\n) => {\r\n  const componentTypes = new Set<string>();\r\n  if (page && page.slots) {\r\n    for (const slot of Object.keys(page.slots)) {\r\n      for (const component of page.slots[slot].components || []) {\r\n        componentTypes.add(component.flexType);\r\n      }\r\n    }\r\n  }\r\n  return Array.from(componentTypes);\r\n};\r\n\r\nexport const getPageState: MemoizedSelector<\r\n  StateWithCms,\r\n  PageState\r\n> = createSelector(getCmsState, (state: CmsState) => state.page);\r\n\r\nexport const getPageStateIndex: MemoizedSelector<\r\n  StateWithCms,\r\n  IndexType\r\n> = createSelector(getPageState, (page: PageState) => page.index);\r\n\r\nexport const getPageStateIndexEntityLoaderState = (\r\n  pageContext: PageContext\r\n): MemoizedSelector<StateWithCms, StateUtils.EntityLoaderState<string>> =>\r\n  createSelector(getPageStateIndex, (index: IndexType) =>\r\n    getIndexByType(index, pageContext.type)\r\n  );\r\n\r\nexport const getPageStateIndexLoaderState = (\r\n  pageContext: PageContext\r\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<string>> =>\r\n  createSelector(\r\n    getPageStateIndexEntityLoaderState(pageContext),\r\n    (indexState) =>\r\n      StateUtils.entityLoaderStateSelector(indexState, pageContext.id)\r\n  );\r\n\r\nexport const getPageStateIndexValue = (\r\n  pageContext: PageContext\r\n): MemoizedSelector<StateWithCms, string> =>\r\n  createSelector(getPageStateIndexLoaderState(pageContext), (entity) =>\r\n    StateUtils.loaderValueSelector<string>(entity)\r\n  );\r\n\r\nexport const getPageEntities: MemoizedSelector<\r\n  StateWithCms,\r\n  { [id: string]: Page }\r\n> = createSelector(getPageState, getPageEntitiesSelector);\r\n\r\nexport const getPageData = (\r\n  pageContext: PageContext\r\n): MemoizedSelector<StateWithCms, Page> =>\r\n  createSelector(\r\n    getPageEntities,\r\n    getPageStateIndexValue(pageContext),\r\n    (entities: { [id: string]: Page }, indexValue: string) =>\r\n      entities[indexValue]\r\n  );\r\n\r\nexport const getPageComponentTypes = (\r\n  pageContext: PageContext\r\n): MemoizedSelector<StateWithCms, string[]> =>\r\n  createSelector(getPageData(pageContext), (pageData) =>\r\n    getPageComponentTypesSelector(pageData)\r\n  );\r\n\r\nexport const getCurrentSlotSelectorFactory = (\r\n  pageContext: PageContext,\r\n  position: string\r\n): MemoizedSelector<StateWithCms, ContentSlotData> => {\r\n  return createSelector(getPageData(pageContext), (entity) => {\r\n    if (entity) {\r\n      return entity.slots[position] || { components: [] };\r\n    }\r\n  });\r\n};\r\n","import { PageType } from '../../model/cms.model';\nimport { PageContext } from '../../routing/models/page-context.model';\n\nexport const CURRENT_CONTEXT_KEY = 'current';\n\n/**\n *\n * Serializes the provided page context.\n * The pattern used for serialization is: `pageContext.type-pageContext.id`.\n *\n * @param pageContext to serialize\n * @param ignoreContentPageId if set to true, and the PageType is of type ContentPage, then the serialized page context will not contain the ID.\n * Otherwise, the page context if fully serialized.\n */\nexport function serializePageContext(\n  pageContext: PageContext,\n  ignoreContentPageId?: boolean\n): string {\n  if (!pageContext) {\n    return CURRENT_CONTEXT_KEY;\n  }\n\n  if (ignoreContentPageId && pageContext.type === PageType.CONTENT_PAGE) {\n    return `${pageContext.type}`;\n  }\n\n  return `${pageContext.type}-${pageContext.id}`;\n}\n","import { CmsComponent } from '../../model/cms.model';\r\nimport { ContentSlotData } from './content-slot-data.model';\r\n\r\nexport interface Page {\r\n  pageId?: string;\r\n  name?: string;\r\n  type?: string;\r\n  title?: string;\r\n  template?: string;\r\n  loadTime?: number;\r\n  slots?: { [key: string]: ContentSlotData };\r\n  properties?: any;\r\n  label?: string;\r\n}\r\n\r\n/**\r\n * Represents the cms structure for pages, slots and components.\r\n */\r\nexport interface CmsStructureModel {\r\n  page?: Page;\r\n  components?: CmsComponent[];\r\n}\r\n\r\n/**\r\n * Represents the page meta data that can be used\r\n * to resolve page data and seo related data.\r\n */\r\nexport interface PageMeta {\r\n  /**\r\n   * the page title is used for the page title tag which\r\n   * is visible in the browser navigation as well as in the\r\n   * Search Engine Result Page\r\n   */\r\n  title?: string;\r\n\r\n  /**\r\n   * the page heading is typically used in the UI\r\n   */\r\n  heading?: string;\r\n\r\n  /**\r\n   * the page description is used in the Search Engine Result Page\r\n   */\r\n  description?: string;\r\n\r\n  /**\r\n   * the robots information drives search engines to index the page and\r\n   * follow links in the page\r\n   */\r\n  robots?: PageRobotsMeta[];\r\n\r\n  /**\r\n   * image that can be added to the og:image metatag\r\n   */\r\n  image?: string;\r\n\r\n  /**\r\n   * the list of breadcrumbs that can be rendered in the page UI.\r\n   */\r\n  breadcrumbs?: BreadcrumbMeta[];\r\n}\r\n\r\nexport interface BreadcrumbMeta {\r\n  label: string;\r\n  link: string;\r\n}\r\n\r\nexport enum PageRobotsMeta {\r\n  INDEX = 'INDEX',\r\n  NOINDEX = 'NOINDEX',\r\n  FOLLOW = 'FOLLOW',\r\n  NOFOLLOW = 'NOFOLLOW',\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { combineLatest, Observable, of, queueScheduler, using } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  filter,\r\n  observeOn,\r\n  pluck,\r\n  shareReplay,\r\n  switchMap,\r\n  take,\r\n  tap,\r\n} from 'rxjs/operators';\r\nimport { CmsComponent } from '../../model/cms.model';\r\nimport { RoutingService } from '../../routing/facade/routing.service';\r\nimport { PageContext } from '../../routing/models/page-context.model';\r\nimport { LoaderState } from '../../state/utils/loader/loader-state';\r\nimport { ContentSlotData } from '../model/content-slot-data.model';\r\nimport { NodeItem } from '../model/node-item.model';\r\nimport { Page } from '../model/page.model';\r\nimport { CmsActions } from '../store/actions/index';\r\nimport { StateWithCms } from '../store/cms-state';\r\nimport { CmsSelectors } from '../store/selectors/index';\r\nimport { serializePageContext } from '../utils/cms-utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CmsService {\r\n  private components: {\r\n    [uid: string]: {\r\n      [pageContext: string]: Observable<CmsComponent>;\r\n    };\r\n  } = {};\r\n\r\n  constructor(\r\n    protected store: Store<StateWithCms>,\r\n    protected routingService: RoutingService\r\n  ) {}\r\n\r\n  /**\r\n   * Get current CMS page data\r\n   */\r\n  getCurrentPage(): Observable<Page> {\r\n    return this.routingService\r\n      .getPageContext()\r\n      .pipe(\r\n        switchMap((pageContext) =>\r\n          this.store.select(CmsSelectors.getPageData(pageContext))\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Get CMS component data by uid\r\n   *\r\n   * This method can be safely and optimally used to load multiple components data at the same time.\r\n   * Calling getComponentData multiple times for different components will always result in optimized\r\n   * back-end request: all components requested at the same time (in one event loop) will be loaded in one network call.\r\n   *\r\n   * In case the component data is not present, the method will load it.\r\n   * Otherwise, if the page context is not provided, the current page context from the router state will be used instead.\r\n   *\r\n   * @param uid CMS component uid\r\n   * @param pageContext if provided, it will be used to lookup the component data.\r\n   */\r\n  getComponentData<T extends CmsComponent | null>(\r\n    uid: string,\r\n    pageContext?: PageContext\r\n  ): Observable<T> {\r\n    const context = serializePageContext(pageContext, true);\r\n    if (!this.components[uid]) {\r\n      // create the component data structure, if it doesn't already exist\r\n      this.components[uid] = {};\r\n    }\r\n\r\n    const component = this.components[uid];\r\n    if (!component[context]) {\r\n      // create the component data and assign it to the component's context\r\n      component[context] = this.createComponentData(uid, pageContext);\r\n    }\r\n\r\n    return component[context] as Observable<T>;\r\n  }\r\n\r\n  private createComponentData<T extends CmsComponent>(\r\n    uid: string,\r\n    pageContext?: PageContext\r\n  ): Observable<T> {\r\n    if (!pageContext) {\r\n      return this.routingService.getPageContext().pipe(\r\n        filter((currentContext) => !!currentContext),\r\n        switchMap((currentContext) =>\r\n          this.getComponentData<T>(uid, currentContext)\r\n        )\r\n      );\r\n    }\r\n\r\n    const context = serializePageContext(pageContext, true);\r\n\r\n    const loading$ = combineLatest([\r\n      this.routingService.getNextPageContext(),\r\n      this.store.pipe(\r\n        select(CmsSelectors.componentsLoaderStateSelectorFactory(uid, context))\r\n      ),\r\n    ]).pipe(\r\n      observeOn(queueScheduler),\r\n      tap(([nextContext, loadingState]) => {\r\n        const attemptedLoad =\r\n          loadingState.loading || loadingState.success || loadingState.error;\r\n        // if the requested context is the same as the one that's currently being navigated to\r\n        // (as it might already been triggered and might be available shortly from page data)\r\n        // TODO(issue:3649), TODO(issue:3668) - this optimization could be removed\r\n        const couldBeLoadedWithPageData = nextContext\r\n          ? serializePageContext(nextContext, true) === context\r\n          : false;\r\n\r\n        if (!attemptedLoad && !couldBeLoadedWithPageData) {\r\n          this.store.dispatch(\r\n            new CmsActions.LoadCmsComponent({ uid, pageContext })\r\n          );\r\n        }\r\n      })\r\n    );\r\n\r\n    const component$ = this.store.pipe(\r\n      select(CmsSelectors.componentsSelectorFactory(uid, context)),\r\n      filter((component) => component !== undefined)\r\n    ) as Observable<T | null>;\r\n\r\n    return using(\r\n      () => loading$.subscribe(),\r\n      () => component$\r\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\r\n  }\r\n\r\n  /**\r\n   * Given the position, get the content slot data\r\n   * @param position : content slot position\r\n   */\r\n  getContentSlot(position: string): Observable<ContentSlotData> {\r\n    return this.routingService\r\n      .getPageContext()\r\n      .pipe(\r\n        switchMap((pageContext) =>\r\n          this.store.pipe(\r\n            select(\r\n              CmsSelectors.getCurrentSlotSelectorFactory(pageContext, position)\r\n            ),\r\n            filter(Boolean)\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Given navigation node uid, get items (with id and type) inside the navigation entries\r\n   * @param navigationNodeUid : uid of the navigation node\r\n   */\r\n  getNavigationEntryItems(navigationNodeUid: string): Observable<NodeItem> {\r\n    return this.store.pipe(\r\n      select(CmsSelectors.getNavigationEntryItems(navigationNodeUid))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Load navigation items data\r\n   * @param rootUid : the uid of the root navigation node\r\n   * @param itemList : list of items (with id and type)\r\n   */\r\n  loadNavigationItems(\r\n    rootUid: string,\r\n    itemList: { id: string; superType: string }[]\r\n  ): void {\r\n    this.store.dispatch(\r\n      new CmsActions.LoadCmsNavigationItems({\r\n        nodeId: rootUid,\r\n        items: itemList,\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Refresh the content of the latest cms page\r\n   */\r\n  refreshLatestPage(): void {\r\n    this.routingService\r\n      .getPageContext()\r\n      .pipe(take(1))\r\n      .subscribe((pageContext) =>\r\n        this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Refresh the cms page content by page Id\r\n   * @param pageId\r\n   */\r\n  refreshPageById(pageId: string): void {\r\n    const pageContext: PageContext = { id: pageId };\r\n    this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\r\n  }\r\n\r\n  /**\r\n   * Refresh cms component's content\r\n   * @param uid component uid\r\n   * @param pageContext an optional parameter that enables the caller to specify for which context the component should be refreshed.\r\n   * If not specified, 'current' page context is used.\r\n   */\r\n  refreshComponent(uid: string, pageContext?: PageContext): void {\r\n    this.store.dispatch(new CmsActions.LoadCmsComponent({ uid, pageContext }));\r\n  }\r\n\r\n  /**\r\n   * Given pageContext, return the CMS page data\r\n   * @param pageContext\r\n   */\r\n  getPageState(pageContext: PageContext): Observable<Page> {\r\n    return this.store.pipe(select(CmsSelectors.getPageData(pageContext)));\r\n  }\r\n\r\n  /**\r\n   * Given pageContext, return the CMS page data\r\n   * @param pageContext\r\n   */\r\n  getPageComponentTypes(pageContext: PageContext): Observable<string[]> {\r\n    return this.store.pipe(\r\n      select(CmsSelectors.getPageComponentTypes(pageContext))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Given pageContext, return whether the CMS page data exists or not\r\n   * @param pageContext\r\n   */\r\n  hasPage(pageContext: PageContext, forceReload = false): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(CmsSelectors.getPageStateIndexLoaderState(pageContext)),\r\n      tap((entity: LoaderState<string>) => {\r\n        const attemptedLoad = entity.loading || entity.success || entity.error;\r\n        const shouldReload = forceReload && !entity.loading;\r\n        if (!attemptedLoad || shouldReload) {\r\n          this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\r\n          forceReload = false;\r\n        }\r\n      }),\r\n      filter((entity) => {\r\n        if (!entity.hasOwnProperty('value')) {\r\n          // if we have incomplete state from SSR failed load transfer state,\r\n          // we should wait for reload and actual value\r\n          return false;\r\n        }\r\n        return entity.success || (entity.error && !entity.loading);\r\n      }),\r\n      pluck('success'),\r\n      catchError(() => of(false))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Given pageContext, return the CMS page data\r\n   **/\r\n  getPage(pageContext: PageContext, forceReload = false): Observable<Page> {\r\n    return this.hasPage(pageContext, forceReload).pipe(\r\n      switchMap((hasPage) =>\r\n        hasPage ? this.getPageState(pageContext) : of(null)\r\n      )\r\n    );\r\n  }\r\n\r\n  getPageIndex(pageContext: PageContext): Observable<string> {\r\n    return this.store.pipe(\r\n      select(CmsSelectors.getPageStateIndexValue(pageContext))\r\n    );\r\n  }\r\n\r\n  setPageFailIndex(pageContext: PageContext, value: string): void {\r\n    this.store.dispatch(new CmsActions.CmsSetPageFailIndex(pageContext, value));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { CmsService } from '../../cms/facade/cms.service';\r\nimport { Page, PageRobotsMeta } from '../../cms/model/page.model';\r\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\r\nimport {\r\n  PageRobotsResolver,\r\n  PageTitleResolver,\r\n} from '../../cms/page/page.resolvers';\r\nimport { PageType } from '../../model/cms.model';\r\n\r\n/**\r\n * Resolves the page metadata for the Cart page (Using the `PageType.CONTENT_PAGE`\r\n * and the `CartPageTemplate`). If the cart page matches this template, the more\r\n * generic `ContentPageMetaResolver` is overriden by this resolver.\r\n *\r\n * The page title and robots are resolved in this implementation only.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CartPageMetaResolver extends PageMetaResolver\r\n  implements PageTitleResolver, PageRobotsResolver {\r\n  protected cms$: Observable<Page> = this.cms\r\n    .getCurrentPage()\r\n    .pipe(filter((page) => !!page));\r\n\r\n  constructor(protected cms: CmsService) {\r\n    super();\r\n    this.pageType = PageType.CONTENT_PAGE;\r\n    this.pageTemplate = 'CartPageTemplate';\r\n  }\r\n\r\n  /**\r\n   * Resolves the page title, which is driven by the backend.\r\n   */\r\n  resolveTitle(): Observable<string> {\r\n    return this.cms$.pipe(map((p) => p.title));\r\n  }\r\n\r\n  /**\r\n   * Returns robots for the cart pages, which default to NOINDEX and NOFOLLOW.\r\n   */\r\n  resolveRobots(): Observable<PageRobotsMeta[]> {\r\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { distinctUntilKeyChanged, filter, map } from 'rxjs/operators';\r\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context';\r\nimport { SiteContextParamsService } from '../../site-context/services/site-context-params.service';\r\nimport { StatePersistenceService } from '../../state/services/state-persistence.service';\r\nimport { CartActions, MultiCartSelectors } from '../store';\r\nimport { StateWithMultiCart } from '../store/multi-cart-state';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MultiCartStatePersistenceService {\r\n  constructor(\r\n    protected statePersistenceService: StatePersistenceService,\r\n    protected store: Store<StateWithMultiCart>,\r\n    protected siteContextParamsService: SiteContextParamsService\r\n  ) {}\r\n\r\n  public sync() {\r\n    this.statePersistenceService.syncWithStorage({\r\n      key: 'cart',\r\n      state$: this.getCartState(),\r\n      context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]),\r\n      onRead: (state) => this.onRead(state),\r\n    });\r\n  }\r\n\r\n  protected getCartState(): Observable<{ active: string }> {\r\n    return this.store.pipe(\r\n      select(MultiCartSelectors.getMultiCartState),\r\n      filter((state) => !!state),\r\n      distinctUntilKeyChanged('active'),\r\n      map((state) => {\r\n        return {\r\n          active: state.active,\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  protected onRead(state: { active: string }) {\r\n    this.store.dispatch(new CartActions.ClearCartState());\r\n    if (state) {\r\n      this.store.dispatch(new CartActions.SetActiveCartId(state.active));\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { CartActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class MultiCartEffects {\r\n  @Effect()\r\n  setTempCart$ = this.actions$.pipe(\r\n    ofType(CartActions.SET_TEMP_CART),\r\n    map((action: CartActions.SetTempCart) => {\r\n      return new CartActions.RemoveCart({ cartId: action.payload.tempCartId });\r\n    })\r\n  );\r\n\r\n  // TODO(#7241): Remove when we drop ADD_VOUCHER process and we sort out checkout and cart dependencies\r\n  @Effect()\r\n  processesIncrement$: Observable<\r\n    CartActions.CartProcessesIncrement\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.CART_ADD_VOUCHER),\r\n    map((action: CartActions.CartAddVoucher) => action.payload),\r\n    map((payload) => new CartActions.CartProcessesIncrement(payload.cartId))\r\n  );\r\n\r\n  constructor(private actions$: Actions) {}\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { StateModule } from '../../state/state.module';\r\nimport { CartEntryEffects } from './effects/cart-entry.effect';\r\nimport { CartVoucherEffects } from './effects/cart-voucher.effect';\r\nimport { CartEffects } from './effects/cart.effect';\r\nimport { MultiCartEffects } from './effects/multi-cart.effect';\r\nimport { WishListEffects } from './effects/wish-list.effect';\r\nimport { MULTI_CART_FEATURE } from './multi-cart-state';\r\nimport {\r\n  multiCartMetaReducers,\r\n  multiCartReducerProvider,\r\n  multiCartReducerToken,\r\n} from './reducers/index';\r\n\r\nconst effects: any[] = [\r\n  CartEffects,\r\n  CartEntryEffects,\r\n  CartVoucherEffects,\r\n  WishListEffects,\r\n  MultiCartEffects,\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    StateModule,\r\n    StoreModule.forFeature(MULTI_CART_FEATURE, multiCartReducerToken, {\r\n      metaReducers: multiCartMetaReducers,\r\n    }),\r\n    EffectsModule.forFeature(effects),\r\n  ],\r\n  providers: [multiCartReducerProvider],\r\n})\r\nexport class MultiCartStoreModule {}\r\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\r\nimport { ConfigInitializerService } from '../config/config-initializer/config-initializer.service';\r\nimport { CartEventModule } from './event/cart-event.module';\r\nimport { CartPageMetaResolver } from './services/cart-page-meta.resolver';\r\nimport { MultiCartStatePersistenceService } from './services/multi-cart-state-persistence.service';\r\nimport { MultiCartStoreModule } from './store/multi-cart-store.module';\r\n\r\nexport function cartStatePersistenceFactory(\r\n  cartStatePersistenceService: MultiCartStatePersistenceService,\r\n  configInit: ConfigInitializerService\r\n) {\r\n  const result = () =>\r\n    configInit.getStableConfig('context').then(() => {\r\n      cartStatePersistenceService.sync();\r\n    });\r\n  return result;\r\n}\r\n\r\n@NgModule({\r\n  imports: [MultiCartStoreModule, CartEventModule],\r\n})\r\nexport class CartModule {\r\n  static forRoot(): ModuleWithProviders<CartModule> {\r\n    return {\r\n      ngModule: CartModule,\r\n      providers: [\r\n        {\r\n          provide: PageMetaResolver,\r\n          useExisting: CartPageMetaResolver,\r\n          multi: true,\r\n        },\r\n        {\r\n          provide: APP_INITIALIZER,\r\n          useFactory: cartStatePersistenceFactory,\r\n          deps: [MultiCartStatePersistenceService, ConfigInitializerService],\r\n          multi: true,\r\n        },\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class CartConfig {\r\n  cart?: {\r\n    selectiveCart?: {\r\n      enabled?: boolean;\r\n    };\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/index';\r\nimport * as fromProcessStore from '../../process/store/process-state';\r\nimport {\r\n  getProcessErrorFactory,\r\n  getProcessLoadingFactory,\r\n  getProcessSuccessFactory,\r\n} from '../../process/store/selectors/process.selectors';\r\nimport { CartActions } from '../store/actions/index';\r\nimport { ADD_VOUCHER_PROCESS_ID } from '../store/multi-cart-state';\r\nimport { ActiveCartService } from './active-cart.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CartVoucherService {\r\n  constructor(\r\n    protected store: Store<fromProcessStore.StateWithProcess<void>>,\r\n    protected authService: AuthService,\r\n    protected activeCartService: ActiveCartService\r\n  ) {}\r\n\r\n  addVoucher(voucherId: string, cartId?: string): void {\r\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\r\n      this.store.dispatch(\r\n        new CartActions.CartAddVoucher({\r\n          userId: occUserId,\r\n          cartId: cartIdentifier,\r\n          voucherId: voucherId,\r\n        })\r\n      )\r\n    );\r\n  }\r\n\r\n  removeVoucher(voucherId: string, cartId?: string): void {\r\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\r\n      this.store.dispatch(\r\n        new CartActions.CartRemoveVoucher({\r\n          userId: occUserId,\r\n          cartId: cartIdentifier,\r\n          voucherId: voucherId,\r\n        })\r\n      )\r\n    );\r\n  }\r\n\r\n  // TODO(#7241): Remove when switching to event system for add voucher\r\n  /**\r\n   * Get add voucher process error flag\r\n   * @deprecated since 2.0\r\n   */\r\n  getAddVoucherResultError(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessErrorFactory(ADD_VOUCHER_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  // TODO(#7241): Remove when switching to event system for add voucher\r\n  /**\r\n   * Get add voucher process success flag\r\n   * @deprecated since 2.0\r\n   */\r\n  getAddVoucherResultSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(ADD_VOUCHER_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  // TODO(#7241): Remove when switching to event system for add voucher\r\n  /**\r\n   * Get add voucher process loading flag\r\n   * @deprecated since 2.0\r\n   */\r\n  getAddVoucherResultLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(ADD_VOUCHER_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  // TODO(#7241): Remove when switching to event system for add voucher\r\n  /**\r\n   * Reset add voucher process\r\n   * @deprecated since 2.0\r\n   */\r\n  resetAddVoucherProcessingState(): void {\r\n    this.store.dispatch(new CartActions.CartResetAddVoucher());\r\n  }\r\n\r\n  private combineUserAndCartId(cartId: string): Observable<[string, string]> {\r\n    if (cartId) {\r\n      return this.authService.getOccUserId().pipe(\r\n        take(1),\r\n        map((userId) => [userId, cartId])\r\n      );\r\n    } else {\r\n      return combineLatest([\r\n        this.authService.getOccUserId(),\r\n        this.activeCartService.getActiveCartId(),\r\n      ]).pipe(take(1));\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { Title, User, UserSignUp } from '../../model/misc.model';\r\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/index';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport {\r\n  getProcessErrorFactory,\r\n  getProcessLoadingFactory,\r\n  getProcessSuccessFactory,\r\n} from '../../process/store/selectors/process.selectors';\r\nimport { UserActions } from '../store/actions/index';\r\nimport { UsersSelectors } from '../store/selectors/index';\r\nimport {\r\n  REGISTER_USER_PROCESS_ID,\r\n  REMOVE_USER_PROCESS_ID,\r\n  StateWithUser,\r\n  UPDATE_EMAIL_PROCESS_ID,\r\n  UPDATE_PASSWORD_PROCESS_ID,\r\n  UPDATE_USER_DETAILS_PROCESS_ID,\r\n} from '../store/user-state';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserService {\r\n  constructor(\r\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\r\n    protected authService: AuthService\r\n  ) {}\r\n\r\n  /**\r\n   * Returns a user\r\n   */\r\n  get(): Observable<User> {\r\n    return this.store.pipe(\r\n      select(UsersSelectors.getDetails),\r\n      tap((details) => {\r\n        if (Object.keys(details).length === 0) {\r\n          this.load();\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Loads the user's details\r\n   */\r\n  load(): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      if (userId !== OCC_USER_ID_ANONYMOUS) {\r\n        this.store.dispatch(new UserActions.LoadUserDetails(userId));\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Register a new user\r\n   *\r\n   * @param submitFormData as UserRegisterFormData\r\n   */\r\n  register(userRegisterFormData: UserSignUp): void {\r\n    this.store.dispatch(new UserActions.RegisterUser(userRegisterFormData));\r\n  }\r\n\r\n  /**\r\n   * Register a new user from guest\r\n   *\r\n   * @param guid\r\n   * @param password\r\n   */\r\n  registerGuest(guid: string, password: string): void {\r\n    this.store.dispatch(new UserActions.RegisterGuest({ guid, password }));\r\n  }\r\n\r\n  /**\r\n   * Returns the register user process loading flag\r\n   */\r\n  getRegisterUserResultLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(REGISTER_USER_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the register user process success flag\r\n   */\r\n  getRegisterUserResultSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(REGISTER_USER_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the register user process error flag\r\n   */\r\n  getRegisterUserResultError(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessErrorFactory(REGISTER_USER_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resets the register user process flags\r\n   */\r\n  resetRegisterUserProcessState(): void {\r\n    return this.store.dispatch(new UserActions.ResetRegisterUserProcess());\r\n  }\r\n\r\n  /**\r\n   * Remove user account, that's also called close user's account\r\n   */\r\n  remove(): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(new UserActions.RemoveUser(userId));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the remove user loading flag\r\n   */\r\n  getRemoveUserResultLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(REMOVE_USER_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the remove user failure outcome.\r\n   */\r\n  getRemoveUserResultError(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessErrorFactory(REMOVE_USER_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the remove user process success outcome.\r\n   */\r\n  getRemoveUserResultSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(REMOVE_USER_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resets the remove user process state. The state needs to be reset after the process\r\n   * concludes, regardless if it's a success or an error\r\n   */\r\n  resetRemoveUserProcessState(): void {\r\n    this.store.dispatch(new UserActions.RemoveUserReset());\r\n  }\r\n\r\n  /**\r\n   * Returns titles\r\n   */\r\n  getTitles(): Observable<Title[]> {\r\n    return this.store.pipe(select(UsersSelectors.getAllTitles));\r\n  }\r\n\r\n  /**\r\n   * Retrieves titles\r\n   */\r\n  loadTitles(): void {\r\n    this.store.dispatch(new UserActions.LoadTitles());\r\n  }\r\n\r\n  /**\r\n   * Return whether user's password is successfully reset\r\n   */\r\n  isPasswordReset(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getResetPassword));\r\n  }\r\n\r\n  /**\r\n   * Updates the user's details\r\n   * @param userDetails to be updated\r\n   */\r\n  updatePersonalDetails(userDetails: User): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.UpdateUserDetails({\r\n          username: userId,\r\n          userDetails,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the update user's personal details loading flag\r\n   */\r\n  getUpdatePersonalDetailsResultLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(UPDATE_USER_DETAILS_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the update user's personal details error flag\r\n   */\r\n  getUpdatePersonalDetailsResultError(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessErrorFactory(UPDATE_USER_DETAILS_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the update user's personal details success flag\r\n   */\r\n  getUpdatePersonalDetailsResultSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(UPDATE_USER_DETAILS_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resets the update user details processing state\r\n   */\r\n  resetUpdatePersonalDetailsProcessingState(): void {\r\n    this.store.dispatch(new UserActions.ResetUpdateUserDetails());\r\n  }\r\n\r\n  /**\r\n   * Reset new password.  Part of the forgot password flow.\r\n   * @param token\r\n   * @param password\r\n   */\r\n  resetPassword(token: string, password: string): void {\r\n    this.store.dispatch(new UserActions.ResetPassword({ token, password }));\r\n  }\r\n\r\n  /*\r\n   * Request an email to reset a forgotten password.\r\n   */\r\n  requestForgotPasswordEmail(userEmailAddress: string): void {\r\n    this.store.dispatch(\r\n      new UserActions.ForgotPasswordEmailRequest(userEmailAddress)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates the user's email\r\n   */\r\n  updateEmail(password: string, newUid: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.UpdateEmailAction({\r\n          uid: userId,\r\n          password,\r\n          newUid,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the update user's email success flag\r\n   */\r\n  getUpdateEmailResultSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(UPDATE_EMAIL_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the update user's email error flag\r\n   */\r\n  getUpdateEmailResultError(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessErrorFactory(UPDATE_EMAIL_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the update user's email loading flag\r\n   */\r\n  getUpdateEmailResultLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(UPDATE_EMAIL_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resets the update user's email processing state\r\n   */\r\n  resetUpdateEmailResultState(): void {\r\n    this.store.dispatch(new UserActions.ResetUpdateEmailAction());\r\n  }\r\n\r\n  /**\r\n   * Updates the password for the user\r\n   * @param oldPassword the current password that will be changed\r\n   * @param newPassword the new password\r\n   */\r\n  updatePassword(oldPassword: string, newPassword: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.UpdatePassword({\r\n          userId,\r\n          oldPassword,\r\n          newPassword,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the update password loading flag\r\n   */\r\n  getUpdatePasswordResultLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(UPDATE_PASSWORD_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the update password failure outcome.\r\n   */\r\n  getUpdatePasswordResultError(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessErrorFactory(UPDATE_PASSWORD_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the update password process success outcome.\r\n   */\r\n  getUpdatePasswordResultSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(UPDATE_PASSWORD_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resets the update password process state. The state needs to be reset after the process\r\n   * concludes, regardless if it's a success or an error\r\n   */\r\n  resetUpdatePasswordProcessState(): void {\r\n    this.store.dispatch(new UserActions.UpdatePasswordReset());\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CartConfig } from '../config/cart-config';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CartConfigService {\r\n  constructor(protected config: CartConfig) {}\r\n\r\n  isSelectiveCartEnabled(): boolean {\r\n    return Boolean(this.config?.cart?.selectiveCart?.enabled);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\r\nimport { filter, map, shareReplay, switchMap, take, tap } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { Cart } from '../../model/cart.model';\r\nimport { OrderEntry } from '../../model/order.model';\r\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\r\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\r\nimport { LoaderState } from '../../state/utils/loader/loader-state';\r\nimport { UserService } from '../../user/facade/user.service';\r\nimport { CartConfigService } from '../services/cart-config.service';\r\nimport { StateWithMultiCart } from '../store/multi-cart-state';\r\nimport { MultiCartService } from './multi-cart.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SelectiveCartService {\r\n  private customerId: string;\r\n  private userId: string;\r\n  private cartId: string;\r\n  private selectiveCart$: Observable<Cart>;\r\n  private cartId$: BehaviorSubject<string> = new BehaviorSubject<string>(\r\n    undefined\r\n  );\r\n\r\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\r\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\r\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\r\n\r\n  private cartSelector$ = this.cartId$.pipe(\r\n    switchMap((cartId) => {\r\n      this.cartId = cartId;\r\n      return this.multiCartService.getCartEntity(cartId);\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    protected store: Store<StateWithMultiCart>,\r\n    protected userService: UserService,\r\n    protected authService: AuthService,\r\n    protected multiCartService: MultiCartService,\r\n    protected baseSiteService: BaseSiteService,\r\n    protected cartConfigService: CartConfigService\r\n  ) {\r\n    combineLatest([\r\n      this.userService.get(),\r\n      this.baseSiteService.getActive(),\r\n    ]).subscribe(([user, activeBaseSite]) => {\r\n      if (user && user.customerId && activeBaseSite) {\r\n        this.customerId = user.customerId;\r\n        this.cartId$.next(`selectivecart${activeBaseSite}${this.customerId}`);\r\n      } else if (user && !user.customerId) {\r\n        this.cartId$.next(undefined);\r\n      }\r\n    });\r\n\r\n    this.authService.getOccUserId().subscribe((userId) => {\r\n      this.userId = userId;\r\n\r\n      if (this.isJustLoggedIn(userId)) {\r\n        this.load();\r\n      }\r\n\r\n      this.previousUserId = userId;\r\n    });\r\n\r\n    this.selectiveCart$ = this.cartSelector$.pipe(\r\n      map((cartEntity: LoaderState<Cart>): {\r\n        cart: Cart;\r\n        loading: boolean;\r\n        loaded: boolean;\r\n      } => {\r\n        return {\r\n          cart: cartEntity.value,\r\n          loading: cartEntity.loading,\r\n          loaded:\r\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\r\n        };\r\n      }),\r\n      filter(({ loading }) => !loading),\r\n      tap(({ cart, loaded }) => {\r\n        if (this.cartId && this.isEmpty(cart) && !loaded) {\r\n          this.load();\r\n        }\r\n      }),\r\n      map(({ cart }) => (cart ? cart : {})),\r\n      shareReplay({ bufferSize: 1, refCount: true })\r\n    );\r\n  }\r\n\r\n  getCart(): Observable<Cart> {\r\n    return this.selectiveCart$;\r\n  }\r\n\r\n  getEntries(): Observable<OrderEntry[]> {\r\n    return this.multiCartService.getEntries(this.cartId);\r\n  }\r\n\r\n  getLoaded(): Observable<boolean> {\r\n    return this.cartSelector$.pipe(\r\n      map((cart) => (cart.success || cart.error) && !cart.loading)\r\n    );\r\n  }\r\n\r\n  private load() {\r\n    if (this.isLoggedIn(this.userId) && this.cartId) {\r\n      this.multiCartService.loadCart({\r\n        userId: this.userId,\r\n        cartId: this.cartId,\r\n      });\r\n    }\r\n  }\r\n\r\n  addEntry(productCode: string, quantity: number): void {\r\n    let loadAttempted = false;\r\n    this.cartSelector$\r\n      .pipe(\r\n        filter(() => !loadAttempted),\r\n        switchMap((cartState) => {\r\n          if (this.isEmpty(cartState.value) && !cartState.loading) {\r\n            loadAttempted = true;\r\n            this.load();\r\n          }\r\n          return of(cartState);\r\n        }),\r\n        filter((cartState) => !this.isEmpty(cartState.value)),\r\n        take(1)\r\n      )\r\n      .subscribe(() => {\r\n        this.multiCartService.addEntry(\r\n          this.userId,\r\n          this.cartId,\r\n          productCode,\r\n          quantity\r\n        );\r\n      });\r\n  }\r\n\r\n  removeEntry(entry: OrderEntry): void {\r\n    this.multiCartService.removeEntry(\r\n      this.userId,\r\n      this.cartId,\r\n      entry.entryNumber\r\n    );\r\n  }\r\n\r\n  updateEntry(entryNumber: number, quantity: number): void {\r\n    this.multiCartService.updateEntry(\r\n      this.userId,\r\n      this.cartId,\r\n      entryNumber,\r\n      quantity\r\n    );\r\n  }\r\n\r\n  getEntry(productCode: string): Observable<OrderEntry> {\r\n    return this.multiCartService.getEntry(this.cartId, productCode);\r\n  }\r\n\r\n  /**\r\n   * Indicates if selectiveCart feature is enabled based on cart configuration.\r\n   */\r\n  isEnabled(): boolean {\r\n    return this.cartConfigService.isSelectiveCartEnabled();\r\n  }\r\n\r\n  private isEmpty(cart: Cart): boolean {\r\n    return (\r\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\r\n    );\r\n  }\r\n\r\n  private isJustLoggedIn(userId: string): boolean {\r\n    return (\r\n      this.isLoggedIn(userId) &&\r\n      this.previousUserId !== userId && // *just* logged in\r\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\r\n    );\r\n  }\r\n\r\n  private isLoggedIn(userId: string): boolean {\r\n    return typeof userId !== 'undefined' && userId !== OCC_USER_ID_ANONYMOUS;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport {\r\n  distinctUntilChanged,\r\n  filter,\r\n  map,\r\n  switchMap,\r\n  take,\r\n  tap,\r\n  withLatestFrom,\r\n} from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { Cart, OrderEntry } from '../../model/index';\r\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\r\nimport { UserService } from '../../user/facade/user.service';\r\nimport { CartActions } from '../store/actions/index';\r\nimport { StateWithMultiCart } from '../store/multi-cart-state';\r\nimport { MultiCartSelectors } from '../store/selectors/index';\r\nimport { getWishlistName } from '../utils/utils';\r\nimport { MultiCartService } from './multi-cart.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class WishListService {\r\n  constructor(\r\n    protected store: Store<StateWithMultiCart>,\r\n    protected authService: AuthService,\r\n    protected userService: UserService,\r\n    protected multiCartService: MultiCartService\r\n  ) {}\r\n\r\n  createWishList(userId: string, name?: string, description?: string): void {\r\n    this.store.dispatch(\r\n      new CartActions.CreateWishList({ userId, name, description })\r\n    );\r\n  }\r\n\r\n  getWishList(): Observable<Cart> {\r\n    return combineLatest([\r\n      this.getWishListId(),\r\n      this.userService.get(),\r\n      this.authService.getOccUserId(),\r\n    ]).pipe(\r\n      distinctUntilChanged(),\r\n      tap(([wishListId, user, userId]) => {\r\n        if (\r\n          !Boolean(wishListId) &&\r\n          userId !== OCC_USER_ID_ANONYMOUS &&\r\n          Boolean(user) &&\r\n          Boolean(user.customerId)\r\n        ) {\r\n          this.loadWishList(userId, user.customerId);\r\n        }\r\n      }),\r\n      filter(([wishListId]) => Boolean(wishListId)),\r\n      switchMap(([wishListId]) => this.multiCartService.getCart(wishListId))\r\n    );\r\n  }\r\n\r\n  loadWishList(userId: string, customerId: string): void {\r\n    this.store.dispatch(\r\n      new CartActions.LoadWishList({\r\n        userId,\r\n        customerId,\r\n        tempCartId: getWishlistName(customerId),\r\n      })\r\n    );\r\n  }\r\n\r\n  addEntry(productCode: string): void {\r\n    this.getWishListId()\r\n      .pipe(\r\n        distinctUntilChanged(),\r\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\r\n        tap(([wishListId, userId, user]) => {\r\n          if (\r\n            !Boolean(wishListId) &&\r\n            Boolean(user) &&\r\n            Boolean(user.customerId)\r\n          ) {\r\n            this.loadWishList(userId, user.customerId);\r\n          }\r\n        }),\r\n        filter(([wishListId]) => Boolean(wishListId)),\r\n        take(1)\r\n      )\r\n      .subscribe(([wishListId, userId]) =>\r\n        this.multiCartService.addEntry(userId, wishListId, productCode, 1)\r\n      );\r\n  }\r\n\r\n  removeEntry(entry: OrderEntry): void {\r\n    this.getWishListId()\r\n      .pipe(\r\n        distinctUntilChanged(),\r\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\r\n        tap(([wishListId, userId, user]) => {\r\n          if (\r\n            !Boolean(wishListId) &&\r\n            Boolean(user) &&\r\n            Boolean(user.customerId)\r\n          ) {\r\n            this.loadWishList(userId, user.customerId);\r\n          }\r\n        }),\r\n        filter(([wishListId]) => Boolean(wishListId)),\r\n        take(1)\r\n      )\r\n      .subscribe(([wishListId, userId]) =>\r\n        this.multiCartService.removeEntry(userId, wishListId, entry.entryNumber)\r\n      );\r\n  }\r\n\r\n  getWishListLoading(): Observable<boolean> {\r\n    return this.getWishListId().pipe(\r\n      switchMap((wishListId) =>\r\n        this.multiCartService\r\n          .isStable(wishListId)\r\n          .pipe(map((stable) => !stable))\r\n      )\r\n    );\r\n  }\r\n\r\n  protected getWishListId(): Observable<string> {\r\n    return this.store.pipe(select(MultiCartSelectors.getWishListId));\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\n\nexport abstract class TranslationService {\n  /**\n   * Translates given key with options.\n   * If key is missing, it tries to load the chunk and emits a value when chunk is loaded.\n   * If key is missing after loaded chunk, a fallback value is emitted\n   *\n   * @param key translation key\n   * @param options values for interpolation in translation\n   * @param whitespaceUntilLoaded if true, immediately emits a non-breaking space\n   */\n  translate: (\n    key: string,\n    options?: any,\n    whitespaceUntilLoaded?: boolean\n  ) => Observable<string>;\n\n  /**\n   * Loads chunks with translations\n   *\n   * @param chunkNames array of chunk names to be loaded\n   */\n  loadChunks: (chunkNames: string | string[]) => Promise<any>;\n}\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\r\nimport { PageRobotsMeta } from '../../cms/model/page.model';\r\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\r\nimport {\r\n  PageRobotsResolver,\r\n  PageTitleResolver,\r\n} from '../../cms/page/page.resolvers';\r\nimport { TranslationService } from '../../i18n/translation.service';\r\nimport { PageType } from '../../model/cms.model';\r\n\r\n/**\r\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`\r\n * and the `MultiStepCheckoutSummaryPageTemplate`. If the checkout page matches this template,\r\n * the more generic `ContentPageMetaResolver` is overriden by this resolver.\r\n *\r\n * The page title and robots are resolved in this implementation only.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CheckoutPageMetaResolver extends PageMetaResolver\r\n  implements PageTitleResolver, PageRobotsResolver {\r\n  protected cart$ = this.activeCartService.getActive();\r\n\r\n  constructor(\r\n    protected translation: TranslationService,\r\n    protected activeCartService: ActiveCartService\r\n  ) {\r\n    super();\r\n    this.pageType = PageType.CONTENT_PAGE;\r\n    this.pageTemplate = 'MultiStepCheckoutSummaryPageTemplate';\r\n  }\r\n\r\n  resolveTitle(): Observable<string> {\r\n    return this.cart$.pipe(\r\n      switchMap((c) =>\r\n        this.translation.translate('pageMetaResolver.checkout.title', {\r\n          count: c.totalItems,\r\n        })\r\n      )\r\n    );\r\n  }\r\n\r\n  resolveRobots(): Observable<PageRobotsMeta[]> {\r\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\r\n  }\r\n}\r\n","import { CheckoutActions } from '../actions/index';\nimport { AddressVerificationState } from '../checkout-state';\n\nexport const initialState: AddressVerificationState = {\n  results: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: CheckoutActions.AddressVerificationActions\n): AddressVerificationState {\n  switch (action.type) {\n    case CheckoutActions.VERIFY_ADDRESS_SUCCESS: {\n      const results = action.payload;\n\n      return {\n        ...state,\n        results,\n      };\n    }\n\n    case CheckoutActions.VERIFY_ADDRESS_FAIL: {\n      return {\n        ...state,\n        results: 'FAIL',\n      };\n    }\n\n    case CheckoutActions.CLEAR_ADDRESS_VERIFICATION_RESULTS: {\n      return {\n        ...state,\n        results: {},\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getAddressVerificationResults = (\n  state: AddressVerificationState\n) => state.results;\n","import { CardType } from '../../../model/cart.model';\nimport { CheckoutActions } from '../actions/index';\nimport { CardTypesState } from '../checkout-state';\n\nexport const initialState: CardTypesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CardTypesAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CardTypesState {\n  switch (action.type) {\n    case CheckoutActions.LOAD_CARD_TYPES_SUCCESS: {\n      const cardTypes: CardType[] = action.payload;\n      const entities = cardTypes.reduce(\n        (cardTypesEntities: { [code: string]: CardType }, name: CardType) => {\n          return {\n            ...cardTypesEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getCardTypesEntites = (state: CardTypesState) => state.entities;\n","import { Address } from '../../../model/address.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { CheckoutStepsState } from '../checkout-state';\nimport { CheckoutActions } from './../actions/index';\n\nexport const initialState: CheckoutStepsState = {\n  address: {},\n  deliveryMode: {\n    supported: {},\n    selected: '',\n  },\n  paymentDetails: {},\n  orderDetails: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CheckoutAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CheckoutStepsState {\n  switch (action.type) {\n    case CheckoutActions.ADD_DELIVERY_ADDRESS_SUCCESS:\n    case CheckoutActions.SET_DELIVERY_ADDRESS_SUCCESS: {\n      const address: Address = action.payload;\n\n      return {\n        ...state,\n        address,\n      };\n    }\n\n    case CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS: {\n      const supportedModes = action.payload;\n      if (!supportedModes) {\n        return state;\n      }\n\n      const supported = supportedModes.reduce(\n        (modes: { [code: string]: DeliveryMode }, mode: DeliveryMode) => {\n          return {\n            ...modes,\n            [mode.code]: mode,\n          };\n        },\n        {\n          ...state.deliveryMode.supported,\n        }\n      );\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported,\n        },\n      };\n    }\n\n    case CheckoutActions.SET_DELIVERY_MODE_SUCCESS: {\n      const selected = action.payload;\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected,\n        },\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_SUCCESS:\n    case CheckoutActions.SET_PAYMENT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        paymentDetails: action.payload,\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_FAIL: {\n      const paymentDetails = action.payload;\n      if (paymentDetails['hasError']) {\n        return {\n          ...state,\n          paymentDetails,\n        };\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.PLACE_ORDER_SUCCESS: {\n      const orderDetails: Order = action.payload;\n\n      return {\n        ...state,\n        orderDetails,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DATA: {\n      return initialState;\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_STEP: {\n      const stepNumber = action.payload;\n      switch (stepNumber) {\n        case 1: {\n          return {\n            ...state,\n            address: {},\n          };\n        }\n\n        case 2: {\n          return {\n            ...state,\n            deliveryMode: {\n              ...state.deliveryMode,\n              supported: {},\n              selected: '',\n            },\n          };\n        }\n\n        case 3: {\n          return {\n            ...state,\n            paymentDetails: {},\n          };\n        }\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.CLEAR_SUPPORTED_DELIVERY_MODES:\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported: {},\n        },\n      };\n    }\n    case CheckoutActions.LOAD_CHECKOUT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        address: action.payload.deliveryAddress,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected:\n            action.payload.deliveryMode && action.payload.deliveryMode.code,\n        },\n        paymentDetails: action.payload.paymentInfo,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS: {\n      return {\n        ...state,\n        address: {},\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected: '',\n        },\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\r\n\r\nimport { ActionReducerMap } from '@ngrx/store';\r\n\r\nimport {\r\n  CheckoutState,\r\n  CHECKOUT_DETAILS,\r\n  CheckoutStepsState,\r\n} from '../checkout-state';\r\n\r\nimport * as fromAddressVerification from './address-verification.reducer';\r\nimport * as fromCardTypes from './card-types.reducer';\r\nimport * as fromCheckout from './checkout.reducer';\r\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\r\n\r\nexport function getReducers(): ActionReducerMap<CheckoutState> {\r\n  return {\r\n    steps: loaderReducer<CheckoutStepsState>(\r\n      CHECKOUT_DETAILS,\r\n      fromCheckout.reducer\r\n    ),\r\n    cardTypes: fromCardTypes.reducer,\r\n    addressVerification: fromAddressVerification.reducer,\r\n  };\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducerMap<\r\n  CheckoutState\r\n>> = new InjectionToken<ActionReducerMap<CheckoutState>>('CheckoutReducers');\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n","import { Injectable } from '@angular/core';\nimport { UserAddressAdapter } from './user-address.adapter';\nimport { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressConnector {\n  constructor(protected adapter: UserAddressAdapter) {}\n\n  getAll(userId: string): Observable<Address[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    return this.adapter.add(userId, address);\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    return this.adapter.update(userId, addressId, address);\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    return this.adapter.verify(userId, address);\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    return this.adapter.delete(userId, addressId);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, mergeMap } from 'rxjs/operators';\r\nimport { UserAddressConnector } from '../../../user/connectors/address/user-address.connector';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { CheckoutActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class AddressVerificationEffect {\r\n  @Effect()\r\n  verifyAddress$: Observable<\r\n    CheckoutActions.VerifyAddressSuccess | CheckoutActions.VerifyAddressFail\r\n  > = this.actions$.pipe(\r\n    ofType<CheckoutActions.VerifyAddress>(CheckoutActions.VERIFY_ADDRESS),\r\n    map((action) => action.payload),\r\n    mergeMap((payload) =>\r\n      this.userAddressConnector.verify(payload.userId, payload.address).pipe(\r\n        map((data) => new CheckoutActions.VerifyAddressSuccess(data)),\r\n        catchError((error) =>\r\n          of(\r\n            new CheckoutActions.VerifyAddressFail(makeErrorSerializable(error))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userAddressConnector: UserAddressConnector\r\n  ) {}\r\n}\r\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutPaymentAdapter } from './checkout-payment.adapter';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentConnector {\n  constructor(protected adapter: CheckoutPaymentAdapter) {}\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    return this.adapter.create(userId, cartId, paymentDetails);\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.adapter.set(userId, cartId, paymentDetailsId);\n  }\n\n  getCardTypes(): Observable<CardType[]> {\n    return this.adapter.loadCardTypes();\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\r\nimport { CheckoutActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class CardTypesEffects {\r\n  @Effect()\r\n  loadCardTypes$: Observable<\r\n    CheckoutActions.LoadCardTypesSuccess | CheckoutActions.LoadCardTypesFail\r\n  > = this.actions$.pipe(\r\n    ofType(CheckoutActions.LOAD_CARD_TYPES),\r\n    switchMap(() => {\r\n      return this.checkoutPaymentConnector.getCardTypes().pipe(\r\n        map((cardTypes) => new CheckoutActions.LoadCardTypesSuccess(cardTypes)),\r\n        catchError((error) =>\r\n          of(\r\n            new CheckoutActions.LoadCardTypesFail(makeErrorSerializable(error))\r\n          )\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private checkoutPaymentConnector: CheckoutPaymentConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from './checkout.adapter';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConnector {\n  constructor(protected adapter: CheckoutAdapter) {}\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    return this.adapter.placeOrder(userId, cartId);\n  }\n\n  public loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    return this.adapter.loadCheckoutDetails(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryAddress(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryMode(userId, cartId);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutDeliveryAdapter } from './checkout-delivery.adapter';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryConnector {\n  constructor(protected adapter: CheckoutDeliveryAdapter) {}\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    return this.adapter.createAddress(userId, cartId, address);\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.adapter.setAddress(userId, cartId, addressId);\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.adapter.setMode(userId, cartId, deliveryModeId);\n  }\n\n  public getMode(userId: string, cartId: string): Observable<DeliveryMode> {\n    return this.adapter.getMode(userId, cartId);\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.adapter.getSupportedModes(userId, cartId);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { from, Observable, of } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  concatMap,\r\n  filter,\r\n  map,\r\n  mergeMap,\r\n  switchMap,\r\n} from 'rxjs/operators';\r\nimport { AuthActions } from '../../../auth/store/actions/index';\r\nimport { CartActions } from '../../../cart/store/actions/index';\r\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\r\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\r\nimport { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';\r\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\r\nimport { UserActions } from '../../../user/store/actions/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { withdrawOn } from '../../../util/withdraw-on';\r\nimport { CheckoutConnector } from '../../connectors/checkout/checkout.connector';\r\nimport { CheckoutDeliveryConnector } from '../../connectors/delivery/checkout-delivery.connector';\r\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\r\nimport { CheckoutActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class CheckoutEffects {\r\n  private contextChange$ = this.actions$.pipe(\r\n    ofType(\r\n      SiteContextActions.CURRENCY_CHANGE,\r\n      SiteContextActions.LANGUAGE_CHANGE\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  addDeliveryAddress$: Observable<\r\n    | UserActions.LoadUserAddresses\r\n    | CheckoutActions.SetDeliveryAddress\r\n    | CheckoutActions.AddDeliveryAddressFail\r\n  > = this.actions$.pipe(\r\n    ofType(CheckoutActions.ADD_DELIVERY_ADDRESS),\r\n    map((action: CheckoutActions.AddDeliveryAddress) => action.payload),\r\n    mergeMap((payload) =>\r\n      this.checkoutDeliveryConnector\r\n        .createAddress(payload.userId, payload.cartId, payload.address)\r\n        .pipe(\r\n          mergeMap((address) => {\r\n            address['titleCode'] = payload.address.titleCode;\r\n            if (payload.address.region && payload.address.region.isocodeShort) {\r\n              Object.assign(address.region, {\r\n                isocodeShort: payload.address.region.isocodeShort,\r\n              });\r\n            }\r\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\r\n              return [\r\n                new CheckoutActions.SetDeliveryAddress({\r\n                  userId: payload.userId,\r\n                  cartId: payload.cartId,\r\n                  address: address,\r\n                }),\r\n              ];\r\n            } else {\r\n              return [\r\n                new UserActions.LoadUserAddresses(payload.userId),\r\n                new CheckoutActions.SetDeliveryAddress({\r\n                  userId: payload.userId,\r\n                  cartId: payload.cartId,\r\n                  address: address,\r\n                }),\r\n              ];\r\n            }\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new CheckoutActions.AddDeliveryAddressFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        )\r\n    ),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  setDeliveryAddress$: Observable<\r\n    | CheckoutActions.SetDeliveryAddressSuccess\r\n    | CheckoutActions.ClearSupportedDeliveryModes\r\n    | CheckoutActions.ClearCheckoutDeliveryMode\r\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\r\n    | CheckoutActions.LoadSupportedDeliveryModes\r\n    | CheckoutActions.SetDeliveryAddressFail\r\n  > = this.actions$.pipe(\r\n    ofType(CheckoutActions.SET_DELIVERY_ADDRESS),\r\n    map((action: any) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.checkoutDeliveryConnector\r\n        .setAddress(payload.userId, payload.cartId, payload.address.id)\r\n        .pipe(\r\n          mergeMap(() => [\r\n            new CheckoutActions.SetDeliveryAddressSuccess(payload.address),\r\n            new CheckoutActions.ClearCheckoutDeliveryMode({\r\n              userId: payload.userId,\r\n              cartId: payload.cartId,\r\n            }),\r\n            new CheckoutActions.ClearSupportedDeliveryModes(),\r\n            new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\r\n            new CheckoutActions.LoadSupportedDeliveryModes({\r\n              userId: payload.userId,\r\n              cartId: payload.cartId,\r\n            }),\r\n          ]),\r\n          catchError((error) =>\r\n            of(\r\n              new CheckoutActions.SetDeliveryAddressFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    }),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  loadSupportedDeliveryModes$: Observable<\r\n    | CheckoutActions.LoadSupportedDeliveryModesSuccess\r\n    | CheckoutActions.LoadSupportedDeliveryModesFail\r\n  > = this.actions$.pipe(\r\n    ofType(CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES),\r\n    map((action: any) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.checkoutDeliveryConnector\r\n        .getSupportedModes(payload.userId, payload.cartId)\r\n        .pipe(\r\n          map((data) => {\r\n            return new CheckoutActions.LoadSupportedDeliveryModesSuccess(data);\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new CheckoutActions.LoadSupportedDeliveryModesFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    }),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  clearCheckoutMiscsDataOnLanguageChange$: Observable<\r\n    | CheckoutActions.CheckoutClearMiscsData\r\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\r\n  > = this.actions$.pipe(\r\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\r\n    mergeMap(() => [\r\n      new CheckoutActions.CheckoutClearMiscsData(),\r\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\r\n    ])\r\n  );\r\n\r\n  @Effect()\r\n  clearDeliveryModesOnCurrencyChange$: Observable<\r\n    CheckoutActions.ClearSupportedDeliveryModes\r\n  > = this.actions$.pipe(\r\n    ofType(SiteContextActions.CURRENCY_CHANGE),\r\n    map(() => new CheckoutActions.ClearSupportedDeliveryModes())\r\n  );\r\n\r\n  @Effect()\r\n  clearCheckoutDataOnLogout$: Observable<\r\n    CheckoutActions.ClearCheckoutData\r\n  > = this.actions$.pipe(\r\n    ofType(AuthActions.LOGOUT),\r\n    map(() => new CheckoutActions.ClearCheckoutData())\r\n  );\r\n\r\n  @Effect()\r\n  clearCheckoutDataOnLogin$: Observable<\r\n    CheckoutActions.ClearCheckoutData\r\n  > = this.actions$.pipe(\r\n    ofType(AuthActions.LOGIN),\r\n    map(() => new CheckoutActions.ClearCheckoutData())\r\n  );\r\n\r\n  @Effect()\r\n  setDeliveryMode$: Observable<\r\n    | CheckoutActions.SetDeliveryModeSuccess\r\n    | CheckoutActions.SetDeliveryModeFail\r\n    | CartActions.LoadCart\r\n  > = this.actions$.pipe(\r\n    ofType(CheckoutActions.SET_DELIVERY_MODE),\r\n    map((action: any) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.checkoutDeliveryConnector\r\n        .setMode(payload.userId, payload.cartId, payload.selectedModeId)\r\n        .pipe(\r\n          mergeMap(() => {\r\n            return [\r\n              new CheckoutActions.SetDeliveryModeSuccess(\r\n                payload.selectedModeId\r\n              ),\r\n              new CartActions.LoadCart({\r\n                userId: payload.userId,\r\n                cartId: payload.cartId,\r\n              }),\r\n            ];\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new CheckoutActions.SetDeliveryModeFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    }),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  createPaymentDetails$: Observable<\r\n    | UserActions.LoadUserPaymentMethods\r\n    | CheckoutActions.CreatePaymentDetailsSuccess\r\n    | CheckoutActions.CreatePaymentDetailsFail\r\n  > = this.actions$.pipe(\r\n    ofType(CheckoutActions.CREATE_PAYMENT_DETAILS),\r\n    map((action: any) => action.payload),\r\n    mergeMap((payload) => {\r\n      // get information for creating a subscription directly with payment provider\r\n      return this.checkoutPaymentConnector\r\n        .create(payload.userId, payload.cartId, payload.paymentDetails)\r\n        .pipe(\r\n          mergeMap((details) => {\r\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\r\n              return [new CheckoutActions.CreatePaymentDetailsSuccess(details)];\r\n            } else {\r\n              return [\r\n                new UserActions.LoadUserPaymentMethods(payload.userId),\r\n                new CheckoutActions.CreatePaymentDetailsSuccess(details),\r\n              ];\r\n            }\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new CheckoutActions.CreatePaymentDetailsFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    }),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  setPaymentDetails$: Observable<\r\n    | CheckoutActions.SetPaymentDetailsSuccess\r\n    | CheckoutActions.SetPaymentDetailsFail\r\n  > = this.actions$.pipe(\r\n    ofType(CheckoutActions.SET_PAYMENT_DETAILS),\r\n    map((action: any) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.checkoutPaymentConnector\r\n        .set(payload.userId, payload.cartId, payload.paymentDetails.id)\r\n        .pipe(\r\n          map(\r\n            () =>\r\n              new CheckoutActions.SetPaymentDetailsSuccess(\r\n                payload.paymentDetails\r\n              )\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              new CheckoutActions.SetPaymentDetailsFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    }),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  placeOrder$: Observable<\r\n    | CheckoutActions.PlaceOrderSuccess\r\n    | GlobalMessageActions.AddMessage\r\n    | CheckoutActions.PlaceOrderFail\r\n    | CartActions.RemoveCart\r\n  > = this.actions$.pipe(\r\n    ofType(CheckoutActions.PLACE_ORDER),\r\n    map((action: any) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.checkoutConnector\r\n        .placeOrder(payload.userId, payload.cartId)\r\n        .pipe(\r\n          switchMap((data) => [\r\n            new CartActions.RemoveCart({ cartId: payload.cartId }),\r\n            new CheckoutActions.PlaceOrderSuccess(data),\r\n          ]),\r\n          catchError((error) =>\r\n            of(new CheckoutActions.PlaceOrderFail(makeErrorSerializable(error)))\r\n          )\r\n        );\r\n    }),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  loadCheckoutDetails$: Observable<\r\n    | CheckoutActions.LoadCheckoutDetailsSuccess\r\n    | CheckoutActions.LoadCheckoutDetailsFail\r\n  > = this.actions$.pipe(\r\n    ofType(CheckoutActions.LOAD_CHECKOUT_DETAILS),\r\n    map((action: CheckoutActions.LoadCheckoutDetails) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.checkoutConnector\r\n        .loadCheckoutDetails(payload.userId, payload.cartId)\r\n        .pipe(\r\n          map(\r\n            (data: CheckoutDetails) =>\r\n              new CheckoutActions.LoadCheckoutDetailsSuccess(data)\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              new CheckoutActions.LoadCheckoutDetailsFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    }),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  reloadDetailsOnMergeCart$: Observable<\r\n    CheckoutActions.LoadCheckoutDetails\r\n  > = this.actions$.pipe(\r\n    ofType(CartActions.MERGE_CART_SUCCESS),\r\n    map((action: CartActions.MergeCartSuccess) => action.payload),\r\n    map((payload) => {\r\n      return new CheckoutActions.LoadCheckoutDetails({\r\n        userId: payload.userId,\r\n        cartId: payload.cartId,\r\n      });\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  clearCheckoutDeliveryAddress$: Observable<\r\n    | CheckoutActions.ClearCheckoutDeliveryAddressFail\r\n    | CheckoutActions.ClearCheckoutDeliveryAddressSuccess\r\n  > = this.actions$.pipe(\r\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS),\r\n    map(\r\n      (action: CheckoutActions.ClearCheckoutDeliveryAddress) => action.payload\r\n    ),\r\n    filter((payload) => Boolean(payload.cartId)),\r\n    switchMap((payload) => {\r\n      return this.checkoutConnector\r\n        .clearCheckoutDeliveryAddress(payload.userId, payload.cartId)\r\n        .pipe(\r\n          map(() => new CheckoutActions.ClearCheckoutDeliveryAddressSuccess()),\r\n          catchError((error) =>\r\n            of(\r\n              new CheckoutActions.ClearCheckoutDeliveryAddressFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    }),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  @Effect()\r\n  clearCheckoutDeliveryMode$: Observable<\r\n    | CheckoutActions.ClearCheckoutDeliveryModeFail\r\n    | CheckoutActions.ClearCheckoutDeliveryModeSuccess\r\n    | CartActions.LoadCart\r\n  > = this.actions$.pipe(\r\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE),\r\n    map((action: CheckoutActions.ClearCheckoutDeliveryMode) => action.payload),\r\n    filter((payload) => Boolean(payload.cartId)),\r\n    concatMap((payload) => {\r\n      return this.checkoutConnector\r\n        .clearCheckoutDeliveryMode(payload.userId, payload.cartId)\r\n        .pipe(\r\n          map(\r\n            () =>\r\n              new CheckoutActions.ClearCheckoutDeliveryModeSuccess({\r\n                ...payload,\r\n              })\r\n          ),\r\n          catchError((error) =>\r\n            from([\r\n              new CheckoutActions.ClearCheckoutDeliveryModeFail({\r\n                ...payload,\r\n                error: makeErrorSerializable(error),\r\n              }),\r\n              new CartActions.LoadCart({\r\n                cartId: payload.cartId,\r\n                userId: payload.userId,\r\n              }),\r\n            ])\r\n          )\r\n        );\r\n    }),\r\n    withdrawOn(this.contextChange$)\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private checkoutDeliveryConnector: CheckoutDeliveryConnector,\r\n    private checkoutPaymentConnector: CheckoutPaymentConnector,\r\n    private checkoutConnector: CheckoutConnector\r\n  ) {}\r\n}\r\n","import { AddressVerificationEffect } from './address-verification.effect';\nimport { CardTypesEffects } from './card-types.effect';\nimport { CheckoutEffects } from './checkout.effect';\n\nexport const effects: any[] = [\n  CheckoutEffects,\n  AddressVerificationEffect,\n  CardTypesEffects,\n];\n\nexport * from './address-verification.effect';\nexport * from './card-types.effect';\nexport * from './checkout.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { CHECKOUT_FEATURE } from './checkout-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(CHECKOUT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class CheckoutStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\r\nimport { CheckoutPageMetaResolver } from './services/checkout-page-meta.resolver';\r\nimport { CheckoutStoreModule } from './store/checkout-store.module';\r\n\r\n@NgModule({\r\n  imports: [CheckoutStoreModule],\r\n})\r\nexport class CheckoutModule {\r\n  static forRoot(): ModuleWithProviders<CheckoutModule> {\r\n    return {\r\n      ngModule: CheckoutModule,\r\n      providers: [\r\n        {\r\n          provide: PageMetaResolver,\r\n          useExisting: CheckoutPageMetaResolver,\r\n          multi: true,\r\n        },\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import {\r\n  createFeatureSelector,\r\n  createSelector,\r\n  MemoizedSelector,\r\n} from '@ngrx/store';\r\nimport { Address } from '../../../model/address.model';\r\nimport { PaymentDetails } from '../../../model/cart.model';\r\nimport { DeliveryMode, Order } from '../../../model/order.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport {\r\n  CheckoutState,\r\n  CheckoutStepsState,\r\n  CHECKOUT_FEATURE,\r\n  StateWithCheckout,\r\n} from '../checkout-state';\r\n\r\nconst getDeliveryAddressSelector = (state: CheckoutStepsState) => state.address;\r\nconst getDeliveryModeSelector = (state: CheckoutStepsState) =>\r\n  state.deliveryMode;\r\nconst getPaymentDetailsSelector = (state: CheckoutStepsState) =>\r\n  state.paymentDetails;\r\nconst getOrderDetailsSelector = (state: CheckoutStepsState) =>\r\n  state.orderDetails;\r\n\r\nexport const getCheckoutState: MemoizedSelector<\r\n  StateWithCheckout,\r\n  CheckoutState\r\n> = createFeatureSelector<CheckoutState>(CHECKOUT_FEATURE);\r\n\r\nexport const getCheckoutStepsState: MemoizedSelector<\r\n  StateWithCheckout,\r\n  LoaderState<CheckoutStepsState>\r\n> = createSelector(\r\n  getCheckoutState,\r\n  (checkoutState: CheckoutState) => checkoutState.steps\r\n);\r\n\r\nexport const getCheckoutSteps: MemoizedSelector<\r\n  StateWithCheckout,\r\n  CheckoutStepsState\r\n> = createSelector(getCheckoutStepsState, (state) =>\r\n  StateUtils.loaderValueSelector(state)\r\n);\r\n\r\nexport const getDeliveryAddress: MemoizedSelector<\r\n  StateWithCheckout,\r\n  Address\r\n> = createSelector(getCheckoutSteps, getDeliveryAddressSelector);\r\n\r\nexport const getDeliveryMode: MemoizedSelector<\r\n  StateWithCheckout,\r\n  {\r\n    supported: { [code: string]: DeliveryMode };\r\n    selected: string;\r\n  }\r\n> = createSelector(getCheckoutSteps, getDeliveryModeSelector);\r\n\r\nexport const getSupportedDeliveryModes: MemoizedSelector<\r\n  StateWithCheckout,\r\n  DeliveryMode[]\r\n> = createSelector(getDeliveryMode, (deliveryMode) => {\r\n  return (\r\n    deliveryMode &&\r\n    Object.keys(deliveryMode.supported).map(\r\n      (code) => deliveryMode.supported[code]\r\n    )\r\n  );\r\n});\r\n\r\nexport const getSelectedDeliveryModeCode: MemoizedSelector<\r\n  StateWithCheckout,\r\n  string\r\n> = createSelector(getDeliveryMode, (deliveryMode) => {\r\n  return deliveryMode && deliveryMode.selected;\r\n});\r\n\r\nexport const getSelectedDeliveryMode: MemoizedSelector<\r\n  StateWithCheckout,\r\n  DeliveryMode\r\n> = createSelector(getDeliveryMode, (deliveryMode) => {\r\n  if (deliveryMode.selected !== '') {\r\n    if (Object.keys(deliveryMode.supported).length === 0) {\r\n      return null;\r\n    }\r\n    return deliveryMode.supported[deliveryMode.selected];\r\n  }\r\n});\r\n\r\nexport const getPaymentDetails: MemoizedSelector<\r\n  StateWithCheckout,\r\n  PaymentDetails\r\n> = createSelector(getCheckoutSteps, getPaymentDetailsSelector);\r\n\r\nexport const getCheckoutOrderDetails: MemoizedSelector<\r\n  StateWithCheckout,\r\n  Order\r\n> = createSelector(getCheckoutSteps, getOrderDetailsSelector);\r\n\r\nexport const getCheckoutDetailsLoaded: MemoizedSelector<\r\n  StateWithCheckout,\r\n  boolean\r\n> = createSelector(\r\n  getCheckoutStepsState,\r\n  (state) =>\r\n    StateUtils.loaderSuccessSelector(state) &&\r\n    !StateUtils.loaderLoadingSelector(state)\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AddressValidation } from '../../../model/address.model';\nimport {\n  AddressVerificationState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/address-verification.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getAddressVerificationResultsState: MemoizedSelector<\n  StateWithCheckout,\n  AddressVerificationState\n> = createSelector(\n  getCheckoutState,\n  (state: CheckoutState) => state.addressVerification\n);\n\nexport const getAddressVerificationResults: MemoizedSelector<\n  StateWithCheckout,\n  string | AddressValidation\n> = createSelector(\n  getAddressVerificationResultsState,\n  fromReducer.getAddressVerificationResults\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { CardType } from '../../../model/cart.model';\r\nimport {\r\n  CardTypesState,\r\n  CheckoutState,\r\n  StateWithCheckout,\r\n} from '../checkout-state';\r\nimport * as fromReducer from './../reducers/card-types.reducer';\r\nimport { getCheckoutState } from './checkout.selectors';\r\n\r\nexport const getCardTypesState: MemoizedSelector<\r\n  StateWithCheckout,\r\n  CardTypesState\r\n> = createSelector(getCheckoutState, (state: CheckoutState) => state.cardTypes);\r\n\r\nexport const getCardTypesEntites: MemoizedSelector<\r\n  StateWithCheckout,\r\n  { [code: string]: CardType }\r\n> = createSelector(getCardTypesState, fromReducer.getCardTypesEntites);\r\n\r\nexport const getAllCardTypes: MemoizedSelector<\r\n  StateWithCheckout,\r\n  CardType[]\r\n> = createSelector(getCardTypesEntites, (entites) => {\r\n  return Object.keys(entites).map((code) => entites[code]);\r\n});\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\r\nimport { Order } from '../../model/order.model';\r\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\r\nimport { CheckoutActions } from '../store/actions/index';\r\nimport { StateWithCheckout } from '../store/checkout-state';\r\nimport { CheckoutSelectors } from '../store/selectors/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CheckoutService {\r\n  constructor(\r\n    protected checkoutStore: Store<StateWithCheckout>,\r\n    protected authService: AuthService,\r\n    protected activeCartService: ActiveCartService\r\n  ) {}\r\n\r\n  /**\r\n   * Places an order\r\n   */\r\n  placeOrder(): void {\r\n    if (this.actionAllowed()) {\r\n      let userId;\r\n      this.authService\r\n        .getOccUserId()\r\n        .subscribe((occUserId) => (userId = occUserId))\r\n        .unsubscribe();\r\n\r\n      let cartId;\r\n      this.activeCartService\r\n        .getActiveCartId()\r\n        .subscribe((activeCartId) => (cartId = activeCartId))\r\n        .unsubscribe();\r\n\r\n      if (userId && cartId) {\r\n        this.checkoutStore.dispatch(\r\n          new CheckoutActions.PlaceOrder({\r\n            userId,\r\n            cartId,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear checkout data\r\n   */\r\n  clearCheckoutData(): void {\r\n    this.checkoutStore.dispatch(new CheckoutActions.ClearCheckoutData());\r\n  }\r\n\r\n  /**\r\n   * Clear checkout step\r\n   * @param stepNumber : the step number to be cleared\r\n   */\r\n  clearCheckoutStep(stepNumber: number): void {\r\n    this.checkoutStore.dispatch(\r\n      new CheckoutActions.ClearCheckoutStep(stepNumber)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Load checkout details data\r\n   * @param cartId : string Cart ID of loaded cart\r\n   */\r\n  loadCheckoutDetails(cartId: string) {\r\n    let userId;\r\n    this.authService\r\n      .getOccUserId()\r\n      .subscribe((occUserId) => (userId = occUserId))\r\n      .unsubscribe();\r\n    if (userId) {\r\n      this.checkoutStore.dispatch(\r\n        new CheckoutActions.LoadCheckoutDetails({\r\n          userId,\r\n          cartId,\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get status of checkout details loaded\r\n   */\r\n  getCheckoutDetailsLoaded(): Observable<boolean> {\r\n    return this.checkoutStore.pipe(\r\n      select(CheckoutSelectors.getCheckoutDetailsLoaded)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get order details\r\n   */\r\n  getOrderDetails(): Observable<Order> {\r\n    return this.checkoutStore.pipe(\r\n      select(CheckoutSelectors.getCheckoutOrderDetails)\r\n    );\r\n  }\r\n\r\n  protected actionAllowed(): boolean {\r\n    let userId;\r\n    this.authService\r\n      .getOccUserId()\r\n      .subscribe((occUserId) => (userId = occUserId))\r\n      .unsubscribe();\r\n    return (\r\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\r\n      this.activeCartService.isGuestCart()\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport {\r\n  filter,\r\n  pluck,\r\n  shareReplay,\r\n  tap,\r\n  withLatestFrom,\r\n} from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\r\nimport { Address, AddressValidation } from '../../model/address.model';\r\nimport { DeliveryMode } from '../../model/order.model';\r\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\r\nimport { LoaderState } from '../../state/utils/loader/loader-state';\r\nimport { CheckoutActions } from '../store/actions/index';\r\nimport {\r\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\r\n  SET_DELIVERY_MODE_PROCESS_ID,\r\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\r\n  StateWithCheckout,\r\n} from '../store/checkout-state';\r\nimport { CheckoutSelectors } from '../store/selectors/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CheckoutDeliveryService {\r\n  constructor(\r\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\r\n    protected authService: AuthService,\r\n    protected activeCartService: ActiveCartService\r\n  ) {}\r\n\r\n  /**\r\n   * Get supported delivery modes\r\n   */\r\n  getSupportedDeliveryModes(): Observable<DeliveryMode[]> {\r\n    return this.checkoutStore.pipe(\r\n      select(CheckoutSelectors.getSupportedDeliveryModes),\r\n      withLatestFrom(\r\n        this.checkoutStore.pipe(\r\n          select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\r\n        )\r\n      ),\r\n      tap(([, loadingState]) => {\r\n        if (\r\n          !(loadingState.loading || loadingState.success || loadingState.error)\r\n        ) {\r\n          this.loadSupportedDeliveryModes();\r\n        }\r\n      }),\r\n      pluck(0),\r\n      shareReplay({ bufferSize: 1, refCount: true })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get selected delivery mode\r\n   */\r\n  getSelectedDeliveryMode(): Observable<DeliveryMode> {\r\n    return this.checkoutStore.pipe(\r\n      select(CheckoutSelectors.getSelectedDeliveryMode)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get selected delivery mode code\r\n   */\r\n  getSelectedDeliveryModeCode(): Observable<string> {\r\n    return this.checkoutStore.pipe(\r\n      select(CheckoutSelectors.getSelectedDeliveryModeCode)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get delivery address\r\n   */\r\n  getDeliveryAddress(): Observable<Address> {\r\n    return this.checkoutStore.pipe(\r\n      select(CheckoutSelectors.getDeliveryAddress)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get status about successfully set Delivery Address\r\n   */\r\n  getSetDeliveryAddressProcess(): Observable<LoaderState<void>> {\r\n    return this.checkoutStore.pipe(\r\n      select(getProcessStateFactory(SET_DELIVERY_ADDRESS_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Clear info about process of setting Delivery Address\r\n   */\r\n  resetSetDeliveryAddressProcess(): void {\r\n    this.checkoutStore.dispatch(\r\n      new CheckoutActions.ResetSetDeliveryAddressProcess()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get status about of set Delivery Mode process\r\n   */\r\n  getSetDeliveryModeProcess(): Observable<LoaderState<void>> {\r\n    return this.checkoutStore.pipe(\r\n      select(getProcessStateFactory(SET_DELIVERY_MODE_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Clear info about process of setting Delivery Mode\r\n   */\r\n  resetSetDeliveryModeProcess(): void {\r\n    this.checkoutStore.dispatch(\r\n      new CheckoutActions.ResetSetDeliveryModeProcess()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Clear info about process of setting Supported Delivery Modes\r\n   */\r\n  resetLoadSupportedDeliveryModesProcess(): void {\r\n    this.checkoutStore.dispatch(\r\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get status about of set supported Delivery Modes process\r\n   */\r\n  getLoadSupportedDeliveryModeProcess(): Observable<LoaderState<void>> {\r\n    return this.checkoutStore.pipe(\r\n      select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Clear supported delivery modes loaded in last checkout process\r\n   */\r\n  clearCheckoutDeliveryModes(): void {\r\n    this.checkoutStore.dispatch(\r\n      new CheckoutActions.ClearSupportedDeliveryModes()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get address verification results\r\n   */\r\n  getAddressVerificationResults(): Observable<AddressValidation | string> {\r\n    return this.checkoutStore.pipe(\r\n      select(CheckoutSelectors.getAddressVerificationResults),\r\n      filter((results) => Object.keys(results).length !== 0)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create and set a delivery address using the address param\r\n   * @param address : the Address to be created and set\r\n   */\r\n  createAndSetAddress(address: Address): void {\r\n    if (this.actionAllowed()) {\r\n      let userId;\r\n      this.authService\r\n        .getOccUserId()\r\n        .subscribe((occUserId) => (userId = occUserId))\r\n        .unsubscribe();\r\n\r\n      let cartId;\r\n      this.activeCartService\r\n        .getActiveCartId()\r\n        .subscribe((activeCartId) => (cartId = activeCartId))\r\n        .unsubscribe();\r\n      if (userId && cartId) {\r\n        this.checkoutStore.dispatch(\r\n          new CheckoutActions.AddDeliveryAddress({\r\n            userId,\r\n            cartId,\r\n            address: address,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load supported delivery modes\r\n   */\r\n  loadSupportedDeliveryModes(): void {\r\n    if (this.actionAllowed()) {\r\n      let userId;\r\n      this.authService\r\n        .getOccUserId()\r\n        .subscribe((occUserId) => (userId = occUserId))\r\n        .unsubscribe();\r\n\r\n      let cartId;\r\n      this.activeCartService\r\n        .getActiveCartId()\r\n        .subscribe((activeCartId) => (cartId = activeCartId))\r\n        .unsubscribe();\r\n      if (userId && cartId) {\r\n        this.checkoutStore.dispatch(\r\n          new CheckoutActions.LoadSupportedDeliveryModes({\r\n            userId,\r\n            cartId,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set delivery mode\r\n   * @param mode : The delivery mode to be set\r\n   */\r\n  setDeliveryMode(mode: string): void {\r\n    if (this.actionAllowed()) {\r\n      let userId;\r\n      this.authService\r\n        .getOccUserId()\r\n        .subscribe((occUserId) => (userId = occUserId))\r\n        .unsubscribe();\r\n\r\n      let cartId;\r\n      this.activeCartService\r\n        .getActiveCartId()\r\n        .subscribe((activeCartId) => (cartId = activeCartId))\r\n        .unsubscribe();\r\n      if (userId && cartId) {\r\n        this.checkoutStore.dispatch(\r\n          new CheckoutActions.SetDeliveryMode({\r\n            userId,\r\n            cartId,\r\n            selectedModeId: mode,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifies the address\r\n   * @param address : the address to be verified\r\n   */\r\n  verifyAddress(address: Address): void {\r\n    if (this.actionAllowed()) {\r\n      let userId;\r\n      this.authService\r\n        .getOccUserId()\r\n        .subscribe((occUserId) => (userId = occUserId))\r\n        .unsubscribe();\r\n      if (userId) {\r\n        this.checkoutStore.dispatch(\r\n          new CheckoutActions.VerifyAddress({\r\n            userId,\r\n            address,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set delivery address\r\n   * @param address : The address to be set\r\n   */\r\n  setDeliveryAddress(address: Address): void {\r\n    if (this.actionAllowed()) {\r\n      let userId;\r\n      this.authService\r\n        .getOccUserId()\r\n        .subscribe((occUserId) => (userId = occUserId))\r\n        .unsubscribe();\r\n\r\n      let cartId;\r\n      this.activeCartService\r\n        .getActiveCartId()\r\n        .subscribe((activeCartId) => (cartId = activeCartId))\r\n        .unsubscribe();\r\n      if (cartId && userId) {\r\n        this.checkoutStore.dispatch(\r\n          new CheckoutActions.SetDeliveryAddress({\r\n            userId,\r\n            cartId,\r\n            address: address,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear address verification results\r\n   */\r\n  clearAddressVerificationResults(): void {\r\n    this.checkoutStore.dispatch(\r\n      new CheckoutActions.ClearAddressVerificationResults()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Clear address already setup in last checkout process\r\n   */\r\n  clearCheckoutDeliveryAddress(): void {\r\n    let userId;\r\n    this.authService\r\n      .getOccUserId()\r\n      .subscribe((occUserId) => (userId = occUserId))\r\n      .unsubscribe();\r\n\r\n    let cartId;\r\n    this.activeCartService\r\n      .getActiveCartId()\r\n      .subscribe((activeCartId) => (cartId = activeCartId))\r\n      .unsubscribe();\r\n    if (userId && cartId) {\r\n      this.checkoutStore.dispatch(\r\n        new CheckoutActions.ClearCheckoutDeliveryAddress({\r\n          userId,\r\n          cartId,\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear selected delivery mode setup in last checkout process\r\n   */\r\n  clearCheckoutDeliveryMode(): void {\r\n    let userId;\r\n    this.authService\r\n      .getOccUserId()\r\n      .subscribe((occUserId) => (userId = occUserId))\r\n      .unsubscribe();\r\n\r\n    let cartId;\r\n    this.activeCartService\r\n      .getActiveCartId()\r\n      .subscribe((activeCartId) => (cartId = activeCartId))\r\n      .unsubscribe();\r\n    if (userId && cartId) {\r\n      this.checkoutStore.dispatch(\r\n        new CheckoutActions.ClearCheckoutDeliveryMode({\r\n          userId,\r\n          cartId,\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear address and delivery mode already setup in last checkout process\r\n   */\r\n  clearCheckoutDeliveryDetails(): void {\r\n    this.clearCheckoutDeliveryAddress();\r\n    this.clearCheckoutDeliveryMode();\r\n    this.clearCheckoutDeliveryModes();\r\n  }\r\n\r\n  protected actionAllowed(): boolean {\r\n    let userId;\r\n    this.authService\r\n      .getOccUserId()\r\n      .subscribe((occUserId) => (userId = occUserId))\r\n      .unsubscribe();\r\n    return (\r\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\r\n      this.activeCartService.isGuestCart()\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\r\nimport { CardType, PaymentDetails } from '../../model/cart.model';\r\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\r\nimport { LoaderState } from '../../state/utils/loader/loader-state';\r\nimport { CheckoutActions } from '../store/actions/index';\r\nimport {\r\n  SET_PAYMENT_DETAILS_PROCESS_ID,\r\n  StateWithCheckout,\r\n} from '../store/checkout-state';\r\nimport { CheckoutSelectors } from '../store/selectors/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CheckoutPaymentService {\r\n  constructor(\r\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\r\n    protected authService: AuthService,\r\n    protected activeCartService: ActiveCartService\r\n  ) {}\r\n\r\n  /**\r\n   * Get card types\r\n   */\r\n  getCardTypes(): Observable<CardType[]> {\r\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getAllCardTypes));\r\n  }\r\n\r\n  /**\r\n   * Get payment details\r\n   */\r\n  getPaymentDetails(): Observable<PaymentDetails> {\r\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getPaymentDetails));\r\n  }\r\n\r\n  /**\r\n   * Get status about set Payment Details process\r\n   */\r\n  getSetPaymentDetailsResultProcess(): Observable<LoaderState<void>> {\r\n    return this.checkoutStore.pipe(\r\n      select(getProcessStateFactory(SET_PAYMENT_DETAILS_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Clear info about process of setting Payment Details\r\n   */\r\n  resetSetPaymentDetailsProcess(): void {\r\n    this.checkoutStore.dispatch(\r\n      new CheckoutActions.ResetSetPaymentDetailsProcess()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Load the supported card types\r\n   */\r\n  loadSupportedCardTypes(): void {\r\n    this.checkoutStore.dispatch(new CheckoutActions.LoadCardTypes());\r\n  }\r\n\r\n  /**\r\n   * Create payment details using the given paymentDetails param\r\n   * @param paymentDetails: the PaymentDetails to be created\r\n   */\r\n  createPaymentDetails(paymentDetails: PaymentDetails): void {\r\n    if (this.actionAllowed()) {\r\n      let userId;\r\n      this.authService\r\n        .getOccUserId()\r\n        .subscribe((occUserId) => (userId = occUserId))\r\n        .unsubscribe();\r\n\r\n      let cartId;\r\n      this.activeCartService\r\n        .getActiveCartId()\r\n        .subscribe((activeCartId) => (cartId = activeCartId))\r\n        .unsubscribe();\r\n\r\n      if (userId && cartId) {\r\n        this.checkoutStore.dispatch(\r\n          new CheckoutActions.CreatePaymentDetails({\r\n            userId,\r\n            cartId,\r\n            paymentDetails,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set payment details\r\n   * @param paymentDetails : the PaymentDetails to be set\r\n   */\r\n  setPaymentDetails(paymentDetails: PaymentDetails): void {\r\n    if (this.actionAllowed()) {\r\n      let userId;\r\n      this.authService\r\n        .getOccUserId()\r\n        .subscribe((occUserId) => (userId = occUserId))\r\n        .unsubscribe();\r\n\r\n      let cart;\r\n      this.activeCartService\r\n        .getActive()\r\n        .subscribe((activeCart) => (cart = activeCart))\r\n        .unsubscribe();\r\n      if (userId && cart) {\r\n        this.checkoutStore.dispatch(\r\n          new CheckoutActions.SetPaymentDetails({\r\n            userId,\r\n            cartId: cart.code,\r\n            paymentDetails: paymentDetails,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets payment loading to true without having the flicker issue (GH-3102)\r\n   */\r\n  paymentProcessSuccess() {\r\n    this.checkoutStore.dispatch(new CheckoutActions.PaymentProcessSuccess());\r\n  }\r\n\r\n  protected actionAllowed(): boolean {\r\n    let userId;\r\n    this.authService\r\n      .getOccUserId()\r\n      .subscribe((occUserId) => (userId = occUserId))\r\n      .unsubscribe();\r\n    return (\r\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\r\n      this.activeCartService.isGuestCart()\r\n    );\r\n  }\r\n}\r\n","import { CmsConfig } from './cms-config';\n\nexport const defaultCmsModuleConfig: CmsConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        component: 'cms/components/${id}',\n        components: 'cms/components',\n        pages: 'cms/pages',\n        page: 'cms/pages/${id}',\n      },\n      legacy: false,\n    },\n  },\n  cmsComponents: {},\n};\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { TranslationService } from '../../i18n/translation.service';\r\nimport { PageType } from '../../model/cms.model';\r\nimport { CmsService } from '../facade/cms.service';\r\nimport { BreadcrumbMeta, Page } from '../model/page.model';\r\nimport { PageMetaResolver } from './page-meta.resolver';\r\nimport { PageBreadcrumbResolver, PageTitleResolver } from './page.resolvers';\r\n\r\n/**\r\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`.\r\n * More specific resolvers for content pages can be implemented by making them more\r\n * specific, for example by using the page template (see `CartPageMetaResolver`).\r\n *\r\n * The page title, and breadcrumbs are resolved in this implementation only.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ContentPageMetaResolver extends PageMetaResolver\r\n  implements PageTitleResolver, PageBreadcrumbResolver {\r\n  /** helper to provie access to the current CMS page */\r\n  protected cms$: Observable<Page> = this.cms\r\n    .getCurrentPage()\r\n    .pipe(filter((p) => Boolean(p)));\r\n\r\n  constructor(\r\n    protected cms: CmsService,\r\n    protected translation: TranslationService\r\n  ) {\r\n    super();\r\n    this.pageType = PageType.CONTENT_PAGE;\r\n  }\r\n\r\n  /**\r\n   * Resolves the page title for the ContentPage by taking the title\r\n   * from the backend data.\r\n   */\r\n  resolveTitle(): Observable<string> {\r\n    return this.cms$.pipe(map((p) => p.title));\r\n  }\r\n\r\n  /**\r\n   * Resolves a single breacrumb item to the home page for each `ContentPage`.\r\n   * The home page label is resolved from the translation service.\r\n   */\r\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\r\n    return this.translation\r\n      .translate('common.home')\r\n      .pipe(map((label) => [{ label: label, link: '/' }] as BreadcrumbMeta[]));\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { ContentPageMetaResolver } from './content-page-meta.resolver';\n\n@NgModule({\n  providers: [\n    {\n      provide: PageMetaResolver,\n      useExisting: ContentPageMetaResolver,\n      multi: true,\n    },\n  ],\n})\nexport class CmsPageTitleModule {}\n","import { Observable, OperatorFunction, SchedulerLike } from 'rxjs';\r\nimport { debounceTime, map, tap } from 'rxjs/operators';\r\n\r\nexport function bufferDebounceTime<T>(\r\n  time: number = 0,\r\n  scheduler?: SchedulerLike\r\n): OperatorFunction<T, T[]> {\r\n  return (source: Observable<T>) => {\r\n    let bufferedValues: T[] = [];\r\n\r\n    return source.pipe(\r\n      tap((value) => bufferedValues.push(value)),\r\n      debounceTime(time, scheduler),\r\n      map(() => bufferedValues),\r\n      tap(() => (bufferedValues = []))\r\n    );\r\n  };\r\n}\r\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { provideConfigFactory } from './config.module';\nimport { getCookie } from './utils/get-cookie';\n\nexport const TEST_CONFIG_COOKIE_NAME = new InjectionToken<string>(\n  'TEST_CONFIG_COOKIE_NAME'\n);\n\nexport function parseConfigJSON(config: string) {\n  try {\n    return JSON.parse(decodeURIComponent(config));\n  } catch (_) {\n    return {};\n  }\n}\n\nexport function configFromCookieFactory(\n  cookieName: string,\n  platform: any,\n  document: Document\n) {\n  if (isPlatformBrowser(platform) && cookieName) {\n    const config = getCookie(document.cookie, cookieName);\n    return parseConfigJSON(config);\n  }\n  return {};\n}\n\nexport interface TestConfigModuleOptions {\n  cookie: string;\n}\n\n/**\n * Designed/intended to provide dynamic configuration for testing scenarios ONLY (e.g. e2e tests).\n *\n * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n */\n@NgModule({})\nexport class TestConfigModule {\n  /**\n   * Injects JSON config from the cookie of the given name.\n   *\n   * Be aware of the cookie limitations (4096 bytes).\n   *\n   * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n   */\n  static forRoot(\n    options: TestConfigModuleOptions\n  ): ModuleWithProviders<TestConfigModule> {\n    return {\n      ngModule: TestConfigModule,\n      providers: [\n        {\n          provide: TEST_CONFIG_COOKIE_NAME,\n          useValue: options && options.cookie,\n        },\n        provideConfigFactory(configFromCookieFactory, [\n          TEST_CONFIG_COOKIE_NAME,\n          PLATFORM_ID,\n          DOCUMENT,\n        ]),\n      ],\n    };\n  }\n}\n","export function getCookie(cookie: string, name: string) {\n  const regExp = new RegExp('(?:^|;\\\\s*)' + name + '=([^;]*)', 'g');\n  const result: RegExpExecArray = regExp.exec(cookie);\n\n  return (result && decodeURIComponent(result[1])) || '';\n}\n","import {\r\n  APP_INITIALIZER,\r\n  isDevMode,\r\n  ModuleWithProviders,\r\n  NgModule,\r\n  Optional,\r\n} from '@angular/core';\r\nimport { ConfigInitializerService } from '../config-initializer/config-initializer.service';\r\nimport {\r\n  ConfigValidator,\r\n  ConfigValidatorToken,\r\n  validateConfig,\r\n} from './config-validator';\r\n\r\nexport function configValidatorFactory(\r\n  configInitializer: ConfigInitializerService,\r\n  validators: ConfigValidator[]\r\n) {\r\n  const validate = () => {\r\n    if (isDevMode()) {\r\n      configInitializer\r\n        .getStableConfig()\r\n        .then((config) => validateConfig(config, validators || []));\r\n    }\r\n  };\r\n  return validate;\r\n}\r\n\r\n/**\r\n * Should stay private in 1.x\r\n * as forRoot() is used internally by ConfigInitializerModule\r\n *\r\n * issue: #5279\r\n */\r\n@NgModule()\r\nexport class ConfigValidatorModule {\r\n  static forRoot(): ModuleWithProviders<ConfigValidatorModule> {\r\n    return {\r\n      ngModule: ConfigValidatorModule,\r\n      providers: [\r\n        {\r\n          provide: APP_INITIALIZER,\r\n          multi: true,\r\n          useFactory: configValidatorFactory,\r\n          deps: [\r\n            ConfigInitializerService,\r\n            [new Optional(), ConfigValidatorToken],\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import {\r\n  APP_INITIALIZER,\r\n  ModuleWithProviders,\r\n  NgModule,\r\n  Optional,\r\n} from '@angular/core';\r\nimport { ConfigInitializerService } from './config-initializer.service';\r\nimport {\r\n  CONFIG_INITIALIZER,\r\n  CONFIG_INITIALIZER_FORROOT_GUARD,\r\n  ConfigInitializer,\r\n} from './config-initializer';\r\n\r\nexport function configInitializerFactory(\r\n  configInitializer: ConfigInitializerService,\r\n  initializers: ConfigInitializer[]\r\n) {\r\n  const isReady = () => configInitializer.initialize(initializers);\r\n  return isReady;\r\n}\r\n\r\n@NgModule({})\r\nexport class ConfigInitializerModule {\r\n  static forRoot(): ModuleWithProviders<ConfigInitializerModule> {\r\n    return {\r\n      ngModule: ConfigInitializerModule,\r\n      providers: [\r\n        {\r\n          provide: CONFIG_INITIALIZER_FORROOT_GUARD,\r\n          useValue: true,\r\n        },\r\n        {\r\n          provide: APP_INITIALIZER,\r\n          multi: true,\r\n          useFactory: configInitializerFactory,\r\n          deps: [\r\n            ConfigInitializerService,\r\n            [new Optional(), CONFIG_INITIALIZER],\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { ContentSlotComponentData } from '../model/content-slot-component-data.model';\r\nimport { CmsConfig } from './cms-config';\r\nimport { Injectable } from '@angular/core';\r\nimport { Config } from '../../config';\r\n\r\n/**\r\n * The `CmsPageConfig` is used to build pages by configuration.\r\n * The interfaces are designed to have a clean configuration for\r\n * static CMS structure. Ordinary attributes that are not\r\n * required for configurable pages have been left out and\r\n * will not be serialized in the adapter logic.\r\n */\r\nexport interface CmsPageConfig {\r\n  /**\r\n   * When the `ignoreBackend` is set to true, the CMS backend\r\n   * will not be consumed. This saves network latency and is\r\n   * useful for commodity commerce pages.\r\n   * */\r\n  ignoreBackend?: boolean;\r\n\r\n  pageId?: string;\r\n\r\n  type?: string;\r\n\r\n  /**\r\n   * The page title is typically used to display the page heading\r\n   * as well as for the page title tag. The latter is used for browser\r\n   * navigation as well as SEO and social share platforms.\r\n   */\r\n  title?: string;\r\n\r\n  /**\r\n   * the template is used to bind to the layout\r\n   * configuration and css layout class\r\n   */\r\n  template?: string;\r\n\r\n  /**\r\n   * The page slots represent various sections on the page that\r\n   * can contain components.\r\n   */\r\n  slots: { [key: string]: CmsPageSlotConfig };\r\n}\r\n\r\n/**\r\n * The `CmsPageSlotsConfig` (plural) holds `CmsPageSlotConfig` objects.\r\n */\r\nexport interface CmsPageSlotsConfig {\r\n  [key: string]: CmsPageSlotConfig;\r\n}\r\n\r\n/**\r\n * The `CmsPageSlotConfig` is a simplified configuration model\r\n * that can be used to configure slots in static configuration,\r\n * rather than loading from a backend.\r\n */\r\nexport interface CmsPageSlotConfig {\r\n  componentIds?: string[];\r\n  properties?: any;\r\n}\r\n\r\n/**\r\n * The `CmsStructureConfig` is used to build pages in Spartacus by configuration\r\n * instead of using a backend CMS system. The configuration can be used to build\r\n * complete pages or parts of a page. The `CmsStructureConfig` is optimized to\r\n * only require the necessary properties. Adapter logic is applied to serialize\r\n * the `CmsStructureConfig` into the required UI model.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class CmsStructureConfig extends CmsConfig {\r\n  cmsStructure: {\r\n    components?: { [key: string]: ContentSlotComponentData | any };\r\n    pages?: CmsPageConfig[];\r\n    slots?: CmsPageSlotsConfig;\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport {\r\n  CmsPageConfig,\r\n  CmsPageSlotsConfig,\r\n  CmsStructureConfig,\r\n} from '../config/cms-structure.config';\r\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\r\nimport { CmsStructureModel } from '../model/page.model';\r\n\r\n/**\r\n * Service that provides access to CMS structure from a static\r\n * configuration or configuration file. This class uses static\r\n * configuration is designed in async fashion so that configurations\r\n * can be loaded from a file or stream.\r\n *\r\n * The intent of the `CmsStructureConfigService` however is to provide\r\n * fast loading pages and default cms structure for commodity commerce.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport abstract class CmsStructureConfigService {\r\n  constructor(protected cmsDataConfig: CmsStructureConfig) {}\r\n\r\n  /**\r\n   * Merge the cms structure to the pageStructure. The page structure\r\n   * can either hold complete page structures or global structures that\r\n   * might apply to all pages (such has header coponents).\r\n   */\r\n  mergePageStructure(\r\n    pageId: string,\r\n    pageStructure: CmsStructureModel\r\n  ): Observable<CmsStructureModel> {\r\n    return this.mergePage(pageId, pageStructure).pipe(\r\n      switchMap((page) => this.mergeSlots(page))\r\n    );\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Returns boolean observable to indicate whether the page should not be\r\n   * loaded from the backend. This is useful for pages which are comoditized\r\n   * and follow best practice.\r\n   *\r\n   * By default, configurable pages are driven by static configuration,\r\n   * in order to allow for fast loading pages (preventing network delays).\r\n   */\r\n  shouldIgnoreBackend(pageId: string): Observable<boolean> {\r\n    return this.getPageFromConfig(pageId).pipe(\r\n      map((page) => !!page && !!page.ignoreBackend)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * returns an Observable component data from the static configuration.\r\n   */\r\n  getComponentFromConfig(\r\n    componentId: string\r\n  ): Observable<ContentSlotComponentData | any> {\r\n    return of(this.getComponentById(componentId));\r\n  }\r\n\r\n  /**\r\n   * returns an Observable components data from the static configuration.\r\n   */\r\n  getComponentsFromConfig(\r\n    ids: string[]\r\n  ): Observable<ContentSlotComponentData[]> {\r\n    return of(ids.map((id) => this.getComponentById(id)));\r\n  }\r\n\r\n  /**\r\n   * returns an observable with the `PageConfig`.\r\n   */\r\n  protected getPageFromConfig(pageId: string): Observable<CmsPageConfig> {\r\n    return of(\r\n      this.cmsDataConfig.cmsStructure && this.cmsDataConfig.cmsStructure.pages\r\n        ? this.cmsDataConfig.cmsStructure.pages.find((p) => p.pageId === pageId)\r\n        : null\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Merge page data from the configuration into the given structure, if any.\r\n   * If the given page structure is empty, a page is created and the page slots are\r\n   * are merged into the page.\r\n   */\r\n  protected mergePage(\r\n    pageId: string,\r\n    pageStructure: CmsStructureModel\r\n  ): Observable<CmsStructureModel> {\r\n    return this.getPageFromConfig(pageId).pipe(\r\n      switchMap((page) => {\r\n        if (page) {\r\n          // serialize page data\r\n          if (!pageStructure.page) {\r\n            pageStructure.page = {\r\n              ...page,\r\n            };\r\n            pageStructure.page.slots = {};\r\n          }\r\n          if (!pageStructure.page.slots) {\r\n            pageStructure.page.slots = {};\r\n          }\r\n          return this.mergeSlots(pageStructure, page.slots);\r\n        } else {\r\n          return of(pageStructure);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Adds any pre-configured slots for pages that do not use them.\r\n   * If pages have a slot for the given position, the configiuration\r\n   * is ingored. Even if the slot does not have inner structure (such as\r\n   * components), so that the cms structure is able to override the (static)\r\n   * configuration.\r\n   */\r\n  protected mergeSlots(\r\n    pageStructure: CmsStructureModel,\r\n    slots?: CmsPageSlotsConfig\r\n  ): Observable<CmsStructureModel> {\r\n    // if no slots have been given, we use the global configured slots\r\n    if (\r\n      !slots &&\r\n      this.cmsDataConfig.cmsStructure &&\r\n      this.cmsDataConfig.cmsStructure.slots\r\n    ) {\r\n      slots = this.cmsDataConfig.cmsStructure.slots;\r\n    }\r\n\r\n    if (!slots) {\r\n      return of(pageStructure);\r\n    }\r\n\r\n    for (const position of Object.keys(slots)) {\r\n      if (!Object.keys(pageStructure.page.slots).includes(position)) {\r\n        // the global slot isn't yet part of the page structure\r\n        pageStructure.page.slots[position] = {};\r\n\r\n        for (const component of this.getComponentsByPosition(slots, position)) {\r\n          if (!pageStructure.page.slots[position].components) {\r\n            pageStructure.page.slots[position].components = [];\r\n          }\r\n          pageStructure.page.slots[position].components.push({\r\n            uid: component.uid,\r\n            flexType: component.flexType,\r\n            typeCode: component.typeCode,\r\n          });\r\n          if (!pageStructure.components) {\r\n            pageStructure.components = [];\r\n          }\r\n\r\n          pageStructure.components.push(component);\r\n        }\r\n      }\r\n    }\r\n\r\n    return of(pageStructure);\r\n  }\r\n\r\n  protected getComponentsByPosition(\r\n    slots: CmsPageSlotsConfig,\r\n    position: string\r\n  ): ContentSlotComponentData[] {\r\n    const components = [];\r\n    if (slots[position] && slots[position].componentIds) {\r\n      for (const componentId of slots[position].componentIds) {\r\n        if (\r\n          this.cmsDataConfig.cmsStructure &&\r\n          this.cmsDataConfig.cmsStructure.components\r\n        ) {\r\n          const component = this.cmsDataConfig.cmsStructure.components[\r\n            componentId\r\n          ];\r\n          if (component) {\r\n            components.push({ uid: componentId, ...component });\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return components;\r\n  }\r\n\r\n  protected getComponentById(componentId: string): ContentSlotComponentData {\r\n    return this.cmsDataConfig.cmsStructure &&\r\n      this.cmsDataConfig.cmsStructure.components\r\n      ? this.cmsDataConfig.cmsStructure.components[componentId]\r\n      : undefined;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport { CmsComponent } from '../../../model/cms.model';\r\nimport { OccConfig } from '../../../occ/config/occ-config';\r\nimport { PageContext } from '../../../routing/models/page-context.model';\r\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\r\nimport { CmsComponentAdapter } from './cms-component.adapter';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CmsComponentConnector {\r\n  constructor(\r\n    protected cmsStructureConfigService: CmsStructureConfigService,\r\n    protected adapter: CmsComponentAdapter,\r\n    protected config: OccConfig\r\n  ) {}\r\n\r\n  get<T extends CmsComponent>(\r\n    id: string,\r\n    pageContext: PageContext\r\n  ): Observable<T> {\r\n    return this.cmsStructureConfigService\r\n      .getComponentFromConfig(id)\r\n      .pipe(\r\n        switchMap((configuredComponent) =>\r\n          configuredComponent\r\n            ? of(configuredComponent)\r\n            : this.adapter.load(id, pageContext)\r\n        )\r\n      );\r\n  }\r\n\r\n  getList(ids: string[], pageContext: PageContext): Observable<CmsComponent[]> {\r\n    return this.cmsStructureConfigService.getComponentsFromConfig(ids).pipe(\r\n      switchMap((configuredComponents) => {\r\n        // check if we have some components that are not loaded from configuration\r\n        const missingIds = configuredComponents.reduce(\r\n          (acc, component, index) => {\r\n            if (component === undefined) {\r\n              acc.push(ids[index]);\r\n            }\r\n            return acc;\r\n          },\r\n          []\r\n        );\r\n\r\n        if (missingIds.length > 0) {\r\n          return (this.config.backend.occ.legacy\r\n            ? this.adapter.findComponentsByIdsLegacy(missingIds, pageContext)\r\n            : this.adapter.findComponentsByIds(missingIds, pageContext)\r\n          ).pipe(\r\n            map((loadedComponents) => [\r\n              ...configuredComponents.filter(Boolean),\r\n              ...loadedComponents,\r\n            ])\r\n          );\r\n        } else {\r\n          return of(configuredComponents);\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Action } from '@ngrx/store';\r\nimport { from, Observable } from 'rxjs';\r\nimport { catchError, groupBy, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { AuthActions } from '../../../auth/store/actions/index';\r\nimport { CmsComponent } from '../../../model/cms.model';\r\nimport { PageContext } from '../../../routing/index';\r\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\r\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { withdrawOn } from '../../../util/withdraw-on';\r\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\r\nimport { serializePageContext } from '../../utils/cms-utils';\r\nimport { CmsActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class ComponentsEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private cmsComponentConnector: CmsComponentConnector\r\n  ) {}\r\n\r\n  private contextChange$: Observable<Action> = this.actions$.pipe(\r\n    ofType(\r\n      SiteContextActions.LANGUAGE_CHANGE,\r\n      AuthActions.LOGOUT,\r\n      AuthActions.LOGIN\r\n    )\r\n  );\r\n\r\n  loadComponent$ = createEffect(\r\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\r\n      | CmsActions.LoadCmsComponentSuccess<CmsComponent>\r\n      | CmsActions.LoadCmsComponentFail\r\n    > =>\r\n      this.actions$.pipe(\r\n        ofType<CmsActions.LoadCmsComponent>(CmsActions.LOAD_CMS_COMPONENT),\r\n        groupBy((actions) => serializePageContext(actions.payload.pageContext)),\r\n        mergeMap((actionGroup) =>\r\n          actionGroup.pipe(\r\n            bufferDebounceTime(debounce, scheduler),\r\n            mergeMap((actions) =>\r\n              this.loadComponentsEffect(\r\n                actions.map((action) => action.payload.uid),\r\n                actions[0].payload.pageContext\r\n              )\r\n            )\r\n          )\r\n        ),\r\n        withdrawOn(this.contextChange$)\r\n      )\r\n  );\r\n\r\n  private loadComponentsEffect(\r\n    componentUids: string[],\r\n    pageContext: PageContext\r\n  ): Observable<\r\n    | CmsActions.LoadCmsComponentSuccess<CmsComponent>\r\n    | CmsActions.LoadCmsComponentFail\r\n  > {\r\n    return this.cmsComponentConnector.getList(componentUids, pageContext).pipe(\r\n      switchMap((components) => {\r\n        const actions: (\r\n          | CmsActions.LoadCmsComponentSuccess<CmsComponent>\r\n          | CmsActions.LoadCmsComponentFail\r\n        )[] = [];\r\n        const uidsLeft = new Set<string>(componentUids);\r\n        for (const component of components) {\r\n          actions.push(\r\n            new CmsActions.LoadCmsComponentSuccess({\r\n              component,\r\n              uid: component.uid,\r\n              pageContext,\r\n            })\r\n          );\r\n          uidsLeft.delete(component.uid);\r\n        }\r\n        // we have to emit LoadCmsComponentFail for all component's uids that\r\n        // are missing from the response\r\n        uidsLeft.forEach((uid) => {\r\n          actions.push(\r\n            new CmsActions.LoadCmsComponentFail({\r\n              uid,\r\n              pageContext,\r\n            })\r\n          );\r\n        });\r\n        return from(actions);\r\n      }),\r\n      catchError((error) =>\r\n        from(\r\n          componentUids.map(\r\n            (uid) =>\r\n              new CmsActions.LoadCmsComponentFail({\r\n                uid,\r\n                error: makeErrorSerializable(error),\r\n                pageContext,\r\n              })\r\n          )\r\n        )\r\n      )\r\n    );\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * The MIT License\r\n * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\r\n *\r\n * See:\r\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/glob.ts\r\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/aio/tests/deployment/shared/helpers.ts#L17\r\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/generator.ts#L86\r\n */\r\n\r\nconst QUESTION_MARK = '[^/]';\r\nconst WILD_SINGLE = '[^/]*';\r\nconst WILD_OPEN = '(?:.+\\\\/)?';\r\nconst TO_ESCAPE_BASE = [\r\n  { replace: /\\./g, with: '\\\\.' },\r\n  { replace: /\\+/g, with: '\\\\+' },\r\n  { replace: /\\*/g, with: WILD_SINGLE },\r\n];\r\nconst TO_ESCAPE_WILDCARD_QM = [\r\n  ...TO_ESCAPE_BASE,\r\n  { replace: /\\?/g, with: QUESTION_MARK },\r\n];\r\nconst TO_ESCAPE_LITERAL_QM = [\r\n  ...TO_ESCAPE_BASE,\r\n  { replace: /\\?/g, with: '\\\\?' },\r\n];\r\n\r\n/**\r\n * Converts the glob-like pattern into regex string.\r\n *\r\n * Patterns use a limited glob format:\r\n * `**` matches 0 or more path segments\r\n * `*` matches 0 or more characters excluding `/`\r\n * `?` matches exactly one character excluding `/` (but when @param literalQuestionMark is true, `?` is treated as normal character)\r\n * The `!` prefix marks the pattern as being negative, meaning that only URLs that don't match the pattern will be included\r\n *\r\n * @param glob glob-like pattern\r\n * @param literalQuestionMark when true, it tells that `?` is treated as a normal character\r\n */\r\nexport function globToRegex(glob: string, literalQuestionMark = false): string {\r\n  const toEscape = literalQuestionMark\r\n    ? TO_ESCAPE_LITERAL_QM\r\n    : TO_ESCAPE_WILDCARD_QM;\r\n  const segments = glob.split('/').reverse();\r\n  let regex = '';\r\n  while (segments.length > 0) {\r\n    const segment = segments.pop();\r\n    if (segment === '**') {\r\n      if (segments.length > 0) {\r\n        regex += WILD_OPEN;\r\n      } else {\r\n        regex += '.*';\r\n      }\r\n    } else {\r\n      const processed = toEscape.reduce(\r\n        (seg, escape) => seg.replace(escape.replace, escape.with),\r\n        segment\r\n      );\r\n      regex += processed;\r\n      if (segments.length > 0) {\r\n        regex += '\\\\/';\r\n      }\r\n    }\r\n  }\r\n  return regex;\r\n}\r\n\r\n/**\r\n * For given list of glob-like patterns, returns a matcher function.\r\n *\r\n * The matcher returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\r\n */\r\nexport function getGlobMatcher(patterns: string[]): (url: string) => boolean {\r\n  const processedPatterns: {\r\n    positive: boolean;\r\n    regex: RegExp;\r\n  }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\r\n    positive,\r\n    regex: new RegExp(regex),\r\n  }));\r\n\r\n  const includePatterns = processedPatterns.filter((spec) => spec.positive);\r\n  const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\r\n\r\n  return (url: string) =>\r\n    includePatterns.some((pattern) => pattern.regex.test(url)) &&\r\n    !excludePatterns.some((pattern) => pattern.regex.test(url));\r\n}\r\n\r\n/**\r\n * Converts list of glob-like patterns into list of RegExps with information whether the glob pattern is positive or negative\r\n */\r\nexport function processGlobPatterns(\r\n  urls: string[]\r\n): { positive: boolean; regex: string }[] {\r\n  return urls.map((url) => {\r\n    const positive = !url.startsWith('!');\r\n    url = positive ? url : url.substr(1);\r\n    return { positive, regex: `^${globToRegex(url)}$` };\r\n  });\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { processGlobPatterns } from './glob-utils';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class GlobService {\r\n  /**\r\n   * For given list of glob-like patterns, returns a validator function.\r\n   *\r\n   * The validator returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\r\n   */\r\n  getValidator(patterns: string[]): (url: string) => boolean {\r\n    const processedPatterns: {\r\n      positive: boolean;\r\n      regex: RegExp;\r\n    }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\r\n      positive,\r\n      regex: new RegExp(regex),\r\n    }));\r\n\r\n    const includePatterns = processedPatterns.filter((spec) => spec.positive);\r\n    const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\r\n\r\n    return (url: string) =>\r\n      includePatterns.some((pattern) => pattern.regex.test(url)) &&\r\n      !excludePatterns.some((pattern) => pattern.regex.test(url));\r\n  }\r\n}\r\n","import { Injectable, isDevMode } from '@angular/core';\r\nimport {\r\n  Route,\r\n  UrlMatcher,\r\n  UrlMatchResult,\r\n  UrlSegment,\r\n  UrlSegmentGroup,\r\n} from '@angular/router';\r\nimport { GlobService } from '../../util/glob.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UrlMatcherService {\r\n  constructor(protected globService: GlobService) {}\r\n\r\n  /**\r\n   * Returns a matcher that is always fails\r\n   */\r\n  getFalsy(): UrlMatcher {\r\n    return function falsyUrlMatcher(): null {\r\n      return null;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns a matcher for given list of paths\r\n   */\r\n  getFromPaths(paths: string[]): UrlMatcher {\r\n    const matchers = paths.map((path) => this.getFromPath(path));\r\n    const matcher = this.getCombined(matchers);\r\n    if (isDevMode()) {\r\n      matcher['_paths'] = paths; // property added for easier debugging of routes\r\n    }\r\n    return matcher;\r\n  }\r\n\r\n  /**\r\n   * Returns a matcher that combines the given matchers\r\n   * */\r\n  getCombined(matchers: UrlMatcher[]): UrlMatcher {\r\n    const matcher = function combinedUrlMatchers(\r\n      segments: UrlSegment[],\r\n      segmentGroup: UrlSegmentGroup,\r\n      route: Route\r\n    ): UrlMatchResult | null {\r\n      for (let i = 0; i < matchers.length; i++) {\r\n        const result = matchers[i](segments, segmentGroup, route);\r\n        if (result) {\r\n          return result;\r\n        }\r\n      }\r\n      return null;\r\n    };\r\n    if (isDevMode()) {\r\n      matcher['_matchers'] = matchers; // property added for easier debugging of routes\r\n    }\r\n    return matcher;\r\n  }\r\n\r\n  /**\r\n   * Similar to Angular's defaultUrlMatcher. Differences:\r\n   * - the `path` comes from function's argument, not from `route.path`\r\n   * - the empty path `''` is handled here, but in Angular is handled one level higher in the match() function\r\n   */\r\n  protected getFromPath(path: string = ''): UrlMatcher {\r\n    const matcher = function pathUrlMatcher(\r\n      segments: UrlSegment[],\r\n      segmentGroup: UrlSegmentGroup,\r\n      route: Route\r\n    ): UrlMatchResult | null {\r\n      /**\r\n       * @license\r\n       * The MIT License\r\n       * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\r\n       *\r\n       * See:\r\n       * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/router/src/shared.ts#L121\r\n       */\r\n\r\n      // use function's argument, not the `route.path`\r\n      if (path === '') {\r\n        if (\r\n          route.pathMatch === 'full' &&\r\n          (segmentGroup.hasChildren() || segments.length > 0)\r\n        ) {\r\n          return null;\r\n        }\r\n        return { consumed: [], posParams: {} };\r\n      }\r\n\r\n      const parts = path.split('/'); // use function's argument, not the `route.path`\r\n\r\n      if (parts.length > segments.length) {\r\n        // The actual URL is shorter than the config, no match\r\n        return null;\r\n      }\r\n\r\n      if (\r\n        route.pathMatch === 'full' &&\r\n        (segmentGroup.hasChildren() || parts.length < segments.length)\r\n      ) {\r\n        // The config is longer than the actual URL but we are looking for a full match, return null\r\n        return null;\r\n      }\r\n\r\n      const posParams: { [key: string]: UrlSegment } = {};\r\n\r\n      // Check each config part against the actual URL\r\n      for (let index = 0; index < parts.length; index++) {\r\n        const part = parts[index];\r\n        const segment = segments[index];\r\n        const isParameter = part.startsWith(':');\r\n        if (isParameter) {\r\n          posParams[part.substring(1)] = segment;\r\n        } else if (part !== segment.path) {\r\n          // The actual URL part does not match the config, no match\r\n          return null;\r\n        }\r\n      }\r\n\r\n      return { consumed: segments.slice(0, parts.length), posParams };\r\n    };\r\n    if (isDevMode()) {\r\n      matcher['_path'] = path; // property added for easier debugging of routes\r\n    }\r\n    return matcher;\r\n  }\r\n\r\n  /**\r\n   * Returns URL matcher that accepts almost everything (like `**` route), but not paths accepted by the given matcher\r\n   */\r\n  getOpposite(originalMatcher: UrlMatcher): UrlMatcher {\r\n    const matcher = function oppositeUrlMatcher(\r\n      segments: UrlSegment[],\r\n      group: UrlSegmentGroup,\r\n      route: Route\r\n    ) {\r\n      return originalMatcher(segments, group, route)\r\n        ? null\r\n        : { consumed: segments, posParams: {} };\r\n    };\r\n    if (isDevMode()) {\r\n      matcher['_originalMatcher'] = originalMatcher; // property added for easier debugging of routes\r\n    }\r\n    return matcher;\r\n  }\r\n\r\n  /**\r\n   * Returns URL matcher for the given list of glob-like patterns. Each pattern must start with `/` or `!/`.\r\n   */\r\n  getFromGlob(globPatterns: string[]): UrlMatcher {\r\n    const globValidator = this.globService.getValidator(globPatterns);\r\n\r\n    const matcher = function globUrlMatcher(\r\n      segments: UrlSegment[]\r\n    ): UrlMatchResult | null {\r\n      const fullPath = `/${segments.map((s) => s.path).join('/')}`;\r\n\r\n      return globValidator(fullPath)\r\n        ? { consumed: segments, posParams: {} }\r\n        : null;\r\n    };\r\n    if (isDevMode()) {\r\n      matcher['_globPatterns'] = globPatterns; // property added for easier debugging of routes\r\n    }\r\n    return matcher;\r\n  }\r\n}\r\n","import { Injectable, InjectionToken, Injector, isDevMode } from '@angular/core';\r\nimport { Route, Router, Routes, UrlMatcher } from '@angular/router';\r\nimport { UrlMatcherService } from '../services/url-matcher.service';\r\nimport { UrlMatcherFactory } from '../url-matcher/url-matcher-factory';\r\nimport { RouteConfig } from './routes-config';\r\nimport { RoutingConfigService } from './routing-config.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ConfigurableRoutesService {\r\n  constructor(\r\n    protected injector: Injector,\r\n    protected routingConfigService: RoutingConfigService,\r\n    protected urlMatcherService: UrlMatcherService\r\n  ) {}\r\n\r\n  protected initCalled = false; // guard not to call init() more than once\r\n\r\n  /**\r\n   * Enhances existing Angular routes using the routing config of Spartacus.\r\n   * Can be called only once.\r\n   */\r\n  init(): void {\r\n    if (!this.initCalled) {\r\n      this.initCalled = true;\r\n\r\n      this.configure();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enhances existing Angular routes using the routing config of Spartacus.\r\n   */\r\n  protected configure(): void {\r\n    // Router could not be injected in constructor due to cyclic dependency with APP_INITIALIZER:\r\n    const router = this.injector.get(Router);\r\n    router.resetConfig(this.configureRoutes(router.config));\r\n  }\r\n\r\n  /**\r\n   * Sets the property `path` or `matcher` for the given routes, based on the Spartacus' routing configuration.\r\n   *\r\n   * @param routes list of Angular `Route` objects\r\n   */\r\n  protected configureRoutes(routes: Routes): Routes {\r\n    return routes.map((route) => {\r\n      const configuredRoute = this.configureRoute(route);\r\n\r\n      if (route.children && route.children.length) {\r\n        configuredRoute.children = this.configureRoutes(route.children);\r\n      }\r\n      return configuredRoute;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets the property `path` or `matcher` of the `Route`, based on the Spartacus' routing configuration.\r\n   * Uses the property `data.cxRoute` to determine the name of the route.\r\n   * It's the same name used as a key in the routing configuration: `routing.routes[ROUTE NAME]`.\r\n   *\r\n   * @param route Angular `Route` object\r\n   */\r\n  protected configureRoute(route: Route): Route {\r\n    const routeName = this.getRouteName(route);\r\n    if (routeName) {\r\n      const routeConfig = this.routingConfigService.getRouteConfig(routeName);\r\n      this.validateRouteConfig(routeConfig, routeName, route);\r\n\r\n      if (routeConfig?.disabled) {\r\n        delete route.path;\r\n        return {\r\n          ...route,\r\n          matcher: this.urlMatcherService.getFalsy(),\r\n        };\r\n      } else if (routeConfig?.matchers) {\r\n        delete route.path;\r\n        return {\r\n          ...route,\r\n          matcher: this.resolveUrlMatchers(route, routeConfig?.matchers),\r\n        };\r\n      } else if (routeConfig?.paths?.length === 1) {\r\n        delete route.matcher;\r\n        return { ...route, path: routeConfig?.paths[0] };\r\n      } else {\r\n        delete route.path;\r\n        return {\r\n          ...route,\r\n          matcher: this.urlMatcherService.getFromPaths(\r\n            routeConfig?.paths || []\r\n          ),\r\n        };\r\n      }\r\n    }\r\n    return route; // if route doesn't have a name, just pass the original route\r\n  }\r\n\r\n  /**\r\n   * Creates a single `UrlMatcher` based on given matchers and factories of matchers.\r\n   *\r\n   * @param route Route object\r\n   * @param matchersOrFactories `UrlMatcher`s or injection tokens with a factory functions\r\n   *  that create UrlMatchers based on the given route.\r\n   */\r\n  protected resolveUrlMatchers(\r\n    route: Route,\r\n    matchersOrFactories: RouteConfig['matchers']\r\n  ): UrlMatcher {\r\n    const matchers: UrlMatcher[] = matchersOrFactories.map(\r\n      (matcherOrFactory) => {\r\n        return typeof matcherOrFactory === 'function'\r\n          ? matcherOrFactory // matcher\r\n          : this.resolveUrlMatcherFactory(route, matcherOrFactory); // factory injection token\r\n      }\r\n    );\r\n    return this.urlMatcherService.getCombined(matchers);\r\n  }\r\n\r\n  /**\r\n   * Creates an `UrlMatcher` based on the given route, using the factory function coming from the given injection token.\r\n   *\r\n   * @param route Route object\r\n   * @param factoryToken injection token with a factory function that will create an UrlMatcher using given route\r\n   */\r\n  protected resolveUrlMatcherFactory(\r\n    route: Route,\r\n    factoryToken: InjectionToken<UrlMatcherFactory>\r\n  ): UrlMatcher {\r\n    const factory = this.injector.get(factoryToken);\r\n    return factory(route);\r\n  }\r\n\r\n  /**\r\n   * Returns the name of the Route stored in its property `data.cxRoute`\r\n   * @param route\r\n   */\r\n  protected getRouteName(route: Route): string {\r\n    return route.data && route.data.cxRoute;\r\n  }\r\n\r\n  protected validateRouteConfig(\r\n    routeConfig: RouteConfig,\r\n    routeName: string,\r\n    route: Route\r\n  ) {\r\n    if (isDevMode()) {\r\n      // - null value of routeConfig or routeConfig.paths means explicit switching off the route - it's valid config\r\n      // - routeConfig with defined `matchers` is valid, even if `paths` are undefined\r\n      if (\r\n        routeConfig === null ||\r\n        routeConfig.paths === null ||\r\n        routeConfig?.matchers\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      // undefined value of routeConfig or routeConfig.paths is a misconfiguration\r\n      if (!routeConfig?.paths) {\r\n        this.warn(\r\n          `Could not configure the named route '${routeName}'`,\r\n          route,\r\n          `due to undefined config or undefined 'paths' property for this route`\r\n        );\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  private warn(...args) {\r\n    if (isDevMode()) {\r\n      console.warn(...args);\r\n    }\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { UrlCommands } from './url-command';\n\n@Pipe({\n  name: 'cxUrl',\n})\nexport class UrlPipe implements PipeTransform {\n  constructor(private urlService: SemanticPathService) {}\n\n  transform(commands: UrlCommands): any[] {\n    return this.urlService.transform(commands);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { Product } from '../../../model/product.model';\n@Pipe({\n  name: 'cxProductUrl',\n})\nexport class ProductURLPipe implements PipeTransform {\n  constructor(private semanticPath: SemanticPathService) {}\n  transform(product: Product) {\n    return this.semanticPath.transform({ cxRoute: 'product', params: product });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlPipe } from './url.pipe';\nimport { ProductURLPipe } from './product-url.pipe';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [UrlPipe, ProductURLPipe],\n  exports: [UrlPipe, ProductURLPipe],\n})\nexport class UrlModule {}\n","import { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class ExternalRoutesConfig {\r\n  routing?: {\r\n    internal?: string[];\r\n  };\r\n}\r\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({ providedIn: 'root' })\nexport class ExternalRoutesGuard implements CanActivate {\n  constructor(\n    protected winRef: WindowRef,\n    @Inject(PLATFORM_ID) protected platformId: Object\n  ) {}\n\n  /**\n   * Redirects to different storefront system for anticipated URL\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    if (isPlatformBrowser(this.platformId)) {\n      this.redirect(route, state);\n    }\n    return false;\n  }\n\n  /**\n   * Redirects to anticipated URL using full page reload, not Angular routing\n   */\n  protected redirect(_: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const window = this.winRef.nativeWindow;\n\n    if (window && window.location) {\n      window.location.href = state.url;\n    }\n  }\n}\n","import { ExternalRoutesService } from './external-routes.service';\n\nexport function addExternalRoutesFactory(service: ExternalRoutesService) {\n  const result = () => {\n    service.addRoutes();\n  };\n  return result;\n}\n","import { Injectable, Injector } from '@angular/core';\r\nimport { Router, Routes, UrlMatcher } from '@angular/router';\r\nimport { UrlMatcherService } from '../services/url-matcher.service';\r\nimport { ExternalRoutesConfig } from './external-routes-config';\r\nimport { ExternalRoutesGuard } from './external-routes.guard';\r\n\r\n/**\r\n * Service that helps redirecting to different storefront systems for configured URLs\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ExternalRoutesService {\r\n  constructor(\r\n    protected config: ExternalRoutesConfig,\r\n    protected urlMatcherService: UrlMatcherService,\r\n    protected injector: Injector\r\n  ) {}\r\n\r\n  protected get internalUrlPatterns(): ExternalRoutesConfig['routing']['internal'] {\r\n    return (\r\n      (this.config && this.config.routing && this.config.routing.internal) || []\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Prepends routes (to the Router.config) that are responsible for redirecting to a different storefront system\r\n   */\r\n  addRoutes(): void {\r\n    const router: Router = this.injector.get(Router);\r\n    const newRoutes = this.getRoutes();\r\n    if (newRoutes.length) {\r\n      router.resetConfig([...newRoutes, ...router.config]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns routes that are responsible for redirection to different storefront systems\r\n   */\r\n  protected getRoutes(): Routes {\r\n    if (!this.internalUrlPatterns.length) {\r\n      return [];\r\n    }\r\n    const routes: Routes = [];\r\n\r\n    routes.push({\r\n      pathMatch: 'full',\r\n      matcher: this.getUrlMatcher(),\r\n      canActivate: [ExternalRoutesGuard],\r\n      component: {} as any,\r\n    });\r\n\r\n    return routes;\r\n  }\r\n\r\n  /**\r\n   * Returns the URL matcher for the external route\r\n   */\r\n  protected getUrlMatcher(): UrlMatcher {\r\n    const matcher = this.urlMatcherService.getFromGlob(\r\n      this.internalUrlPatterns\r\n    );\r\n    return this.urlMatcherService.getOpposite(matcher); // the external route should be activated only when it's NOT an internal route\r\n  }\r\n}\r\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { addExternalRoutesFactory } from './external-routes.providers';\r\nimport { ExternalRoutesService } from './external-routes.service';\r\n\r\n/**\r\n * Prepends the external route that redirects to a different storefront system for configured URLs\r\n */\r\n@NgModule()\r\nexport class ExternalRoutesModule {\r\n  static forRoot(): ModuleWithProviders<ExternalRoutesModule> {\r\n    return {\r\n      ngModule: ExternalRoutesModule,\r\n      providers: [\r\n        {\r\n          provide: APP_INITIALIZER,\r\n          multi: true,\r\n          useFactory: addExternalRoutesFactory,\r\n          deps: [ExternalRoutesService],\r\n        },\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { PageType } from '../../model/cms.model';\n\nexport class PageContext {\n  id: string;\n  type?: PageType;\n\n  constructor(id: string, type?: PageType) {\n    this.id = id;\n    this.type = type;\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { RoutingConfig } from '../configurable-routes/config/routing-config';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ProtectedRoutesService {\r\n  private nonProtectedPaths: string[][] = []; // arrays of paths' segments list\r\n\r\n  protected get routingConfig(): RoutingConfig['routing'] {\r\n    return this.config && this.config.routing;\r\n  }\r\n\r\n  /**\r\n   * Returns 'protected' property (boolean) from routing config\r\n   *\r\n   * @returns boolean\r\n   */\r\n  public get shouldProtect(): boolean {\r\n    return this.routingConfig.protected;\r\n  }\r\n\r\n  constructor(protected config: RoutingConfig) {\r\n    if (this.shouldProtect) {\r\n      // pre-process config for performance:\r\n      this.nonProtectedPaths = this.getNonProtectedPaths().map((path) =>\r\n        this.getSegments(path)\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tells if the url is protected\r\n   */\r\n  isUrlProtected(urlSegments: string[]): boolean {\r\n    return (\r\n      this.shouldProtect &&\r\n      !this.matchAnyPath(urlSegments, this.nonProtectedPaths)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Tells whether the url matches at least one of the paths\r\n   */\r\n  protected matchAnyPath(\r\n    urlSegments: string[],\r\n    pathsSegments: string[][]\r\n  ): boolean {\r\n    return pathsSegments.some((pathSegments) =>\r\n      this.matchPath(urlSegments, pathSegments)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Tells whether the url matches the path\r\n   */\r\n  protected matchPath(urlSegments: string[], pathSegments: string[]): boolean {\r\n    if (urlSegments.length !== pathSegments.length) {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0; i < pathSegments.length; i++) {\r\n      const pathSeg = pathSegments[i];\r\n      const urlSeg = urlSegments[i];\r\n\r\n      // compare only static segments:\r\n      if (!pathSeg.startsWith(':') && pathSeg !== urlSeg) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Returns a list of paths that are not protected\r\n   */\r\n  protected getNonProtectedPaths(): string[] {\r\n    return Object.values(this.routingConfig.routes).reduce(\r\n      (acc, routeConfig) =>\r\n        routeConfig.protected === false && // must be explicitly false, ignore undefined\r\n        routeConfig.paths &&\r\n        routeConfig.paths.length\r\n          ? acc.concat(routeConfig.paths)\r\n          : acc,\r\n      []\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Splits the url by slashes\r\n   */\r\n  protected getSegments(url: string): string[] {\r\n    return (url || '').split('/');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\nimport { AuthGuard } from '../../auth/guards/auth.guard';\r\nimport { ProtectedRoutesService } from './protected-routes.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ProtectedRoutesGuard implements CanActivate {\r\n  constructor(\r\n    protected service: ProtectedRoutesService,\r\n    protected authGuard: AuthGuard\r\n  ) {}\r\n\r\n  /**\r\n   * When the anticipated url is protected, it switches to the AuthGuard. Otherwise emits true.\r\n   */\r\n  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\r\n    let urlSegments: string[] = route.url.map((seg) => seg.path);\r\n\r\n    // For the root path `/` ActivatedRoute contains an empty array of segments:\r\n    urlSegments = urlSegments.length ? urlSegments : [''];\r\n\r\n    if (this.service.isUrlProtected(urlSegments)) {\r\n      return this.authGuard.canActivate();\r\n    }\r\n    return of(true);\r\n  }\r\n}\r\n","import { Location } from '@angular/common';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Action } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { AuthActions } from '../../../auth/store/actions/index';\r\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\r\nimport { CmsRoute } from '../../models/cms-route';\r\nimport { RoutingActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class RouterEffects {\r\n  @Effect({ dispatch: false })\r\n  navigate$: Observable<any> = this.actions$.pipe(\r\n    ofType(RoutingActions.ROUTER_GO),\r\n    map((action: RoutingActions.RouteGoAction) => action.payload),\r\n    tap(({ path, query: queryParams, extras }) => {\r\n      this.router.navigate(path, { queryParams, ...extras });\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  navigateBuUrl$: Observable<any> = this.actions$.pipe(\r\n    ofType(RoutingActions.ROUTER_GO_BY_URL),\r\n    map((action: RoutingActions.RouteGoAction) => action.payload),\r\n    tap((url) => {\r\n      this.router.navigateByUrl(url);\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  clearCmsRoutes$: Observable<Action> = this.actions$.pipe(\r\n    ofType(\r\n      SiteContextActions.LANGUAGE_CHANGE,\r\n      AuthActions.LOGOUT,\r\n      AuthActions.LOGIN\r\n    ),\r\n    tap(() => {\r\n      const filteredConfig = this.router.config.filter(\r\n        (route: CmsRoute) => !(route.data && route.data.cxCmsRouteContext)\r\n      );\r\n      if (filteredConfig.length !== this.router.config.length) {\r\n        this.router.resetConfig(filteredConfig);\r\n      }\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  navigateBack$: Observable<Action> = this.actions$.pipe(\r\n    ofType(RoutingActions.ROUTER_BACK),\r\n    tap(() => this.location.back())\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  navigateForward$: Observable<Action> = this.actions$.pipe(\r\n    ofType(RoutingActions.ROUTER_FORWARD),\r\n    tap(() => this.location.forward())\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private router: Router,\r\n    private location: Location\r\n  ) {}\r\n}\r\n","import { RouterEffects } from './router.effect';\n\nexport const effects: any[] = [RouterEffects];\n\nexport * from './router.effect';\n","import { InjectionToken, Provider } from '@angular/core';\r\nimport { RouterStateSnapshot } from '@angular/router';\r\nimport * as fromNgrxRouter from '@ngrx/router-store';\r\nimport { ActionReducerMap } from '@ngrx/store';\r\nimport { PageType } from '../../../model/cms.model';\r\nimport { CmsActivatedRouteSnapshot } from '../../models/cms-route';\r\nimport { PageContext } from '../../models/page-context.model';\r\nimport {\r\n  ActivatedRouterStateSnapshot,\r\n  RouterState,\r\n  State,\r\n} from '../routing-state';\r\n\r\nexport const initialState: RouterState = {\r\n  navigationId: 0,\r\n  state: {\r\n    url: '',\r\n    queryParams: {},\r\n    params: {},\r\n    context: {\r\n      id: '',\r\n    },\r\n    cmsRequired: false,\r\n  },\r\n  nextState: undefined,\r\n};\r\n\r\nexport function getReducers(): ActionReducerMap<State> {\r\n  return {\r\n    router: reducer,\r\n  };\r\n}\r\n\r\nexport function reducer(\r\n  state: RouterState = initialState,\r\n  action: any\r\n): RouterState {\r\n  switch (action.type) {\r\n    case fromNgrxRouter.ROUTER_NAVIGATION: {\r\n      return {\r\n        ...state,\r\n        nextState: action.payload.routerState,\r\n        navigationId: action.payload.event.id,\r\n      };\r\n    }\r\n\r\n    case fromNgrxRouter.ROUTER_ERROR:\r\n    case fromNgrxRouter.ROUTER_CANCEL: {\r\n      return {\r\n        ...state,\r\n        nextState: undefined,\r\n      };\r\n    }\r\n\r\n    case fromNgrxRouter.ROUTER_NAVIGATED: {\r\n      return {\r\n        state: action.payload.routerState,\r\n        navigationId: action.payload.event.id,\r\n        nextState: undefined,\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducerMap<\r\n  State\r\n>> = new InjectionToken<ActionReducerMap<State>>('RouterReducers');\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n\r\n/* The serializer is there to parse the RouterStateSnapshot,\r\nand to reduce the amount of properties to be passed to the reducer.\r\n */\r\nexport class CustomSerializer\r\n  implements\r\n    fromNgrxRouter.RouterStateSerializer<ActivatedRouterStateSnapshot> {\r\n  serialize(routerState: RouterStateSnapshot): ActivatedRouterStateSnapshot {\r\n    const { url } = routerState;\r\n    const { queryParams } = routerState.root;\r\n\r\n    let state: CmsActivatedRouteSnapshot = routerState.root as CmsActivatedRouteSnapshot;\r\n    let cmsRequired = false;\r\n    let context: PageContext;\r\n\r\n    while (state.firstChild) {\r\n      state = state.firstChild as CmsActivatedRouteSnapshot;\r\n\r\n      // we use context information embedded in Cms driven routes from any parent route\r\n      if (state.data && state.data.cxCmsRouteContext) {\r\n        context = state.data.cxCmsRouteContext;\r\n      }\r\n\r\n      // we assume, that any route that has CmsPageGuard or it's child\r\n      // is cmsRequired\r\n      if (\r\n        !cmsRequired &&\r\n        (context ||\r\n          (state.routeConfig &&\r\n            state.routeConfig.canActivate &&\r\n            state.routeConfig.canActivate.find(\r\n              (x) => x && x.guardName === 'CmsPageGuard'\r\n            )))\r\n      ) {\r\n        cmsRequired = true;\r\n      }\r\n    }\r\n    const { params } = state;\r\n\r\n    // we give smartedit preview page a PageContext\r\n    if (state.url.length > 0 && state.url[0].path === 'cx-preview') {\r\n      context = {\r\n        id: 'smartedit-preview',\r\n        type: PageType.CONTENT_PAGE,\r\n      };\r\n    } else {\r\n      if (params['productCode']) {\r\n        context = { id: params['productCode'], type: PageType.PRODUCT_PAGE };\r\n      } else if (params['categoryCode']) {\r\n        context = { id: params['categoryCode'], type: PageType.CATEGORY_PAGE };\r\n      } else if (params['brandCode']) {\r\n        context = { id: params['brandCode'], type: PageType.CATEGORY_PAGE };\r\n      } else if (state.data.pageLabel !== undefined) {\r\n        context = { id: state.data.pageLabel, type: PageType.CONTENT_PAGE };\r\n      } else if (!context) {\r\n        if (state.url.length > 0) {\r\n          const pageLabel =\r\n            '/' + state.url.map((urlSegment) => urlSegment.path).join('/');\r\n          context = {\r\n            id: pageLabel,\r\n            type: PageType.CONTENT_PAGE,\r\n          };\r\n        } else {\r\n          context = {\r\n            id: 'homepage',\r\n            type: PageType.CONTENT_PAGE,\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    return { url, queryParams, params, context, cmsRequired };\r\n  }\r\n}\r\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport {\r\n  RouterState,\r\n  RouterStateSerializer,\r\n  StoreRouterConnectingModule,\r\n} from '@ngrx/router-store';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { ConfigurableRoutesService } from './configurable-routes/configurable-routes.service';\r\nimport { effects } from './store/effects/index';\r\nimport {\r\n  CustomSerializer,\r\n  reducerProvider,\r\n  reducerToken,\r\n} from './store/reducers/router.reducer';\r\nimport { ROUTING_FEATURE } from './store/routing-state';\r\n\r\nexport function initConfigurableRoutes(\r\n  service: ConfigurableRoutesService\r\n): () => void {\r\n  const result = () => service.init(); // workaround for AOT compilation (see https://stackoverflow.com/a/51977115)\r\n  return result;\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    StoreModule.forFeature(ROUTING_FEATURE, reducerToken),\r\n    EffectsModule.forFeature(effects),\r\n    StoreRouterConnectingModule.forRoot({\r\n      routerState: RouterState.Minimal,\r\n      stateKey: ROUTING_FEATURE, // name of reducer key\r\n    }),\r\n  ],\r\n})\r\nexport class RoutingModule {\r\n  static forRoot(): ModuleWithProviders<RoutingModule> {\r\n    return {\r\n      ngModule: RoutingModule,\r\n      providers: [\r\n        reducerProvider,\r\n        {\r\n          provide: RouterStateSerializer,\r\n          useClass: CustomSerializer,\r\n        },\r\n        {\r\n          provide: APP_INITIALIZER,\r\n          useFactory: initConfigurableRoutes,\r\n          deps: [ConfigurableRoutesService],\r\n          multi: true,\r\n        },\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { inject, InjectionToken } from '@angular/core';\r\nimport { Route } from '@angular/router';\r\nimport { RoutingConfigService } from '../configurable-routes';\r\nimport { UrlMatcherService } from '../services/url-matcher.service';\r\nimport { UrlMatcherFactory } from './url-matcher-factory';\r\n\r\nexport function getDefaultUrlMatcherFactory(\r\n  routingConfigService: RoutingConfigService,\r\n  urlMatcherService: UrlMatcherService\r\n): UrlMatcherFactory {\r\n  const factory = (route: Route) => {\r\n    const routeName = route.data && route.data['cxRoute'];\r\n    const routeConfig = routingConfigService.getRouteConfig(routeName);\r\n    const paths = (routeConfig && routeConfig.paths) || [];\r\n    return urlMatcherService.getFromPaths(paths);\r\n  };\r\n  return factory;\r\n}\r\n\r\n/**\r\n * Injection token with url matcher factory for spartacus routes containing property `data.cxRoute`.\r\n * The provided url matcher matches the configured `paths` from routing config.\r\n *\r\n * If this matcher doesn't fit the requirements, it can be replaced with custom matcher\r\n * or additional matchers can be added for a specific route. See for example PRODUCT_DETAILS_URL_MATCHER.\r\n *\r\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\r\n */\r\nexport const DEFAULT_URL_MATCHER = new InjectionToken<UrlMatcherFactory>(\r\n  'DEFAULT_URL_MATCHER',\r\n  {\r\n    providedIn: 'root',\r\n    factory: () =>\r\n      getDefaultUrlMatcherFactory(\r\n        inject(RoutingConfigService),\r\n        inject(UrlMatcherService)\r\n      ),\r\n  }\r\n);\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, filter, map, mergeMap, take } from 'rxjs/operators';\r\nimport { RoutingService } from '../../../routing/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\r\nimport { CmsActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class NavigationEntryItemEffects {\r\n  @Effect()\r\n  loadNavigationItems$: Observable<\r\n    | CmsActions.LoadCmsNavigationItemsSuccess\r\n    | CmsActions.LoadCmsNavigationItemsFail\r\n  > = this.actions$.pipe(\r\n    ofType(CmsActions.LOAD_CMS_NAVIGATION_ITEMS),\r\n    map((action: CmsActions.LoadCmsNavigationItems) => action.payload),\r\n    map((payload) => {\r\n      return {\r\n        ids: this.getIdListByItemType(payload.items),\r\n        nodeId: payload.nodeId,\r\n      };\r\n    }),\r\n    mergeMap((data) => {\r\n      if (data.ids.componentIds.length > 0) {\r\n        return this.routingService.getRouterState().pipe(\r\n          filter((routerState) => routerState !== undefined),\r\n          map((routerState) => routerState.state.context),\r\n          take(1),\r\n          mergeMap((pageContext) =>\r\n            // download all items in one request\r\n            this.cmsComponentConnector\r\n              .getList(data.ids.componentIds, pageContext)\r\n              .pipe(\r\n                map(\r\n                  (components) =>\r\n                    new CmsActions.LoadCmsNavigationItemsSuccess({\r\n                      nodeId: data.nodeId,\r\n                      components: components,\r\n                    })\r\n                ),\r\n                catchError((error) =>\r\n                  of(\r\n                    new CmsActions.LoadCmsNavigationItemsFail(\r\n                      data.nodeId,\r\n                      makeErrorSerializable(error)\r\n                    )\r\n                  )\r\n                )\r\n              )\r\n          )\r\n        );\r\n      } else if (data.ids.pageIds.length > 0) {\r\n        // TODO: future work\r\n        // dispatch action to load cms page one by one\r\n      } else if (data.ids.mediaIds.length > 0) {\r\n        // TODO: future work\r\n        // send request to get list of media\r\n      } else {\r\n        return of(\r\n          new CmsActions.LoadCmsNavigationItemsFail(\r\n            data.nodeId,\r\n            'navigation nodes are empty'\r\n          )\r\n        );\r\n      }\r\n    })\r\n  );\r\n\r\n  // We only consider 3 item types: cms page, cms component, and media.\r\n  getIdListByItemType(\r\n    itemList: any[]\r\n  ): { pageIds: string[]; componentIds: string[]; mediaIds: string[] } {\r\n    const pageIds: string[] = [];\r\n    const componentIds: string[] = [];\r\n    const mediaIds: string[] = [];\r\n\r\n    itemList.forEach((item) => {\r\n      if (item.superType === 'AbstractCMSComponent') {\r\n        componentIds.push(item.id);\r\n      } else if (item.superType === 'AbstractPage') {\r\n        pageIds.push(item.id);\r\n      } else if (item.superType === 'AbstractMedia') {\r\n        mediaIds.push(item.id);\r\n      }\r\n    });\r\n    return { pageIds: pageIds, componentIds: componentIds, mediaIds: mediaIds };\r\n  }\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private cmsComponentConnector: CmsComponentConnector,\r\n    private routingService: RoutingService\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { catchError, switchMap } from 'rxjs/operators';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { CmsPageAdapter } from './cms-page.adapter';\r\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\r\nimport { PageContext } from '../../../routing/models/page-context.model';\r\nimport { CmsStructureModel } from '../../model/page.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CmsPageConnector {\r\n  constructor(\r\n    protected cmsPageAdapter: CmsPageAdapter,\r\n    protected cmsStructureConfigService: CmsStructureConfigService\r\n  ) {}\r\n\r\n  /**\r\n   * Returns an observable with the page structure. The page structure is\r\n   * typically loaded from a backend, but can also be returned from static\r\n   * configuration (see `CmsStructureConfigService`).\r\n   */\r\n  get(pageContext: PageContext): Observable<CmsStructureModel> {\r\n    return this.cmsStructureConfigService\r\n      .shouldIgnoreBackend(pageContext.id)\r\n      .pipe(\r\n        switchMap((loadFromConfig) => {\r\n          if (!loadFromConfig) {\r\n            return this.cmsPageAdapter.load(pageContext).pipe(\r\n              catchError((error) => {\r\n                if (\r\n                  error instanceof HttpErrorResponse &&\r\n                  error.status === 400\r\n                ) {\r\n                  return of({});\r\n                } else {\r\n                  return throwError(error);\r\n                }\r\n              })\r\n            );\r\n          } else {\r\n            return of({});\r\n          }\r\n        }),\r\n        switchMap((page) => this.mergeDefaultPageStructure(pageContext, page))\r\n      );\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Merge default page structure inot the given `CmsStructureModel`.\r\n   * This is benefitial for a fast setup of the UI without necessary\r\n   * finegrained CMS setup.\r\n   */\r\n  private mergeDefaultPageStructure(\r\n    pageContext: PageContext,\r\n    pageStructure: CmsStructureModel\r\n  ): Observable<CmsStructureModel> {\r\n    return this.cmsStructureConfigService.mergePageStructure(\r\n      pageContext.id,\r\n      pageStructure\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Action } from '@ngrx/store';\r\nimport { Observable, of } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  filter,\r\n  groupBy,\r\n  map,\r\n  mergeMap,\r\n  switchMap,\r\n  take,\r\n} from 'rxjs/operators';\r\nimport { AuthActions } from '../../../auth/store/actions/index';\r\nimport { RoutingService } from '../../../routing/index';\r\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { CmsPageConnector } from '../../connectors/page/cms-page.connector';\r\nimport { CmsStructureModel } from '../../model/page.model';\r\nimport { serializePageContext } from '../../utils/cms-utils';\r\nimport { CmsActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class PageEffects {\r\n  @Effect()\r\n  refreshPage$: Observable<Action> = this.actions$.pipe(\r\n    ofType(\r\n      SiteContextActions.LANGUAGE_CHANGE,\r\n      AuthActions.LOGOUT,\r\n      AuthActions.LOGIN\r\n    ),\r\n    switchMap(() =>\r\n      this.routingService.getRouterState().pipe(\r\n        filter(\r\n          (routerState) =>\r\n            routerState &&\r\n            routerState.state &&\r\n            routerState.state.cmsRequired &&\r\n            !routerState.nextState\r\n        ),\r\n        take(1),\r\n        map((routerState) => routerState.state.context),\r\n        mergeMap((context) => of(new CmsActions.LoadCmsPageData(context)))\r\n      )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  loadPageData$: Observable<Action> = this.actions$.pipe(\r\n    ofType(CmsActions.LOAD_CMS_PAGE_DATA),\r\n    map((action: CmsActions.LoadCmsPageData) => action.payload),\r\n    groupBy((pageContext) => serializePageContext(pageContext)),\r\n    mergeMap((group) =>\r\n      group.pipe(\r\n        switchMap((pageContext) =>\r\n          this.cmsPageConnector.get(pageContext).pipe(\r\n            mergeMap((cmsStructure: CmsStructureModel) => {\r\n              const actions: Action[] = [\r\n                new CmsActions.CmsGetComponentFromPage(\r\n                  cmsStructure.components.map((component) => ({\r\n                    component,\r\n                    pageContext,\r\n                  }))\r\n                ),\r\n                new CmsActions.LoadCmsPageDataSuccess(\r\n                  pageContext,\r\n                  cmsStructure.page\r\n                ),\r\n              ];\r\n\r\n              const pageLabel = cmsStructure.page.label;\r\n              // For content pages the page label returned from backend can be different than page ID initially assumed from route.\r\n              // In such a case let's save the success response not only for initially assumed page ID, but also for correct page label.\r\n              if (pageLabel && pageLabel !== pageContext.id) {\r\n                actions.unshift(\r\n                  new CmsActions.CmsSetPageSuccessIndex(\r\n                    { id: pageLabel, type: pageContext.type },\r\n                    cmsStructure.page\r\n                  )\r\n                );\r\n              }\r\n\r\n              return actions;\r\n            }),\r\n            catchError((error) =>\r\n              of(\r\n                new CmsActions.LoadCmsPageDataFail(\r\n                  pageContext,\r\n                  makeErrorSerializable(error)\r\n                )\r\n              )\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private cmsPageConnector: CmsPageConnector,\r\n    private routingService: RoutingService\r\n  ) {}\r\n}\r\n","import { ComponentsEffects } from './components.effect';\r\nimport { NavigationEntryItemEffects } from './navigation-entry-item.effect';\r\nimport { PageEffects } from './page.effect';\r\n\r\nexport const effects: any[] = [\r\n  PageEffects,\r\n  ComponentsEffects,\r\n  NavigationEntryItemEffects,\r\n];\r\n\r\nexport * from './components.effect';\r\nexport * from './navigation-entry-item.effect';\r\nexport * from './page.effect';\r\n","import { loaderReducer } from '../../../state/utils/loader/loader.reducer';\r\nimport { serializePageContext } from '../../utils/cms-utils';\r\nimport { CmsActions } from '../actions/index';\r\nimport { ComponentsContext } from '../cms-state';\r\n\r\nexport const initialState: ComponentsContext = {\r\n  component: undefined,\r\n  pageContext: {},\r\n};\r\n\r\nfunction componentExistsReducer<T>(\r\n  state: boolean | undefined,\r\n  action: CmsActions.CmsComponentAction<T>\r\n): boolean {\r\n  switch (action.type) {\r\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL:\r\n      return false;\r\n\r\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE:\r\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS:\r\n      return true;\r\n  }\r\n  return state;\r\n}\r\n\r\nexport function reducer<T>(\r\n  state = initialState,\r\n  action: CmsActions.CmsComponentAction<T>\r\n): ComponentsContext {\r\n  switch (action.type) {\r\n    case CmsActions.LOAD_CMS_COMPONENT: {\r\n      const pageContextReducer = loaderReducer<boolean>(\r\n        action.meta.entityType,\r\n        componentExistsReducer\r\n      );\r\n      const context = serializePageContext(action.payload.pageContext, true);\r\n      return {\r\n        ...state,\r\n        pageContext: {\r\n          ...state.pageContext,\r\n          [context]: pageContextReducer(state.pageContext[context], action),\r\n        },\r\n      };\r\n    }\r\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL: {\r\n      const pageContextReducer = loaderReducer<boolean>(\r\n        action.meta.entityType,\r\n        componentExistsReducer\r\n      );\r\n      const context = serializePageContext(action.payload.pageContext, true);\r\n      return {\r\n        ...state,\r\n        pageContext: {\r\n          ...state.pageContext,\r\n          [context]: pageContextReducer(state.pageContext[context], action),\r\n        },\r\n      };\r\n    }\r\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS: {\r\n      const pageContextReducer = loaderReducer<boolean>(\r\n        action.meta.entityType,\r\n        componentExistsReducer\r\n      );\r\n      const context = serializePageContext(action.payload.pageContext, true);\r\n      return {\r\n        ...state,\r\n        component: action.payload.component as T,\r\n        pageContext: {\r\n          ...state.pageContext,\r\n          [context]: pageContextReducer(state.pageContext[context], action),\r\n        },\r\n      };\r\n    }\r\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE: {\r\n      const pageContextReducer = loaderReducer<boolean>(\r\n        action.meta.entityType,\r\n        componentExistsReducer\r\n      );\r\n      if (!Array.isArray(action.payload)) {\r\n        const context = serializePageContext(action.payload.pageContext, true);\r\n        return {\r\n          ...state,\r\n          component: action.payload.component as T,\r\n          pageContext: {\r\n            ...state.pageContext,\r\n            [context]: pageContextReducer(state.pageContext[context], action),\r\n          },\r\n        };\r\n      }\r\n    }\r\n  }\r\n  return state;\r\n}\r\n","import { NodeItem } from '../../model/node-item.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: NodeItem = undefined;\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.CmsNavigationEntryItemAction\n): NodeItem {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_NAVIGATION_ITEMS_SUCCESS: {\n      if (action.payload.components) {\n        const components = action.payload.components;\n        const newItem: NodeItem = components.reduce(\n          (compItems: { [uid_type: string]: any }, component: any) => {\n            return {\n              ...compItems,\n              [`${component.uid}_AbstractCMSComponent`]: component,\n            };\n          },\n          {\n            ...{},\n          }\n        );\n\n        return {\n          ...state,\n          ...newItem,\n        };\n      }\n    }\n  }\n\n  return state;\n}\n","import { EntityState } from '../../../state/utils/entity/entity-state';\nimport { Page } from '../../model/page.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: EntityState<Page> = { entities: {} };\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.LoadCmsPageDataSuccess\n): EntityState<Page> {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n      const page: Page = action.payload;\n      return { ...state, entities: { ...state.entities, [page.pageId]: page } };\n    }\n  }\n  return state;\n}\n","import { CmsActions } from '../actions/index';\n\nexport const initialState = undefined;\n\nexport function reducer(\n  entityType: string\n): (\n  state: string,\n  action:\n    | CmsActions.LoadCmsPageDataSuccess\n    | CmsActions.LoadCmsPageDataFail\n    | CmsActions.CmsSetPageFailIndex\n) => string {\n  return (\n    state = initialState,\n    action:\n      | CmsActions.LoadCmsPageDataSuccess\n      | CmsActions.LoadCmsPageDataFail\n      | CmsActions.CmsSetPageSuccessIndex\n      | CmsActions.CmsSetPageFailIndex\n  ): string => {\n    if (action.meta && action.meta.entityType === entityType) {\n      switch (action.type) {\n        case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n          return action.payload.pageId;\n        }\n\n        case CmsActions.LOAD_CMS_PAGE_DATA_FAIL: {\n          return initialState;\n        }\n\n        case CmsActions.CMS_SET_PAGE_FAIL_INDEX: {\n          return action.payload;\n        }\n\n        case CmsActions.CMS_SET_PAGE_SUCCESS_INDEX: {\n          return action.payload.pageId;\n        }\n      }\n    }\n    return state;\n  };\n}\n","import { InjectionToken, Provider } from '@angular/core';\r\nimport {\r\n  Action,\r\n  ActionReducer,\r\n  ActionReducerMap,\r\n  combineReducers,\r\n  MetaReducer,\r\n} from '@ngrx/store';\r\nimport { AuthActions } from '../../../auth/store/actions/index';\r\nimport { PageType } from '../../../model/cms.model';\r\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\r\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\r\nimport { entityReducer } from '../../../state/utils/entity/entity.reducer';\r\nimport { NodeItem } from '../../model/node-item.model';\r\nimport {\r\n  CmsState,\r\n  COMPONENT_ENTITY,\r\n  NAVIGATION_DETAIL_ENTITY,\r\n  StateWithCms,\r\n} from '../cms-state';\r\nimport * as fromComponentsReducer from './components.reducer';\r\nimport * as fromNavigation from './navigation-entry-item.reducer';\r\nimport * as fromPageReducer from './page-data.reducer';\r\nimport * as fromPageIndexReducer from './page-index.reducer';\r\n\r\nexport function getReducers(): ActionReducerMap<CmsState> {\r\n  return {\r\n    page: combineReducers({\r\n      pageData: fromPageReducer.reducer,\r\n      index: combineReducers({\r\n        content: entityLoaderReducer<string>(\r\n          PageType.CONTENT_PAGE,\r\n          fromPageIndexReducer.reducer(PageType.CONTENT_PAGE)\r\n        ),\r\n        product: entityLoaderReducer<string>(\r\n          PageType.PRODUCT_PAGE,\r\n          fromPageIndexReducer.reducer(PageType.PRODUCT_PAGE)\r\n        ),\r\n        category: entityLoaderReducer<string>(\r\n          PageType.CATEGORY_PAGE,\r\n          fromPageIndexReducer.reducer(PageType.CATEGORY_PAGE)\r\n        ),\r\n        catalog: entityLoaderReducer<string>(\r\n          PageType.CATALOG_PAGE,\r\n          fromPageIndexReducer.reducer(PageType.CATALOG_PAGE)\r\n        ),\r\n      }),\r\n    }),\r\n    components: entityReducer(COMPONENT_ENTITY, fromComponentsReducer.reducer),\r\n    navigation: entityLoaderReducer<NodeItem>(\r\n      NAVIGATION_DETAIL_ENTITY,\r\n      fromNavigation.reducer\r\n    ),\r\n  };\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducerMap<\r\n  CmsState\r\n>> = new InjectionToken<ActionReducerMap<CmsState>>('CmsReducers');\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n\r\nexport function clearCmsState(\r\n  reducer: ActionReducer<StateWithCms, Action>\r\n): ActionReducer<StateWithCms, Action> {\r\n  return function (state, action) {\r\n    if (\r\n      action.type === SiteContextActions.LANGUAGE_CHANGE ||\r\n      action.type === AuthActions.LOGOUT ||\r\n      action.type === AuthActions.LOGIN\r\n    ) {\r\n      state = undefined;\r\n    }\r\n    return reducer(state, action);\r\n  };\r\n}\r\n\r\nexport const metaReducers: MetaReducer<StateWithCms>[] = [clearCmsState];\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { provideDefaultConfigFactory } from '../../config/config.module';\r\nimport {\r\n  StateConfig,\r\n  StateTransferType,\r\n} from '../../state/config/state-config';\r\nimport { StateModule } from '../../state/state.module';\r\nimport { CMS_FEATURE } from './cms-state';\r\nimport { effects } from './effects/index';\r\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\r\n\r\nexport function cmsStoreConfigFactory(): StateConfig {\r\n  // if we want to reuse CMS_FEATURE const in config, we have to use factory instead of plain object\r\n  const config: StateConfig = {\r\n    state: {\r\n      ssrTransfer: {\r\n        keys: { [CMS_FEATURE]: StateTransferType.TRANSFER_STATE },\r\n      },\r\n    },\r\n  };\r\n  return config;\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    StateModule,\r\n    StoreModule.forFeature(CMS_FEATURE, reducerToken, { metaReducers }),\r\n    EffectsModule.forFeature(effects),\r\n  ],\r\n  providers: [\r\n    provideDefaultConfigFactory(cmsStoreConfigFactory),\r\n    reducerProvider,\r\n  ],\r\n})\r\nexport class CmsStoreModule {}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '../config/config.module';\r\nimport { defaultCmsModuleConfig } from './config/default-cms-config';\r\nimport { CmsService } from './facade/cms.service';\r\nimport { CmsPageTitleModule } from './page/page.module';\r\nimport { CmsStoreModule } from './store/cms-store.module';\r\n\r\n@NgModule({\r\n  imports: [CmsStoreModule, CmsPageTitleModule],\r\n})\r\nexport class CmsModule {\r\n  static forRoot(): ModuleWithProviders<CmsModule> {\r\n    return {\r\n      ngModule: CmsModule,\r\n      providers: [CmsService, provideDefaultConfig(defaultCmsModuleConfig)],\r\n    };\r\n  }\r\n}\r\n","import { Inject, Injectable, Optional } from '@angular/core';\r\nimport { combineLatest, Observable, of } from 'rxjs';\r\nimport { debounceTime, filter, map, switchMap } from 'rxjs/operators';\r\nimport { resolveApplicable } from '../../util/applicable';\r\nimport { Page, PageMeta } from '../model/page.model';\r\nimport { PageMetaResolver } from '../page/page-meta.resolver';\r\nimport { CmsService } from './cms.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PageMetaService {\r\n  constructor(\r\n    @Optional()\r\n    @Inject(PageMetaResolver)\r\n    protected resolvers: PageMetaResolver[],\r\n    protected cms: CmsService\r\n  ) {\r\n    this.resolvers = this.resolvers || [];\r\n  }\r\n  /**\r\n   * The list of resolver interfaces will be evaluated for the pageResolvers.\r\n   *\r\n   * TOOD: optimize browser vs SSR resolvers; image, robots and description\r\n   *       aren't needed during browsing.\r\n   * TODO: we can make the list of resolver types configurable\r\n   */\r\n  protected resolverMethods: { [key: string]: string } = {\r\n    title: 'resolveTitle',\r\n    heading: 'resolveHeading',\r\n    description: 'resolveDescription',\r\n    breadcrumbs: 'resolveBreadcrumbs',\r\n    image: 'resolveImage',\r\n    robots: 'resolveRobots',\r\n  };\r\n\r\n  getMeta(): Observable<PageMeta> {\r\n    return this.cms.getCurrentPage().pipe(\r\n      filter(Boolean),\r\n      switchMap((page: Page) => {\r\n        const metaResolver = this.getMetaResolver(page);\r\n\r\n        if (metaResolver) {\r\n          return this.resolve(metaResolver);\r\n        } else {\r\n          // we do not have a page resolver\r\n          return of(null);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If a `PageResolver` has implemented a resolver interface, the resolved data\r\n   * is merged into the `PageMeta` object.\r\n   * @param metaResolver\r\n   */\r\n  protected resolve(metaResolver: PageMetaResolver): Observable<PageMeta> {\r\n    const resolveMethods: Observable<PageMeta>[] = Object.keys(\r\n      this.resolverMethods\r\n    )\r\n      .filter((key) => metaResolver[this.resolverMethods[key]])\r\n      .map((key) =>\r\n        metaResolver[this.resolverMethods[key]]().pipe(\r\n          map((data) => ({\r\n            [key]: data,\r\n          }))\r\n        )\r\n      );\r\n\r\n    return combineLatest(resolveMethods).pipe(\r\n      debounceTime(0), // avoid partial data emissions when all methods resolve at the same time\r\n      map((data) => Object.assign({}, ...data))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the resolver with the best match, based on a score\r\n   * generated by the resolver.\r\n   *\r\n   * Resolvers match by default on `PageType` and `page.template`.\r\n   */\r\n  protected getMetaResolver(page: Page): PageMetaResolver {\r\n    return resolveApplicable(this.resolvers, [page], [page]);\r\n  }\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { combineLatest } from 'rxjs';\r\nimport { filter, take, takeWhile } from 'rxjs/operators';\r\nimport { CmsService } from '../../cms/facade/cms.service';\r\nimport { Page } from '../../cms/model/page.model';\r\nimport { PageType } from '../../model/cms.model';\r\nimport { RoutingService } from '../../routing/facade/routing.service';\r\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\r\nimport { WindowRef } from '../../window/window-ref';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SmartEditService {\r\n  private _cmsTicketId: string;\r\n  private isPreviewPage = false;\r\n  private _currentPageId: string;\r\n  private _launchedInSmartEdit = false;\r\n\r\n  private defaultPreviewProductCode: string;\r\n  private defaultPreviewCategoryCode: string;\r\n\r\n  constructor(\r\n    protected cmsService: CmsService,\r\n    protected routingService: RoutingService,\r\n    protected baseSiteService: BaseSiteService,\r\n    protected zone: NgZone,\r\n    protected winRef: WindowRef\r\n  ) {\r\n    this.getCmsTicket();\r\n\r\n    if (winRef.nativeWindow) {\r\n      const window = winRef.nativeWindow as any;\r\n      // rerender components and slots after editing\r\n      window.smartedit = window.smartedit || {};\r\n      window.smartedit.renderComponent = (\r\n        componentId,\r\n        componentType,\r\n        parentId\r\n      ) => {\r\n        return this.renderComponent(componentId, componentType, parentId);\r\n      };\r\n\r\n      // reprocess page\r\n      window.smartedit.reprocessPage = this.reprocessPage;\r\n    }\r\n  }\r\n\r\n  get cmsTicketId(): string {\r\n    return this._cmsTicketId;\r\n  }\r\n\r\n  protected getCmsTicket() {\r\n    combineLatest([\r\n      this.cmsService.getCurrentPage(),\r\n      this.routingService.getRouterState(),\r\n    ])\r\n      .pipe(\r\n        takeWhile(([cmsPage]) => cmsPage === undefined),\r\n        filter(([, routerState]) => {\r\n          if (routerState.nextState && !this._cmsTicketId) {\r\n            this._cmsTicketId =\r\n              routerState.nextState.queryParams['cmsTicketId'];\r\n            if (this._cmsTicketId) {\r\n              return true;\r\n            }\r\n          }\r\n          return false;\r\n        }),\r\n        take(1)\r\n      )\r\n      .subscribe(() => {\r\n        this._launchedInSmartEdit = true;\r\n        this.getDefaultPreviewCode();\r\n      });\r\n  }\r\n\r\n  protected getDefaultPreviewCode() {\r\n    this.baseSiteService\r\n      .getBaseSiteData()\r\n      .pipe(\r\n        filter((site) => Object.keys(site).length !== 0),\r\n        take(1)\r\n      )\r\n      .subscribe((site) => {\r\n        this.defaultPreviewCategoryCode = site.defaultPreviewCategoryCode;\r\n        this.defaultPreviewProductCode = site.defaultPreviewProductCode;\r\n\r\n        this.addPageContract();\r\n      });\r\n  }\r\n\r\n  protected addPageContract() {\r\n    this.cmsService.getCurrentPage().subscribe((cmsPage) => {\r\n      if (cmsPage && this._cmsTicketId) {\r\n        this._currentPageId = cmsPage.pageId;\r\n\r\n        // before adding contract to page, we need redirect to that page\r\n        this.goToPreviewPage(cmsPage);\r\n\r\n        // remove old page contract\r\n        const previousContract = [];\r\n        Array.from(this.winRef.document.body.classList).forEach((attr) =>\r\n          previousContract.push(attr)\r\n        );\r\n        previousContract.forEach((attr) =>\r\n          this.winRef.document.body.classList.remove(attr)\r\n        );\r\n\r\n        // add new page contract\r\n        if (cmsPage.properties && cmsPage.properties.smartedit) {\r\n          const seClasses = cmsPage.properties.smartedit.classes.split(' ');\r\n          seClasses.forEach((classItem) => {\r\n            this.winRef.document.body.classList.add(classItem);\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  protected goToPreviewPage(cmsPage: Page) {\r\n    // only the first page is the smartedit preview page\r\n    if (!this.isPreviewPage) {\r\n      this.isPreviewPage = true;\r\n      if (\r\n        cmsPage.type === PageType.PRODUCT_PAGE &&\r\n        this.defaultPreviewProductCode\r\n      ) {\r\n        this.routingService.go({\r\n          cxRoute: 'product',\r\n          params: { code: this.defaultPreviewProductCode, name: '' },\r\n        });\r\n      } else if (\r\n        cmsPage.type === PageType.CATEGORY_PAGE &&\r\n        this.defaultPreviewCategoryCode\r\n      ) {\r\n        this.routingService.go({\r\n          cxRoute: 'category',\r\n          params: { code: this.defaultPreviewCategoryCode },\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  protected renderComponent(\r\n    componentId: string,\r\n    componentType?: string,\r\n    parentId?: string\r\n  ): boolean {\r\n    if (componentId) {\r\n      this.zone.run(() => {\r\n        // without parentId, it is slot\r\n        if (!parentId) {\r\n          if (this._currentPageId) {\r\n            this.cmsService.refreshPageById(this._currentPageId);\r\n          } else {\r\n            this.cmsService.refreshLatestPage();\r\n          }\r\n        } else if (componentType) {\r\n          this.cmsService.refreshComponent(componentId);\r\n        }\r\n      });\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected reprocessPage() {\r\n    // TODO: reprocess page API\r\n  }\r\n\r\n  /**\r\n   * Whether the app launched in smart edit\r\n   */\r\n  isLaunchedInSmartEdit(): boolean {\r\n    return this._launchedInSmartEdit;\r\n  }\r\n}\r\n","import { Injectable, Renderer2 } from '@angular/core';\r\nimport { SmartEditService } from '../../smart-edit/services/smart-edit.service';\r\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\r\nimport { ContentSlotData } from '../model/content-slot-data.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DynamicAttributeService {\r\n  constructor(protected smartEditService: SmartEditService) {}\r\n\r\n  /**\r\n   * Add dynamic attributes to DOM. These attributes are extracted from the properties of cms items received from backend.\r\n   * There can by many different groups of properties, one of them is smartedit. But EC allows addons to create different groups.\r\n   * For example, personalization may add 'script' group etc.\r\n   * @param element: slot or cms component element\r\n   * @param renderer\r\n   * @param cmsRenderingContext: an object containing properties in each cms item response data\r\n   */\r\n  addDynamicAttributes(\r\n    element: Element,\r\n    renderer: Renderer2,\r\n    cmsRenderingContext: {\r\n      componentData?: ContentSlotComponentData;\r\n      slotData?: ContentSlotData;\r\n    }\r\n  ): void {\r\n    const properties =\r\n      cmsRenderingContext.componentData?.properties ||\r\n      cmsRenderingContext.slotData?.properties;\r\n\r\n    if (properties && this.smartEditService.isLaunchedInSmartEdit()) {\r\n      // check each group of properties, e.g. smartedit\r\n      Object.keys(properties).forEach((group) => {\r\n        const name = 'data-' + group + '-';\r\n        const groupProps = properties[group];\r\n\r\n        // check each property in the group\r\n        Object.keys(groupProps).forEach((propName) => {\r\n          const propValue = groupProps[propName];\r\n          if (propName === 'classes') {\r\n            const classes = propValue.split(' ');\r\n            classes.forEach((classItem) => {\r\n              element.classList.add(classItem);\r\n            });\r\n          } else {\r\n            renderer.setAttribute(\r\n              element,\r\n              name +\r\n                propName\r\n                  .split(/(?=[A-Z])/)\r\n                  .join('-')\r\n                  .toLowerCase(),\r\n              propValue\r\n            );\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class FeaturesConfig {\r\n  features?: {\r\n    [featureToggle: string]: string | boolean;\r\n  };\r\n}\r\n","import { FeaturesConfig } from '../config/features-config';\n\nfunction isFeatureConfig(config: any): config is FeaturesConfig {\n  return typeof config === 'object' && config.features;\n}\n\nfunction isInLevel(level, version) {\n  if (level === '*') {\n    return true;\n  }\n  const levelParts = level.split('.');\n  const versionParts = version.split('.');\n\n  for (let i = 0; i < versionParts.length; i++) {\n    const versionNumberPart = Number(versionParts[i]);\n    const levelNumberPart = Number(levelParts[i]) || 0;\n\n    if (versionNumberPart !== levelNumberPart) {\n      return levelNumberPart > versionNumberPart;\n    }\n  }\n  return true;\n}\n\nexport function isFeatureLevel(config: unknown, level: string): boolean {\n  if (isFeatureConfig(config)) {\n    return level[0] === '!'\n      ? !isInLevel(config.features.level, level.substr(1, level.length))\n      : isInLevel(config.features.level, level);\n  }\n}\n\nexport function isFeatureEnabled(config: unknown, feature: string): boolean {\n  if (isFeatureConfig(config)) {\n    const featureConfig =\n      feature[0] === '!'\n        ? config.features[feature.substr(1, feature.length)]\n        : config.features[feature];\n\n    const result =\n      typeof featureConfig === 'string'\n        ? isFeatureLevel(config, featureConfig)\n        : featureConfig;\n\n    return feature[0] === '!' ? !result : result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { FeaturesConfig } from '../config/features-config';\nimport {\n  isFeatureEnabled,\n  isFeatureLevel,\n} from '../utils/feature-config-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureConfigService {\n  constructor(protected config: FeaturesConfig) {}\n\n  isLevel(version: string): boolean {\n    return isFeatureLevel(this.config, version);\n  }\n\n  isEnabled(feature: string) {\n    return isFeatureEnabled(this.config, feature);\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeatureLevel]',\n})\nexport class FeatureLevelDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeatureLevel(level: string | number) {\n    if (this.featureConfig.isLevel(level.toString()) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isLevel(level.toString()) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeature]',\n})\nexport class FeatureDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeature(feature: string) {\n    if (this.featureConfig.isEnabled(feature) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isEnabled(feature) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { FeaturesConfig } from './config/features-config';\r\nimport { provideDefaultConfig } from '../config/config.module';\r\nimport { FeatureLevelDirective } from './directives/feature-level.directive';\r\nimport { FeatureDirective } from './directives/feature.directive';\r\n\r\n@NgModule({\r\n  declarations: [FeatureLevelDirective, FeatureDirective],\r\n  exports: [FeatureLevelDirective, FeatureDirective],\r\n})\r\nexport class FeaturesConfigModule {\r\n  static forRoot(\r\n    defaultLevel?: string\r\n  ): ModuleWithProviders<FeaturesConfigModule> {\r\n    return {\r\n      ngModule: FeaturesConfigModule,\r\n      providers: [\r\n        provideDefaultConfig(<FeaturesConfig>{\r\n          features: {\r\n            level: defaultLevel || '*',\r\n          },\r\n        }),\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { isDevMode, Pipe, PipeTransform } from '@angular/core';\r\nimport { DatePipe, getLocaleId } from '@angular/common';\r\nimport { LanguageService } from '../site-context/facade/language.service';\r\n\r\n// type CxDatePipe, not DatePipe, due to conflict with Angular's DatePipe - problem occurs for the backward compatibility compiler of Ivy\r\n@Pipe({ name: 'cxDate' })\r\nexport class CxDatePipe extends DatePipe implements PipeTransform {\r\n  constructor(protected language: LanguageService) {\r\n    super(null);\r\n  }\r\n\r\n  transform(value: any, format?: string, timezone?: string): string | null {\r\n    return super.transform(value, format, timezone, this.getLang());\r\n  }\r\n\r\n  private getLang() {\r\n    const lang = this.getActiveLang();\r\n    try {\r\n      getLocaleId(lang);\r\n      return lang;\r\n    } catch {\r\n      this.reportMissingLocaleData(lang);\r\n      return 'en';\r\n    }\r\n  }\r\n\r\n  private getActiveLang(): string {\r\n    let result;\r\n    this.language\r\n      .getActive()\r\n      .subscribe((lang) => (result = lang))\r\n      .unsubscribe();\r\n    return result;\r\n  }\r\n\r\n  private reportMissingLocaleData(lang: string) {\r\n    if (isDevMode()) {\r\n      console.warn(\r\n        `cxDate pipe: No locale data registered for '${lang}' (see https://angular.io/api/common/registerLocaleData).`\r\n      );\r\n    }\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectorRef,\r\n  OnDestroy,\r\n  Pipe,\r\n  PipeTransform,\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { TranslationService } from './translation.service';\r\nimport { shallowEqualObjects } from '../util/compare-equal-objects';\r\nimport { Translatable, TranslatableParams } from './translatable';\r\n\r\n@Pipe({ name: 'cxTranslate', pure: false })\r\nexport class TranslatePipe implements PipeTransform, OnDestroy {\r\n  private lastKey: string;\r\n  private lastOptions: object;\r\n  private translatedValue: string;\r\n  private sub: Subscription;\r\n\r\n  constructor(\r\n    protected service: TranslationService,\r\n    protected cd: ChangeDetectorRef\r\n  ) {}\r\n\r\n  transform(\r\n    input: Translatable | string,\r\n    options: TranslatableParams = {}\r\n  ): string {\r\n    if ((input as Translatable).raw) {\r\n      return (input as Translatable).raw;\r\n    }\r\n\r\n    const key = typeof input === 'string' ? input : input.key;\r\n    if (typeof input !== 'string') {\r\n      options = { ...options, ...input.params };\r\n    }\r\n\r\n    this.translate(key, options);\r\n    return this.translatedValue;\r\n  }\r\n\r\n  private translate(key: any, options: object) {\r\n    if (\r\n      key !== this.lastKey ||\r\n      !shallowEqualObjects(options, this.lastOptions)\r\n    ) {\r\n      this.lastKey = key;\r\n      this.lastOptions = options;\r\n\r\n      if (this.sub) {\r\n        this.sub.unsubscribe();\r\n      }\r\n      this.sub = this.service\r\n        .translate(key, options, true)\r\n        .subscribe((val) => this.markForCheck(val));\r\n    }\r\n  }\r\n\r\n  private markForCheck(value: string) {\r\n    this.translatedValue = value;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.sub) {\r\n      this.sub.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import { TranslationResources } from '../translation-resources';\r\nimport { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class I18nConfig {\r\n  i18n?: {\r\n    /**\r\n     * When there are missing translation resources for the active language, the fallback language will be used.\r\n     */\r\n    fallbackLang?: string | false;\r\n\r\n    /**\r\n     * Configuration for lazy loading of translation files.\r\n     * For eager loading of translations please use config option `i18n.resources`\r\n     */\r\n\r\n    backend?: {\r\n      /**\r\n       * The path to JSON translations. It should contain placeholders:\r\n       * - `{{lng}}` for language\r\n       * - `{{ns}}` for the name of chunk.\r\n       *\r\n       * Example:\r\n       * `assets/i18n-assets/{{lng}}/{{ns}}.json`\r\n       */\r\n\r\n      loadPath?: string;\r\n    };\r\n\r\n    /**\r\n     * Reference to translation resources that are eagerly bundled with JS app.\r\n     * For lazy loading of translations please use config option `i18n.backend` instead.\r\n     */\r\n    resources?: TranslationResources;\r\n\r\n    /**\r\n     * Logs i18n events (like loading translation resources) to the console. Don't use in production!\r\n     */\r\n    debug?: boolean;\r\n\r\n    /**\r\n     * Mapping that assigns keys' namespaces to specific chunks. The main purpose of chunks is to lazy load them.\r\n     */\r\n    chunks?: {\r\n      [chunk: string]: string[];\r\n    };\r\n  };\r\n}\r\n","import { Injectable, isDevMode } from '@angular/core';\r\nimport { I18nConfig } from './config/i18n-config';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TranslationChunkService {\r\n  protected duplicates: { [key: string]: string[] } = {};\r\n  protected chunks: { [key: string]: string } = {};\r\n  constructor(protected config: I18nConfig) {\r\n    const chunks = (config.i18n && config.i18n.chunks) || {};\r\n    Object.keys(chunks).forEach((chunk) => {\r\n      chunks[chunk].forEach((key) => {\r\n        if (this.chunks.hasOwnProperty(key)) {\r\n          if (!this.duplicates[key]) {\r\n            this.duplicates[key] = [this.chunks[key]];\r\n          }\r\n          this.duplicates[key].push(chunk);\r\n        } else {\r\n          this.chunks[key] = chunk;\r\n        }\r\n      });\r\n    });\r\n    if (Object.keys(this.duplicates).length > 0 && isDevMode()) {\r\n      this.warnDuplicates(this.duplicates);\r\n    }\r\n  }\r\n\r\n  protected readonly KEY_SEPARATOR = '.';\r\n\r\n  getChunkNameForKey(key: string): string {\r\n    const mainKey = (key || '').split(this.KEY_SEPARATOR)[0];\r\n    const chunk = this.chunks && this.chunks[mainKey];\r\n\r\n    if (!chunk) {\r\n      return mainKey; // fallback to main key as a chunk\r\n    }\r\n    return chunk;\r\n  }\r\n\r\n  private warnDuplicates(items: { [key: string]: string[] }): void {\r\n    const dupes: string[] = [];\r\n    Object.keys(items).forEach((key) => {\r\n      dupes.push(\r\n        `* '${key}' found in chunks: ${items[key].join(', ')}. Used '${\r\n          this.chunks[key]\r\n        }.${key}'.`\r\n      );\r\n    });\r\n    console.warn(\r\n      `Duplicated keys has been found in the config of i18n chunks:\\n${dupes.join(\r\n        '\\n'\r\n      )}`\r\n    );\r\n  }\r\n}\r\n","import { I18nConfig } from './i18n-config';\n\nexport const defaultI18nConfig: I18nConfig = {\n  i18n: {\n    fallbackLang: false,\n    debug: false,\n  },\n};\n","import { HttpClient } from '@angular/common/http';\r\nimport i18next, { InitOptions } from 'i18next';\r\nimport i18nextXhrBackend from 'i18next-xhr-backend';\r\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\r\nimport { LanguageService } from '../../site-context/facade/language.service';\r\nimport { TranslationResources } from '../translation-resources';\r\n\r\nexport function i18nextInit(\r\n  configInit: ConfigInitializerService,\r\n  languageService: LanguageService,\r\n  httpClient: HttpClient,\r\n  serverRequestOrigin: string\r\n): () => Promise<any> {\r\n  return () =>\r\n    configInit.getStableConfig('i18n').then((config) => {\r\n      let i18nextConfig: InitOptions = {\r\n        ns: [], // don't preload any namespaces\r\n        fallbackLng: config.i18n.fallbackLang,\r\n        debug: config.i18n.debug,\r\n        interpolation: {\r\n          escapeValue: false,\r\n        },\r\n      };\r\n      if (config.i18n.backend) {\r\n        i18next.use(i18nextXhrBackend);\r\n        const loadPath = getLoadPath(\r\n          config.i18n.backend.loadPath,\r\n          serverRequestOrigin\r\n        );\r\n        const backend = {\r\n          loadPath,\r\n          ajax: i18nextGetHttpClient(httpClient),\r\n        };\r\n        i18nextConfig = { ...i18nextConfig, backend };\r\n      }\r\n\r\n      return i18next.init(i18nextConfig, () => {\r\n        // Don't use i18next's 'resources' config key for adding static translations,\r\n        // because it will disable loading chunks from backend. We add resources here, in the init's callback.\r\n        i18nextAddTranslations(config.i18n.resources);\r\n        syncI18nextWithSiteContext(languageService);\r\n      });\r\n    });\r\n}\r\n\r\nexport function i18nextAddTranslations(resources: TranslationResources = {}) {\r\n  Object.keys(resources).forEach((lang) => {\r\n    Object.keys(resources[lang]).forEach((chunkName) => {\r\n      i18next.addResourceBundle(\r\n        lang,\r\n        chunkName,\r\n        resources[lang][chunkName],\r\n        true,\r\n        true\r\n      );\r\n    });\r\n  });\r\n}\r\n\r\nexport function syncI18nextWithSiteContext(language: LanguageService) {\r\n  // always update language of i18next on site context (language) change\r\n  language.getActive().subscribe((lang) => i18next.changeLanguage(lang));\r\n}\r\n\r\n/**\r\n * Returns a function appropriate for i18next to make http calls for JSON files.\r\n * See docs for `i18next-xhr-backend`: https://github.com/i18next/i18next-xhr-backend#backend-options\r\n *\r\n * It uses Angular HttpClient under the hood, so it works in SSR.\r\n * @param httpClient Angular http client\r\n */\r\nexport function i18nextGetHttpClient(\r\n  httpClient: HttpClient\r\n): (url: string, options: object, callback: Function, data: object) => void {\r\n  return (url: string, _options: object, callback: Function, _data: object) => {\r\n    httpClient.get(url, { responseType: 'text' }).subscribe(\r\n      (data) => callback(data, { status: 200 }),\r\n      (error) => callback(null, { status: error.status })\r\n    );\r\n  };\r\n}\r\n\r\n/**\r\n * Resolves the relative path to the absolute one in SSR, using the server request's origin.\r\n * It's needed, because Angular Universal doesn't support relative URLs in HttpClient. See Angular issues:\r\n * - https://github.com/angular/angular/issues/19224\r\n * - https://github.com/angular/universal/issues/858\r\n */\r\nexport function getLoadPath(path: string, serverRequestOrigin: string): string {\r\n  if (!path) {\r\n    return undefined;\r\n  }\r\n  if (serverRequestOrigin && !path.match(/^http(s)?:\\/\\//)) {\r\n    if (path.startsWith('/')) {\r\n      path = path.slice(1);\r\n    }\r\n    if (path.startsWith('./')) {\r\n      path = path.slice(2);\r\n    }\r\n    const result = `${serverRequestOrigin}/${path}`;\r\n    return result;\r\n  }\r\n  return path;\r\n}\r\n","import { HttpClient } from '@angular/common/http';\nimport { APP_INITIALIZER, Optional, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { SERVER_REQUEST_ORIGIN } from '../../ssr/ssr.providers';\nimport { i18nextInit } from './i18next-init';\n\nexport const i18nextProviders: Provider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: i18nextInit,\n    deps: [\n      ConfigInitializerService,\n      LanguageService,\n      HttpClient,\n      [new Optional(), SERVER_REQUEST_ORIGIN],\n    ],\n    multi: true,\n  },\n];\n","import { Injectable, isDevMode } from '@angular/core';\r\nimport i18next from 'i18next';\r\nimport { Observable } from 'rxjs';\r\nimport { I18nConfig } from '../config/i18n-config';\r\nimport { TranslationChunkService } from '../translation-chunk.service';\r\nimport { TranslationService } from '../translation.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class I18nextTranslationService implements TranslationService {\r\n  private readonly NON_BREAKING_SPACE = String.fromCharCode(160);\r\n  protected readonly NAMESPACE_SEPARATOR = ':';\r\n\r\n  constructor(\r\n    protected config: I18nConfig,\r\n    protected translationChunk: TranslationChunkService\r\n  ) {}\r\n\r\n  translate(\r\n    key: string,\r\n    options: any = {},\r\n    whitespaceUntilLoaded: boolean = false\r\n  ): Observable<string> {\r\n    // If we've already loaded the chunk (or failed to load), we should immediately emit the value\r\n    // (or the fallback value in case the key is missing).\r\n\r\n    // Moreover, we SHOULD emit a value (or a fallback value) synchronously (not in a promise/setTimeout).\r\n    // Otherwise, we the will trigger additional deferred change detection in a view that consumes the returned observable,\r\n    // which together with `switchMap` operator may lead to an infinite loop.\r\n\r\n    const chunkName = this.translationChunk.getChunkNameForKey(key);\r\n    const namespacedKey = this.getNamespacedKey(key, chunkName);\r\n\r\n    return new Observable<string>((subscriber) => {\r\n      const translate = () => {\r\n        if (!i18next.isInitialized) {\r\n          return;\r\n        }\r\n        if (i18next.exists(namespacedKey, options)) {\r\n          subscriber.next(i18next.t(namespacedKey, options));\r\n        } else {\r\n          if (whitespaceUntilLoaded) {\r\n            subscriber.next(this.NON_BREAKING_SPACE);\r\n          }\r\n          i18next.loadNamespaces(chunkName, () => {\r\n            if (!i18next.exists(namespacedKey, options)) {\r\n              this.reportMissingKey(key, chunkName);\r\n              subscriber.next(this.getFallbackValue(namespacedKey));\r\n            } else {\r\n              subscriber.next(i18next.t(namespacedKey, options));\r\n            }\r\n          });\r\n        }\r\n      };\r\n\r\n      translate();\r\n      i18next.on('languageChanged', translate);\r\n      return () => i18next.off('languageChanged', translate);\r\n    });\r\n  }\r\n\r\n  loadChunks(chunkNames: string | string[]): Promise<any> {\r\n    return i18next.loadNamespaces(chunkNames);\r\n  }\r\n\r\n  /**\r\n   * Returns a fallback value in case when the given key is missing\r\n   * @param key\r\n   */\r\n  protected getFallbackValue(key: string): string {\r\n    return isDevMode() ? `[${key}]` : this.NON_BREAKING_SPACE;\r\n  }\r\n\r\n  private reportMissingKey(key: string, chunkName: string) {\r\n    if (isDevMode()) {\r\n      console.warn(\r\n        `Translation key missing '${key}' in the chunk '${chunkName}'`\r\n      );\r\n    }\r\n  }\r\n\r\n  private getNamespacedKey(key: string, chunk: string): string {\r\n    return chunk + this.NAMESPACE_SEPARATOR + key;\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '../config/config.module';\r\nimport { defaultI18nConfig } from './config/default-i18n-config';\r\nimport { CxDatePipe } from './date.pipe';\r\nimport { i18nextProviders } from './i18next/i18next-providers';\r\nimport { I18nextTranslationService } from './i18next/i18next-translation.service';\r\nimport { TranslatePipe } from './translate.pipe';\r\nimport { TranslationService } from './translation.service';\r\n\r\n@NgModule({\r\n  declarations: [TranslatePipe, CxDatePipe],\r\n  exports: [TranslatePipe, CxDatePipe],\r\n})\r\nexport class I18nModule {\r\n  static forRoot(): ModuleWithProviders<I18nModule> {\r\n    return {\r\n      ngModule: I18nModule,\r\n      providers: [\r\n        provideDefaultConfig(defaultI18nConfig),\r\n        { provide: TranslationService, useExisting: I18nextTranslationService },\r\n        ...i18nextProviders,\r\n      ],\r\n    };\r\n  }\r\n}\r\n","export function mockTranslate(key: string, options: any = {}) {\r\n  const optionsString = Object.keys(options)\r\n    .sort()\r\n    .map((optionName) => `${optionName}:${options[optionName]}`)\r\n    .join(' ');\r\n  return optionsString ? `${key} ${optionsString}` : key;\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { mockTranslate } from './mock-translate';\nimport { Translatable } from '../translatable';\n\n@Pipe({ name: 'cxTranslate' })\nexport class MockTranslatePipe implements PipeTransform {\n  transform(input: Translatable | string, options: object = {}): string {\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n    return mockTranslate(key, options);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { TranslationService } from '../translation.service';\r\nimport { mockTranslate } from './mock-translate';\r\n\r\n@Injectable()\r\nexport class MockTranslationService implements TranslationService {\r\n  translate(\r\n    key: string,\r\n    options: any = {},\r\n    _whitespaceUntilLoaded: boolean = false\r\n  ): Observable<string> {\r\n    return new Observable<string>((subscriber) => {\r\n      const value = mockTranslate(key, options);\r\n      subscriber.next(value);\r\n      subscriber.complete();\r\n    });\r\n  }\r\n\r\n  loadChunks(_chunks: string | string[]): Promise<any> {\r\n    return Promise.resolve();\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\n@Pipe({ name: 'cxDate' })\nexport class MockDatePipe extends DatePipe implements PipeTransform {\n  transform(value: any, format?: string, timezone?: string): string {\n    return super.transform(value, format, timezone, 'en');\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { MockTranslatePipe } from './mock-translate.pipe';\nimport { TranslationService } from '../translation.service';\nimport { MockTranslationService } from './mock-translation.service';\nimport { MockDatePipe } from './mock-date.pipe';\n\n@NgModule({\n  declarations: [MockTranslatePipe, MockDatePipe],\n  exports: [MockTranslatePipe, MockDatePipe],\n  providers: [\n    { provide: TranslationService, useClass: MockTranslationService },\n  ],\n})\nexport class I18nTestingModule {}\n","import { OccConfig } from '../../occ/config/occ-config';\r\nimport { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class KymaConfig extends OccConfig {\r\n  authentication?: {\r\n    kyma_client_id?: string;\r\n    kyma_client_secret?: string;\r\n  };\r\n}\r\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\n\nexport const KYMA_FEATURE = 'kyma';\nexport const OPEN_ID_TOKEN_DATA = '[Kyma Auth] Open ID Token Data';\n\nexport interface StateWithKyma {\n  [KYMA_FEATURE]: KymaState;\n}\n\nexport interface KymaState {\n  openIdToken: LoaderState<OpenIdToken>;\n}\n","import { StateUtils } from '../../../state/utils/index';\r\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\r\nimport { OPEN_ID_TOKEN_DATA } from '../kyma-state';\r\n\r\nexport const LOAD_OPEN_ID_TOKEN = '[Kyma] Load Open ID Token';\r\nexport const LOAD_OPEN_ID_TOKEN_FAIL = '[Kyma] Load Open ID Token Fail';\r\nexport const LOAD_OPEN_ID_TOKEN_SUCCESS = '[Kyma] Load Open ID Token Success';\r\n\r\nexport class LoadOpenIdToken extends StateUtils.LoaderLoadAction {\r\n  readonly type = LOAD_OPEN_ID_TOKEN;\r\n  constructor(public payload: { username: string; password: string }) {\r\n    super(OPEN_ID_TOKEN_DATA);\r\n  }\r\n}\r\n\r\nexport class LoadOpenIdTokenFail extends StateUtils.LoaderFailAction {\r\n  readonly type = LOAD_OPEN_ID_TOKEN_FAIL;\r\n  constructor(public payload: any) {\r\n    super(OPEN_ID_TOKEN_DATA, payload);\r\n  }\r\n}\r\n\r\nexport class LoadOpenIdTokenSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = LOAD_OPEN_ID_TOKEN_SUCCESS;\r\n  constructor(public payload: OpenIdToken) {\r\n    super(OPEN_ID_TOKEN_DATA);\r\n  }\r\n}\r\n\r\nexport type OpenIdTokenActions =\r\n  | LoadOpenIdToken\r\n  | LoadOpenIdTokenFail\r\n  | LoadOpenIdTokenSuccess;\r\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { KymaState, KYMA_FEATURE, StateWithKyma } from '../kyma-state';\n\nexport const getKymaState: MemoizedSelector<\n  StateWithKyma,\n  KymaState\n> = createFeatureSelector<KymaState>(KYMA_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\r\nimport { StateWithKyma } from '../kyma-state';\r\nimport { getKymaState } from './feature.selector';\r\n\r\nexport const getOpenIdTokenState: MemoizedSelector<\r\n  StateWithKyma,\r\n  LoaderState<OpenIdToken>\r\n> = createSelector(getKymaState, (state) => state.openIdToken);\r\n\r\nexport const getOpenIdTokenValue: MemoizedSelector<\r\n  StateWithKyma,\r\n  OpenIdToken\r\n> = createSelector(getOpenIdTokenState, StateUtils.loaderValueSelector);\r\n\r\nexport const getOpenIdTokenLoading: MemoizedSelector<\r\n  StateWithKyma,\r\n  boolean\r\n> = createSelector(getOpenIdTokenState, StateUtils.loaderLoadingSelector);\r\n\r\nexport const getOpenIdTokenSuccess: MemoizedSelector<\r\n  StateWithKyma,\r\n  boolean\r\n> = createSelector(getOpenIdTokenState, StateUtils.loaderSuccessSelector);\r\n\r\nexport const getOpenIdTokenError: MemoizedSelector<\r\n  StateWithKyma,\r\n  boolean\r\n> = createSelector(getOpenIdTokenState, StateUtils.loaderErrorSelector);\r\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\nimport { KymaActions } from '../store/actions/index';\nimport { StateWithKyma } from '../store/kyma-state';\nimport { KymaSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KymaService {\n  constructor(protected store: Store<StateWithKyma>) {}\n\n  /**\n   * Authorizes using the Kyma OAuth client with scope `openid`.\n   *\n   * @param username a username\n   * @param password a password\n   */\n  authorizeOpenId(username: string, password: string): void {\n    this.store.dispatch(\n      new KymaActions.LoadOpenIdToken({ username, password })\n    );\n  }\n\n  /**\n   * Returns the `OpenIdToken`, which was previously retrieved using `authorizeOpenId` method.\n   */\n  getOpenIdToken(): Observable<OpenIdToken> {\n    return this.store.pipe(select(KymaSelectors.getOpenIdTokenValue));\n  }\n}\n","import { KymaConfig } from './kyma-config';\r\n\r\nexport const defaultKymaConfig: KymaConfig = {\r\n  authentication: {\r\n    kyma_client_id: 'client4kyma',\r\n    kyma_client_secret: 'secret',\r\n  },\r\n};\r\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { KymaConfig } from '../../config/kyma-config';\r\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\r\n\r\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OpenIdAuthenticationTokenService {\r\n  constructor(private config: KymaConfig, private http: HttpClient) {}\r\n\r\n  loadOpenIdAuthenticationToken(\r\n    username: string,\r\n    password: string\r\n  ): Observable<OpenIdToken> {\r\n    const url = this.getOAuthEndpoint();\r\n    const params = new HttpParams()\r\n      .set(\r\n        'client_id',\r\n        encodeURIComponent(this.config.authentication.kyma_client_id)\r\n      )\r\n      .set(\r\n        'client_secret',\r\n        encodeURIComponent(this.config.authentication.kyma_client_secret)\r\n      )\r\n      .set('grant_type', 'password') // authorization_code, client_credentials, password\r\n      .set('username', username)\r\n      .set('password', password)\r\n      .set('scope', 'openid');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    });\r\n\r\n    return this.http\r\n      .post<OpenIdToken>(url, params, { headers })\r\n      .pipe(catchError((error) => throwError(error)));\r\n  }\r\n\r\n  private getOAuthEndpoint(): string {\r\n    return (this.config.backend.occ.baseUrl || '') + OAUTH_ENDPOINT;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, exhaustMap, map, withLatestFrom } from 'rxjs/operators';\r\nimport { AuthActions } from '../../../auth/store/actions/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { OpenIdAuthenticationTokenService } from '../../services/open-id-token/open-id-token.service';\r\nimport { KymaActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class OpenIdTokenEffect {\r\n  @Effect()\r\n  triggerOpenIdTokenLoading$: Observable<\r\n    KymaActions.LoadOpenIdToken\r\n  > = this.actions$.pipe(\r\n    ofType<KymaActions.LoadOpenIdTokenSuccess>(\r\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\r\n    ),\r\n    withLatestFrom(\r\n      this.actions$.pipe(\r\n        ofType<AuthActions.LoadUserToken>(AuthActions.LOAD_USER_TOKEN)\r\n      )\r\n    ),\r\n    map(\r\n      ([, loginAction]) =>\r\n        new KymaActions.LoadOpenIdToken({\r\n          username: loginAction.payload.userId,\r\n          password: loginAction.payload.password,\r\n        })\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  loadOpenIdToken$: Observable<\r\n    KymaActions.OpenIdTokenActions\r\n  > = this.actions$.pipe(\r\n    ofType(KymaActions.LOAD_OPEN_ID_TOKEN),\r\n    map((action: KymaActions.LoadOpenIdToken) => action.payload),\r\n    exhaustMap((payload) =>\r\n      this.openIdTokenService\r\n        .loadOpenIdAuthenticationToken(payload.username, payload.password)\r\n        .pipe(\r\n          map((token) => new KymaActions.LoadOpenIdTokenSuccess(token)),\r\n          catchError((error) =>\r\n            of(\r\n              new KymaActions.LoadOpenIdTokenFail(makeErrorSerializable(error))\r\n            )\r\n          )\r\n        )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private openIdTokenService: OpenIdAuthenticationTokenService\r\n  ) {}\r\n}\r\n","import { OpenIdTokenEffect } from './open-id-token.effect';\n\nexport const effects: any[] = [OpenIdTokenEffect];\n\nexport * from './open-id-token.effect';\n","import { InjectionToken, Provider } from '@angular/core';\r\nimport {\r\n  Action,\r\n  ActionReducer,\r\n  ActionReducerMap,\r\n  MetaReducer,\r\n} from '@ngrx/store';\r\nimport { AuthActions } from '../../../auth/store/actions/index';\r\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\r\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\r\nimport { KymaState, OPEN_ID_TOKEN_DATA } from '../kyma-state';\r\n\r\nexport function getReducers(): ActionReducerMap<KymaState> {\r\n  return {\r\n    openIdToken: loaderReducer<OpenIdToken>(OPEN_ID_TOKEN_DATA),\r\n  };\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducerMap<\r\n  KymaState\r\n>> = new InjectionToken<ActionReducerMap<KymaState>>('KymaReducers');\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n\r\nexport function clearKymaState(\r\n  reducer: ActionReducer<KymaState, Action>\r\n): ActionReducer<KymaState, Action> {\r\n  return function (state, action) {\r\n    if (action.type === AuthActions.LOGOUT) {\r\n      state = {\r\n        ...state,\r\n        openIdToken: undefined,\r\n      };\r\n    }\r\n    return reducer(state, action);\r\n  };\r\n}\r\n\r\nexport const metaReducers: MetaReducer<any>[] = [clearKymaState];\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { provideDefaultConfigFactory } from '../../config/config.module';\r\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\r\nimport { StateModule } from '../../state/state.module';\r\nimport { effects } from './effects/index';\r\nimport { KYMA_FEATURE } from './kyma-state';\r\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\r\n\r\nexport function kymaStoreConfigFactory(): StateConfig {\r\n  // if we want to reuse KYMA_FEATURE const in config, we have to use factory instead of plain object\r\n  const config: StateConfig = {\r\n    state: {\r\n      storageSync: {\r\n        keys: {\r\n          'kyma.openIdToken.value': StorageSyncType.LOCAL_STORAGE,\r\n        },\r\n      },\r\n    },\r\n  };\r\n  return config;\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    StateModule,\r\n    StoreModule.forFeature(KYMA_FEATURE, reducerToken, { metaReducers }),\r\n    EffectsModule.forFeature(effects),\r\n  ],\r\n  providers: [\r\n    provideDefaultConfigFactory(kymaStoreConfigFactory),\r\n    reducerProvider,\r\n  ],\r\n})\r\nexport class KymaStoreModule {}\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '../config/config.module';\r\nimport { defaultKymaConfig } from './config/default-kyma-config';\r\nimport { KymaStoreModule } from './store/kyma-store.module';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, HttpClientModule, KymaStoreModule],\r\n  providers: [provideDefaultConfig(defaultKymaConfig)],\r\n})\r\nexport class KymaModule {}\r\n","import { PersonalizationConfig } from './personalization-config';\n\nexport const defaultPersonalizationConfig: PersonalizationConfig = {\n  personalization: {\n    enabled: false,\n    httpHeaderName: {\n      id: 'Occ-Personalization-Id',\n      timestamp: 'Occ-Personalization-Time',\n    },\n    context: {\n      slotPosition: 'PlaceholderContentSlot',\n      componentId: 'PersonalizationScriptComponent',\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class PersonalizationConfig {\r\n  personalization: {\r\n    enabled?: boolean;\r\n    httpHeaderName?: {\r\n      id: string;\r\n      timestamp: string;\r\n    };\r\n    context?: {\r\n      slotPosition?: string;\r\n      componentId?: string;\r\n    };\r\n  };\r\n}\r\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpResponse,\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\r\nimport { PersonalizationConfig } from '../config/personalization-config';\r\nimport { WindowRef } from '../../window/window-ref';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\nconst PERSONALIZATION_ID_KEY = 'personalization-id';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OccPersonalizationIdInterceptor implements HttpInterceptor {\r\n  private personalizationId: string;\r\n  private requestHeader: string;\r\n  private enabled = false;\r\n\r\n  constructor(\r\n    private config: PersonalizationConfig,\r\n    private occEndpoints: OccEndpointsService,\r\n    private winRef: WindowRef,\r\n    @Inject(PLATFORM_ID) private platform: any\r\n  ) {\r\n    if (isPlatformBrowser(this.platform)) {\r\n      this.enabled =\r\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\r\n        false;\r\n\r\n      if (this.enabled) {\r\n        this.requestHeader = this.config.personalization.httpHeaderName.id.toLowerCase();\r\n        this.personalizationId = this.winRef.localStorage.getItem(\r\n          PERSONALIZATION_ID_KEY\r\n        );\r\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_ID_KEY)) {\r\n        this.winRef.localStorage.removeItem(PERSONALIZATION_ID_KEY);\r\n      }\r\n    }\r\n  }\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    if (!this.enabled) {\r\n      return next.handle(request);\r\n    }\r\n\r\n    if (\r\n      this.personalizationId &&\r\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\r\n    ) {\r\n      request = request.clone({\r\n        setHeaders: {\r\n          [this.requestHeader]: this.personalizationId,\r\n        },\r\n      });\r\n    }\r\n\r\n    return next.handle(request).pipe(\r\n      tap((event) => {\r\n        if (event instanceof HttpResponse) {\r\n          if (event.headers.keys().includes(this.requestHeader)) {\r\n            const receivedId = event.headers.get(this.requestHeader);\r\n            if (this.personalizationId !== receivedId) {\r\n              this.personalizationId = receivedId;\r\n              this.winRef.localStorage.setItem(\r\n                PERSONALIZATION_ID_KEY,\r\n                this.personalizationId\r\n              );\r\n            }\r\n          }\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpResponse,\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\r\nimport { PersonalizationConfig } from '../config/personalization-config';\r\nimport { WindowRef } from '../../window/window-ref';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\nconst PERSONALIZATION_TIME_KEY = 'personalization-time';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OccPersonalizationTimeInterceptor implements HttpInterceptor {\r\n  private timestamp: string;\r\n  private requestHeader: string;\r\n  private enabled = false;\r\n\r\n  constructor(\r\n    private config: PersonalizationConfig,\r\n    private occEndpoints: OccEndpointsService,\r\n    private winRef: WindowRef,\r\n    @Inject(PLATFORM_ID) private platform: any\r\n  ) {\r\n    if (isPlatformBrowser(this.platform)) {\r\n      this.enabled =\r\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\r\n        false;\r\n\r\n      if (this.enabled) {\r\n        this.requestHeader = this.config.personalization.httpHeaderName.timestamp.toLowerCase();\r\n        this.timestamp = this.winRef.localStorage.getItem(\r\n          PERSONALIZATION_TIME_KEY\r\n        );\r\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_TIME_KEY)) {\r\n        this.winRef.localStorage.removeItem(PERSONALIZATION_TIME_KEY);\r\n      }\r\n    }\r\n  }\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    if (!this.enabled) {\r\n      return next.handle(request);\r\n    }\r\n\r\n    if (\r\n      this.timestamp &&\r\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\r\n    ) {\r\n      request = request.clone({\r\n        setHeaders: {\r\n          [this.requestHeader]: this.timestamp,\r\n        },\r\n      });\r\n    }\r\n\r\n    return next.handle(request).pipe(\r\n      tap((event) => {\r\n        if (event instanceof HttpResponse) {\r\n          if (event.headers.keys().includes(this.requestHeader)) {\r\n            const receivedTimestamp = event.headers.get(this.requestHeader);\r\n            if (this.timestamp !== receivedTimestamp) {\r\n              this.timestamp = receivedTimestamp;\r\n              this.winRef.localStorage.setItem(\r\n                PERSONALIZATION_TIME_KEY,\r\n                this.timestamp\r\n              );\r\n            }\r\n          }\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { OccPersonalizationIdInterceptor } from './occ-personalization-id.interceptor';\nimport { OccPersonalizationTimeInterceptor } from './occ-personalization-time.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationIdInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationTimeInterceptor,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '../config/config.module';\r\nimport { defaultPersonalizationConfig } from './config/default-personalization-config';\r\n\r\nimport { interceptors } from './http-interceptors/index';\r\n\r\n@NgModule({})\r\nexport class PersonalizationModule {\r\n  static forRoot(): ModuleWithProviders<PersonalizationModule> {\r\n    return {\r\n      ngModule: PersonalizationModule,\r\n      providers: [\r\n        provideDefaultConfig(defaultPersonalizationConfig),\r\n        ...interceptors,\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { CmsService } from '../../cms/facade/cms.service';\r\nimport { ContentSlotComponentData } from '../../cms/model/content-slot-component-data.model';\r\nimport { ContentSlotData } from '../../cms/model/content-slot-data.model';\r\nimport { Page } from '../../cms/model/page.model';\r\nimport { PersonalizationConfig } from '../config/personalization-config';\r\nimport { PersonalizationContext } from '../model/personalization-context.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PersonalizationContextService {\r\n  constructor(\r\n    protected config: PersonalizationConfig,\r\n    protected cmsService: CmsService\r\n  ) {}\r\n\r\n  getPersonalizationContext(): Observable<PersonalizationContext> {\r\n    return this.cmsService.getCurrentPage().pipe(\r\n      filter(Boolean),\r\n      map(\r\n        (page: Page) =>\r\n          page.slots[this.config.personalization.context.slotPosition]\r\n      ),\r\n      filter(Boolean),\r\n      map((slot: ContentSlotData) =>\r\n        slot.components.find(\r\n          (i) => i.uid === this.config.personalization.context.componentId\r\n        )\r\n      ),\r\n      filter(Boolean),\r\n      map((component: ContentSlotComponentData) =>\r\n        this.buildPersonalizationContext(component.properties.script.data)\r\n      )\r\n    );\r\n  }\r\n\r\n  private buildPersonalizationContext(data: string): PersonalizationContext {\r\n    const context = JSON.parse(atob(data));\r\n    context.actions.forEach((action) => {\r\n      Object.keys(action).forEach((key) => {\r\n        action[key] = atob(action[key]);\r\n      });\r\n    });\r\n    for (let i = 0; i < context.segments.length; i++) {\r\n      context.segments[i] = atob(context.segments[i]);\r\n    }\r\n    return context;\r\n  }\r\n}\r\n","import { InjectionToken, Provider } from '@angular/core';\r\nimport { ActionReducer, ActionReducerMap } from '@ngrx/store';\r\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\r\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\r\nimport { PROCESS_FEATURE } from '../process-state';\r\n\r\nexport function getReducers<T>(): ActionReducer<EntityLoaderState<T>> {\r\n  return entityLoaderReducer(PROCESS_FEATURE);\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducerMap<\r\n  EntityLoaderState<any>\r\n>> = new InjectionToken<ActionReducerMap<EntityLoaderState<any>>>(\r\n  'ProcessReducers'\r\n);\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n","import {\n  ENTITY_FAIL_ACTION,\n  ENTITY_LOAD_ACTION,\n  ENTITY_RESET_ACTION,\n  ENTITY_SUCCESS_ACTION,\n  entityFailMeta,\n  EntityLoaderMeta,\n  entityLoadMeta,\n  entityResetMeta,\n  entitySuccessMeta,\n} from '../entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\n\nexport namespace EntityScopedLoaderActions {\n  export interface EntityScopedLoaderMeta extends EntityLoaderMeta {\n    scope?: string;\n  }\n\n  export interface EntityScopedLoaderAction extends Action {\n    readonly payload?: any;\n    readonly meta?: EntityScopedLoaderMeta;\n  }\n\n  export function entityScopedLoadMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityLoadMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedFailMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string,\n    error?: any\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityFailMeta(entityType, id, error),\n      scope,\n    };\n  }\n\n  export function entityScopedSuccessMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entitySuccessMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedResetMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityResetMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export class EntityScopedLoadAction implements EntityScopedLoaderAction {\n    type = ENTITY_LOAD_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedLoadMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedFailAction implements EntityScopedLoaderAction {\n    type = ENTITY_FAIL_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      error?: any\n    ) {\n      this.meta = entityScopedFailMeta(entityType, id, scope, error);\n    }\n  }\n\n  export class EntityScopedSuccessAction implements EntityScopedLoaderAction {\n    type = ENTITY_SUCCESS_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      public payload?: any\n    ) {\n      this.meta = entityScopedSuccessMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedResetAction implements EntityScopedLoaderAction {\n    type = ENTITY_RESET_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedResetMeta(entityType, id, scope);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { PROCESS_FEATURE } from './process-state';\nimport { reducerProvider, reducerToken } from './reducers/index';\n\n@NgModule({\n  imports: [StateModule, StoreModule.forFeature(PROCESS_FEATURE, reducerToken)],\n  providers: [reducerProvider],\n})\nexport class ProcessStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ProcessStoreModule } from './store/process-store.module';\n\n@NgModule({\n  imports: [ProcessStoreModule],\n})\nexport class ProcessModule {\n  static forRoot(): ModuleWithProviders<ProcessModule> {\n    return {\n      ngModule: ProcessModule,\n      providers: [],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Product } from '../../../model/product.model';\r\nimport { ProductAdapter } from './product.adapter';\r\nimport { ScopedProductData } from './scoped-product-data';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductConnector {\r\n  constructor(protected adapter: ProductAdapter) {}\r\n\r\n  get(productCode: string, scope = ''): Observable<Product> {\r\n    return this.adapter.load(productCode, scope);\r\n  }\r\n\r\n  getMany(products: ScopedProductData[]): ScopedProductData[] {\r\n    if (!this.adapter.loadMany) {\r\n      return products.map((product) => ({\r\n        ...product,\r\n        data$: this.adapter.load(product.code, product.scope),\r\n      }));\r\n    }\r\n\r\n    return this.adapter.loadMany(products);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { ProductReferencesAdapter } from './product-references.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReferencesConnector {\n  constructor(protected adapter: ProductReferencesAdapter) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.adapter.load(productCode, referenceType, pageSize);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReviewsAdapter } from './product-reviews.adapter';\nimport { Review } from '../../../model/product.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReviewsConnector {\n  constructor(protected adapter: ProductReviewsAdapter) {}\n\n  get(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.adapter.load(productCode, maxCount);\n  }\n\n  add(productCode: string, review: any): Observable<Review> {\n    return this.adapter.post(productCode, review);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductSearchAdapter } from './product-search.adapter';\nimport { SearchConfig } from '../../model/search-config';\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSearchConnector {\n  constructor(protected adapter: ProductSearchAdapter) {}\n\n  search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage> {\n    return this.adapter.search(query, searchConfig);\n  }\n\n  getSuggestions(term: string, pageSize?: number): Observable<Suggestion[]> {\n    return this.adapter.loadSuggestions(term, pageSize);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReference } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REFERENCES = '[Product] Load Product References Data';\nexport const LOAD_PRODUCT_REFERENCES_FAIL =\n  '[Product] Load Product References Data Fail';\nexport const LOAD_PRODUCT_REFERENCES_SUCCESS =\n  '[Product] Load Product References Data Success';\nexport const CLEAN_PRODUCT_REFERENCES = '[Product] Clean Product References';\n\nexport class LoadProductReferences implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES;\n  constructor(\n    public payload: {\n      productCode: string;\n      referenceType?: string;\n      pageSize?: number;\n    }\n  ) {}\n}\n\nexport class LoadProductReferencesFail implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReferencesSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_SUCCESS;\n  constructor(\n    public payload: {\n      productCode: string;\n      list: ProductReference[];\n    }\n  ) {}\n}\n\nexport class CleanProductReferences implements Action {\n  readonly type = CLEAN_PRODUCT_REFERENCES;\n}\n\n// action types\nexport type ProductReferencesAction =\n  | LoadProductReferences\n  | LoadProductReferencesFail\n  | LoadProductReferencesSuccess\n  | CleanProductReferences;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { Review } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REVIEWS = '[Product] Load Product Reviews Data';\nexport const LOAD_PRODUCT_REVIEWS_FAIL =\n  '[Product] Load Product Reviews Data Fail';\nexport const LOAD_PRODUCT_REVIEWS_SUCCESS =\n  '[Product] Load Product Reviews Data Success';\nexport const POST_PRODUCT_REVIEW = '[Product] Post Product Review';\nexport const POST_PRODUCT_REVIEW_FAIL = '[Product] Post Product Review Fail';\nexport const POST_PRODUCT_REVIEW_SUCCESS =\n  '[Product] Post Product Review Success';\n\nexport class LoadProductReviews implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadProductReviewsFail implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReviewsSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_SUCCESS;\n  constructor(public payload: { productCode: string; list: Review[] }) {}\n}\n\nexport class PostProductReview implements Action {\n  readonly type = POST_PRODUCT_REVIEW;\n  constructor(public payload: { productCode: string; review: Review }) {}\n}\n\nexport class PostProductReviewFail implements Action {\n  readonly type = POST_PRODUCT_REVIEW_FAIL;\n  constructor(public payload: string) {}\n}\n\nexport class PostProductReviewSuccess implements Action {\n  readonly type = POST_PRODUCT_REVIEW_SUCCESS;\n  constructor(public payload: Review) {}\n}\n\n// action types\nexport type ProductReviewsAction =\n  | LoadProductReviews\n  | LoadProductReviewsFail\n  | LoadProductReviewsSuccess\n  | PostProductReview\n  | PostProductReviewFail\n  | PostProductReviewSuccess;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport {\n  ClearSearch,\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { SearchConfig } from '../../model/search-config';\n\nexport const SEARCH_PRODUCTS = '[Product] Search Products';\nexport const SEARCH_PRODUCTS_FAIL = '[Product] Search Products Fail';\nexport const SEARCH_PRODUCTS_SUCCESS = '[Product] Search Products Success';\nexport const GET_PRODUCT_SUGGESTIONS = '[Product] Get Product Suggestions';\nexport const GET_PRODUCT_SUGGESTIONS_SUCCESS =\n  '[Product] Get Product Suggestions Success';\nexport const GET_PRODUCT_SUGGESTIONS_FAIL =\n  '[Product] Get Product Suggestions Fail';\nexport const CLEAR_PRODUCT_SEARCH_RESULT =\n  '[Product] Clear Product Search Result';\n\nexport class SearchProducts implements Action {\n  readonly type = SEARCH_PRODUCTS;\n  constructor(\n    public payload: { queryText: string; searchConfig: SearchConfig },\n    public auxiliary?: boolean\n  ) {}\n}\n\nexport class SearchProductsFail implements Action {\n  readonly type = SEARCH_PRODUCTS_FAIL;\n  constructor(public payload: ErrorModel, public auxiliary?: boolean) {}\n}\n\nexport class SearchProductsSuccess implements Action {\n  readonly type = SEARCH_PRODUCTS_SUCCESS;\n  constructor(public payload: ProductSearchPage, public auxiliary?: boolean) {}\n}\n\nexport class GetProductSuggestions implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS;\n  constructor(public payload: { term: string; searchConfig: SearchConfig }) {}\n}\n\nexport class GetProductSuggestionsSuccess implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_SUCCESS;\n  constructor(public payload: Suggestion[]) {}\n}\n\nexport class GetProductSuggestionsFail implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class ClearProductSearchResult implements Action {\n  readonly type = CLEAR_PRODUCT_SEARCH_RESULT;\n  constructor(\n    public payload: ClearSearch = {\n      clearPageResults: false,\n      clearSearchboxResults: false,\n    }\n  ) {}\n}\n\n// action types\nexport type ProductSearchAction =\n  | SearchProducts\n  | SearchProductsFail\n  | SearchProductsSuccess\n  | GetProductSuggestions\n  | GetProductSuggestionsSuccess\n  | GetProductSuggestionsFail\n  | ClearProductSearchResult;\n","import { Product } from '../../../model/product.model';\nimport { PRODUCT_DETAIL_ENTITY } from '../product-state';\nimport { EntityLoaderMeta } from '../../../state/utils/entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\nimport { EntityScopedLoaderActions } from '../../../state/utils/scoped-loader/entity-scoped-loader.actions';\n\nexport const LOAD_PRODUCT = '[Product] Load Product Data';\nexport const LOAD_PRODUCT_FAIL = '[Product] Load Product Data Fail';\nexport const LOAD_PRODUCT_SUCCESS = '[Product] Load Product Data Success';\n\nexport interface ProductMeta extends EntityLoaderMeta {\n  scope?: string;\n}\n\nexport interface EntityScopedLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProductMeta;\n}\n\nexport class LoadProduct extends EntityScopedLoaderActions.EntityScopedLoadAction {\n  readonly type = LOAD_PRODUCT;\n  constructor(public payload: string, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload, scope);\n  }\n}\n\nexport class LoadProductFail extends EntityScopedLoaderActions.EntityScopedFailAction {\n  readonly type = LOAD_PRODUCT_FAIL;\n  constructor(productCode: string, public payload: any, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, productCode, scope, payload);\n  }\n}\n\nexport class LoadProductSuccess extends EntityScopedLoaderActions.EntityScopedSuccessAction {\n  readonly type = LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload.code, scope);\n  }\n}\n\n// action types\nexport type ProductAction = LoadProduct | LoadProductFail | LoadProductSuccess;\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../model/product-search.model';\nimport { Product, ProductReference, Review } from '../../model/product.model';\nimport { EntityScopedLoaderState } from '../../state/utils/scoped-loader/scoped-loader.state';\n\nexport const PRODUCT_FEATURE = 'product';\nexport const PRODUCT_DETAIL_ENTITY = '[Product] Detail Entity';\n\nexport interface StateWithProduct {\n  [PRODUCT_FEATURE]: ProductsState;\n}\n\nexport interface ProductsState {\n  details: EntityScopedLoaderState<Product>;\n  search: ProductsSearchState;\n  reviews: ProductReviewsState;\n  references: ProductReferencesState;\n}\n\nexport interface ProductsSearchState {\n  results: ProductSearchPage;\n  suggestions: Suggestion[];\n  auxResults: ProductSearchPage;\n}\n\nexport interface ProductReviewsState {\n  productCode: string;\n  list: Review[];\n}\n\nexport interface ProductReferencesState {\n  productCode: string;\n  list: ProductReference[];\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductsState,\n  PRODUCT_FEATURE,\n  StateWithProduct,\n} from '../product-state';\n\nexport const getProductsState: MemoizedSelector<\n  StateWithProduct,\n  ProductsState\n> = createFeatureSelector<ProductsState>(PRODUCT_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { ProductReference } from '../../../model/product.model';\r\nimport {\r\n  ProductReferencesState,\r\n  ProductsState,\r\n  StateWithProduct,\r\n} from '../product-state';\r\nimport { getProductsState } from './feature.selector';\r\n\r\nexport const getProductReferencesState: MemoizedSelector<\r\n  StateWithProduct,\r\n  ProductReferencesState\r\n> = createSelector(\r\n  getProductsState,\r\n  (state: ProductsState) => state.references\r\n);\r\n\r\nexport const getSelectedProductReferencesFactory = (\r\n  productCode: string,\r\n  referenceType: string\r\n): MemoizedSelector<StateWithProduct, ProductReference[]> => {\r\n  return createSelector(getProductReferencesState, (referenceTypeData) => {\r\n    if (referenceTypeData.productCode === productCode) {\r\n      if (!!referenceTypeData.list) {\r\n        if (referenceType) {\r\n          return referenceTypeData.list.filter(\r\n            (item) => item.referenceType === referenceType\r\n          );\r\n        }\r\n\r\n        return referenceTypeData.list;\r\n      } else {\r\n        return [];\r\n      }\r\n    }\r\n  });\r\n};\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { Review } from '../../../model/product.model';\r\nimport {\r\n  ProductReviewsState,\r\n  ProductsState,\r\n  StateWithProduct,\r\n} from '../product-state';\r\nimport { getProductsState } from './feature.selector';\r\n\r\nexport const getProductReviewsState: MemoizedSelector<\r\n  StateWithProduct,\r\n  ProductReviewsState\r\n> = createSelector(getProductsState, (state: ProductsState) => state.reviews);\r\n\r\nexport const getSelectedProductReviewsFactory = (\r\n  productCode\r\n): MemoizedSelector<StateWithProduct, Review[]> => {\r\n  return createSelector(getProductReviewsState, (reviewData) => {\r\n    if (reviewData.productCode === productCode) {\r\n      return reviewData.list;\r\n    }\r\n  });\r\n};\r\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductsSearchState } from '../product-state';\n\nexport const initialState: ProductsSearchState = {\n  results: {},\n  suggestions: [],\n  auxResults: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductSearchAction\n): ProductsSearchState {\n  switch (action.type) {\n    case ProductActions.SEARCH_PRODUCTS_SUCCESS: {\n      const results = action.payload;\n      const res = action.auxiliary ? { auxResults: results } : { results };\n      return {\n        ...state,\n        ...res,\n      };\n    }\n\n    case ProductActions.GET_PRODUCT_SUGGESTIONS_SUCCESS: {\n      const suggestions: Suggestion[] = action.payload;\n\n      return {\n        ...state,\n        suggestions,\n      };\n    }\n\n    case ProductActions.CLEAR_PRODUCT_SEARCH_RESULT: {\n      return {\n        ...state,\n        results: action.payload.clearPageResults ? {} : state.results,\n        suggestions: action.payload.clearSearchboxResults\n          ? []\n          : state.suggestions,\n        auxResults: action.payload.clearSearchboxResults\n          ? {}\n          : state.auxResults,\n      };\n    }\n  }\n  return state;\n}\n\nexport const getSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.results;\nexport const getAuxSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.auxResults;\nexport const getProductSuggestions = (\n  state: ProductsSearchState\n): Suggestion[] => state.suggestions;\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport {\r\n  ProductSearchPage,\r\n  Suggestion,\r\n} from '../../../model/product-search.model';\r\nimport {\r\n  ProductsSearchState,\r\n  ProductsState,\r\n  StateWithProduct,\r\n} from '../product-state';\r\nimport * as fromProductSearch from '../reducers/product-search.reducer';\r\nimport { getProductsState } from './feature.selector';\r\n\r\nexport const getProductsSearchState: MemoizedSelector<\r\n  StateWithProduct,\r\n  ProductsSearchState\r\n> = createSelector(getProductsState, (state: ProductsState) => state.search);\r\n\r\nexport const getSearchResults: MemoizedSelector<\r\n  StateWithProduct,\r\n  ProductSearchPage\r\n> = createSelector(getProductsSearchState, fromProductSearch.getSearchResults);\r\n\r\nexport const getAuxSearchResults: MemoizedSelector<\r\n  StateWithProduct,\r\n  ProductSearchPage\r\n> = createSelector(\r\n  getProductsSearchState,\r\n  fromProductSearch.getAuxSearchResults\r\n);\r\n\r\nexport const getProductSuggestions: MemoizedSelector<\r\n  StateWithProduct,\r\n  Suggestion[]\r\n> = createSelector(\r\n  getProductsSearchState,\r\n  fromProductSearch.getProductSuggestions\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { Product } from '../../../model/product.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { ProductsState, StateWithProduct } from '../product-state';\r\nimport { getProductsState } from './feature.selector';\r\n\r\nexport const getProductState: MemoizedSelector<\r\n  StateWithProduct,\r\n  StateUtils.EntityLoaderState<Product>\r\n> = createSelector(getProductsState, (state: ProductsState) => state.details);\r\n\r\nexport const getSelectedProductStateFactory = (\r\n  code: string,\r\n  scope = ''\r\n): MemoizedSelector<StateWithProduct, StateUtils.LoaderState<Product>> => {\r\n  return createSelector(\r\n    getProductState,\r\n    (details) =>\r\n      StateUtils.entityLoaderStateSelector(details, code)[scope] ||\r\n      StateUtils.initialLoaderState\r\n  );\r\n};\r\n\r\nexport const getSelectedProductFactory = (\r\n  code: string,\r\n  scope = ''\r\n): MemoizedSelector<StateWithProduct, Product> => {\r\n  return createSelector(\r\n    getSelectedProductStateFactory(code, scope),\r\n    (productState) => StateUtils.loaderValueSelector(productState)\r\n  );\r\n};\r\n\r\nexport const getSelectedProductLoadingFactory = (\r\n  code: string,\r\n  scope = ''\r\n): MemoizedSelector<StateWithProduct, boolean> => {\r\n  return createSelector(\r\n    getSelectedProductStateFactory(code, scope),\r\n    (productState) => StateUtils.loaderLoadingSelector(productState)\r\n  );\r\n};\r\n\r\nexport const getSelectedProductSuccessFactory = (\r\n  code: string,\r\n  scope = ''\r\n): MemoizedSelector<StateWithProduct, boolean> => {\r\n  return createSelector(\r\n    getSelectedProductStateFactory(code, scope),\r\n    (productState) => StateUtils.loaderSuccessSelector(productState)\r\n  );\r\n};\r\n\r\nexport const getSelectedProductErrorFactory = (\r\n  code: string,\r\n  scope = ''\r\n): MemoizedSelector<StateWithProduct, boolean> => {\r\n  return createSelector(\r\n    getSelectedProductStateFactory(code, scope),\r\n    (productState) => StateUtils.loaderErrorSelector(productState)\r\n  );\r\n};\r\n\r\nexport const getAllProductCodes: MemoizedSelector<\r\n  StateWithProduct,\r\n  string[]\r\n> = createSelector(getProductState, (details) => {\r\n  return Object.keys(details.entities);\r\n});\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { ProductReference } from '../../model/product.model';\r\nimport { ProductActions } from '../store/actions/index';\r\nimport { StateWithProduct } from '../store/product-state';\r\nimport { ProductSelectors } from '../store/selectors/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductReferenceService {\r\n  constructor(protected store: Store<StateWithProduct>) {}\r\n\r\n  get(\r\n    productCode: string,\r\n    referenceType?: string,\r\n    pageSize?: number\r\n  ): Observable<ProductReference[]> {\r\n    return this.store.pipe(\r\n      select(\r\n        ProductSelectors.getSelectedProductReferencesFactory(\r\n          productCode,\r\n          referenceType\r\n        )\r\n      ),\r\n      tap((references) => {\r\n        if (references === undefined && productCode !== undefined) {\r\n          this.store.dispatch(\r\n            new ProductActions.LoadProductReferences({\r\n              productCode,\r\n              referenceType,\r\n              pageSize,\r\n            })\r\n          );\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  cleanReferences(): void {\r\n    this.store.dispatch(new ProductActions.CleanProductReferences());\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Review } from '../../model/product.model';\r\nimport { ProductActions } from '../store/actions/index';\r\nimport { StateWithProduct } from '../store/product-state';\r\nimport { ProductSelectors } from '../store/selectors/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductReviewService {\r\n  constructor(protected store: Store<StateWithProduct>) {}\r\n\r\n  getByProductCode(productCode: string): Observable<Review[]> {\r\n    return this.store.pipe(\r\n      select(ProductSelectors.getSelectedProductReviewsFactory(productCode)),\r\n      tap((reviews) => {\r\n        if (reviews === undefined && productCode !== undefined) {\r\n          this.store.dispatch(\r\n            new ProductActions.LoadProductReviews(productCode)\r\n          );\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  add(productCode: string, review: Review): void {\r\n    this.store.dispatch(\r\n      new ProductActions.PostProductReview({\r\n        productCode: productCode,\r\n        review,\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { ProductSearchPage } from '../../model/product-search.model';\r\nimport { SearchConfig } from '../model/search-config';\r\nimport { ProductActions } from '../store/actions/index';\r\nimport { StateWithProduct } from '../store/product-state';\r\nimport { ProductSelectors } from '../store/selectors/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductSearchService {\r\n  constructor(protected store: Store<StateWithProduct>) {}\r\n\r\n  search(query: string, searchConfig?: SearchConfig): void {\r\n    this.store.dispatch(\r\n      new ProductActions.SearchProducts({\r\n        queryText: query,\r\n        searchConfig: searchConfig,\r\n      })\r\n    );\r\n  }\r\n\r\n  getResults(): Observable<ProductSearchPage> {\r\n    return this.store.pipe(select(ProductSelectors.getSearchResults));\r\n  }\r\n\r\n  clearResults(): void {\r\n    this.store.dispatch(\r\n      new ProductActions.ClearProductSearchResult({\r\n        clearPageResults: true,\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { isPlatformBrowser } from '@angular/common';\r\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport { Actions, ofType } from '@ngrx/effects';\r\nimport { select, Store } from '@ngrx/store';\r\nimport {\r\n  combineLatest,\r\n  defer,\r\n  merge,\r\n  Observable,\r\n  of,\r\n  SchedulerLike,\r\n  using,\r\n} from 'rxjs';\r\nimport {\r\n  auditTime,\r\n  debounceTime,\r\n  delay,\r\n  distinctUntilChanged,\r\n  filter,\r\n  map,\r\n  mapTo,\r\n  shareReplay,\r\n  tap,\r\n  withLatestFrom,\r\n} from 'rxjs/operators';\r\nimport { deepMerge } from '../../config/utils/deep-merge';\r\nimport { Product } from '../../model/product.model';\r\nimport { LoadingScopesService } from '../../occ/services/loading-scopes.service';\r\nimport { withdrawOn } from '../../util/withdraw-on';\r\nimport { ProductActions } from '../store/actions/index';\r\nimport { StateWithProduct } from '../store/product-state';\r\nimport { ProductSelectors } from '../store/selectors/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductLoadingService {\r\n  protected products: {\r\n    [code: string]: { [scope: string]: Observable<Product> };\r\n  } = {};\r\n\r\n  constructor(\r\n    protected store: Store<StateWithProduct>,\r\n    protected loadingScopes: LoadingScopesService,\r\n    protected actions$: Actions,\r\n    @Inject(PLATFORM_ID) protected platformId: any\r\n  ) {}\r\n\r\n  get(productCode: string, scopes: string[]): Observable<Product> {\r\n    scopes = this.loadingScopes.expand('product', scopes);\r\n\r\n    this.initProductScopes(productCode, scopes);\r\n    return this.products[productCode][this.getScopesIndex(scopes)];\r\n  }\r\n\r\n  protected initProductScopes(productCode: string, scopes: string[]): void {\r\n    if (!this.products[productCode]) {\r\n      this.products[productCode] = {};\r\n    }\r\n\r\n    for (const scope of scopes) {\r\n      if (!this.products[productCode][scope]) {\r\n        this.products[productCode][scope] = this.getProductForScope(\r\n          productCode,\r\n          scope\r\n        );\r\n      }\r\n    }\r\n\r\n    if (scopes.length > 1) {\r\n      this.products[productCode][this.getScopesIndex(scopes)] = combineLatest(\r\n        scopes.map((scope) => this.products[productCode][scope])\r\n      ).pipe(\r\n        auditTime(0),\r\n        map((productParts) =>\r\n          productParts.every(Boolean)\r\n            ? deepMerge({}, ...productParts)\r\n            : undefined\r\n        ),\r\n        distinctUntilChanged()\r\n      );\r\n    }\r\n  }\r\n\r\n  protected getScopesIndex(scopes: string[]): string {\r\n    return scopes.join('ɵ');\r\n  }\r\n\r\n  /**\r\n   * Creates observable for providing specified product data for the scope\r\n   *\r\n   * @param productCode\r\n   * @param scope\r\n   */\r\n  protected getProductForScope(\r\n    productCode: string,\r\n    scope: string\r\n  ): Observable<Product> {\r\n    const shouldLoad$ = this.store.pipe(\r\n      select(\r\n        ProductSelectors.getSelectedProductStateFactory(productCode, scope)\r\n      ),\r\n      map(\r\n        (productState) =>\r\n          !productState.loading && !productState.success && !productState.error\r\n      ),\r\n      distinctUntilChanged(),\r\n      filter((x) => x)\r\n    );\r\n\r\n    const isLoading$ = this.store.pipe(\r\n      select(\r\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\r\n      )\r\n    );\r\n\r\n    const productLoadLogic$ = merge(\r\n      shouldLoad$,\r\n      ...this.getProductReloadTriggers(productCode, scope)\r\n    ).pipe(\r\n      debounceTime(0),\r\n      withLatestFrom(isLoading$),\r\n      tap(([, isLoading]) => {\r\n        if (!isLoading) {\r\n          this.store.dispatch(\r\n            new ProductActions.LoadProduct(productCode, scope)\r\n          );\r\n        }\r\n      })\r\n    );\r\n\r\n    const productData$ = this.store.pipe(\r\n      select(ProductSelectors.getSelectedProductFactory(productCode, scope))\r\n    );\r\n\r\n    return using(\r\n      () => productLoadLogic$.subscribe(),\r\n      () => productData$\r\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\r\n  }\r\n\r\n  /**\r\n   * Returns reload triggers for product per scope\r\n   *\r\n   * @param productCode\r\n   * @param scope\r\n   */\r\n  protected getProductReloadTriggers(\r\n    productCode: string,\r\n    scope: string\r\n  ): Observable<boolean>[] {\r\n    const triggers = [];\r\n\r\n    // max age trigger add\r\n    const maxAge = this.loadingScopes.getMaxAge('product', scope);\r\n    if (maxAge && isPlatformBrowser(this.platformId)) {\r\n      // we want to grab load product success and load product fail for this product and scope\r\n      const loadFinish$ = this.actions$.pipe(\r\n        filter(\r\n          (\r\n            action:\r\n              | ProductActions.LoadProductSuccess\r\n              | ProductActions.LoadProductFail\r\n          ) =>\r\n            (action.type === ProductActions.LOAD_PRODUCT_SUCCESS ||\r\n              action.type === ProductActions.LOAD_PRODUCT_FAIL) &&\r\n            action.meta.entityId === productCode &&\r\n            action.meta.scope === scope\r\n        )\r\n      );\r\n\r\n      const loadStart$ = this.actions$.pipe(\r\n        ofType(ProductActions.LOAD_PRODUCT),\r\n        filter(\r\n          (action: ProductActions.LoadProduct) =>\r\n            action.payload === productCode && action.meta.scope === scope\r\n        )\r\n      );\r\n\r\n      triggers.push(this.getMaxAgeTrigger(loadStart$, loadFinish$, maxAge));\r\n    }\r\n\r\n    return triggers;\r\n  }\r\n\r\n  /**\r\n   * Generic method that returns stream triggering reload by maxAge\r\n   *\r\n   * Could be refactored to separate service in future to use in other\r\n   * max age reload implementations\r\n   *\r\n   * @param loadStart$ Stream that emits on load start\r\n   * @param loadFinish$ Stream that emits on load finish\r\n   * @param maxAge max age\r\n   */\r\n  private getMaxAgeTrigger(\r\n    loadStart$: Observable<any>,\r\n    loadFinish$: Observable<any>,\r\n    maxAge: number,\r\n    scheduler?: SchedulerLike\r\n  ): Observable<boolean> {\r\n    let timestamp = 0;\r\n\r\n    const now = () => (scheduler ? scheduler.now() : Date.now());\r\n\r\n    const timestamp$ = loadFinish$.pipe(tap(() => (timestamp = now())));\r\n\r\n    const shouldReload$: Observable<boolean> = defer(() => {\r\n      const age = now() - timestamp;\r\n\r\n      const timestampRefresh$ = timestamp$.pipe(\r\n        delay(maxAge, scheduler),\r\n        mapTo(true),\r\n        withdrawOn(loadStart$)\r\n      );\r\n\r\n      if (age > maxAge) {\r\n        // we should emit first value immediately\r\n        return merge(of(true), timestampRefresh$);\r\n      } else if (age === 0) {\r\n        // edge case, we should emit max age timeout after next load success\r\n        // could happen with artificial schedulers\r\n        return timestampRefresh$;\r\n      } else {\r\n        // we should emit first value when age will expire\r\n        return merge(\r\n          of(true).pipe(delay(maxAge - age, scheduler)),\r\n          timestampRefresh$\r\n        );\r\n      }\r\n    });\r\n\r\n    return shouldReload$;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Product } from '../../model/product.model';\r\nimport { ProductActions } from '../store/actions/index';\r\nimport { StateWithProduct } from '../store/product-state';\r\nimport { ProductSelectors } from '../store/selectors/index';\r\nimport { ProductLoadingService } from '../services/product-loading.service';\r\nimport { ProductScope } from '../model/product-scope';\r\nimport { DEFAULT_SCOPE } from '../../occ/occ-models/occ-endpoints.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductService {\r\n  constructor(\r\n    protected store: Store<StateWithProduct>,\r\n    protected productLoading: ProductLoadingService\r\n  ) {}\r\n\r\n  /**\r\n   * Returns the product observable. The product will be loaded\r\n   * whenever there's no value observed.\r\n   *\r\n   * The underlying product loader ensures that the product is\r\n   * only loaded once, even in case of parallel observers.\r\n   *\r\n   * You should provide product data scope you are interested in to not load all\r\n   * the data if not needed. You can provide more than one scope.\r\n   *\r\n   * @param productCode Product code to load\r\n   * @param scopes Scope or scopes of the product data\r\n   */\r\n  get(\r\n    productCode: string,\r\n    scopes: (ProductScope | string)[] | ProductScope | string = DEFAULT_SCOPE\r\n  ): Observable<Product> {\r\n    return productCode\r\n      ? this.productLoading.get(productCode, [].concat(scopes))\r\n      : of(undefined);\r\n  }\r\n\r\n  /**\r\n   * Returns boolean observable for product's loading state\r\n   */\r\n  isLoading(\r\n    productCode: string,\r\n    scope: ProductScope | string = ''\r\n  ): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(\r\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns boolean observable for product's load success state\r\n   */\r\n  isSuccess(\r\n    productCode: string,\r\n    scope: ProductScope | string = ''\r\n  ): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(\r\n        ProductSelectors.getSelectedProductSuccessFactory(productCode, scope)\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns boolean observable for product's load error state\r\n   */\r\n  hasError(\r\n    productCode: string,\r\n    scope: ProductScope | string = ''\r\n  ): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(\r\n        ProductSelectors.getSelectedProductErrorFactory(productCode, scope)\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Reloads the product. The product is loaded implicetly\r\n   * whenever selected by the `get`, but in some cases an\r\n   * explicit reload might be needed.\r\n   */\r\n  reload(productCode: string, scope: ProductScope | string = ''): void {\r\n    this.store.dispatch(new ProductActions.LoadProduct(productCode, scope));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage, Suggestion } from '../../model/index';\nimport { SearchConfig } from '../model/index';\nimport { ProductActions } from '../store/actions/index';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductSearchService } from './product-search.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchboxService extends ProductSearchService {\n  /**\n   * dispatch the search for the search box\n   */\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts(\n        {\n          queryText: query,\n          searchConfig: searchConfig,\n        },\n        true\n      )\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getAuxSearchResults));\n  }\n\n  /**\n   * clears the products and suggestions\n   */\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearSearchboxResults: true,\n      })\n    );\n  }\n\n  getSuggestionResults(): Observable<Suggestion[]> {\n    return this.store.pipe(select(ProductSelectors.getProductSuggestions));\n  }\n\n  searchSuggestions(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.GetProductSuggestions({\n        term: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { combineLatest, Observable, of } from 'rxjs';\r\nimport { filter, map, switchMap } from 'rxjs/operators';\r\nimport { CmsService } from '../../cms/facade/cms.service';\r\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\r\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\r\nimport {\r\n  PageBreadcrumbResolver,\r\n  PageTitleResolver,\r\n} from '../../cms/page/page.resolvers';\r\nimport { TranslationService } from '../../i18n/translation.service';\r\nimport { PageType } from '../../model/cms.model';\r\nimport { ProductSearchPage } from '../../model/product-search.model';\r\nimport { ProductSearchService } from '../facade/product-search.service';\r\n\r\n/**\r\n * Resolves the page data for the Product Listing Page.\r\n *\r\n * The page title, and breadcrumbs are resolved in this implementation only.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CategoryPageMetaResolver extends PageMetaResolver\r\n  implements PageTitleResolver, PageBreadcrumbResolver {\r\n  // reusable observable for search page data\r\n  protected searchPage$: Observable<\r\n    ProductSearchPage | Page\r\n  > = this.cms.getCurrentPage().pipe(\r\n    filter(Boolean),\r\n    switchMap((page: Page) =>\r\n      // only the existence of a plp component tells us if products\r\n      // are rendered or if this is an ordinary content page\r\n      this.hasProductListComponent(page)\r\n        ? this.productSearchService.getResults().pipe(filter(Boolean))\r\n        : of(page)\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    protected productSearchService: ProductSearchService,\r\n    protected cms: CmsService,\r\n    protected translation: TranslationService\r\n  ) {\r\n    super();\r\n    this.pageType = PageType.CATEGORY_PAGE;\r\n  }\r\n\r\n  resolveTitle(): Observable<string> {\r\n    return this.searchPage$.pipe(\r\n      filter((page: ProductSearchPage) => !!page.pagination),\r\n      switchMap((p: ProductSearchPage) =>\r\n        this.translation.translate('pageMetaResolver.category.title', {\r\n          count: p.pagination.totalResults,\r\n          query: p.breadcrumbs?.length\r\n            ? p.breadcrumbs[0].facetValueName\r\n            : undefined,\r\n        })\r\n      )\r\n    );\r\n  }\r\n\r\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\r\n    return combineLatest([\r\n      this.searchPage$.pipe(),\r\n      this.translation.translate('common.home'),\r\n    ]).pipe(\r\n      map(([p, label]: [ProductSearchPage, string]) =>\r\n        p.breadcrumbs\r\n          ? this.resolveBreadcrumbData(<ProductSearchPage>p, label)\r\n          : null\r\n      )\r\n    );\r\n  }\r\n\r\n  protected resolveBreadcrumbData(\r\n    page: ProductSearchPage,\r\n    label: string\r\n  ): BreadcrumbMeta[] {\r\n    const breadcrumbs: BreadcrumbMeta[] = [];\r\n    breadcrumbs.push({ label: label, link: '/' });\r\n\r\n    for (const br of page.breadcrumbs) {\r\n      if (br.facetCode === 'category' || br.facetCode === 'allCategories') {\r\n        breadcrumbs.push({\r\n          label: br.facetValueName,\r\n          link: `/c/${br.facetValueCode}`,\r\n        });\r\n      }\r\n      if (br.facetCode === 'brand') {\r\n        breadcrumbs.push({\r\n          label: br.facetValueName,\r\n          link: `/Brands/${br.facetValueName}/c/${br.facetValueCode}`,\r\n        });\r\n      }\r\n    }\r\n    return breadcrumbs;\r\n  }\r\n\r\n  protected hasProductListComponent(page: Page): boolean {\r\n    return !!Object.keys(page.slots).find(\r\n      (key) =>\r\n        !!page.slots[key].components.find(\r\n          (comp) =>\r\n            comp.typeCode === 'CMSProductListComponent' ||\r\n            comp.typeCode === 'ProductGridComponent'\r\n        )\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { filter, map, switchMap } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\r\nimport {\r\n  PageBreadcrumbResolver,\r\n  PageMetaResolver,\r\n  PageTitleResolver,\r\n} from '../../cms/page';\r\nimport { TranslationService } from '../../i18n/translation.service';\r\nimport { PageType } from '../../model/cms.model';\r\nimport { ProductSearchService } from '../../product/facade/product-search.service';\r\nimport { SemanticPathService } from '../../routing/configurable-routes/url-translation/semantic-path.service';\r\n\r\n/**\r\n * Resolves page meta data for the search result page, in case it's used\r\n * to query coupons. This is done by adding a `couponcode` query parameter\r\n * to the search page route.\r\n *\r\n * The page resolves an alternative page title and breadcrumb.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CouponSearchPageResolver extends PageMetaResolver\r\n  implements PageTitleResolver, PageBreadcrumbResolver {\r\n  protected total$: Observable<\r\n    number\r\n  > = this.productSearchService.getResults().pipe(\r\n    filter((data) => !!data?.pagination),\r\n    map((results) => results.pagination.totalResults)\r\n  );\r\n\r\n  constructor(\r\n    protected productSearchService: ProductSearchService,\r\n    protected translation: TranslationService,\r\n    protected authService: AuthService,\r\n    protected route: ActivatedRoute,\r\n    protected semanticPathService: SemanticPathService\r\n  ) {\r\n    super();\r\n    this.pageType = PageType.CONTENT_PAGE;\r\n    this.pageTemplate = 'SearchResultsListPageTemplate';\r\n  }\r\n\r\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\r\n    return combineLatest([\r\n      this.translation.translate('common.home'),\r\n      this.translation.translate('myCoupons.myCoupons'),\r\n      this.authService.isUserLoggedIn(),\r\n    ]).pipe(\r\n      map(([homeLabel, couponLabel, isLoggedIn]: [string, string, boolean]) => {\r\n        const breadcrumbs = [];\r\n        breadcrumbs.push({ label: homeLabel, link: '/' });\r\n        if (isLoggedIn) {\r\n          breadcrumbs.push({\r\n            label: couponLabel,\r\n            link: this.semanticPathService.transform({\r\n              cxRoute: 'coupons',\r\n            }),\r\n          });\r\n        }\r\n        return breadcrumbs;\r\n      })\r\n    );\r\n  }\r\n\r\n  resolveTitle(): Observable<string> {\r\n    return this.total$.pipe(\r\n      switchMap((total: number) =>\r\n        this.translation.translate('pageMetaResolver.search.findProductTitle', {\r\n          count: total,\r\n          coupon: this.couponCode,\r\n        })\r\n      )\r\n    );\r\n  }\r\n\r\n  getScore(page: Page): number {\r\n    return super.getScore(page) + (this.couponCode ? 1 : -1);\r\n  }\r\n\r\n  protected get couponCode(): string {\r\n    return this.route.snapshot?.queryParams?.couponcode;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { combineLatest, Observable, of } from 'rxjs';\r\nimport { filter, map, switchMap } from 'rxjs/operators';\r\nimport { BreadcrumbMeta, PageRobotsMeta } from '../../cms/model/page.model';\r\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\r\nimport {\r\n  PageBreadcrumbResolver,\r\n  PageDescriptionResolver,\r\n  PageHeadingResolver,\r\n  PageImageResolver,\r\n  PageRobotsResolver,\r\n  PageTitleResolver,\r\n} from '../../cms/page/page.resolvers';\r\nimport { TranslationService } from '../../i18n/translation.service';\r\nimport { PageType } from '../../model/cms.model';\r\nimport { Product } from '../../model/product.model';\r\nimport { RoutingService } from '../../routing/facade/routing.service';\r\nimport { ProductService } from '../facade/product.service';\r\nimport { ProductScope } from '../model/product-scope';\r\n\r\n/**\r\n * Resolves the page data for the Product Detail Page\r\n * based on the `PageType.PRODUCT_PAGE`.\r\n *\r\n * The page title, heading, description, breadcrumbs and\r\n * first GALLERY image are resolved if available in the data.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductPageMetaResolver extends PageMetaResolver\r\n  implements\r\n    PageHeadingResolver,\r\n    PageTitleResolver,\r\n    PageDescriptionResolver,\r\n    PageBreadcrumbResolver,\r\n    PageImageResolver,\r\n    PageRobotsResolver {\r\n  // reusable observable for product data based on the current page\r\n  protected product$ = this.routingService.getRouterState().pipe(\r\n    map((state) => state.state.params['productCode']),\r\n    filter((code) => !!code),\r\n    switchMap((code) => this.productService.get(code, ProductScope.DETAILS)),\r\n    filter(Boolean)\r\n  );\r\n\r\n  constructor(\r\n    protected routingService: RoutingService,\r\n    protected productService: ProductService,\r\n    protected translation: TranslationService\r\n  ) {\r\n    super();\r\n    this.pageType = PageType.PRODUCT_PAGE;\r\n  }\r\n\r\n  /**\r\n   * Resolves the page heading for the Product Detail Page.\r\n   * The page heading is used in the UI (`<h1>`), where as the page\r\n   * title is used by the browser and crawlers.\r\n   */\r\n  resolveHeading(): Observable<string> {\r\n    return this.product$.pipe(\r\n      switchMap((p: Product) =>\r\n        this.translation.translate('pageMetaResolver.product.heading', {\r\n          heading: p.name,\r\n        })\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resolves the page title for the Product Detail Page. The page title\r\n   * is resolved with the product name, the first category and the manufactorer.\r\n   * The page title used by the browser (history, tabs) and crawlers.\r\n   */\r\n  resolveTitle(): Observable<string> {\r\n    return this.product$.pipe(\r\n      switchMap((p: Product) => {\r\n        let title = p.name;\r\n        title += this.resolveFirstCategory(p);\r\n        title += this.resolveManufacturer(p);\r\n        return this.translation.translate('pageMetaResolver.product.title', {\r\n          title: title,\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resolves the page description for the Product Detail Page. The description\r\n   * is based on the `product.summary`.\r\n   */\r\n  resolveDescription(): Observable<string> {\r\n    return this.product$.pipe(\r\n      switchMap((p: Product) =>\r\n        this.translation.translate('pageMetaResolver.product.description', {\r\n          description: p.summary,\r\n        })\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resolves breadcrumbs for the Product Detail Page. The breadcrumbs are driven by\r\n   * a static home page crum and a crumb for each category.\r\n   */\r\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\r\n    return combineLatest([\r\n      this.product$.pipe(),\r\n      this.translation.translate('common.home'),\r\n    ]).pipe(\r\n      map(([p, label]: [Product, string]) => {\r\n        const breadcrumbs = [];\r\n        breadcrumbs.push({ label: label, link: '/' });\r\n        for (const { name, code, url } of p.categories || []) {\r\n          breadcrumbs.push({\r\n            label: name || code,\r\n            link: url,\r\n          });\r\n        }\r\n        return breadcrumbs;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resolves the main page image for the Product Detail Page. The product image\r\n   * is based on the PRIMARY product image. The zoom format is used by default.\r\n   */\r\n  resolveImage(): Observable<string> {\r\n    return this.product$.pipe(\r\n      map((p: Product) =>\r\n        (<any>p.images?.PRIMARY)?.zoom?.url\r\n          ? (<any>p.images.PRIMARY).zoom.url\r\n          : null\r\n      )\r\n    );\r\n  }\r\n\r\n  protected resolveFirstCategory(product: Product): string {\r\n    let firstCategory;\r\n    if (product.categories?.length > 0) {\r\n      firstCategory = product.categories[0];\r\n    }\r\n    return firstCategory\r\n      ? ` | ${firstCategory.name || firstCategory.code}`\r\n      : '';\r\n  }\r\n\r\n  protected resolveManufacturer(product: Product): string {\r\n    return product.manufacturer ? ` | ${product.manufacturer}` : '';\r\n  }\r\n\r\n  /**\r\n   * Resolves the robot information for the Product Detail Page. The\r\n   * robot instruction defaults to FOLLOW and INDEX for all product pages,\r\n   * regardless of whether they're purchasable or not.\r\n   */\r\n  resolveRobots(): Observable<PageRobotsMeta[]> {\r\n    return of([PageRobotsMeta.FOLLOW, PageRobotsMeta.INDEX]);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { filter, map, switchMap } from 'rxjs/operators';\r\nimport { PageMetaResolver } from '../../cms';\r\nimport { TranslationService } from '../../i18n/translation.service';\r\nimport { PageType } from '../../model/cms.model';\r\nimport { RoutingService } from '../../routing/facade/routing.service';\r\nimport { ProductSearchService } from '../facade/product-search.service';\r\n\r\n/**\r\n * Resolves the page data for the Search Result Page based on the\r\n * `PageType.CATEGORY_PAGE` and the `SearchResultsListPageTemplate` template.\r\n *\r\n * Only the page title is resolved in the standard implemenation.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SearchPageMetaResolver extends PageMetaResolver\r\n  implements PageMetaResolver {\r\n  protected total$: Observable<\r\n    number\r\n  > = this.productSearchService.getResults().pipe(\r\n    filter((data) => !!data?.pagination),\r\n    map((results) => results.pagination.totalResults)\r\n  );\r\n\r\n  protected query$: Observable<\r\n    string\r\n  > = this.routingService\r\n    .getRouterState()\r\n    .pipe(map((state) => state.state.params['query']));\r\n\r\n  constructor(\r\n    protected routingService: RoutingService,\r\n    protected productSearchService: ProductSearchService,\r\n    protected translation: TranslationService\r\n  ) {\r\n    super();\r\n    this.pageType = PageType.CONTENT_PAGE;\r\n    this.pageTemplate = 'SearchResultsListPageTemplate';\r\n  }\r\n\r\n  resolveTitle(): Observable<string> {\r\n    const sources = [this.total$, this.query$];\r\n    return combineLatest(sources).pipe(\r\n      switchMap(([t, q]: [number, string]) =>\r\n        this.translation.translate('pageMetaResolver.search.title', {\r\n          count: t,\r\n          query: q,\r\n        })\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, mergeMap } from 'rxjs/operators';\r\nimport { ErrorModel } from '../../../model/misc.model';\r\nimport { ProductReferencesConnector } from '../../connectors/references/product-references.connector';\r\nimport { ProductActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class ProductReferencesEffects {\r\n  @Effect()\r\n  loadProductReferences$: Observable<\r\n    | ProductActions.LoadProductReferencesSuccess\r\n    | ProductActions.LoadProductReferencesFail\r\n  > = this.actions$.pipe(\r\n    ofType(ProductActions.LOAD_PRODUCT_REFERENCES),\r\n    map((action: ProductActions.LoadProductReferences) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.productReferencesConnector\r\n        .get(payload.productCode, payload.referenceType, payload.pageSize)\r\n        .pipe(\r\n          map((data) => {\r\n            return new ProductActions.LoadProductReferencesSuccess({\r\n              productCode: payload.productCode,\r\n              list: data,\r\n            });\r\n          }),\r\n          catchError((_error) =>\r\n            of(\r\n              new ProductActions.LoadProductReferencesFail({\r\n                message: payload.productCode,\r\n              } as ErrorModel)\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private productReferencesConnector: ProductReferencesConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\r\nimport { ErrorModel } from '../../../model/misc.model';\r\nimport { ProductReviewsConnector } from '../../connectors/reviews/product-reviews.connector';\r\nimport { ProductActions } from '../actions/index';\r\nimport {\r\n  GlobalMessageService,\r\n  GlobalMessageType,\r\n} from '../../../global-message/index';\r\n\r\n@Injectable()\r\nexport class ProductReviewsEffects {\r\n  @Effect()\r\n  loadProductReviews$: Observable<\r\n    | ProductActions.LoadProductReviewsSuccess\r\n    | ProductActions.LoadProductReviewsFail\r\n  > = this.actions$.pipe(\r\n    ofType(ProductActions.LOAD_PRODUCT_REVIEWS),\r\n    map((action: ProductActions.LoadProductReviews) => action.payload),\r\n    mergeMap((productCode) => {\r\n      return this.productReviewsConnector.get(productCode).pipe(\r\n        map((data) => {\r\n          return new ProductActions.LoadProductReviewsSuccess({\r\n            productCode,\r\n            list: data,\r\n          });\r\n        }),\r\n        catchError((_error) =>\r\n          of(\r\n            new ProductActions.LoadProductReviewsFail({\r\n              message: productCode,\r\n            } as ErrorModel)\r\n          )\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  postProductReview: Observable<\r\n    | ProductActions.PostProductReviewSuccess\r\n    | ProductActions.PostProductReviewFail\r\n  > = this.actions$.pipe(\r\n    ofType(ProductActions.POST_PRODUCT_REVIEW),\r\n    map((action: ProductActions.PostProductReview) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.productReviewsConnector\r\n        .add(payload.productCode, payload.review)\r\n        .pipe(\r\n          map((reviewResponse) => {\r\n            return new ProductActions.PostProductReviewSuccess(reviewResponse);\r\n          }),\r\n          catchError((_error) =>\r\n            of(new ProductActions.PostProductReviewFail(payload.productCode))\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  showGlobalMessageOnPostProductReviewSuccess$ = this.actions$.pipe(\r\n    ofType(ProductActions.POST_PRODUCT_REVIEW_SUCCESS),\r\n    tap(() => {\r\n      this.globalMessageService.add(\r\n        { key: 'productReview.thankYouForReview' },\r\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private productReviewsConnector: ProductReviewsConnector,\r\n    private globalMessageService: GlobalMessageService\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, groupBy, map, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { ProductSearchConnector } from '../../connectors/search/product-search.connector';\r\nimport { ProductActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class ProductsSearchEffects {\r\n  @Effect()\r\n  searchProducts$: Observable<\r\n    ProductActions.SearchProductsSuccess | ProductActions.SearchProductsFail\r\n  > = this.actions$.pipe(\r\n    ofType(ProductActions.SEARCH_PRODUCTS),\r\n    groupBy((action: ProductActions.SearchProducts) => action.auxiliary),\r\n    mergeMap((group) =>\r\n      group.pipe(\r\n        switchMap((action: ProductActions.SearchProducts) => {\r\n          return this.productSearchConnector\r\n            .search(action.payload.queryText, action.payload.searchConfig)\r\n            .pipe(\r\n              map((data) => {\r\n                return new ProductActions.SearchProductsSuccess(\r\n                  data,\r\n                  action.auxiliary\r\n                );\r\n              }),\r\n              catchError((error) =>\r\n                of(\r\n                  new ProductActions.SearchProductsFail(\r\n                    makeErrorSerializable(error),\r\n                    action.auxiliary\r\n                  )\r\n                )\r\n              )\r\n            );\r\n        })\r\n      )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  getProductSuggestions$: Observable<\r\n    | ProductActions.GetProductSuggestionsSuccess\r\n    | ProductActions.GetProductSuggestionsFail\r\n  > = this.actions$.pipe(\r\n    ofType(ProductActions.GET_PRODUCT_SUGGESTIONS),\r\n    map((action: ProductActions.GetProductSuggestions) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.productSearchConnector\r\n        .getSuggestions(payload.term, payload.searchConfig.pageSize)\r\n        .pipe(\r\n          map((suggestions) => {\r\n            if (suggestions === undefined) {\r\n              return new ProductActions.GetProductSuggestionsSuccess([]);\r\n            }\r\n            return new ProductActions.GetProductSuggestionsSuccess(suggestions);\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new ProductActions.GetProductSuggestionsFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private productSearchConnector: ProductSearchConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { merge, Observable, of } from 'rxjs';\r\nimport { catchError, map, mergeMap } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { ProductConnector } from '../../connectors/product/product.connector';\r\nimport { ProductActions } from '../actions/index';\r\nimport { ScopedProductData } from '../../connectors/product/scoped-product-data';\r\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\r\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\r\nimport { Action } from '@ngrx/store';\r\nimport { withdrawOn } from '../../../util/withdraw-on';\r\n\r\n@Injectable()\r\nexport class ProductEffects {\r\n  // we want to cancel all ongoing requests when currency or language changes,\r\n  private contextChange$: Observable<Action> = this.actions$.pipe(\r\n    ofType(\r\n      SiteContextActions.CURRENCY_CHANGE,\r\n      SiteContextActions.LANGUAGE_CHANGE\r\n    )\r\n  );\r\n\r\n  loadProduct$ = createEffect(\r\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\r\n      ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\r\n    > =>\r\n      this.actions$.pipe(\r\n        ofType(ProductActions.LOAD_PRODUCT),\r\n        map((action: ProductActions.LoadProduct) => ({\r\n          code: action.payload,\r\n          scope: action.meta.scope,\r\n        })),\r\n        // we are grouping all load actions that happens at the same time\r\n        // to optimize loading and pass them all to productConnector.getMany\r\n        bufferDebounceTime(debounce, scheduler),\r\n        mergeMap((products) =>\r\n          merge(\r\n            ...this.productConnector\r\n              .getMany(products)\r\n              .map(this.productLoadEffect)\r\n          )\r\n        ),\r\n        withdrawOn(this.contextChange$)\r\n      )\r\n  );\r\n\r\n  private productLoadEffect(\r\n    productLoad: ScopedProductData\r\n  ): Observable<\r\n    ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\r\n  > {\r\n    return productLoad.data$.pipe(\r\n      map(\r\n        (data) =>\r\n          new ProductActions.LoadProductSuccess(\r\n            { code: productLoad.code, ...data },\r\n            productLoad.scope\r\n          )\r\n      ),\r\n      catchError((error) => {\r\n        return of(\r\n          new ProductActions.LoadProductFail(\r\n            productLoad.code,\r\n            makeErrorSerializable(error),\r\n            productLoad.scope\r\n          )\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private productConnector: ProductConnector\r\n  ) {}\r\n}\r\n","import { ProductReferencesEffects } from './product-references.effect';\nimport { ProductReviewsEffects } from './product-reviews.effect';\nimport { ProductsSearchEffects } from './product-search.effect';\nimport { ProductEffects } from './product.effect';\n\nexport const effects: any[] = [\n  ProductsSearchEffects,\n  ProductEffects,\n  ProductReviewsEffects,\n  ProductReferencesEffects,\n];\n\nexport * from './product-references.effect';\nexport * from './product-reviews.effect';\nexport * from './product-search.effect';\nexport * from './product.effect';\n","import { ProductReference } from '../../../model/product.model';\r\nimport { ProductActions } from '../actions/index';\r\nimport { ProductReferencesState } from '../product-state';\r\n\r\nexport const initialState: ProductReferencesState = {\r\n  productCode: '',\r\n  list: [],\r\n};\r\n\r\nexport function reducer(\r\n  state = initialState,\r\n  action: ProductActions.ProductReferencesAction\r\n): ProductReferencesState {\r\n  switch (action.type) {\r\n    case ProductActions.LOAD_PRODUCT_REFERENCES_SUCCESS: {\r\n      const productCode = action.payload.productCode;\r\n      const list = action.payload.list;\r\n\r\n      return {\r\n        ...state,\r\n        list: [...state.list, ...(list ? list : [])].reduce(\r\n          (\r\n            productReferences: ProductReference[],\r\n            productReference: ProductReference\r\n          ) => {\r\n            if (\r\n              !productReferences.some(\r\n                (obj) =>\r\n                  obj.referenceType === productReference.referenceType &&\r\n                  obj.target.code === productReference.target.code\r\n              )\r\n            ) {\r\n              productReferences.push(productReference);\r\n            }\r\n            return productReferences;\r\n          },\r\n          []\r\n        ),\r\n        productCode,\r\n      };\r\n    }\r\n\r\n    case ProductActions.CLEAN_PRODUCT_REFERENCES: {\r\n      return initialState;\r\n    }\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nexport const getProductReferenceList = (\r\n  state: ProductReferencesState\r\n): ProductReference[] => state.list;\r\nexport const getProductReferenceProductCode = (\r\n  state: ProductReferencesState\r\n): string => state.productCode;\r\n","import { Review } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReviewsState } from '../product-state';\n\nexport const initialState: ProductReviewsState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReviewsAction\n): ProductReviewsState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REVIEWS_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        productCode,\n        list,\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getReviewList = (state: ProductReviewsState): Review[] =>\n  state.list;\nexport const getReviewProductCode = (state: ProductReviewsState): string =>\n  state.productCode;\n","import { loaderReducer } from '../loader/loader.reducer';\r\nimport { EntityScopedLoaderAction } from '../../../product/store/actions/product.action';\r\nimport { ScopedLoaderState } from './scoped-loader.state';\r\nimport { Action } from '@ngrx/store';\r\n\r\nexport const initialScopedLoaderState: ScopedLoaderState<any> = {};\r\n\r\n/**\r\n * Higher order reducer designed to add scope support for loader reducer\r\n *\r\n * @param entityType\r\n * @param reducer\r\n */\r\nexport function scopedLoaderReducer<T>(\r\n  entityType: string,\r\n  reducer?: (state: T, action: Action) => T\r\n): (\r\n  state: ScopedLoaderState<T>,\r\n  action: EntityScopedLoaderAction\r\n) => ScopedLoaderState<T> {\r\n  const loader = loaderReducer<T>(entityType, reducer);\r\n\r\n  return (\r\n    state: ScopedLoaderState<T> = initialScopedLoaderState,\r\n    action: EntityScopedLoaderAction\r\n  ): ScopedLoaderState<T> => {\r\n    if (action && action.meta && action.meta.entityType === entityType) {\r\n      return {\r\n        ...state,\r\n        [action.meta.scope ?? '']: loader(state[action.meta.scope], action),\r\n      };\r\n    }\r\n    return state;\r\n  };\r\n}\r\n","import {\r\n  EntityScopedLoaderState,\r\n  ScopedLoaderState,\r\n} from './scoped-loader.state';\r\nimport { scopedLoaderReducer } from './scoped-loader.reducer';\r\n\r\nimport { entityReducer } from '../entity/entity.reducer';\r\nimport { LoaderAction } from '../loader/loader.action';\r\nimport { EntityScopedLoaderActions } from './entity-scoped-loader.actions';\r\n\r\n/**\r\n * Higher order reducer that wraps scopedLoaderReducer and EntityReducer enhancing\r\n * single state reducer to support multiple entities with generic loading flags and scopes\r\n */\r\nexport function entityScopedLoaderReducer<T>(\r\n  entityType: string,\r\n  reducer?: (state: T, action: LoaderAction) => T\r\n): (\r\n  state: EntityScopedLoaderState<T>,\r\n  action: EntityScopedLoaderActions.EntityScopedLoaderAction\r\n) => EntityScopedLoaderState<T> {\r\n  return entityReducer<ScopedLoaderState<T>>(\r\n    entityType,\r\n    scopedLoaderReducer<T>(entityType, reducer)\r\n  );\r\n}\r\n","import { InjectionToken, Provider } from '@angular/core';\r\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\r\nimport { Product } from '../../../model/product.model';\r\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\r\nimport { PRODUCT_DETAIL_ENTITY, ProductsState } from '../product-state';\r\nimport * as fromProductReferences from './product-references.reducer';\r\nimport * as fromProductReviews from './product-reviews.reducer';\r\nimport * as fromProductsSearch from './product-search.reducer';\r\nimport { entityScopedLoaderReducer } from '../../../state/utils/scoped-loader/entity-scoped-loader.reducer';\r\n\r\nexport function getReducers(): ActionReducerMap<ProductsState> {\r\n  return {\r\n    search: fromProductsSearch.reducer,\r\n    details: entityScopedLoaderReducer<Product>(PRODUCT_DETAIL_ENTITY),\r\n    reviews: fromProductReviews.reducer,\r\n    references: fromProductReferences.reducer,\r\n  };\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducerMap<\r\n  ProductsState\r\n>> = new InjectionToken<ActionReducerMap<ProductsState>>('ProductReducers');\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n\r\nexport function clearProductsState(\r\n  reducer: ActionReducer<any>\r\n): ActionReducer<any> {\r\n  return function (state, action) {\r\n    if (\r\n      action.type === SiteContextActions.CURRENCY_CHANGE ||\r\n      action.type === SiteContextActions.LANGUAGE_CHANGE\r\n    ) {\r\n      state = undefined;\r\n    }\r\n    return reducer(state, action);\r\n  };\r\n}\r\n\r\nexport const metaReducers: MetaReducer<any>[] = [clearProductsState];\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { provideDefaultConfigFactory } from '../../config/config.module';\r\nimport {\r\n  StateConfig,\r\n  StateTransferType,\r\n} from '../../state/config/state-config';\r\nimport { effects } from './effects/index';\r\nimport { PRODUCT_FEATURE } from './product-state';\r\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\r\n\r\nexport function productStoreConfigFactory(): StateConfig {\r\n  // if we want to reuse PRODUCT_FEATURE const in config, we have to use factory instead of plain object\r\n  const config: StateConfig = {\r\n    state: {\r\n      ssrTransfer: {\r\n        keys: { [PRODUCT_FEATURE]: StateTransferType.TRANSFER_STATE },\r\n      },\r\n    },\r\n  };\r\n  return config;\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    StoreModule.forFeature(PRODUCT_FEATURE, reducerToken, { metaReducers }),\r\n    EffectsModule.forFeature(effects),\r\n  ],\r\n  providers: [\r\n    provideDefaultConfigFactory(productStoreConfigFactory),\r\n    reducerProvider,\r\n  ],\r\n})\r\nexport class ProductStoreModule {}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\r\nimport { CategoryPageMetaResolver } from './services/category-page-meta.resolver';\r\nimport { CouponSearchPageResolver } from './services/coupon-search-page-meta.resolver';\r\nimport { ProductPageMetaResolver } from './services/product-page-meta.resolver';\r\nimport { SearchPageMetaResolver } from './services/search-page-meta.resolver';\r\nimport { ProductStoreModule } from './store/product-store.module';\r\n\r\nconst pageTitleResolvers = [\r\n  {\r\n    provide: PageMetaResolver,\r\n    useExisting: ProductPageMetaResolver,\r\n    multi: true,\r\n  },\r\n  {\r\n    provide: PageMetaResolver,\r\n    useExisting: CategoryPageMetaResolver,\r\n    multi: true,\r\n  },\r\n  {\r\n    provide: PageMetaResolver,\r\n    useExisting: SearchPageMetaResolver,\r\n    multi: true,\r\n  },\r\n  {\r\n    provide: PageMetaResolver,\r\n    useExisting: CouponSearchPageResolver,\r\n    multi: true,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [ProductStoreModule],\r\n})\r\nexport class ProductModule {\r\n  static forRoot(): ModuleWithProviders<ProductModule> {\r\n    return {\r\n      ngModule: ProductModule,\r\n      providers: [...pageTitleResolvers],\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { SmartEditService } from '../services/smart-edit.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CmsTicketInterceptor implements HttpInterceptor {\n  constructor(private service: SmartEditService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes('/cms/') && this.service.cmsTicketId) {\n      request = request.clone({\n        setParams: {\n          cmsTicketId: this.service.cmsTicketId,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { CmsTicketInterceptor } from './cms-ticket.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CmsTicketInterceptor,\n    multi: true,\n  },\n];\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({})\nexport class SmartEditModule {\n  static forRoot(): ModuleWithProviders<SmartEditModule> {\n    return {\n      ngModule: SmartEditModule,\n      providers: [...interceptors],\n    };\n  }\n}\n","import { NgModuleFactory, StaticProvider, Type } from '@angular/core';\nimport { SERVER_REQUEST_ORIGIN, SERVER_REQUEST_URL } from './ssr.providers';\n\n/**\n * These are the allowed options for the engine\n */\nexport interface NgSetupOptions {\n  bootstrap: Type<{}> | NgModuleFactory<{}>;\n  providers?: StaticProvider[];\n}\n\n/**\n * These are the allowed options for the render\n */\nexport interface RenderOptions extends NgSetupOptions {\n  req: {\n    protocol: string;\n    originalUrl: string;\n    get: (_: string) => string;\n  }; // Request;\n  res?: any; // Response;\n  url?: string;\n  document?: string;\n}\n\nexport type NgExpressEngineInstance = (\n  filePath: string,\n  options: RenderOptions,\n  callback: (err?: Error | null | undefined, html?: string | undefined) => void\n) => void;\n\nexport type NgExpressEngine = (\n  setupOptions: NgSetupOptions\n) => NgExpressEngineInstance;\n\n/**\n * The wrapper over the standard ngExpressEngine, that provides tokens for Spartacus\n * @param ngExpressEngine\n */\nexport class NgExpressEngineDecorator {\n  /**\n   * Returns the higher order ngExpressEngine with provided tokens for Spartacus\n   *\n   * @param ngExpressEngine\n   */\n  static get(ngExpressEngine: NgExpressEngine): NgExpressEngine {\n    const result = function cxNgExpressEngine(\n      setupOptions: NgSetupOptions\n    ): NgExpressEngineInstance {\n      return (filePath, options, callback) => {\n        const engineInstance = ngExpressEngine({\n          ...setupOptions,\n          providers: [\n            ...getServerRequestProviders(options),\n            ...(setupOptions.providers || []),\n          ],\n        });\n        return engineInstance(filePath, options, callback);\n      };\n    };\n    return result;\n  }\n}\n\n/**\n * Returns Spartacus' providers to be passed to the Angular express engine (in SSR)\n *\n * @param options\n */\nexport function getServerRequestProviders(\n  options: RenderOptions\n): StaticProvider[] {\n  return [\n    {\n      provide: SERVER_REQUEST_URL,\n      useValue: getRequestUrl(options.req),\n    },\n    {\n      provide: SERVER_REQUEST_ORIGIN,\n      useValue: getRequestOrigin(options.req),\n    },\n  ];\n}\n\nfunction getRequestUrl(req: any): string {\n  return getRequestOrigin(req) + req.originalUrl;\n}\n\nfunction getRequestOrigin(req: any): string {\n  return req.protocol + '://' + req.get('host');\n}\n","import { Injectable } from '@angular/core';\r\nimport { Config } from '../../config/config.module';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class StoreFinderConfig {\r\n  googleMaps?: {\r\n    apiUrl?: string;\r\n    apiKey?: string;\r\n    scale?: number;\r\n    selectedMarkerScale?: number;\r\n    radius?: number;\r\n  };\r\n}\r\n","import { StateUtils } from '../../state/utils';\r\nimport { StoreEntities } from '../model';\r\n\r\nexport const STORE_FINDER_FEATURE = 'stores';\r\nexport const STORE_FINDER_DATA = '[StoreFinder] Store Finder Data';\r\n\r\nexport interface StateWithStoreFinder {\r\n  [STORE_FINDER_FEATURE]: StoresState;\r\n}\r\n\r\nexport interface StoresState {\r\n  findStores: StateUtils.LoaderState<FindStoresState>;\r\n  viewAllStores: StateUtils.LoaderState<ViewAllStoresState>;\r\n}\r\n\r\nexport interface FindStoresState {\r\n  findStoresEntities: StoreEntities;\r\n}\r\n\r\nexport interface ViewAllStoresState {\r\n  viewAllStoresEntities: StoreEntities;\r\n}\r\n","import { GeoPoint } from '../../../model/misc.model';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { StoreFinderSearchConfig } from '../../model/search-config';\r\nimport { STORE_FINDER_DATA } from '../store-finder-state';\r\n\r\nexport const FIND_STORES_ON_HOLD = '[StoreFinder] On Hold';\r\nexport const FIND_STORES = '[StoreFinder] Find Stores';\r\nexport const FIND_STORES_FAIL = '[StoreFinder] Find Stores Fail';\r\nexport const FIND_STORES_SUCCESS = '[StoreFinder] Find Stores Success';\r\n\r\nexport const FIND_STORE_BY_ID = '[StoreFinder] Find a Store by Id';\r\nexport const FIND_STORE_BY_ID_FAIL = '[StoreFinder] Find a Store by Id Fail';\r\nexport const FIND_STORE_BY_ID_SUCCESS =\r\n  '[StoreFinder] Find a Store by Id Success';\r\n\r\nexport class FindStoresOnHold extends StateUtils.LoaderLoadAction {\r\n  readonly type = FIND_STORES_ON_HOLD;\r\n  constructor() {\r\n    super(STORE_FINDER_DATA);\r\n  }\r\n}\r\n\r\nexport class FindStores extends StateUtils.LoaderLoadAction {\r\n  readonly type = FIND_STORES;\r\n  constructor(\r\n    public payload: {\r\n      queryText: string;\r\n      searchConfig?: StoreFinderSearchConfig;\r\n      longitudeLatitude?: GeoPoint;\r\n      useMyLocation?: boolean;\r\n      countryIsoCode?: string;\r\n      radius?: number;\r\n    }\r\n  ) {\r\n    super(STORE_FINDER_DATA);\r\n  }\r\n}\r\n\r\nexport class FindStoresFail extends StateUtils.LoaderFailAction {\r\n  readonly type = FIND_STORES_FAIL;\r\n  constructor(public payload: any) {\r\n    super(STORE_FINDER_DATA, payload);\r\n  }\r\n}\r\n\r\nexport class FindStoresSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = FIND_STORES_SUCCESS;\r\n  constructor(public payload: any) {\r\n    super(STORE_FINDER_DATA);\r\n  }\r\n}\r\n\r\nexport class FindStoreById extends StateUtils.LoaderLoadAction {\r\n  readonly type = FIND_STORE_BY_ID;\r\n  constructor(public payload: { storeId: string }) {\r\n    super(STORE_FINDER_DATA);\r\n  }\r\n}\r\n\r\nexport class FindStoreByIdFail extends StateUtils.LoaderFailAction {\r\n  readonly type = FIND_STORE_BY_ID_FAIL;\r\n  constructor(public payload: any) {\r\n    super(STORE_FINDER_DATA, payload);\r\n  }\r\n}\r\n\r\nexport class FindStoreByIdSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = FIND_STORE_BY_ID_SUCCESS;\r\n  constructor(public payload: any) {\r\n    super(STORE_FINDER_DATA);\r\n  }\r\n}\r\n\r\nexport type FindStoresAction =\r\n  | FindStoresOnHold\r\n  | FindStores\r\n  | FindStoresFail\r\n  | FindStoresSuccess\r\n  | FindStoreById\r\n  | FindStoreByIdFail\r\n  | FindStoreByIdSuccess;\r\n","import { StateUtils } from '../../../state/utils/index';\r\nimport { STORE_FINDER_DATA } from '../store-finder-state';\r\n\r\nexport const VIEW_ALL_STORES = '[StoreFinder] View All Stores';\r\nexport const VIEW_ALL_STORES_FAIL = '[StoreFinder] View All Stores Fail';\r\nexport const VIEW_ALL_STORES_SUCCESS = '[StoreFinder] View All Stores Success';\r\n\r\nexport class ViewAllStores extends StateUtils.LoaderLoadAction {\r\n  readonly type = VIEW_ALL_STORES;\r\n  constructor() {\r\n    super(STORE_FINDER_DATA);\r\n  }\r\n}\r\n\r\nexport class ViewAllStoresFail extends StateUtils.LoaderFailAction {\r\n  readonly type = VIEW_ALL_STORES_FAIL;\r\n  constructor(public payload: any) {\r\n    super(STORE_FINDER_DATA, payload);\r\n  }\r\n}\r\n\r\nexport class ViewAllStoresSuccess extends StateUtils.LoaderSuccessAction {\r\n  readonly type = VIEW_ALL_STORES_SUCCESS;\r\n  constructor(public payload: any) {\r\n    super(STORE_FINDER_DATA);\r\n  }\r\n}\r\n\r\nexport type ViewAllStoresAction =\r\n  | ViewAllStores\r\n  | ViewAllStoresFail\r\n  | ViewAllStoresSuccess;\r\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  STORE_FINDER_FEATURE,\n} from '../store-finder-state';\n\nexport const getStoreFinderState: MemoizedSelector<\n  StateWithStoreFinder,\n  StoresState\n> = createFeatureSelector<StoresState>(STORE_FINDER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport {\r\n  FindStoresState,\r\n  StateWithStoreFinder,\r\n  StoresState,\r\n} from '../store-finder-state';\r\nimport { getStoreFinderState } from './feature.selector';\r\n\r\nexport const getFindStoresState: MemoizedSelector<\r\n  StateWithStoreFinder,\r\n  LoaderState<FindStoresState>\r\n> = createSelector(\r\n  getStoreFinderState,\r\n  (storesState: StoresState) => storesState.findStores\r\n);\r\n\r\nexport const getFindStoresEntities: MemoizedSelector<\r\n  StateWithStoreFinder,\r\n  FindStoresState\r\n> = createSelector(getFindStoresState, (state) =>\r\n  StateUtils.loaderValueSelector(state)\r\n);\r\n\r\nexport const getStoresLoading: MemoizedSelector<\r\n  StateWithStoreFinder,\r\n  boolean\r\n> = createSelector(getFindStoresState, (state) =>\r\n  StateUtils.loaderLoadingSelector(state)\r\n);\r\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\r\nimport {\r\n  StateWithStoreFinder,\r\n  StoresState,\r\n  ViewAllStoresState,\r\n} from '../store-finder-state';\r\nimport { getStoreFinderState } from './feature.selector';\r\n\r\nexport const getViewAllStoresState: MemoizedSelector<\r\n  StateWithStoreFinder,\r\n  LoaderState<ViewAllStoresState>\r\n> = createSelector(\r\n  getStoreFinderState,\r\n  (storesState: StoresState) => storesState.viewAllStores\r\n);\r\n\r\nexport const getViewAllStoresEntities: MemoizedSelector<\r\n  StateWithStoreFinder,\r\n  ViewAllStoresState\r\n> = createSelector(getViewAllStoresState, (state) =>\r\n  StateUtils.loaderValueSelector(state)\r\n);\r\n\r\nexport const getViewAllStoresLoading: MemoizedSelector<\r\n  StateWithStoreFinder,\r\n  boolean\r\n> = createSelector(getViewAllStoresState, (state) =>\r\n  StateUtils.loaderLoadingSelector(state)\r\n);\r\n","import { Injectable } from '@angular/core';\r\nimport { Action, select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { GeoPoint } from '../../model/misc.model';\r\nimport { WindowRef } from '../../window/window-ref';\r\nimport { StoreFinderActions } from '../store/actions/index';\r\nimport { StoreFinderSelectors } from '../store/selectors/index';\r\nimport {\r\n  FindStoresState,\r\n  StateWithStoreFinder,\r\n  ViewAllStoresState,\r\n} from '../store/store-finder-state';\r\nimport { StoreFinderSearchConfig } from './../model/search-config';\r\nimport {\r\n  GlobalMessageService,\r\n  GlobalMessageType,\r\n} from '../../global-message/index';\r\nimport { RoutingService } from '../../routing/index';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class StoreFinderService {\r\n  private geolocationWatchId: number = null;\r\n\r\n  constructor(\r\n    protected store: Store<StateWithStoreFinder>,\r\n    protected winRef: WindowRef,\r\n    protected globalMessageService: GlobalMessageService,\r\n    protected routingService: RoutingService\r\n  ) {}\r\n\r\n  /**\r\n   * Returns boolean observable for store's loading state\r\n   */\r\n  getStoresLoading(): Observable<boolean> {\r\n    return this.store.pipe(select(StoreFinderSelectors.getStoresLoading));\r\n  }\r\n\r\n  /**\r\n   * Returns observable for store's entities\r\n   */\r\n  getFindStoresEntities(): Observable<FindStoresState> {\r\n    return this.store.pipe(select(StoreFinderSelectors.getFindStoresEntities));\r\n  }\r\n\r\n  /**\r\n   * Returns boolean observable for view all store's loading state\r\n   */\r\n  getViewAllStoresLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(StoreFinderSelectors.getViewAllStoresLoading)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns observable for view all store's entities\r\n   */\r\n  getViewAllStoresEntities(): Observable<ViewAllStoresState> {\r\n    return this.store.pipe(\r\n      select(StoreFinderSelectors.getViewAllStoresEntities)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Store finding action functionality\r\n   * @param queryText text query\r\n   * @param searchConfig search configuration\r\n   * @param longitudeLatitude longitude and latitude coordinates\r\n   * @param countryIsoCode country ISO code\r\n   * @param useMyLocation current location coordinates\r\n   * @param radius radius of the scope from the center point\r\n   */\r\n  findStoresAction(\r\n    queryText: string,\r\n    searchConfig?: StoreFinderSearchConfig,\r\n    longitudeLatitude?: GeoPoint,\r\n    countryIsoCode?: string,\r\n    useMyLocation?: boolean,\r\n    radius?: number\r\n  ) {\r\n    if (useMyLocation && this.winRef.nativeWindow) {\r\n      this.clearWatchGeolocation(new StoreFinderActions.FindStoresOnHold());\r\n      this.geolocationWatchId = this.winRef.nativeWindow.navigator.geolocation.watchPosition(\r\n        (pos: Position) => {\r\n          const position: GeoPoint = {\r\n            longitude: pos.coords.longitude,\r\n            latitude: pos.coords.latitude,\r\n          };\r\n\r\n          this.clearWatchGeolocation(\r\n            new StoreFinderActions.FindStores({\r\n              queryText: queryText,\r\n              searchConfig: searchConfig,\r\n              longitudeLatitude: position,\r\n              countryIsoCode: countryIsoCode,\r\n              radius: radius,\r\n            })\r\n          );\r\n        },\r\n        () => {\r\n          this.globalMessageService.add(\r\n            { key: 'storeFinder.geolocationNotEnabled' },\r\n            GlobalMessageType.MSG_TYPE_ERROR\r\n          );\r\n          this.routingService.go(['/store-finder']);\r\n        }\r\n      );\r\n    } else {\r\n      this.clearWatchGeolocation(\r\n        new StoreFinderActions.FindStores({\r\n          queryText: queryText,\r\n          searchConfig: searchConfig,\r\n          longitudeLatitude: longitudeLatitude,\r\n          countryIsoCode: countryIsoCode,\r\n          radius: radius,\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * View all stores\r\n   */\r\n  viewAllStores() {\r\n    this.clearWatchGeolocation(new StoreFinderActions.ViewAllStores());\r\n  }\r\n\r\n  /**\r\n   * View all stores by id\r\n   * @param storeId store id\r\n   */\r\n  viewStoreById(storeId: string) {\r\n    this.clearWatchGeolocation(\r\n      new StoreFinderActions.FindStoreById({ storeId })\r\n    );\r\n  }\r\n\r\n  private clearWatchGeolocation(callbackAction: Action) {\r\n    if (this.geolocationWatchId !== null) {\r\n      this.winRef.nativeWindow.navigator.geolocation.clearWatch(\r\n        this.geolocationWatchId\r\n      );\r\n      this.geolocationWatchId = null;\r\n    }\r\n    this.store.dispatch(callbackAction);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { PointOfService } from '../../model/point-of-service.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class StoreDataService {\r\n  readonly DECIMAL_BASE: 10;\r\n  readonly weekDays = {\r\n    0: 'Sun',\r\n    1: 'Mon',\r\n    2: 'Tue',\r\n    3: 'Wed',\r\n    4: 'Thu',\r\n    5: 'Fri',\r\n    6: 'Sat',\r\n  };\r\n\r\n  /**\r\n   * Returns store latitude\r\n   * @param location store location\r\n   */\r\n  getStoreLatitude(location: PointOfService): number {\r\n    return location.geoPoint.latitude;\r\n  }\r\n\r\n  /**\r\n   * Returns store longitude\r\n   * @param location store location\r\n   */\r\n  getStoreLongitude(location: PointOfService): number {\r\n    return location.geoPoint.longitude;\r\n  }\r\n\r\n  /**\r\n   * Returns store closing time\r\n   * @param location store location\r\n   * @param date date to compare\r\n   */\r\n  getStoreClosingTime(location: PointOfService, date: Date): string {\r\n    const requestedDaySchedule = this.getSchedule(location, date);\r\n\r\n    if (requestedDaySchedule) {\r\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\r\n        return 'closed';\r\n      }\r\n\r\n      if (requestedDaySchedule.closingTime) {\r\n        return requestedDaySchedule.closingTime.formattedHour;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns store opening time\r\n   * @param location store location\r\n   * @param date date to compare\r\n   */\r\n  getStoreOpeningTime(location: PointOfService, date: Date): string {\r\n    const requestedDaySchedule = this.getSchedule(location, date);\r\n\r\n    if (requestedDaySchedule) {\r\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\r\n        return 'closed';\r\n      }\r\n\r\n      if (requestedDaySchedule.openingTime) {\r\n        return requestedDaySchedule.openingTime.formattedHour;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extracts schedule from the given location for the given date\r\n   * @param location location\r\n   * @param date date\r\n   *\r\n   * @returns payload describing the store's schedule for the given day.\r\n   */\r\n  protected getSchedule(location: PointOfService, date: Date): any {\r\n    const weekday = this.weekDays[date.getDay()];\r\n    return location.openingHours.weekDayOpeningList.find(\r\n      (weekDayOpeningListItem) => weekDayOpeningListItem.weekDay === weekday\r\n    );\r\n  }\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ExternalJsFileLoader {\r\n  constructor(@Inject(DOCUMENT) protected document: any) {}\r\n\r\n  /**\r\n   * Loads a javascript from an external URL\r\n   * @param src URL for the script to be loaded\r\n   * @param params additional parameters to be attached to the given URL\r\n   * @param callback a function to be invoked after the script has been loaded\r\n   */\r\n  public load(src: string, params?: Object, callback?: EventListener): void {\r\n    const script = this.document.createElement('script');\r\n    script.type = 'text/javascript';\r\n    if (params) {\r\n      script.src = src + this.parseParams(params);\r\n    } else {\r\n      script.src = src;\r\n    }\r\n\r\n    script.async = true;\r\n    script.defer = true;\r\n    if (callback) {\r\n      script.addEventListener('load', callback);\r\n    }\r\n\r\n    document.head.appendChild(script);\r\n  }\r\n\r\n  /**\r\n   * Parses the given object with parameters to a string \"param1=value1&param2=value2\"\r\n   * @param params object containing parameters\r\n   */\r\n  private parseParams(params: Object): string {\r\n    let result = '';\r\n    const keysArray = Object.keys(params);\r\n    if (keysArray.length > 0) {\r\n      result =\r\n        '?' +\r\n        keysArray\r\n          .map((key) => encodeURI(key) + '=' + encodeURI(params[key]))\r\n          .join('&');\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","/// <reference types=\"@types/googlemaps\" />\r\nimport { ExternalJsFileLoader } from './external-js-file-loader.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { StoreDataService } from '../facade/store-data.service';\r\nimport { StoreFinderConfig } from '../config/store-finder-config';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class GoogleMapRendererService {\r\n  private googleMap: google.maps.Map = null;\r\n  private markers: google.maps.Marker[];\r\n\r\n  constructor(\r\n    protected config: StoreFinderConfig,\r\n    protected externalJsFileLoader: ExternalJsFileLoader,\r\n    protected storeDataService: StoreDataService\r\n  ) {}\r\n\r\n  /**\r\n   * Renders google map on the given element and draws markers on it.\r\n   * If map already exists it will use an existing map otherwise it will create one\r\n   * @param mapElement HTML element inside of which the map will be displayed\r\n   * @param locations array containign geo data to be displayed on the map\r\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\r\n   */\r\n  renderMap(\r\n    mapElement: HTMLElement,\r\n    locations: any[],\r\n    selectMarkerHandler?: Function\r\n  ): void {\r\n    if (this.googleMap === null) {\r\n      this.externalJsFileLoader.load(\r\n        this.config.googleMaps.apiUrl,\r\n        { key: this.config.googleMaps.apiKey },\r\n        () => {\r\n          this.drawMap(mapElement, locations, selectMarkerHandler);\r\n        }\r\n      );\r\n    } else {\r\n      this.drawMap(mapElement, locations, selectMarkerHandler);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Centers the map to the given point\r\n   * @param latitute latitude of the new center\r\n   * @param longitude longitude of the new center\r\n   */\r\n  centerMap(latitute: number, longitude: number): void {\r\n    this.googleMap.panTo({ lat: latitute, lng: longitude });\r\n    this.googleMap.setZoom(this.config.googleMaps.selectedMarkerScale);\r\n  }\r\n\r\n  /**\r\n   * Defines and returns {@link google.maps.LatLng} representing a point where the map will be centered\r\n   * @param locations list of locations\r\n   */\r\n  private defineMapCenter(locations: any[]): google.maps.LatLng {\r\n    return new google.maps.LatLng(\r\n      this.storeDataService.getStoreLatitude(locations[0]),\r\n      this.storeDataService.getStoreLongitude(locations[0])\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Creates google map inside if the given HTML element centered to the given point\r\n   * @param mapElement {@link HTMLElement} inside of which the map will be created\r\n   * @param mapCenter {@link google.maps.LatLng} the point where the map will be centered\r\n   */\r\n  private initMap(\r\n    mapElement: HTMLElement,\r\n    mapCenter: google.maps.LatLng\r\n  ): void {\r\n    type GestureHandlingOptions = 'cooperative' | 'greedy' | 'none' | 'auto';\r\n    const gestureOption: GestureHandlingOptions = 'greedy';\r\n\r\n    const mapProp = {\r\n      center: mapCenter,\r\n      zoom: this.config.googleMaps.scale,\r\n      mapTypeId: google.maps.MapTypeId.ROADMAP,\r\n      gestureHandling: gestureOption,\r\n    };\r\n    this.googleMap = new google.maps.Map(mapElement, mapProp);\r\n  }\r\n\r\n  /**\r\n   * Erases the current map's markers and create a new one based on the given locations\r\n   * @param locations array of locations to be displayed on the map\r\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\r\n   */\r\n  private createMarkers(\r\n    locations: any[],\r\n    selectMarkerHandler?: Function\r\n  ): void {\r\n    this.markers = [];\r\n    locations.forEach((element, index) => {\r\n      const marker = new google.maps.Marker({\r\n        position: new google.maps.LatLng(\r\n          this.storeDataService.getStoreLatitude(element),\r\n          this.storeDataService.getStoreLongitude(element)\r\n        ),\r\n        label: index + 1 + '',\r\n      });\r\n      this.markers.push(marker);\r\n      marker.setMap(this.googleMap);\r\n      marker.addListener('mouseover', function () {\r\n        marker.setAnimation(google.maps.Animation.BOUNCE);\r\n      });\r\n      marker.addListener('mouseout', function () {\r\n        marker.setAnimation(null);\r\n      });\r\n      if (selectMarkerHandler) {\r\n        marker.addListener('click', function () {\r\n          selectMarkerHandler(index);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize and draw the map\r\n   * @param mapElement {@link HTMLElement} inside of which the map will be drawn\r\n   * @param locations array of locations to be displayed on the map\r\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\r\n   */\r\n  private drawMap(\r\n    mapElement: HTMLElement,\r\n    locations: any[],\r\n    selectMarkerHandler: Function\r\n  ) {\r\n    this.initMap(mapElement, this.defineMapCenter(locations));\r\n    this.createMarkers(locations, selectMarkerHandler);\r\n  }\r\n}\r\n","import { StoreFinderConfig } from './store-finder-config';\r\n\r\nexport const defaultStoreFinderConfig: StoreFinderConfig = {\r\n  googleMaps: {\r\n    apiUrl: 'https://maps.googleapis.com/maps/api/js',\r\n    apiKey: '',\r\n    scale: 5,\r\n    selectedMarkerScale: 17,\r\n    radius: 50000,\r\n  },\r\n};\r\n","import { ActionReducerMap, MetaReducer } from '@ngrx/store';\r\n\r\nimport { InjectionToken, Provider } from '@angular/core';\r\nimport { StoresState, STORE_FINDER_DATA } from '../store-finder-state';\r\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\r\n\r\nexport function getReducers(): ActionReducerMap<StoresState> {\r\n  return {\r\n    findStores: loaderReducer(STORE_FINDER_DATA),\r\n    viewAllStores: loaderReducer(STORE_FINDER_DATA),\r\n  };\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducerMap<\r\n  StoresState\r\n>> = new InjectionToken<ActionReducerMap<StoresState>>('StoreFinderReducers');\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n\r\nexport const metaReducers: MetaReducer<any>[] = [];\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\r\nimport { StoreFinderActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class FindStoresEffect {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private storeFinderConnector: StoreFinderConnector\r\n  ) {}\r\n\r\n  @Effect()\r\n  findStores$: Observable<\r\n    StoreFinderActions.FindStoresSuccess | StoreFinderActions.FindStoresFail\r\n  > = this.actions$.pipe(\r\n    ofType(StoreFinderActions.FIND_STORES),\r\n    map((action: StoreFinderActions.FindStores) => action.payload),\r\n    mergeMap((payload) =>\r\n      this.storeFinderConnector\r\n        .search(\r\n          payload.queryText,\r\n          payload.searchConfig,\r\n          payload.longitudeLatitude,\r\n          payload.radius\r\n        )\r\n        .pipe(\r\n          map((data) => {\r\n            if (payload.countryIsoCode) {\r\n              data.stores = data.stores.filter(\r\n                (store) =>\r\n                  store.address.country.isocode === payload.countryIsoCode\r\n              );\r\n              data.stores.sort((a, b) =>\r\n                a.name < b.name ? -1 : a.name > b.name ? 1 : 0\r\n              );\r\n            }\r\n\r\n            return new StoreFinderActions.FindStoresSuccess(data);\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new StoreFinderActions.FindStoresFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  findStoreById$: Observable<\r\n    | StoreFinderActions.FindStoreByIdSuccess\r\n    | StoreFinderActions.FindStoreByIdFail\r\n  > = this.actions$.pipe(\r\n    ofType(StoreFinderActions.FIND_STORE_BY_ID),\r\n    map((action: StoreFinderActions.FindStoreById) => action.payload),\r\n    switchMap((payload) =>\r\n      this.storeFinderConnector.get(payload.storeId).pipe(\r\n        map((data) => new StoreFinderActions.FindStoreByIdSuccess(data)),\r\n        catchError((error) =>\r\n          of(\r\n            new StoreFinderActions.FindStoreByIdFail(\r\n              makeErrorSerializable(error)\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\r\nimport { StoreFinderActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class ViewAllStoresEffect {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private storeFinderConnector: StoreFinderConnector\r\n  ) {}\r\n\r\n  @Effect()\r\n  viewAllStores$: Observable<\r\n    | StoreFinderActions.ViewAllStoresSuccess\r\n    | StoreFinderActions.ViewAllStoresFail\r\n  > = this.actions$.pipe(\r\n    ofType(StoreFinderActions.VIEW_ALL_STORES),\r\n    switchMap(() => {\r\n      return this.storeFinderConnector.getCounts().pipe(\r\n        map((data) => {\r\n          data.sort((a, b) => (a.name < b.name ? -1 : a.name > b.name ? 1 : 0));\r\n          return new StoreFinderActions.ViewAllStoresSuccess(data);\r\n        }),\r\n        catchError((error) =>\r\n          of(\r\n            new StoreFinderActions.ViewAllStoresFail(\r\n              makeErrorSerializable(error)\r\n            )\r\n          )\r\n        )\r\n      );\r\n    })\r\n  );\r\n}\r\n","import { FindStoresEffect } from './find-stores.effect';\nimport { ViewAllStoresEffect } from './view-all-stores.effect';\n\nexport const effects: any[] = [FindStoresEffect, ViewAllStoresEffect];\n\nexport * from './find-stores.effect';\nexport * from './view-all-stores.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { STORE_FINDER_FEATURE } from './store-finder-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(STORE_FINDER_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class StoreFinderStoreModule {}\n","import { NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '../config/config.module';\r\nimport { defaultStoreFinderConfig } from './config/default-store-finder-config';\r\nimport { StoreFinderStoreModule } from './store/store-finder-store.module';\r\n\r\n@NgModule({\r\n  imports: [StoreFinderStoreModule],\r\n  providers: [provideDefaultConfig(defaultStoreFinderConfig)],\r\n})\r\nexport class StoreFinderCoreModule {}\r\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport { UserAdapter } from './user.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConnector {\n  constructor(protected adapter: UserAdapter) {}\n\n  get(userId: string): Observable<User> {\n    return this.adapter.load(userId);\n  }\n\n  update(username: string, user: User): Observable<{}> {\n    return this.adapter.update(username, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    return this.adapter.register(user);\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    return this.adapter.registerGuest(guid, password);\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    return this.adapter.requestForgotPasswordEmail(userEmailAddress);\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    return this.adapter.resetPassword(token, newPassword);\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    return this.adapter.updateEmail(userId, currentPassword, newUserId);\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    return this.adapter.updatePassword(userId, oldPassword, newPassword);\n  }\n\n  remove(userId: string): Observable<{}> {\n    return this.adapter.remove(userId);\n  }\n\n  getTitles(): Observable<Title[]> {\n    return this.adapter.loadTitles();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserConsentAdapter } from './user-consent.adapter';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentConnector {\n  constructor(protected adapter: UserConsentAdapter) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    return this.adapter.loadConsents(userId);\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    return this.adapter.giveConsent(\n      userId,\n      consentTemplateId,\n      consentTemplateVersion\n    );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    return this.adapter.withdrawConsent(userId, consentCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserPaymentAdapter } from './user-payment.adapter';\nimport { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentConnector {\n  constructor(protected adapter: UserPaymentAdapter) {}\n\n  getAll(userId: string): Observable<PaymentDetails[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.delete(userId, paymentMethodID);\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.setDefault(userId, paymentMethodID);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport { UserOrderAdapter } from './user-order.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderConnector {\n  constructor(protected adapter: UserOrderAdapter) {}\n\n  public get(userId: string, orderCode: string): Observable<Order> {\n    return this.adapter.load(userId, orderCode);\n  }\n\n  public getHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    return this.adapter.loadHistory(userId, pageSize, currentPage, sort);\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking> {\n    return this.adapter.getConsignmentTracking(\n      orderCode,\n      consignmentCode,\n      userId\n    );\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    return this.adapter.cancel(userId, orderCode, cancelRequestInput);\n  }\n\n  public return(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    return this.adapter.createReturnRequest(userId, returnRequestInput);\n  }\n\n  public getReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    return this.adapter.loadReturnRequestDetail(userId, returnRequestCode);\n  }\n\n  public getReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    return this.adapter.loadReturnRequestList(\n      userId,\n      pageSize,\n      currentPage,\n      sort\n    );\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    return this.adapter.cancelReturnRequest(\n      userId,\n      returnRequestCode,\n      returnRequestModification\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport { CustomerCouponAdapter } from './customer-coupon.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponConnector {\n  constructor(protected adapter: CustomerCouponAdapter) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    return this.adapter.getCustomerCoupons(userId, pageSize, currentPage, sort);\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    return this.adapter.turnOnNotification(userId, couponCode);\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    return this.adapter.turnOffNotification(userId, couponCode);\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    return this.adapter.claimCustomerCoupon(userId, couponCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserInterestsAdapter } from './user-interests.adapter';\nimport { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsConnector {\n  constructor(protected adapter: UserInterestsAdapter) {}\n  getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    return this.adapter.getInterests(\n      userId,\n      pageSize,\n      currentPage,\n      sort,\n      productCode,\n      notificationType\n    );\n  }\n\n  removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    return this.adapter.removeInterest(userId, item);\n  }\n\n  addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    return this.adapter.addInterest(userId, productCode, notificationType);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { merge, Observable } from 'rxjs';\r\nimport { distinctUntilChanged, map } from 'rxjs/operators';\r\nimport { AnonymousConsentsService } from '../../anonymous-consents/index';\r\nimport { AnonymousConsent, Consent } from '../../model/index';\r\nimport { UserConsentService } from './user-consent.service';\r\n\r\n/**\r\n * Unified facade for both anonymous and registered user consents.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class ConsentService {\r\n  constructor(\r\n    protected anonymousConsentsService: AnonymousConsentsService,\r\n    protected userConsentService: UserConsentService\r\n  ) {}\r\n\r\n  /**\r\n   * Returns either anonymous consent or registered consent as they are emmited.\r\n   * @param templateCode for which to return either anonymous or registered consent.\r\n   */\r\n  getConsent(templateCode: string): Observable<AnonymousConsent | Consent> {\r\n    return merge(\r\n      this.userConsentService.getConsent(templateCode),\r\n      this.anonymousConsentsService.getConsent(templateCode)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Checks if the `templateId`'s template has a given consent.\r\n   * The method returns `false` if the consent doesn't exist or if it's withdrawn. Otherwise, `true` is returned.\r\n   *\r\n   * @param templateId of a template which's consent should be checked\r\n   */\r\n  checkConsentGivenByTemplateId(templateId: string): Observable<boolean> {\r\n    return this.getConsent(templateId).pipe(\r\n      map((consent) => {\r\n        if (!consent) {\r\n          return false;\r\n        }\r\n\r\n        return this.isAnonymousConsentType(consent)\r\n          ? this.anonymousConsentsService.isConsentGiven(consent)\r\n          : this.userConsentService.isConsentGiven(consent);\r\n      }),\r\n      distinctUntilChanged()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Checks if the `templateId`'s template has a withdrawn consent.\r\n   * The method returns `true` if the consent doesn't exist or if it's withdrawn. Otherwise, `false` is returned.\r\n   *\r\n   * @param templateId of a template which's consent should be checked\r\n   */\r\n  checkConsentWithdrawnByTemplateId(templateId: string): Observable<boolean> {\r\n    return this.getConsent(templateId).pipe(\r\n      map((consent) => {\r\n        if (!consent) {\r\n          return true;\r\n        }\r\n\r\n        return this.isAnonymousConsentType(consent)\r\n          ? this.anonymousConsentsService.isConsentWithdrawn(consent)\r\n          : this.userConsentService.isConsentWithdrawn(consent);\r\n      }),\r\n      distinctUntilChanged()\r\n    );\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentGiven(consent)` or `this.userConsentService.isConsentGiven`\r\n   *\r\n   * @param consent a consent to check\r\n   */\r\n  isConsentGiven(consent: AnonymousConsent | Consent): boolean {\r\n    return this.isAnonymousConsentType(consent)\r\n      ? this.anonymousConsentsService.isConsentGiven(consent)\r\n      : this.userConsentService.isConsentGiven(consent);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentWithdrawn(consent)` or `this.userConsentService.isConsentWithdrawn`\r\n   *\r\n   * @param consent a consent to check\r\n   */\r\n  isConsentWithdrawn(consent: AnonymousConsent | Consent): boolean {\r\n    return this.isAnonymousConsentType(consent)\r\n      ? this.anonymousConsentsService.isConsentWithdrawn(consent)\r\n      : this.userConsentService.isConsentWithdrawn(consent);\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the provided consent is of type `AnonymousConsent`. Otherwise, `false` is returned.\r\n   */\r\n  isAnonymousConsentType(\r\n    consent: AnonymousConsent | Consent\r\n  ): consent is AnonymousConsent {\r\n    if (!consent) {\r\n      return false;\r\n    }\r\n\r\n    return (consent as AnonymousConsent).templateCode !== undefined;\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the provided consent is of type `Consent`. Otherwise, `false` is returned.\r\n   */\r\n  isConsentType(consent: AnonymousConsent | Consent): consent is Consent {\r\n    if (!consent) {\r\n      return false;\r\n    }\r\n\r\n    return (consent as Consent).code !== undefined;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { Address, Country, Region } from '../../model/address.model';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport { UserActions } from '../store/actions/index';\r\nimport { UsersSelectors } from '../store/selectors/index';\r\nimport { StateWithUser } from '../store/user-state';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserAddressService {\r\n  constructor(\r\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\r\n    protected authService: AuthService\r\n  ) {}\r\n\r\n  /**\r\n   * Retrieves user's addresses\r\n   */\r\n  loadAddresses(): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(new UserActions.LoadUserAddresses(userId));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds user address\r\n   * @param address a user address\r\n   */\r\n  addUserAddress(address: Address): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.AddUserAddress({\r\n          userId,\r\n          address,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets user address as default\r\n   * @param addressId a user address ID\r\n   */\r\n  setAddressAsDefault(addressId: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.UpdateUserAddress({\r\n          userId,\r\n          addressId,\r\n          address: { defaultAddress: true },\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates existing user address\r\n   * @param addressId a user address ID\r\n   * @param address a user address\r\n   */\r\n  updateUserAddress(addressId: string, address: Address): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.UpdateUserAddress({\r\n          userId,\r\n          addressId,\r\n          address,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Deletes existing user address\r\n   * @param addressId a user address ID\r\n   */\r\n  deleteUserAddress(addressId: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.DeleteUserAddress({\r\n          userId,\r\n          addressId,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns addresses\r\n   */\r\n  getAddresses(): Observable<Address[]> {\r\n    return this.store.pipe(select(UsersSelectors.getAddresses));\r\n  }\r\n\r\n  /**\r\n   * Returns a loading flag for addresses\r\n   */\r\n  getAddressesLoading(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getAddressesLoading));\r\n  }\r\n\r\n  getAddressesLoadedSuccess(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getAddressesLoadedSuccess));\r\n  }\r\n  /**\r\n   * Retrieves delivery countries\r\n   */\r\n  loadDeliveryCountries(): void {\r\n    this.store.dispatch(new UserActions.LoadDeliveryCountries());\r\n  }\r\n\r\n  /**\r\n   * Returns all delivery countries\r\n   */\r\n  getDeliveryCountries(): Observable<Country[]> {\r\n    return this.store.pipe(select(UsersSelectors.getAllDeliveryCountries));\r\n  }\r\n\r\n  /**\r\n   * Returns a country based on the provided `isocode`\r\n   * @param isocode an isocode for a country\r\n   */\r\n  getCountry(isocode: string): Observable<Country> {\r\n    return this.store.pipe(\r\n      select(UsersSelectors.countrySelectorFactory(isocode))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Retrieves regions for specified country by `countryIsoCode`\r\n   * @param countryIsoCode\r\n   */\r\n  loadRegions(countryIsoCode: string): void {\r\n    this.store.dispatch(new UserActions.LoadRegions(countryIsoCode));\r\n  }\r\n\r\n  /**\r\n   * Clear regions in store - useful when changing country\r\n   */\r\n  clearRegions(): void {\r\n    this.store.dispatch(new UserActions.ClearRegions());\r\n  }\r\n\r\n  /**\r\n   * Returns all regions\r\n   */\r\n  getRegions(countryIsoCode: string): Observable<Region[]> {\r\n    return this.store.pipe(\r\n      select(UsersSelectors.getRegionsDataAndLoading),\r\n      map(({ regions, country, loading, loaded }) => {\r\n        if (!countryIsoCode && (loading || loaded)) {\r\n          this.clearRegions();\r\n          return [];\r\n        } else if (loading && !loaded) {\r\n          // don't interrupt loading\r\n          return [];\r\n        } else if (!loading && countryIsoCode !== country && countryIsoCode) {\r\n          // country changed - clear store and load new regions\r\n          if (country) {\r\n            this.clearRegions();\r\n          }\r\n          this.loadRegions(countryIsoCode);\r\n          return [];\r\n        }\r\n        return regions;\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\r\nimport {\r\n  CancellationRequestEntryInputList,\r\n  Order,\r\n  OrderHistoryList,\r\n} from '../../model/order.model';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport {\r\n  getProcessLoadingFactory,\r\n  getProcessSuccessFactory,\r\n} from '../../process/store/selectors/process.selectors';\r\nimport { UserActions } from '../store/actions/index';\r\nimport { UsersSelectors } from '../store/selectors/index';\r\nimport { CANCEL_ORDER_PROCESS_ID, StateWithUser } from '../store/user-state';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserOrderService {\r\n  constructor(\r\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\r\n    protected authService: AuthService\r\n  ) {}\r\n\r\n  /**\r\n   * Returns an order's detail\r\n   */\r\n  getOrderDetails(): Observable<Order> {\r\n    return this.store.pipe(select(UsersSelectors.getOrderDetails));\r\n  }\r\n\r\n  /**\r\n   * Retrieves order's details\r\n   *\r\n   * @param orderCode an order code\r\n   */\r\n  loadOrderDetails(orderCode: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.LoadOrderDetails({\r\n          userId,\r\n          orderCode,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clears order's details\r\n   */\r\n  clearOrderDetails(): void {\r\n    this.store.dispatch(new UserActions.ClearOrderDetails());\r\n  }\r\n\r\n  /**\r\n   * Returns order history list\r\n   */\r\n  getOrderHistoryList(pageSize: number): Observable<OrderHistoryList> {\r\n    return this.store.pipe(\r\n      select(UsersSelectors.getOrdersState),\r\n      tap((orderListState) => {\r\n        const attemptedLoad =\r\n          orderListState.loading ||\r\n          orderListState.success ||\r\n          orderListState.error;\r\n        if (!attemptedLoad) {\r\n          this.loadOrderList(pageSize);\r\n        }\r\n      }),\r\n      map((orderListState) => orderListState.value)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a loaded flag for order history list\r\n   */\r\n  getOrderHistoryListLoaded(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getOrdersLoaded));\r\n  }\r\n\r\n  /**\r\n   * Retrieves an order list\r\n   * @param pageSize page size\r\n   * @param currentPage current page\r\n   * @param sort sort\r\n   */\r\n  loadOrderList(pageSize: number, currentPage?: number, sort?: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.LoadUserOrders({\r\n          userId,\r\n          pageSize,\r\n          currentPage,\r\n          sort,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Cleaning order list\r\n   */\r\n  clearOrderList(): void {\r\n    this.store.dispatch(new UserActions.ClearUserOrders());\r\n  }\r\n\r\n  /**\r\n   *  Returns a consignment tracking detail\r\n   */\r\n  getConsignmentTracking(): Observable<ConsignmentTracking> {\r\n    return this.store.pipe(select(UsersSelectors.getConsignmentTracking));\r\n  }\r\n\r\n  /**\r\n   * Retrieves consignment tracking details\r\n   * @param orderCode an order code\r\n   * @param consignmentCode a consignment code\r\n   */\r\n  loadConsignmentTracking(orderCode: string, consignmentCode: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.LoadConsignmentTracking({\r\n          userId,\r\n          orderCode,\r\n          consignmentCode,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Cleaning consignment tracking\r\n   */\r\n  clearConsignmentTracking(): void {\r\n    this.store.dispatch(new UserActions.ClearConsignmentTracking());\r\n  }\r\n\r\n  /*\r\n   * Cancel an order\r\n   */\r\n  cancelOrder(\r\n    orderCode: string,\r\n    cancelRequestInput: CancellationRequestEntryInputList\r\n  ): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.CancelOrder({\r\n          userId,\r\n          orderCode,\r\n          cancelRequestInput,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the cancel order loading flag\r\n   */\r\n  getCancelOrderLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(CANCEL_ORDER_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the cancel order success flag\r\n   */\r\n  getCancelOrderSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(CANCEL_ORDER_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resets the cancel order process flags\r\n   */\r\n  resetCancelOrderProcessState(): void {\r\n    return this.store.dispatch(new UserActions.ResetCancelOrderProcess());\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { filter, map, tap } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport {\r\n  getProcessErrorFactory,\r\n  getProcessLoadingFactory,\r\n  getProcessSuccessFactory,\r\n} from '../../process/store/selectors/process.selectors';\r\nimport { UserActions } from '../store/actions/index';\r\nimport { UsersSelectors } from '../store/selectors/index';\r\nimport {\r\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\r\n  StateWithUser,\r\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\r\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\r\n} from '../store/user-state';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CustomerCouponService {\r\n  constructor(\r\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\r\n    protected authService: AuthService\r\n  ) {}\r\n\r\n  /**\r\n   * Retrieves customer's coupons\r\n   * @param pageSize page size\r\n   * @param currentPage current page\r\n   * @param sort sort\r\n   */\r\n  loadCustomerCoupons(\r\n    pageSize: number,\r\n    currentPage?: number,\r\n    sort?: string\r\n  ): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.LoadCustomerCoupons({\r\n          userId,\r\n          pageSize: pageSize,\r\n          currentPage: currentPage,\r\n          sort: sort,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns customer coupon search result\r\n   * @param pageSize page size\r\n   */\r\n  getCustomerCoupons(pageSize: number): Observable<CustomerCouponSearchResult> {\r\n    return combineLatest([\r\n      this.store.pipe(select(UsersSelectors.getCustomerCouponsState)),\r\n      this.getClaimCustomerCouponResultLoading(),\r\n    ]).pipe(\r\n      filter(([, loading]) => !loading),\r\n      tap(([customerCouponsState]) => {\r\n        const attemptedLoad =\r\n          customerCouponsState.loading ||\r\n          customerCouponsState.success ||\r\n          customerCouponsState.error;\r\n        if (!attemptedLoad) {\r\n          this.loadCustomerCoupons(pageSize);\r\n        }\r\n      }),\r\n      map(([customerCouponsState]) => customerCouponsState.value)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a loaded flag for customer coupons\r\n   */\r\n  getCustomerCouponsLoaded(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoaded));\r\n  }\r\n\r\n  /**\r\n   * Returns a loading flag for customer coupons\r\n   */\r\n  getCustomerCouponsLoading(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoading));\r\n  }\r\n\r\n  /**\r\n   * Subscribe a CustomerCoupon Notification\r\n   * @param couponCode a customer coupon code\r\n   */\r\n  subscribeCustomerCoupon(couponCode: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.SubscribeCustomerCoupon({\r\n          userId,\r\n          couponCode: couponCode,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the subscribe customer coupon notification process loading flag\r\n   */\r\n  getSubscribeCustomerCouponResultLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the subscribe customer coupon notification process success flag\r\n   */\r\n  getSubscribeCustomerCouponResultSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the subscribe customer coupon notification process error flag\r\n   */\r\n  getSubscribeCustomerCouponResultError(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessErrorFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe a CustomerCoupon Notification\r\n   * @param couponCode a customer coupon code\r\n   */\r\n  unsubscribeCustomerCoupon(couponCode: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.UnsubscribeCustomerCoupon({\r\n          userId,\r\n          couponCode: couponCode,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the unsubscribe customer coupon notification process loading flag\r\n   */\r\n  getUnsubscribeCustomerCouponResultLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the unsubscribe customer coupon notification process success flag\r\n   */\r\n  getUnsubscribeCustomerCouponResultSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the unsubscribe customer coupon notification process error flag\r\n   */\r\n  getUnsubscribeCustomerCouponResultError(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessErrorFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Claim a CustomerCoupon\r\n   * @param couponCode a customer coupon code\r\n   */\r\n  claimCustomerCoupon(couponCode: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.ClaimCustomerCoupon({\r\n          userId,\r\n          couponCode,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the claim customer coupon notification process success flag\r\n   */\r\n  getClaimCustomerCouponResultSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the claim customer coupon notification process loading flag\r\n   */\r\n  getClaimCustomerCouponResultLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { Country } from '../../model/address.model';\r\nimport { PaymentDetails } from '../../model/cart.model';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport { UserActions } from '../store/actions/index';\r\nimport { UsersSelectors } from '../store/selectors/index';\r\nimport { StateWithUser } from '../store/user-state';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserPaymentService {\r\n  constructor(\r\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\r\n    protected authService: AuthService\r\n  ) {}\r\n\r\n  /**\r\n   * Loads all user's payment methods.\r\n   */\r\n  loadPaymentMethods(): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(new UserActions.LoadUserPaymentMethods(userId));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns all user's payment methods\r\n   */\r\n  getPaymentMethods(): Observable<PaymentDetails[]> {\r\n    return this.store.pipe(select(UsersSelectors.getPaymentMethods));\r\n  }\r\n\r\n  /**\r\n   * Returns a loading flag for payment methods\r\n   */\r\n  getPaymentMethodsLoading(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getPaymentMethodsLoading));\r\n  }\r\n\r\n  getPaymentMethodsLoadedSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(UsersSelectors.getPaymentMethodsLoadedSuccess)\r\n    );\r\n  }\r\n  /**\r\n   * Sets the payment as a default one\r\n   * @param paymentMethodId a payment method ID\r\n   */\r\n  setPaymentMethodAsDefault(paymentMethodId: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.SetDefaultUserPaymentMethod({\r\n          userId,\r\n          paymentMethodId,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Deletes the payment method\r\n   *\r\n   * @param paymentMethodId a payment method ID\r\n   */\r\n  deletePaymentMethod(paymentMethodId: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.DeleteUserPaymentMethod({\r\n          userId,\r\n          paymentMethodId,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns all billing countries\r\n   */\r\n  getAllBillingCountries(): Observable<Country[]> {\r\n    return this.store.pipe(select(UsersSelectors.getAllBillingCountries));\r\n  }\r\n\r\n  /**\r\n   * Retrieves billing countries\r\n   */\r\n  loadBillingCountries(): void {\r\n    this.store.dispatch(new UserActions.LoadBillingCountries());\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport {\r\n  ReturnRequest,\r\n  ReturnRequestEntryInputList,\r\n  ReturnRequestList,\r\n  ReturnRequestModification,\r\n} from '../../model/order.model';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport {\r\n  getProcessLoadingFactory,\r\n  getProcessSuccessFactory,\r\n} from '../../process/store/selectors/process.selectors';\r\nimport { UserActions } from '../store/actions/index';\r\nimport { UsersSelectors } from '../store/selectors/index';\r\nimport { CANCEL_RETURN_PROCESS_ID, StateWithUser } from '../store/user-state';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OrderReturnRequestService {\r\n  constructor(\r\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\r\n    protected authService: AuthService\r\n  ) {}\r\n\r\n  /**\r\n   * Create order return request\r\n   * @param orderCode an order code\r\n   * @param returnRequestInput order return request entry input\r\n   */\r\n  createOrderReturnRequest(\r\n    returnRequestInput: ReturnRequestEntryInputList\r\n  ): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.CreateOrderReturnRequest({\r\n          userId,\r\n          returnRequestInput,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return an order return request\r\n   */\r\n  getOrderReturnRequest(): Observable<ReturnRequest> {\r\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequest));\r\n  }\r\n\r\n  /**\r\n   * Gets order return request list\r\n   */\r\n  getOrderReturnRequestList(pageSize: number): Observable<ReturnRequestList> {\r\n    return this.store.pipe(\r\n      select(UsersSelectors.getOrderReturnRequestListState),\r\n      tap((returnListState) => {\r\n        const attemptedLoad =\r\n          returnListState.loading ||\r\n          returnListState.success ||\r\n          returnListState.error;\r\n        if (!attemptedLoad) {\r\n          this.loadOrderReturnRequestList(pageSize);\r\n        }\r\n      }),\r\n      map((returnListState) => returnListState.value)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Loads order return request detail\r\n   * @param returnRequestCode\r\n   */\r\n  loadOrderReturnRequestDetail(returnRequestCode: string): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.LoadOrderReturnRequest({\r\n          userId,\r\n          returnRequestCode,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Loads order return request list\r\n   * @param pageSize page size\r\n   * @param currentPage current page\r\n   * @param sort sort\r\n   */\r\n  loadOrderReturnRequestList(\r\n    pageSize: number,\r\n    currentPage?: number,\r\n    sort?: string\r\n  ): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.LoadOrderReturnRequestList({\r\n          userId,\r\n          pageSize,\r\n          currentPage,\r\n          sort,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Cleaning order return request list\r\n   */\r\n  clearOrderReturnRequestList(): void {\r\n    this.store.dispatch(new UserActions.ClearOrderReturnRequestList());\r\n  }\r\n\r\n  /**\r\n   * Get the order return request loading flag\r\n   */\r\n  getReturnRequestLoading(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestLoading));\r\n  }\r\n\r\n  /**\r\n   * Get the order return request success flag\r\n   */\r\n  getReturnRequestSuccess(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestSuccess));\r\n  }\r\n\r\n  /**\r\n   * Cleaning order return request details\r\n   */\r\n  clearOrderReturnRequestDetail(): void {\r\n    this.store.dispatch(new UserActions.ClearOrderReturnRequest());\r\n  }\r\n\r\n  /*\r\n   * Cancel order return request\r\n   */\r\n  cancelOrderReturnRequest(\r\n    returnRequestCode: string,\r\n    returnRequestModification: ReturnRequestModification\r\n  ): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.CancelOrderReturnRequest({\r\n          userId,\r\n          returnRequestCode,\r\n          returnRequestModification,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the cancel return request loading flag\r\n   */\r\n  getCancelReturnRequestLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(CANCEL_RETURN_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the cancel return request success flag\r\n   */\r\n  getCancelReturnRequestSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(CANCEL_RETURN_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resets the cancel return request process flags\r\n   */\r\n  resetCancelReturnRequestProcessState(): void {\r\n    return this.store.dispatch(new UserActions.ResetCancelReturnProcess());\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport { NotificationPreference } from '../../model/notification-preference.model';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport { getProcessLoadingFactory } from '../../process/store/selectors/process.selectors';\r\nimport { UserActions } from '../store/actions/index';\r\nimport { UsersSelectors } from '../store/selectors/index';\r\nimport {\r\n  StateWithUser,\r\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\r\n} from '../store/user-state';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserNotificationPreferenceService {\r\n  constructor(\r\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\r\n    protected authService: AuthService\r\n  ) {}\r\n\r\n  /**\r\n   * Returns all notification preferences.\r\n   */\r\n  getPreferences(): Observable<NotificationPreference[]> {\r\n    return this.store.pipe(select(UsersSelectors.getPreferences));\r\n  }\r\n\r\n  /**\r\n   * Returns all enabled notification preferences.\r\n   */\r\n  getEnabledPreferences(): Observable<NotificationPreference[]> {\r\n    return this.store.pipe(select(UsersSelectors.getEnabledPreferences));\r\n  }\r\n\r\n  /**\r\n   * Loads all notification preferences.\r\n   */\r\n  loadPreferences(): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(new UserActions.LoadNotificationPreferences(userId));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear all notification preferences.\r\n   */\r\n  clearPreferences(): void {\r\n    this.store.dispatch(new UserActions.ClearNotificationPreferences());\r\n  }\r\n\r\n  /**\r\n   * Returns a loading flag for notification preferences.\r\n   */\r\n  getPreferencesLoading(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getPreferencesLoading));\r\n  }\r\n\r\n  /**\r\n   * Updating notification preferences.\r\n   * @param preferences a preference list\r\n   */\r\n  updatePreferences(preferences: NotificationPreference[]): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.UpdateNotificationPreferences({\r\n          userId,\r\n          preferences: preferences,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns a loading flag for updating preferences.\r\n   */\r\n  getUpdatePreferencesResultLoading(): Observable<boolean> {\r\n    return this.store.select(\r\n      getProcessLoadingFactory(UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resets the update notification preferences process state. The state needs to be\r\n   * reset after the process concludes, regardless if it's a success or an error.\r\n   */\r\n  resetNotificationPreferences(): void {\r\n    this.store.dispatch(new UserActions.ResetNotificationPreferences());\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { AuthService } from '../../auth/facade/auth.service';\r\nimport {\r\n  NotificationType,\r\n  ProductInterestEntryRelation,\r\n  ProductInterestSearchResult,\r\n} from '../../model/product-interest.model';\r\nimport { StateWithProcess } from '../../process/store/process-state';\r\nimport {\r\n  getProcessErrorFactory,\r\n  getProcessLoadingFactory,\r\n  getProcessSuccessFactory,\r\n} from '../../process/store/selectors/process.selectors';\r\nimport { UserActions } from '../store/actions/index';\r\nimport { UsersSelectors } from '../store/selectors/index';\r\nimport {\r\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\r\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\r\n  StateWithUser,\r\n} from '../store/user-state';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserInterestsService {\r\n  constructor(\r\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\r\n    protected authService: AuthService\r\n  ) {}\r\n\r\n  /**\r\n   * Retrieves an product interest list\r\n   * @param pageSize page size\r\n   * @param currentPage current page\r\n   * @param sort sort\r\n   */\r\n  loadProductInterests(\r\n    pageSize?: number,\r\n    currentPage?: number,\r\n    sort?: string,\r\n    productCode?: string,\r\n    notificationType?: NotificationType\r\n  ): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.LoadProductInterests({\r\n          userId,\r\n          pageSize: pageSize,\r\n          currentPage: currentPage,\r\n          sort: sort,\r\n          productCode: productCode,\r\n          notificationType: notificationType,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns product interests\r\n   */\r\n  getProductInterests(): Observable<ProductInterestSearchResult> {\r\n    return this.store.pipe(select(UsersSelectors.getInterests));\r\n  }\r\n\r\n  /**\r\n   * Returns product interests\r\n   * @param pageSize the page size\r\n   */\r\n  getAndLoadProductInterests(\r\n    pageSize?: number\r\n  ): Observable<ProductInterestSearchResult> {\r\n    return this.store.pipe(\r\n      select(UsersSelectors.getInterestsState),\r\n      tap((interestListState) => {\r\n        const attemptedLoad =\r\n          interestListState.loading ||\r\n          interestListState.success ||\r\n          interestListState.error;\r\n        if (!attemptedLoad) {\r\n          this.loadProductInterests(pageSize);\r\n        }\r\n      }),\r\n      map((interestListState) => interestListState.value)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a loading flag for product interests\r\n   */\r\n  getProdutInterestsLoading(): Observable<boolean> {\r\n    return this.store.pipe(select(UsersSelectors.getInterestsLoading));\r\n  }\r\n\r\n  /**\r\n   * Removes a ProductInterestRelation\r\n   * @param item product interest relation item\r\n   * @param singleDelete flag to delete only one interest\r\n   */\r\n  removeProdutInterest(\r\n    item: ProductInterestEntryRelation,\r\n    singleDelete?: boolean\r\n  ): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.RemoveProductInterest({\r\n          userId,\r\n          item: item,\r\n          singleDelete: singleDelete,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns a loading flag for removing product interests.\r\n   */\r\n  getRemoveProdutInterestLoading(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessLoadingFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a success flag for removing a product interests.\r\n   */\r\n  getRemoveProdutInterestSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Add a new product interest.\r\n   *\r\n   * @param productCode the product code\r\n   * @param notificationType the notification type\r\n   */\r\n  addProductInterest(\r\n    productCode: string,\r\n    notificationType: NotificationType\r\n  ): void {\r\n    this.authService.invokeWithUserId((userId) => {\r\n      this.store.dispatch(\r\n        new UserActions.AddProductInterest({\r\n          userId,\r\n          productCode: productCode,\r\n          notificationType: notificationType,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns a success flag for adding a product interest.\r\n   */\r\n  getAddProductInterestSuccess(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessSuccessFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a error flag for adding a product interest.\r\n   */\r\n  getAddProductInterestError(): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(getProcessErrorFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Reset product interest adding state.\r\n   */\r\n  resetAddInterestState(): void {\r\n    this.store.dispatch(new UserActions.ResetAddInterestState());\r\n  }\r\n\r\n  /**\r\n   * Reset product interest removing state.\r\n   */\r\n  resetRemoveInterestState(): void {\r\n    this.store.dispatch(new UserActions.ResetRemoveInterestState());\r\n  }\r\n\r\n  /**\r\n   * Clears product interests\r\n   */\r\n  clearProductInterests(): void {\r\n    this.store.dispatch(new UserActions.ClearProductInterests());\r\n  }\r\n}\r\n","import { UserActions } from '../actions/index';\nimport { BillingCountriesState } from '../user-state';\n\nexport const initialState: BillingCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.BillingCountriesAction | UserActions.ClearUserMiscsData\n): BillingCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_BILLING_COUNTRIES_SUCCESS: {\n      const billingCountries = action.payload;\n      const entities = billingCountries.reduce(\n        (countryEntities: { [isocode: string]: any }, name: any) => {\n          return {\n            ...countryEntities,\n            [name.isocode]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { ConsignmentTracking } from '../../../model/index';\nimport { UserActions } from '../actions/index';\nimport { ConsignmentTrackingState } from '../user-state';\n\nexport const initialState: ConsignmentTrackingState = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ConsignmentTrackingAction\n): ConsignmentTrackingState {\n  switch (action.type) {\n    case UserActions.LOAD_CONSIGNMENT_TRACKING_SUCCESS: {\n      const tracking: ConsignmentTracking = action.payload;\n      return {\n        tracking,\n      };\n    }\n    case UserActions.CLEAR_CONSIGNMENT_TRACKING: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Country } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { DeliveryCountriesState } from '../user-state';\n\nexport const initialState: DeliveryCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.DeliveryCountriesAction | UserActions.ClearUserMiscsData\n): DeliveryCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_DELIVERY_COUNTRIES_SUCCESS: {\n      const deliveryCountries = action.payload;\n      const entities = deliveryCountries.reduce(\n        (countryEntities: { [isocode: string]: Country }, country: Country) => {\n          return {\n            ...countryEntities,\n            [country.isocode]: country,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { NotificationPreference } from '../../../model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: NotificationPreference[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.NotificationPreferenceAction\n): NotificationPreference[] {\n  switch (action.type) {\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_SUCCESS:\n    case UserActions.UPDATE_NOTIFICATION_PREFERENCES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { Order } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Order = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderDetailsAction\n): Order {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_DETAILS_SUCCESS: {\n      const order: Order = action.payload;\n      return order;\n    }\n  }\n  return state;\n}\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: PaymentDetails[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserPaymentMethodsAction\n): PaymentDetails[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_PAYMENT_METHODS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n\n    case UserActions.LOAD_USER_PAYMENT_METHODS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Region } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { RegionsState } from '../user-state';\n\nexport const initialState: RegionsState = {\n  entities: [],\n  country: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.RegionsAction | UserActions.ClearUserMiscsData\n): RegionsState {\n  switch (action.type) {\n    case UserActions.LOAD_REGIONS_SUCCESS: {\n      const entities: Region[] = action.payload.entities;\n      const country: string = action.payload.country;\n      if (entities || country) {\n        return {\n          ...state,\n          entities,\n          country,\n        };\n      }\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { UserActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ResetPasswordAction\n): boolean {\n  switch (action.type) {\n    case UserActions.RESET_PASSWORD_SUCCESS: {\n      return true;\n    }\n  }\n  return state;\n}\n","import { Title } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\nimport { TitlesState } from '../user-state';\n\nexport const initialState: TitlesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.TitlesAction | UserActions.ClearUserMiscsData\n): TitlesState {\n  switch (action.type) {\n    case UserActions.LOAD_TITLES_SUCCESS: {\n      const titles = action.payload;\n      const entities = titles.reduce(\n        (titleEntities: { [code: string]: Title }, name: Title) => {\n          return {\n            ...titleEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { Address } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Address[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserAddressesAction\n): Address[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ADDRESSES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_USER_ADDRESSES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n  return state;\n}\n","import { ConsentTemplate } from '../../../model/consent.model';\r\nimport { UserActions } from '../actions/index';\r\n\r\nexport const initialState: ConsentTemplate[] = [];\r\n\r\nexport function reducer(\r\n  state = initialState,\r\n  action: UserActions.UserConsentsAction\r\n): ConsentTemplate[] {\r\n  switch (action.type) {\r\n    case UserActions.LOAD_USER_CONSENTS_SUCCESS: {\r\n      const consents = action.payload;\r\n      return consents ? consents : initialState;\r\n    }\r\n\r\n    case UserActions.GIVE_USER_CONSENT_SUCCESS: {\r\n      const updatedConsentTemplate = action.consentTemplate;\r\n      return state.map((consentTemplate) =>\r\n        consentTemplate.id === updatedConsentTemplate.id\r\n          ? updatedConsentTemplate\r\n          : consentTemplate\r\n      );\r\n    }\r\n  }\r\n\r\n  return state;\r\n}\r\n","import { User } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: User = <User>{};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserDetailsAction | UserActions.EmailActions\n): User {\n  switch (action.type) {\n    case UserActions.LOAD_USER_DETAILS_SUCCESS: {\n      return action.payload;\n    }\n\n    case UserActions.UPDATE_USER_DETAILS_SUCCESS: {\n      const updatedDetails: User = {\n        ...state,\n        ...action.userUpdates,\n      };\n      return {\n        ...updatedDetails,\n        name: `${updatedDetails.firstName} ${updatedDetails.lastName}`,\n      };\n    }\n  }\n\n  return state;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: OrderHistoryList = {\n  orders: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserOrdersAction\n): OrderHistoryList {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ORDERS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_USER_ORDERS_FAIL: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import * as fromActions from '../actions/customer-coupon.action';\nimport {\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n} from '../../../model/customer-coupon.model';\n\nexport const initialState: CustomerCouponSearchResult = {\n  coupons: [],\n  sorts: [],\n  pagination: {},\n};\nexport function reducer(\n  state = initialState,\n  action: fromActions.CustomerCouponAction\n): CustomerCouponSearchResult {\n  switch (action.type) {\n    case fromActions.LOAD_CUSTOMER_COUPONS_SUCCESS: {\n      return action.payload;\n    }\n\n    case fromActions.SUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCustomerCoupon = action.payload.coupon;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCustomerCoupon.couponId\n          ? (customerCoupons[index] = updatedCustomerCoupon)\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n\n    case fromActions.UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCouponCode = action.payload;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCouponCode\n          ? (customerCoupons[index] = {\n              ...customerCoupon,\n              notificationOn: false,\n            })\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n  }\n  return state;\n}\n","import { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const initialState: ProductInterestSearchResult = {\n  results: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ProductInterestsAction\n): ProductInterestSearchResult {\n  switch (action.type) {\n    case UserActions.LOAD_PRODUCT_INTERESTS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_PRODUCT_INTERESTS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { ReturnRequestList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ReturnRequestList = {\n  returnRequests: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderReturnRequestAction\n): ReturnRequestList {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\r\nimport {\r\n  ActionReducer,\r\n  ActionReducerMap,\r\n  combineReducers,\r\n  MetaReducer,\r\n} from '@ngrx/store';\r\nimport { AuthActions } from '../../../auth/store/actions/index';\r\nimport { Address } from '../../../model/address.model';\r\nimport { PaymentDetails } from '../../../model/cart.model';\r\nimport { ConsentTemplate } from '../../../model/consent.model';\r\nimport { NotificationPreference } from '../../../model/notification-preference.model';\r\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\r\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\r\nimport {\r\n  OrderHistoryList,\r\n  ReturnRequestList,\r\n  ReturnRequest,\r\n  Order,\r\n} from '../../../model/order.model';\r\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\r\nimport {\r\n  REGIONS,\r\n  RegionsState,\r\n  UserState,\r\n  USER_ADDRESSES,\r\n  USER_CONSENTS,\r\n  USER_ORDERS,\r\n  USER_PAYMENT_METHODS,\r\n  CUSTOMER_COUPONS,\r\n  NOTIFICATION_PREFERENCES,\r\n  PRODUCT_INTERESTS,\r\n  USER_RETURN_REQUESTS,\r\n  USER_ORDER_DETAILS,\r\n  USER_RETURN_REQUEST_DETAILS,\r\n} from '../user-state';\r\nimport * as fromBillingCountriesReducer from './billing-countries.reducer';\r\nimport * as fromConsignmentTrackingReducer from './consignment-tracking.reducer';\r\nimport * as fromDeliveryCountries from './delivery-countries.reducer';\r\nimport * as fromNotificationPreferenceReducer from './notification-preference.reducer';\r\nimport * as fromOrderDetailsReducer from './order-details.reducer';\r\nimport * as fromPaymentReducer from './payment-methods.reducer';\r\nimport * as fromRegionsReducer from './regions.reducer';\r\nimport * as fromResetPasswordReducer from './reset-password.reducer';\r\nimport * as fromTitlesReducer from './titles.reducer';\r\nimport * as fromAddressesReducer from './user-addresses.reducer';\r\nimport * as fromUserConsentsReducer from './user-consents.reducer';\r\nimport * as fromUserDetailsReducer from './user-details.reducer';\r\nimport * as fromUserOrdersReducer from './user-orders.reducer';\r\nimport * as fromCustomerCouponReducer from './customer-coupon.reducer';\r\nimport * as fromInterestsReducer from './product-interests.reducer';\r\nimport * as fromOrderReturnRequestReducer from './order-return-request.reducer';\r\n\r\nexport function getReducers(): ActionReducerMap<UserState> {\r\n  return {\r\n    account: combineReducers({\r\n      details: fromUserDetailsReducer.reducer,\r\n    }),\r\n    addresses: loaderReducer<Address[]>(\r\n      USER_ADDRESSES,\r\n      fromAddressesReducer.reducer\r\n    ),\r\n    billingCountries: fromBillingCountriesReducer.reducer,\r\n    consents: loaderReducer<ConsentTemplate[]>(\r\n      USER_CONSENTS,\r\n      fromUserConsentsReducer.reducer\r\n    ),\r\n    payments: loaderReducer<PaymentDetails[]>(\r\n      USER_PAYMENT_METHODS,\r\n      fromPaymentReducer.reducer\r\n    ),\r\n    orders: loaderReducer<OrderHistoryList>(\r\n      USER_ORDERS,\r\n      fromUserOrdersReducer.reducer\r\n    ),\r\n    order: loaderReducer<Order>(\r\n      USER_ORDER_DETAILS,\r\n      fromOrderDetailsReducer.reducer\r\n    ),\r\n    orderReturn: loaderReducer<ReturnRequest>(USER_RETURN_REQUEST_DETAILS),\r\n    orderReturnList: loaderReducer<ReturnRequestList>(\r\n      USER_RETURN_REQUESTS,\r\n      fromOrderReturnRequestReducer.reducer\r\n    ),\r\n    countries: fromDeliveryCountries.reducer,\r\n    titles: fromTitlesReducer.reducer,\r\n    regions: loaderReducer<RegionsState>(REGIONS, fromRegionsReducer.reducer),\r\n    resetPassword: fromResetPasswordReducer.reducer,\r\n    consignmentTracking: fromConsignmentTrackingReducer.reducer,\r\n    customerCoupons: loaderReducer<CustomerCouponSearchResult>(\r\n      CUSTOMER_COUPONS,\r\n      fromCustomerCouponReducer.reducer\r\n    ),\r\n    notificationPreferences: loaderReducer<NotificationPreference[]>(\r\n      NOTIFICATION_PREFERENCES,\r\n      fromNotificationPreferenceReducer.reducer\r\n    ),\r\n    productInterests: loaderReducer<ProductInterestSearchResult>(\r\n      PRODUCT_INTERESTS,\r\n      fromInterestsReducer.reducer\r\n    ),\r\n  };\r\n}\r\n\r\nexport const reducerToken: InjectionToken<ActionReducerMap<\r\n  UserState\r\n>> = new InjectionToken<ActionReducerMap<UserState>>('UserReducers');\r\n\r\nexport const reducerProvider: Provider = {\r\n  provide: reducerToken,\r\n  useFactory: getReducers,\r\n};\r\n\r\nexport function clearUserState(\r\n  reducer: ActionReducer<any>\r\n): ActionReducer<any> {\r\n  return function (state, action) {\r\n    if (action.type === AuthActions.LOGOUT) {\r\n      state = undefined;\r\n    }\r\n\r\n    return reducer(state, action);\r\n  };\r\n}\r\n\r\nexport const metaReducers: MetaReducer<any>[] = [clearUserState];\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { CountryType } from '../../../model/address.model';\r\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class BillingCountriesEffect {\r\n  @Effect()\r\n  loadBillingCountries$: Observable<\r\n    UserActions.BillingCountriesAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_BILLING_COUNTRIES),\r\n    switchMap(() => {\r\n      return this.siteConnector.getCountries(CountryType.BILLING).pipe(\r\n        map(\r\n          (countries) => new UserActions.LoadBillingCountriesSuccess(countries)\r\n        ),\r\n        catchError((error) =>\r\n          of(\r\n            new UserActions.LoadBillingCountriesFail(\r\n              makeErrorSerializable(error)\r\n            )\r\n          )\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private siteConnector: SiteConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ClearMiscsDataEffect {\n  @Effect()\n  clearMiscsData$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    map(() => {\n      return new UserActions.ClearUserMiscsData();\n    })\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class ConsignmentTrackingEffects {\r\n  @Effect()\r\n  loadConsignmentTracking$: Observable<\r\n    UserActions.ConsignmentTrackingAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_CONSIGNMENT_TRACKING),\r\n    map((action: UserActions.LoadConsignmentTracking) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.userOrderConnector\r\n        .getConsignmentTracking(\r\n          payload.orderCode,\r\n          payload.consignmentCode,\r\n          payload.userId\r\n        )\r\n        .pipe(\r\n          map(\r\n            (tracking: ConsignmentTracking) =>\r\n              new UserActions.LoadConsignmentTrackingSuccess(tracking)\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.LoadConsignmentTrackingFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userOrderConnector: UserOrderConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { CountryType } from '../../../model/address.model';\r\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class DeliveryCountriesEffects {\r\n  @Effect()\r\n  loadDeliveryCountries$: Observable<\r\n    UserActions.DeliveryCountriesAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_DELIVERY_COUNTRIES),\r\n    switchMap(() => {\r\n      return this.siteConnector.getCountries(CountryType.SHIPPING).pipe(\r\n        map(\r\n          (countries) => new UserActions.LoadDeliveryCountriesSuccess(countries)\r\n        ),\r\n        catchError((error) =>\r\n          of(\r\n            new UserActions.LoadDeliveryCountriesFail(\r\n              makeErrorSerializable(error)\r\n            )\r\n          )\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private siteConnector: SiteConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, concatMap, map, switchMap } from 'rxjs/operators';\r\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\r\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserConnector } from '../../connectors/user/user.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class ForgotPasswordEffects {\r\n  @Effect()\r\n  requestForgotPasswordEmail$: Observable<\r\n    | UserActions.ForgotPasswordEmailRequestSuccess\r\n    | GlobalMessageActions.AddMessage\r\n    | UserActions.ForgotPasswordEmailRequestFail\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.FORGOT_PASSWORD_EMAIL_REQUEST),\r\n    map((action: UserActions.ForgotPasswordEmailRequest) => {\r\n      return action.payload;\r\n    }),\r\n    concatMap((userEmailAddress) => {\r\n      return this.userAccountConnector\r\n        .requestForgotPasswordEmail(userEmailAddress)\r\n        .pipe(\r\n          switchMap(() => [\r\n            new UserActions.ForgotPasswordEmailRequestSuccess(),\r\n            new GlobalMessageActions.AddMessage({\r\n              text: { key: 'forgottenPassword.passwordResetEmailSent' },\r\n              type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\r\n            }),\r\n          ]),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.ForgotPasswordEmailRequestFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userAccountConnector: UserConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserNotificationPreferenceConnector } from '../../connectors/notification-preference/user-notification-preference.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class NotificationPreferenceEffects {\r\n  @Effect()\r\n  loadPreferences$: Observable<\r\n    UserActions.NotificationPreferenceAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_NOTIFICATION_PREFERENCES),\r\n    map((action: UserActions.LoadNotificationPreferences) => action.payload),\r\n    switchMap((payload) =>\r\n      this.connector.loadAll(payload).pipe(\r\n        map(\r\n          (preferences) =>\r\n            new UserActions.LoadNotificationPreferencesSuccess(preferences)\r\n        ),\r\n        catchError((error) =>\r\n          of(\r\n            new UserActions.LoadNotificationPreferencesFail(\r\n              makeErrorSerializable(error)\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  updatePreferences$: Observable<\r\n    UserActions.NotificationPreferenceAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.UPDATE_NOTIFICATION_PREFERENCES),\r\n    map((action: UserActions.UpdateNotificationPreferences) => action.payload),\r\n    mergeMap((payload) =>\r\n      this.connector.update(payload.userId, payload.preferences).pipe(\r\n        map(\r\n          () =>\r\n            new UserActions.UpdateNotificationPreferencesSuccess(\r\n              payload.preferences\r\n            )\r\n        ),\r\n        catchError((error) =>\r\n          of(\r\n            new UserActions.UpdateNotificationPreferencesFail(\r\n              makeErrorSerializable(error)\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private connector: UserNotificationPreferenceConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { Order } from '../../../model/order.model';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\r\nimport { UserActions } from '../actions/index';\r\nimport {\r\n  GlobalMessageService,\r\n  GlobalMessageType,\r\n} from '../../../global-message/index';\r\n\r\n@Injectable()\r\nexport class OrderDetailsEffect {\r\n  @Effect()\r\n  loadOrderDetails$: Observable<\r\n    UserActions.OrderDetailsAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_ORDER_DETAILS),\r\n    map((action: UserActions.LoadOrderDetails) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.orderConnector.get(payload.userId, payload.orderCode).pipe(\r\n        map((order: Order) => {\r\n          return new UserActions.LoadOrderDetailsSuccess(order);\r\n        }),\r\n        catchError((error) =>\r\n          of(new UserActions.LoadOrderDetailsFail(makeErrorSerializable(error)))\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  cancelOrder$: Observable<UserActions.OrderDetailsAction> = this.actions$.pipe(\r\n    ofType(UserActions.CANCEL_ORDER),\r\n    map((action: UserActions.CancelOrder) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.orderConnector\r\n        .cancel(payload.userId, payload.orderCode, payload.cancelRequestInput)\r\n        .pipe(\r\n          map(() => new UserActions.CancelOrderSuccess()),\r\n          catchError((error) => {\r\n            error.error?.errors.forEach((err) =>\r\n              this.globalMessageService.add(\r\n                err.message,\r\n                GlobalMessageType.MSG_TYPE_ERROR\r\n              )\r\n            );\r\n\r\n            return of(\r\n              new UserActions.CancelOrderFail(makeErrorSerializable(error))\r\n            );\r\n          })\r\n        );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private orderConnector: UserOrderConnector,\r\n    private globalMessageService: GlobalMessageService\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class OrderReturnRequestEffect {\r\n  @Effect()\r\n  createReturnRequest$: Observable<\r\n    UserActions.OrderReturnRequestAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.CREATE_ORDER_RETURN_REQUEST),\r\n    map((action: UserActions.CreateOrderReturnRequest) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.orderConnector\r\n        .return(payload.userId, payload.returnRequestInput)\r\n        .pipe(\r\n          map(\r\n            (returnRequest: ReturnRequest) =>\r\n              new UserActions.CreateOrderReturnRequestSuccess(returnRequest)\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.CreateOrderReturnRequestFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  loadReturnRequest$: Observable<\r\n    UserActions.OrderReturnRequestAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST),\r\n    map((action: UserActions.LoadOrderReturnRequest) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.orderConnector\r\n        .getReturnRequestDetail(payload.userId, payload.returnRequestCode)\r\n        .pipe(\r\n          map(\r\n            (returnRequest: ReturnRequest) =>\r\n              new UserActions.LoadOrderReturnRequestSuccess(returnRequest)\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.LoadOrderReturnRequestFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  cancelReturnRequest$: Observable<\r\n    UserActions.OrderReturnRequestAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.CANCEL_ORDER_RETURN_REQUEST),\r\n    map((action: UserActions.CancelOrderReturnRequest) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.orderConnector\r\n        .cancelReturnRequest(\r\n          payload.userId,\r\n          payload.returnRequestCode,\r\n          payload.returnRequestModification\r\n        )\r\n        .pipe(\r\n          map(() => new UserActions.CancelOrderReturnRequestSuccess()),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.CancelOrderReturnRequestFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  loadReturnRequestList$: Observable<\r\n    UserActions.OrderReturnRequestAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST_LIST),\r\n    map((action: UserActions.LoadOrderReturnRequestList) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.orderConnector\r\n        .getReturnRequestList(\r\n          payload.userId,\r\n          payload.pageSize,\r\n          payload.currentPage,\r\n          payload.sort\r\n        )\r\n        .pipe(\r\n          map(\r\n            (returnRequestList: ReturnRequestList) =>\r\n              new UserActions.LoadOrderReturnRequestListSuccess(\r\n                returnRequestList\r\n              )\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.LoadOrderReturnRequestListFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private orderConnector: UserOrderConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Action } from '@ngrx/store';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { PaymentDetails } from '../../../model/cart.model';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserPaymentConnector } from '../../connectors/payment/user-payment.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class UserPaymentMethodsEffects {\r\n  @Effect()\r\n  loadUserPaymentMethods$: Observable<Action> = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_USER_PAYMENT_METHODS),\r\n    map((action: UserActions.LoadUserPaymentMethods) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.userPaymentMethodConnector.getAll(payload).pipe(\r\n        map((payments: PaymentDetails[]) => {\r\n          return new UserActions.LoadUserPaymentMethodsSuccess(payments);\r\n        }),\r\n        catchError((error) =>\r\n          of(\r\n            new UserActions.LoadUserPaymentMethodsFail(\r\n              makeErrorSerializable(error)\r\n            )\r\n          )\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  setDefaultUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\r\n    ofType(UserActions.SET_DEFAULT_USER_PAYMENT_METHOD),\r\n    map((action: UserActions.SetDefaultUserPaymentMethod) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.userPaymentMethodConnector\r\n        .setDefault(payload.userId, payload.paymentMethodId)\r\n        .pipe(\r\n          switchMap((data) => [\r\n            new UserActions.SetDefaultUserPaymentMethodSuccess(data),\r\n            new UserActions.LoadUserPaymentMethods(payload.userId),\r\n          ]),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.SetDefaultUserPaymentMethodFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n  @Effect()\r\n  deleteUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\r\n    ofType(UserActions.DELETE_USER_PAYMENT_METHOD),\r\n    map((action: UserActions.DeleteUserPaymentMethod) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.userPaymentMethodConnector\r\n        .delete(payload.userId, payload.paymentMethodId)\r\n        .pipe(\r\n          switchMap((data) => [\r\n            new UserActions.DeleteUserPaymentMethodSuccess(data),\r\n            new UserActions.LoadUserPaymentMethods(payload.userId),\r\n          ]),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.DeleteUserPaymentMethodFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userPaymentMethodConnector: UserPaymentConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Action } from '@ngrx/store';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\r\nimport { StateUtils } from '../../../state/utils/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserActions } from '../actions/index';\r\nimport { REGIONS } from '../user-state';\r\n\r\n@Injectable()\r\nexport class RegionsEffects {\r\n  @Effect()\r\n  loadRegions$: Observable<UserActions.RegionsAction> = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_REGIONS),\r\n    map((action: UserActions.LoadRegions) => {\r\n      return action.payload;\r\n    }),\r\n    switchMap((countryCode: string) => {\r\n      return this.siteConnector.getRegions(countryCode).pipe(\r\n        map(\r\n          (regions) =>\r\n            new UserActions.LoadRegionsSuccess({\r\n              entities: regions,\r\n              country: countryCode,\r\n            })\r\n        ),\r\n        catchError((error) =>\r\n          of(new UserActions.LoadRegionsFail(makeErrorSerializable(error)))\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  resetRegions$: Observable<Action> = this.actions$.pipe(\r\n    ofType(UserActions.CLEAR_USER_MISCS_DATA, UserActions.CLEAR_REGIONS),\r\n    map(() => {\r\n      return new StateUtils.LoaderResetAction(REGIONS);\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private siteConnector: SiteConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { from, Observable } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\r\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserConnector } from '../../connectors/user/user.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class ResetPasswordEffects {\r\n  @Effect()\r\n  resetPassword$: Observable<\r\n    | UserActions.ResetPasswordSuccess\r\n    | GlobalMessageActions.AddMessage\r\n    | UserActions.ResetPasswordFail\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.RESET_PASSWORD),\r\n    map((action: UserActions.ResetPassword) => action.payload),\r\n    switchMap(({ token, password }) => {\r\n      return this.userAccountConnector.resetPassword(token, password).pipe(\r\n        switchMap(() => [\r\n          new UserActions.ResetPasswordSuccess(),\r\n          new GlobalMessageActions.AddMessage({\r\n            text: { key: 'forgottenPassword.passwordResetSuccess' },\r\n            type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\r\n          }),\r\n        ]),\r\n        catchError((error) => {\r\n          const actions: Array<\r\n            UserActions.ResetPasswordFail | GlobalMessageActions.AddMessage\r\n          > = [new UserActions.ResetPasswordFail(makeErrorSerializable(error))];\r\n          if (error?.error?.errors) {\r\n            error.error.errors.forEach((err) => {\r\n              if (err.message) {\r\n                actions.push(\r\n                  new GlobalMessageActions.AddMessage({\r\n                    text: { raw: err.message },\r\n                    type: GlobalMessageType.MSG_TYPE_ERROR,\r\n                  })\r\n                );\r\n              }\r\n            });\r\n          }\r\n          return from(actions);\r\n        })\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userAccountConnector: UserConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserConnector } from '../../connectors/user/user.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class TitlesEffects {\r\n  @Effect()\r\n  loadTitles$: Observable<UserActions.TitlesAction> = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_TITLES),\r\n    switchMap(() => {\r\n      return this.userAccountConnector.getTitles().pipe(\r\n        map((titles) => {\r\n          return new UserActions.LoadTitlesSuccess(titles);\r\n        }),\r\n        catchError((error) =>\r\n          of(new UserActions.LoadTitlesFail(makeErrorSerializable(error)))\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userAccountConnector: UserConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, concatMap, map } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserConnector } from '../../connectors/user/user.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class UpdateEmailEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userAccountConnector: UserConnector\r\n  ) {}\r\n\r\n  @Effect()\r\n  updateEmail$: Observable<\r\n    UserActions.UpdateEmailSuccessAction | UserActions.UpdateEmailErrorAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.UPDATE_EMAIL),\r\n    map((action: UserActions.UpdateEmailAction) => action.payload),\r\n    concatMap((payload) =>\r\n      this.userAccountConnector\r\n        .updateEmail(payload.uid, payload.password, payload.newUid)\r\n        .pipe(\r\n          map(() => new UserActions.UpdateEmailSuccessAction(payload.newUid)),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.UpdateEmailErrorAction(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        )\r\n    )\r\n  );\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, concatMap, map } from 'rxjs/operators';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserConnector } from '../../connectors/user/user.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class UpdatePasswordEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userAccountConnector: UserConnector\r\n  ) {}\r\n\r\n  @Effect()\r\n  updatePassword$: Observable<\r\n    UserActions.UpdatePasswordSuccess | UserActions.UpdatePasswordFail\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.UPDATE_PASSWORD),\r\n    map((action: UserActions.UpdatePassword) => action.payload),\r\n    concatMap((payload) =>\r\n      this.userAccountConnector\r\n        .updatePassword(\r\n          payload.userId,\r\n          payload.oldPassword,\r\n          payload.newPassword\r\n        )\r\n        .pipe(\r\n          map(() => new UserActions.UpdatePasswordSuccess()),\r\n          catchError((error) =>\r\n            of(new UserActions.UpdatePasswordFail(makeErrorSerializable(error)))\r\n          )\r\n        )\r\n    )\r\n  );\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\r\nimport {\r\n  GlobalMessageService,\r\n  GlobalMessageType,\r\n} from '../../../global-message/index';\r\nimport { Address } from '../../../model/address.model';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserAddressConnector } from '../../connectors/address/user-address.connector';\r\nimport { UserAddressService } from '../../facade/user-address.service';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class UserAddressesEffects {\r\n  @Effect()\r\n  loadUserAddresses$: Observable<\r\n    UserActions.UserAddressesAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_USER_ADDRESSES),\r\n    map((action: UserActions.LoadUserAddresses) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.userAddressConnector.getAll(payload).pipe(\r\n        map((addresses: Address[]) => {\r\n          return new UserActions.LoadUserAddressesSuccess(addresses);\r\n        }),\r\n        catchError((error) =>\r\n          of(\r\n            new UserActions.LoadUserAddressesFail(makeErrorSerializable(error))\r\n          )\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  addUserAddress$: Observable<\r\n    UserActions.UserAddressesAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.ADD_USER_ADDRESS),\r\n    map((action: UserActions.AddUserAddress) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.userAddressConnector\r\n        .add(payload.userId, payload.address)\r\n        .pipe(\r\n          map((data: any) => {\r\n            return new UserActions.AddUserAddressSuccess(data);\r\n          }),\r\n          catchError((error) =>\r\n            of(new UserActions.AddUserAddressFail(makeErrorSerializable(error)))\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  updateUserAddress$: Observable<\r\n    UserActions.UserAddressesAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.UPDATE_USER_ADDRESS),\r\n    map((action: UserActions.UpdateUserAddress) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.userAddressConnector\r\n        .update(payload.userId, payload.addressId, payload.address)\r\n        .pipe(\r\n          map((data) => {\r\n            // don't show the message if just setting address as default\r\n            if (\r\n              payload.address &&\r\n              Object.keys(payload.address).length === 1 &&\r\n              payload.address.defaultAddress\r\n            ) {\r\n              return new UserActions.LoadUserAddresses(payload.userId);\r\n            } else {\r\n              return new UserActions.UpdateUserAddressSuccess(data);\r\n            }\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.UpdateUserAddressFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  deleteUserAddress$: Observable<\r\n    UserActions.UserAddressesAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.DELETE_USER_ADDRESS),\r\n    map((action: UserActions.DeleteUserAddress) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.userAddressConnector\r\n        .delete(payload.userId, payload.addressId)\r\n        .pipe(\r\n          map((data) => {\r\n            return new UserActions.DeleteUserAddressSuccess(data);\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.DeleteUserAddressFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  /**\r\n   *  Reload addresses and notify about add success\r\n   */\r\n  @Effect({ dispatch: false })\r\n  showGlobalMessageOnAddSuccess$ = this.actions$.pipe(\r\n    ofType(UserActions.ADD_USER_ADDRESS_SUCCESS),\r\n    tap(() => {\r\n      this.loadAddresses();\r\n      this.showGlobalMessage('addressForm.userAddressAddSuccess');\r\n    })\r\n  );\r\n\r\n  /**\r\n   *  Reload addresses and notify about update success\r\n   */\r\n  @Effect({ dispatch: false })\r\n  showGlobalMessageOnUpdateSuccess$ = this.actions$.pipe(\r\n    ofType(UserActions.UPDATE_USER_ADDRESS_SUCCESS),\r\n    tap(() => {\r\n      this.loadAddresses();\r\n      this.showGlobalMessage('addressForm.userAddressUpdateSuccess');\r\n    })\r\n  );\r\n\r\n  /**\r\n   *  Reload addresses and notify about delete success\r\n   */\r\n  @Effect({ dispatch: false })\r\n  showGlobalMessageOnDeleteSuccess$ = this.actions$.pipe(\r\n    ofType(UserActions.DELETE_USER_ADDRESS_SUCCESS),\r\n    tap(() => {\r\n      this.loadAddresses();\r\n      this.showGlobalMessage('addressForm.userAddressDeleteSuccess');\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userAddressConnector: UserAddressConnector,\r\n    private userAddressService: UserAddressService,\r\n    private messageService: GlobalMessageService\r\n  ) {}\r\n\r\n  /**\r\n   * Show global confirmation message with provided text\r\n   */\r\n  private showGlobalMessage(text: string) {\r\n    this.messageService.add(\r\n      { key: text },\r\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\r\n    );\r\n  }\r\n\r\n  private loadAddresses() {\r\n    this.userAddressService.loadAddresses();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, concatMap, map } from 'rxjs/operators';\r\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\r\nimport { GlobalMessageActions } from '../../../global-message/store/actions';\r\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserConsentConnector } from '../../connectors/consent/user-consent.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class UserConsentsEffect {\r\n  @Effect()\r\n  resetConsents$: Observable<\r\n    UserActions.ResetLoadUserConsents\r\n  > = this.actions$.pipe(\r\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\r\n    map(() => new UserActions.ResetLoadUserConsents())\r\n  );\r\n\r\n  @Effect()\r\n  getConsents$: Observable<UserActions.UserConsentsAction> = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_USER_CONSENTS),\r\n    map((action: UserActions.LoadUserConsents) => action.payload),\r\n    concatMap((userId) =>\r\n      this.userConsentConnector.loadConsents(userId).pipe(\r\n        map((consents) => new UserActions.LoadUserConsentsSuccess(consents)),\r\n        catchError((error) =>\r\n          of(new UserActions.LoadUserConsentsFail(makeErrorSerializable(error)))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  giveConsent$: Observable<\r\n    UserActions.UserConsentsAction | GlobalMessageActions.RemoveMessagesByType\r\n  > = this.actions$.pipe(\r\n    ofType<UserActions.GiveUserConsent | UserActions.TransferAnonymousConsent>(\r\n      UserActions.GIVE_USER_CONSENT,\r\n      UserActions.TRANSFER_ANONYMOUS_CONSENT\r\n    ),\r\n    concatMap((action) =>\r\n      this.userConsentConnector\r\n        .giveConsent(\r\n          action.payload.userId,\r\n          action.payload.consentTemplateId,\r\n          action.payload.consentTemplateVersion\r\n        )\r\n        .pipe(\r\n          map((consent) => new UserActions.GiveUserConsentSuccess(consent)),\r\n          catchError((error) => {\r\n            const errors: Array<\r\n              | UserActions.UserConsentsAction\r\n              | GlobalMessageActions.RemoveMessagesByType\r\n            > = [\r\n              new UserActions.GiveUserConsentFail(makeErrorSerializable(error)),\r\n            ];\r\n            if (\r\n              action.type === UserActions.TRANSFER_ANONYMOUS_CONSENT &&\r\n              error.status === 409\r\n            ) {\r\n              errors.push(\r\n                new GlobalMessageActions.RemoveMessagesByType(\r\n                  GlobalMessageType.MSG_TYPE_ERROR\r\n                )\r\n              );\r\n            }\r\n            return of(...errors);\r\n          })\r\n        )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  withdrawConsent$: Observable<\r\n    UserActions.UserConsentsAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.WITHDRAW_USER_CONSENT),\r\n    map((action: UserActions.WithdrawUserConsent) => action.payload),\r\n    concatMap(({ userId, consentCode }) =>\r\n      this.userConsentConnector.withdrawConsent(userId, consentCode).pipe(\r\n        map(() => new UserActions.WithdrawUserConsentSuccess()),\r\n        catchError((error) =>\r\n          of(\r\n            new UserActions.WithdrawUserConsentFail(\r\n              makeErrorSerializable(error)\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userConsentConnector: UserConsentConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, concatMap, map, mergeMap } from 'rxjs/operators';\r\nimport { User } from '../../../model/misc.model';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserConnector } from '../../connectors/user/user.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class UserDetailsEffects {\r\n  @Effect()\r\n  loadUserDetails$: Observable<\r\n    UserActions.UserDetailsAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_USER_DETAILS),\r\n    map((action: UserActions.LoadUserDetails) => action.payload),\r\n    mergeMap((userId) => {\r\n      return this.userConnector.get(userId).pipe(\r\n        map((user: User) => {\r\n          return new UserActions.LoadUserDetailsSuccess(user);\r\n        }),\r\n        catchError((error) =>\r\n          of(new UserActions.LoadUserDetailsFail(makeErrorSerializable(error)))\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  updateUserDetails$: Observable<\r\n    UserActions.UpdateUserDetailsSuccess | UserActions.UpdateUserDetailsFail\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.UPDATE_USER_DETAILS),\r\n    map((action: UserActions.UpdateUserDetails) => action.payload),\r\n    concatMap((payload) =>\r\n      this.userConnector.update(payload.username, payload.userDetails).pipe(\r\n        map(\r\n          () => new UserActions.UpdateUserDetailsSuccess(payload.userDetails)\r\n        ),\r\n        catchError((error) =>\r\n          of(\r\n            new UserActions.UpdateUserDetailsFail(makeErrorSerializable(error))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userConnector: UserConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { OrderHistoryList } from '../../../model/order.model';\r\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class UserOrdersEffect {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private orderConnector: UserOrderConnector\r\n  ) {}\r\n\r\n  @Effect()\r\n  loadUserOrders$: Observable<\r\n    UserActions.UserOrdersAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_USER_ORDERS),\r\n    map((action: UserActions.LoadUserOrders) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.orderConnector\r\n        .getHistory(\r\n          payload.userId,\r\n          payload.pageSize,\r\n          payload.currentPage,\r\n          payload.sort\r\n        )\r\n        .pipe(\r\n          map((orders: OrderHistoryList) => {\r\n            return new UserActions.LoadUserOrdersSuccess(orders);\r\n          }),\r\n          catchError((error) =>\r\n            of(new UserActions.LoadUserOrdersFail(makeErrorSerializable(error)))\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  resetUserOrders$: Observable<\r\n    UserActions.ClearUserOrders\r\n  > = this.actions$.pipe(\r\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\r\n    map(() => {\r\n      return new UserActions.ClearUserOrders();\r\n    })\r\n  );\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { AuthActions } from '../../../auth/store/actions/index';\r\nimport { UserSignUp } from '../../../model/misc.model';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\nimport { UserConnector } from '../../connectors/user/user.connector';\r\nimport { UserActions } from '../actions/index';\r\n\r\n@Injectable()\r\nexport class UserRegisterEffects {\r\n  @Effect()\r\n  registerUser$: Observable<\r\n    UserActions.UserRegisterOrRemoveAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.REGISTER_USER),\r\n    map((action: UserActions.RegisterUser) => action.payload),\r\n    mergeMap((user: UserSignUp) =>\r\n      this.userConnector.register(user).pipe(\r\n        map(() => new UserActions.RegisterUserSuccess()),\r\n        catchError((error) =>\r\n          of(new UserActions.RegisterUserFail(makeErrorSerializable(error)))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  registerGuest$: Observable<\r\n    UserActions.UserRegisterOrRemoveAction | AuthActions.LoadUserToken\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.REGISTER_GUEST),\r\n    map((action: UserActions.RegisterGuest) => action.payload),\r\n    mergeMap(({ guid, password }) =>\r\n      this.userConnector.registerGuest(guid, password).pipe(\r\n        switchMap((user) => [\r\n          new AuthActions.LoadUserToken({\r\n            userId: user.uid,\r\n            password: password,\r\n          }),\r\n          new UserActions.RegisterGuestSuccess(),\r\n        ]),\r\n        catchError((error) =>\r\n          of(new UserActions.RegisterGuestFail(makeErrorSerializable(error)))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  removeUser$: Observable<\r\n    UserActions.UserRegisterOrRemoveAction | AuthActions.Logout\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.REMOVE_USER),\r\n    map((action: UserActions.RemoveUser) => action.payload),\r\n    mergeMap((userId: string) => {\r\n      return this.userConnector.remove(userId).pipe(\r\n        switchMap(() => [\r\n          new UserActions.RemoveUserSuccess(),\r\n          new AuthActions.Logout(),\r\n        ]),\r\n        catchError((error) =>\r\n          of(new UserActions.RemoveUserFail(makeErrorSerializable(error)))\r\n        )\r\n      );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userConnector: UserConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, mergeMap } from 'rxjs/operators';\r\nimport * as fromCustomerCouponsAction from '../actions/customer-coupon.action';\r\nimport { CustomerCouponConnector } from '../../connectors/customer-coupon/customer-coupon.connector';\r\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\n\r\n@Injectable()\r\nexport class CustomerCouponEffects {\r\n  @Effect()\r\n  loadCustomerCoupons$: Observable<\r\n    fromCustomerCouponsAction.CustomerCouponAction\r\n  > = this.actions$.pipe(\r\n    ofType(fromCustomerCouponsAction.LOAD_CUSTOMER_COUPONS),\r\n    map(\r\n      (action: fromCustomerCouponsAction.LoadCustomerCoupons) => action.payload\r\n    ),\r\n    mergeMap((payload) => {\r\n      return this.customerCouponConnector\r\n        .getCustomerCoupons(\r\n          payload.userId,\r\n          payload.pageSize,\r\n          payload.currentPage,\r\n          payload.sort\r\n        )\r\n        .pipe(\r\n          map((coupons: CustomerCouponSearchResult) => {\r\n            return new fromCustomerCouponsAction.LoadCustomerCouponsSuccess(\r\n              coupons\r\n            );\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new fromCustomerCouponsAction.LoadCustomerCouponsFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  subscribeCustomerCoupon$: Observable<\r\n    fromCustomerCouponsAction.CustomerCouponAction\r\n  > = this.actions$.pipe(\r\n    ofType(fromCustomerCouponsAction.SUBSCRIBE_CUSTOMER_COUPON),\r\n    map(\r\n      (action: fromCustomerCouponsAction.SubscribeCustomerCoupon) =>\r\n        action.payload\r\n    ),\r\n    mergeMap((payload) => {\r\n      return this.customerCouponConnector\r\n        .turnOnNotification(payload.userId, payload.couponCode)\r\n        .pipe(\r\n          map((data: any) => {\r\n            return new fromCustomerCouponsAction.SubscribeCustomerCouponSuccess(\r\n              data\r\n            );\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new fromCustomerCouponsAction.SubscribeCustomerCouponFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  unsubscribeCustomerCoupon$: Observable<\r\n    fromCustomerCouponsAction.CustomerCouponAction\r\n  > = this.actions$.pipe(\r\n    ofType(fromCustomerCouponsAction.UNSUBSCRIBE_CUSTOMER_COUPON),\r\n    map(\r\n      (action: fromCustomerCouponsAction.UnsubscribeCustomerCoupon) =>\r\n        action.payload\r\n    ),\r\n    mergeMap((payload) => {\r\n      return this.customerCouponConnector\r\n        .turnOffNotification(payload.userId, payload.couponCode)\r\n        .pipe(\r\n          map(() => {\r\n            return new fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess(\r\n              payload.couponCode\r\n            );\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new fromCustomerCouponsAction.UnsubscribeCustomerCouponFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  claimCustomerCoupon$: Observable<\r\n    fromCustomerCouponsAction.CustomerCouponAction\r\n  > = this.actions$.pipe(\r\n    ofType(fromCustomerCouponsAction.CLAIM_CUSTOMER_COUPON),\r\n    map(\r\n      (action: fromCustomerCouponsAction.ClaimCustomerCoupon) => action.payload\r\n    ),\r\n    mergeMap((payload) => {\r\n      return this.customerCouponConnector\r\n        .claimCustomerCoupon(payload.userId, payload.couponCode)\r\n        .pipe(\r\n          map((data) => {\r\n            return new fromCustomerCouponsAction.ClaimCustomerCouponSuccess(\r\n              data\r\n            );\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new fromCustomerCouponsAction.ClaimCustomerCouponFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private customerCouponConnector: CustomerCouponConnector\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Effect, Actions, ofType } from '@ngrx/effects';\r\nimport { Action } from '@ngrx/store';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, switchMap, catchError } from 'rxjs/operators';\r\nimport { UserActions } from '../actions/index';\r\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\r\nimport { UserInterestsConnector } from '../../connectors/interests/user-interests.connector';\r\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\r\n\r\n@Injectable()\r\nexport class ProductInterestsEffect {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userInterestsConnector: UserInterestsConnector\r\n  ) {}\r\n\r\n  @Effect()\r\n  loadProductInteres$: Observable<\r\n    UserActions.ProductInterestsAction\r\n  > = this.actions$.pipe(\r\n    ofType(UserActions.LOAD_PRODUCT_INTERESTS),\r\n    map((action: UserActions.LoadProductInterests) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.userInterestsConnector\r\n        .getInterests(\r\n          payload.userId,\r\n          payload.pageSize,\r\n          payload.currentPage,\r\n          payload.sort,\r\n          payload.productCode,\r\n          payload.notificationType\r\n        )\r\n        .pipe(\r\n          map((interests: ProductInterestSearchResult) => {\r\n            return new UserActions.LoadProductInterestsSuccess(interests);\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.LoadProductInterestsFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  removeProductInterest$: Observable<Action> = this.actions$.pipe(\r\n    ofType(UserActions.REMOVE_PRODUCT_INTEREST),\r\n    map((action: UserActions.RemoveProductInterest) => action.payload),\r\n    switchMap((payload) =>\r\n      this.userInterestsConnector\r\n        .removeInterest(payload.userId, payload.item)\r\n        .pipe(\r\n          switchMap((data) => [\r\n            new UserActions.LoadProductInterests(\r\n              payload.singleDelete\r\n                ? {\r\n                    userId: payload.userId,\r\n                    productCode: payload.item.product.code,\r\n                    notificationType:\r\n                      payload.item.productInterestEntry[0].interestType,\r\n                  }\r\n                : { userId: payload.userId }\r\n            ),\r\n            new UserActions.RemoveProductInterestSuccess(data),\r\n          ]),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.RemoveProductInterestFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  addProductInterest$: Observable<Action> = this.actions$.pipe(\r\n    ofType(UserActions.ADD_PRODUCT_INTEREST),\r\n    map((action: UserActions.AddProductInterest) => action.payload),\r\n    switchMap((payload) =>\r\n      this.userInterestsConnector\r\n        .addInterest(\r\n          payload.userId,\r\n          payload.productCode,\r\n          payload.notificationType\r\n        )\r\n        .pipe(\r\n          switchMap((res: any) => [\r\n            new UserActions.LoadProductInterests({\r\n              userId: payload.userId,\r\n              productCode: payload.productCode,\r\n              notificationType: payload.notificationType,\r\n            }),\r\n            new UserActions.AddProductInterestSuccess(res),\r\n          ]),\r\n          catchError((error) =>\r\n            of(\r\n              new UserActions.AddProductInterestFail(\r\n                makeErrorSerializable(error)\r\n              )\r\n            )\r\n          )\r\n        )\r\n    )\r\n  );\r\n}\r\n","import { BillingCountriesEffect } from './billing-countries.effect';\nimport { ClearMiscsDataEffect } from './clear-miscs-data.effect';\nimport { ConsignmentTrackingEffects } from './consignment-tracking.effect';\nimport { DeliveryCountriesEffects } from './delivery-countries.effect';\nimport { ForgotPasswordEffects } from './forgot-password.effect';\nimport { NotificationPreferenceEffects } from './notification-preference.effect';\nimport { OrderDetailsEffect } from './order-details.effect';\nimport { OrderReturnRequestEffect } from './order-return-request.effect';\nimport { UserPaymentMethodsEffects } from './payment-methods.effect';\nimport { RegionsEffects } from './regions.effect';\nimport { ResetPasswordEffects } from './reset-password.effect';\nimport { TitlesEffects } from './titles.effect';\nimport { UpdateEmailEffects } from './update-email.effect';\nimport { UpdatePasswordEffects } from './update-password.effect';\nimport { UserAddressesEffects } from './user-addresses.effect';\nimport { UserConsentsEffect } from './user-consents.effect';\nimport { UserDetailsEffects } from './user-details.effect';\nimport { UserOrdersEffect } from './user-orders.effect';\nimport { UserRegisterEffects } from './user-register.effect';\nimport { CustomerCouponEffects } from './customer-coupon.effect';\nimport { ProductInterestsEffect } from './product-interests.effect';\n\nexport const effects: any[] = [\n  ClearMiscsDataEffect,\n  DeliveryCountriesEffects,\n  RegionsEffects,\n  TitlesEffects,\n  UserDetailsEffects,\n  UserAddressesEffects,\n  UserPaymentMethodsEffects,\n  UserRegisterEffects,\n  UserOrdersEffect,\n  OrderDetailsEffect,\n  BillingCountriesEffect,\n  ResetPasswordEffects,\n  ForgotPasswordEffects,\n  UpdateEmailEffects,\n  UpdatePasswordEffects,\n  UserConsentsEffect,\n  ConsignmentTrackingEffects,\n  CustomerCouponEffects,\n  NotificationPreferenceEffects,\n  ProductInterestsEffect,\n  OrderReturnRequestEffect,\n];\n\nexport * from './billing-countries.effect';\nexport * from './clear-miscs-data.effect';\nexport * from './consignment-tracking.effect';\nexport * from './delivery-countries.effect';\nexport * from './notification-preference.effect';\nexport * from './order-details.effect';\nexport * from './order-return-request.effect';\nexport * from './payment-methods.effect';\nexport * from './regions.effect';\nexport * from './reset-password.effect';\nexport * from './titles.effect';\nexport * from './user-addresses.effect';\nexport * from './user-consents.effect';\nexport * from './user-details.effect';\nexport * from './user-orders.effect';\nexport * from './user-register.effect';\nexport * from './customer-coupon.effect';\nexport * from './product-interests.effect';\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { metaReducers, reducerToken, reducerProvider } from './reducers/index';\r\nimport { effects } from './effects/index';\r\nimport { USER_FEATURE } from './user-state';\r\nimport { StateModule } from '../../state/state.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    StateModule,\r\n    StoreModule.forFeature(USER_FEATURE, reducerToken, { metaReducers }),\r\n    EffectsModule.forFeature(effects),\r\n    RouterModule,\r\n  ],\r\n  providers: [reducerProvider],\r\n})\r\nexport class UserStoreModule {}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { UserStoreModule } from './store/user-store.module';\r\n\r\n@NgModule({\r\n  imports: [UserStoreModule],\r\n})\r\nexport class UserModule {\r\n  static forRoot(): ModuleWithProviders<UserModule> {\r\n    return {\r\n      ngModule: UserModule,\r\n    };\r\n  }\r\n}\r\n","export const testestsd = 'sare';\n"]}