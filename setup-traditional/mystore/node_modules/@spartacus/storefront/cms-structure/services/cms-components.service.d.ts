import { CmsComponentMapping, CmsConfig, DeferLoadingStrategy } from '@spartacus/core';
import { Route } from '@angular/router';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class CmsComponentsService {
    protected config: CmsConfig;
    protected platformId: Object;
    private missingComponents;
    constructor(config: CmsConfig, platformId: Object);
    /**
     * Should be called to make sure all component mappings are determined,
     * especially lazy loaded ones.
     *
     * It's recommended way to make sure all other methods of CmsComponentService
     * will be able to work synchronously for asked component types and avoid risk
     * of potential errors that could be thrown otherwise.
     */
    determineMappings(componentTypes: string[]): Observable<string[]>;
    /**
     * Return collection of component mapping configuration for specified list of
     * component types.
     *
     * If component mapping can't be determined synchronously, for example, lazy
     * loaded one, it will throw an error.
     *
     * To make sure component mapping is available, determineMappings()
     * should be called and completed first.
     */
    getMapping(componentType: string): CmsComponentMapping;
    /**
     * Checks, if component should be rendered as some components
     * could be disabled for server side renderings
     */
    shouldRender(componentType: string): boolean;
    /**
     * Return DeferLoadingStrategy for component type.
     */
    getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy;
    /**
     * Get cms driven child routes for components
     */
    getChildRoutes(componentTypes: string[]): Route[];
    /**
     * Get cms driven guards for components
     */
    getGuards(componentTypes: string[]): any[];
    /**
     * Get i18n keys associated with components
     */
    getI18nKeys(componentTypes: string[]): string[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CmsComponentsService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY21zLWNvbXBvbmVudHMuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJjbXMtY29tcG9uZW50cy5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ21zQ29tcG9uZW50TWFwcGluZywgQ21zQ29uZmlnLCBEZWZlckxvYWRpbmdTdHJhdGVneSB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XHJcbmltcG9ydCB7IFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDbXNDb21wb25lbnRzU2VydmljZSB7XHJcbiAgICBwcm90ZWN0ZWQgY29uZmlnOiBDbXNDb25maWc7XHJcbiAgICBwcm90ZWN0ZWQgcGxhdGZvcm1JZDogT2JqZWN0O1xyXG4gICAgcHJpdmF0ZSBtaXNzaW5nQ29tcG9uZW50cztcclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogQ21zQ29uZmlnLCBwbGF0Zm9ybUlkOiBPYmplY3QpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTaG91bGQgYmUgY2FsbGVkIHRvIG1ha2Ugc3VyZSBhbGwgY29tcG9uZW50IG1hcHBpbmdzIGFyZSBkZXRlcm1pbmVkLFxyXG4gICAgICogZXNwZWNpYWxseSBsYXp5IGxvYWRlZCBvbmVzLlxyXG4gICAgICpcclxuICAgICAqIEl0J3MgcmVjb21tZW5kZWQgd2F5IHRvIG1ha2Ugc3VyZSBhbGwgb3RoZXIgbWV0aG9kcyBvZiBDbXNDb21wb25lbnRTZXJ2aWNlXHJcbiAgICAgKiB3aWxsIGJlIGFibGUgdG8gd29yayBzeW5jaHJvbm91c2x5IGZvciBhc2tlZCBjb21wb25lbnQgdHlwZXMgYW5kIGF2b2lkIHJpc2tcclxuICAgICAqIG9mIHBvdGVudGlhbCBlcnJvcnMgdGhhdCBjb3VsZCBiZSB0aHJvd24gb3RoZXJ3aXNlLlxyXG4gICAgICovXHJcbiAgICBkZXRlcm1pbmVNYXBwaW5ncyhjb21wb25lbnRUeXBlczogc3RyaW5nW10pOiBPYnNlcnZhYmxlPHN0cmluZ1tdPjtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIGNvbGxlY3Rpb24gb2YgY29tcG9uZW50IG1hcHBpbmcgY29uZmlndXJhdGlvbiBmb3Igc3BlY2lmaWVkIGxpc3Qgb2ZcclxuICAgICAqIGNvbXBvbmVudCB0eXBlcy5cclxuICAgICAqXHJcbiAgICAgKiBJZiBjb21wb25lbnQgbWFwcGluZyBjYW4ndCBiZSBkZXRlcm1pbmVkIHN5bmNocm9ub3VzbHksIGZvciBleGFtcGxlLCBsYXp5XHJcbiAgICAgKiBsb2FkZWQgb25lLCBpdCB3aWxsIHRocm93IGFuIGVycm9yLlxyXG4gICAgICpcclxuICAgICAqIFRvIG1ha2Ugc3VyZSBjb21wb25lbnQgbWFwcGluZyBpcyBhdmFpbGFibGUsIGRldGVybWluZU1hcHBpbmdzKClcclxuICAgICAqIHNob3VsZCBiZSBjYWxsZWQgYW5kIGNvbXBsZXRlZCBmaXJzdC5cclxuICAgICAqL1xyXG4gICAgZ2V0TWFwcGluZyhjb21wb25lbnRUeXBlOiBzdHJpbmcpOiBDbXNDb21wb25lbnRNYXBwaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3MsIGlmIGNvbXBvbmVudCBzaG91bGQgYmUgcmVuZGVyZWQgYXMgc29tZSBjb21wb25lbnRzXHJcbiAgICAgKiBjb3VsZCBiZSBkaXNhYmxlZCBmb3Igc2VydmVyIHNpZGUgcmVuZGVyaW5nc1xyXG4gICAgICovXHJcbiAgICBzaG91bGRSZW5kZXIoY29tcG9uZW50VHlwZTogc3RyaW5nKTogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIERlZmVyTG9hZGluZ1N0cmF0ZWd5IGZvciBjb21wb25lbnQgdHlwZS5cclxuICAgICAqL1xyXG4gICAgZ2V0RGVmZXJMb2FkaW5nU3RyYXRlZ3koY29tcG9uZW50VHlwZTogc3RyaW5nKTogRGVmZXJMb2FkaW5nU3RyYXRlZ3k7XHJcbiAgICAvKipcclxuICAgICAqIEdldCBjbXMgZHJpdmVuIGNoaWxkIHJvdXRlcyBmb3IgY29tcG9uZW50c1xyXG4gICAgICovXHJcbiAgICBnZXRDaGlsZFJvdXRlcyhjb21wb25lbnRUeXBlczogc3RyaW5nW10pOiBSb3V0ZVtdO1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgY21zIGRyaXZlbiBndWFyZHMgZm9yIGNvbXBvbmVudHNcclxuICAgICAqL1xyXG4gICAgZ2V0R3VhcmRzKGNvbXBvbmVudFR5cGVzOiBzdHJpbmdbXSk6IGFueVtdO1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgaTE4biBrZXlzIGFzc29jaWF0ZWQgd2l0aCBjb21wb25lbnRzXHJcbiAgICAgKi9cclxuICAgIGdldEkxOG5LZXlzKGNvbXBvbmVudFR5cGVzOiBzdHJpbmdbXSk6IHN0cmluZ1tdO1xyXG59XHJcbiJdfQ==