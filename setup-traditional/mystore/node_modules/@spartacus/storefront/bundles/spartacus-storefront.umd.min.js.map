{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/layout/launch-dialog/config/launch-config.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/inline-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-dialog.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-renderer.service.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/outlet-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/routing-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/launch-dialog.module.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-launch-dialog.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/visible/visible-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/block/block-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.model.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/select-focus.util.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/keyboard-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.module.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents-dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/default-anonymous-consent-layout.config.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents-dialog/anonymous-consents-dialog.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.component.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/default-pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.builder.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/media/media.config.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-structure/services/cms-components.service.ts","ng://@spartacus/storefront/cms-structure/page/component/services/cms-injector.service.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/component-handler.ts","ng://@spartacus/storefront/cms-structure/page/component/services/component-handler.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/default-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/lazy-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/asm-toggle-ui/asm-toggle-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/default-asm-layout.config.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes-impl.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page-guard.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/product-facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/default-media.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","DIALOG_TYPE","LAUNCH_CALLER","BREAKPOINT","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","OutletPosition","LayoutConfig","Injectable","providedIn","useExisting","Config","LaunchRenderStrategy","document","rendererFactory","renderedCallers","dialogClasses","popoverClasses","sidebarEndClasses","sidebarStartClasses","renderer","createRenderer","shouldRender","caller","config","Boolean","component","some","el","multi","applyClasses","dialogType","classes","DIALOG","addClass","body","POPOVER","SIDEBAR_END","SIDEBAR_START","classes_1","classes_1_1","newClass","location","nativeElement","remove","filter","_a","removeClass","getPriority","Inject","DOCUMENT","InlineRenderStrategy","componentFactoryResolver","_this","_super","render","vcr","template","resolveComponentFactory","createComponent","element","of","isDevMode","console","warn","hasMatch","inline","args","RendererFactory2","ComponentFactoryResolver","LaunchDialogService","renderStrategies","layoutConfig","_dialogClose","BehaviorSubject","undefined","launch","findConfiguration","getStrategy","clear","asObservable","closeDialog","reason","resolveApplicable","ICON_TYPE","OutletService","templatesRefs","Map","templatesRefsBefore","templatesRefsAfter","add","outlet","templateOrFactory","position","REPLACE","BEFORE","store","AFTER","get","stacked","templateRef","removeValueOrAll","newValue","set","has","delete","existing","val","OutletRefDirective","tpl","outletService","ngOnInit","cxOutletRef","cxOutletPos","TemplateRef","Input","Directive","selector","OutletRefModule","NgModule","imports","CommonModule","declarations","exports","OutletRendererService","outletRefs","size","register","cxOutlet","context","getOutletRef","pipe","map","IntersectionService","isIntersected","options","intersects","first","v","Observable","observer","intersectOptions","rootMargin","getRootMargin","threshold","intersectionObserver","IntersectionObserver","entries","observe","disconnect","flatMap","entry","isIntersecting","distinctUntilChanged","deferredLoading","intersectionMargin","DeferLoaderService","platformId","intersectionService","globalLoadStrategy","strategy","DeferLoadingStrategy","INSTANT","load","shouldLoadInstantly","deferLoading","elementLoadingStrategy","isPlatformServer","DEFER","type","PLATFORM_ID","OutletDirective","deferLoaderService","outletRendererService","renderedTemplate","renderedComponents","loaded","EventEmitter","subscription","Subscription","unsubscribe","cxOutletDefer","build","ngOnChanges","changes","emit","hostElement","getHostElement","subscribe","buildOutlet","templates","includes","isArray","components","forEach","obj","tmplOrFactory","ComponentFactory","view","createEmbeddedView","$implicit","cxOutletContext","markForCheck","HTMLElement","parentNode","ngOnDestroy","ViewContainerRef","Output","OutletModule","providers","OutletRenderStrategy","template_1","outletDirective","reverse","find","componentType","tap","RoutingRenderStrategy","routingService","_caller","go","cxRoute","RoutingService","LaunchDialogModule","forRoot","ngModule","LaunchDialogModule_1","provide","AnonymousConsentLaunchDialogService","launchDialogService","openDialog","openElement","ANONYMOUS_CONSENT","combineLatest","dialogClose","close","comp","focus","destroy","BaseFocusService","BaseFocusDirective","elementRef","service","defaultConfig","setDefaultConfiguration","requiredTabindex","tabindex","requiresExplicitTabIndex","indexOf","host","tagName","toLowerCase","hasAttribute","ElementRef","HostBinding","VisibleFocusDirective","disableMouseFocus","mouseFocus","handleMousedown","shouldFocusVisible","handleKeydown","HostListener","BlockFocusDirective","block","PersistFocusService","group","getPersistenceGroup","getAttribute","PersistFocusDirective","handleFocus","event","preventDefault","stopPropagation","attr","ngAfterViewInit","isPersisted","preventScroll","SelectFocusUtility","focusableSelectors","focusableSelectorSuffix","query","from","querySelectorAll","findFirstFocusable","autofocus","isHidden","findFocusable","locked","invisible","suffix","join","offsetParent","EscapeFocusService","selectFocusUtil","shouldFocus","focusOnEscape","handleEscape","focusOnDoubleEscape","EscapeFocusDirective","esc","AutoFocusService","hasPersistedFocus","getPersisted","focussed","AutoFocusDirective","shouldAutofocus","firstFocusable","TabFocusService","moveTab","increment","tab","findNextScrollable","findNext","active","getActiveChild","virtualSlideCount","Math","round","scrollWidth","clientWidth","nextVirtualSlide","offsetLeft","getChildren","childs","activeIndex","findIndex","persisted","children","index","isActive","child","activeElement","TabFocusDirective","handleNextTab","handlePreviousTab","TrapFocusService","hasFocusableChildren","moveFocus","focusable","getTrapStart","trap","getTrapEnd","TrapFocusDirective","handleTrapDown","handleTrapUp","LockFocusService","LockFocusDirective","lock","unlock","handleEnter","shouldLock","unlockFocus","handleClick","isLocked","lockFocus","addTabindexToChildren","setTimeout","_b","setAttribute","shouldUnlockAfterAutofocus","toString","Renderer2","KeyboardFocusService","FocusDirective","directives","KeyboardFocusModule","AnonymousConsentManagementBannerComponent","anonymousConsentsService","anonymousConsentLaunchDialogService","subscriptions","bannerVisible$","isBannerVisible","viewDetails","hideBanner","dialog","allowAll","giveAllConsents","toggleBannerDismissed","AnonymousConsentsService","Component","IconResourceType","IconConfig","PaginationItemType","PaginationNavigationPosition","fontawesomeIconConfig","icon","symbols","SEARCH","CART","INFO","STAR","GRID","LIST","CARET_DOWN","CARET_RIGHT","CARET_LEFT","ERROR","WARNING","SUCCESS","CLOSE","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","COLLAPSE","EXPAND","RESET","CIRCLE","HEART","EMPTY_HEART","FILTER","resources","LINK","url","IconLoaderService","winRef","iconConfig","sanitizer","loadedResources","getHtml","isResourceType","SVG","bypassSecurityTrustHtml","getSvgPath","TEXT","getSymbol","getStyleClasses","iconType","resourceType","res","types","svgResource","addLinkResource","resource","findResource","head","getElementsByTagName","link","createElement","rel","href","appendChild","WindowRef","DomSanitizer","IconComponent","iconLoader","setIcon","addStyleClasses","styleClasses","cls","split","IconModule","provideDefaultConfig","AnonymousConsentDialogComponent","role","modal","showLegalDescription","iconTypes","requiredConsents","focusConfig","anonymousConsents","showLegalDescriptionInDialog","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","rejectAll","take","consents","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","consents_1_1","templateCode","AnonymousConsentsConfig","defaultAnonymousConsentLayoutConfig","AnonymousConsentOpenDialogComponent","ViewChild","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","provideConfig","cmsComponents","entryComponents","SpinnerComponent","SpinnerModule","ConsentManagementFormComponent","consentGiven","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","globalMessageService","anonymousConsentsConfig","authService","allConsentsLoading","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","isUserLoggedIn","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","withLatestFrom","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","success","onConsentGivenSuccess","resetWithdrawConsentProcessState","skipWhile","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","code","GlobalMessageType","MSG_TYPE_CONFIRMATION","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","loading","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","UserConsentService","GlobalMessageService","AuthService","ConsentManagementModule","FormsModule","ReactiveFormsModule","guards","AuthGuard","AnonymousConsentsDialogModule","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","setDefault","send","edit","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","floor","CarouselComponent","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","size$","changeDetection","ChangeDetectionStrategy","OnPush","DEFAULT_BREAKPOINTS","xs","sm","md","lg","BreakpointService","window","getBreakpoint","innerWidth","getSize","breakpoint","breakpoints","xl","isDown","breakpoint$","br","slice","isUp","isEqual","windowWidth","getClosest","nativeWindow","MediaService","breakpointService","getMedia","mediaContainer","format","alt","mainMedia","resolveMedia","src","resolveAbsoluteUrl","altText","srcset","resolveSrcSet","_sortedFormats","keys","mediaFormats","sort","a","width","_reversedFormats","sortedFormats","media","resolveFormat","resolveBestFormat","reversedFormats","reduce","startsWith","getBaseUrl","backend","baseUrl","occ","MediaComponent","mediaService","isInitialized","isLoading","isMissing","container","handleMissing","loadHandler","errorHandler","MediaModule","MediaModule_1","CarouselModule","RouterModule","UrlModule","FormErrorsComponent","_control","control","errors$","statusChanges","startWith","errors","invalid","dirty","touched","FormErrorsModule","GenericLinkComponent","router","PROTOCOL_REGEX","URL_SPLIT","routeParts","isExternalUrl","test","setUrlParts","currentValue","path","queryParams","fragment","getAbsoluteUrl","splitUrl","parseUrl","match","Router","GenericLinkModule","ItemCounterComponent","min","step","allowZero","readonly","input","sub","valueChanges","setValue","getValidCount","emitEvent","markAsDirty","decrement","max","ItemCounterModule","defaultPaginationConfig","pagination","addStart","addEnd","PaginationConfig","SiteContextType","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","start","getStartOfRange","_","number","label","String","PAGE","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstitued","GAP","FIRST","addFirstGap","nextPageNumber","last","addLast","LAST","addLastGap","before","getBeforeLinks","after","getAfter","pos","navigationPosition","ASIDE","list","START","addPrevious","PREVIOUS","addNext","NEXT","END","count","delta","minStart","maxStart","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","totalPages","currentPage","isCurrent","item","isInactive","getQueryParams","snapshot","queryParam","defaultPage","pageChange","page","ActivatedRoute","PaginationModule","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","MediaConfig","ModalRef","NgbModalRef","ModalService","ngbModalService","modals","open","content","activeModal","getActiveModal","dismissActiveModal","dismiss","pop","closeActiveModal","NgbModal","GlobalMessageComponent","messageType","messages$","GlobalMessageComponentModule","HttpClientModule","QualtricsConfig","QualtricsLoaderService","qsiLoaded$","fromEvent","qsi$","switchMap","isDataLoaded","api","qsi","qsiApi","initialize","run","reload","API","unload","log","addScript","scriptSource","hasScript","script","defer","source","querySelector","QualtricsComponent","qualtricsLoader","qualtrics","defaultQualtricsConfig","QualtricsModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","SiteContextModule","CMSSiteContextComponent","useClass","deps","StarRatingComponent","disabled","change","initialRate","setRate","rating","force","saveRate","setRateOnEvent","StarRatingModule","ViewConfig","ViewConfigModule","ViewConfigModule_1","OrderDetailsService","userOrderService","orderCode$","getRouterState","routingData","state","params","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","UserOrderService","PromotionService","orderDetailsService","checkoutService","activeCartService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","cart","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","description","consumedEntries","_c","e_2","_d","consumedEntry","isConsumedByEntry","consumedEntryNumber","orderEntryNumber","entryNumber","CheckoutService","ActiveCartService","CustomFormValidators","emailValidator","email","EMAIL_PATTERN","cxInvalidEmail","passwordValidator","password","PASSWORD_PATTERN","cxInvalidPassword","starRatingEmpty","cxStarRatingEmpty","passwordsMustMatch","passwordConfirmation","formGroup","controlsMustMatch","emailsMustMatch","emailConfirmation","firstControlName","secondControlName","errorName","firstControl","controls","secondControl","setErrors","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","CmsComponentsService","missingComponents","determineMappings","componentTypes","getMapping","componentConfig","disableSSR","getDeferLoadingStrategy","getChildRoutes","routes","componentTypes_1","componentTypes_1_1","childRoutes","getGuards","Set","componentTypes_2","componentTypes_2_1","guard","getI18nKeys","i18nKeys","componentTypes_3","componentTypes_3_1","CmsConfig","CmsInjectorService","cmsComponentsService","getCmsData","uid","parentInjector","CmsService","getComponentData","getInjector","configProviders","useValue","parent","ComponentHandler","ComponentHandlerService","handlers","invalidMappings","resolve","componentMapping","handler","getLauncher","viewContainerRef","elementInjector","launcher","ComponentWrapperDirective","dynamicAttributeService","componentHandler","cmsInjector","cxComponentWrapper","flexType","launchComponent","launcherResource","componentRef","cmpRef","addDynamicAttributes","DynamicAttributeService","DefaultComponentHandler","subscriber","factory","getComponentFactory","LazyComponentHandler","defaultHandler","isNotClass","signature","substr","replace","PageComponentModule","AsmEnablerService","isEnabled","addUi","isLaunched","isUsedBefore","localStorage","setItem","getItem","ASM","Location","AsmLoaderModule","APP_INITIALIZER","useFactory","asmFactory","asmEnablerService","CheckoutStepType","DeliveryModePreferences","AsmComponentService","asmAuthService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","isCustomerEmulationSessionInProgress","mergeMap","userToken","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","asmService","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","access_token","handleCustomerSessionStartRedirection","isCollapsed$","getAsmUiState","uiState","collapsed","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","UserService","AsmService","encapsulation","ViewEncapsulation","None","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","ChangeDetectorRef","FormatTimerPipe","transform","totalSeconds","minutes","seconds","Pipe","name","AsmToggleUiComponent","isCollapsed","toggleUi","updateAsmUiState","CSAgentLoginFormComponent","fb","csAgentTokenLoading","submitEvent","csAgentLoginForm","Validators","required","onSubmit","valid","markAllAsTouched","FormBuilder","CustomerEmulationComponent","user","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","customerSelectionForm","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","debounceTime","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","pageSize","maxResults","selectCustomerFromList","onDocumentClick","resultList","contains","closeResults","(document:click)","defaultAsmLayoutConfig","AsmModule","AsmCoreModule","CurrentProductService","productService","DEFAULT_PRODUCT_SCOPE","ProductScope","DETAILS","getProduct","scopes","productCode","x","ProductService","AddedToCartDialogComponent","modalService","cartService","promotionService","quantity","modalIsOpen","form","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","FormControl","updateOn","addControl","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","addToCartForm","product","cartEntry$","getEntry","setStockInfo","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","centered","componentInstance","cart$","loaded$","isStable","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","getActiveCartId","getCustomerCoupons","activeCardId","customerCoupons","cartId","getApplicableCustomerCoupons","coupons","cartIsLoading$","resetAddVoucherProcessingState","couponForm","couponCode","getAddVoucherResultSuccess","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","applyVoucher","addVoucher","applyCustomerCoupon","blur","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","selectiveCartService","hasHeader","isSaveForLater","optionalBtn","_items","resolveItems","createForm","disable","enable","every","consignmentEntry","orderEntry","updateable","removeEntry","getControl","SelectiveCartService","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","selectiveCartEnabled","cartLoaded$","getLoaded","cartLoaded","sflLoaded","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","getCart","getLoading","slots","selectiveCart","loadingCart","exclude","arr","arg","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","cmsService","isCartEmpty$","saveForLater$","moveToCart","SaveForLaterModule","CartComponentModule","CartModule","SkipLinkScrollPosition","CheckoutConfig","defaultCheckoutConfig","checkout","steps","routeName","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","express","defaultDeliveryMode","FREE","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","LEAST_EXPENSIVE","leastExpensiveFound","deliveryMode","MOST_EXPENSIVE","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","stepRoute","getRouteConfig","paths","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","OCC_USER_ID_ANONYMOUS","guid","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","CheckoutDeliveryService","CheckoutPaymentService","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","UserAddressService","UserPaymentService","CheckoutGuard","expressCheckoutService","firstStep$","expressCheckoutPossible","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","getTabIndex","isDisabled","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","closeModal","PaymentFormComponent","months","years","sameAsShippingAddress","selectedCountry$","goBack","closeForm","paymentForm","cardType","accountHolderName","cardNumber","expiryMonth","expiryYear","cvn","billingAddressForm","firstName","lastName","line1","line2","town","region","isocodeShort","country","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","showSameAsShippingAddressCheckbox$","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","regions$","getRegions","regions","regionControl","year","Date","getFullYear","j","toggleDefaultPaymentMethod","toggleSameAsShippingAddress","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","result","then","catch","verifyAddress","countrySelected","paymentDetails","billingAddress","PaymentFormModule","PaymentMethodComponent","translation","newPaymentFormManuallyOpened","shouldRedirect","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","selectedMethod$","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","cards$","methods","method","translate","month","payment","expiryTranslation","paymentMethods","selectedMethod","textUseThisPayment","textDefaultPaymentMethod","textSelected","defaultPaymentMethod","paymentMethod","createCard","textExpires","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","field","cardLabels","selected","title","img","actions","header","goNext","goPrevious","TranslationService","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","checkoutSubmitForm","termsAndConditions","requiredTrue","submitForm","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","setAsDefaultField","showCancelBtn","submitAddress","backToAddress","addressForm","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","subject","addressData","patchValue","regionSelected","toggleDefaultAddress","regionsSub","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","getAddressesLoading","existingAddresses$","selectedAddress$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","card","getCardContent","addAddress","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","SkipLinkConfig","SkipLinkService","keyboardFocusService","skipLinks$","getSkipLinks","found","skipLinks","skipLink","splice","getSkipLinkIndexInArray","i18nKey","scrollToTarget","parentElement","hasTabindex","removeAttribute","previous","this_1","SkipLinkComponent","skipLinkService","defaultSkipLinkConfig","SkipLinkDirective","cxSkipLink","SkipLinkModule","ConfigModule","withConfig","skipLinkFactory","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","LayoutModule","PageSlotComponent","isPageFold","isPending","hasComponents","position$","slot$","getContentSlot","isDistinct","components$","slot","pendingComponentCount","class","lastPosition","pending","addSmartEditSlotClass","isLoaded","loadState","getComponentDeferOptions","old","slotData","PageSlotModule","PageLayoutService","cms","warnLogMessages","logSlots","getSlots","page$","resolveSlots","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","pageFoldSlot$","templateName","currentClass","PageLayoutModule","PWAModuleConfig","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","init","addEventListener","deferredEvent","enableAddToHomeScreen","disableAddToHomeScreen","firePrompt","prompt","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","SwRegistrationOptions","htmlLangProvider","setHtmlLangAttribute","LanguageService","languageService","lang","documentElement","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","PageMetaService","JsonLdScriptFactory","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","isPlatformBrowser","scriptElement","getElementById","JSON","stringify","_key","SecurityContext","HTML","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","StorefrontComponent","isExpanded$","keyboardFocusConfig","navigateSubscription","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","CmsGuardsService","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","Promise","wrapIntoObservable","Error","endWith","CmsI18nService","translationChunk","loadForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesImplService","cmsRouteExists","isCmsDrivenRoute","routePath","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","resetConfig","CmsRoutesService","CmsPageGuardService","semanticPathService","cmsRoutes","cmsI18n","cmsGuards","canActivatePage","pageData","getPageComponentTypes","canActivateNotFoundPage","notFoundCmsPageContext","getPage","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","SemanticPathService","CmsPageGuard","protectedRoutesGuard","routingConfig","getNextPageContext","shouldReload","getLoadStrategy","guardName","ProtectedRoutesGuard","cmsRoute","addCmsRoute","CmsRouteModule","ɵ0","defaultStorefrontRoutesConfig","home","notFound","login","protected","forgotPassword","resetPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","search","category","paramsMapping","categoryCode","brand","orders","orderDetails","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","returnCode","couponClaim","defaultRoutingConfig","routing","RoutingModule","RoutingModule_1","CoreRoutingModule","getSuffixUrlMatcher","marker","paramName","precedingParamName","matcher","segments","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","posParams","consumed","AmendOrderType","BreadcrumbSchemaBuilder","pageMeta","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductReviewService","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","y","typeCode","select","tabNum","history","activeTab","getTitleParams","tabComps","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","defaultText","setAsDefaultText","textDelete","textEdit","textVerifyDeleteMsg","deleteMsg","setAddressAsDefault","deleteAddress","deleteUserAddress","setEdit","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","forgotPasswordForm","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","continue","amendOrderForm","forwardRoute","AmendOrderActionsModule","ValidateQuantityToCancel","values","cxNoSelectedItemToCancel","ViewModes","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","CANCEL","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","Number","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","CancelOrderConfirmationModule","forChild","ɵ0$1","CancelOrderComponent","CancelOrderModule","ɵ0$2","OrderCancellationModule","OrderReturnService","returnRequestService","RETURN","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ReturnOrderConfirmationModule","ɵ0$3","ReturnOrderComponent","ReturnOrderModule","ɵ0$4","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderConsignedEntriesComponent","getConsignmentProducts","products","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","OrderDetailActionsComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","features","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","ɵ0$6","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDeleteConfirmation","deletePaymentMethod","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","resetPasswordForm","repassword","isPasswordReset","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","updateEmailForm","confirmEmail","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","submitted","cancelled","updatePasswordForm","oldPassword","newPassword","newPasswordConfirm","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","updateProfileForm","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","MyCouponsModule","ɵ0$8","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","UserNotificationPreferenceService","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","UserInterestsService","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","node","populateLink","itemType","linkName","getLink","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getTotalDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","matches","wrapper","closest","removeStyle","offsetWidth","setStyle","navs","childNodes","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","classList","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","SearchboxService","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","isSearchboxFocused","blurSearchBox","getResultElements","getFocusedElement","avoidReopen","getFocusedIndex","focusPreviousChild","focusedIndex","focusNextChild","launchSearchResult","HighlightPipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","ProductReferenceService","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","scrollIntoView","behavior","click","tabElements","buttonElement","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","pluck","criteria","getCriteriaFromRoute","model$","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","ProductSearchService","CurrencyService","FacetGroupCollapsedState","ProductViewComponent","modeChange","viewMode","newMode","Grid","List","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","model","setConditions","ProductDetailOutlets","ProductFacetService","routeState$","searchResult$","filterForPage","mapResults","facetList$","facets","activeFacets","CATEGORY_PAGE","currentQuery","filterBreadcrumbs","breadcrumb","hasBreadcrumb","facetCode","facetValueCode","FacetService","productFacetService","facetState","facetList","facet","getState","getStateSnapshot","toggledState","toggled","COLLAPSED","EXPANDED","maxVisible","topVisible","updateState","increaseVisibleValues","decreaseVisibleValues","topValueCount","hasState","property","getLinkParams","HttpUrlEncodingCodec","decodeValue","ActiveFacetsComponent","facetService","closeIcon","removeQuery","getFocusKey","f","facetValueName","Default","ActiveFacetsModule","FacetListComponent","closeList","dialogFocusConfig","_isDialog","expandFacetGroup","FacetComponent","expandIcon","collapseIcon","_facet","isMultiSelect","multiSelect","state$","toggleGroup","keyboardFocus","openLink","FacetModule","FacetListModule","ProductFacetNavigationComponent","CLOSE_DELAY","open$","isOpen$","observeOn","asapScheduler","hasTrigger","delayWhen","launched","isActive$","trigger","ProductFacetNavigationModule","ProductRefinementComponent","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","q","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","OccConfig","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","InfiniteScrollModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductSummaryComponent","outlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","detectChanges","titleInput","cancelWriteReview","writeReviewButton","setRating","reviewForm","submitReview","addReview","reviewFormControls","alias","reviewerName","static","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","onKey","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","radius","parseParameters","googleMaps","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderConfig","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","checkoutLoginForm","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","auth","loginAsGuest","routeState","prefilledEmail","loginForm","_e","loginUser","authorize","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","LogoutModule","ɵ0$9","RegisterComponent","registerForm","newsletter","isConsentRequired","termsandconditions","getRegisterUserResultLoading","registerUserProcessInit","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","registerUser","collectDataFromRegisterForm","titleSelected","formData","onRegisterUserSuccess","resetRegisterUserProcessState","getRegisterUserResultSuccess","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","PRODUCT_DETAILS_URL_MATCHER","inject","UrlMatcherService","defaultMatcherFactory","DEFAULT_URL_MATCHER","defaultMatcher","suffixPDPMatcher","getCombined","ProductDetailsPageModule","ɵ0$a","matchers","PRODUCT_LISTING_URL_MATCHER","suffixPLPMatcher","ɵ1$1","ɵ2","ProductListingPageModule","ɵ0$b","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","mediaConfig","mobile","tablet","desktop","widescreen","cartIcon","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","StorefrontFoundationModule","StateModule","AuthModule","AnonymousConsentsModule","ConfigInitializerModule","ConfigValidatorModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","StorefrontModule_1","scrollPositionRestoration","anchorScrolling","StoreModule","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","B2cStorefrontModule_1","provideDefaultConfigFactory"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\r\n\r\nexport interface LaunchConfig {\r\n  [key: string]: LaunchOptions;\r\n}\r\n\r\nexport type LaunchOptions =\r\n  | LaunchOutletDialog\r\n  | LaunchInlineDialog\r\n  | LaunchRoute;\r\n\r\n/**\r\n * Parent type for configurations that render components\r\n */\r\nexport interface LaunchDialog {\r\n  component: any;\r\n  /**\r\n   * Can the element be rendered multiple times\r\n   */\r\n  multi?: boolean;\r\n  /**\r\n   * Dialog type is used to apply CSS classes\r\n   */\r\n  dialogType?: DIALOG_TYPE;\r\n}\r\n\r\n/**\r\n * Configuration type to render a component in an outlet\r\n */\r\nexport interface LaunchOutletDialog extends LaunchDialog {\r\n  /**\r\n   * The outlet to render the element in\r\n   */\r\n  outlet: string;\r\n  /**\r\n   * Default: OutletPosition.BEFORE\r\n   */\r\n  position?: OutletPosition;\r\n}\r\n\r\n/**\r\n * Configuration type to render a component inline (next to the trigger)\r\n */\r\nexport interface LaunchInlineDialog extends LaunchDialog {\r\n  inline: boolean;\r\n}\r\n\r\n/**\r\n * Configuration type to render as link\r\n */\r\nexport interface LaunchRoute {\r\n  /**\r\n   * The route for the url\r\n   */\r\n  cxRoute: string;\r\n  /**\r\n   * The parameters for the route\r\n   */\r\n  params?: { [param: string]: any };\r\n}\r\n\r\n/**\r\n * Types of dialog openings supported\r\n */\r\nexport enum DIALOG_TYPE {\r\n  POPOVER = 'POPOVER',\r\n  DIALOG = 'DIALOG',\r\n  SIDEBAR_START = 'SIDEBAR_START',\r\n  SIDEBAR_END = 'SIDEBAR_END',\r\n}\r\n\r\n/**\r\n * List of available callers\r\n */\r\nexport enum LAUNCH_CALLER {\r\n  ASM = 'ASM',\r\n  SKIP_LINKS = 'SKIP_LINKS',\r\n  ANONYMOUS_CONSENT = 'ANONYMOUS_CONSENT',\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Config, DeferLoadingStrategy } from '@spartacus/core';\r\nimport { LaunchConfig } from '../launch-dialog/index';\r\n\r\nexport enum BREAKPOINT {\r\n  xs = 'xs',\r\n  sm = 'sm',\r\n  md = 'md',\r\n  lg = 'lg',\r\n  xl = 'xl',\r\n}\r\n\r\nexport type LayoutSections =\r\n  | 'header'\r\n  | 'footer'\r\n  | 'LandingPage2Template'\r\n  | string;\r\n\r\nexport type SlotConfig = {\r\n  /** The cms page slots are mapped by the `slot.position`. */\r\n  slots?: string[];\r\n\r\n  /**\r\n   * The page fold identifies the last expected page slot above-the-fold.\r\n   * It's perfectly fine to specify this by idication, however a more\r\n   * precise indication will have an positive impact on performance.\r\n   */\r\n  pageFold?: string;\r\n};\r\n\r\nexport type SlotGroup = {\r\n  /** The page slot configuration for large screens */\r\n  [BREAKPOINT.lg]?: SlotConfig;\r\n  /** The page slot configuration for medium screens */\r\n  [BREAKPOINT.md]?: SlotConfig;\r\n  /** The page slot configuration for small screens */\r\n  [BREAKPOINT.sm]?: SlotConfig;\r\n  /** The page slot configuration for extra small screens */\r\n  [BREAKPOINT.xs]?: SlotConfig;\r\n};\r\n\r\nexport type LayoutSlotConfig = {\r\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\r\n};\r\n\r\n/**\r\n * The LayoutConfig supports the configuration of page slots by page templates\r\n * or page sections, such as headers and footers. The configuration also supports\r\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\r\n * por a given breakpoint.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class LayoutConfig {\r\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\r\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\r\n  breakpoints?: {\r\n    [BREAKPOINT.xs]?: number;\r\n    [BREAKPOINT.sm]?: number;\r\n    [BREAKPOINT.md]?: number;\r\n    [BREAKPOINT.lg]?: number;\r\n  };\r\n  layoutSlots?: LayoutSlotConfig;\r\n\r\n  /**\r\n   * Deferrred loading is a technique to hold of with the loading / creation\r\n   * of DOM elements which are not not in the initial view port.\r\n   * This technique wil increase performance.\r\n   */\r\n  deferredLoading?: {\r\n    /**\r\n     * The global strategy will be used as a fallback strategy for all DOM creation,\r\n     * but can be overriden by local configuration, i.e. for cms components.\r\n     */\r\n    strategy?: DeferLoadingStrategy;\r\n    /**\r\n     * The intersection margin contains the offset used by the Intersection Observer\r\n     * to observe elements outside the view port.\r\n     *\r\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\r\n     */\r\n    intersectionMargin?: string;\r\n  };\r\n\r\n  launch?: LaunchConfig;\r\n}\r\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { DOCUMENT } from '@angular/common';\r\nimport {\r\n  ComponentRef,\r\n  Inject,\r\n  Renderer2,\r\n  RendererFactory2,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport { Applicable, Priority } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport {\r\n  DIALOG_TYPE,\r\n  LaunchDialog,\r\n  LaunchOptions,\r\n  LAUNCH_CALLER,\r\n} from '../config';\r\n\r\nexport abstract class LaunchRenderStrategy implements Applicable {\r\n  // List of called references; only used for rendered elements\r\n  protected renderedCallers: Array<{\r\n    caller: LAUNCH_CALLER | string;\r\n    element?: any;\r\n    component?: ComponentRef<any>;\r\n  }> = [];\r\n\r\n  /**\r\n   * Classes to apply to the component when the dialog is a DIALOG\r\n   */\r\n  protected dialogClasses = ['d-block', 'fade', 'modal', 'show'];\r\n  /**\r\n   * Classes to apply to the component when the dialog is a POPOVER\r\n   */\r\n  protected popoverClasses = ['cx-dialog-popover'];\r\n  /**\r\n   * Classes to apply to the component when the dialog is a SIDEBAR_END\r\n   */\r\n  protected sidebarEndClasses = ['cx-sidebar-end'];\r\n  /**\r\n   * Classes to apply to the component when the dialog is a SIDEBAR_START\r\n   */\r\n  protected sidebarStartClasses = ['cx-sidebar-start'];\r\n\r\n  protected renderer: Renderer2;\r\n\r\n  constructor(\r\n    @Inject(DOCUMENT) protected document: any,\r\n    protected rendererFactory: RendererFactory2\r\n  ) {\r\n    this.renderer = rendererFactory.createRenderer(null, null);\r\n  }\r\n\r\n  /**\r\n   * Render method to implement based on the strategy\r\n   *\r\n   * @param config Launch configuration\r\n   */\r\n  abstract render(\r\n    config: LaunchOptions,\r\n    caller: LAUNCH_CALLER | string,\r\n    vcr?: ViewContainerRef\r\n  ): void | Observable<ComponentRef<any>>;\r\n\r\n  /**\r\n   * Determines if the strategy is the right one for the provided configuration\r\n   *\r\n   * @param config\r\n   */\r\n  abstract hasMatch(config: LaunchOptions): boolean;\r\n\r\n  /**\r\n   * Determines if element should render\r\n   *\r\n   * @param caller\r\n   * @param config\r\n   */\r\n  protected shouldRender(\r\n    caller: LAUNCH_CALLER | string,\r\n    config: LaunchDialog\r\n  ): boolean {\r\n    return (\r\n      Boolean(config.component) &&\r\n      (this.renderedCallers.some((el) => el.caller === caller)\r\n        ? !!config.multi\r\n        : true)\r\n    );\r\n  }\r\n\r\n  protected applyClasses(\r\n    component: ComponentRef<any>,\r\n    dialogType: DIALOG_TYPE\r\n  ): void {\r\n    let classes = [];\r\n\r\n    // TODO: make classes configurable\r\n    switch (dialogType) {\r\n      case DIALOG_TYPE.DIALOG:\r\n        classes = this.dialogClasses;\r\n        this.renderer.addClass(this.document.body, 'modal-open');\r\n        break;\r\n      case DIALOG_TYPE.POPOVER:\r\n        classes = this.popoverClasses;\r\n        break;\r\n      case DIALOG_TYPE.SIDEBAR_END:\r\n        classes = this.sidebarEndClasses;\r\n        break;\r\n      case DIALOG_TYPE.SIDEBAR_START:\r\n        classes = this.sidebarStartClasses;\r\n        break;\r\n    }\r\n\r\n    for (const newClass of classes) {\r\n      this.renderer.addClass(component.location.nativeElement, newClass);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method to call when rendered element is destroyed\r\n   * The element will be removed from the list of rendered elements\r\n   *\r\n   * @param caller\r\n   * @param _config optional parameters used in children strategies\r\n   */\r\n  public remove(caller: LAUNCH_CALLER | string, config: LaunchOptions): void {\r\n    this.renderedCallers = this.renderedCallers.filter(\r\n      (el) => el.caller !== caller\r\n    );\r\n\r\n    if ((config as LaunchDialog)?.dialogType === DIALOG_TYPE.DIALOG) {\r\n      this.renderer.removeClass(this.document.body, 'modal-open');\r\n    }\r\n  }\r\n\r\n  getPriority(): Priority {\r\n    return Priority.LOW; // low, as it's a default matcher\r\n  }\r\n}\r\n","import { DOCUMENT } from '@angular/common';\r\nimport {\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  Inject,\r\n  Injectable,\r\n  isDevMode,\r\n  RendererFactory2,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { LaunchInlineDialog, LAUNCH_CALLER } from '../config/index';\r\nimport { LaunchRenderStrategy } from './launch-render.strategy';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class InlineRenderStrategy extends LaunchRenderStrategy {\r\n  constructor(\r\n    @Inject(DOCUMENT) protected document: any,\r\n    protected rendererFactory: RendererFactory2,\r\n    protected componentFactoryResolver: ComponentFactoryResolver\r\n  ) {\r\n    super(document, rendererFactory);\r\n  }\r\n\r\n  /**\r\n   * Renders the component from the configuration in the view container ref\r\n   *\r\n   * @param config\r\n   * @param caller\r\n   * @param vcr\r\n   */\r\n  render(\r\n    config: LaunchInlineDialog,\r\n    caller: LAUNCH_CALLER | string,\r\n    vcr: ViewContainerRef\r\n  ): Observable<ComponentRef<any>> {\r\n    // Only render if a ViewContainerRef is provided\r\n    if (vcr && this.shouldRender(caller, config)) {\r\n      const template = this.componentFactoryResolver.resolveComponentFactory(\r\n        config.component\r\n      );\r\n\r\n      const component = vcr.createComponent(template);\r\n\r\n      if (config?.dialogType) {\r\n        this.applyClasses(component, config?.dialogType);\r\n      }\r\n\r\n      this.renderedCallers.push({ caller, element: vcr.element, component });\r\n\r\n      return of(component);\r\n    } else if (isDevMode()) {\r\n      if (!vcr) {\r\n        console.warn(`No view container ref provided for ${caller}`);\r\n      } else {\r\n        console.warn(\r\n          `Element for ${caller} already rendered. To allow multi rendering add property multi: true.`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  hasMatch(config: LaunchInlineDialog) {\r\n    return Boolean(config.inline);\r\n  }\r\n}\r\n","import {\r\n  ComponentRef,\r\n  Inject,\r\n  Injectable,\r\n  isDevMode,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport { resolveApplicable } from '@spartacus/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { LayoutConfig } from '../../config/layout-config';\r\nimport { LaunchOptions, LAUNCH_CALLER } from '../config/launch-config';\r\nimport { LaunchRenderStrategy } from './launch-render.strategy';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class LaunchDialogService {\r\n  private _dialogClose = new BehaviorSubject<string>(undefined);\r\n\r\n  constructor(\r\n    @Inject(LaunchRenderStrategy)\r\n    protected renderStrategies: LaunchRenderStrategy[],\r\n    protected layoutConfig: LayoutConfig\r\n  ) {\r\n    this.renderStrategies = this.renderStrategies || [];\r\n  }\r\n\r\n  /**\r\n   * Render the element based on the strategy from the launch configuration\r\n   *\r\n   * @param caller LAUNCH_CALLER\r\n   * @param vcr View Container Ref of the container for inline rendering\r\n   */\r\n  launch(\r\n    caller: LAUNCH_CALLER | string,\r\n    vcr?: ViewContainerRef\r\n  ): void | Observable<ComponentRef<any>> {\r\n    const config = this.findConfiguration(caller);\r\n    if (config) {\r\n      const renderer = this.getStrategy(config);\r\n\r\n      // Render if the strategy exists\r\n      if (renderer) {\r\n        this._dialogClose.next(undefined);\r\n        return renderer.render(config, caller, vcr);\r\n      }\r\n    } else if (isDevMode()) {\r\n      console.warn('No configuration provided for caller ' + caller);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Util method to remove element from rendered elements list\r\n   *\r\n   * @param caller LAUNCH_CALLER\r\n   */\r\n  clear(caller: LAUNCH_CALLER | string): void {\r\n    const config = this.findConfiguration(caller);\r\n    const renderer = this.getStrategy(config);\r\n\r\n    // Render if the strategy exists\r\n    if (renderer) {\r\n      renderer.remove(caller, config);\r\n    }\r\n  }\r\n\r\n  get dialogClose(): Observable<string> {\r\n    return this._dialogClose.asObservable();\r\n  }\r\n\r\n  closeDialog(reason: string) {\r\n    this._dialogClose.next(reason);\r\n  }\r\n\r\n  /**\r\n   * Returns the configuration for the caller\r\n   *\r\n   * @param caller LAUNCH_CALLER\r\n   */\r\n  protected findConfiguration(caller: LAUNCH_CALLER | string): LaunchOptions {\r\n    if (this.layoutConfig?.launch) {\r\n      return this.layoutConfig.launch[caller];\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Returns the render strategy based on the configuration\r\n   *\r\n   * @param config Configuration for launch\r\n   */\r\n  protected getStrategy(config: LaunchOptions): LaunchRenderStrategy {\r\n    return resolveApplicable(this.renderStrategies, [config]);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Config } from '@spartacus/core';\r\n\r\nexport enum ICON_TYPE {\r\n  STAR = 'STAR',\r\n  SEARCH = 'SEARCH',\r\n  CART = 'CART',\r\n  INFO = 'INFO',\r\n  GRID = 'GRID',\r\n  LIST = 'LIST',\r\n  CARET_DOWN = 'CARET_DOWN',\r\n  CARET_LEFT = 'CARET_LEFT',\r\n  CARET_RIGHT = 'CARET_RIGHT',\r\n  CLOSE = 'CLOSE',\r\n  ERROR = 'ERROR',\r\n  WARNING = 'WARNING',\r\n  SUCCESS = 'SUCCESS',\r\n  VISA = 'VISA',\r\n  MASTER_CARD = 'MASTER_CARD',\r\n  AMEX = 'AMEX',\r\n  DINERS_CLUB = 'DINERS_CLUB',\r\n  CREDIT_CARD = 'CREDIT_CARD',\r\n  EXPAND = 'EXPAND',\r\n  COLLAPSE = 'COLLAPSE',\r\n  RESET = 'RESET',\r\n  CIRCLE = 'CIRCLE',\r\n  HEART = 'HEART',\r\n  EMPTY_HEART = 'EMPTY_HEART',\r\n  FILTER = 'FILTER',\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class IconConfig {\r\n  icon?: IconOptions;\r\n}\r\n\r\nexport interface IconOptions {\r\n  /**\r\n   * Each icon type can be configured with a so-called symbol. The symbol will\r\n   * be used to map the icon to an SVG `symbol` (id) or to the style classes of\r\n   * a font based icon. The following configuration would map to a fontawesome\r\n   * icon:\r\n   *\r\n   * icon: {\r\n   *   symbols: {\r\n   *     CART: 'fas fa-shopping-cart'\r\n   *   }\r\n   * }\r\n   */\r\n  symbols?: {\r\n    [ICON_TYPE: string]: string;\r\n  };\r\n\r\n  /**\r\n   * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\r\n   * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\r\n   * is used for the SVG xlink reference.\r\n   */\r\n  resources?: IconConfigResource[];\r\n}\r\n\r\nexport interface IconConfigResource {\r\n  type: IconResourceType | string;\r\n  url?: string;\r\n  types?: (ICON_TYPE | string)[];\r\n}\r\n\r\n/**\r\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\r\n * The resources will be automitacally loaded in case they're required for the `ICON_TYPE`.\r\n */\r\nexport enum IconResourceType {\r\n  /**\r\n   * An svg based icon requires an SVG resource that must be loaded,\r\n   * this is typically a sprite svg file.\r\n   */\r\n  SVG = 'svg',\r\n\r\n  /**\r\n   * A font based ICON might require an additional CSS file to be loaded.\r\n   */\r\n  LINK = 'link',\r\n  /**\r\n   * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\r\n   * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\r\n   */\r\n  TEXT = 'text',\r\n}\r\n","import { Injectable, TemplateRef } from '@angular/core';\r\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OutletService<T = TemplateRef<any>> {\r\n  private templatesRefs = new Map<string, T[]>();\r\n  private templatesRefsBefore = new Map<string, T[]>();\r\n  private templatesRefsAfter = new Map<string, T[]>();\r\n\r\n  /**\r\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\r\n   * The UI position where this template or ComponentFactory is inserted is given by a\r\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\r\n   * is either before or after, or replaces the entire UI.\r\n   *\r\n   * @param outlet the UI location represented by a string\r\n   * @param template the `TemplateRef` that will be used to insert UI\r\n   * @param position the `OutletPosition` in the UI\r\n   */\r\n  add(outlet: string, template: T, position?: OutletPosition): void;\r\n  /**\r\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\r\n   */\r\n  add(\r\n    outlet: string,\r\n    // tslint:disable-next-line: unified-signatures\r\n    factory: T,\r\n    position?: OutletPosition\r\n  ): void;\r\n  /**\r\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\r\n   */\r\n  add(\r\n    outlet: string,\r\n    templateOrFactory: T,\r\n    position: OutletPosition = OutletPosition.REPLACE\r\n  ): void {\r\n    if (position === OutletPosition.BEFORE) {\r\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\r\n    }\r\n    if (position === OutletPosition.REPLACE) {\r\n      this.store(this.templatesRefs, outlet, templateOrFactory);\r\n    }\r\n    if (position === OutletPosition.AFTER) {\r\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Returns a single object or multiple objects for the given outlet reference,\r\n   * depending on the `stacked` argument.\r\n   *\r\n   * @param outlet The outlet reference\r\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\r\n   * @param stacked Indicates whether an array of outlet components is returned\r\n   */\r\n  get(\r\n    outlet: string,\r\n    position: OutletPosition = OutletPosition.REPLACE,\r\n    stacked = AVOID_STACKED_OUTLETS\r\n  ): T[] | T {\r\n    let templateRef: T[];\r\n    switch (position) {\r\n      case OutletPosition.BEFORE:\r\n        templateRef = this.templatesRefsBefore.get(outlet);\r\n        break;\r\n      case OutletPosition.AFTER:\r\n        templateRef = this.templatesRefsAfter.get(outlet);\r\n        break;\r\n      default:\r\n        templateRef = this.templatesRefs.get(outlet);\r\n    }\r\n    if (templateRef && !stacked) {\r\n      return templateRef[0];\r\n    }\r\n    return templateRef;\r\n  }\r\n\r\n  remove(\r\n    outlet: string,\r\n    position: OutletPosition = OutletPosition.REPLACE,\r\n    value?: T\r\n  ): void {\r\n    switch (position) {\r\n      case OutletPosition.BEFORE:\r\n        this.removeValueOrAll(this.templatesRefsBefore, outlet, value);\r\n        break;\r\n      case OutletPosition.AFTER:\r\n        this.removeValueOrAll(this.templatesRefsAfter, outlet, value);\r\n        break;\r\n      default:\r\n        this.removeValueOrAll(this.templatesRefs, outlet, value);\r\n    }\r\n  }\r\n\r\n  private store(store: Map<string, T[]>, outlet: string, value: T) {\r\n    const existing = store.get(outlet) || [];\r\n    const newValue: T[] = existing.concat([value]);\r\n    store.set(outlet, newValue);\r\n  }\r\n\r\n  protected removeValueOrAll(\r\n    store: Map<string, T[]>,\r\n    outlet: string,\r\n    value?: T\r\n  ): void {\r\n    if (!value && store.has(outlet)) {\r\n      store.delete(outlet);\r\n    } else if (value && store.has(outlet)) {\r\n      let existing = store.get(outlet);\r\n      existing = existing.filter((val) => val === value);\r\n      store.set(outlet, existing);\r\n    }\r\n  }\r\n}\r\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { OutletDirective } from './outlet.directive';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OutletRendererService {\r\n  private outletRefs = new BehaviorSubject(new Map<string, OutletDirective>());\r\n\r\n  /**\r\n   * Dynamically render the templates in the specified array\r\n   *\r\n   * @param outlet\r\n   */\r\n  render(outlet: string): void {\r\n    if (this.outletRefs.value.size !== 0) {\r\n      this.outletRefs.value.get(outlet).render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register outlet to be available to render dynamically\r\n   *\r\n   * @param cxOutlet\r\n   * @param context\r\n   */\r\n  register(cxOutlet: string, context: OutletDirective): void {\r\n    this.outletRefs.next(this.outletRefs.value.set(cxOutlet, context));\r\n  }\r\n  /**\r\n   * Returns map of outlets\r\n   *\r\n   */\r\n  getOutletRef(outlet: string): Observable<OutletDirective> {\r\n    return this.outletRefs.asObservable().pipe(\r\n      map((val) => val.get(outlet)),\r\n      filter((val) => Boolean(val))\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\r\nimport { LayoutConfig } from '../config/layout-config';\r\nimport { IntersectionOptions } from './intersection.model';\r\n\r\n/**\r\n * The IntersectionService uses the native IntersectionObserver (v2), which\r\n * can be used to implement pre-loading and deferred loading of DOM content.\r\n *\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class IntersectionService {\r\n  constructor(protected config: LayoutConfig) {}\r\n\r\n  /**\r\n   * Returns an Observable that emits only once a boolean value whenever\r\n   * the given element has shown in the view port.\r\n   *\r\n   * The returned observable will only emit the first value. The\r\n   * observable must be cleaned up either way, since the value might never emit; it\r\n   *  depends on whether the element appears in the view port.\r\n   */\r\n  isIntersected(\r\n    element: HTMLElement,\r\n    options?: IntersectionOptions\r\n  ): Observable<boolean> {\r\n    return this.intersects(element, options).pipe(first((v) => v === true));\r\n  }\r\n\r\n  /**\r\n   * Indicates whenever the element intersects the view port. An optional margin\r\n   * is used to intersects before the element shows up in the viewport.\r\n   * A value is emitted each time the element intersects.\r\n   *\r\n   * This is private for now, but could be exposed as a public API\r\n   * to introduce additional (css) render effects to the UI.\r\n   */\r\n  private intersects(\r\n    element: HTMLElement,\r\n    options: IntersectionOptions = {}\r\n  ): Observable<boolean> {\r\n    const elementVisible$ = new Observable((observer) => {\r\n      const rootMargin = this.getRootMargin(options);\r\n      const intersectOptions = { rootMargin, threshold: options.threshold };\r\n      const intersectionObserver = new IntersectionObserver((entries) => {\r\n        observer.next(entries);\r\n      }, intersectOptions);\r\n      intersectionObserver.observe(element);\r\n      return () => {\r\n        intersectionObserver.disconnect();\r\n      };\r\n    }).pipe(\r\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\r\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\r\n      distinctUntilChanged()\r\n    );\r\n\r\n    return elementVisible$;\r\n  }\r\n\r\n  private getRootMargin(options: IntersectionOptions = {}): string {\r\n    if (options.rootMargin) {\r\n      return options.rootMargin;\r\n    }\r\n    const layoutConfig = this.config as LayoutConfig;\r\n    if (\r\n      layoutConfig.deferredLoading &&\r\n      layoutConfig.deferredLoading.intersectionMargin\r\n    ) {\r\n      return layoutConfig.deferredLoading.intersectionMargin;\r\n    }\r\n  }\r\n}\r\n","import { isPlatformServer } from '@angular/common';\r\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport { DeferLoadingStrategy } from '@spartacus/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { LayoutConfig } from '../config/layout-config';\r\nimport { IntersectionOptions } from './intersection.model';\r\nimport { IntersectionService } from './intersection.service';\r\n\r\n/**\r\n * The defer loading serivce is used to defer loading of DOM elements\r\n * until the elements are required for the user experience.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DeferLoaderService {\r\n  globalLoadStrategy: DeferLoadingStrategy;\r\n\r\n  constructor(\r\n    @Inject(PLATFORM_ID) private platformId: Object,\r\n    protected config: LayoutConfig,\r\n    protected intersectionService: IntersectionService\r\n  ) {\r\n    this.globalLoadStrategy = config.deferredLoading\r\n      ? config.deferredLoading.strategy\r\n      : DeferLoadingStrategy.INSTANT;\r\n  }\r\n\r\n  /**\r\n   * Defer loading till the element intersects the viewport.\r\n   *\r\n   * We evaluate whether we instantly load the element for different reasons:\r\n   * - we run in SSR mode\r\n   * - there's no global strategy given\r\n   * - the global loading strategy is set to INSTANT loading,\r\n   *   and the loading strategy in the given is not set to DEFER\r\n   * - the loading strategy in the given options is set to INSTANT\r\n   */\r\n  load(\r\n    element: HTMLElement,\r\n    options?: IntersectionOptions\r\n  ): Observable<boolean> {\r\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\r\n      return of(true);\r\n    } else {\r\n      return this.intersectionService.isIntersected(element, options);\r\n    }\r\n  }\r\n\r\n  private shouldLoadInstantly(\r\n    elementLoadingStrategy: DeferLoadingStrategy\r\n  ): boolean {\r\n    return (\r\n      isPlatformServer(this.platformId) ||\r\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\r\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\r\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\r\n    );\r\n  }\r\n}\r\n","import {\r\n  ComponentFactory,\r\n  ComponentRef,\r\n  Directive,\r\n  EmbeddedViewRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Output,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\r\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\r\nimport { OutletRendererService } from './outlet-renderer.service';\r\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\r\nimport { OutletService } from './outlet.service';\r\n\r\n@Directive({\r\n  selector: '[cxOutlet]',\r\n})\r\nexport class OutletDirective implements OnDestroy, OnChanges {\r\n  private renderedTemplate = [];\r\n  public renderedComponents = new Map<\r\n    OutletPosition,\r\n    Array<ComponentRef<any> | EmbeddedViewRef<any>>\r\n  >();\r\n\r\n  @Input() cxOutlet: string;\r\n\r\n  @Input() cxOutletContext: any;\r\n\r\n  /**\r\n   * Defers loading options for the the templates of this outlet.\r\n   */\r\n  @Input() cxOutletDefer: IntersectionOptions;\r\n\r\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\r\n\r\n  subscription = new Subscription();\r\n\r\n  constructor(\r\n    private vcr: ViewContainerRef,\r\n    private templateRef: TemplateRef<any>,\r\n    private outletService: OutletService<\r\n      TemplateRef<any> | ComponentFactory<any>\r\n    >,\r\n    private deferLoaderService: DeferLoaderService,\r\n    private outletRendererService: OutletRendererService\r\n  ) {}\r\n\r\n  public render(): void {\r\n    this.vcr.clear();\r\n    this.renderedTemplate = [];\r\n    this.renderedComponents.clear();\r\n    this.subscription.unsubscribe();\r\n    this.subscription = new Subscription();\r\n\r\n    if (this.cxOutletDefer) {\r\n      this.deferLoading();\r\n    } else {\r\n      this.build();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.cxOutlet) {\r\n      this.render();\r\n      this.outletRendererService.register(this.cxOutlet, this);\r\n    }\r\n  }\r\n\r\n  private deferLoading(): void {\r\n    this.loaded.emit(false);\r\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\r\n    // Although the deferLoaderService might emit only once, as long as the hostElement\r\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\r\n    // the subscription on destroy.\r\n    this.subscription.add(\r\n      this.deferLoaderService\r\n        .load(hostElement, this.cxOutletDefer)\r\n        .subscribe(() => {\r\n          this.build();\r\n          this.loaded.emit(true);\r\n        })\r\n    );\r\n  }\r\n\r\n  private build() {\r\n    this.buildOutlet(OutletPosition.BEFORE);\r\n    this.buildOutlet(OutletPosition.REPLACE);\r\n    this.buildOutlet(OutletPosition.AFTER);\r\n  }\r\n\r\n  private buildOutlet(position: OutletPosition): void {\r\n    let templates: any[] = <any[]>(\r\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\r\n    );\r\n\r\n    templates = templates?.filter((el) => !this.renderedTemplate.includes(el));\r\n\r\n    if (!templates && position === OutletPosition.REPLACE) {\r\n      templates = [this.templateRef];\r\n    }\r\n\r\n    // Just in case someone extended the `OutletService` and\r\n    // returns a singular object.\r\n    if (!Array.isArray(templates)) {\r\n      templates = [templates];\r\n    }\r\n\r\n    const components = [];\r\n    templates.forEach((obj) => {\r\n      const component = this.create(obj);\r\n      components.push(component);\r\n    });\r\n\r\n    this.renderedComponents.set(position, components);\r\n  }\r\n\r\n  private create(tmplOrFactory: any): ComponentRef<any> | EmbeddedViewRef<any> {\r\n    this.renderedTemplate.push(tmplOrFactory);\r\n\r\n    if (tmplOrFactory instanceof ComponentFactory) {\r\n      const component = this.vcr.createComponent(tmplOrFactory);\r\n      return component;\r\n    } else if (tmplOrFactory instanceof TemplateRef) {\r\n      const view = this.vcr.createEmbeddedView(\r\n        <TemplateRef<any>>tmplOrFactory,\r\n        {\r\n          $implicit: this.cxOutletContext,\r\n        }\r\n      );\r\n\r\n      // we do not know if content is created dynamically or not\r\n      // so we apply change detection anyway\r\n      view.markForCheck();\r\n      return view;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the closest `HtmlElement`, by iterating over the\r\n   * parent nodes of the given element.\r\n   *\r\n   * We avoid traversing the parent _elements_, as this is blocking\r\n   * ie11 implementations. One of the spare exclusions we make to not\r\n   * supporting ie11.\r\n   *\r\n   * @param element\r\n   */\r\n  private getHostElement(element: Node): HTMLElement {\r\n    if (element instanceof HTMLElement) {\r\n      return element;\r\n    }\r\n    return this.getHostElement(element.parentNode);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import { DOCUMENT } from '@angular/common';\r\nimport {\r\n  ComponentFactory,\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  Inject,\r\n  Injectable,\r\n  RendererFactory2,\r\n} from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport {\r\n  OutletPosition,\r\n  OutletService,\r\n} from '../../../cms-structure/outlet/index';\r\nimport { OutletRendererService } from '../../../cms-structure/outlet/outlet-renderer.service';\r\nimport { LaunchOutletDialog, LAUNCH_CALLER } from '../config/index';\r\nimport { LaunchRenderStrategy } from './launch-render.strategy';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OutletRenderStrategy extends LaunchRenderStrategy {\r\n  constructor(\r\n    @Inject(DOCUMENT) protected document: any,\r\n    protected rendererFactory: RendererFactory2,\r\n    protected outletService: OutletService<ComponentFactory<any>>,\r\n    protected componentFactoryResolver: ComponentFactoryResolver,\r\n    protected outletRendererService: OutletRendererService\r\n  ) {\r\n    super(document, rendererFactory);\r\n  }\r\n\r\n  /**\r\n   * Renders the element in the configured outlet\r\n   *\r\n   * @param config\r\n   * @param caller\r\n   * @param vcr\r\n   */\r\n  render(\r\n    config: LaunchOutletDialog,\r\n    caller: LAUNCH_CALLER | string\r\n  ): Observable<ComponentRef<any>> {\r\n    if (this.shouldRender(caller, config)) {\r\n      const template = this.componentFactoryResolver.resolveComponentFactory(\r\n        config.component\r\n      );\r\n      this.outletService.add(\r\n        config.outlet,\r\n        template,\r\n        config.position ? config.position : OutletPosition.BEFORE\r\n      );\r\n      this.outletRendererService.render(config.outlet);\r\n      this.renderedCallers.push({ caller });\r\n\r\n      return this.outletRendererService.getOutletRef(config.outlet).pipe(\r\n        map((outletDirective) => {\r\n          const components = outletDirective.renderedComponents.get(\r\n            config.position ? config.position : OutletPosition.BEFORE\r\n          ) as ComponentRef<any>[];\r\n\r\n          return components\r\n            .reverse()\r\n            .find(\r\n              (component) => component.componentType === template.componentType\r\n            );\r\n        }),\r\n        tap((component) => {\r\n          if (config?.dialogType) {\r\n            this.applyClasses(component, config?.dialogType);\r\n          }\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  hasMatch(config: LaunchOutletDialog) {\r\n    return Boolean(config.outlet);\r\n  }\r\n\r\n  remove(caller: LAUNCH_CALLER | string, config: LaunchOutletDialog): void {\r\n    const template = this.componentFactoryResolver.resolveComponentFactory(\r\n      config.component\r\n    );\r\n\r\n    this.outletService.remove(\r\n      config.outlet,\r\n      config.position ? config.position : OutletPosition.BEFORE,\r\n      template\r\n    );\r\n\r\n    super.remove(caller, config);\r\n  }\r\n}\r\n","import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable, RendererFactory2 } from '@angular/core';\r\nimport { RoutingService } from '@spartacus/core';\r\nimport { LaunchRoute, LAUNCH_CALLER } from '../config/index';\r\nimport { LaunchRenderStrategy } from './launch-render.strategy';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class RoutingRenderStrategy extends LaunchRenderStrategy {\r\n  constructor(\r\n    @Inject(DOCUMENT) protected document: any,\r\n    protected rendererFactory: RendererFactory2,\r\n    protected routingService: RoutingService\r\n  ) {\r\n    super(document, rendererFactory);\r\n  }\r\n  /**\r\n   * Navigates to the route configured for the caller\r\n   */\r\n  render(config: LaunchRoute, _caller: LAUNCH_CALLER | string) {\r\n    this.routingService.go(config);\r\n  }\r\n\r\n  hasMatch(config: LaunchRoute) {\r\n    return Boolean(config.cxRoute);\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { Config } from '@spartacus/core';\r\nimport { LayoutConfig } from '../config/layout-config';\r\nimport {\r\n  InlineRenderStrategy,\r\n  LaunchRenderStrategy,\r\n  OutletRenderStrategy,\r\n  RoutingRenderStrategy,\r\n} from './services/index';\r\n\r\n@NgModule({\r\n  providers: [\r\n    {\r\n      provide: LaunchRenderStrategy,\r\n      useExisting: OutletRenderStrategy,\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: LaunchRenderStrategy,\r\n      useExisting: InlineRenderStrategy,\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: LaunchRenderStrategy,\r\n      useExisting: RoutingRenderStrategy,\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class LaunchDialogModule {\r\n  static forRoot(): ModuleWithProviders<LaunchDialogModule> {\r\n    return {\r\n      ngModule: LaunchDialogModule,\r\n      providers: [{ provide: LayoutConfig, useExisting: Config }],\r\n    };\r\n  }\r\n}\r\n","import { ElementRef, Injectable, ViewContainerRef } from '@angular/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { filter, map, tap } from 'rxjs/operators';\r\nimport {\r\n  LaunchDialogService,\r\n  LAUNCH_CALLER,\r\n} from '../../layout/launch-dialog/index';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AnonymousConsentLaunchDialogService {\r\n  constructor(protected launchDialogService: LaunchDialogService) {}\r\n\r\n  openDialog(\r\n    openElement?: ElementRef,\r\n    vcr?: ViewContainerRef\r\n  ): Observable<any> | undefined {\r\n    const component = this.launchDialogService.launch(\r\n      LAUNCH_CALLER.ANONYMOUS_CONSENT,\r\n      vcr\r\n    );\r\n\r\n    if (component) {\r\n      return combineLatest([\r\n        component,\r\n        this.launchDialogService.dialogClose,\r\n      ]).pipe(\r\n        filter(([, close]) => close && close !== undefined),\r\n        tap(([comp]) => {\r\n          openElement?.nativeElement.focus();\r\n          this.launchDialogService.clear(LAUNCH_CALLER.ANONYMOUS_CONSENT);\r\n          comp.destroy();\r\n        }),\r\n        map(([comp]) => comp)\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport abstract class BaseFocusService {}\r\n","import {\r\n  Directive,\r\n  ElementRef,\r\n  HostBinding,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { BaseFocusConfig } from '../keyboard-focus.model';\r\nimport { BaseFocusService } from './base-focus.service';\r\n\r\n/**\r\n * Abstract directive that provides a common interface for all focus directives:\r\n * - Block Focus\r\n * - Persist Focus\r\n * - Escape Focus\r\n * - Auto Focus\r\n * - Tab Focus\r\n * - Trap Focus\r\n * - Lock Focus\r\n */\r\n@Directive()\r\nexport abstract class BaseFocusDirective implements OnInit {\r\n  /**\r\n   * Optional configuration for the focus directive drives the behaviour of the keyboard\r\n   * focus directive.\r\n   */\r\n  protected config: BaseFocusConfig;\r\n\r\n  /**\r\n   * A default config can be provided for each directive if a specific focus directive\r\n   * is used directly. i.e. `<div cxAutoFocus></div>`\r\n   */\r\n  protected defaultConfig: BaseFocusConfig = {};\r\n\r\n  @Input() @HostBinding('attr.tabindex') tabindex: number;\r\n\r\n  constructor(\r\n    protected elementRef: ElementRef<HTMLElement>,\r\n    protected service: BaseFocusService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.setDefaultConfiguration();\r\n    this.requiredTabindex = -1;\r\n  }\r\n\r\n  /**\r\n   * Override the (input) config if it undefined or an empty string, with the\r\n   * `defaultConfig`. The `defaultConfig` might be specified for each directive\r\n   * differently. If a specific directive is used (i.e. `cxAutoFocus`), the\r\n   * specific (inherited) defaultConfig will be used.\r\n   */\r\n  protected setDefaultConfiguration(): void {\r\n    if ((!this.config || this.config === '') && this.defaultConfig) {\r\n      this.config = this.defaultConfig;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper method to return the host element for the directive\r\n   * given by the `elementRef`.\r\n   */\r\n  protected get host(): HTMLElement {\r\n    return this.elementRef.nativeElement;\r\n  }\r\n\r\n  /**\r\n   * Force a tabindex on the host element if it is _requried_ to make the element\r\n   * focusable. If the element is focusable by nature or by a given tabindex, the\r\n   * `tabindex` is not applied.\r\n   *\r\n   * Buttons, active links, etc. do no need an explicit tabindex to receive focus.\r\n   */\r\n  protected set requiredTabindex(tabindex: number) {\r\n    if (this.requiresExplicitTabIndex) {\r\n      this.tabindex = tabindex;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if the host element does not have a tabindex defined\r\n   * and it also doesn't get focus by browsers nature (i.e. button or\r\n   * active link).\r\n   */\r\n  protected get requiresExplicitTabIndex(): boolean {\r\n    return (\r\n      this.tabindex === undefined &&\r\n      ['button', 'input', 'select', 'textarea'].indexOf(\r\n        this.host.tagName.toLowerCase()\r\n      ) === -1 &&\r\n      !(\r\n        this.host.tagName === 'A' &&\r\n        (this.host.hasAttribute('href') || this.host.hasAttribute('routerlink'))\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { Directive, HostBinding, HostListener } from '@angular/core';\r\nimport { BaseFocusDirective } from '../base/base-focus.directive';\r\nimport { VisibleFocusConfig } from '../keyboard-focus.model';\r\n\r\n/**\r\n * Directive implementation that adds a CSS class to the host element\r\n * when the moused is used to focus an element. As soon as the keyboard\r\n * is used, the class is removed.\r\n */\r\n@Directive() // selector: '[cxVisibleFocus]'\r\nexport class VisibleFocusDirective extends BaseFocusDirective {\r\n  protected defaultConfig: VisibleFocusConfig = { disableMouseFocus: true };\r\n\r\n  // @Input('cxVisibleFocus')\r\n  protected config: VisibleFocusConfig;\r\n\r\n  /** controls a polyfill class for the lacking focus-visible feature */\r\n  @HostBinding('class.mouse-focus') mouseFocus = false;\r\n\r\n  @HostListener('mousedown') handleMousedown() {\r\n    if (this.shouldFocusVisible) {\r\n      this.mouseFocus = true;\r\n    }\r\n  }\r\n\r\n  @HostListener('keydown') handleKeydown() {\r\n    if (this.shouldFocusVisible) {\r\n      this.mouseFocus = false;\r\n    }\r\n  }\r\n\r\n  protected get shouldFocusVisible(): boolean {\r\n    return this.config?.disableMouseFocus;\r\n  }\r\n}\r\n","import { Directive, ElementRef, OnInit } from '@angular/core';\r\nimport { BaseFocusService } from '../base/base-focus.service';\r\nimport { BlockFocusConfig } from '../keyboard-focus.model';\r\nimport { VisibleFocusDirective } from '../visible/visible-focus.directive';\r\n\r\n@Directive()\r\n// { selector: '[cxBlockFocus]' }\r\nexport class BlockFocusDirective extends VisibleFocusDirective\r\n  implements OnInit {\r\n  protected defaultConfig: BlockFocusConfig = { block: true };\r\n\r\n  // @Input('cxBlockFocus')\r\n  protected config: BlockFocusConfig = {};\r\n\r\n  constructor(\r\n    protected elementRef: ElementRef,\r\n    protected service: BaseFocusService\r\n  ) {\r\n    super(elementRef, service);\r\n  }\r\n\r\n  ngOnInit() {\r\n    super.ngOnInit();\r\n    if (this.config.block) {\r\n      this.tabindex = -1;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BaseFocusService } from '../base/base-focus.service';\r\nimport { FOCUS_GROUP_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\r\n\r\nconst GLOBAL_GROUP = '_g_';\r\n\r\n/**\r\n * Shared service to persist the focus for an element or a group\r\n * of elements. The persisted element focus can be used to persist\r\n * the focus for a DOM tree, so that the focus remains after a repaint\r\n * or reoccurs when a DOM tree is \"unlocked\".\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PersistFocusService extends BaseFocusService {\r\n  // this is going to fail as we have sub services. They will al have their own map.\r\n  // We must bring this to a singleton map.\r\n  protected focus = new Map<string, string>();\r\n\r\n  get(group?: string): string {\r\n    return this.focus.get(group || GLOBAL_GROUP);\r\n  }\r\n\r\n  /**\r\n   * Persist the keyboard focus state for the given key. The focus is stored globally\r\n   * or for the given group.\r\n   */\r\n  set(key: string, group?: string) {\r\n    if (key) {\r\n      this.focus.set(group || GLOBAL_GROUP, key);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clears the persisted keyboard focus state globally or for the given group.\r\n   */\r\n  clear(group?: string) {\r\n    this.focus.delete(group || GLOBAL_GROUP);\r\n  }\r\n\r\n  /**\r\n   * Returns the group for the host element based on the configured group or\r\n   * by the `data-cx-focus-group` attribute stored on the host.\r\n   */\r\n  getPersistenceGroup(host: HTMLElement, config?: PersistFocusConfig): string {\r\n    return config?.group ? config.group : host.getAttribute(FOCUS_GROUP_ATTR);\r\n  }\r\n}\r\n","/** The element attribute used to store the focus state */\r\nexport const FOCUS_ATTR = 'data-cx-focus';\r\n/** The element attribute used to store the focus group state */\r\nexport const FOCUS_GROUP_ATTR = 'data-cx-focus-group';\r\n\r\nexport const enum MOVE_FOCUS {\r\n  NEXT = 1,\r\n  PREV = -1,\r\n}\r\n\r\n// tslint:disable-next-line: no-empty-interface\r\nexport interface BaseFocusConfig {}\r\n\r\nexport interface VisibleFocusConfig {\r\n  /**\r\n   * When set to true, the mouse-focus class is added to the host element,\r\n   * indicating that the element focus was not caused by the keyboard.\r\n   */\r\n  disableMouseFocus?: boolean;\r\n}\r\n\r\nexport interface BlockFocusConfig extends VisibleFocusConfig {\r\n  block?: boolean;\r\n}\r\n\r\nexport interface PersistFocusConfig extends BlockFocusConfig {\r\n  /**\r\n   * A key to maintain the focus of an element in case the component is\r\n   * recreated (which often is the case when an `*ngIf` or `*ngFor` is used).\r\n   */\r\n  key?: string;\r\n\r\n  /**\r\n   * Optional group identifier that can be used to persist the focus. This allows\r\n   * to have separate persisted focus available when the DOM is partially rebuild.\r\n   */\r\n  group?: string;\r\n}\r\n\r\nexport interface EscapeFocusConfig extends PersistFocusConfig {\r\n  focusOnEscape?: boolean;\r\n  /**\r\n   * Force an autofocus in case of double-escape\r\n   */\r\n  focusOnDoubleEscape?: boolean;\r\n}\r\n\r\nexport interface AutoFocusConfig extends EscapeFocusConfig {\r\n  /**\r\n   * Autofocus is enabled by default, and will try to focus an _autofocus_ element.\r\n   * In case the focus is explicitly set to `true`, the first accessible element\r\n   * is focussed in case there is no _autofocus_ element found.\r\n   * If the focus is set to false, autofocus will be disabled completely.\r\n   *\r\n   * If a string value is given, the autofocus will be restored based on the persisted\r\n   * focus group, which is driven by `PersistFocusConfig.key` and `PersistFocusConfig.group`.\r\n   *\r\n   * Defaults to `true`.\r\n   */\r\n  autofocus?: boolean | string;\r\n}\r\n\r\nexport interface TabFocusConfig extends AutoFocusConfig {\r\n  tab?: boolean | 'scroll' | string;\r\n}\r\n\r\n/**\r\n * The keyboard navigation (tab, shift-tab and up down keys) is _trapped_\r\n * for the nested focusable elements. This means that the focus can not\r\n * \"leave\" the elements. If the last element is focused, the keyboard will\r\n * navigate to the first element and visa versa.\r\n */\r\nexport interface TrapFocusConfig extends TabFocusConfig {\r\n  /** traps the focus */\r\n  trap?: boolean | 'start' | 'end';\r\n}\r\n\r\nexport interface LockFocusConfig extends TrapFocusConfig {\r\n  /**\r\n   * Indicates that the nested DOM is locked for keyboarding (`TAB`).\r\n   */\r\n  lock?: boolean;\r\n}\r\n\r\n// tslint:disable-next-line: no-empty-interface\r\nexport interface FocusConfig extends LockFocusConfig {}\r\n","import {\r\n  AfterViewInit,\r\n  Directive,\r\n  ElementRef,\r\n  HostBinding,\r\n  HostListener,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { BlockFocusDirective } from '../block/block-focus.directive';\r\nimport { FOCUS_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\r\nimport { PersistFocusService } from './persist-focus.service';\r\n\r\n/**\r\n * Directive that provides persistence of the focused state. This is useful\r\n * when a group of focusable elements got refocused or even recreated. That\r\n * happens often when the DOM is constructed with an `*ngIf` or `*ngFor`.\r\n *\r\n * The focus state is based on a configured _key_, which can be passed in the\r\n * config input, either by using a string primitive or `PersistFocusConfig.key`:\r\n *\r\n * ```html\r\n * <button cxPersistFocus=\"myKey\"></button>\r\n * <button cxFocus=\"myKey\"></button>\r\n * <button [cxFocus]=\"{{key:'myKey'}\"></button>\r\n * ```\r\n *\r\n * The focus state can be part of a focus _group_, so that the state is shared\r\n * and remember for the given group. In order to detect the persistence for a\r\n * given element, we store the persistence key as a data attribute (`data-cx-focus`):\r\n *\r\n * ```html\r\n * <button data-cx-focus=\"myKey\"></button>\r\n * ```\r\n *\r\n * Other keyboard focus directives can read the key to understand whether the element\r\n * should retrieve focus.\r\n *\r\n */\r\n@Directive() // selector: '[cxPersistFocus]',\r\nexport class PersistFocusDirective extends BlockFocusDirective\r\n  implements OnInit, AfterViewInit {\r\n  protected defaultConfig: PersistFocusConfig = {};\r\n\r\n  /**\r\n   * The persistence key can be passed directly or through the `FocusConfig.key`.\r\n   * While this could be considered a global key, the likeliness of conflicts\r\n   * is very small since the key is cleared when the focus is changed.\r\n   */\r\n  // @Input('cxPersistFocus')\r\n  protected config: PersistFocusConfig = {};\r\n\r\n  /**\r\n   * The persistence key is maintained in an element attribute for other\r\n   * implementations. This is needed to ensure that we can resolve the focus\r\n   * state in case of a repaint.\r\n   */\r\n  @HostBinding(`attr.${FOCUS_ATTR}`) attr: string;\r\n\r\n  @HostListener('focus', ['$event'])\r\n  handleFocus(event?: KeyboardEvent) {\r\n    this.service.set(this.key, this.group);\r\n\r\n    event?.preventDefault();\r\n    event?.stopPropagation();\r\n  }\r\n\r\n  constructor(\r\n    protected elementRef: ElementRef,\r\n    protected service: PersistFocusService\r\n  ) {\r\n    super(elementRef, service);\r\n  }\r\n\r\n  ngOnInit() {\r\n    super.ngOnInit();\r\n    this.attr = this.key ? this.key : undefined;\r\n  }\r\n\r\n  protected setDefaultConfiguration() {\r\n    if (typeof this.config === 'string' && this.config !== '') {\r\n      this.config = { key: this.config };\r\n    }\r\n    super.setDefaultConfiguration();\r\n  }\r\n\r\n  /**\r\n   * Focus the element explicitly if it was focused before.\r\n   */\r\n  ngAfterViewInit() {\r\n    if (this.isPersisted) {\r\n      this.host.focus({ preventScroll: true });\r\n    }\r\n  }\r\n\r\n  protected get isPersisted(): boolean {\r\n    return !!this.key && this.service.get(this.group) === this.key;\r\n  }\r\n\r\n  /**\r\n   * Returns the key for the host element, which is used to persist the\r\n   * focus state. This is useful in cases where the DOM is rebuild.\r\n   */\r\n  protected get key(): string {\r\n    return (this.config as PersistFocusConfig)?.key;\r\n  }\r\n\r\n  /**\r\n   * returns the persistence group (if any) for the focusable elements.\r\n   */\r\n  protected get group(): string {\r\n    return this.service.getPersistenceGroup(\r\n      this.host,\r\n      this.config as PersistFocusConfig\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AutoFocusConfig } from '../keyboard-focus.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SelectFocusUtility {\r\n  /**\r\n   * Query selectors used to query focusable child elements of the host element.\r\n   * The selectors are supplemented with `:not([disabled])` and `:not([hidden])`.\r\n   */\r\n  protected focusableSelectors: string[] = [\r\n    'a[href]',\r\n    'button',\r\n    '[tabindex]',\r\n    'input',\r\n    'select',\r\n    'textarea',\r\n  ];\r\n\r\n  // like to leave out the following as we don't use it, and make this list exensible.\r\n  //   `[contentEditable=true]`, // very unlikely to suport as we're not a business tool\r\n  //   `iframe`, // we really don't like iframes...\r\n  //   `area[href]`, // very debatable!\r\n\r\n  protected focusableSelectorSuffix = ':not([disabled]):not([hidden])';\r\n\r\n  query(host: HTMLElement, selector: string): HTMLElement[] {\r\n    if (!selector || selector === '') {\r\n      return [];\r\n    }\r\n    return Array.from(\r\n      host.querySelectorAll(selector) as NodeListOf<HTMLElement>\r\n    );\r\n  }\r\n\r\n  findFirstFocusable(\r\n    host: HTMLElement,\r\n    config: AutoFocusConfig = { autofocus: true }\r\n  ): HTMLElement {\r\n    const selector =\r\n      typeof config?.autofocus === 'string' ? config.autofocus : '[autofocus]';\r\n    // fallback to first focusable\r\n    return (\r\n      this.query(host, selector).find((el) => !this.isHidden(el)) ||\r\n      this.findFocusable(host).find((el) => Boolean(el))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * returns all focusable child elements of the host element. The element selectors\r\n   * are build from the `focusableSelectors`.\r\n   *\r\n   * @param host the `HTMLElement` used to query focusable elements\r\n   * @param locked indicates whether inactive (`tabindex=\"-1\"`) focusable elements should be returned\r\n   * @param invisible indicates whether hidden focusable elements should be returned\r\n   */\r\n  findFocusable(\r\n    host: HTMLElement,\r\n    locked = false,\r\n    invisible = false\r\n  ): HTMLElement[] {\r\n    let suffix = this.focusableSelectorSuffix;\r\n    if (!locked) {\r\n      suffix += `:not([tabindex='-1'])`;\r\n    }\r\n    const selector = this.focusableSelectors\r\n      .map((s) => (s += suffix))\r\n      .join(',');\r\n    return this.query(host, selector).filter((el) =>\r\n      !invisible ? !this.isHidden(el) : Boolean(el)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Indicates whether the element is hidden by CSS. There are various CSS rules and\r\n   * HTML structures which can lead to an hidden or invisible element. An `offsetParent`\r\n   * of null indicates that the element or any of it's decendants is hidden (`display:none`).\r\n   *\r\n   * Oother techniques use the visibility (`visibility: hidden`), opacity (`opacity`) or\r\n   * phyisical location on the element itself or any of it's anchestor elements. Those\r\n   * technique require to work with the _computed styles_, which will cause a performance\r\n   * downgrade. We don't do this in the standard implementaton.\r\n   */\r\n  protected isHidden(el: HTMLElement): boolean {\r\n    return el.offsetParent === null;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\r\nimport { PersistFocusService } from '../persist/persist-focus.service';\r\nimport { SelectFocusUtility } from '../services/select-focus.util';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class EscapeFocusService extends PersistFocusService {\r\n  constructor(protected selectFocusUtil: SelectFocusUtility) {\r\n    super();\r\n  }\r\n\r\n  shouldFocus(config: EscapeFocusConfig): boolean {\r\n    return !!config?.focusOnEscape;\r\n  }\r\n\r\n  handleEscape(\r\n    host: HTMLElement,\r\n    config: EscapeFocusConfig,\r\n    event: KeyboardEvent\r\n  ): void {\r\n    if (this.shouldFocus(config)) {\r\n      if (host !== event.target) {\r\n        host.focus({ preventScroll: true });\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n      } else {\r\n        if (config?.focusOnDoubleEscape) {\r\n          this.selectFocusUtil\r\n            .findFirstFocusable(host, { autofocus: true })\r\n            ?.focus();\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\r\nimport { PersistFocusDirective } from '../persist/persist-focus.directive';\r\nimport { EscapeFocusService } from './escape-focus.service';\r\n\r\n/**\r\n * Directive to focus the host element whenever the `escape` key is captured.\r\n * UiEvents bubble up by nature, which is why the `cxEscGroup` can be used\r\n * on a tree of elements. Each time the escape key is used, the focus will\r\n * move up in the DOM tree.\r\n *\r\n */\r\n@Directive() // selector: '[cxEscFocus]',\r\nexport class EscapeFocusDirective extends PersistFocusDirective\r\n  implements OnInit {\r\n  protected defaultConfig: EscapeFocusConfig = { focusOnEscape: true };\r\n\r\n  // @Input('cxEscFocus')\r\n  protected config: EscapeFocusConfig;\r\n\r\n  @Output() esc = new EventEmitter<boolean>();\r\n\r\n  /**\r\n   * Handles the escape key event.\r\n   * @param event the native keyboard event which contains the escape keydown event\r\n   */\r\n  @HostListener('keydown.escape', ['$event'])\r\n  handleEscape(event: KeyboardEvent): void {\r\n    if (this.service.shouldFocus(this.config)) {\r\n      this.service.handleEscape(this.host, this.config, event);\r\n    }\r\n    this.esc.emit(this.service.shouldFocus(this.config));\r\n  }\r\n\r\n  constructor(\r\n    protected elementRef: ElementRef,\r\n    protected service: EscapeFocusService\r\n  ) {\r\n    super(elementRef, service);\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.service.shouldFocus(this.config)) {\r\n      this.requiredTabindex = -1;\r\n    }\r\n    super.ngOnInit();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { EscapeFocusService } from '../escape/escape-focus.service';\r\nimport {\r\n  AutoFocusConfig,\r\n  FOCUS_ATTR,\r\n  PersistFocusConfig,\r\n} from '../keyboard-focus.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AutoFocusService extends EscapeFocusService {\r\n  /**\r\n   * Returns the first focusable child element of the host element.\r\n   */\r\n  findFirstFocusable(\r\n    host: HTMLElement,\r\n    config: AutoFocusConfig = { autofocus: true }\r\n  ): HTMLElement {\r\n    if (config?.autofocus === ':host') {\r\n      return host;\r\n    } else if (this.hasPersistedFocus(host, config)) {\r\n      return this.getPersisted(host, this.getPersistenceGroup(host, config));\r\n    } else {\r\n      return this.selectFocusUtil.findFirstFocusable(host, config) || host;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Indicates whether any of the focusabe child elements is focused.\r\n   */\r\n  hasPersistedFocus(host: HTMLElement, config: PersistFocusConfig): boolean {\r\n    return !!this.getPersisted(host, this.getPersistenceGroup(host, config));\r\n  }\r\n\r\n  /**\r\n   * Returns the element that has a persisted focus state.\r\n   *\r\n   * @param host the `HTMLElement` used to query for focusable children\r\n   * @param group the optional group for the persistent state, to separate different focus\r\n   *   groups and remain the persistence\r\n   */\r\n  protected getPersisted(host: HTMLElement, group?: string): HTMLElement {\r\n    if (!this.get(group)) {\r\n      return;\r\n    }\r\n    const focussed = Array.from(\r\n      host.querySelectorAll(\r\n        `[${FOCUS_ATTR}='${this.get(group)}']`\r\n      ) as NodeListOf<HTMLElement>\r\n    );\r\n    return focussed.length > 0 ? focussed[0] : null;\r\n  }\r\n}\r\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\r\nimport { EscapeFocusDirective } from '../escape/escape-focus.directive';\r\nimport { AutoFocusConfig } from '../keyboard-focus.model';\r\nimport { AutoFocusService } from './auto-focus.service';\r\n\r\n/**\r\n * Directive that focus the first nested _focusable_ element based on state and configuration:\r\n *\r\n * 1. focusable element that was left in a focused state (aka _persisted_ focus)\r\n * 2. focusable element selected by configured CSS selector (i.e. 'button[type=submit]')\r\n * 3. focusable element marked with the native HTML5 `autofocus` attribute\r\n * 4. first focusable element\r\n * 5. the host element, in case the configured CSS selector is `:host`.\r\n *\r\n * Example configurations:\r\n *\r\n * `<div cxAutoFocus>[...]</div>`\r\n *\r\n * `<div [cxAutoFocus]=\"{autofocus: false}\">[...]</div>`\r\n *\r\n * `<div [cxAutoFocus]=\"{autofocus: 'button.active'}\">[...]</div>`\r\n *\r\n * `<div [cxAutoFocus]=\"{autofocus: ':host'}\">[...]</div>`\r\n *\r\n */\r\n@Directive() // selector: '[cxAutoFocus]'\r\nexport class AutoFocusDirective extends EscapeFocusDirective\r\n  implements AfterViewInit {\r\n  /** The AutoFocusDirective will be using autofocus by default  */\r\n  protected defaultConfig: AutoFocusConfig = { autofocus: true };\r\n\r\n  // @Input('cxAutoFocus')\r\n  protected config: AutoFocusConfig;\r\n\r\n  constructor(\r\n    protected elementRef: ElementRef,\r\n    protected service: AutoFocusService\r\n  ) {\r\n    super(elementRef, service);\r\n  }\r\n\r\n  /**\r\n   * Focus the element explicitly if it was focussed before.\r\n   */\r\n  ngAfterViewInit(): void {\r\n    if (this.shouldAutofocus) {\r\n      this.handleFocus();\r\n    }\r\n    if (!this.shouldAutofocus || this.hasPersistedFocus) {\r\n      super.ngAfterViewInit();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mimic the focus without setting the actual focus on the host. The first\r\n   * focusable child element will be focussed.\r\n   */\r\n  handleFocus(event?: KeyboardEvent) {\r\n    if (this.shouldAutofocus) {\r\n      if (!event?.target || event.target === this.host) {\r\n        this.firstFocusable?.focus();\r\n      } else {\r\n        (event.target as HTMLElement).focus();\r\n      }\r\n    }\r\n    super.handleFocus(event);\r\n  }\r\n\r\n  /**\r\n   * Helper function to get the first focusable child element\r\n   */\r\n  protected get hasPersistedFocus() {\r\n    return this.service.hasPersistedFocus(this.host, this.config);\r\n  }\r\n\r\n  /**\r\n   * Helper function to indicate whether we should use autofocus for the\r\n   * child elements.\r\n   */\r\n  protected get shouldAutofocus(): boolean {\r\n    return !!this.config?.autofocus;\r\n  }\r\n\r\n  /**\r\n   * Helper function to get the first focusable child element.\r\n   *\r\n   * We keep this private to not polute the API.\r\n   */\r\n  private get firstFocusable(): HTMLElement {\r\n    return this.service.findFirstFocusable(this.host, this.config);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AutoFocusService } from '../autofocus/auto-focus.service';\r\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TabFocusService extends AutoFocusService {\r\n  /**\r\n   * Moves to the next (or previous) tab.\r\n   */\r\n  moveTab(\r\n    host: HTMLElement,\r\n    config: TabFocusConfig,\r\n    increment: MOVE_FOCUS,\r\n    event: KeyboardEvent\r\n  ): void {\r\n    if (config?.tab) {\r\n      const next =\r\n        config.tab === 'scroll'\r\n          ? this.findNextScrollable(host, config, increment)\r\n          : this.findNext(host, config, increment);\r\n\r\n      next?.focus();\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * builds out virtual slides out of the full scrollable area, to allow\r\n   * for maximum flexibility for the underlying layout without using hardcoded\r\n   * slide sizes.\r\n   */\r\n  protected findNextScrollable(\r\n    host: HTMLElement,\r\n    config: TabFocusConfig,\r\n    increment: MOVE_FOCUS\r\n  ): HTMLElement {\r\n    const active = this.getActiveChild(host, config);\r\n\r\n    if (!active) {\r\n      return;\r\n    }\r\n    // slide count\r\n    const virtualSlideCount = Math.round(host.scrollWidth / host.clientWidth);\r\n\r\n    // find current virtual slide\r\n    const currentVirtualSlide = Math.round(\r\n      active.offsetLeft / (host.scrollWidth / virtualSlideCount)\r\n    );\r\n\r\n    let nextVirtualSlide = currentVirtualSlide + increment;\r\n    if (\r\n      increment === MOVE_FOCUS.NEXT &&\r\n      nextVirtualSlide >= virtualSlideCount\r\n    ) {\r\n      nextVirtualSlide = 0;\r\n    }\r\n    if (increment === MOVE_FOCUS.PREV && nextVirtualSlide < 0) {\r\n      nextVirtualSlide = virtualSlideCount - 1;\r\n    }\r\n\r\n    const firstItemOnNextSlide = this.getChildren(host, config)?.find(\r\n      (tab) =>\r\n        tab.offsetLeft >=\r\n        (host.scrollWidth / virtualSlideCount) * nextVirtualSlide\r\n    );\r\n\r\n    return firstItemOnNextSlide;\r\n  }\r\n\r\n  protected findNext(\r\n    host: HTMLElement,\r\n    config: TabFocusConfig,\r\n    increment: MOVE_FOCUS\r\n  ): HTMLElement {\r\n    const childs = this.getChildren(host, config);\r\n    let activeIndex = childs?.findIndex(\r\n      (c) => c === this.getActiveChild(host, config)\r\n    );\r\n\r\n    if (!activeIndex || activeIndex === -1) {\r\n      activeIndex = 0;\r\n    }\r\n    activeIndex += increment;\r\n\r\n    if (increment === MOVE_FOCUS.NEXT && activeIndex >= childs?.length) {\r\n      activeIndex = childs.length - 1;\r\n    }\r\n    if (increment === MOVE_FOCUS.PREV && activeIndex < 0) {\r\n      activeIndex = 0;\r\n    }\r\n    return childs ? childs[activeIndex] : undefined;\r\n  }\r\n\r\n  /**\r\n   * Returns the active focusable child element. If there's no active\r\n   * focusable child element, the first focusable child is returned.\r\n   */\r\n  protected getActiveChild(\r\n    host: HTMLElement,\r\n    config: TabFocusConfig\r\n  ): HTMLElement {\r\n    const persisted = this.getPersisted(host, config?.group);\r\n    if (persisted) {\r\n      return persisted;\r\n    }\r\n    const children = this.getChildren(host, config);\r\n    let index = children.findIndex((tab) => this.isActive(tab));\r\n    if (!index || index === -1) {\r\n      index = 0;\r\n    }\r\n    return children[index];\r\n  }\r\n\r\n  protected getChildren(\r\n    host: HTMLElement,\r\n    config: TabFocusConfig\r\n  ): HTMLElement[] {\r\n    if (typeof config.tab === 'string' && config.tab !== 'scroll') {\r\n      return this.selectFocusUtil.query(host, config.tab);\r\n    } else {\r\n      return this.findFocusable(host, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns all focusable child elements of the host element.\r\n   *\r\n   * @param host The host element is used to query child focusable elements.\r\n   * @param locked Indicates if locked elements (tabindex=-1) should be returned, defaults to false.\r\n   * @param invisible Indicates if invisible child elements should be returned, defaults to false.\r\n   */\r\n  findFocusable(\r\n    host: HTMLElement,\r\n    locked = false,\r\n    invisible = false\r\n  ): HTMLElement[] {\r\n    return this.selectFocusUtil.findFocusable(host, locked, invisible);\r\n  }\r\n\r\n  protected isActive(el: HTMLElement): boolean {\r\n    const child = document.activeElement;\r\n    const selector = child.tagName;\r\n\r\n    return (\r\n      el === child ||\r\n      !!Array.from(el.querySelectorAll(selector)).find((e) => e === child)\r\n    );\r\n  }\r\n}\r\n","import { Directive, ElementRef, HostListener } from '@angular/core';\r\nimport { AutoFocusDirective } from '../autofocus/auto-focus.directive';\r\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\r\nimport { TabFocusService } from './tab-focus.service';\r\n\r\n/**\r\n * Directive to move the focus of (\"locked\") child elements. This is useful\r\n * for a nested list of tabs, carousel slides or any group of elements that\r\n * requires horizontal navigation.\r\n */\r\n@Directive() // selector: '[cxTabFocus]'\r\nexport class TabFocusDirective extends AutoFocusDirective {\r\n  /** `tab` defaults to true if the directive `cxTabFocus` is used. */\r\n  protected defaultConfig: TabFocusConfig = { tab: true };\r\n\r\n  // @Input('cxTabFocus')\r\n  protected config: TabFocusConfig = {};\r\n\r\n  @HostListener('keydown.arrowRight', ['$event'])\r\n  handleNextTab(event: KeyboardEvent) {\r\n    if (this.config?.tab) {\r\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.NEXT, event);\r\n    }\r\n  }\r\n\r\n  @HostListener('keydown.arrowLeft', ['$event'])\r\n  handlePreviousTab(event: KeyboardEvent) {\r\n    if (this.config?.tab) {\r\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.PREV, event);\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    protected elementRef: ElementRef,\r\n    protected service: TabFocusService\r\n  ) {\r\n    super(elementRef, service);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\r\nimport { TabFocusService } from '../tab/tab-focus.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TrapFocusService extends TabFocusService {\r\n  /**\r\n   * Indicates whether any of the child elements of the host are focusable.\r\n   *\r\n   * @param host `HTMLElement` that is used to query the focusable elements.\r\n   */\r\n  hasFocusableChildren(host: HTMLElement): boolean {\r\n    return this.findFocusable(host).length > 0;\r\n  }\r\n\r\n  /**\r\n   * Focus the next or previous element of all available focusable elements.\r\n   * The focus is _trapped_ in case there's no next or previous available element.\r\n   * The focus will automatically move the start or end of the list.\r\n   */\r\n  moveFocus(\r\n    host: HTMLElement,\r\n    config: TrapFocusConfig,\r\n    increment: MOVE_FOCUS,\r\n    event: UIEvent\r\n  ): void {\r\n    const focusable: HTMLElement[] = this.findFocusable(host);\r\n\r\n    let index = focusable.findIndex((v) => v === event.target) + increment;\r\n\r\n    const shouldMoveFocus =\r\n      (index >= 0 && index < focusable.length) ||\r\n      (index < 0 && this.getTrapStart(config.trap)) ||\r\n      (index >= focusable.length && this.getTrapEnd(config.trap));\r\n\r\n    if (shouldMoveFocus) {\r\n      if (index >= focusable.length) {\r\n        index = 0;\r\n      }\r\n      if (index < 0) {\r\n        index = focusable.length - 1;\r\n      }\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      const el = focusable[index];\r\n\r\n      el.focus();\r\n    }\r\n  }\r\n\r\n  protected getTrapStart(trap: boolean | 'start' | 'end'): boolean {\r\n    return trap === true || trap === 'start';\r\n  }\r\n\r\n  protected getTrapEnd(trap: boolean | 'start' | 'end'): boolean {\r\n    return trap === true || trap === 'end';\r\n  }\r\n}\r\n","import { Directive, ElementRef, HostListener, OnInit } from '@angular/core';\r\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\r\nimport { TabFocusDirective } from '../tab/tab-focus.directive';\r\nimport { TrapFocusService } from './trap-focus.service';\r\n\r\n/**\r\n * Directive that keeps the focus inside the focussable child elements,\r\n * also known as a _focus trap_.\r\n */\r\n@Directive() // selector: '[cxTrapFocus]'\r\nexport class TrapFocusDirective extends TabFocusDirective implements OnInit {\r\n  protected defaultConfig: TrapFocusConfig = { trap: true };\r\n\r\n  // @Input('cxTrapFocus')\r\n  protected config: TrapFocusConfig = {};\r\n\r\n  @HostListener('keydown.arrowdown', ['$event'])\r\n  @HostListener('keydown.tab', ['$event'])\r\n  handleTrapDown = (event: KeyboardEvent) => {\r\n    if (!!this.config.trap) {\r\n      this.moveFocus(event, MOVE_FOCUS.NEXT);\r\n    }\r\n  };\r\n\r\n  @HostListener('keydown.arrowup', ['$event'])\r\n  @HostListener('keydown.shift.tab', ['$event'])\r\n  handleTrapUp = (event: KeyboardEvent) => {\r\n    if (!!this.config.trap) {\r\n      this.moveFocus(event, MOVE_FOCUS.PREV);\r\n    }\r\n  };\r\n\r\n  constructor(\r\n    protected elementRef: ElementRef,\r\n    protected service: TrapFocusService\r\n  ) {\r\n    super(elementRef, service);\r\n  }\r\n\r\n  /**\r\n   * Moves the focus of the element reference up or down, depending on the increment.\r\n   * The focus of the element is trapped to avoid it from going out of the group.\r\n   *\r\n   * @param event UIEvent that is used to get the target element. The event is blocked\r\n   *   from standard execution and further bubbling.\r\n   * @param increment indicates whether the next or previous is focussed.\r\n   */\r\n  protected moveFocus(event: UIEvent, increment: number) {\r\n    if (this.service.hasFocusableChildren(this.host)) {\r\n      this.service.moveFocus(\r\n        this.host,\r\n        this.config,\r\n        increment,\r\n        event as UIEvent\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { TrapFocusService } from '../trap/trap-focus.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LockFocusService extends TrapFocusService {}\r\n","import {\r\n  AfterViewInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  HostListener,\r\n  OnInit,\r\n  Output,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport { FOCUS_GROUP_ATTR, LockFocusConfig } from '../keyboard-focus.model';\r\nimport { TrapFocusDirective } from '../trap/trap-focus.directive';\r\nimport { LockFocusService } from './lock-focus.service';\r\n\r\n/**\r\n * Focusable elements exclude hidden elements by default, but this contradicts with\r\n * unlocking (hidden) elements.\r\n */\r\nconst UNLOCK_HIDDEN_ELEMENTS = true;\r\n/**\r\n * Directive that adds persistence for focussed element in case\r\n * the elements are being rebuild. This happens often when change\r\n * detection kicks in because of new data set from the backend.\r\n */\r\n@Directive() // selector: '[cxLockFocus]'\r\nexport class LockFocusDirective extends TrapFocusDirective\r\n  implements OnInit, AfterViewInit {\r\n  protected defaultConfig: LockFocusConfig = { lock: true };\r\n\r\n  // @Input('cxLockFocus')\r\n  protected config: LockFocusConfig = {};\r\n\r\n  /**\r\n   * Indicates that the host is configured to use locking. This is available as a\r\n   * CSS class `focus-lock`.\r\n   */\r\n  @HostBinding('class.focus-lock') shouldLock: boolean;\r\n\r\n  /**\r\n   * Indicates that the host is locked. This is available as a CSS class `is-locked`.\r\n   */\r\n  @HostBinding('class.is-locked') isLocked: boolean;\r\n\r\n  /**\r\n   * Emits an event when the host is unlocked.\r\n   */\r\n  @Output() unlock = new EventEmitter<boolean>();\r\n\r\n  /**\r\n   * When the user selects enter or space, the focusable childs are\r\n   * unlocked, which means that the tabindex is set to 0.\r\n   */\r\n  @HostListener('keydown.enter', ['$event'])\r\n  @HostListener('keydown.space', ['$event'])\r\n  handleEnter(event: KeyboardEvent) {\r\n    if (this.shouldLock && this.host === (event.target as HTMLElement)) {\r\n      this.unlockFocus(event);\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * In case any of the children elements is touched by the mouse,\r\n   * we unlock the group to not break the mouse-experience.\r\n   */\r\n  @HostListener('click', ['$event'])\r\n  handleClick(event: UIEvent): void {\r\n    if (this.shouldLock && this.isLocked) {\r\n      this.unlockFocus(event);\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    protected elementRef: ElementRef,\r\n    protected service: LockFocusService,\r\n    protected renderer: Renderer2\r\n  ) {\r\n    super(elementRef, service);\r\n  }\r\n\r\n  protected lockFocus() {\r\n    this.addTabindexToChildren(-1);\r\n  }\r\n\r\n  protected unlockFocus(event?: UIEvent) {\r\n    this.unlock.emit(true);\r\n    this.addTabindexToChildren(0);\r\n    // we focus the host if the event was triggered from a child\r\n    if (event?.target === this.host) {\r\n      // we wait a few milliseconds, mainly because firefox will otherwise apply\r\n      // the mouse event on the new focused child element\r\n      setTimeout(() => {\r\n        super.handleFocus(event as KeyboardEvent);\r\n      }, 100);\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    super.ngOnInit();\r\n\r\n    this.shouldLock = this.config?.lock;\r\n\r\n    if (this.shouldLock) {\r\n      this.tabindex = 0;\r\n\r\n      // Locked elements will be set to `autofocus` by default if it's not\r\n      // been configured. This will ensure that autofocus kicks in upon unlock.\r\n      if (!this.config.hasOwnProperty('autofocus')) {\r\n        this.config.autofocus = true;\r\n      }\r\n      // Locked elements will be set to `focusOnEscape` by default if it's not\r\n      // been configured. This will ensure that  the host gets locked again when\r\n      // `escape` is pressed.\r\n      if (!this.config.hasOwnProperty('focusOnEscape')) {\r\n        this.config.focusOnEscape = !(this.config?.focusOnEscape === false);\r\n      }\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.shouldLock) {\r\n      /**\r\n       * If the component hosts a group of focusable children elements,\r\n       * we persist the group key to the children, so that they can taken this\r\n       * into account when they persist their focus state.\r\n       */\r\n      if (!!this.group) {\r\n        this.service.findFocusable(this.host).forEach((el) =>\r\n          // we must do this in after view init as\r\n          this.renderer.setAttribute(el, FOCUS_GROUP_ATTR, this.group)\r\n        );\r\n      }\r\n\r\n      if (this.shouldAutofocus) {\r\n        this.handleFocus();\r\n      }\r\n    }\r\n    super.ngAfterViewInit();\r\n  }\r\n\r\n  handleFocus(event?: KeyboardEvent): void {\r\n    if (this.shouldLock) {\r\n      if (this.shouldUnlockAfterAutofocus(event)) {\r\n        // Delay unlocking in case the host is using `ChangeDetectionStrategy.Default`\r\n        setTimeout(() => this.unlockFocus(event));\r\n      } else {\r\n        setTimeout(() => this.lockFocus());\r\n        event?.stopPropagation();\r\n        return;\r\n      }\r\n    }\r\n    super.handleFocus(event);\r\n  }\r\n\r\n  handleEscape(event: KeyboardEvent): void {\r\n    if (this.shouldLock) {\r\n      this.service.clear(this.config.group);\r\n    }\r\n    super.handleEscape(event);\r\n  }\r\n\r\n  /**\r\n   * When the handleFocus is called without an actual event, it's coming from Autofocus.\r\n   * In this case we unlock the focusable children in case there's a focusable child that\r\n   * was unlocked before.\r\n   *\r\n   * We keep this private to not polute the API.\r\n   */\r\n  private shouldUnlockAfterAutofocus(event?: KeyboardEvent) {\r\n    return !event && this.service.hasPersistedFocus(this.host, this.config);\r\n  }\r\n\r\n  /**\r\n   * Add the tabindex attribute to the focusable children elements\r\n   */\r\n  protected addTabindexToChildren(i = 0): void {\r\n    if (this.shouldLock) {\r\n      this.isLocked = i === -1;\r\n      if (!(this.hasFocusableChildren && i === 0) || i === 0) {\r\n        this.focusable.forEach((el) =>\r\n          this.renderer.setAttribute(el, 'tabindex', i.toString())\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Utility method, returns all focusable children for the host element.\r\n   *\r\n   * We keep this private to not polute the API.\r\n   */\r\n  private get hasFocusableChildren(): boolean {\r\n    return this.service.hasFocusableChildren(this.host);\r\n  }\r\n\r\n  /**\r\n   * Returns the focusable children of the host element. If the host element\r\n   * is configured to be locked, the query is restricted to child elements\r\n   * with a tabindex !== `-1`.\r\n   *\r\n   * We keep this private to not polute the API.\r\n   */\r\n  private get focusable(): HTMLElement[] {\r\n    return this.service.findFocusable(\r\n      this.host,\r\n      this.shouldLock,\r\n      UNLOCK_HIDDEN_ELEMENTS\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { LockFocusService } from '../lock/lock-focus.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class KeyboardFocusService extends LockFocusService {}\r\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\r\nimport { FocusConfig } from './keyboard-focus.model';\r\nimport { LockFocusDirective } from './lock/lock-focus.directive';\r\nimport { KeyboardFocusService } from './services/keyboard-focus.service';\r\n\r\n@Directive({\r\n  selector: '[cxFocus]',\r\n})\r\nexport class FocusDirective extends LockFocusDirective {\r\n  protected defaultConfig: FocusConfig = {};\r\n  // tslint:disable-next-line: no-input-rename\r\n  @Input('cxFocus') protected config: FocusConfig = {};\r\n\r\n  constructor(\r\n    protected elementRef: ElementRef,\r\n    protected service: KeyboardFocusService,\r\n    protected renderer: Renderer2\r\n  ) {\r\n    super(elementRef, service, renderer);\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FocusDirective } from './focus.directive';\r\n\r\nconst directives = [\r\n  // PersistFocusDirective,\r\n  // VisibleFocusDirective,\r\n  // BlockFocusDirective,\r\n  // AutoFocusDirective,\r\n  // EscapeFocusDirective,\r\n  // LockFocusDirective,\r\n  // TrapFocusDirective,\r\n  // TabFocusDirective,\r\n  FocusDirective,\r\n];\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [...directives],\r\n  exports: [...directives],\r\n})\r\nexport class KeyboardFocusModule {}\r\n","import { Component, OnDestroy, ViewContainerRef } from '@angular/core';\r\nimport { AnonymousConsentsService } from '@spartacus/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { AnonymousConsentLaunchDialogService } from '../anonymous-consent-launch-dialog.service';\r\n\r\n@Component({\r\n  selector: 'cx-anonymous-consent-management-banner',\r\n  templateUrl: './anonymous-consent-management-banner.component.html',\r\n})\r\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\r\n  private subscriptions = new Subscription();\r\n\r\n  bannerVisible$: Observable<\r\n    boolean\r\n  > = this.anonymousConsentsService.isBannerVisible();\r\n\r\n  constructor(\r\n    protected anonymousConsentsService: AnonymousConsentsService,\r\n    protected anonymousConsentLaunchDialogService: AnonymousConsentLaunchDialogService,\r\n    protected vcr: ViewContainerRef\r\n  ) {}\r\n\r\n  viewDetails(): void {\r\n    this.hideBanner();\r\n    const dialog = this.anonymousConsentLaunchDialogService.openDialog(\r\n      null,\r\n      this.vcr\r\n    );\r\n    if (dialog) {\r\n      this.subscriptions.add(dialog.subscribe());\r\n    }\r\n  }\r\n\r\n  allowAll(): void {\r\n    this.subscriptions.add(\r\n      this.anonymousConsentsService\r\n        .giveAllConsents()\r\n        .pipe(tap(() => this.hideBanner()))\r\n        .subscribe()\r\n    );\r\n  }\r\n\r\n  hideBanner(): void {\r\n    this.anonymousConsentsService.toggleBannerDismissed(true);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","/**\r\n * Represents a page item for a pagination system. This is used\r\n * to store the model of each page.\r\n */\r\nexport interface PaginationItem {\r\n  label?: string;\r\n  type?: PaginationItemType;\r\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\r\n  number?: number;\r\n}\r\n\r\n/**\r\n * The item type is used to add semantic structure to the\r\n * PaginationItem, so that the UI understands the usage.\r\n */\r\nexport enum PaginationItemType {\r\n  GAP = 'gap',\r\n  FIRST = 'first',\r\n  LAST = 'last',\r\n  PREVIOUS = 'previous',\r\n  NEXT = 'next',\r\n  START = 'start',\r\n  END = 'end',\r\n  PAGE = 'page',\r\n}\r\n\r\nexport interface PaginationOptions {\r\n  /**\r\n   * The range of direct accessible pages in the pagination.\r\n   *\r\n   * `« 4 (5) 6 »`\r\n   *\r\n   * Defaults to 3.\r\n   */\r\n  rangeCount?: number;\r\n\r\n  /** Adds a link to skip to the start of the pages, defaults to false. */\r\n  addStart?: boolean;\r\n  /** A link to skip to the end of the pages, defaults to false. */\r\n  addEnd?: boolean;\r\n  /** A link to the previous page, defaults to false. */\r\n  addPrevious?: boolean;\r\n  /** A link to the previous page, defaults to false. */\r\n  addNext?: boolean;\r\n\r\n  navigationPosition?: PaginationNavigationPosition;\r\n\r\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\r\n  addFirst?: boolean;\r\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\r\n  addLast?: boolean;\r\n\r\n  /**\r\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\r\n   *\r\n   * `1 ...  4 (5) 6 ... 18`\r\n   *\r\n   * Defaults to false.\r\n   */\r\n  addDots?: boolean;\r\n\r\n  /**\r\n   * If the page dots only represents a single page, we rather add the page\r\n   * as this would take the same amount of space. Some UX might want to use\r\n   * the dots for consistency reasons, which why this option is configurable.\r\n   *\r\n   * This typically happens on the 4th page (in case the range is 3):\r\n   * Instead of having:\r\n   *\r\n   *  `1 ...  3 (4) 5`\r\n   *\r\n   * we'd have\r\n   *\r\n   * `1 2 3 (4) 5`.\r\n   *\r\n   * Defaults to false.\r\n   */\r\n  substituteDotsForSingularPage?: boolean;\r\n\r\n  /** Custom label for the start link, defaults to `«`. */\r\n  startLabel?: string;\r\n  /** Custom label for the previous link, defaults to `‹`. */\r\n  previousLabel?: string;\r\n  /** Custom label for the next link, defaults to `›`. */\r\n  nextLabel?: string;\r\n  /** Custom label for the end link, defaults to `»`. */\r\n  endLabel?: string;\r\n  /** Custom label for the dots, defaults to `...`. */\r\n  dotsLabel?: string;\r\n}\r\n\r\nexport enum PaginationNavigationPosition {\r\n  ASIDE = 'aside',\r\n  BEFORE = 'before',\r\n  AFTER = 'after',\r\n}\r\n","import { IconConfig, IconResourceType } from './icon.model';\r\n\r\nexport const fontawesomeIconConfig: IconConfig = {\r\n  icon: {\r\n    symbols: {\r\n      SEARCH: 'fas fa-search',\r\n      CART: 'fas fa-shopping-cart',\r\n      INFO: 'fas fa-info-circle',\r\n      STAR: 'fas fa-star',\r\n      GRID: 'fas fa-th-large',\r\n      LIST: 'fas fa-bars',\r\n      CARET_DOWN: 'fas fa-angle-down',\r\n      CARET_RIGHT: 'fas fa-angle-right',\r\n      CARET_LEFT: 'fas fa-angle-left',\r\n      ERROR: 'fas fa-exclamation-circle',\r\n      WARNING: 'fas fa-exclamation-triangle',\r\n      SUCCESS: 'fas fa-check-circle',\r\n      CLOSE: 'fas fa-times',\r\n      VISA: 'fab fa-cc-visa',\r\n      MASTER_CARD: 'fab fa-cc-mastercard',\r\n      AMEX: 'fab fa-cc-amex',\r\n      DINERS_CLUB: 'fab fa-cc-diners-club',\r\n      CREDIT_CARD: 'fas fa-credit-card',\r\n      COLLAPSE: 'fas fa-minus',\r\n      EXPAND: 'fas fa-plus',\r\n      RESET: 'fas fa-times-circle',\r\n      CIRCLE: 'fas fa-circle',\r\n      HEART: 'fas fa-heart',\r\n      EMPTY_HEART: 'far fa-heart',\r\n      FILTER: 'fas fa-filter',\r\n    },\r\n    resources: [\r\n      {\r\n        type: IconResourceType.LINK,\r\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\r\n      },\r\n    ],\r\n  },\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\nimport { WindowRef } from '@spartacus/core';\r\nimport {\r\n  IconConfig,\r\n  IconConfigResource,\r\n  IconOptions,\r\n  IconResourceType,\r\n  ICON_TYPE,\r\n} from './icon.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class IconLoaderService {\r\n  private loadedResources = [];\r\n  constructor(\r\n    protected winRef: WindowRef,\r\n    protected iconConfig: IconConfig,\r\n    protected sanitizer: DomSanitizer\r\n  ) {}\r\n\r\n  /**\r\n   * Returns an html fragment which can be added to the DOM in a safe way.\r\n   */\r\n  getHtml(type: ICON_TYPE | string): SafeHtml {\r\n    if (this.isResourceType(type, IconResourceType.SVG)) {\r\n      return this.sanitizer.bypassSecurityTrustHtml(\r\n        `<svg><use xlink:href=\"${this.getSvgPath(type)}\"></use></svg>`\r\n      );\r\n    }\r\n    if (this.isResourceType(type, IconResourceType.TEXT)) {\r\n      return this.sanitizer.bypassSecurityTrustHtml(this.getSymbol(type));\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Returns the symbol class(es) for the icon type.\r\n   */\r\n  getStyleClasses(iconType: ICON_TYPE | string): string {\r\n    return this.getSymbol(iconType) || '';\r\n  }\r\n\r\n  /**\r\n   * Indicates whether the given `ICON_TYPE` is configured for\r\n   * the given `IconResourceType`.\r\n   */\r\n  private isResourceType(\r\n    iconType: ICON_TYPE | string,\r\n    resourceType: IconResourceType\r\n  ): boolean {\r\n    return (\r\n      this.config.resources &&\r\n      !!this.config.resources.find(\r\n        (res) =>\r\n          res.types && res.type === resourceType && res.types.includes(iconType)\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the path to the svg link. The link supports path names\r\n   * as well, if the config a[[s been setup to support a svg file path.\r\n   * Additionally, the icon prefix will be taken into account to prefix the\r\n   * icon IDs in the SVG.\r\n   */\r\n  private getSvgPath(iconType: ICON_TYPE | string): string {\r\n    const svgResource = this.config.resources.find(\r\n      (res) =>\r\n        res.type === IconResourceType.SVG &&\r\n        res.types &&\r\n        res.types.includes(iconType)\r\n    );\r\n    if (svgResource) {\r\n      return svgResource.url\r\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\r\n        : `#${this.getSymbol(iconType)}`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loads the resource url (if any) for the given icon.\r\n   * The icon will only be loaded once.\r\n   *\r\n   * NOTE: this is not working when the shadow is used as there's\r\n   * no head element available and the link must be loaded for every\r\n   * web component.\r\n   */\r\n  addLinkResource(iconType: ICON_TYPE | string): void {\r\n    const resource: IconConfigResource = this.findResource(\r\n      iconType,\r\n      IconResourceType.LINK\r\n    );\r\n    if (\r\n      resource &&\r\n      resource.url &&\r\n      !this.loadedResources.includes(resource.url)\r\n    ) {\r\n      this.loadedResources.push(resource.url);\r\n      const head = this.winRef.document.getElementsByTagName('head')[0];\r\n      const link = this.winRef.document.createElement('link');\r\n      link.rel = 'stylesheet';\r\n      link.type = 'text/css';\r\n      link.href = resource.url;\r\n      head.appendChild(link);\r\n    }\r\n  }\r\n\r\n  private findResource(\r\n    iconType: ICON_TYPE | string,\r\n    resourceType: IconResourceType\r\n  ): IconConfigResource {\r\n    if (!this.config.resources) {\r\n      return;\r\n    }\r\n\r\n    let resource = this.config.resources.find(\r\n      (res) =>\r\n        res.type === resourceType && res.types && res.types.includes(iconType)\r\n    );\r\n    // no specific resource found, let's try to find a one-size-fits-all resource\r\n    if (!resource) {\r\n      resource = this.config.resources.find(\r\n        (res) => (res.type === resourceType && !res.types) || res.types === []\r\n      );\r\n    }\r\n    return resource;\r\n  }\r\n\r\n  getSymbol(iconType: ICON_TYPE | string) {\r\n    if (this.config && this.config.symbols && this.config.symbols[iconType]) {\r\n      return this.config.symbols[iconType];\r\n    }\r\n  }\r\n\r\n  private get config(): IconOptions {\r\n    return this.iconConfig.icon;\r\n  }\r\n}\r\n","import { Component, ElementRef, Input, Renderer2 } from '@angular/core';\r\nimport { SafeHtml } from '@angular/platform-browser';\r\nimport { IconLoaderService } from './icon-loader.service';\r\nimport { ICON_TYPE } from './icon.model';\r\n\r\n/**\r\n *\r\n * The icon component can be added in different ways:\r\n *\r\n * With the component selector:\r\n * `<cx-icon type=\"SEARCH\"></cx-icon>`\r\n *\r\n * With the attribute selector:\r\n * `<span cxIcon=\"STAR\"></span>`\r\n *\r\n * Additionally, content can be projected to the icon:\r\n *\r\n * `<button cxIcon=\"HAPPY\">happy label</button>`\r\n *\r\n * The above button would become (based on a TEXT resource type):\r\n * `<button>😊happy label</button>`\r\n *\r\n * While the content is projected, the icon itself doesn't require an\r\n * additional DOM node which is an advantage over the component selector.\r\n */\r\n@Component({\r\n  selector: 'cx-icon,[cxIcon]',\r\n  templateUrl: './icon.component.html',\r\n})\r\nexport class IconComponent {\r\n  /**\r\n   * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to\r\n   * accomplish a configurable button in the UI.\r\n   */\r\n  @Input() set cxIcon(type: ICON_TYPE) {\r\n    this.setIcon(type);\r\n  }\r\n\r\n  /**\r\n   * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to\r\n   * accomplish a configurable button in the UI.\r\n   */\r\n  @Input() set type(type: ICON_TYPE) {\r\n    this.setIcon(type);\r\n  }\r\n\r\n  /**\r\n   * the icon provides an html fragment that is used to add SVG or text based icons.\r\n   */\r\n  icon: SafeHtml;\r\n\r\n  /**\r\n   * Maintains the applied style classes so we can remove them when the\r\n   * icon type changes at run time.\r\n   */\r\n  protected styleClasses: string[];\r\n\r\n  constructor(\r\n    protected iconLoader: IconLoaderService,\r\n    protected elementRef: ElementRef<HTMLElement>,\r\n    protected renderer: Renderer2\r\n  ) {}\r\n\r\n  protected setIcon(type: ICON_TYPE): void {\r\n    if (!type || <string>type === '') {\r\n      return;\r\n    }\r\n    this.icon = this.iconLoader.getHtml(type);\r\n    this.addStyleClasses(type);\r\n    this.iconLoader.addLinkResource(type);\r\n  }\r\n\r\n  /**\r\n   * Adds the style classes and the link resource (if available).\r\n   */\r\n  protected addStyleClasses(type: ICON_TYPE): void {\r\n    this.renderer.addClass(this.host, 'cx-icon');\r\n\r\n    if (this.styleClasses) {\r\n      this.styleClasses.forEach((cls) =>\r\n        this.renderer.removeClass(this.host, cls)\r\n      );\r\n    }\r\n\r\n    this.styleClasses = this.iconLoader.getStyleClasses(type).split(' ');\r\n\r\n    this.styleClasses.forEach((cls) => {\r\n      if (cls !== '') {\r\n        this.renderer.addClass(this.host, cls);\r\n      }\r\n    });\r\n  }\r\n\r\n  protected get host() {\r\n    return this.elementRef.nativeElement;\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '@spartacus/core';\r\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\r\nimport { IconComponent } from './icon.component';\r\n\r\n@NgModule({\r\n  declarations: [IconComponent],\r\n  imports: [CommonModule],\r\n  providers: [provideDefaultConfig(fontawesomeIconConfig)],\r\n  exports: [IconComponent],\r\n})\r\nexport class IconModule {}\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  HostBinding,\r\n  HostListener,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport {\r\n  AnonymousConsent,\r\n  AnonymousConsentsConfig,\r\n  AnonymousConsentsService,\r\n  ConsentTemplate,\r\n} from '@spartacus/core';\r\nimport { combineLatest, Observable, Subscription } from 'rxjs';\r\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\r\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\r\nimport { FocusConfig } from '../../../layout/a11y/keyboard-focus/index';\r\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\r\n\r\n@Component({\r\n  selector: 'cx-anonymous-consent-dialog',\r\n  templateUrl: './anonymous-consent-dialog.component.html',\r\n})\r\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\r\n  @HostBinding('attr.role') role = 'dialog';\r\n  @HostBinding('attr.aria-modal') modal = true;\r\n\r\n  private subscriptions = new Subscription();\r\n\r\n  showLegalDescription = true;\r\n  iconTypes = ICON_TYPE;\r\n  requiredConsents: string[] = [];\r\n\r\n  loading$: Observable<boolean>;\r\n  templates$: Observable<ConsentTemplate[]>;\r\n  consents$: Observable<AnonymousConsent[]>;\r\n\r\n  focusConfig: FocusConfig = {\r\n    trap: true,\r\n    block: true,\r\n    autofocus: 'input[type=\"checkbox\"]',\r\n    focusOnEscape: true,\r\n  };\r\n\r\n  @HostListener('click', ['$event'])\r\n  handleClick(event: UIEvent): void {\r\n    // Close on click outside the dialog window\r\n    if ((event.target as any).tagName === this.el.nativeElement.tagName) {\r\n      this.close('Cross click');\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    protected config: AnonymousConsentsConfig,\r\n    protected anonymousConsentsService: AnonymousConsentsService,\r\n    protected el: ElementRef,\r\n    protected launchDialogService: LaunchDialogService\r\n  ) {\r\n    if (Boolean(this.config.anonymousConsents)) {\r\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\r\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\r\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.templates$ = this.anonymousConsentsService.getTemplates();\r\n    this.consents$ = this.anonymousConsentsService.getConsents();\r\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\r\n  }\r\n\r\n  close(reason?: any): void {\r\n    this.launchDialogService.closeDialog(reason);\r\n  }\r\n\r\n  rejectAll(): void {\r\n    this.subscriptions.add(\r\n      combineLatest([this.templates$, this.consents$])\r\n        .pipe(\r\n          take(1),\r\n          distinctUntilChanged(),\r\n          tap(([templates, consents]) =>\r\n            templates.forEach((template) => {\r\n              const consent = this.getCorrespondingConsent(template, consents);\r\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\r\n                if (this.isRequiredConsent(template)) {\r\n                  return;\r\n                }\r\n\r\n                this.anonymousConsentsService.withdrawConsent(template.id);\r\n              }\r\n            })\r\n          )\r\n        )\r\n        .subscribe()\r\n    );\r\n    this.close('rejectAll');\r\n  }\r\n\r\n  allowAll(): void {\r\n    this.subscriptions.add(\r\n      combineLatest([this.templates$, this.consents$])\r\n        .pipe(\r\n          take(1),\r\n          distinctUntilChanged(),\r\n          tap(([templates, consents]) =>\r\n            templates.forEach((template) => {\r\n              const consent = this.getCorrespondingConsent(template, consents);\r\n              if (\r\n                (consent && consent.consentState == null) ||\r\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\r\n              ) {\r\n                if (this.isRequiredConsent(template)) {\r\n                  return;\r\n                }\r\n\r\n                this.anonymousConsentsService.giveConsent(template.id);\r\n              }\r\n            })\r\n          )\r\n        )\r\n        .subscribe()\r\n    );\r\n    this.close('allowAll');\r\n  }\r\n\r\n  private isRequiredConsent(template: ConsentTemplate): boolean {\r\n    return (\r\n      Boolean(this.config.anonymousConsents) &&\r\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\r\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\r\n    );\r\n  }\r\n\r\n  onConsentChange({\r\n    given,\r\n    template,\r\n  }: {\r\n    given: boolean;\r\n    template: ConsentTemplate;\r\n  }): void {\r\n    if (given) {\r\n      this.anonymousConsentsService.giveConsent(template.id);\r\n    } else {\r\n      this.anonymousConsentsService.withdrawConsent(template.id);\r\n    }\r\n  }\r\n\r\n  getCorrespondingConsent(\r\n    template: ConsentTemplate,\r\n    consents: AnonymousConsent[] = []\r\n  ): AnonymousConsent {\r\n    for (const consent of consents) {\r\n      if (template.id === consent.templateCode) {\r\n        return consent;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","import { LayoutConfig } from '../../layout/config/layout-config';\r\nimport { DIALOG_TYPE } from '../../layout/launch-dialog/index';\r\nimport { AnonymousConsentDialogComponent } from '../../shared/components/anonymous-consents-dialog/anonymous-consent-dialog.component';\r\n\r\nexport const defaultAnonymousConsentLayoutConfig: LayoutConfig = {\r\n  launch: {\r\n    ANONYMOUS_CONSENT: {\r\n      inline: true,\r\n      component: AnonymousConsentDialogComponent,\r\n      dialogType: DIALOG_TYPE.DIALOG,\r\n    },\r\n  },\r\n};\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport { take } from 'rxjs/operators';\r\nimport { AnonymousConsentLaunchDialogService } from '../anonymous-consent-launch-dialog.service';\r\n\r\n@Component({\r\n  selector: 'cx-anonymous-consent-open-dialog',\r\n  templateUrl: './anonymous-consent-open-dialog.component.html',\r\n})\r\nexport class AnonymousConsentOpenDialogComponent {\r\n  @ViewChild('open') openElement: ElementRef;\r\n\r\n  constructor(\r\n    protected vcr: ViewContainerRef,\r\n    protected anonymousConsentLaunchDialogService: AnonymousConsentLaunchDialogService\r\n  ) {}\r\n\r\n  openDialog(): void {\r\n    const dialog = this.anonymousConsentLaunchDialogService.openDialog(\r\n      this.openElement,\r\n      this.vcr\r\n    );\r\n    if (dialog) {\r\n      dialog.pipe(take(1)).subscribe();\r\n    }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport {\r\n  CmsConfig,\r\n  DeferLoadingStrategy,\r\n  FeaturesConfigModule,\r\n  I18nModule,\r\n  provideConfig,\r\n  provideDefaultConfig,\r\n} from '@spartacus/core';\r\nimport { KeyboardFocusModule } from '../../layout/a11y/keyboard-focus/index';\r\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\r\nimport { defaultAnonymousConsentLayoutConfig } from './default-anonymous-consent-layout.config';\r\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    I18nModule,\r\n    FeaturesConfigModule,\r\n    KeyboardFocusModule,\r\n  ],\r\n  providers: [\r\n    provideConfig(defaultAnonymousConsentLayoutConfig),\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        AnonymousConsentManagementBannerComponent: {\r\n          component: AnonymousConsentManagementBannerComponent,\r\n          deferLoading: DeferLoadingStrategy.INSTANT,\r\n        },\r\n        AnonymousConsentOpenDialogComponent: {\r\n          component: AnonymousConsentOpenDialogComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [\r\n    AnonymousConsentManagementBannerComponent,\r\n    AnonymousConsentOpenDialogComponent,\r\n  ],\r\n  exports: [\r\n    AnonymousConsentManagementBannerComponent,\r\n    AnonymousConsentOpenDialogComponent,\r\n  ],\r\n  entryComponents: [\r\n    AnonymousConsentManagementBannerComponent,\r\n    AnonymousConsentOpenDialogComponent,\r\n  ],\r\n})\r\nexport class AnonymousConsentManagementBannerModule {}\r\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport {\r\n  AnonymousConsent,\r\n  ANONYMOUS_CONSENT_STATUS,\r\n  ConsentTemplate,\r\n} from '@spartacus/core';\r\n\r\n@Component({\r\n  selector: 'cx-consent-management-form',\r\n  templateUrl: './consent-management-form.component.html',\r\n})\r\nexport class ConsentManagementFormComponent implements OnInit {\r\n  consentGiven = false;\r\n\r\n  @Input()\r\n  consentTemplate: ConsentTemplate;\r\n\r\n  @Input()\r\n  requiredConsents: string[] = [];\r\n\r\n  @Input()\r\n  consent: AnonymousConsent;\r\n\r\n  @Output()\r\n  consentChanged = new EventEmitter<{\r\n    given: boolean;\r\n    template: ConsentTemplate;\r\n  }>();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    if (this.consent) {\r\n      this.consentGiven = Boolean(\r\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\r\n      );\r\n    } else {\r\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\r\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\r\n          this.consentGiven = false;\r\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\r\n          this.consentGiven = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  onConsentChange(): void {\r\n    this.consentGiven = !this.consentGiven;\r\n\r\n    this.consentChanged.emit({\r\n      given: this.consentGiven,\r\n      template: this.consentTemplate,\r\n    });\r\n  }\r\n\r\n  isRequired(templateId: string): boolean {\r\n    return this.requiredConsents.includes(templateId);\r\n  }\r\n}\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport {\r\n  AnonymousConsentsConfig,\r\n  AnonymousConsentsService,\r\n  AuthService,\r\n  ConsentTemplate,\r\n  GlobalMessageService,\r\n  GlobalMessageType,\r\n  UserConsentService,\r\n} from '@spartacus/core';\r\nimport {\r\n  BehaviorSubject,\r\n  combineLatest,\r\n  concat,\r\n  Observable,\r\n  Subscription,\r\n} from 'rxjs';\r\nimport {\r\n  distinctUntilChanged,\r\n  filter,\r\n  map,\r\n  scan,\r\n  skipWhile,\r\n  tap,\r\n  withLatestFrom,\r\n} from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'cx-consent-management',\r\n  templateUrl: './consent-management.component.html',\r\n})\r\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\r\n  private subscriptions = new Subscription();\r\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\r\n\r\n  templateList$: Observable<ConsentTemplate[]>;\r\n  loading$: Observable<boolean>;\r\n\r\n  requiredConsents: string[] = [];\r\n\r\n  constructor(\r\n    protected userConsentService: UserConsentService,\r\n    protected globalMessageService: GlobalMessageService,\r\n    protected anonymousConsentsConfig: AnonymousConsentsConfig,\r\n    protected anonymousConsentsService: AnonymousConsentsService,\r\n    protected authService: AuthService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loading$ = combineLatest([\r\n      this.userConsentService.getConsentsResultLoading(),\r\n      this.userConsentService.getGiveConsentResultLoading(),\r\n      this.userConsentService.getWithdrawConsentResultLoading(),\r\n      this.authService.isUserLoggedIn(),\r\n      this.allConsentsLoading,\r\n    ]).pipe(\r\n      map(\r\n        ([\r\n          consentLoading,\r\n          giveConsentLoading,\r\n          withdrawConsentLoading,\r\n          isUserLoggedIn,\r\n          allConsentsLoading,\r\n        ]) =>\r\n          consentLoading ||\r\n          giveConsentLoading ||\r\n          withdrawConsentLoading ||\r\n          !isUserLoggedIn ||\r\n          allConsentsLoading\r\n      )\r\n    );\r\n    this.consentListInit();\r\n    this.giveConsentInit();\r\n    this.withdrawConsentInit();\r\n  }\r\n\r\n  private consentListInit(): void {\r\n    this.templateList$ = this.userConsentService.getConsents().pipe(\r\n      withLatestFrom(\r\n        this.anonymousConsentsService.getTemplates(),\r\n        this.authService.isUserLoggedIn()\r\n      ),\r\n      filter(\r\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\r\n      ),\r\n      tap(([templateList, _anonymousTemplates]) => {\r\n        if (!this.consentsExists(templateList)) {\r\n          this.userConsentService.loadConsents();\r\n        }\r\n      }),\r\n      map(([templateList, anonymousTemplates]) => {\r\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\r\n          if (\r\n            Boolean(\r\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\r\n            )\r\n          ) {\r\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\r\n          }\r\n          if (\r\n            Boolean(\r\n              this.anonymousConsentsConfig.anonymousConsents\r\n                .consentManagementPage\r\n            )\r\n          ) {\r\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\r\n          }\r\n        }\r\n\r\n        return templateList;\r\n      })\r\n    );\r\n  }\r\n\r\n  private hideAnonymousConsents(\r\n    templateList: ConsentTemplate[],\r\n    anonymousTemplates: ConsentTemplate[] = []\r\n  ): ConsentTemplate[] {\r\n    let hideTemplateIds: string[] = [];\r\n\r\n    if (\r\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\r\n        .showAnonymousConsents\r\n    ) {\r\n      hideTemplateIds = anonymousTemplates.map((template) => template.id);\r\n      return this.userConsentService.filterConsentTemplates(\r\n        templateList,\r\n        hideTemplateIds\r\n      );\r\n    }\r\n\r\n    if (\r\n      Boolean(\r\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\r\n          .hideConsents\r\n      ) &&\r\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\r\n        .hideConsents.length > 0\r\n    ) {\r\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\r\n        .consentManagementPage.hideConsents;\r\n    }\r\n\r\n    return this.userConsentService.filterConsentTemplates(\r\n      templateList,\r\n      hideTemplateIds\r\n    );\r\n  }\r\n\r\n  private giveConsentInit(): void {\r\n    this.userConsentService.resetGiveConsentProcessState();\r\n    this.subscriptions.add(\r\n      this.userConsentService\r\n        .getGiveConsentResultSuccess()\r\n        .subscribe((success) => this.onConsentGivenSuccess(success))\r\n    );\r\n  }\r\n\r\n  private withdrawConsentInit(): void {\r\n    this.userConsentService.resetWithdrawConsentProcessState();\r\n    this.subscriptions.add(\r\n      this.userConsentService\r\n        .getWithdrawConsentResultLoading()\r\n        .pipe(\r\n          skipWhile(Boolean),\r\n          withLatestFrom(\r\n            this.userConsentService.getWithdrawConsentResultSuccess()\r\n          ),\r\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\r\n          tap((withdrawalSuccess) => {\r\n            if (withdrawalSuccess) {\r\n              this.userConsentService.loadConsents();\r\n            }\r\n          })\r\n        )\r\n        .subscribe((withdrawalSuccess) =>\r\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\r\n        )\r\n    );\r\n  }\r\n\r\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\r\n    return Boolean(templateList) && templateList.length > 0;\r\n  }\r\n\r\n  onConsentChange({\r\n    given,\r\n    template,\r\n  }: {\r\n    given: boolean;\r\n    template: ConsentTemplate;\r\n  }): void {\r\n    if (given) {\r\n      this.userConsentService.giveConsent(template.id, template.version);\r\n    } else {\r\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\r\n    }\r\n  }\r\n\r\n  private onConsentGivenSuccess(success: boolean): void {\r\n    if (success) {\r\n      this.userConsentService.resetGiveConsentProcessState();\r\n      this.globalMessageService.add(\r\n        { key: 'consentManagementForm.message.success.given' },\r\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\r\n      );\r\n    }\r\n  }\r\n\r\n  private onConsentWithdrawnSuccess(success: boolean): void {\r\n    if (success) {\r\n      this.userConsentService.resetWithdrawConsentProcessState();\r\n      this.globalMessageService.add(\r\n        { key: 'consentManagementForm.message.success.withdrawn' },\r\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\r\n      );\r\n    }\r\n  }\r\n\r\n  rejectAll(templates: ConsentTemplate[] = []): void {\r\n    const consentsToWithdraw: ConsentTemplate[] = [];\r\n    templates.forEach((template) => {\r\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\r\n        if (this.isRequiredConsent(template)) {\r\n          return;\r\n        }\r\n        consentsToWithdraw.push(template);\r\n      }\r\n    });\r\n\r\n    this.allConsentsLoading.next(true);\r\n\r\n    this.subscriptions.add(\r\n      this.setupWithdrawalStream(consentsToWithdraw)\r\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\r\n        .subscribe()\r\n    );\r\n  }\r\n\r\n  private setupWithdrawalStream(\r\n    consentsToWithdraw: ConsentTemplate[] = []\r\n  ): Observable<number> {\r\n    const loading$ = concat(\r\n      this.userConsentService.getWithdrawConsentResultLoading()\r\n    ).pipe(\r\n      distinctUntilChanged(),\r\n      filter((loading) => !loading)\r\n    );\r\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\r\n    const withdraw$ = count$.pipe(\r\n      tap((i) => {\r\n        if (i < consentsToWithdraw.length) {\r\n          this.userConsentService.withdrawConsent(\r\n            consentsToWithdraw[i].currentConsent.code\r\n          );\r\n        }\r\n      })\r\n    );\r\n    const checkTimesLoaded$ = withdraw$.pipe(\r\n      filter((timesLoaded) => timesLoaded === consentsToWithdraw.length)\r\n    );\r\n\r\n    return checkTimesLoaded$;\r\n  }\r\n\r\n  allowAll(templates: ConsentTemplate[] = []): void {\r\n    const consentsToGive: ConsentTemplate[] = [];\r\n    templates.forEach((template) => {\r\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\r\n        if (this.isRequiredConsent(template)) {\r\n          return;\r\n        }\r\n\r\n        consentsToGive.push(template);\r\n      }\r\n    });\r\n\r\n    this.allConsentsLoading.next(true);\r\n\r\n    this.subscriptions.add(\r\n      this.setupGiveStream(consentsToGive)\r\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\r\n        .subscribe()\r\n    );\r\n  }\r\n\r\n  private setupGiveStream(\r\n    consentsToGive: ConsentTemplate[] = []\r\n  ): Observable<number> {\r\n    const loading$ = concat(\r\n      this.userConsentService.getGiveConsentResultLoading()\r\n    ).pipe(\r\n      distinctUntilChanged(),\r\n      filter((loading) => !loading)\r\n    );\r\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\r\n    const giveConsent$ = count$.pipe(\r\n      tap((i) => {\r\n        if (i < consentsToGive.length) {\r\n          this.userConsentService.giveConsent(\r\n            consentsToGive[i].id,\r\n            consentsToGive[i].version\r\n          );\r\n        }\r\n      })\r\n    );\r\n    const checkTimesLoaded$ = giveConsent$.pipe(\r\n      filter((timesLoaded) => timesLoaded === consentsToGive.length)\r\n    );\r\n\r\n    return checkTimesLoaded$;\r\n  }\r\n\r\n  private isRequiredConsent(template: ConsentTemplate): boolean {\r\n    return (\r\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\r\n      Boolean(\r\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\r\n      ) &&\r\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\r\n        template.id\r\n      )\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.unsubscribe();\r\n    this.allConsentsLoading.unsubscribe();\r\n\r\n    this.userConsentService.resetGiveConsentProcessState();\r\n    this.userConsentService.resetWithdrawConsentProcessState();\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  AuthGuard,\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n} from '@spartacus/core';\r\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\r\nimport { IconModule } from '../../misc/icon/icon.module';\r\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\r\nimport { ConsentManagementComponent } from './components/consent-management.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    SpinnerModule,\r\n    I18nModule,\r\n    IconModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        ConsentManagementComponent: {\r\n          component: ConsentManagementComponent,\r\n          guards: [AuthGuard],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\r\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\r\n  entryComponents: [ConsentManagementComponent],\r\n})\r\nexport class ConsentManagementModule {}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { I18nModule } from '@spartacus/core';\r\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\r\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\r\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/index';\r\nimport { SpinnerModule } from '../spinner/spinner.module';\r\nimport { AnonymousConsentDialogComponent } from './anonymous-consent-dialog.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    I18nModule,\r\n    IconModule,\r\n    SpinnerModule,\r\n    ConsentManagementModule,\r\n    KeyboardFocusModule,\r\n  ],\r\n  declarations: [AnonymousConsentDialogComponent],\r\n  entryComponents: [AnonymousConsentDialogComponent],\r\n  exports: [AnonymousConsentDialogComponent],\r\n})\r\nexport class AnonymousConsentsDialogModule {}\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\r\n\r\nexport interface CardAction {\r\n  event: string;\r\n  name: string;\r\n}\r\n\r\nexport interface CardLinkAction {\r\n  link: string;\r\n  name: string;\r\n}\r\n\r\nexport interface Card {\r\n  header?: string;\r\n  title?: string;\r\n  textBold?: string;\r\n  text?: Array<string>;\r\n  img?: string;\r\n  actions?: Array<CardAction | CardLinkAction>;\r\n  deleteMsg?: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'cx-card',\r\n  templateUrl: './card.component.html',\r\n})\r\nexport class CardComponent implements OnInit {\r\n  iconTypes = ICON_TYPE;\r\n\r\n  @Output()\r\n  deleteCard: EventEmitter<number> = new EventEmitter();\r\n  @Output()\r\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\r\n  @Output()\r\n  sendCard: EventEmitter<number> = new EventEmitter();\r\n  @Output()\r\n  editCard: EventEmitter<number> = new EventEmitter();\r\n  @Output()\r\n  cancelCard: EventEmitter<number> = new EventEmitter();\r\n\r\n  @Input()\r\n  border = false;\r\n\r\n  @Input()\r\n  editMode = false;\r\n\r\n  @Input()\r\n  isDefault = false;\r\n\r\n  @Input()\r\n  content: Card;\r\n  @Input()\r\n  fitToContainer = false;\r\n\r\n  // ACTIONS\r\n\r\n  setEditMode(): void {\r\n    this.editMode = true;\r\n  }\r\n\r\n  cancelEdit(): void {\r\n    this.editMode = false;\r\n    this.cancelCard.emit(5);\r\n  }\r\n\r\n  delete(): void {\r\n    this.deleteCard.emit(1);\r\n  }\r\n\r\n  setDefault(): void {\r\n    this.isDefault = true;\r\n    this.setDefaultCard.emit(2);\r\n  }\r\n\r\n  send(): void {\r\n    this.sendCard.emit(3);\r\n  }\r\n\r\n  edit(): void {\r\n    this.editCard.emit(4);\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { I18nModule } from '@spartacus/core';\r\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\r\nimport { CardComponent } from './card.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, I18nModule, IconModule],\r\n  declarations: [CardComponent],\r\n  exports: [CardComponent],\r\n})\r\nexport class CardModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { WindowRef } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CarouselService {\r\n  constructor(private winRef: WindowRef) {}\r\n\r\n  /**\r\n   * The number of items per slide is calculated by the help of\r\n   * the item width and the available width of the host element.\r\n   * This appoach makes it possible to place the carousel in different\r\n   * layouts. Instead of using the page breakpoints, the host size is\r\n   * taken into account.\r\n   *\r\n   * Since there's no element resize API available, we use the\r\n   * window `resize` event, so that we can adjust the number of items\r\n   * whenever the window got resized.\r\n   */\r\n  getItemsPerSlide(\r\n    nativeElement: HTMLElement,\r\n    itemWidth: string\r\n  ): Observable<number> {\r\n    return this.winRef.resize$.pipe(\r\n      map(() => (nativeElement as HTMLElement).clientWidth),\r\n      map((totalWidth) => this.calculateItems(totalWidth, itemWidth))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Calculates the number of items per given hostSize.  calculated based on the given\r\n   * intended size in pixels or percentages. The\r\n   *\r\n   * @param availableWidth The available width in pixels for the carousel items.\r\n   * @param itemWidth The width per carousel item, in px or percentage.\r\n   */\r\n  private calculateItems(availableWidth: number, itemWidth: string) {\r\n    let calculatedItems = 0;\r\n    if (itemWidth.endsWith('px')) {\r\n      const num = itemWidth.substring(0, itemWidth.length - 2);\r\n      calculatedItems = availableWidth / <number>(<any>num);\r\n    }\r\n\r\n    if (itemWidth.endsWith('%')) {\r\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\r\n      calculatedItems =\r\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\r\n    }\r\n\r\n    return Math.floor(calculatedItems) || 1;\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  isDevMode,\r\n  OnInit,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\r\nimport { CarouselService } from './carousel.service';\r\n\r\n/**\r\n * Generic carousel component that can be used to render any carousel items,\r\n * such as products, images, banners, or any component. Carousel items are\r\n * rendered in so-called carousel slides, and the previous/next buttons as well as\r\n * the indicator-buttons can used to navigate the slides.\r\n *\r\n * The component uses an array of Observables (`items$`) as an input, to allow\r\n * for lazy loading of items.\r\n *\r\n * The number of items per slide is calculated with the `itemWidth`, which can given\r\n * in pixels or percentage.\r\n *\r\n * To allow for flexible rendering of items, the rendering is delegated to the\r\n * given `template`. This allows for maximum flexibility.\r\n */\r\n@Component({\r\n  selector: 'cx-carousel',\r\n  templateUrl: './carousel.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CarouselComponent implements OnInit {\r\n  /**\r\n   * The title is rendered as the carousel heading.\r\n   */\r\n  @Input() title: string;\r\n\r\n  /**\r\n   * The items$ represent the carousel items. The items$ are\r\n   * observables so that the items can be loaded on demand.\r\n   */\r\n  items: Observable<any>[];\r\n  @Input('items')\r\n  set setItems(inputItems: Observable<any>[]) {\r\n    this.items = inputItems;\r\n    //Reset slider when changing products\r\n    this.activeSlide = 0;\r\n  }\r\n\r\n  /**\r\n   * The template is rendered for each item, so that the actual\r\n   * view can be given by the compoent that uses the `CarouselComponent`.\r\n   */\r\n  @Input() template: TemplateRef<any>;\r\n\r\n  /**\r\n   * Specifies the minimum size of the carousel item, either in px or %.\r\n   * This value is used for the calculation of numbers per carousel, so that\r\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\r\n   * and the host element `clientWidth`, so that the carousel is reusable in\r\n   * different layouts (for example in a 50% grid).\r\n   */\r\n  @Input() itemWidth = '300px';\r\n\r\n  /**\r\n   * Indicates whether the visual indicators are used.\r\n   */\r\n  @Input() hideIndicators = false;\r\n\r\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\r\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\r\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\r\n\r\n  activeSlide: number;\r\n  size$: Observable<number>;\r\n\r\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\r\n\r\n  ngOnInit() {\r\n    if (!this.template && isDevMode()) {\r\n      console.error(\r\n        'No template reference provided to render the carousel items for the `cx-carousel`'\r\n      );\r\n      return;\r\n    }\r\n    this.size$ = this.service\r\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\r\n      .pipe(tap(() => (this.activeSlide = 0)));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { WindowRef } from '@spartacus/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { distinctUntilChanged, map } from 'rxjs/operators';\r\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\r\n\r\nconst DEFAULT_BREAKPOINTS = {\r\n  [BREAKPOINT.xs]: 576,\r\n  [BREAKPOINT.sm]: 768,\r\n  [BREAKPOINT.md]: 992,\r\n  [BREAKPOINT.lg]: 1200,\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BreakpointService {\r\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\r\n\r\n  get breakpoint$(): Observable<BREAKPOINT> {\r\n    if (!this.window) {\r\n      return of(BREAKPOINT.xs);\r\n    }\r\n    return this.winRef.resize$.pipe(\r\n      map((event) => this.getBreakpoint((<Window>event.target).innerWidth)),\r\n      distinctUntilChanged()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the _maximum_ size for the breakpint, given by the `LayoutConfig.breakpoints`\r\n   * configuration. If no configuration is available for the given breakpoint, the\r\n   * method will return the default values:\r\n   * - xs: 567\r\n   * - sm: 768\r\n   * - md: 992\r\n   * - lg: 1200\r\n   */\r\n  getSize(breakpoint: BREAKPOINT): number {\r\n    return this.config.breakpoints?.hasOwnProperty(breakpoint)\r\n      ? this.config.breakpoints[breakpoint]\r\n      : DEFAULT_BREAKPOINTS[breakpoint];\r\n  }\r\n\r\n  /**\r\n   * Returns all available breakpoints for the system.\r\n   */\r\n  get breakpoints(): BREAKPOINT[] {\r\n    return [\r\n      BREAKPOINT.xs,\r\n      BREAKPOINT.sm,\r\n      BREAKPOINT.md,\r\n      BREAKPOINT.lg,\r\n      BREAKPOINT.xl,\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Indicates whether the current screen size is smaller than the maximum size of the\r\n   * given breakpoint.\r\n   *\r\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\r\n   * window innerWidth is smaller than the configured size of `BREAKPOINT.md`.\r\n   */\r\n  isDown(breakpoint: BREAKPOINT): Observable<boolean> {\r\n    return this.breakpoint$.pipe(\r\n      map((br) =>\r\n        this.breakpoints\r\n          .slice(0, this.breakpoints.indexOf(breakpoint) + 1)\r\n          .includes(br)\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Indicates whether the current screen size is larger than the minimum size of the\r\n   * given breakpoint.\r\n   *\r\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\r\n   * window innerWidth is larger than the configured size of `BREAKPOINT.sm`.\r\n   */\r\n  isUp(breakpoint: BREAKPOINT): Observable<boolean> {\r\n    return this.breakpoint$.pipe(\r\n      map((br) =>\r\n        this.breakpoints\r\n          .slice(this.breakpoints.indexOf(breakpoint))\r\n          .includes(br)\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Indicates whether the current screen size fits to the given breakpoint\r\n   */\r\n  isEqual(breakpoint: BREAKPOINT): Observable<boolean> {\r\n    return this.breakpoint$.pipe(map((br) => br === breakpoint));\r\n  }\r\n\r\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\r\n    const breakpoint = this.getClosest(windowWidth);\r\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\r\n  }\r\n\r\n  protected getClosest(windowWidth?: number): BREAKPOINT {\r\n    if (!windowWidth) {\r\n      windowWidth = this.window.innerWidth;\r\n    }\r\n\r\n    return windowWidth > this.getSize(BREAKPOINT.lg)\r\n      ? BREAKPOINT.xl\r\n      : this.breakpoints.find((br) => windowWidth <= this.getSize(br));\r\n  }\r\n\r\n  get window(): Window {\r\n    return this.winRef.nativeWindow;\r\n  }\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { Config, Image, OccConfig } from '@spartacus/core';\r\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\r\nimport { StorefrontConfig } from '../../../storefront-config';\r\nimport { MediaConfig } from './media.config';\r\nimport { Media, MediaContainer, MediaFormatSize } from './media.model';\r\n\r\n/**\r\n * Service which generates media URLs. It leverage the MediaContainer and MediaFormats so\r\n * that URLs and sizes are generated for the same media. This helps to improve performance\r\n * across difference devices and layouts.\r\n *\r\n * Media formats are optional, but highly recommended. The format will help the browser to\r\n * identify the right media for the right experience.\r\n *\r\n * The MediaService will generate absolute URLs in case relative URLs are provided for the Media.\r\n * The baseUrl is read from the `occConfig.backend.media.baseUrl` or\r\n * `occConfig.backend.occ.baseUrl`.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MediaService {\r\n  /**\r\n   * The media formats sorted by size. The media format representing the smallest\r\n   * size is sorted on top.\r\n   */\r\n  private _sortedFormats: { code: string; size: MediaFormatSize }[];\r\n  private _reversedFormats: { code: string; size: MediaFormatSize }[];\r\n\r\n  constructor(\r\n    @Inject(Config) protected config: StorefrontConfig,\r\n    /**\r\n     * The BreakpointService is no longer used in version 2.0 as the different size formats are\r\n     * driven by configuration only. There's however a change that this service will play a role\r\n     * in the near future, which is why we keep the constructor as-is.\r\n     */\r\n    protected breakpointService: BreakpointService\r\n  ) {}\r\n\r\n  /**\r\n   * Returns a `Media` object with the main media (`src`) and various media (`src`)\r\n   * for specific formats.\r\n   */\r\n  getMedia(\r\n    mediaContainer: MediaContainer | Image,\r\n    format?: string,\r\n    alt?: string\r\n  ): Media {\r\n    if (!mediaContainer) {\r\n      return;\r\n    }\r\n\r\n    const mainMedia: Image = mediaContainer.url\r\n      ? mediaContainer\r\n      : this.resolveMedia(mediaContainer as MediaContainer, format);\r\n\r\n    return {\r\n      src: this.resolveAbsoluteUrl(mainMedia?.url),\r\n      alt: alt || mainMedia?.altText,\r\n      srcset: this.resolveSrcSet(mediaContainer),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Creates the media formats in a logical sorted order. The map contains the\r\n   * format key and the format size information. We do this only once for performance\r\n   * benefits.\r\n   */\r\n  protected get sortedFormats(): { code: string; size: MediaFormatSize }[] {\r\n    if (!this._sortedFormats) {\r\n      this._sortedFormats = Object.keys(\r\n        (this.config as MediaConfig).mediaFormats\r\n      )\r\n        .map((key) => ({\r\n          code: key,\r\n          size: (this.config as MediaConfig).mediaFormats[key],\r\n        }))\r\n        .sort((a, b) => (a.size.width > b.size.width ? 1 : -1));\r\n    }\r\n    return this._sortedFormats;\r\n  }\r\n\r\n  /**\r\n   * Creates the media formats in a reversed sorted order.\r\n   */\r\n  protected get reversedFormats(): { code: string; size: MediaFormatSize }[] {\r\n    if (!this._reversedFormats) {\r\n      this._reversedFormats = this.sortedFormats.slice().reverse();\r\n    }\r\n    return this._reversedFormats;\r\n  }\r\n\r\n  /**\r\n   * Resolves the right media for the given format. The fo\r\n   */\r\n  protected resolveMedia(media: MediaContainer, format?: string): Image {\r\n    return media[this.resolveFormat(media, format)];\r\n  }\r\n\r\n  /**\r\n   * Validates the format against the given mediaContainer. If there is no format available,\r\n   * or if the mediaContainer doesn't contain a media for the given media, the most optimal\r\n   * format is resolved. If even that is not possible, the first format is returned.\r\n   */\r\n  protected resolveFormat(\r\n    mediaContainer: MediaContainer,\r\n    format?: string\r\n  ): string {\r\n    if (format && mediaContainer[format]) {\r\n      return format;\r\n    }\r\n    return (\r\n      this.resolveBestFormat(mediaContainer) || Object.keys(mediaContainer)[0]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the media format code with the best size.\r\n   */\r\n  protected resolveBestFormat(media: MediaContainer | Image): string {\r\n    return this.reversedFormats.find((format) =>\r\n      media.hasOwnProperty(format.code)\r\n    )?.code;\r\n  }\r\n\r\n  /**\r\n   * Returns a set of media for the available media formats. Additionally, the congiured media\r\n   * format width is added to the srcset, so that browsers can select the appropriate media.\r\n   */\r\n  protected resolveSrcSet(media: MediaContainer | Image): string {\r\n    if (!media) {\r\n      return undefined;\r\n    }\r\n\r\n    const srcset = this.sortedFormats.reduce((set, format) => {\r\n      if (!!media[format.code]) {\r\n        if (set) {\r\n          set += ', ';\r\n        }\r\n        set += `${this.resolveAbsoluteUrl(media[format.code].url)} ${\r\n          format.size.width\r\n        }w`;\r\n      }\r\n      return set;\r\n    }, '');\r\n\r\n    return srcset === '' ? undefined : srcset;\r\n  }\r\n\r\n  /**\r\n   * Resolves the absolute URL for the given url. In most cases, this URL represents\r\n   * the relative URL on the backend. In that case, we prefix the url with the baseUrl.\r\n   */\r\n  protected resolveAbsoluteUrl(url: string): string {\r\n    if (!url) {\r\n      return null;\r\n    }\r\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\r\n  }\r\n\r\n  /**\r\n   * The base URL is either driven by a specific `backend.media.baseUrl`, or by the\r\n   * `backend.occ.baseUrl`.\r\n   *\r\n   * The `backend.media.baseUrl` can be used to load media from a different location.\r\n   *\r\n   * In Commerce Cloud, a differnt location could mean a different \"aspect\".\r\n   */\r\n  protected getBaseUrl(): string {\r\n    return (\r\n      (this.config as OccConfig).backend.media.baseUrl ||\r\n      (this.config as OccConfig).backend.occ.baseUrl ||\r\n      ''\r\n    );\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  OnChanges,\r\n  Output,\r\n} from '@angular/core';\r\nimport { Media, MediaContainer } from './media.model';\r\nimport { MediaService } from './media.service';\r\n\r\n@Component({\r\n  selector: 'cx-media',\r\n  templateUrl: './media.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MediaComponent implements OnChanges {\r\n  /**\r\n   * The media container can hold multiple media items, so that\r\n   * a specific media (by format) can be used or multiple media\r\n   * can be provided in a `srcset` so the browser will figure out\r\n   * the best media for the device.\r\n   */\r\n  @Input() container: MediaContainer;\r\n\r\n  /**\r\n   * if a media format is given, a media for the given format will be rendered\r\n   */\r\n  @Input() format: string;\r\n\r\n  /**\r\n   * A specific alt text for an image, which overrules the alt text\r\n   * from the container data.\r\n   */\r\n  @Input() alt: string;\r\n\r\n  /**\r\n   * Once the media is loaded, we emit an event.\r\n   */\r\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\r\n\r\n  /**\r\n   * The media contains the info for the UI to create the image. This media\r\n   * object might contain more info once other media types (i.e. video) is supported.\r\n   */\r\n  media: Media;\r\n\r\n  /**\r\n   * The `cx-media` component has an `is-initialized` class as long as the\r\n   * media is being initialized.\r\n   */\r\n  @HostBinding('class.is-initialized') isInitialized = false;\r\n\r\n  /**\r\n   * The `cx-media` component has a `is-loading` class as long as the\r\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\r\n   * is added.\r\n   */\r\n  @HostBinding('class.is-loading') isLoading = true;\r\n\r\n  /**\r\n   * When there's no media provided for the content, or in case an error\r\n   * happened during loading, we add the `is-missing` class. Visual effects\r\n   * can be controlled by CSS.\r\n   */\r\n  @HostBinding('class.is-missing') isMissing = false;\r\n\r\n  constructor(protected mediaService: MediaService) {}\r\n\r\n  ngOnChanges(): void {\r\n    this.create();\r\n  }\r\n\r\n  /**\r\n   * Creates the `Media` object\r\n   */\r\n  protected create(): void {\r\n    this.media = this.mediaService.getMedia(\r\n      this.container,\r\n      this.format,\r\n      this.alt\r\n    );\r\n    if (!this.media?.src) {\r\n      this.handleMissing();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This handler is called from the UI when the image is loaded.\r\n   */\r\n  loadHandler(): void {\r\n    this.isLoading = false;\r\n    this.isInitialized = true;\r\n    this.isMissing = false;\r\n    this.loaded.emit(true);\r\n  }\r\n\r\n  /**\r\n   * Whenever an error happens during load, we mark the component\r\n   * with css classes to have a missing media.\r\n   */\r\n  errorHandler(): void {\r\n    this.handleMissing();\r\n  }\r\n\r\n  protected handleMissing() {\r\n    this.isLoading = false;\r\n    this.isInitialized = true;\r\n    this.isMissing = true;\r\n    this.loaded.emit(false);\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { MediaComponent } from './media.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [MediaComponent],\r\n  exports: [MediaComponent],\r\n})\r\nexport class MediaModule {\r\n  static forRoot(): ModuleWithProviders<MediaModule> {\r\n    return {\r\n      ngModule: MediaModule,\r\n    };\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  HostBinding,\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { startWith, map } from 'rxjs/operators';\r\n\r\n/**\r\n * This component renders form errors.\r\n */\r\n@Component({\r\n  selector: 'cx-form-errors',\r\n  templateUrl: './form-errors.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FormErrorsComponent {\r\n  _control: FormControl;\r\n  errors$: Observable<string[]>;\r\n\r\n  @Input()\r\n  set control(control: FormControl) {\r\n    this._control = control;\r\n\r\n    this.errors$ = control?.statusChanges.pipe(\r\n      startWith({}),\r\n      map(() => control.errors || {}),\r\n      map((errors) =>\r\n        Object.entries(errors)\r\n          .filter((error) => error[1])\r\n          .map((error) => error[0])\r\n      )\r\n    );\r\n  }\r\n\r\n  get control(): FormControl {\r\n    return this._control;\r\n  }\r\n\r\n  @HostBinding('class.control-invalid') get invalid() {\r\n    return this.control.invalid;\r\n  }\r\n  @HostBinding('class.control-dirty') get dirty() {\r\n    return this.control.dirty;\r\n  }\r\n  @HostBinding('class.control-touched') get touched() {\r\n    return this.control.touched;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormErrorsComponent } from './form-errors.component';\r\nimport { I18nModule } from '@spartacus/core';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, I18nModule],\r\n  declarations: [FormErrorsComponent],\r\n  exports: [FormErrorsComponent],\r\n})\r\nexport class FormErrorsModule {}\r\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { Params, Router } from '@angular/router';\r\n\r\n// private\r\ninterface RouteParts {\r\n  /** Path in the Angular-like array format */\r\n  path?: string[];\r\n\r\n  /** Query params */\r\n  queryParams?: Params;\r\n\r\n  /** Hash fragment */\r\n  fragment?: string;\r\n}\r\n\r\n/**\r\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\r\n */\r\n@Component({\r\n  selector: 'cx-generic-link',\r\n  templateUrl: './generic-link.component.html',\r\n})\r\nexport class GenericLinkComponent implements OnChanges {\r\n  constructor(protected router: Router) {}\r\n\r\n  /**\r\n   * Pattern matching string starting with `http://` or `https://`.\r\n   */\r\n  private readonly PROTOCOL_REGEX: RegExp = /^https?:\\/\\//i;\r\n\r\n  /**\r\n   * Used to split url into 2 parts:\r\n   * 1. the path\r\n   * 2. query params + hash fragment\r\n   */\r\n  private readonly URL_SPLIT = /(^[^#?]*)(.*)/;\r\n\r\n  /**\r\n   * Parsed parts of the @Input `url`, when it's a local URL.\r\n   * It should not be used when the `url` is external.\r\n   * @see `url`\r\n   */\r\n  private routeParts: RouteParts = {};\r\n\r\n  @Input() url: string | any[];\r\n  @Input() target: string;\r\n  @Input() class: string;\r\n  @Input() id: string;\r\n  @Input() style: string;\r\n  @Input() title: string;\r\n\r\n  /**\r\n   * Returns true when the @Input `url` is a string starting with `http://` or `https://`.\r\n   */\r\n  isExternalUrl(): boolean {\r\n    return typeof this.url === 'string' && this.PROTOCOL_REGEX.test(this.url);\r\n  }\r\n\r\n  get rel() {\r\n    return this.target === '_blank' ? 'noopener' : null;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes['url']) {\r\n      this.setUrlParts(changes['url'].currentValue);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The part with the path of the local url.\r\n   */\r\n  get routerUrl(): any[] {\r\n    return this.routeParts.path;\r\n  }\r\n\r\n  /**\r\n   * The part with the query params of the local url.\r\n   */\r\n  get queryParams(): Params {\r\n    return this.routeParts.queryParams;\r\n  }\r\n\r\n  /**\r\n   * The part with the hash fragment of the local url.\r\n   */\r\n  get fragment(): string {\r\n    return this.routeParts.fragment;\r\n  }\r\n\r\n  /**\r\n   * Parses the given url and sets the property `urlParts` accordingly.\r\n   */\r\n  private setUrlParts(url: string | any[]) {\r\n    if (typeof url === 'string') {\r\n      url = this.getAbsoluteUrl(url); // string links in CMS sometimes don't have the leading slash, so fix it here\r\n      this.routeParts = this.splitUrl(url as string);\r\n    } else {\r\n      this.routeParts = { path: url };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses the given string into 3 parts:\r\n   * - string path (wrapped in an array to be compatible with Angular syntax for the `routerLink`)\r\n   * - query params (as an object)\r\n   * - hash fragment (string)\r\n   */\r\n  private splitUrl(url: string = ''): RouteParts {\r\n    const { queryParams, fragment } = this.router.parseUrl(url);\r\n    const [, path] = url.match(this.URL_SPLIT);\r\n\r\n    // wrap path in an array, to have the Angular-like path format\r\n    return { path: [path], queryParams, fragment };\r\n  }\r\n\r\n  /**\r\n   * Prepends a leading slash to the given URL string, in case it doesn't have it.\r\n   */\r\n  private getAbsoluteUrl(url: string): string {\r\n    return url.startsWith('/') ? url : '/' + url;\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\r\n  Component,\r\n  ElementRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { startWith } from 'rxjs/operators';\r\n\r\n/**\r\n * Provides a UI to manage the count of the quantity, typically by using\r\n * increase and decrease functionality. The item counter expects an input `FormControl`\r\n * so that the state of the control can be managed outside of this component.\r\n */\r\n@Component({\r\n  selector: 'cx-item-counter',\r\n  templateUrl: './item-counter.component.html',\r\n  // do not use OnPush change detection strategy as we would not\r\n  // get updates of other form control state (disabled). We want to have a\r\n  // disabled state in order to ensure that the control cannot be used while\r\n  // the cart is updated.\r\n})\r\nexport class ItemCounterComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Holds the value of the counter, the state of the `FormControl`\r\n   * can be managed outside of the item counter.\r\n   */\r\n  @Input() control: FormControl;\r\n\r\n  /**\r\n   * This can be used in case an item has a minmum order quantity.\r\n   * @default 1\r\n   */\r\n  @Input() min = 1;\r\n\r\n  /**\r\n   * This can be used in case an item has a maximum order quantity.\r\n   */\r\n  @Input() max: number;\r\n\r\n  /**\r\n   * The step is used to increment the count. It is supposed to be a\r\n   * positive integer or float.\r\n   * @default 1\r\n   */\r\n  @Input() step = 1;\r\n\r\n  /**\r\n   * Indicates that the input can be manually set to zero,\r\n   * despite the fact that the input controls will be limited to\r\n   * the minimum. The zero value can be used to remove an item.\r\n   */\r\n  @Input() allowZero = false;\r\n\r\n  /**\r\n   * In readonly mode the item counter will only be shown as a label,\r\n   * the form controls are not rendered.\r\n   * Please not that readonly is different from the `disabled` form state.\r\n   * @default false\r\n   */\r\n  @HostBinding('class.readonly') @Input() readonly = false;\r\n\r\n  @ViewChild('qty') private input: ElementRef<HTMLInputElement>;\r\n\r\n  /**\r\n   * Subscription responsible for auto-correcting control's value when it's invalid.\r\n   */\r\n  private sub: Subscription;\r\n\r\n  @HostListener('click') handleClick() {\r\n    this.input.nativeElement.focus();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.sub = this.control.valueChanges\r\n      .pipe(startWith(this.control.value))\r\n      .subscribe((value) =>\r\n        this.control.setValue(this.getValidCount(value), { emitEvent: false })\r\n      );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.sub) {\r\n      this.sub.unsubscribe();\r\n    }\r\n  }\r\n\r\n  increment() {\r\n    // it's too early to use the `stepUp` and `stepDown` API...\r\n    // let's wait for FF: https://caniuse.com/#search=stepUp\r\n    this.control.setValue(this.control.value + this.step);\r\n    this.control.markAsDirty();\r\n  }\r\n\r\n  decrement() {\r\n    this.control.setValue(this.control.value - this.step);\r\n    this.control.markAsDirty();\r\n  }\r\n\r\n  /**\r\n   * Validate that the given value is in between\r\n   * the `min` and `max` value. If the value is out\r\n   * of  the min/max range, it will be altered.\r\n   * If `allowZero` is set to true, the 0 value is ignored.\r\n   *\r\n   */\r\n  private getValidCount(value: number) {\r\n    if (value < this.min && !(value === 0 && this.allowZero)) {\r\n      value = this.min;\r\n    }\r\n    if (this.max && value > this.max) {\r\n      value = this.max;\r\n    }\r\n    return value;\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { ItemCounterComponent } from './item-counter.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ReactiveFormsModule],\r\n  declarations: [ItemCounterComponent],\r\n  exports: [ItemCounterComponent],\r\n})\r\nexport class ItemCounterModule {}\r\n","import { PaginationConfig } from './pagination.config';\r\n\r\nexport const defaultPaginationConfig: PaginationConfig = {\r\n  pagination: {\r\n    addStart: true,\r\n    addEnd: true,\r\n  },\r\n};\r\n","import { PaginationOptions } from '../pagination.model';\r\nimport { Injectable } from '@angular/core';\r\nimport { Config } from '@spartacus/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class PaginationConfig {\r\n  pagination?: PaginationOptions;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { PaginationConfig } from './config/pagination.config';\r\nimport {\r\n  PaginationItem,\r\n  PaginationItemType,\r\n  PaginationNavigationPosition,\r\n  PaginationOptions,\r\n} from './pagination.model';\r\n\r\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\r\n  rangeCount: 3,\r\n  dotsLabel: '...',\r\n  startLabel: '«',\r\n  previousLabel: '‹',\r\n  nextLabel: '›',\r\n  endLabel: '»',\r\n};\r\n\r\n/**\r\n * Builds a pagination structures based on a pageCount and current page number.\r\n * There are various {@link PaginationConfig} options which can be used to configure\r\n * the behaviour of the build. Alternatively, CSS can be used to further customise\r\n * the pagination.\r\n *\r\n * Examples:\r\n * The full blown pagination items contain the follow elements:\r\n *\r\n * `« ‹ 1 ... 4 (5) 6 ... 9 › »`\r\n *\r\n * This includes pagination items to the following pages:\r\n * - start page\r\n * - previous page\r\n * - first page\r\n * - page range\r\n * - last page\r\n * - next page\r\n * - end page\r\n *\r\n * All of those links are configurable, including the size of the page range.\r\n * The current page will always be centered in the page range to provide direct access\r\n * to the previous and next page.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PaginationBuilder {\r\n  constructor(protected paginationConfig: PaginationConfig) {}\r\n\r\n  /**\r\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\r\n   * to build out the full pagination. There are various {@link PaginationConfig} options\r\n   * which can be used to configure the behaviour of the build. Alternatively, CSS\r\n   * can be used to further specialize visibility of the pagination.\r\n   *\r\n   * @param pageCount The total number of pages\r\n   * @param current The current page number, 0-index based\r\n   * @returns An array of `PaginationItem`\r\n   */\r\n  paginate(pageCount: number, current: number): PaginationItem[] {\r\n    const pages: PaginationItem[] = [];\r\n    if (pageCount < 2) {\r\n      return pages;\r\n    }\r\n    this.addPages(pages, pageCount, current);\r\n    this.addDots(pages, pageCount);\r\n    this.addFirstLast(pages, pageCount);\r\n    this.addNavigation(pages, pageCount, current);\r\n\r\n    return pages;\r\n  }\r\n\r\n  /**\r\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\r\n   * The current page is always centered to provide direct access to the previous and next page.\r\n   *\r\n   * @param pages The list of page items that is used to amend\r\n   * @param pageCount The total number of pages\r\n   * @param current The current page number, 0-index based\r\n   */\r\n  protected addPages(\r\n    pages: PaginationItem[],\r\n    pageCount: number,\r\n    current: number\r\n  ): void {\r\n    const start = this.getStartOfRange(pageCount, current);\r\n    const max = Math.min(this.config.rangeCount, pageCount);\r\n\r\n    Array.from(Array(max)).forEach((_, i) => {\r\n      pages.push({\r\n        number: i + start,\r\n        label: String(i + start + 1),\r\n        type: PaginationItemType.PAGE,\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds dots before and after the given pages, if configured (defaults to true).\r\n   * If the dots only represent a single page, the page number is added instead of\r\n   * the dots, unless the configuration requires dots always.\r\n   *\r\n   * @param pages The list of page items that is used to amend\r\n   * @param pageCount The total number of pages\r\n   */\r\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\r\n    if (!this.config.addDots) {\r\n      return;\r\n    }\r\n\r\n    const addFirstGap = () => {\r\n      const firstItemNumber = pages[0].number;\r\n      const gapNumber = this.config.addFirst ? 1 : 0;\r\n      if (firstItemNumber > gapNumber) {\r\n        const isGap =\r\n          !this.config.substituteDotsForSingularPage ||\r\n          firstItemNumber !== gapNumber + 1;\r\n        const isSubstitued =\r\n          this.config.addFirst &&\r\n          this.config.substituteDotsForSingularPage &&\r\n          gapNumber === 0;\r\n        const type = isGap\r\n          ? PaginationItemType.GAP\r\n          : isSubstitued\r\n          ? PaginationItemType.FIRST\r\n          : PaginationItemType.PAGE;\r\n        return [\r\n          Object.assign(\r\n            {\r\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\r\n              type,\r\n            },\r\n            isGap ? null : { number: gapNumber }\r\n          ),\r\n        ];\r\n      } else return [];\r\n    };\r\n\r\n    const addLastGap = () => {\r\n      const nextPageNumber = pages[pages.length - 1].number + 1;\r\n      const last = pageCount - (this.config.addLast ? 2 : 1);\r\n      if (nextPageNumber <= last) {\r\n        const isSubstitued =\r\n          this.config.addLast &&\r\n          this.config.substituteDotsForSingularPage &&\r\n          nextPageNumber === last;\r\n        const isGap =\r\n          nextPageNumber <\r\n          pageCount -\r\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\r\n            (this.config.addLast ? 1 : 0);\r\n\r\n        const type = isGap\r\n          ? PaginationItemType.GAP\r\n          : isSubstitued\r\n          ? PaginationItemType.LAST\r\n          : PaginationItemType.PAGE;\r\n        return [\r\n          Object.assign(\r\n            {\r\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\r\n              type,\r\n            },\r\n            isGap ? null : { number: nextPageNumber }\r\n          ),\r\n        ];\r\n      } else return [];\r\n    };\r\n\r\n    pages.unshift(...addFirstGap());\r\n    pages.push(...addLastGap());\r\n  }\r\n\r\n  /**\r\n   * Add links to the first and last page, if configured to do so.\r\n   *\r\n   * @param pages The list of page items that is used to amend\r\n   * @param pageCount The total number of pages\r\n   *\r\n   */\r\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\r\n    if (this.config.addFirst && pages[0].number !== 0) {\r\n      pages.unshift({\r\n        number: 0,\r\n        label: '1',\r\n        type: PaginationItemType.FIRST,\r\n      });\r\n    }\r\n    if (\r\n      this.config.addLast &&\r\n      pages[pages.length - 1].number !== pageCount - 1\r\n    ) {\r\n      pages.push({\r\n        number: pageCount - 1,\r\n        label: String(pageCount),\r\n        type: PaginationItemType.LAST,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add links to the start, previous, next and last page, if configured to do so.\r\n   * The order of the links can be configured by using the {@link PaginationConfig},\r\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\r\n   * The `PaginationNavigationPosition` allows for 3 flavours:\r\n   *\r\n   * - by default the pagination starts with start and previous and ends with the next and end links\r\n   * - BEFORE – all navigation links are added in the front of the pagination list\r\n   * - AFTER – all navigation links are pushed to the end of the pagination list\r\n   *\r\n   * @param pages The list of page items that is used to amend\r\n   * @param pageCount The total number of pages\r\n   * @param current The current page number, 0-index based\r\n   *\r\n   */\r\n  protected addNavigation(\r\n    pages: PaginationItem[],\r\n    pageCount: number,\r\n    current: number\r\n  ): void {\r\n    const before = this.getBeforeLinks(current);\r\n    const after = this.getAfter(pageCount, current);\r\n    const pos = this.config.navigationPosition;\r\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\r\n      pages.unshift(...before);\r\n      pages.push(...after);\r\n    } else {\r\n      if (pos === PaginationNavigationPosition.BEFORE) {\r\n        pages.unshift(...before, ...after);\r\n      }\r\n      if (pos === PaginationNavigationPosition.AFTER) {\r\n        pages.push(...before, ...after);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the start and previous links, if applicable.\r\n   */\r\n  private getBeforeLinks(current: number): PaginationItem[] {\r\n    const list = [];\r\n\r\n    if (this.config.addStart) {\r\n      const start = () => {\r\n        return Object.assign(\r\n          {\r\n            label: this.config.startLabel,\r\n            type: PaginationItemType.START,\r\n          },\r\n          current > 0 ? { number: 0 } : null\r\n        );\r\n      };\r\n      list.push(start());\r\n    }\r\n    if (this.config.addPrevious) {\r\n      const previous = () => {\r\n        return Object.assign(\r\n          {\r\n            label: this.config.previousLabel,\r\n            type: PaginationItemType.PREVIOUS,\r\n          },\r\n          current > 0 ? { number: current - 1 } : null\r\n        );\r\n      };\r\n      list.push(previous());\r\n    }\r\n    return list;\r\n  }\r\n\r\n  /**\r\n   * Returns the next and end links, if applicable.\r\n   */\r\n  private getAfter(pageCount: number, current: number): PaginationItem[] {\r\n    const list = [];\r\n\r\n    if (this.config.addNext) {\r\n      const next = () => {\r\n        return Object.assign(\r\n          {\r\n            label: this.config.nextLabel,\r\n            type: PaginationItemType.NEXT,\r\n          },\r\n          current < pageCount - 1 ? { number: current + 1 } : null\r\n        );\r\n      };\r\n      list.push(next());\r\n    }\r\n    if (this.config.addEnd) {\r\n      const end = () => {\r\n        return Object.assign(\r\n          {\r\n            label: this.config.endLabel,\r\n            type: PaginationItemType.END,\r\n          },\r\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\r\n        );\r\n      };\r\n      list.push(end());\r\n    }\r\n\r\n    return list;\r\n  }\r\n  /**\r\n   * Resolves the first page of the range we need to build.\r\n   * This is the page that is leading up to the range of the\r\n   * current page.\r\n   *\r\n   * @param pageCount The total number of pages.\r\n   * @param current The current page number, 0-index based.\r\n   */\r\n  private getStartOfRange(pageCount: number, current: number): number {\r\n    const count = this.config.rangeCount - 1;\r\n    // the least number of pages before and after the current\r\n    const delta = Math.round(count / 2);\r\n\r\n    // ensure that we start with at least the first page\r\n    const minStart = Math.max(0, current - delta);\r\n    // ensures that we start with at least 1 and do not pass the last range\r\n    const maxStart = Math.max(0, pageCount - count - 1);\r\n\r\n    // ensure that we get at least a full range at the end\r\n    return Math.min(maxStart, minStart);\r\n  }\r\n\r\n  private get config(): PaginationOptions {\r\n    return Object.assign(\r\n      FALLBACK_PAGINATION_OPTIONS,\r\n      this.paginationConfig.pagination\r\n    );\r\n  }\r\n}\r\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n} from '@angular/core';\r\nimport { ActivatedRoute, Params } from '@angular/router';\r\nimport { PaginationModel } from '@spartacus/core';\r\nimport { PaginationBuilder } from './pagination.builder';\r\nimport { PaginationItem, PaginationItemType } from './pagination.model';\r\n\r\n/**\r\n * The `PaginationComponent` is a generic component that is used for\r\n * all lists in Spartacus that require pagination. The component supports\r\n * all common features, which can be configured or hidden by CSS.\r\n */\r\n@Component({\r\n  selector: 'cx-pagination',\r\n  templateUrl: './pagination.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PaginationComponent {\r\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\r\n  @Input() pageRoute: string;\r\n\r\n  /** The (optional) query parameter which is added to the page route.  */\r\n  @Input() queryParam: string;\r\n\r\n  /**\r\n   * Whenever there's a default page specified, the routing logic\r\n   * will omit the page number in routeLink or parameters.\r\n   */\r\n  @Input() defaultPage;\r\n\r\n  private _pagination: PaginationModel;\r\n  get pagination(): PaginationModel {\r\n    return this._pagination;\r\n  }\r\n  @Input() set pagination(value: PaginationModel) {\r\n    this._pagination = value;\r\n    this.render(value);\r\n  }\r\n\r\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  pages: PaginationItem[] = [];\r\n\r\n  constructor(\r\n    private paginationBuilder: PaginationBuilder,\r\n    private activatedRoute: ActivatedRoute\r\n  ) {}\r\n\r\n  private render(pagination: PaginationModel) {\r\n    this.pages = this.paginationBuilder.paginate(\r\n      pagination.totalPages,\r\n      pagination.currentPage\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Inidicates whether the given item is the current item.\r\n   *\r\n   * @param item PaginationItem\r\n   * @returns boolean\r\n   */\r\n  isCurrent(item: PaginationItem): boolean {\r\n    return (\r\n      item.type === PaginationItemType.PAGE &&\r\n      item.number === this.pagination.currentPage\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Indicates whether the pagination item is inactive. This is used\r\n   * to disabled a link or set the tabindex to `-1`.\r\n   *\r\n   * Defaults to true\r\n   *\r\n   * @param item PaginationItem\r\n   * @returns returns -1 in case of a disabled\r\n   */\r\n  isInactive(item: PaginationItem): boolean {\r\n    return (\r\n      !item.hasOwnProperty('number') ||\r\n      item.number === this.pagination.currentPage\r\n    );\r\n  }\r\n\r\n  getQueryParams(item: PaginationItem): Params {\r\n    const queryParams = Object.assign(\r\n      {},\r\n      this.activatedRoute.snapshot.queryParams\r\n    );\r\n    if (\r\n      this.queryParam &&\r\n      item.number < this.pagination.totalPages &&\r\n      !this.isCurrent(item)\r\n    ) {\r\n      queryParams[this.queryParam] = item.number;\r\n    }\r\n    // omit the page number from the query parameters in case it's the default\r\n    // to clean up the experience and avoid unnecessary polluting of the URL\r\n    if (queryParams[this.queryParam] === this.defaultPage) {\r\n      delete queryParams[this.queryParam];\r\n    }\r\n    return queryParams;\r\n  }\r\n\r\n  pageChange(page: PaginationItem): void {\r\n    this.viewPageEvent.emit(page.number);\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { provideDefaultConfig } from '@spartacus/core';\r\nimport { defaultPaginationConfig } from './config/index';\r\nimport { PaginationComponent } from './pagination.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, RouterModule],\r\n  providers: [provideDefaultConfig(defaultPaginationConfig)],\r\n  declarations: [PaginationComponent],\r\n  exports: [PaginationComponent],\r\n})\r\nexport class PaginationModule {}\r\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\nimport { PaginationComponent, PaginationModule } from './pagination/index';\r\nimport { SortingComponent } from './sorting/sorting.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, NgSelectModule, FormsModule, PaginationModule],\r\n  declarations: [SortingComponent],\r\n  exports: [SortingComponent, PaginationComponent],\r\n})\r\nexport class ListNavigationModule {}\r\n","import { MediaFormatSize } from './media.model';\r\nimport { Injectable } from '@angular/core';\r\nimport { Config } from '@spartacus/core';\r\n\r\n/**\r\n * Provides configuration specific to Media, such as images. This is used to optimize\r\n * rendering of the media, SEO and performance.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class MediaConfig {\r\n  /**\r\n   * Media _format_ configuration holds the size of the media's assigned to\r\n   * a format.\r\n   */\r\n  mediaFormats?: {\r\n    /**\r\n     * Represents the media format code, that is the key to distinguish different\r\n     * media in a container.\r\n     */\r\n    [format: string]: MediaFormatSize;\r\n  };\r\n}\r\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  GlobalMessageEntities,\r\n  GlobalMessageService,\r\n  GlobalMessageType,\r\n} from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\r\n\r\n@Component({\r\n  selector: 'cx-global-message',\r\n  templateUrl: './global-message.component.html',\r\n})\r\nexport class GlobalMessageComponent implements OnInit {\r\n  iconTypes = ICON_TYPE;\r\n\r\n  messages$: Observable<GlobalMessageEntities>;\r\n  messageType: typeof GlobalMessageType = GlobalMessageType;\r\n\r\n  constructor(protected globalMessageService: GlobalMessageService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.messages$ = this.globalMessageService.get();\r\n  }\r\n\r\n  clear(type: GlobalMessageType, index: number): void {\r\n    this.globalMessageService.remove(type, index);\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { I18nModule } from '@spartacus/core';\r\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\r\nimport { GlobalMessageComponent } from './global-message.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\r\n  declarations: [GlobalMessageComponent],\r\n  exports: [GlobalMessageComponent],\r\n})\r\nexport class GlobalMessageComponentModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { Config } from '@spartacus/core';\r\n\r\n/**\r\n * Configuration options for the Qualtrics integration, which allows you to\r\n * specify the qualtrics project and deployment script.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class QualtricsConfig {\r\n  /**\r\n   * Holds the qualtrics integration options.\r\n   */\r\n  qualtrics?: {\r\n    /**\r\n     * Deployment script, loaded from a resource, to integrate the deployment of the qualtrics project.\r\n     * You would typically store the file in the local assets folder.\r\n     *\r\n     * Defaults to `assets/qualtricsIntegration.js`\r\n     */\r\n    scriptSource?: string;\r\n  };\r\n}\r\n","import {\r\n  Injectable,\r\n  isDevMode,\r\n  Renderer2,\r\n  RendererFactory2,\r\n} from '@angular/core';\r\nimport { WindowRef } from '@spartacus/core';\r\nimport { fromEvent, Observable, of } from 'rxjs';\r\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\r\n\r\nexport const QUALTRICS_EVENT_NAME = 'qsi_js_loaded';\r\n\r\n/**\r\n * Service to integration Qualtrics.\r\n *\r\n * The integration observes the Qualtrics API, and when available, it runs the QSI API\r\n * to let Qualtrics evaluate the application.\r\n *\r\n * The service supports an additional _hook_ (`isDataLoaded()`) that can be used to load application\r\n * data before pulling the QSI API. This is beneficial in a single page application when additional\r\n * data is required before the Qualtrics _creatives_ run.\r\n *\r\n * This service also supports the creation of the Qualtrics deployment script. This is optional, as\r\n * the script can be added in alternatives ways.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class QualtricsLoaderService {\r\n  /**\r\n   * Reference to the QSI API.\r\n   */\r\n  protected qsiApi: any;\r\n\r\n  /**\r\n   * QSI load event that happens when the QSI JS file is loaded.\r\n   */\r\n  private qsiLoaded$: Observable<any> = this.winRef?.nativeWindow\r\n    ? fromEvent(this.winRef.nativeWindow, QUALTRICS_EVENT_NAME)\r\n    : of();\r\n\r\n  /**\r\n   * Emits the Qualtrics Site Intercept (QSI) JavaScript API whenever available.\r\n   *\r\n   * The API is emitted when the JavaScript resource holding this API is fully loaded.\r\n   * The API is also stored locally in the service, in case it's required later on.\r\n   */\r\n  protected qsi$: Observable<any> = this.qsiLoaded$.pipe(\r\n    switchMap(() => this.isDataLoaded()),\r\n    map(() => this.winRef?.nativeWindow['QSI']),\r\n    filter((api) => Boolean(api)),\r\n    tap((qsi) => (this.qsiApi = qsi))\r\n  );\r\n\r\n  constructor(\r\n    protected winRef: WindowRef,\r\n    protected rendererFactory: RendererFactory2\r\n  ) {\r\n    this.initialize();\r\n  }\r\n\r\n  /**\r\n   * Starts observing the Qualtrics integration. The integration is based on a\r\n   * Qualtrics specific event (`qsi_js_loaded`). As soon as this events happens,\r\n   * we run the API.\r\n   */\r\n  protected initialize() {\r\n    this.qsi$.subscribe(() => this.run());\r\n  }\r\n\r\n  /**\r\n   * Evaluates the Qualtrics project code for the application.\r\n   *\r\n   * In order to reload the evaluation in Qualtrics, the API requires to unload the API before\r\n   * running it again. We don't do this by default, but offer a flag to conditionally unload the API.\r\n   */\r\n  protected run(reload = false): void {\r\n    if (!this.qsiApi?.API) {\r\n      if (isDevMode()) {\r\n        console.log('The QSI api is not available');\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (reload) {\r\n      // Removes any currently displaying creatives\r\n      this.qsiApi.API.unload();\r\n    }\r\n\r\n    // Starts the intercept code evaluation right after loading the Site Intercept\r\n    // code for any defined intercepts or creatives\r\n    this.qsiApi.API.load().done(this.qsiApi.API.run());\r\n  }\r\n\r\n  /**\r\n   * Adds the deployment script to the DOM.\r\n   *\r\n   * The script will not be added twice if it was loaded before. In that case, we use\r\n   * the Qualtrics API directly to _unload_ and _run_ the project.\r\n   */\r\n  addScript(scriptSource: string): void {\r\n    if (this.hasScript(scriptSource)) {\r\n      this.run(true);\r\n    } else {\r\n      const script: HTMLScriptElement = this.renderer.createElement('script');\r\n      script.type = 'text/javascript';\r\n      script.defer = true;\r\n      script.src = scriptSource;\r\n      this.renderer.appendChild(this.winRef.document.body, script);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data.\r\n   * You can observe any data in this method.\r\n   *\r\n   * Defaults to true.\r\n   */\r\n  protected isDataLoaded(): Observable<boolean> {\r\n    return of(true);\r\n  }\r\n\r\n  /**\r\n   * Indicates if the script is already added to the DOM.\r\n   */\r\n  protected hasScript(source?: string): boolean {\r\n    return !!this.winRef.document.querySelector(`script[src=\"${source}\"]`);\r\n  }\r\n\r\n  protected get renderer(): Renderer2 {\r\n    return this.rendererFactory.createRenderer(null, null);\r\n  }\r\n}\r\n","import { Component, isDevMode } from '@angular/core';\r\nimport { QualtricsConfig } from './config/qualtrics-config';\r\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\r\n/**\r\n * Adds the Qualtrics deployment script whenever the component is loaded. The\r\n * deployment script is loaded from the global configuration (`qualtrics.scriptSource`).\r\n */\r\n@Component({\r\n  selector: 'cx-qualtrics',\r\n  template: ``,\r\n})\r\nexport class QualtricsComponent {\r\n  constructor(\r\n    protected qualtricsLoader: QualtricsLoaderService,\r\n    protected config: QualtricsConfig\r\n  ) {\r\n    if (this.config.qualtrics?.scriptSource) {\r\n      this.qualtricsLoader.addScript(this.config.qualtrics.scriptSource);\r\n    } else if (isDevMode()) {\r\n      console.warn(\r\n        `We're unable to add the Qualtrics deployment code as there is no script source defined in config.qualtrics.scriptSource.`\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\r\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\r\nimport { QualtricsComponent } from './qualtrics.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, HttpClientModule],\r\n  declarations: [QualtricsComponent],\r\n  entryComponents: [QualtricsComponent],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        QualtricsComponent: {\r\n          component: QualtricsComponent,\r\n        },\r\n      },\r\n    }),\r\n    provideDefaultConfig(defaultQualtricsConfig),\r\n  ],\r\n})\r\nexport class QualtricsModule {}\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\r\nimport {\r\n  CmsSiteContextSelectorComponent,\r\n  ContextServiceMap,\r\n  CURRENCY_CONTEXT_ID,\r\n  LANGUAGE_CONTEXT_ID,\r\n  SiteContext,\r\n} from '@spartacus/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { filter, map, switchMap, take } from 'rxjs/operators';\r\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\r\nimport { SiteContextType } from './site-context.model';\r\n\r\nconst LABELS = {\r\n  [LANGUAGE_CONTEXT_ID]: 'Language',\r\n  [CURRENCY_CONTEXT_ID]: 'Currency',\r\n};\r\n\r\n@Injectable()\r\nexport class SiteContextComponentService {\r\n  constructor(\r\n    @Optional()\r\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\r\n    private contextServiceMap: ContextServiceMap,\r\n    protected injector: Injector\r\n  ) {}\r\n\r\n  getItems(context?: SiteContextType): Observable<any> {\r\n    return this.getService(context).pipe(\r\n      switchMap((service: SiteContext<any>) => service.getAll()),\r\n      switchMap((items) =>\r\n        this.getContext(context).pipe(\r\n          switchMap((ctx) => {\r\n            const itemsCopy = [];\r\n            for (const item of items) {\r\n              itemsCopy.push({\r\n                ...item,\r\n                label: this.getOptionLabel(item, ctx),\r\n              });\r\n            }\r\n            return of(itemsCopy);\r\n          })\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  getActiveItem(context?: SiteContextType): Observable<string> {\r\n    return this.getService(context).pipe(\r\n      switchMap((service: SiteContext<any>) => service.getActive())\r\n    );\r\n  }\r\n\r\n  getLabel(context?: SiteContextType): Observable<any> {\r\n    return this.getContext(context).pipe(\r\n      map((ctx) => {\r\n        return LABELS[ctx];\r\n      })\r\n    );\r\n  }\r\n\r\n  setActive(value: string, context?: SiteContextType): void {\r\n    this.getService(context)\r\n      .pipe(take(1))\r\n      .subscribe((service) => {\r\n        service.setActive(value);\r\n      });\r\n  }\r\n\r\n  protected getService(\r\n    context?: SiteContextType\r\n  ): Observable<SiteContext<any>> {\r\n    return this.getContext(context).pipe(\r\n      map((ctx: string) => (ctx ? this.getInjectedService(ctx) : undefined)),\r\n      filter((s) => !!s)\r\n    );\r\n  }\r\n\r\n  protected getContext(context?: SiteContextType): Observable<string> {\r\n    if (context) {\r\n      return of(context);\r\n    } else if (this.componentData) {\r\n      return this.componentData.data$.pipe(\r\n        map((data) => data?.context),\r\n        map((ctx) => {\r\n          switch (ctx) {\r\n            case 'LANGUAGE':\r\n              return LANGUAGE_CONTEXT_ID;\r\n            case 'CURRENCY':\r\n              return CURRENCY_CONTEXT_ID;\r\n            default:\r\n              return ctx;\r\n          }\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  protected getInjectedService(context: string): SiteContext<any> {\r\n    return this.injector.get<SiteContext<any>>(\r\n      this.contextServiceMap[context],\r\n      null\r\n    );\r\n  }\r\n\r\n  protected getOptionLabel(item: any, context?: string): string {\r\n    switch (context) {\r\n      case LANGUAGE_CONTEXT_ID:\r\n        return item.nativeName;\r\n      case CURRENCY_CONTEXT_ID:\r\n        return item.symbol + ' ' + item.isocode;\r\n      default:\r\n        return item.isocode;\r\n    }\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\r\nimport { Injector, NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  CmsConfig,\r\n  ContextServiceMap,\r\n  provideDefaultConfig,\r\n  SiteContextModule,\r\n} from '@spartacus/core';\r\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\r\nimport { IconModule } from '../icon/index';\r\nimport { LanguageCurrencyComponent } from './language-currency.component';\r\nimport { SiteContextComponentService } from './site-context-component.service';\r\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, RouterModule, SiteContextModule, IconModule],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        CMSSiteContextComponent: {\r\n          component: SiteContextSelectorComponent,\r\n          providers: [\r\n            {\r\n              provide: SiteContextComponentService,\r\n              useClass: SiteContextComponentService,\r\n              deps: [CmsComponentData, ContextServiceMap, Injector],\r\n            },\r\n          ],\r\n        },\r\n        LanguageCurrencyComponent: {\r\n          component: LanguageCurrencyComponent,\r\n        },\r\n      },\r\n    }),\r\n    SiteContextComponentService,\r\n  ],\r\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\r\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\r\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\r\n})\r\nexport class SiteContextSelectorModule {}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\r\n\r\n@Component({\r\n  selector: 'cx-star-rating',\r\n  templateUrl: './star-rating.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class StarRatingComponent implements OnInit {\r\n  /**\r\n   * The rating component can be used in disabled mode,\r\n   * so that the interation is not provided.\r\n   */\r\n  @Input() @HostBinding('attr.disabled') disabled = false;\r\n\r\n  /**\r\n   * The rating will be used to render some colorful stars in the UI.\r\n   */\r\n  @Input() rating: number;\r\n\r\n  /**\r\n   * Emits the given rating when the user clicks on a star.\r\n   */\r\n  // tslint:disable-next-line:no-output-native\r\n  @Output() change = new EventEmitter<number>();\r\n\r\n  private initialRate = 0;\r\n\r\n  iconTypes = ICON_TYPE;\r\n\r\n  constructor(protected el: ElementRef, protected renderer: Renderer2) {}\r\n\r\n  ngOnInit(): void {\r\n    this.setRate(this.rating, true);\r\n  }\r\n\r\n  setRate(value: number, force?: boolean): void {\r\n    if (!this.disabled || force) {\r\n      this.renderer.setAttribute(\r\n        this.el.nativeElement,\r\n        'style',\r\n        `--star-fill:${value || this.initialRate};`\r\n      );\r\n    }\r\n  }\r\n\r\n  saveRate(rating: number): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n    this.initialRate = rating;\r\n    this.setRate(rating);\r\n    this.change.emit(rating);\r\n  }\r\n\r\n  setRateOnEvent(event: any, rating: number) {\r\n    if (event.code === 'Space') {\r\n      event.preventDefault();\r\n      this.setRate(rating);\r\n    }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import { Injectable } from '@angular/core';\r\nimport { Config } from '@spartacus/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class ViewConfig {\r\n  view?: {\r\n    /**\r\n     * Configurations related to the view of the application\r\n     */\r\n    infiniteScroll?: {\r\n      active?: boolean;\r\n      productLimit?: number;\r\n      showMoreButton?: boolean;\r\n    };\r\n  };\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { provideDefaultConfig } from '@spartacus/core';\r\n\r\n@NgModule({})\r\nexport class ViewConfigModule {\r\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\r\n    return {\r\n      ngModule: ViewConfigModule,\r\n      providers: [\r\n        provideDefaultConfig({\r\n          view: {},\r\n        }),\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OrderDetailsService {\r\n  orderCode$: Observable<string>;\r\n  orderLoad$: Observable<{}>;\r\n\r\n  constructor(\r\n    private userOrderService: UserOrderService,\r\n    private routingService: RoutingService\r\n  ) {\r\n    this.orderCode$ = this.routingService\r\n      .getRouterState()\r\n      .pipe(map((routingData) => routingData.state.params.orderCode));\r\n\r\n    this.orderLoad$ = this.orderCode$.pipe(\r\n      tap((orderCode) => {\r\n        if (orderCode) {\r\n          this.userOrderService.loadOrderDetails(orderCode);\r\n        } else {\r\n          this.userOrderService.clearOrderDetails();\r\n        }\r\n      }),\r\n      shareReplay({ bufferSize: 1, refCount: true })\r\n    );\r\n  }\r\n\r\n  getOrderDetails(): Observable<Order> {\r\n    return this.orderLoad$.pipe(\r\n      switchMap(() => this.userOrderService.getOrderDetails())\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  ActiveCartService,\r\n  Cart,\r\n  CheckoutService,\r\n  Order,\r\n  OrderEntry,\r\n  PromotionLocation,\r\n  PromotionResult,\r\n} from '@spartacus/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PromotionService {\r\n  constructor(\r\n    protected orderDetailsService: OrderDetailsService,\r\n    protected checkoutService: CheckoutService,\r\n    protected activeCartService: ActiveCartService\r\n  ) {}\r\n\r\n  getOrderPromotions(\r\n    promotionLocation: PromotionLocation\r\n  ): Observable<PromotionResult[]> {\r\n    switch (promotionLocation) {\r\n      case PromotionLocation.ActiveCart:\r\n        return this.getOrderPromotionsFromCart();\r\n      case PromotionLocation.Checkout:\r\n        return this.getOrderPromotionsFromCheckout();\r\n      case PromotionLocation.Order:\r\n        return this.getOrderPromotionsFromOrder();\r\n      default:\r\n        return of([]);\r\n    }\r\n  }\r\n\r\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\r\n    return this.activeCartService\r\n      .getActive()\r\n      .pipe(map((cart) => this.getOrderPromotionsFromCartHelper(cart)));\r\n  }\r\n\r\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\r\n    const potentialPromotions = [];\r\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\r\n\r\n    const appliedPromotions = [];\r\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\r\n\r\n    return [...potentialPromotions, ...appliedPromotions];\r\n  }\r\n\r\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\r\n    return this.checkoutService\r\n      .getOrderDetails()\r\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\r\n  }\r\n\r\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\r\n    return this.orderDetailsService\r\n      .getOrderDetails()\r\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\r\n  }\r\n\r\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\r\n    const appliedOrderPromotions = [];\r\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\r\n\r\n    return appliedOrderPromotions;\r\n  }\r\n\r\n  getProductPromotionForEntry(\r\n    item: OrderEntry,\r\n    promotionLocation: PromotionLocation\r\n  ): Observable<PromotionResult[]> {\r\n    switch (promotionLocation) {\r\n      case PromotionLocation.ActiveCart:\r\n        return this.activeCartService\r\n          .getActive()\r\n          .pipe(\r\n            map((cart) =>\r\n              this.getProductPromotion(\r\n                item,\r\n                cart.appliedProductPromotions || []\r\n              )\r\n            )\r\n          );\r\n      case PromotionLocation.Checkout:\r\n        return this.checkoutService\r\n          .getOrderDetails()\r\n          .pipe(\r\n            map((order) =>\r\n              this.getProductPromotion(\r\n                item,\r\n                order.appliedProductPromotions || []\r\n              )\r\n            )\r\n          );\r\n      case PromotionLocation.Order:\r\n        return this.orderDetailsService\r\n          .getOrderDetails()\r\n          .pipe(\r\n            map((order) =>\r\n              this.getProductPromotion(\r\n                item,\r\n                order.appliedProductPromotions || []\r\n              )\r\n            )\r\n          );\r\n    }\r\n  }\r\n\r\n  private getProductPromotion(\r\n    item: OrderEntry,\r\n    promotions: PromotionResult[]\r\n  ): PromotionResult[] {\r\n    const entryPromotions: PromotionResult[] = [];\r\n    if (promotions && promotions.length > 0) {\r\n      for (const promotion of promotions) {\r\n        if (\r\n          promotion.description &&\r\n          promotion.consumedEntries &&\r\n          promotion.consumedEntries.length > 0\r\n        ) {\r\n          for (const consumedEntry of promotion.consumedEntries) {\r\n            if (this.isConsumedByEntry(consumedEntry, item)) {\r\n              entryPromotions.push(promotion);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return entryPromotions;\r\n  }\r\n\r\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\r\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\r\n    if (entry.entries && entry.entries.length > 0) {\r\n      for (const subEntry of entry.entries) {\r\n        if (subEntry.entryNumber === consumedEntryNumber) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    } else {\r\n      return consumedEntryNumber === entry.entryNumber;\r\n    }\r\n  }\r\n}\r\n","import { AbstractControl, ValidationErrors, FormGroup } from '@angular/forms';\r\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\r\n\r\nexport class CustomFormValidators {\r\n  /**\r\n   * Checks control's value with predefined email regexp\r\n   *\r\n   * NOTE: Use it as a control validator\r\n   *\r\n   * @static\r\n   * @param {AbstractControl} control\r\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidEmail' validator error\r\n   * @memberof CustomFormValidators\r\n   */\r\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\r\n    const email = control.value as string;\r\n\r\n    return !email.length || email.match(EMAIL_PATTERN)\r\n      ? null\r\n      : { cxInvalidEmail: true };\r\n  }\r\n\r\n  /**\r\n   * Checks control's value with predefined password regexp\r\n   *\r\n   * NOTE: Use it as a control validator\r\n   *\r\n   * @static\r\n   * @param {AbstractControl} control\r\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidPassword' validator error\r\n   * @memberof CustomFormValidators\r\n   */\r\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\r\n    const password = control.value as string;\r\n\r\n    return !password.length || password.match(PASSWORD_PATTERN)\r\n      ? null\r\n      : { cxInvalidPassword: true };\r\n  }\r\n\r\n  /**\r\n   * Checks if control's value is between 1 and 5\r\n   *\r\n   * NOTE: Use it as a control validator\r\n   *\r\n   * @static\r\n   * @param {AbstractControl} control\r\n   * @returns {(ValidationErrors | null)} Uses 'cxStarRatingEmpty' validator error\r\n   * @memberof CustomFormValidators\r\n   */\r\n  static starRatingEmpty(control: AbstractControl): ValidationErrors | null {\r\n    const rating = control.value as number;\r\n\r\n    return rating >= 1 && rating <= 5 ? null : { cxStarRatingEmpty: true };\r\n  }\r\n\r\n  /**\r\n   * Checks if two password controls match\r\n   *\r\n   * NOTE: Use it as a form validator and pass password control names as parameters\r\n   *\r\n   * @static\r\n   * @param {string} password First password control name\r\n   * @param {string} passwordConfirmation Second password control name\r\n   * @returns Uses 'cxPasswordsMustMatch' validator error\r\n   * @memberof CustomFormValidators\r\n   */\r\n  static passwordsMustMatch(\r\n    password: string,\r\n    passwordConfirmation: string\r\n  ): any {\r\n    const validator = (formGroup: FormGroup) =>\r\n      controlsMustMatch(\r\n        formGroup,\r\n        password,\r\n        passwordConfirmation,\r\n        'cxPasswordsMustMatch'\r\n      );\r\n\r\n    return validator;\r\n  }\r\n\r\n  /**\r\n   * Checks if two email controls match\r\n   *\r\n   * NOTE: Use it as a form validator and pass email control names as parameters\r\n   *\r\n   * @static\r\n   * @param {string} email First email control name\r\n   * @param {string} emailConfirmation Second email control name\r\n   * @returns Uses 'cxEmailsMustMatch' validator error\r\n   * @memberof CustomFormValidators\r\n   */\r\n  static emailsMustMatch(email: string, emailConfirmation: string): any {\r\n    const validator = (formGroup: FormGroup) =>\r\n      controlsMustMatch(\r\n        formGroup,\r\n        email,\r\n        emailConfirmation,\r\n        'cxEmailsMustMatch'\r\n      );\r\n\r\n    return validator;\r\n  }\r\n}\r\n\r\n/**\r\n * Generic function for validators, which checks if two passed controls match.\r\n *\r\n * @param formGroup\r\n * @param firstControlName First control to check\r\n * @param secondControlName Second control to check\r\n * @param errorName Error which will be returned by validator\r\n */\r\nexport function controlsMustMatch(\r\n  formGroup: FormGroup,\r\n  firstControlName: string,\r\n  secondControlName: string,\r\n  errorName: string\r\n): void {\r\n  const firstControl = formGroup.controls[firstControlName];\r\n  const secondControl = formGroup.controls[secondControlName];\r\n\r\n  if (secondControl.errors && !secondControl.errors[errorName]) {\r\n    return;\r\n  }\r\n\r\n  secondControl.setErrors(\r\n    firstControl.value !== secondControl.value ? { [errorName]: true } : null\r\n  );\r\n}\r\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport {\r\n  CmsComponentMapping,\r\n  CmsConfig,\r\n  DeferLoadingStrategy,\r\n} from '@spartacus/core';\r\nimport { Route } from '@angular/router';\r\nimport { isPlatformServer } from '@angular/common';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CmsComponentsService {\r\n  private missingComponents: string[] = [];\r\n\r\n  constructor(\r\n    protected config: CmsConfig,\r\n    @Inject(PLATFORM_ID) protected platformId: Object\r\n  ) {}\r\n\r\n  /**\r\n   * Should be called to make sure all component mappings are determined,\r\n   * especially lazy loaded ones.\r\n   *\r\n   * It's recommended way to make sure all other methods of CmsComponentService\r\n   * will be able to work synchronously for asked component types and avoid risk\r\n   * of potential errors that could be thrown otherwise.\r\n   */\r\n  determineMappings(componentTypes: string[]): Observable<string[]> {\r\n    return of(componentTypes);\r\n  }\r\n\r\n  /**\r\n   * Return collection of component mapping configuration for specified list of\r\n   * component types.\r\n   *\r\n   * If component mapping can't be determined synchronously, for example, lazy\r\n   * loaded one, it will throw an error.\r\n   *\r\n   * To make sure component mapping is available, determineMappings()\r\n   * should be called and completed first.\r\n   */\r\n  getMapping(componentType: string): CmsComponentMapping {\r\n    const componentConfig = this.config.cmsComponents?.[componentType];\r\n\r\n    if (!componentConfig) {\r\n      if (!this.missingComponents.includes(componentType)) {\r\n        this.missingComponents.push(componentType);\r\n        console.warn(\r\n          `No component implementation found for the CMS component type '${componentType}'.\\n`,\r\n          `Make sure you implement a component and register it in the mapper.`\r\n        );\r\n      }\r\n    }\r\n\r\n    return componentConfig;\r\n  }\r\n\r\n  /**\r\n   * Checks, if component should be rendered as some components\r\n   * could be disabled for server side renderings\r\n   */\r\n  shouldRender(componentType: string): boolean {\r\n    const isSSR = isPlatformServer(this.platformId);\r\n    return !(isSSR && this.getMapping(componentType)?.disableSSR);\r\n  }\r\n\r\n  /**\r\n   * Return DeferLoadingStrategy for component type.\r\n   */\r\n  getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\r\n    return this.config.cmsComponents?.[componentType]?.deferLoading;\r\n  }\r\n\r\n  /**\r\n   * Get cms driven child routes for components\r\n   */\r\n  getChildRoutes(componentTypes: string[]): Route[] {\r\n    const routes = [];\r\n    for (const componentType of componentTypes) {\r\n      if (this.shouldRender(componentType)) {\r\n        routes.push(...(this.getMapping(componentType)?.childRoutes ?? []));\r\n      }\r\n    }\r\n    return routes;\r\n  }\r\n\r\n  /**\r\n   * Get cms driven guards for components\r\n   */\r\n  getGuards(componentTypes: string[]): any[] {\r\n    const guards = new Set<any>();\r\n    for (const componentType of componentTypes) {\r\n      this.getMapping(componentType)?.guards?.forEach((guard) =>\r\n        guards.add(guard)\r\n      );\r\n    }\r\n    return Array.from(guards);\r\n  }\r\n\r\n  /**\r\n   * Get i18n keys associated with components\r\n   */\r\n  getI18nKeys(componentTypes: string[]): string[] {\r\n    const i18nKeys = new Set<string>();\r\n    for (const componentType of componentTypes) {\r\n      if (this.shouldRender(componentType)) {\r\n        this.getMapping(componentType)?.i18nKeys?.forEach((key) =>\r\n          i18nKeys.add(key)\r\n        );\r\n      }\r\n    }\r\n    return Array.from(i18nKeys);\r\n  }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { CmsComponentData } from '../../model';\r\nimport { CmsComponent, CmsService } from '@spartacus/core';\r\nimport { CmsComponentsService } from '../../../services/cms-components.service';\r\n\r\n/**\r\n * Used to prepare injector for CMS components.\r\n *\r\n * Injector will take into account configured providers and provides CmsComponentData\r\n * for specified component's uid\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CmsInjectorService {\r\n  constructor(\r\n    protected cmsComponentsService: CmsComponentsService,\r\n    protected injector: Injector\r\n  ) {}\r\n\r\n  private getCmsData<T extends CmsComponent>(\r\n    uid: string,\r\n    parentInjector?: Injector\r\n  ): CmsComponentData<T> {\r\n    return {\r\n      uid: uid,\r\n      data$: (parentInjector ?? this.injector)\r\n        .get(CmsService)\r\n        .getComponentData<T>(uid),\r\n    };\r\n  }\r\n\r\n  public getInjector(\r\n    type: string,\r\n    uid: string,\r\n    parentInjector?: Injector\r\n  ): Injector {\r\n    const configProviders =\r\n      this.cmsComponentsService.getMapping(type)?.providers ?? [];\r\n    return Injector.create({\r\n      providers: [\r\n        {\r\n          provide: CmsComponentData,\r\n          useValue: this.getCmsData(uid),\r\n        },\r\n        ...configProviders,\r\n      ],\r\n      parent: parentInjector ?? this.injector,\r\n    });\r\n  }\r\n}\r\n","import {\r\n  ComponentRef,\r\n  ElementRef,\r\n  Injector,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Applicable, CmsComponentMapping, Priority } from '@spartacus/core';\r\n\r\n/**\r\n * ComponentHandler implementations can be used for instantiating and launching\r\n * different types of CMS mapped components\r\n */\r\nexport abstract class ComponentHandler implements Applicable {\r\n  /**\r\n   * Returns component resource - an observable stream used to launch and dispose\r\n   * component.\r\n   *\r\n   * Instantiate and launch component by subscribing to launcher.\r\n   * Successful component launch will be followed by emission of ElementRef\r\n   * (and in case of native Angular component, also ComponentRef).\r\n   * Unsubscribing from the launcher will remove and tear down the component.\r\n   *\r\n   * @param componentMapping\r\n   * @param viewContainerRef\r\n   * @param elementInjector\r\n   */\r\n  abstract launcher(\r\n    componentMapping: CmsComponentMapping,\r\n    viewContainerRef: ViewContainerRef,\r\n    elementInjector?: Injector\r\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }>;\r\n\r\n  abstract hasMatch(componentMapping: CmsComponentMapping): boolean;\r\n  abstract getPriority?(): Priority;\r\n}\r\n","import {\r\n  ComponentRef,\r\n  ElementRef,\r\n  Inject,\r\n  Injectable,\r\n  Injector,\r\n  isDevMode,\r\n  Optional,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport { ComponentHandler } from '../handlers/component-handler';\r\nimport { CmsComponentMapping, resolveApplicable } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/**\r\n * Responsible for obtaining component handler for specified component mapping\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ComponentHandlerService {\r\n  constructor(\r\n    @Optional()\r\n    @Inject(ComponentHandler)\r\n    protected handlers: ComponentHandler[]\r\n  ) {}\r\n\r\n  protected invalidMappings = new Set<CmsComponentMapping>();\r\n\r\n  /**\r\n   * Get best matching component handler\r\n   *\r\n   * @param componentMapping\r\n   */\r\n  protected resolve(componentMapping: CmsComponentMapping): ComponentHandler {\r\n    const handler = resolveApplicable(this.handlers, [componentMapping]);\r\n\r\n    if (isDevMode() && !handler) {\r\n      if (!this.invalidMappings.has(componentMapping)) {\r\n        this.invalidMappings.add(componentMapping);\r\n        console.warn(\r\n          \"Can't resolve handler for component mapping: \",\r\n          componentMapping\r\n        );\r\n      }\r\n    }\r\n\r\n    return handler;\r\n  }\r\n\r\n  /**\r\n   * Get launcher for specified component mapping\r\n   *\r\n   * @param componentMapping\r\n   * @param viewContainerRef\r\n   * @param elementInjector\r\n   */\r\n  getLauncher(\r\n    componentMapping: CmsComponentMapping,\r\n    viewContainerRef: ViewContainerRef,\r\n    elementInjector?: Injector\r\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\r\n    return this.resolve(componentMapping)?.launcher(\r\n      componentMapping,\r\n      viewContainerRef,\r\n      elementInjector\r\n    );\r\n  }\r\n}\r\n","import {\r\n  ComponentRef,\r\n  Directive,\r\n  ElementRef,\r\n  Injector,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Renderer2,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {\r\n  ContentSlotComponentData,\r\n  DynamicAttributeService,\r\n} from '@spartacus/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { CmsComponentsService } from '../../services/cms-components.service';\r\nimport { CmsInjectorService } from './services/cms-injector.service';\r\nimport { ComponentHandlerService } from './services/component-handler.service';\r\n\r\n/**\r\n * Directive used to facilitate instantiation of CMS driven dynamic components\r\n */\r\n@Directive({\r\n  selector: '[cxComponentWrapper]',\r\n})\r\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\r\n  @Input() cxComponentWrapper: ContentSlotComponentData;\r\n\r\n  /**\r\n   * @deprecated since 2.0\r\n   *\r\n   * This property in unsafe, i.e.\r\n   * - cmpRef can be set later because of lazy loading or deferred loading\r\n   * - cmpRef can be not set at all if for example, web components are used as cms components\r\n   */\r\n  cmpRef?: ComponentRef<any>;\r\n\r\n  private launcherResource?: Subscription;\r\n\r\n  constructor(\r\n    protected vcr: ViewContainerRef,\r\n    protected cmsComponentsService: CmsComponentsService,\r\n    protected injector: Injector,\r\n    protected dynamicAttributeService: DynamicAttributeService,\r\n    protected renderer: Renderer2,\r\n    protected componentHandler: ComponentHandlerService,\r\n    protected cmsInjector: CmsInjectorService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.cmsComponentsService\r\n      .determineMappings([this.cxComponentWrapper.flexType])\r\n      .subscribe(() => {\r\n        if (\r\n          this.cmsComponentsService.shouldRender(\r\n            this.cxComponentWrapper.flexType\r\n          )\r\n        ) {\r\n          this.launchComponent();\r\n        }\r\n      });\r\n  }\r\n\r\n  private launchComponent() {\r\n    const componentMapping = this.cmsComponentsService.getMapping(\r\n      this.cxComponentWrapper.flexType\r\n    );\r\n\r\n    if (!componentMapping) {\r\n      return;\r\n    }\r\n\r\n    this.launcherResource = this.componentHandler\r\n      .getLauncher(\r\n        componentMapping,\r\n        this.vcr,\r\n        this.cmsInjector.getInjector(\r\n          this.cxComponentWrapper.flexType,\r\n          this.cxComponentWrapper.uid,\r\n          this.injector\r\n        )\r\n      )\r\n      ?.subscribe(({ elementRef, componentRef }) => {\r\n        this.cmpRef = componentRef;\r\n        this.decorate(elementRef);\r\n      });\r\n  }\r\n\r\n  private decorate(elementRef: ElementRef): void {\r\n    this.dynamicAttributeService.addDynamicAttributes(\r\n      elementRef.nativeElement,\r\n      this.renderer,\r\n      { componentData: this.cxComponentWrapper }\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.launcherResource) {\r\n      this.launcherResource.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import {\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  ElementRef,\r\n  Injectable,\r\n  Injector,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport { ComponentHandler } from './component-handler';\r\nimport { Observable } from 'rxjs';\r\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\r\n\r\n/**\r\n * Default component handler used for dynamically launching cms components implemented\r\n * as native Angular components.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DefaultComponentHandler implements ComponentHandler {\r\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\r\n    return typeof componentMapping.component === 'function';\r\n  }\r\n\r\n  getPriority(): Priority {\r\n    return Priority.FALLBACK;\r\n  }\r\n\r\n  launcher(\r\n    componentMapping: CmsComponentMapping,\r\n    viewContainerRef: ViewContainerRef,\r\n    elementInjector?: Injector\r\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\r\n    return new Observable<{\r\n      elementRef: ElementRef;\r\n      componentRef?: ComponentRef<any>;\r\n    }>((subscriber) => {\r\n      let componentRef: ComponentRef<any>;\r\n\r\n      const injector = elementInjector ?? viewContainerRef.injector;\r\n\r\n      const dispose = () => {\r\n        if (componentRef) {\r\n          componentRef.destroy();\r\n        }\r\n      };\r\n\r\n      const factory = this.getComponentFactory(\r\n        injector,\r\n        componentMapping.component\r\n      );\r\n\r\n      if (factory) {\r\n        componentRef = viewContainerRef.createComponent(\r\n          factory,\r\n          undefined,\r\n          injector\r\n        );\r\n        subscriber.next({ elementRef: componentRef.location, componentRef });\r\n      }\r\n\r\n      return dispose;\r\n    });\r\n  }\r\n\r\n  protected getComponentFactory(injector: Injector, component: any): any {\r\n    if (!component) {\r\n      return null;\r\n    }\r\n    const factory = injector\r\n      .get(ComponentFactoryResolver)\r\n      .resolveComponentFactory(component);\r\n\r\n    return factory;\r\n  }\r\n}\r\n","import {\r\n  ComponentRef,\r\n  ElementRef,\r\n  Injectable,\r\n  Injector,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\r\nimport { from, Observable } from 'rxjs';\r\nimport { DefaultComponentHandler } from './default-component.handler';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { ComponentHandler } from './component-handler';\r\n\r\n/**\r\n * Lazy component handler used for launching lazy loaded cms components implemented\r\n * as native Angular components.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LazyComponentHandler implements ComponentHandler {\r\n  constructor(protected defaultHandler: DefaultComponentHandler) {}\r\n\r\n  /**\r\n   * We want to mach dynamic import signature () => import('')\r\n   */\r\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\r\n    return (\r\n      typeof componentMapping.component === 'function' &&\r\n      this.isNotClass(componentMapping.component)\r\n    );\r\n  }\r\n\r\n  private isNotClass(symbol: any): boolean {\r\n    const signature = symbol.toString().substr(0, 20).replace(' ', '');\r\n    return signature.startsWith('function()') || signature.startsWith('()=>');\r\n  }\r\n\r\n  getPriority(): Priority {\r\n    return Priority.LOW;\r\n  }\r\n\r\n  launcher(\r\n    componentMapping: CmsComponentMapping,\r\n    viewContainerRef: ViewContainerRef,\r\n    elementInjector?: Injector\r\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\r\n    return from(componentMapping.component()).pipe(\r\n      switchMap((component) =>\r\n        this.defaultHandler.launcher(\r\n          { ...componentMapping, component },\r\n          viewContainerRef,\r\n          elementInjector\r\n        )\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\r\nimport { ComponentHandler } from './handlers/component-handler';\r\nimport { DefaultComponentHandler } from './handlers/default-component.handler';\r\nimport { LazyComponentHandler } from './handlers/lazy-component.handler';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  providers: [\r\n    {\r\n      provide: ComponentHandler,\r\n      useExisting: DefaultComponentHandler,\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: ComponentHandler,\r\n      useExisting: LazyComponentHandler,\r\n      multi: true,\r\n    },\r\n  ],\r\n  declarations: [ComponentWrapperDirective],\r\n  exports: [ComponentWrapperDirective],\r\n})\r\nexport class PageComponentModule {}\r\n","import { Location } from '@angular/common';\r\nimport { Injectable } from '@angular/core';\r\nimport { WindowRef } from '@spartacus/core';\r\nimport { LAUNCH_CALLER } from '../../../layout/launch-dialog/config/index';\r\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\r\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\r\n\r\n/**\r\n * The AsmEnablerService is used to enable ASM for those scenario's\r\n * where it's actually used. This service is added to avoid any polution\r\n * of the UI and runtime performance for the ordinary production user.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AsmEnablerService {\r\n  constructor(\r\n    protected location: Location,\r\n    protected winRef: WindowRef,\r\n    protected launchDialogService: LaunchDialogService\r\n  ) {}\r\n\r\n  /**\r\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\r\n   * existence of a URL parameter or previous usage given by local storage.\r\n   */\r\n  load(): void {\r\n    if (this.isEnabled()) {\r\n      this.addUi();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Indicates whether the ASM module is enabled.\r\n   */\r\n  isEnabled(): boolean {\r\n    if (this.isLaunched() && !this.isUsedBefore()) {\r\n      if (this.winRef.localStorage) {\r\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\r\n      }\r\n    }\r\n    return this.isLaunched() || this.isUsedBefore();\r\n  }\r\n\r\n  /**\r\n   * Indicates whether ASM is launched through the URL,\r\n   * using the asm flag in the URL.\r\n   */\r\n  protected isLaunched(): boolean {\r\n    const params = this.location.path().split('?')[1];\r\n    return params && params.split('&').includes('asm=true');\r\n  }\r\n\r\n  /**\r\n   * Evaluates local storage where we persist the usage of ASM.\r\n   */\r\n  protected isUsedBefore(): boolean {\r\n    return (\r\n      this.winRef.localStorage &&\r\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Adds the ASM UI by using the `cx-storefront` outlet.\r\n   */\r\n  protected addUi(): void {\r\n    this.launchDialogService.launch(LAUNCH_CALLER.ASM);\r\n  }\r\n}\r\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import { CommonModule } from '@angular/common';\r\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\r\nimport { PageComponentModule } from '../../cms-structure/page/component/page-component.module';\r\nimport { AsmEnablerService } from './services/asm-enabler.service';\r\n\r\n/**\r\n * The ASM loader module takes care of loading the ASM UI\r\n * only in case there's a reason to do so.\r\n */\r\n@NgModule({\r\n  imports: [CommonModule, PageComponentModule],\r\n  providers: [\r\n    {\r\n      provide: APP_INITIALIZER,\r\n      useFactory: asmFactory,\r\n      deps: [AsmEnablerService],\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class AsmLoaderModule {}\r\n\r\n/**\r\n *\r\n * We do not like to block the UI, which is why we delgate loading of ASM\r\n * to a real component; the router and state aren't available in an optimized\r\n * way during the APP_INITIALIZER.\r\n */\r\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\r\n  const isReady = () => {\r\n    asmEnablerService.load();\r\n  };\r\n  return isReady;\r\n}\r\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutStep } from '../model/checkout-step.model';\r\nimport { Injectable } from '@angular/core';\r\nimport { Config } from '@spartacus/core';\r\n\r\nexport enum DeliveryModePreferences {\r\n  FREE = 'FREE',\r\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\r\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class CheckoutConfig {\r\n  checkout?: {\r\n    /**\r\n     * Set checkout steps as ordered array of pages.\r\n     */\r\n    steps?: Array<CheckoutStep>;\r\n    /**\r\n     * Allow for express checkout when default shipping method and payment method are available.\r\n     */\r\n    express?: boolean;\r\n    /**\r\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\r\n     */\r\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\r\n    /**\r\n     * Allow for guest checkout.\r\n     */\r\n    guest?: boolean;\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  AsmAuthService,\r\n  AuthService,\r\n  RoutingService,\r\n  WindowRef,\r\n} from '@spartacus/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { mergeMap, take } from 'rxjs/operators';\r\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AsmComponentService {\r\n  constructor(\r\n    protected authService: AuthService,\r\n    protected asmAuthService: AsmAuthService,\r\n    protected routingService: RoutingService,\r\n    protected winRef: WindowRef\r\n  ) {}\r\n\r\n  logoutCustomerSupportAgentAndCustomer(): void {\r\n    this.authService\r\n      .getUserToken()\r\n      .pipe(take(1))\r\n      .subscribe((token) => {\r\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\r\n          this.logoutCustomer();\r\n        }\r\n        this.asmAuthService.logoutCustomerSupportAgent();\r\n      });\r\n  }\r\n\r\n  logoutCustomer(): void {\r\n    this.authService.logout();\r\n    this.routingService.go({ cxRoute: 'home' });\r\n  }\r\n\r\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\r\n    return this.authService\r\n      .getUserToken()\r\n      .pipe(\r\n        mergeMap((userToken) =>\r\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * We're currently only removing the persisted storage in the browser\r\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\r\n   * optimsiations we could think of:\r\n   * - drop the `asm` parameter from the URL, in case it's still there\r\n   * - remove the generated UI from the DOM (outlets currently do not support this)\r\n   */\r\n  unload() {\r\n    if (this.winRef.localStorage) {\r\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  HostBinding,\r\n  OnInit,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  AsmAuthService,\r\n  AsmService,\r\n  AuthService,\r\n  GlobalMessageService,\r\n  GlobalMessageType,\r\n  RoutingService,\r\n  User,\r\n  UserService,\r\n  UserToken,\r\n} from '@spartacus/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, switchMap, take } from 'rxjs/operators';\r\nimport { AsmComponentService } from '../services/asm-component.service';\r\n\r\n@Component({\r\n  selector: 'cx-asm-main-ui',\r\n  templateUrl: './asm-main-ui.component.html',\r\n  styleUrls: ['./asm-main-ui.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class AsmMainUiComponent implements OnInit {\r\n  csAgentToken$: Observable<UserToken>;\r\n  csAgentTokenLoading$: Observable<boolean>;\r\n  customer$: Observable<User>;\r\n  isCollapsed$: Observable<boolean>;\r\n\r\n  @HostBinding('class.hidden') disabled = false;\r\n\r\n  private startingCustomerSession = false;\r\n\r\n  constructor(\r\n    protected authService: AuthService,\r\n    protected asmAuthService: AsmAuthService,\r\n    protected userService: UserService,\r\n    protected asmComponentService: AsmComponentService,\r\n    protected globalMessageService: GlobalMessageService,\r\n    protected routingService: RoutingService,\r\n    protected asmService: AsmService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\r\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\r\n    this.customer$ = this.authService.getUserToken().pipe(\r\n      switchMap((token) => {\r\n        if (token && !!token.access_token) {\r\n          this.handleCustomerSessionStartRedirection(token);\r\n          return this.userService.get();\r\n        } else {\r\n          return of(undefined);\r\n        }\r\n      })\r\n    );\r\n    this.isCollapsed$ = this.asmService\r\n      .getAsmUiState()\r\n      .pipe(map((uiState) => uiState.collapsed));\r\n  }\r\n\r\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\r\n    if (\r\n      this.startingCustomerSession &&\r\n      this.asmAuthService.isCustomerEmulationToken(token)\r\n    ) {\r\n      this.startingCustomerSession = false;\r\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\r\n      this.routingService.go('/');\r\n    }\r\n  }\r\n\r\n  loginCustomerSupportAgent({\r\n    userId,\r\n    password,\r\n  }: {\r\n    userId: string;\r\n    password: string;\r\n  }): void {\r\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\r\n  }\r\n\r\n  logout(): void {\r\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\r\n  }\r\n\r\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\r\n    this.asmAuthService\r\n      .getCustomerSupportAgentToken()\r\n      .pipe(take(1))\r\n      .subscribe((customerSupportAgentToken) =>\r\n        this.asmAuthService.startCustomerEmulationSession(\r\n          customerSupportAgentToken,\r\n          customerId\r\n        )\r\n      )\r\n      .unsubscribe();\r\n    this.startingCustomerSession = true;\r\n  }\r\n\r\n  hideUi(): void {\r\n    this.disabled = true;\r\n    this.asmComponentService.unload();\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectorRef,\r\n  Component,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\nimport { AsmComponentService } from '../services/asm-component.service';\r\n\r\n@Component({\r\n  selector: 'cx-asm-session-timer',\r\n  templateUrl: './asm-session-timer.component.html',\r\n  styleUrls: ['./asm-session-timer.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\r\n  private subscriptions = new Subscription();\r\n  private interval: any;\r\n  private maxStartDelayInSeconds = 60000;\r\n  timeLeft: number;\r\n\r\n  constructor(\r\n    private config: AsmConfig,\r\n    private asmComponentService: AsmComponentService,\r\n    private authService: AuthService,\r\n    private routingService: RoutingService,\r\n    private changeDetectorRef: ChangeDetectorRef\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.timeLeft = this.getTimerStartDelayInSeconds();\r\n    this.interval = setInterval(() => {\r\n      if (this.timeLeft > 0) {\r\n        this.timeLeft--;\r\n      } else {\r\n        clearInterval(this.interval);\r\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\r\n      }\r\n      this.changeDetectorRef.markForCheck();\r\n    }, 1000);\r\n\r\n    this.resetOnNavigate();\r\n    this.resetOnCustomerSessionChange();\r\n  }\r\n\r\n  private resetOnNavigate(): void {\r\n    this.subscriptions.add(\r\n      this.routingService.isNavigating().subscribe((isNavigating) => {\r\n        if (isNavigating) {\r\n          this.resetTimer();\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private resetOnCustomerSessionChange(): void {\r\n    this.subscriptions.add(\r\n      this.authService\r\n        .getOccUserId()\r\n        .pipe(distinctUntilChanged())\r\n        .subscribe(() => this.resetTimer())\r\n    );\r\n  }\r\n\r\n  resetTimer(): void {\r\n    if (this.timeLeft > 0) {\r\n      this.timeLeft = this.getTimerStartDelayInSeconds();\r\n    }\r\n  }\r\n\r\n  private getTimerStartDelayInSeconds(): number {\r\n    if (\r\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\r\n      this.maxStartDelayInSeconds\r\n    ) {\r\n      return this.maxStartDelayInSeconds;\r\n    } else {\r\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.unsubscribe();\r\n    if (this.interval) {\r\n      clearInterval(this.interval);\r\n    }\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { AsmService } from '@spartacus/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'cx-asm-toggle-ui',\r\n  templateUrl: './asm-toggle-ui.component.html',\r\n  styleUrls: ['./asm-toggle-ui.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class AsmToggleUiComponent implements OnInit, OnDestroy {\r\n  private subscription = new Subscription();\r\n  isCollapsed: boolean;\r\n\r\n  constructor(protected asmService: AsmService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.subscription.add(\r\n      this.asmService.getAsmUiState().subscribe((uiState) => {\r\n        this.isCollapsed = uiState.collapsed;\r\n      })\r\n    );\r\n  }\r\n\r\n  toggleUi(): void {\r\n    this.asmService.updateAsmUiState({ collapsed: !this.isCollapsed });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'cx-csagent-login-form',\r\n  templateUrl: './csagent-login-form.component.html',\r\n  styleUrls: ['./csagent-login-form.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CSAgentLoginFormComponent implements OnInit {\r\n  csAgentLoginForm: FormGroup;\r\n\r\n  @Input()\r\n  csAgentTokenLoading = false;\r\n\r\n  @Output()\r\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\r\n\r\n  constructor(private fb: FormBuilder) {}\r\n\r\n  ngOnInit(): void {\r\n    this.csAgentLoginForm = this.fb.group({\r\n      userId: ['', [Validators.required]],\r\n      password: ['', [Validators.required]],\r\n    });\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.csAgentLoginForm.valid) {\r\n      this.submitEvent.emit({\r\n        userId: this.csAgentLoginForm.get('userId').value,\r\n        password: this.csAgentLoginForm.get('password').value,\r\n      });\r\n    } else {\r\n      this.csAgentLoginForm.markAllAsTouched();\r\n    }\r\n  }\r\n}\r\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { User, UserService } from '@spartacus/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { AsmComponentService } from '../services/asm-component.service';\r\n\r\n@Component({\r\n  selector: 'cx-customer-emulation',\r\n  templateUrl: './customer-emulation.component.html',\r\n  styleUrls: ['./customer-emulation.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\r\n  customer: User;\r\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    protected asmComponentService: AsmComponentService,\r\n    protected userService: UserService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.subscription.add(\r\n      this.userService.get().subscribe((user) => (this.customer = user))\r\n    );\r\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\r\n  }\r\n\r\n  logoutCustomer() {\r\n    this.asmComponentService.logoutCustomer();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport {\r\n  AsmConfig,\r\n  AsmService,\r\n  CustomerSearchPage,\r\n  User,\r\n} from '@spartacus/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'cx-customer-selection',\r\n  templateUrl: './customer-selection.component.html',\r\n  styleUrls: ['./customer-selection.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  // tslint:disable-next-line:no-host-metadata-property\r\n  host: {\r\n    '(document:click)': 'onDocumentClick($event)',\r\n  },\r\n})\r\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\r\n  customerSelectionForm: FormGroup;\r\n  private subscription = new Subscription();\r\n  searchResultsLoading$: Observable<boolean>;\r\n  searchResults: Observable<CustomerSearchPage>;\r\n  selectedCustomer: User;\r\n\r\n  @Output()\r\n  submitEvent = new EventEmitter<{ customerId: string }>();\r\n\r\n  @ViewChild('resultList') resultList: ElementRef;\r\n  @ViewChild('searchTerm') searchTerm: ElementRef;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private asmService: AsmService,\r\n    private config: AsmConfig\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.customerSelectionForm = this.fb.group({\r\n      searchTerm: ['', Validators.required],\r\n    });\r\n    this.asmService.customerSearchReset();\r\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\r\n    this.searchResults = this.asmService.getCustomerSearchResults();\r\n\r\n    this.subscription.add(\r\n      this.customerSelectionForm.controls.searchTerm.valueChanges\r\n        .pipe(debounceTime(300))\r\n        .subscribe((searchTermValue) => {\r\n          this.handleSearchTerm(searchTermValue);\r\n        })\r\n    );\r\n  }\r\n\r\n  private handleSearchTerm(searchTermValue: string) {\r\n    if (\r\n      Boolean(this.selectedCustomer) &&\r\n      searchTermValue !== this.selectedCustomer.name\r\n    ) {\r\n      this.selectedCustomer = undefined;\r\n    }\r\n    if (Boolean(this.selectedCustomer)) {\r\n      return;\r\n    }\r\n    this.asmService.customerSearchReset();\r\n    if (searchTermValue.trim().length >= 3) {\r\n      this.asmService.customerSearch({\r\n        query: searchTermValue,\r\n        pageSize: this.config.asm.customerSearch.maxResults,\r\n      });\r\n    }\r\n  }\r\n\r\n  selectCustomerFromList(customer: User) {\r\n    this.selectedCustomer = customer;\r\n    this.customerSelectionForm.controls.searchTerm.setValue(\r\n      this.selectedCustomer.name\r\n    );\r\n    this.asmService.customerSearchReset();\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.customerSelectionForm.valid && Boolean(this.selectedCustomer)) {\r\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\r\n    } else {\r\n      this.customerSelectionForm.markAllAsTouched();\r\n    }\r\n  }\r\n\r\n  onDocumentClick(event) {\r\n    if (Boolean(this.resultList)) {\r\n      if (\r\n        this.resultList.nativeElement.contains(event.target) ||\r\n        this.searchTerm.nativeElement.contains(event.target)\r\n      ) {\r\n        return;\r\n      } else {\r\n        this.asmService.customerSearchReset();\r\n      }\r\n    }\r\n  }\r\n\r\n  closeResults() {\r\n    this.asmService.customerSearchReset();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n    this.asmService.customerSearchReset();\r\n  }\r\n}\r\n","import { LayoutConfig } from '../../layout/config/layout-config';\r\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\r\n\r\nexport const defaultAsmLayoutConfig: LayoutConfig = {\r\n  launch: {\r\n    ASM: {\r\n      outlet: 'cx-storefront',\r\n      component: AsmMainUiComponent,\r\n    },\r\n  },\r\n};\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  AsmModule as AsmCoreModule,\r\n  I18nModule,\r\n  provideConfig,\r\n} from '@spartacus/core';\r\nimport { FormErrorsModule } from '../../shared/index';\r\nimport { AsmLoaderModule } from './asm-loader.module';\r\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\r\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\r\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\r\nimport { AsmToggleUiComponent } from './asm-toggle-ui/asm-toggle-ui.component';\r\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\r\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\r\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\r\nimport { defaultAsmLayoutConfig } from './default-asm-layout.config';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    I18nModule,\r\n    AsmCoreModule.forRoot(),\r\n    AsmLoaderModule,\r\n    FormErrorsModule,\r\n  ],\r\n  declarations: [\r\n    AsmMainUiComponent,\r\n    CSAgentLoginFormComponent,\r\n    CustomerSelectionComponent,\r\n    AsmSessionTimerComponent,\r\n    FormatTimerPipe,\r\n    CustomerEmulationComponent,\r\n    AsmToggleUiComponent,\r\n  ],\r\n  providers: [provideConfig(defaultAsmLayoutConfig)],\r\n  entryComponents: [AsmMainUiComponent],\r\n})\r\nexport class AsmModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  Product,\r\n  ProductScope,\r\n  ProductService,\r\n  RoutingService,\r\n} from '@spartacus/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CurrentProductService {\r\n  constructor(\r\n    private routingService: RoutingService,\r\n    private productService: ProductService\r\n  ) {}\r\n\r\n  protected readonly DEFAULT_PRODUCT_SCOPE = ProductScope.DETAILS;\r\n\r\n  /**\r\n   * Will emit current product or null, if there is no current product (i.e. we are not on PDP)\r\n   *\r\n   * @param scopes\r\n   */\r\n  getProduct(\r\n    scopes?: (ProductScope | string)[] | ProductScope | string\r\n  ): Observable<Product | null> {\r\n    return this.routingService.getRouterState().pipe(\r\n      map((state) => state.state.params['productCode']),\r\n      switchMap((productCode: string) => {\r\n        return productCode\r\n          ? this.productService.get(\r\n              productCode,\r\n              scopes || this.DEFAULT_PRODUCT_SCOPE\r\n            )\r\n          : of(null);\r\n      }),\r\n      filter((x) => x !== undefined),\r\n      distinctUntilChanged()\r\n    );\r\n  }\r\n}\r\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport {\r\n  Cart,\r\n  ActiveCartService,\r\n  OrderEntry,\r\n  PromotionLocation,\r\n  PromotionResult,\r\n} from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\r\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\r\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\r\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\r\n\r\n@Component({\r\n  selector: 'cx-added-to-cart-dialog',\r\n  templateUrl: './added-to-cart-dialog.component.html',\r\n})\r\nexport class AddedToCartDialogComponent implements OnInit {\r\n  iconTypes = ICON_TYPE;\r\n\r\n  entry$: Observable<OrderEntry>;\r\n  cart$: Observable<Cart>;\r\n  loaded$: Observable<boolean>;\r\n  increment: boolean;\r\n  orderPromotions$: Observable<PromotionResult[]>;\r\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\r\n\r\n  quantity = 0;\r\n  modalIsOpen = false;\r\n\r\n  @ViewChild('dialog', { read: ElementRef })\r\n  dialog: ElementRef;\r\n\r\n  form: FormGroup = new FormGroup({});\r\n\r\n  private quantityControl$: Observable<FormControl>;\r\n\r\n  constructor(\r\n    protected modalService: ModalService,\r\n    protected cartService: ActiveCartService,\r\n    protected promotionService: PromotionService\r\n  ) {}\r\n  /**\r\n   * Returns an observable formControl with the quantity of the cartEntry,\r\n   * but also updates the entry in case of a changed value.\r\n   * The quantity can be set to zero in order to remove the entry.\r\n   */\r\n  getQuantityControl(): Observable<FormControl> {\r\n    if (!this.quantityControl$) {\r\n      this.quantityControl$ = this.entry$.pipe(\r\n        filter((e) => !!e),\r\n        map((entry) => this.getFormControl(entry)),\r\n        switchMap(() =>\r\n          this.form.valueChanges.pipe(\r\n            // tslint:disable-next-line:deprecation\r\n            startWith(null),\r\n            tap((valueChange) => {\r\n              if (valueChange) {\r\n                this.cartService.updateEntry(\r\n                  valueChange.entryNumber,\r\n                  valueChange.quantity\r\n                );\r\n                if (valueChange.quantity === 0) {\r\n                  this.dismissModal('Removed');\r\n                }\r\n              } else {\r\n                this.form.markAsPristine();\r\n              }\r\n            })\r\n          )\r\n        ),\r\n        map(() => <FormControl>this.form.get('quantity'))\r\n      );\r\n    }\r\n    return this.quantityControl$;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\r\n      this.promotionLocation\r\n    );\r\n  }\r\n\r\n  private getFormControl(entry: OrderEntry): FormControl {\r\n    if (!this.form.get('quantity')) {\r\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\r\n      this.form.addControl('quantity', quantity);\r\n\r\n      const entryNumber = new FormControl(entry.entryNumber);\r\n      this.form.addControl('entryNumber', entryNumber);\r\n    }\r\n    return <FormControl>this.form.get('quantity');\r\n  }\r\n\r\n  dismissModal(reason?: any): void {\r\n    this.modalService.dismissActiveModal(reason);\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { ActiveCartService, OrderEntry, Product } from '@spartacus/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { ModalRef } from '../../../shared/components/modal/modal-ref';\r\nimport { ModalService } from '../../../shared/components/modal/modal.service';\r\nimport { CurrentProductService } from '../../product/current-product.service';\r\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\r\n\r\n@Component({\r\n  selector: 'cx-add-to-cart',\r\n  templateUrl: './add-to-cart.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AddToCartComponent implements OnInit, OnDestroy {\r\n  @Input() productCode: string;\r\n  @Input() showQuantity = true;\r\n\r\n  /**\r\n   * As long as we do not support #5026, we require product input, as we need\r\n   *  a reference to the product model to fetch the stock data.\r\n   */\r\n  @Input() product: Product;\r\n\r\n  maxQuantity: number;\r\n  modalRef: ModalRef;\r\n\r\n  hasStock = false;\r\n  quantity = 1;\r\n  increment = false;\r\n  cartEntry$: Observable<OrderEntry>;\r\n\r\n  subscription: Subscription;\r\n\r\n  addToCartForm = new FormGroup({\r\n    quantity: new FormControl(1),\r\n  });\r\n\r\n  constructor(\r\n    protected modalService: ModalService,\r\n    protected currentProductService: CurrentProductService,\r\n    private cd: ChangeDetectorRef,\r\n    protected activeCartService: ActiveCartService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    if (this.product) {\r\n      this.productCode = this.product.code;\r\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\r\n      this.setStockInfo(this.product);\r\n      this.cd.markForCheck();\r\n    } else if (this.productCode) {\r\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\r\n      // force hasStock and quantity for the time being, as we do not have more info:\r\n      this.quantity = 1;\r\n      this.hasStock = true;\r\n      this.cd.markForCheck();\r\n    } else {\r\n      this.subscription = this.currentProductService\r\n        .getProduct()\r\n        .pipe(filter(Boolean))\r\n        .subscribe((product: Product) => {\r\n          this.productCode = product.code;\r\n          this.setStockInfo(product);\r\n          this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\r\n          this.cd.markForCheck();\r\n        });\r\n    }\r\n  }\r\n\r\n  private setStockInfo(product: Product): void {\r\n    this.quantity = 1;\r\n    this.hasStock =\r\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\r\n    if (this.hasStock && product.stock.stockLevel) {\r\n      this.maxQuantity = product.stock.stockLevel;\r\n    }\r\n  }\r\n\r\n  updateCount(value: number): void {\r\n    this.quantity = value;\r\n  }\r\n\r\n  addToCart() {\r\n    const quantity = this.addToCartForm.get('quantity').value;\r\n    if (!this.productCode || quantity <= 0) {\r\n      return;\r\n    }\r\n    // check item is already present in the cart\r\n    // so modal will have proper header text displayed\r\n    this.activeCartService\r\n      .getEntry(this.productCode)\r\n      .subscribe((entry) => {\r\n        if (entry) {\r\n          this.increment = true;\r\n        }\r\n        this.openModal();\r\n        this.activeCartService.addEntry(this.productCode, quantity);\r\n        this.increment = false;\r\n      })\r\n      .unsubscribe();\r\n  }\r\n\r\n  private openModal() {\r\n    let modalInstance: any;\r\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\r\n      centered: true,\r\n      size: 'lg',\r\n    });\r\n\r\n    modalInstance = this.modalRef.componentInstance;\r\n    modalInstance.entry$ = this.cartEntry$;\r\n    modalInstance.cart$ = this.activeCartService.getActive();\r\n    modalInstance.loaded$ = this.activeCartService.isStable();\r\n    modalInstance.quantity = this.quantity;\r\n    modalInstance.increment = this.increment;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { PromotionsComponent } from './promotions.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [PromotionsComponent],\r\n  exports: [PromotionsComponent],\r\n})\r\nexport class PromotionsModule {}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\nimport { Voucher, CartVoucherService } from '@spartacus/core';\r\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\r\n\r\n@Component({\r\n  selector: 'cx-applied-coupons',\r\n  templateUrl: './applied-coupons.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AppliedCouponsComponent {\r\n  @Input()\r\n  vouchers: Voucher[];\r\n  @Input()\r\n  cartIsLoading = false;\r\n  @Input()\r\n  isReadOnly = false;\r\n\r\n  iconTypes = ICON_TYPE;\r\n\r\n  constructor(private cartVoucherService: CartVoucherService) {}\r\n\r\n  public get sortedVouchers(): Voucher[] {\r\n    this.vouchers = this.vouchers || [];\r\n    return this.vouchers.slice().sort((a, b) => {\r\n      return a.code.localeCompare(b.code);\r\n    });\r\n  }\r\n\r\n  removeVoucher(voucherId: string) {\r\n    this.cartVoucherService.removeVoucher(voucherId);\r\n  }\r\n}\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport {\r\n  ActiveCartService,\r\n  Cart,\r\n  CartVoucherService,\r\n  CustomerCoupon,\r\n  CustomerCouponSearchResult,\r\n  CustomerCouponService,\r\n} from '@spartacus/core';\r\nimport { combineLatest, Observable, Subscription } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'cx-cart-coupon',\r\n  templateUrl: './cart-coupon.component.html',\r\n})\r\nexport class CartCouponComponent implements OnInit, OnDestroy {\r\n  MAX_CUSTOMER_COUPON_PAGE = 100;\r\n  couponForm: FormGroup;\r\n  cartIsLoading$: Observable<boolean>;\r\n  cart$: Observable<Cart>;\r\n  cartId: string;\r\n  applicableCoupons: CustomerCoupon[];\r\n\r\n  private ignoreCloseEvent = false;\r\n\r\n  private subscription = new Subscription();\r\n\r\n  couponBoxIsActive = false;\r\n\r\n  constructor(\r\n    protected cartVoucherService: CartVoucherService,\r\n    protected formBuilder: FormBuilder,\r\n    protected customerCouponService: CustomerCouponService,\r\n    protected activeCartService: ActiveCartService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    if (this.customerCouponService) {\r\n      this.customerCouponService.loadCustomerCoupons(\r\n        this.MAX_CUSTOMER_COUPON_PAGE\r\n      );\r\n    }\r\n\r\n    this.cart$ = combineLatest([\r\n      this.activeCartService.getActive(),\r\n      this.activeCartService.getActiveCartId(),\r\n      this.customerCouponService.getCustomerCoupons(\r\n        this.MAX_CUSTOMER_COUPON_PAGE\r\n      ),\r\n    ]).pipe(\r\n      tap(\r\n        ([cart, activeCardId, customerCoupons]: [\r\n          Cart,\r\n          string,\r\n          CustomerCouponSearchResult\r\n        ]) => {\r\n          this.cartId = activeCardId;\r\n          this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\r\n        }\r\n      ),\r\n      map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\r\n    );\r\n\r\n    this.cartIsLoading$ = this.activeCartService\r\n      .isStable()\r\n      .pipe(map((loaded) => !loaded));\r\n\r\n    this.cartVoucherService.resetAddVoucherProcessingState();\r\n\r\n    this.couponForm = this.formBuilder.group({\r\n      couponCode: ['', [Validators.required]],\r\n    });\r\n\r\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\r\n    this.subscription.add(\r\n      this.cartVoucherService\r\n        .getAddVoucherResultSuccess()\r\n        .subscribe((success) => {\r\n          this.onSuccess(success);\r\n        })\r\n    );\r\n\r\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\r\n    this.subscription.add(\r\n      this.cartVoucherService.getAddVoucherResultError().subscribe((error) => {\r\n        this.onError(error);\r\n      })\r\n    );\r\n  }\r\n\r\n  protected onError(error: boolean) {\r\n    if (error) {\r\n      this.customerCouponService.loadCustomerCoupons(\r\n        this.MAX_CUSTOMER_COUPON_PAGE\r\n      );\r\n      this.cartVoucherService.resetAddVoucherProcessingState();\r\n    }\r\n  }\r\n\r\n  onSuccess(success: boolean) {\r\n    if (success) {\r\n      this.couponForm.reset();\r\n      this.cartVoucherService.resetAddVoucherProcessingState();\r\n    }\r\n  }\r\n\r\n  protected getApplicableCustomerCoupons(\r\n    cart: Cart,\r\n    coupons: CustomerCoupon[]\r\n  ): void {\r\n    this.applicableCoupons = coupons || [];\r\n    if (cart.appliedVouchers) {\r\n      cart.appliedVouchers.forEach((appliedVoucher) => {\r\n        this.applicableCoupons = this.applicableCoupons.filter(\r\n          (coupon) => coupon.couponId !== appliedVoucher.code\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  applyVoucher(): void {\r\n    if (this.couponForm.valid) {\r\n      this.cartVoucherService.addVoucher(\r\n        this.couponForm.value.couponCode,\r\n        this.cartId\r\n      );\r\n    } else {\r\n      this.couponForm.markAllAsTouched();\r\n    }\r\n  }\r\n\r\n  applyCustomerCoupon(couponId: string): void {\r\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\r\n    this.couponBoxIsActive = false;\r\n  }\r\n\r\n  close(event: UIEvent): void {\r\n    if (!this.ignoreCloseEvent) {\r\n      this.couponBoxIsActive = false;\r\n      if (event && event.target) {\r\n        (<HTMLElement>event.target).blur();\r\n      }\r\n    }\r\n    this.ignoreCloseEvent = false;\r\n  }\r\n\r\n  disableClose(): void {\r\n    this.ignoreCloseEvent = true;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n    this.cartVoucherService.resetAddVoucherProcessingState();\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\r\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\r\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\r\nimport { CartCouponComponent } from './cart-coupon.component';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\nimport { FormErrorsModule } from '../../../shared/index';\r\n\r\n@NgModule({\r\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\r\n  exports: [CartCouponComponent, AppliedCouponsComponent],\r\n  imports: [\r\n    CommonModule,\r\n    NgSelectModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    I18nModule,\r\n    IconModule,\r\n    FormErrorsModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        CartApplyCouponComponent: {\r\n          component: CartCouponComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n\r\n  entryComponents: [CartCouponComponent],\r\n})\r\nexport class CartCouponModule {}\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport {\r\n  ActiveCartService,\r\n  ConsignmentEntry,\r\n  PromotionLocation,\r\n  SelectiveCartService,\r\n} from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport {\r\n  CartItemComponentOptions,\r\n  Item,\r\n} from '../cart-item/cart-item.component';\r\n\r\n@Component({\r\n  selector: 'cx-cart-item-list',\r\n  templateUrl: './cart-item-list.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CartItemListComponent {\r\n  @Input() readonly = false;\r\n\r\n  @Input() hasHeader = true;\r\n\r\n  @Input() options: CartItemComponentOptions = {\r\n    isSaveForLater: false,\r\n    optionalBtn: null,\r\n  };\r\n\r\n  private _items: Item[] = [];\r\n  form: FormGroup;\r\n\r\n  @Input('items')\r\n  // TODO: currently we're getting a new array of items if the cart changes.\r\n  // pretty annoying as it forces a repaint on the screen,\r\n  // which is noticable in the UI.\r\n  set items(items: Item[]) {\r\n    this.resolveItems(items);\r\n    this.createForm();\r\n  }\r\n  get items(): Item[] {\r\n    return this._items;\r\n  }\r\n\r\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\r\n\r\n  @Input('cartIsLoading') set setLoading(value: boolean) {\r\n    if (!this.readonly) {\r\n      // Whenver the cart is loading, we disable the complete form\r\n      // to avoid any user interaction with the cart.\r\n      value\r\n        ? this.form.disable({ emitEvent: false })\r\n        : this.form.enable({ emitEvent: false });\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    protected activeCartService: ActiveCartService,\r\n    protected selectiveCartService: SelectiveCartService\r\n  ) {}\r\n\r\n  /**\r\n   * The items we're getting form the input do not have a consistent model.\r\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\r\n   */\r\n  private resolveItems(items: Item[]): void {\r\n    if (items.every((item) => item.hasOwnProperty('orderEntry'))) {\r\n      this._items = items.map((consignmentEntry) => {\r\n        const entry = Object.assign(\r\n          {},\r\n          (consignmentEntry as ConsignmentEntry).orderEntry\r\n        );\r\n        entry.quantity = consignmentEntry.quantity;\r\n        return entry;\r\n      });\r\n    } else {\r\n      this._items = items;\r\n    }\r\n  }\r\n\r\n  private createForm(): void {\r\n    this.form = new FormGroup({});\r\n    this._items.forEach((item) => {\r\n      const { code } = item.product;\r\n      const group = new FormGroup({\r\n        entryNumber: new FormControl((<any>item).entryNumber),\r\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\r\n      });\r\n      if (!item.updateable || this.readonly) {\r\n        group.disable();\r\n      }\r\n      this.form.addControl(code, group);\r\n    });\r\n  }\r\n\r\n  removeEntry(item: Item): void {\r\n    if (this.selectiveCartService && this.options.isSaveForLater) {\r\n      this.selectiveCartService.removeEntry(item);\r\n    } else {\r\n      this.activeCartService.removeEntry(item);\r\n    }\r\n    delete this.form.controls[item.product.code];\r\n  }\r\n\r\n  getControl(item: Item): Observable<FormGroup> {\r\n    return this.form.get(item.product.code).valueChanges.pipe(\r\n      // tslint:disable-next-line:deprecation\r\n      startWith(null),\r\n      map((value) => {\r\n        if (value && this.selectiveCartService && this.options.isSaveForLater) {\r\n          this.selectiveCartService.updateEntry(\r\n            value.entryNumber,\r\n            value.quantity\r\n          );\r\n        } else if (value) {\r\n          this.activeCartService.updateEntry(value.entryNumber, value.quantity);\r\n        }\r\n      }),\r\n      map(() => <FormGroup>this.form.get(item.product.code))\r\n    );\r\n  }\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { PromotionLocation, PromotionResult } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\r\n\r\nexport interface Item {\r\n  product?: any;\r\n  quantity?: any;\r\n  basePrice?: any;\r\n  totalPrice?: any;\r\n  updateable?: boolean;\r\n}\r\n\r\nexport interface CartItemComponentOptions {\r\n  isSaveForLater?: boolean;\r\n  optionalBtn?: any;\r\n}\r\n\r\n@Component({\r\n  selector: 'cx-cart-item',\r\n  templateUrl: './cart-item.component.html',\r\n})\r\nexport class CartItemComponent implements OnInit {\r\n  @Input() compact = false;\r\n  @Input() item: Item;\r\n  @Input() readonly = false;\r\n  @Input() quantityControl: FormControl;\r\n\r\n  @Output() view = new EventEmitter<any>();\r\n\r\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\r\n\r\n  // TODO: evaluate whether this is generic enough\r\n  @Input() options: CartItemComponentOptions = {\r\n    isSaveForLater: false,\r\n    optionalBtn: null,\r\n  };\r\n\r\n  appliedProductPromotions$: Observable<PromotionResult[]>;\r\n\r\n  constructor(protected promotionService: PromotionService) {}\r\n\r\n  ngOnInit() {\r\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\r\n      this.item,\r\n      this.promotionLocation\r\n    );\r\n  }\r\n\r\n  isProductOutOfStock(product: any) {\r\n    // TODO Move stocklevelstatuses across the app to an enum\r\n    return (\r\n      product &&\r\n      product.stock &&\r\n      product.stock.stockLevelStatus === 'outOfStock'\r\n    );\r\n  }\r\n\r\n  removeItem() {\r\n    this.quantityControl.setValue(0);\r\n    this.quantityControl.markAsDirty();\r\n  }\r\n\r\n  viewItem() {\r\n    this.view.emit();\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\r\nimport { ItemCounterModule } from '../../../shared/components/item-counter/item-counter.module';\r\nimport { MediaModule } from '../../../shared/components/media/media.module';\r\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\r\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\r\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\r\nimport { CartItemComponent } from './cart-item/cart-item.component';\r\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    CartCouponModule,\r\n    ReactiveFormsModule,\r\n    UrlModule,\r\n    NgbModule,\r\n    PromotionsModule,\r\n    I18nModule,\r\n    MediaModule,\r\n    ItemCounterModule,\r\n    FeaturesConfigModule,\r\n  ],\r\n  declarations: [\r\n    CartItemComponent,\r\n    OrderSummaryComponent,\r\n    CartItemListComponent,\r\n  ],\r\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\r\n})\r\nexport class CartSharedModule {}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  CmsConfig,\r\n  FeaturesConfigModule,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\r\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/keyboard-focus.module';\r\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\r\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\r\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\r\nimport { AddToCartComponent } from './add-to-cart.component';\r\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    CartSharedModule,\r\n    RouterModule,\r\n    SpinnerModule,\r\n    PromotionsModule,\r\n    FeaturesConfigModule,\r\n    UrlModule,\r\n    IconModule,\r\n    I18nModule,\r\n    ItemCounterModule,\r\n    KeyboardFocusModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        ProductAddToCartComponent: {\r\n          component: AddToCartComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\r\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\r\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\r\n})\r\nexport class AddToCartModule {}\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport {\r\n  ActiveCartService,\r\n  AuthService,\r\n  Cart,\r\n  OrderEntry,\r\n  PromotionLocation,\r\n  PromotionResult,\r\n  RoutingService,\r\n  SelectiveCartService,\r\n} from '@spartacus/core';\r\nimport { combineLatest, Observable, of } from 'rxjs';\r\nimport { filter, map, tap } from 'rxjs/operators';\r\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\r\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\r\n\r\n@Component({\r\n  selector: 'cx-cart-details',\r\n  templateUrl: './cart-details.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CartDetailsComponent implements OnInit {\r\n  cart$: Observable<Cart>;\r\n  entries$: Observable<OrderEntry[]>;\r\n  cartLoaded$: Observable<boolean>;\r\n  loggedIn = false;\r\n  orderPromotions$: Observable<PromotionResult[]>;\r\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\r\n  promotions$: Observable<PromotionResult[]>;\r\n  selectiveCartEnabled: boolean;\r\n\r\n  constructor(\r\n    protected activeCartService: ActiveCartService,\r\n    protected promotionService: PromotionService,\r\n    protected selectiveCartService: SelectiveCartService,\r\n    protected authService: AuthService,\r\n    protected routingService: RoutingService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.cart$ = this.activeCartService.getActive();\r\n    this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\r\n\r\n    this.entries$ = this.activeCartService\r\n      .getEntries()\r\n      .pipe(filter((entries) => entries.length > 0));\r\n\r\n    this.selectiveCartEnabled = this.selectiveCartService.isEnabled();\r\n\r\n    this.cartLoaded$ = combineLatest([\r\n      this.activeCartService.isStable(),\r\n      this.selectiveCartEnabled\r\n        ? this.selectiveCartService.getLoaded()\r\n        : of(false),\r\n      this.authService.isUserLoggedIn(),\r\n    ]).pipe(\r\n      tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\r\n      map(([cartLoaded, sflLoaded, loggedIn]) =>\r\n        loggedIn && this.selectiveCartEnabled\r\n          ? cartLoaded && sflLoaded\r\n          : cartLoaded\r\n      )\r\n    );\r\n\r\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\r\n      this.promotionLocation\r\n    );\r\n  }\r\n\r\n  saveForLater(item: Item) {\r\n    if (this.loggedIn) {\r\n      this.activeCartService.removeEntry(item);\r\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\r\n    } else {\r\n      this.routingService.go({ cxRoute: 'login' });\r\n    }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  CmsConfig,\r\n  FeaturesConfigModule,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\r\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\r\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\r\nimport { CartDetailsComponent } from './cart-details.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CartSharedModule,\r\n    CommonModule,\r\n    CartCouponModule,\r\n    RouterModule,\r\n    UrlModule,\r\n    PromotionsModule,\r\n    FeaturesConfigModule,\r\n    I18nModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        CartComponent: {\r\n          component: CartDetailsComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [CartDetailsComponent],\r\n  exports: [CartDetailsComponent],\r\n  entryComponents: [CartDetailsComponent],\r\n})\r\nexport class CartDetailsModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate } from '@angular/router';\r\nimport { ActiveCartService, Cart, RoutingService } from '@spartacus/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CartNotEmptyGuard implements CanActivate {\r\n  constructor(\r\n    protected routingService: RoutingService,\r\n    protected activeCartService: ActiveCartService\r\n  ) {}\r\n\r\n  canActivate(): Observable<boolean> {\r\n    return combineLatest([\r\n      this.activeCartService.getActive(),\r\n      this.activeCartService.isStable(),\r\n    ]).pipe(\r\n      filter(([_, loaded]) => loaded),\r\n      map(([cart]) => {\r\n        if (this.isEmpty(cart)) {\r\n          this.routingService.go({ cxRoute: 'home' });\r\n          return false;\r\n        }\r\n        return true;\r\n      })\r\n    );\r\n  }\r\n\r\n  private isEmpty(cart: Cart): boolean {\r\n    return cart && !cart.totalItems;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActiveCartService, Cart, SelectiveCartService } from '@spartacus/core';\r\nimport { combineLatest, Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CartPageLayoutHandler implements PageLayoutHandler {\r\n  constructor(\r\n    protected activeCartService: ActiveCartService,\r\n    protected selectiveCartService: SelectiveCartService\r\n  ) {}\r\n\r\n  handle(\r\n    slots$: Observable<string[]>,\r\n    pageTemplate?: string,\r\n    section?: string\r\n  ) {\r\n    if (pageTemplate === 'CartPageTemplate' && !section) {\r\n      return combineLatest([\r\n        slots$,\r\n        this.activeCartService.getActive(),\r\n        this.selectiveCartService.isEnabled()\r\n          ? this.selectiveCartService.getCart()\r\n          : of({} as Cart),\r\n        this.activeCartService.getLoading(),\r\n      ]).pipe(\r\n        map(([slots, cart, selectiveCart, loadingCart]) => {\r\n          const exclude = (arr, args) =>\r\n            arr.filter((item) => args.every((arg) => arg !== item));\r\n          return Object.keys(cart).length === 0 && loadingCart\r\n            ? exclude(slots, [\r\n                'TopContent',\r\n                'CenterRightContentSlot',\r\n                'EmptyCartMiddleContent',\r\n              ])\r\n            : cart.totalItems\r\n            ? exclude(slots, ['EmptyCartMiddleContent'])\r\n            : selectiveCart.totalItems\r\n            ? exclude(slots, [\r\n                'EmptyCartMiddleContent',\r\n                'CenterRightContentSlot',\r\n              ])\r\n            : exclude(slots, ['TopContent', 'CenterRightContentSlot']);\r\n        })\r\n      );\r\n    }\r\n    return slots$;\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActiveCartService, Cart, OrderEntry } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'cx-cart-totals',\r\n  templateUrl: './cart-totals.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CartTotalsComponent implements OnInit {\r\n  cart$: Observable<Cart>;\r\n  entries$: Observable<OrderEntry[]>;\r\n\r\n  constructor(protected activeCartService: ActiveCartService) {}\r\n\r\n  ngOnInit() {\r\n    this.cart$ = this.activeCartService.getActive();\r\n    this.entries$ = this.activeCartService\r\n      .getEntries()\r\n      .pipe(filter((entries) => entries.length > 0));\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\r\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\r\nimport { CartTotalsComponent } from './cart-totals.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    UrlModule,\r\n    CartSharedModule,\r\n    I18nModule,\r\n    CartCouponModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        CartTotalsComponent: {\r\n          component: CartTotalsComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [CartTotalsComponent],\r\n  exports: [CartTotalsComponent],\r\n  entryComponents: [CartTotalsComponent],\r\n})\r\nexport class CartTotalsModule {}\r\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ActiveCartService } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map, startWith } from 'rxjs/operators';\r\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\r\n\r\n@Component({\r\n  selector: 'cx-mini-cart',\r\n  templateUrl: './mini-cart.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MiniCartComponent {\r\n  iconTypes = ICON_TYPE;\r\n\r\n  quantity$: Observable<number> = this.activeCartService.getActive().pipe(\r\n    startWith({ deliveryItemsQuantity: 0 }),\r\n    map((cart) => cart.deliveryItemsQuantity || 0)\r\n  );\r\n\r\n  total$: Observable<string> = this.activeCartService.getActive().pipe(\r\n    filter((cart) => !!cart.totalPrice),\r\n    map((cart) => cart.totalPrice.formattedValue)\r\n  );\r\n\r\n  constructor(protected activeCartService: ActiveCartService) {}\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\r\nimport { MiniCartComponent } from './mini-cart.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, RouterModule, UrlModule, IconModule, I18nModule],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        MiniCartComponent: {\r\n          component: MiniCartComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [MiniCartComponent],\r\n  exports: [MiniCartComponent],\r\n  entryComponents: [MiniCartComponent],\r\n})\r\nexport class MiniCartModule {}\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport {\r\n  AuthService,\r\n  OrderEntry,\r\n  Product,\r\n  WishListService,\r\n} from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map, tap } from 'rxjs/operators';\r\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\r\nimport { CurrentProductService } from '../../product/current-product.service';\r\n\r\n@Component({\r\n  selector: 'cx-add-to-wishlist',\r\n  templateUrl: './add-to-wish-list.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AddToWishListComponent {\r\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\r\n    filter((product) => Boolean(product)),\r\n    tap((product) => this.setStockInfo(product))\r\n  );\r\n\r\n  wishListEntries$: Observable<\r\n    OrderEntry[]\r\n  > = this.wishListService.getWishList().pipe(\r\n    filter((wishlist) => Boolean(wishlist)),\r\n    map((wishList) => wishList.entries)\r\n  );\r\n\r\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\r\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\r\n\r\n  hasStock = false;\r\n  iconTypes = ICON_TYPE;\r\n\r\n  constructor(\r\n    protected wishListService: WishListService,\r\n    protected currentProductService: CurrentProductService,\r\n    protected authService: AuthService\r\n  ) {}\r\n\r\n  add(product: Product): void {\r\n    this.wishListService.addEntry(product.code);\r\n  }\r\n\r\n  remove(entry: OrderEntry): void {\r\n    this.wishListService.removeEntry(entry);\r\n  }\r\n\r\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\r\n    const item = entries.find((entry) => entry.product.code === product.code);\r\n    return item;\r\n  }\r\n\r\n  private setStockInfo(product: Product): void {\r\n    this.hasStock =\r\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport { IconModule } from '../../misc/icon/icon.module';\r\nimport { AddToWishListComponent } from './add-to-wish-list.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, I18nModule, IconModule, RouterModule, UrlModule],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        AddToWishListComponent: {\r\n          component: AddToWishListComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [AddToWishListComponent],\r\n  entryComponents: [AddToWishListComponent],\r\n  exports: [AddToWishListComponent],\r\n})\r\nexport class AddToWishListModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  ActiveCartService,\r\n  Cart,\r\n  CmsParagraphComponent,\r\n  CmsService,\r\n  OrderEntry,\r\n  SelectiveCartService,\r\n} from '@spartacus/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\r\n\r\n@Component({\r\n  selector: 'cx-save-for-later',\r\n  templateUrl: './save-for-later.component.html',\r\n})\r\nexport class SaveForLaterComponent implements OnInit {\r\n  saveForLater$: Observable<Cart>;\r\n  cart$: Observable<Cart>;\r\n  entries$: Observable<OrderEntry[]>;\r\n  cartLoaded$: Observable<boolean>;\r\n  data$: Observable<CmsParagraphComponent>;\r\n  isCartEmpty$: Observable<boolean>;\r\n\r\n  constructor(\r\n    protected cmsService: CmsService,\r\n    protected cartService: ActiveCartService,\r\n    protected selectiveCartService: SelectiveCartService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.isCartEmpty$ = this.cartService\r\n      .getActive()\r\n      .pipe(map((cart) => !(cart && cart.totalItems && cart.totalItems > 0)));\r\n    this.saveForLater$ = this.selectiveCartService.getCart();\r\n    this.entries$ = this.selectiveCartService\r\n      .getEntries()\r\n      .pipe(filter((entries) => entries.length > 0));\r\n    this.cartLoaded$ = combineLatest([\r\n      this.cartService.isStable(),\r\n      this.selectiveCartService.getLoaded(),\r\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\r\n    this.data$ = this.cmsService.getComponentData(\r\n      'EmptyCartParagraphComponent'\r\n    );\r\n  }\r\n\r\n  moveToCart(item: Item) {\r\n    this.selectiveCartService.removeEntry(item);\r\n    this.cartService.addEntry(item.product.code, item.quantity);\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport {\r\n  CmsConfig,\r\n  FeaturesConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n} from '@spartacus/core';\r\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\r\nimport { SaveForLaterComponent } from './save-for-later.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, I18nModule, CartSharedModule],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\r\n      cmsComponents: {\r\n        SaveForLaterComponent: {\r\n          component: SaveForLaterComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [SaveForLaterComponent],\r\n  exports: [SaveForLaterComponent],\r\n  entryComponents: [SaveForLaterComponent],\r\n})\r\nexport class SaveForLaterModule {}\r\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { Injectable } from '@angular/core';\r\nimport { Config } from '@spartacus/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class SkipLinkConfig {\r\n  skipLinks?: SkipLink[];\r\n}\r\n\r\nexport abstract class SkipLink {\r\n  key: string;\r\n  i18nKey: string;\r\n  target?: HTMLElement;\r\n  position?: SkipLinkScrollPosition;\r\n}\r\n\r\nexport enum SkipLinkScrollPosition {\r\n  BEFORE = 'BEFORE',\r\n  AFTER = 'AFTER',\r\n}\r\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\r\nimport {\r\n  CheckoutConfig,\r\n  DeliveryModePreferences,\r\n} from '../config/checkout-config';\r\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CheckoutConfigService {\r\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\r\n  private express: boolean = this.checkoutConfig.checkout.express;\r\n  private guest: boolean = this.checkoutConfig.checkout.guest;\r\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\r\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\r\n\r\n  constructor(\r\n    private checkoutConfig: CheckoutConfig,\r\n    private routingConfigService: RoutingConfigService\r\n  ) {}\r\n\r\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\r\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\r\n  }\r\n\r\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\r\n    return this.getCheckoutStep(currentStepType).routeName;\r\n  }\r\n\r\n  getFirstCheckoutStepRoute(): string {\r\n    return this.steps[0].routeName;\r\n  }\r\n\r\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\r\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\r\n\r\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\r\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\r\n      : null;\r\n  }\r\n\r\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\r\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\r\n\r\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\r\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\r\n      : null;\r\n  }\r\n\r\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\r\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\r\n      activatedRoute\r\n    );\r\n\r\n    let stepIndex: number;\r\n    let index = 0;\r\n    for (const step of this.steps) {\r\n      if (\r\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\r\n      ) {\r\n        stepIndex = index;\r\n      } else {\r\n        index++;\r\n      }\r\n    }\r\n\r\n    return stepIndex >= 0 ? stepIndex : null;\r\n  }\r\n\r\n  protected compareDeliveryCost(\r\n    deliveryMode1: DeliveryMode,\r\n    deliveryMode2: DeliveryMode\r\n  ): number {\r\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\r\n      return 1;\r\n    } else if (\r\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\r\n    ) {\r\n      return -1;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  protected findMatchingDeliveryMode(\r\n    deliveryModes: DeliveryMode[],\r\n    index = 0\r\n  ): string {\r\n    switch (this.defaultDeliveryMode[index]) {\r\n      case DeliveryModePreferences.FREE:\r\n        if (deliveryModes[0].deliveryCost.value === 0) {\r\n          return deliveryModes[0].code;\r\n        }\r\n        break;\r\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\r\n        const leastExpensiveFound = deliveryModes.find(\r\n          (deliveryMode) => deliveryMode.deliveryCost.value !== 0\r\n        );\r\n        if (leastExpensiveFound) {\r\n          return leastExpensiveFound.code;\r\n        }\r\n        break;\r\n      case DeliveryModePreferences.MOST_EXPENSIVE:\r\n        return deliveryModes[deliveryModes.length - 1].code;\r\n      default:\r\n        const codeFound = deliveryModes.find(\r\n          (deliveryMode) =>\r\n            deliveryMode.code === this.defaultDeliveryMode[index]\r\n        );\r\n        if (codeFound) {\r\n          return codeFound.code;\r\n        }\r\n    }\r\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\r\n    return lastMode\r\n      ? deliveryModes[0].code\r\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\r\n  }\r\n\r\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\r\n    deliveryModes.sort(this.compareDeliveryCost);\r\n    return this.findMatchingDeliveryMode(deliveryModes);\r\n  }\r\n\r\n  isExpressCheckout(): boolean {\r\n    return this.express;\r\n  }\r\n\r\n  isGuestCheckout(): boolean {\r\n    return this.guest;\r\n  }\r\n\r\n  private getStepUrlFromActivatedRoute(\r\n    activatedRoute: ActivatedRoute\r\n  ): string | null {\r\n    return activatedRoute &&\r\n      activatedRoute.snapshot &&\r\n      activatedRoute.snapshot.url\r\n      ? `/${activatedRoute.snapshot.url.join('/')}`\r\n      : null;\r\n  }\r\n\r\n  private getStepUrlFromStepRoute(stepRoute: string): string {\r\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\r\n  }\r\n\r\n  private getCheckoutStepIndex(key: string, value: any): number | null {\r\n    return key && value\r\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\r\n      : null;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate } from '@angular/router';\r\nimport {\r\n  ActiveCartService,\r\n  AuthRedirectService,\r\n  AuthService,\r\n  RoutingService,\r\n  User,\r\n  UserToken,\r\n} from '@spartacus/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { CheckoutConfigService } from '../services/checkout-config.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CheckoutAuthGuard implements CanActivate {\r\n  constructor(\r\n    protected routingService: RoutingService,\r\n    protected authService: AuthService,\r\n    protected authRedirectService: AuthRedirectService,\r\n    protected checkoutConfigService: CheckoutConfigService,\r\n    protected activeCartService: ActiveCartService\r\n  ) {}\r\n\r\n  canActivate(): Observable<boolean> {\r\n    return combineLatest([\r\n      this.authService.getUserToken(),\r\n      this.activeCartService.getAssignedUser(),\r\n    ]).pipe(\r\n      map(([token, user]: [UserToken, User]) => {\r\n        if (!token.access_token) {\r\n          if (this.activeCartService.isGuestCart()) {\r\n            return Boolean(user);\r\n          }\r\n          if (this.checkoutConfigService.isGuestCheckout()) {\r\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\r\n          } else {\r\n            this.routingService.go({ cxRoute: 'login' });\r\n          }\r\n          this.authRedirectService.reportAuthGuard();\r\n        }\r\n        return !!token.access_token;\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  ActiveCartService,\r\n  Address,\r\n  CheckoutDeliveryService,\r\n  CheckoutPaymentService,\r\n  CheckoutService,\r\n  OCC_USER_ID_ANONYMOUS,\r\n  PaymentDetails,\r\n} from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport {\r\n  filter,\r\n  map,\r\n  shareReplay,\r\n  skipWhile,\r\n  switchMap,\r\n  tap,\r\n} from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CheckoutDetailsService {\r\n  cartId$: Observable<string>;\r\n  getCheckoutDetailsLoaded$: Observable<boolean>;\r\n\r\n  constructor(\r\n    protected checkoutService: CheckoutService,\r\n    protected checkoutDeliveryService: CheckoutDeliveryService,\r\n    protected checkoutPaymentService: CheckoutPaymentService,\r\n    protected activeCartService: ActiveCartService\r\n  ) {\r\n    this.cartId$ = this.activeCartService.getActive().pipe(\r\n      map((cartData) => {\r\n        if (\r\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\r\n          this.activeCartService.isGuestCart()\r\n        ) {\r\n          return cartData.guid;\r\n        }\r\n        return cartData.code;\r\n      }),\r\n      filter((cartId) => !!cartId)\r\n    );\r\n\r\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\r\n      tap((cartId) => this.checkoutService.loadCheckoutDetails(cartId)),\r\n      shareReplay(1),\r\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\r\n      skipWhile((loaded) => !loaded)\r\n    );\r\n  }\r\n\r\n  getDeliveryAddress(): Observable<Address> {\r\n    return this.getCheckoutDetailsLoaded$.pipe(\r\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\r\n    );\r\n  }\r\n\r\n  getSelectedDeliveryModeCode(): Observable<string> {\r\n    return this.getCheckoutDetailsLoaded$.pipe(\r\n      switchMap(() =>\r\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\r\n      )\r\n    );\r\n  }\r\n\r\n  getPaymentDetails(): Observable<PaymentDetails> {\r\n    return this.getCheckoutDetailsLoaded$.pipe(\r\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { combineLatest, of, Observable } from 'rxjs';\r\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\r\n\r\nimport {\r\n  Address,\r\n  CheckoutDeliveryService,\r\n  UserAddressService,\r\n  UserPaymentService,\r\n  PaymentDetails,\r\n  DeliveryMode,\r\n  CheckoutPaymentService,\r\n  StateUtils,\r\n} from '@spartacus/core';\r\nimport { CheckoutConfigService } from './checkout-config.service';\r\nimport { CheckoutDetailsService } from './checkout-details.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ExpressCheckoutService {\r\n  private shippingAddressSet$: Observable<boolean>;\r\n  private deliveryModeSet$: Observable<boolean>;\r\n  private paymentMethodSet$: Observable<boolean>;\r\n\r\n  constructor(\r\n    protected userAddressService: UserAddressService,\r\n    protected userPaymentService: UserPaymentService,\r\n    protected checkoutDeliveryService: CheckoutDeliveryService,\r\n    protected checkoutPaymentService: CheckoutPaymentService,\r\n    protected checkoutDetailsService: CheckoutDetailsService,\r\n    protected checkoutConfigService: CheckoutConfigService\r\n  ) {\r\n    this.setShippingAddress();\r\n    this.setDeliveryMode();\r\n    this.setPaymentMethod();\r\n  }\r\n\r\n  protected setShippingAddress() {\r\n    this.shippingAddressSet$ = combineLatest([\r\n      this.userAddressService.getAddresses(),\r\n      this.userAddressService.getAddressesLoadedSuccess(),\r\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\r\n    ]).pipe(\r\n      debounceTime(0),\r\n      tap(\r\n        ([, addressesLoadedSuccess]: [\r\n          Address[],\r\n          boolean,\r\n          StateUtils.LoaderState<void>\r\n        ]) => {\r\n          if (!addressesLoadedSuccess) {\r\n            this.userAddressService.loadAddresses();\r\n          }\r\n        }\r\n      ),\r\n      filter(\r\n        ([, addressesLoadedSuccess]: [\r\n          Address[],\r\n          boolean,\r\n          StateUtils.LoaderState<void>\r\n        ]) => addressesLoadedSuccess\r\n      ),\r\n      switchMap(\r\n        ([addresses, , setDeliveryAddressProcess]: [\r\n          Address[],\r\n          boolean,\r\n          StateUtils.LoaderState<void>\r\n        ]) => {\r\n          const defaultAddress =\r\n            addresses.find((address) => address.defaultAddress) || addresses[0];\r\n          if (defaultAddress && Object.keys(defaultAddress).length) {\r\n            if (\r\n              !(\r\n                setDeliveryAddressProcess.success ||\r\n                setDeliveryAddressProcess.error ||\r\n                setDeliveryAddressProcess.loading\r\n              )\r\n            ) {\r\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\r\n            }\r\n            return of(setDeliveryAddressProcess).pipe(\r\n              filter(\r\n                (\r\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\r\n                ) => {\r\n                  return (\r\n                    (setDeliveryAddressProcessState.success ||\r\n                      setDeliveryAddressProcessState.error) &&\r\n                    !setDeliveryAddressProcessState.loading\r\n                  );\r\n                }\r\n              ),\r\n              switchMap(\r\n                (\r\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\r\n                ) => {\r\n                  if (setDeliveryAddressProcessState.success) {\r\n                    return this.checkoutDetailsService.getDeliveryAddress();\r\n                  }\r\n                  return of(false);\r\n                }\r\n              ),\r\n              map((data) => Boolean(data && Object.keys(data).length))\r\n            );\r\n          }\r\n          return of(false);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  protected setPaymentMethod() {\r\n    this.paymentMethodSet$ = combineLatest([\r\n      this.userPaymentService.getPaymentMethods(),\r\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\r\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\r\n    ]).pipe(\r\n      debounceTime(0),\r\n      tap(\r\n        ([, paymentMethodsLoadedSuccess]: [\r\n          PaymentDetails[],\r\n          boolean,\r\n          StateUtils.LoaderState<void>\r\n        ]) => {\r\n          if (!paymentMethodsLoadedSuccess) {\r\n            this.userPaymentService.loadPaymentMethods();\r\n          }\r\n        }\r\n      ),\r\n      filter(\r\n        ([, success]: [\r\n          PaymentDetails[],\r\n          boolean,\r\n          StateUtils.LoaderState<void>\r\n        ]) => success\r\n      ),\r\n      switchMap(\r\n        ([payments, , setPaymentDetailsProcess]: [\r\n          PaymentDetails[],\r\n          boolean,\r\n          StateUtils.LoaderState<void>\r\n        ]) => {\r\n          const defaultPayment =\r\n            payments.find((address) => address.defaultPayment) || payments[0];\r\n          if (defaultPayment && Object.keys(defaultPayment).length) {\r\n            if (\r\n              !(\r\n                setPaymentDetailsProcess.success ||\r\n                setPaymentDetailsProcess.error ||\r\n                setPaymentDetailsProcess.loading\r\n              )\r\n            ) {\r\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\r\n            }\r\n            return of(setPaymentDetailsProcess).pipe(\r\n              filter(\r\n                (\r\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\r\n                ) => {\r\n                  return (\r\n                    (setPaymentDetailsProcessState.success ||\r\n                      setPaymentDetailsProcessState.error) &&\r\n                    !setPaymentDetailsProcessState.loading\r\n                  );\r\n                }\r\n              ),\r\n              switchMap(\r\n                (\r\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\r\n                ) => {\r\n                  if (setPaymentDetailsProcessState.success) {\r\n                    return this.checkoutDetailsService.getPaymentDetails();\r\n                  }\r\n                  return of(false);\r\n                }\r\n              ),\r\n              map((data) => Boolean(data && Object.keys(data).length))\r\n            );\r\n          }\r\n          return of(false);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  protected setDeliveryMode() {\r\n    this.deliveryModeSet$ = combineLatest([\r\n      this.shippingAddressSet$,\r\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\r\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\r\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\r\n    ]).pipe(\r\n      debounceTime(0),\r\n      switchMap(\r\n        ([\r\n          addressSet,\r\n          supportedDeliveryModes,\r\n          setDeliveryModeStatusFlag,\r\n          loadSupportedDeliveryModeStatus,\r\n        ]: [\r\n          boolean,\r\n          DeliveryMode[],\r\n          StateUtils.LoaderState<void>,\r\n          StateUtils.LoaderState<void>\r\n        ]) => {\r\n          if (addressSet) {\r\n            return of([\r\n              supportedDeliveryModes,\r\n              setDeliveryModeStatusFlag,\r\n              loadSupportedDeliveryModeStatus,\r\n            ]).pipe(\r\n              filter(\r\n                ([, , supportedDeliveryModeStatus]: [\r\n                  DeliveryMode[],\r\n                  StateUtils.LoaderState<void>,\r\n                  StateUtils.LoaderState<void>\r\n                ]) => supportedDeliveryModeStatus.success\r\n              ),\r\n              switchMap(\r\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\r\n                  DeliveryMode[],\r\n                  StateUtils.LoaderState<void>,\r\n                  StateUtils.LoaderState<void>\r\n                ]) => {\r\n                  if (Boolean(deliveryModes.length)) {\r\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\r\n                      deliveryModes\r\n                    );\r\n                    return of([\r\n                      preferredDeliveryMode,\r\n                      setDeliveryModeStatus,\r\n                    ]).pipe(\r\n                      tap(\r\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\r\n                          string,\r\n                          StateUtils.LoaderState<void>\r\n                        ]) => {\r\n                          if (\r\n                            deliveryMode &&\r\n                            !(\r\n                              deliveryModeLoadingStatus.success ||\r\n                              deliveryModeLoadingStatus.error ||\r\n                              deliveryModeLoadingStatus.loading\r\n                            )\r\n                          ) {\r\n                            this.checkoutDeliveryService.setDeliveryMode(\r\n                              deliveryMode\r\n                            );\r\n                          }\r\n                        }\r\n                      ),\r\n                      filter(\r\n                        ([, deliveryModeLoadingStatus]: [\r\n                          string,\r\n                          StateUtils.LoaderState<void>\r\n                        ]) => {\r\n                          return (\r\n                            (deliveryModeLoadingStatus.success ||\r\n                              deliveryModeLoadingStatus.error) &&\r\n                            !deliveryModeLoadingStatus.loading\r\n                          );\r\n                        }\r\n                      ),\r\n                      switchMap(\r\n                        ([, deliveryModeLoadingStatus]: [\r\n                          string,\r\n                          StateUtils.LoaderState<void>\r\n                        ]) => {\r\n                          if (deliveryModeLoadingStatus.success) {\r\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\r\n                          }\r\n                          return of(false);\r\n                        }\r\n                      ),\r\n                      map((data) => Boolean(data))\r\n                    );\r\n                  }\r\n                  return of(false);\r\n                }\r\n              )\r\n            );\r\n          } else {\r\n            return of(false);\r\n          }\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  protected resetCheckoutProcesses() {\r\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\r\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\r\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\r\n  }\r\n\r\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\r\n    this.resetCheckoutProcesses();\r\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\r\n      map(([deliveryModeSet, paymentMethodSet]) =>\r\n        Boolean(deliveryModeSet && paymentMethodSet)\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router, UrlTree } from '@angular/router';\r\nimport { ActiveCartService, RoutingConfigService } from '@spartacus/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { CheckoutStepType } from '../model/checkout-step.model';\r\nimport { CheckoutConfigService } from '../services/checkout-config.service';\r\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CheckoutGuard implements CanActivate {\r\n  private readonly firstStep$: Observable<UrlTree>;\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected routingConfigService: RoutingConfigService,\r\n    protected checkoutConfigService: CheckoutConfigService,\r\n    protected expressCheckoutService: ExpressCheckoutService,\r\n    protected activeCartService: ActiveCartService\r\n  ) {\r\n    this.firstStep$ = of(\r\n      this.router.parseUrl(\r\n        this.routingConfigService.getRouteConfig(\r\n          this.checkoutConfigService.getFirstCheckoutStepRoute()\r\n        ).paths[0]\r\n      )\r\n    );\r\n  }\r\n\r\n  canActivate(): Observable<boolean | UrlTree> {\r\n    if (\r\n      this.checkoutConfigService.isExpressCheckout() &&\r\n      !this.activeCartService.isGuestCart()\r\n    ) {\r\n      return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\r\n        switchMap((expressCheckoutPossible: boolean) => {\r\n          return expressCheckoutPossible\r\n            ? of(\r\n                this.router.parseUrl(\r\n                  this.routingConfigService.getRouteConfig(\r\n                    this.checkoutConfigService.getCheckoutStepRoute(\r\n                      CheckoutStepType.REVIEW_ORDER\r\n                    )\r\n                  ).paths[0]\r\n                )\r\n              )\r\n            : this.firstStep$;\r\n        })\r\n      );\r\n    }\r\n    return this.firstStep$;\r\n  }\r\n}\r\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\r\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\r\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\r\nimport { CheckoutGuard } from '../../guards/checkout.guard';\r\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\r\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  providers: [\r\n    provideDefaultConfig(defaultCheckoutConfig),\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        CheckoutOrchestrator: {\r\n          component: CheckoutOrchestratorComponent,\r\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [CheckoutOrchestratorComponent],\r\n  entryComponents: [CheckoutOrchestratorComponent],\r\n  exports: [CheckoutOrchestratorComponent],\r\n})\r\nexport class CheckoutOrchestratorModule {}\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ActiveCartService, Cart } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\n@Component({\r\n  selector: 'cx-checkout-order-summary',\r\n  templateUrl: './checkout-order-summary.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CheckoutOrderSummaryComponent {\r\n  cart$: Observable<Cart>;\r\n\r\n  constructor(protected activeCartService: ActiveCartService) {\r\n    this.cart$ = this.activeCartService.getActive();\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\r\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\r\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, CartSharedModule],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        CheckoutOrderSummary: {\r\n          component: CheckoutOrderSummaryComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [CheckoutOrderSummaryComponent],\r\n  entryComponents: [CheckoutOrderSummaryComponent],\r\n  exports: [CheckoutOrderSummaryComponent],\r\n})\r\nexport class CheckoutOrderSummaryModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { CheckoutConfig } from '../../../config/checkout-config';\r\nimport { CheckoutStep } from '../../../model/checkout-step.model';\r\n\r\n@Component({\r\n  selector: 'cx-checkout-progress-mobile-bottom',\r\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\r\n})\r\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\r\n  constructor(\r\n    protected config: CheckoutConfig,\r\n    protected routingService: RoutingService,\r\n    protected routingConfigService: RoutingConfigService\r\n  ) {}\r\n\r\n  steps: Array<CheckoutStep>;\r\n  routerState$: Observable<any>;\r\n  activeStepIndex: number;\r\n  activeStepUrl: string;\r\n\r\n  ngOnInit() {\r\n    this.steps = this.config.checkout.steps;\r\n    this.routerState$ = this.routingService.getRouterState().pipe(\r\n      tap((router) => {\r\n        this.activeStepUrl = router.state.context.id;\r\n\r\n        this.steps.forEach((step, index) => {\r\n          const routeUrl = `/${\r\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\r\n          }`;\r\n          if (routeUrl === this.activeStepUrl) {\r\n            this.activeStepIndex = index;\r\n          }\r\n        });\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\r\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\r\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\r\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\r\n  providers: [\r\n    provideDefaultConfig(defaultCheckoutConfig),\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        CheckoutProgressMobileBottom: {\r\n          component: CheckoutProgressMobileBottomComponent,\r\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [CheckoutProgressMobileBottomComponent],\r\n  entryComponents: [CheckoutProgressMobileBottomComponent],\r\n  exports: [CheckoutProgressMobileBottomComponent],\r\n})\r\nexport class CheckoutProgressMobileBottomModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  ActiveCartService,\r\n  Cart,\r\n  RoutingConfigService,\r\n  RoutingService,\r\n} from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { CheckoutConfig } from '../../../config/checkout-config';\r\nimport { CheckoutStep } from '../../../model/checkout-step.model';\r\n\r\n@Component({\r\n  selector: 'cx-checkout-progress-mobile-top',\r\n  templateUrl: './checkout-progress-mobile-top.component.html',\r\n})\r\nexport class CheckoutProgressMobileTopComponent implements OnInit {\r\n  constructor(\r\n    protected config: CheckoutConfig,\r\n    protected routingService: RoutingService,\r\n    protected routingConfigService: RoutingConfigService,\r\n    protected activeCartService: ActiveCartService\r\n  ) {}\r\n\r\n  steps: Array<CheckoutStep>;\r\n  routerState$: Observable<any>;\r\n  cart$: Observable<Cart>;\r\n  activeStepIndex: number;\r\n  activeStepUrl: string;\r\n\r\n  ngOnInit(): void {\r\n    this.steps = this.config.checkout.steps;\r\n    this.cart$ = this.activeCartService.getActive();\r\n    this.routerState$ = this.routingService.getRouterState().pipe(\r\n      tap((router) => {\r\n        this.activeStepUrl = router.state.context.id;\r\n\r\n        this.steps.forEach((step, index) => {\r\n          const routeUrl = `/${\r\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\r\n          }`;\r\n          if (routeUrl === this.activeStepUrl) {\r\n            this.activeStepIndex = index;\r\n          }\r\n        });\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\r\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\r\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\r\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\r\n  providers: [\r\n    provideDefaultConfig(defaultCheckoutConfig),\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        CheckoutProgressMobileTop: {\r\n          component: CheckoutProgressMobileTopComponent,\r\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [CheckoutProgressMobileTopComponent],\r\n  entryComponents: [CheckoutProgressMobileTopComponent],\r\n  exports: [CheckoutProgressMobileTopComponent],\r\n})\r\nexport class CheckoutProgressMobileTopModule {}\r\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\r\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\r\nimport { CheckoutConfig } from '../../config/checkout-config';\r\nimport { CheckoutStep } from '../../model/checkout-step.model';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'cx-checkout-progress',\r\n  templateUrl: './checkout-progress.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CheckoutProgressComponent implements OnInit {\r\n  constructor(\r\n    protected config: CheckoutConfig,\r\n    protected routingService: RoutingService,\r\n    protected routingConfigService: RoutingConfigService\r\n  ) {}\r\n\r\n  steps: Array<CheckoutStep>;\r\n  routerState$: Observable<any>;\r\n  activeStepIndex: number;\r\n  activeStepUrl: string;\r\n\r\n  ngOnInit(): void {\r\n    this.steps = this.config.checkout.steps;\r\n    this.routerState$ = this.routingService.getRouterState().pipe(\r\n      tap((router) => {\r\n        this.activeStepUrl = router.state.context.id;\r\n\r\n        this.steps.forEach((step, index) => {\r\n          const routeUrl = `/${\r\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\r\n          }`;\r\n          if (routeUrl === this.activeStepUrl) {\r\n            this.activeStepIndex = index;\r\n          }\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  getTabIndex(stepIndex: number): number {\r\n    return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;\r\n  }\r\n\r\n  isActive(index: number): boolean {\r\n    return index === this.activeStepIndex;\r\n  }\r\n\r\n  isDisabled(index: number): boolean {\r\n    return index > this.activeStepIndex;\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\r\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\r\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\r\nimport { CheckoutProgressComponent } from './checkout-progress.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\r\n  declarations: [CheckoutProgressComponent],\r\n  entryComponents: [CheckoutProgressComponent],\r\n  exports: [CheckoutProgressComponent],\r\n  providers: [\r\n    provideDefaultConfig(defaultCheckoutConfig),\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        CheckoutProgress: {\r\n          component: CheckoutProgressComponent,\r\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n})\r\nexport class CheckoutProgressModule {}\r\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport {\r\n  CheckoutDeliveryService,\r\n  DeliveryMode,\r\n  RoutingService,\r\n} from '@spartacus/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { map, withLatestFrom } from 'rxjs/operators';\r\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\r\n\r\n@Component({\r\n  selector: 'cx-delivery-mode',\r\n  templateUrl: './delivery-mode.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\r\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\r\n  selectedDeliveryMode$: Observable<DeliveryMode>;\r\n  currentDeliveryModeId: string;\r\n  checkoutStepUrlNext: string;\r\n  checkoutStepUrlPrevious: string;\r\n  private allowRedirect = false;\r\n\r\n  deliveryModeSub: Subscription;\r\n\r\n  mode: FormGroup = this.fb.group({\r\n    deliveryModeId: ['', Validators.required],\r\n  });\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private checkoutDeliveryService: CheckoutDeliveryService,\r\n    private routingService: RoutingService,\r\n    private checkoutConfigService: CheckoutConfigService,\r\n    private activatedRoute: ActivatedRoute\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\r\n      this.activatedRoute\r\n    );\r\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\r\n      this.activatedRoute\r\n    );\r\n\r\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\r\n\r\n    this.deliveryModeSub = this.supportedDeliveryModes$\r\n      .pipe(\r\n        withLatestFrom(\r\n          this.checkoutDeliveryService\r\n            .getSelectedDeliveryMode()\r\n            .pipe(\r\n              map((deliveryMode: DeliveryMode) =>\r\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\r\n              )\r\n            )\r\n        )\r\n      )\r\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\r\n        if (!code && deliveryModes && deliveryModes.length) {\r\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\r\n            deliveryModes\r\n          );\r\n        }\r\n        if (\r\n          this.allowRedirect &&\r\n          !!code &&\r\n          code === this.currentDeliveryModeId\r\n        ) {\r\n          this.routingService.go(this.checkoutStepUrlNext);\r\n        }\r\n        if (code) {\r\n          this.mode.controls['deliveryModeId'].setValue(code);\r\n          if (code !== this.currentDeliveryModeId) {\r\n            this.checkoutDeliveryService.setDeliveryMode(code);\r\n          }\r\n        }\r\n        this.currentDeliveryModeId = code;\r\n      });\r\n  }\r\n\r\n  changeMode(code: string): void {\r\n    if (code !== this.currentDeliveryModeId) {\r\n      this.checkoutDeliveryService.setDeliveryMode(code);\r\n      this.currentDeliveryModeId = code;\r\n    }\r\n  }\r\n\r\n  next(): void {\r\n    this.allowRedirect = true;\r\n    if (this.mode.valid && this.mode.value) {\r\n      if (!this.currentDeliveryModeId) {\r\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\r\n      }\r\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\r\n    }\r\n  }\r\n\r\n  back(): void {\r\n    this.routingService.go(this.checkoutStepUrlPrevious);\r\n  }\r\n\r\n  get deliveryModeInvalid(): boolean {\r\n    return this.mode.controls['deliveryModeId'].invalid;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.deliveryModeSub) {\r\n      this.deliveryModeSub.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\r\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\r\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\r\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\r\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\r\nimport { DeliveryModeComponent } from './delivery-mode.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ReactiveFormsModule, I18nModule, SpinnerModule],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        CheckoutDeliveryMode: {\r\n          component: DeliveryModeComponent,\r\n          guards: [\r\n            CheckoutAuthGuard,\r\n            CartNotEmptyGuard,\r\n            ShippingAddressSetGuard,\r\n          ],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [DeliveryModeComponent],\r\n  entryComponents: [DeliveryModeComponent],\r\n  exports: [DeliveryModeComponent],\r\n})\r\nexport class DeliveryModeModule {}\r\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport {\r\n  Address,\r\n  AddressValidation,\r\n  CardType,\r\n  CheckoutDeliveryService,\r\n  CheckoutPaymentService,\r\n  Country,\r\n  GlobalMessageService,\r\n  GlobalMessageType,\r\n  Region,\r\n  StateUtils,\r\n  UserAddressService,\r\n  UserPaymentService,\r\n} from '@spartacus/core';\r\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\r\nimport { map, switchMap, tap } from 'rxjs/operators';\r\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\r\nimport {\r\n  ModalRef,\r\n  ModalService,\r\n} from '../../../../../shared/components/modal/index';\r\nimport { ICON_TYPE } from '../../../../misc/icon/index';\r\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\r\n\r\n@Component({\r\n  selector: 'cx-payment-form',\r\n  templateUrl: './payment-form.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PaymentFormComponent implements OnInit, OnDestroy {\r\n  iconTypes = ICON_TYPE;\r\n\r\n  private addressVerifySub: Subscription;\r\n  suggestedAddressModalRef: ModalRef;\r\n  months: string[] = [];\r\n  years: number[] = [];\r\n\r\n  cardTypes$: Observable<CardType[]>;\r\n  shippingAddress$: Observable<Address>;\r\n  countries$: Observable<Country[]>;\r\n  loading$: Observable<StateUtils.LoaderState<void>>;\r\n  sameAsShippingAddress = true;\r\n  regions$: Observable<Region[]>;\r\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\r\n  showSameAsShippingAddressCheckbox$: Observable<boolean>;\r\n\r\n  @Input()\r\n  setAsDefaultField: boolean;\r\n\r\n  @Input()\r\n  paymentMethodsCount: number;\r\n\r\n  @Output()\r\n  goBack = new EventEmitter<any>();\r\n\r\n  @Output()\r\n  closeForm = new EventEmitter<any>();\r\n\r\n  @Output()\r\n  setPaymentDetails = new EventEmitter<any>();\r\n\r\n  paymentForm: FormGroup = this.fb.group({\r\n    cardType: this.fb.group({\r\n      code: [null, Validators.required],\r\n    }),\r\n    accountHolderName: ['', Validators.required],\r\n    cardNumber: ['', Validators.required],\r\n    expiryMonth: [null, Validators.required],\r\n    expiryYear: [null, Validators.required],\r\n    cvn: ['', Validators.required],\r\n    defaultPayment: [false],\r\n  });\r\n\r\n  billingAddressForm: FormGroup = this.fb.group({\r\n    firstName: ['', Validators.required],\r\n    lastName: ['', Validators.required],\r\n    line1: ['', Validators.required],\r\n    line2: [''],\r\n    town: ['', Validators.required],\r\n    region: this.fb.group({\r\n      isocodeShort: [null, Validators.required],\r\n    }),\r\n    country: this.fb.group({\r\n      isocode: [null, Validators.required],\r\n    }),\r\n    postalCode: ['', Validators.required],\r\n  });\r\n\r\n  constructor(\r\n    protected checkoutPaymentService: CheckoutPaymentService,\r\n    protected checkoutDeliveryService: CheckoutDeliveryService,\r\n    protected userPaymentService: UserPaymentService,\r\n    protected globalMessageService: GlobalMessageService,\r\n    protected fb: FormBuilder,\r\n    protected modalService: ModalService,\r\n    protected userAddressService: UserAddressService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.expMonthAndYear();\r\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\r\n      tap((countries) => {\r\n        // If the store is empty fetch countries. This is also used when changing language.\r\n        if (Object.keys(countries).length === 0) {\r\n          this.userPaymentService.loadBillingCountries();\r\n        }\r\n      })\r\n    );\r\n\r\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\r\n      tap((cardTypes) => {\r\n        if (Object.keys(cardTypes).length === 0) {\r\n          this.checkoutPaymentService.loadSupportedCardTypes();\r\n        }\r\n      })\r\n    );\r\n\r\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\r\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\r\n\r\n    this.showSameAsShippingAddressCheckbox$ = combineLatest([\r\n      this.countries$,\r\n      this.shippingAddress$,\r\n    ]).pipe(\r\n      map(([countries, address]) => {\r\n        return (\r\n          address?.country &&\r\n          !!countries.filter(\r\n            (country: Country): boolean =>\r\n              country.isocode === address.country.isocode\r\n          ).length\r\n        );\r\n      }),\r\n      tap((shouldShowCheckbox) => {\r\n        this.sameAsShippingAddress = shouldShowCheckbox;\r\n      })\r\n    );\r\n\r\n    // verify the new added address\r\n    this.addressVerifySub = this.checkoutDeliveryService\r\n      .getAddressVerificationResults()\r\n      .subscribe((results: AddressValidation) => {\r\n        if (results.decision === 'FAIL') {\r\n          this.checkoutDeliveryService.clearAddressVerificationResults();\r\n        } else if (results.decision === 'ACCEPT') {\r\n          this.next();\r\n        } else if (results.decision === 'REJECT') {\r\n          this.globalMessageService.add(\r\n            { key: 'addressForm.invalidAddress' },\r\n            GlobalMessageType.MSG_TYPE_ERROR\r\n          );\r\n          this.checkoutDeliveryService.clearAddressVerificationResults();\r\n        } else if (results.decision === 'REVIEW') {\r\n          this.openSuggestedAddress(results);\r\n        }\r\n      });\r\n\r\n    this.regions$ = this.selectedCountry$.pipe(\r\n      switchMap((country) => this.userAddressService.getRegions(country)),\r\n      tap((regions) => {\r\n        const regionControl = this.billingAddressForm.get(\r\n          'region.isocodeShort'\r\n        );\r\n        if (regions.length > 0) {\r\n          regionControl.enable();\r\n        } else {\r\n          regionControl.disable();\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  expMonthAndYear(): void {\r\n    const year = new Date().getFullYear();\r\n\r\n    for (let i = 0; i < 10; i++) {\r\n      this.years.push(year + i);\r\n    }\r\n\r\n    for (let j = 1; j <= 12; j++) {\r\n      if (j < 10) {\r\n        this.months.push(`0${j}`);\r\n      } else {\r\n        this.months.push(j.toString());\r\n      }\r\n    }\r\n  }\r\n\r\n  toggleDefaultPaymentMethod(): void {\r\n    this.paymentForm.value.defaultPayment = !this.paymentForm.value\r\n      .defaultPayment;\r\n  }\r\n\r\n  toggleSameAsShippingAddress(): void {\r\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\r\n  }\r\n\r\n  getAddressCardContent(address: Address): Card {\r\n    let region = '';\r\n    if (address.region && address.region.isocode) {\r\n      region = address.region.isocode + ', ';\r\n    }\r\n\r\n    return {\r\n      textBold: address.firstName + ' ' + address.lastName,\r\n      text: [\r\n        address.line1,\r\n        address.line2,\r\n        address.town + ', ' + region + address.country.isocode,\r\n        address.postalCode,\r\n        address.phone,\r\n      ],\r\n    };\r\n  }\r\n\r\n  openSuggestedAddress(results: AddressValidation): void {\r\n    if (!this.suggestedAddressModalRef) {\r\n      this.suggestedAddressModalRef = this.modalService.open(\r\n        SuggestedAddressDialogComponent,\r\n        { centered: true, size: 'lg' }\r\n      );\r\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddressForm.value;\r\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\r\n        results.suggestedAddresses;\r\n      this.suggestedAddressModalRef.result\r\n        .then(() => {\r\n          this.checkoutDeliveryService.clearAddressVerificationResults();\r\n          this.suggestedAddressModalRef = null;\r\n        })\r\n        .catch(() => {\r\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\r\n          this.checkoutDeliveryService.clearAddressVerificationResults();\r\n          this.suggestedAddressModalRef = null;\r\n        });\r\n    }\r\n  }\r\n\r\n  close(): void {\r\n    this.closeForm.emit();\r\n  }\r\n\r\n  back(): void {\r\n    this.goBack.emit();\r\n  }\r\n\r\n  verifyAddress(): void {\r\n    if (this.sameAsShippingAddress) {\r\n      this.next();\r\n    } else {\r\n      this.checkoutDeliveryService.verifyAddress(this.billingAddressForm.value);\r\n    }\r\n  }\r\n\r\n  countrySelected(country: Country): void {\r\n    this.billingAddressForm.get('country.isocode').setValue(country.isocode);\r\n    this.selectedCountry$.next(country.isocode);\r\n  }\r\n\r\n  next(): void {\r\n    if (this.paymentForm.valid) {\r\n      if (this.sameAsShippingAddress) {\r\n        this.setPaymentDetails.emit({\r\n          paymentDetails: this.paymentForm.value,\r\n          billingAddress: null,\r\n        });\r\n      } else {\r\n        if (this.billingAddressForm.valid) {\r\n          this.setPaymentDetails.emit({\r\n            paymentDetails: this.paymentForm.value,\r\n            billingAddress: this.billingAddressForm.value,\r\n          });\r\n        } else {\r\n          this.billingAddressForm.markAllAsTouched();\r\n        }\r\n      }\r\n    } else {\r\n      this.paymentForm.markAllAsTouched();\r\n\r\n      if (!this.sameAsShippingAddress) {\r\n        this.billingAddressForm.markAllAsTouched();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.addressVerifySub) {\r\n      this.addressVerifySub.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\nimport { I18nModule } from '@spartacus/core';\r\nimport { CardModule } from '../../../../../shared/components/card/card.module';\r\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\r\nimport { IconModule } from '../../../../misc/icon/icon.module';\r\nimport { PaymentFormComponent } from './payment-form.component';\r\nimport { FormErrorsModule } from '../../../../../shared/index';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    NgSelectModule,\r\n    CardModule,\r\n    I18nModule,\r\n    IconModule,\r\n    SpinnerModule,\r\n    FormErrorsModule,\r\n  ],\r\n  declarations: [PaymentFormComponent],\r\n  entryComponents: [PaymentFormComponent],\r\n  exports: [PaymentFormComponent],\r\n})\r\nexport class PaymentFormModule {}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport {\r\n  ActiveCartService,\r\n  Address,\r\n  CheckoutDeliveryService,\r\n  CheckoutPaymentService,\r\n  CheckoutService,\r\n  GlobalMessageService,\r\n  GlobalMessageType,\r\n  PaymentDetails,\r\n  RoutingService,\r\n  TranslationService,\r\n  UserPaymentService,\r\n} from '@spartacus/core';\r\nimport { combineLatest, Observable, of } from 'rxjs';\r\nimport { map, switchMap, take, tap } from 'rxjs/operators';\r\nimport { Card } from '../../../../shared/components/card/card.component';\r\nimport { ICON_TYPE } from '../../../misc/icon';\r\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\r\n\r\n@Component({\r\n  selector: 'cx-payment-method',\r\n  templateUrl: './payment-method.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\r\n  iconTypes = ICON_TYPE;\r\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\r\n  isLoading$: Observable<boolean>;\r\n  cards$: Observable<{ content: Card; paymentMethod: PaymentDetails }[]>;\r\n  selectedMethod$: Observable<PaymentDetails>;\r\n  isGuestCheckout = false;\r\n  newPaymentFormManuallyOpened = false;\r\n\r\n  protected shouldRedirect: boolean;\r\n  protected deliveryAddress: Address;\r\n  protected checkoutStepUrlNext: string;\r\n  protected checkoutStepUrlPrevious: string;\r\n\r\n  constructor(\r\n    protected userPaymentService: UserPaymentService,\r\n    protected checkoutService: CheckoutService,\r\n    protected checkoutDeliveryService: CheckoutDeliveryService,\r\n    protected checkoutPaymentService: CheckoutPaymentService,\r\n    protected globalMessageService: GlobalMessageService,\r\n    protected routingService: RoutingService,\r\n    protected checkoutConfigService: CheckoutConfigService,\r\n    protected activatedRoute: ActivatedRoute,\r\n    protected translation: TranslationService,\r\n    protected activeCartService: ActiveCartService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.shouldRedirect = false;\r\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\r\n\r\n    if (!this.activeCartService.isGuestCart()) {\r\n      this.userPaymentService.loadPaymentMethods();\r\n    } else {\r\n      this.isGuestCheckout = true;\r\n    }\r\n\r\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\r\n      this.activatedRoute\r\n    );\r\n\r\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\r\n      this.activatedRoute\r\n    );\r\n\r\n    this.checkoutDeliveryService\r\n      .getDeliveryAddress()\r\n      .pipe(take(1))\r\n      .subscribe((address: Address) => {\r\n        this.deliveryAddress = address;\r\n      });\r\n\r\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\r\n\r\n    this.selectedMethod$ = this.checkoutPaymentService.getPaymentDetails().pipe(\r\n      tap((paymentInfo) => {\r\n        if (paymentInfo && !!Object.keys(paymentInfo).length) {\r\n          if (paymentInfo['hasError']) {\r\n            Object.keys(paymentInfo).forEach((key) => {\r\n              if (key.startsWith('InvalidField')) {\r\n                this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\r\n              }\r\n            });\r\n            this.checkoutService.clearCheckoutStep(3);\r\n          } else if (this.shouldRedirect) {\r\n            this.routingService.go(this.checkoutStepUrlNext);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    this.cards$ = combineLatest([\r\n      this.existingPaymentMethods$.pipe(\r\n        switchMap((methods) => {\r\n          return !methods?.length\r\n            ? of([])\r\n            : combineLatest(\r\n                methods.map((method) =>\r\n                  combineLatest([\r\n                    of(method),\r\n                    this.translation.translate('paymentCard.expires', {\r\n                      month: method.expiryMonth,\r\n                      year: method.expiryYear,\r\n                    }),\r\n                  ]).pipe(\r\n                    map(([payment, translation]) => ({\r\n                      payment,\r\n                      expiryTranslation: translation,\r\n                    }))\r\n                  )\r\n                )\r\n              );\r\n        })\r\n      ),\r\n      this.selectedMethod$,\r\n      this.translation.translate('paymentForm.useThisPayment'),\r\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\r\n      this.translation.translate('paymentCard.selected'),\r\n    ]).pipe(\r\n      map(\r\n        ([\r\n          paymentMethods,\r\n          selectedMethod,\r\n          textUseThisPayment,\r\n          textDefaultPaymentMethod,\r\n          textSelected,\r\n        ]) => {\r\n          if (\r\n            paymentMethods.length &&\r\n            (!selectedMethod || Object.keys(selectedMethod).length === 0)\r\n          ) {\r\n            const defaultPaymentMethod = paymentMethods.find(\r\n              (paymentMethod) => paymentMethod.payment.defaultPayment\r\n            );\r\n            if (defaultPaymentMethod) {\r\n              selectedMethod = defaultPaymentMethod.payment;\r\n              this.checkoutPaymentService.setPaymentDetails(selectedMethod);\r\n            }\r\n          }\r\n          return paymentMethods.map((payment) => ({\r\n            content: this.createCard(\r\n              payment.payment,\r\n              {\r\n                textExpires: payment.expiryTranslation,\r\n                textUseThisPayment,\r\n                textDefaultPaymentMethod,\r\n                textSelected,\r\n              },\r\n              selectedMethod\r\n            ),\r\n            paymentMethod: payment.payment,\r\n          }));\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\r\n    this.checkoutPaymentService.setPaymentDetails(paymentDetails);\r\n  }\r\n\r\n  showNewPaymentForm(): void {\r\n    this.newPaymentFormManuallyOpened = true;\r\n  }\r\n\r\n  hideNewPaymentForm(): void {\r\n    this.newPaymentFormManuallyOpened = false;\r\n  }\r\n\r\n  setPaymentDetails({\r\n    paymentDetails,\r\n    billingAddress,\r\n  }: {\r\n    paymentDetails: PaymentDetails;\r\n    billingAddress?: Address;\r\n  }): void {\r\n    const details: PaymentDetails = { ...paymentDetails };\r\n    details.billingAddress = billingAddress || this.deliveryAddress;\r\n    this.checkoutPaymentService.createPaymentDetails(details);\r\n    this.shouldRedirect = true;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.checkoutPaymentService.paymentProcessSuccess();\r\n  }\r\n\r\n  protected getCardIcon(code: string): string {\r\n    let ccIcon: string;\r\n    if (code === 'visa') {\r\n      ccIcon = this.iconTypes.VISA;\r\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\r\n      ccIcon = this.iconTypes.MASTER_CARD;\r\n    } else if (code === 'diners') {\r\n      ccIcon = this.iconTypes.DINERS_CLUB;\r\n    } else if (code === 'amex') {\r\n      ccIcon = this.iconTypes.AMEX;\r\n    } else {\r\n      ccIcon = this.iconTypes.CREDIT_CARD;\r\n    }\r\n\r\n    return ccIcon;\r\n  }\r\n\r\n  protected sendPaymentMethodFailGlobalMessage(field: string) {\r\n    this.globalMessageService.add(\r\n      {\r\n        key: 'paymentMethods.invalidField',\r\n        params: { field },\r\n      },\r\n      GlobalMessageType.MSG_TYPE_ERROR\r\n    );\r\n  }\r\n\r\n  protected createCard(\r\n    paymentDetails: PaymentDetails,\r\n    cardLabels: {\r\n      textDefaultPaymentMethod: string;\r\n      textExpires: string;\r\n      textUseThisPayment: string;\r\n      textSelected: string;\r\n    },\r\n    selected: PaymentDetails\r\n  ): Card {\r\n    return {\r\n      title: paymentDetails.defaultPayment\r\n        ? cardLabels.textDefaultPaymentMethod\r\n        : '',\r\n      textBold: paymentDetails.accountHolderName,\r\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\r\n      img: this.getCardIcon(paymentDetails.cardType.code),\r\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\r\n      header:\r\n        selected?.id === paymentDetails.id\r\n          ? cardLabels.textSelected\r\n          : undefined,\r\n    };\r\n  }\r\n\r\n  goNext(): void {\r\n    this.routingService.go(this.checkoutStepUrlNext);\r\n  }\r\n\r\n  goPrevious(): void {\r\n    this.routingService.go(this.checkoutStepUrlPrevious);\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\r\nimport { CardModule } from '../../../../shared/components/card/card.module';\r\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\r\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\r\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\r\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\r\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\r\nimport { PaymentFormModule } from './payment-form/payment-form.module';\r\nimport { PaymentMethodComponent } from './payment-method.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    PaymentFormModule,\r\n    CardModule,\r\n    SpinnerModule,\r\n    I18nModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        CheckoutPaymentDetails: {\r\n          component: PaymentMethodComponent,\r\n          guards: [\r\n            CheckoutAuthGuard,\r\n            CartNotEmptyGuard,\r\n            ShippingAddressSetGuard,\r\n            DeliveryModeSetGuard,\r\n          ],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [PaymentMethodComponent],\r\n  entryComponents: [PaymentMethodComponent],\r\n  exports: [PaymentMethodComponent],\r\n})\r\nexport class PaymentMethodModule {}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { CheckoutService, RoutingService } from '@spartacus/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'cx-place-order',\r\n  templateUrl: './place-order.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\r\n  placeOrderSubscription: Subscription;\r\n\r\n  checkoutSubmitForm: FormGroup = this.fb.group({\r\n    termsAndConditions: [false, Validators.requiredTrue],\r\n  });\r\n\r\n  constructor(\r\n    protected checkoutService: CheckoutService,\r\n    protected routingService: RoutingService,\r\n    protected fb: FormBuilder\r\n  ) {}\r\n\r\n  submitForm(): void {\r\n    if (this.checkoutSubmitForm.valid) {\r\n      this.checkoutService.placeOrder();\r\n    } else {\r\n      this.checkoutSubmitForm.markAllAsTouched();\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.placeOrderSubscription = this.checkoutService\r\n      .getOrderDetails()\r\n      .pipe(filter((order) => Object.keys(order).length !== 0))\r\n      .subscribe(() => {\r\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\r\n      });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.placeOrderSubscription) {\r\n      this.placeOrderSubscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\r\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\r\nimport { PlaceOrderComponent } from './place-order.component';\r\nimport { FormErrorsModule } from '../../../../shared/index';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    UrlModule,\r\n    I18nModule,\r\n    ReactiveFormsModule,\r\n    FormErrorsModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        CheckoutPlaceOrder: {\r\n          component: PlaceOrderComponent,\r\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [PlaceOrderComponent],\r\n  entryComponents: [PlaceOrderComponent],\r\n  exports: [PlaceOrderComponent],\r\n})\r\nexport class PlaceOrderModule {}\r\n","import { Injectable, isDevMode } from '@angular/core';\r\nimport { CanActivate, Router, UrlTree } from '@angular/router';\r\nimport { RoutingConfigService } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\r\nimport { CheckoutConfigService } from '../services/checkout-config.service';\r\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PaymentDetailsSetGuard implements CanActivate {\r\n  constructor(\r\n    private checkoutDetailsService: CheckoutDetailsService,\r\n    private checkoutConfigService: CheckoutConfigService,\r\n    private routingConfigService: RoutingConfigService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(): Observable<boolean | UrlTree> {\r\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\r\n      CheckoutStepType.PAYMENT_DETAILS\r\n    );\r\n\r\n    if (!checkoutStep && isDevMode()) {\r\n      console.warn(\r\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\r\n      );\r\n    }\r\n\r\n    return this.checkoutDetailsService\r\n      .getPaymentDetails()\r\n      .pipe(\r\n        map((paymentDetails) =>\r\n          paymentDetails && Object.keys(paymentDetails).length !== 0\r\n            ? true\r\n            : this.router.parseUrl(\r\n                checkoutStep &&\r\n                  this.routingConfigService.getRouteConfig(\r\n                    checkoutStep.routeName\r\n                  ).paths[0]\r\n              )\r\n        )\r\n      );\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport {\r\n  Address,\r\n  Cart,\r\n  ActiveCartService,\r\n  CheckoutDeliveryService,\r\n  CheckoutPaymentService,\r\n  Country,\r\n  DeliveryMode,\r\n  OrderEntry,\r\n  PaymentDetails,\r\n  TranslationService,\r\n  UserAddressService,\r\n  PromotionResult,\r\n  PromotionLocation,\r\n} from '@spartacus/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { map, switchMap, tap } from 'rxjs/operators';\r\nimport { Card } from '../../../../shared/components/card/card.component';\r\nimport { CheckoutStepType } from '../../model/index';\r\nimport { CheckoutConfigService } from '../../services/index';\r\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\r\n\r\n@Component({\r\n  selector: 'cx-review-submit',\r\n  templateUrl: './review-submit.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ReviewSubmitComponent implements OnInit {\r\n  checkoutStepType = CheckoutStepType;\r\n  entries$: Observable<OrderEntry[]>;\r\n  cart$: Observable<Cart>;\r\n  deliveryMode$: Observable<DeliveryMode>;\r\n  countryName$: Observable<string>;\r\n  deliveryAddress$: Observable<Address>;\r\n  paymentDetails$: Observable<PaymentDetails>;\r\n  orderPromotions$: Observable<PromotionResult[]>;\r\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\r\n\r\n  constructor(\r\n    protected checkoutDeliveryService: CheckoutDeliveryService,\r\n    protected checkoutPaymentService: CheckoutPaymentService,\r\n    protected userAddressService: UserAddressService,\r\n    protected activeCartService: ActiveCartService,\r\n    protected translation: TranslationService,\r\n    protected checkoutConfigService: CheckoutConfigService,\r\n    protected promotionService: PromotionService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.cart$ = this.activeCartService.getActive();\r\n    this.entries$ = this.activeCartService.getEntries();\r\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\r\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\r\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\r\n      this.promotionLocation\r\n    );\r\n\r\n    this.deliveryMode$ = this.checkoutDeliveryService\r\n      .getSelectedDeliveryMode()\r\n      .pipe(\r\n        tap((selected: DeliveryMode) => {\r\n          if (selected === null) {\r\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\r\n          }\r\n        })\r\n      );\r\n\r\n    this.countryName$ = this.deliveryAddress$.pipe(\r\n      switchMap((address: Address) =>\r\n        this.userAddressService.getCountry(address.country.isocode)\r\n      ),\r\n      tap((country: Country) => {\r\n        if (country === null) {\r\n          this.userAddressService.loadDeliveryCountries();\r\n        }\r\n      }),\r\n      map((country: Country) => country && country.name)\r\n    );\r\n  }\r\n\r\n  getShippingAddressCard(\r\n    deliveryAddress: Address,\r\n    countryName: string\r\n  ): Observable<Card> {\r\n    return combineLatest([\r\n      this.translation.translate('addressCard.shipTo'),\r\n    ]).pipe(\r\n      map(([textTitle]) => {\r\n        if (!countryName) {\r\n          countryName = deliveryAddress.country.isocode;\r\n        }\r\n\r\n        let region = '';\r\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\r\n          region = deliveryAddress.region.isocode + ', ';\r\n        }\r\n\r\n        return {\r\n          title: textTitle,\r\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\r\n          text: [\r\n            deliveryAddress.line1,\r\n            deliveryAddress.line2,\r\n            deliveryAddress.town + ', ' + region + countryName,\r\n            deliveryAddress.postalCode,\r\n            deliveryAddress.phone,\r\n          ],\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\r\n    return combineLatest([\r\n      this.translation.translate('checkoutShipping.shippingMethod'),\r\n    ]).pipe(\r\n      map(([textTitle]) => {\r\n        return {\r\n          title: textTitle,\r\n          textBold: deliveryMode.name,\r\n          text: [deliveryMode.description],\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\r\n    return combineLatest([\r\n      this.translation.translate('paymentForm.payment'),\r\n      this.translation.translate('paymentCard.expires', {\r\n        month: paymentDetails.expiryMonth,\r\n        year: paymentDetails.expiryYear,\r\n      }),\r\n    ]).pipe(\r\n      map(([textTitle, textExpires]) => {\r\n        return {\r\n          title: textTitle,\r\n          textBold: paymentDetails.accountHolderName,\r\n          text: [paymentDetails.cardNumber, textExpires],\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\r\n    const step = this.checkoutConfigService.getCheckoutStep(stepType);\r\n    return step && step.routeName;\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  CmsConfig,\r\n  FeaturesConfigModule,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\r\nimport { CardModule } from '../../../../shared/components/card/card.module';\r\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\r\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\r\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\r\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\r\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\r\nimport { ReviewSubmitComponent } from './review-submit.component';\r\nimport { PromotionsModule } from '../promotions/promotions.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    CardModule,\r\n    CartSharedModule,\r\n    I18nModule,\r\n    UrlModule,\r\n    RouterModule,\r\n    PromotionsModule,\r\n    FeaturesConfigModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        CheckoutReviewOrder: {\r\n          component: ReviewSubmitComponent,\r\n          guards: [\r\n            CheckoutAuthGuard,\r\n            CartNotEmptyGuard,\r\n            ShippingAddressSetGuard,\r\n            DeliveryModeSetGuard,\r\n            PaymentDetailsSetGuard,\r\n          ],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [ReviewSubmitComponent],\r\n  entryComponents: [ReviewSubmitComponent],\r\n  exports: [ReviewSubmitComponent],\r\n})\r\nexport class ReviewSubmitModule {}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport {\r\n  Address,\r\n  AddressValidation,\r\n  CheckoutDeliveryService,\r\n  Country,\r\n  ErrorModel,\r\n  GlobalMessageService,\r\n  GlobalMessageType,\r\n  Region,\r\n  Title,\r\n  UserAddressService,\r\n  UserService,\r\n} from '@spartacus/core';\r\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\r\nimport { map, switchMap, take, tap } from 'rxjs/operators';\r\nimport {\r\n  ModalRef,\r\n  ModalService,\r\n} from '../../../../../shared/components/modal/index';\r\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\r\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\r\n\r\n@Component({\r\n  selector: 'cx-address-form',\r\n  templateUrl: './address-form.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AddressFormComponent implements OnInit, OnDestroy {\r\n  countries$: Observable<Country[]>;\r\n  titles$: Observable<Title[]>;\r\n  regions$: Observable<Region[]>;\r\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\r\n\r\n  @Input()\r\n  addressData: Address;\r\n\r\n  @Input()\r\n  actionBtnLabel: string;\r\n\r\n  @Input()\r\n  cancelBtnLabel: string;\r\n\r\n  @Input()\r\n  setAsDefaultField = true;\r\n\r\n  @Input()\r\n  showTitleCode: boolean;\r\n\r\n  @Input()\r\n  showCancelBtn = true;\r\n\r\n  @Output()\r\n  submitAddress = new EventEmitter<any>();\r\n\r\n  @Output()\r\n  backToAddress = new EventEmitter<any>();\r\n\r\n  addressVerifySub: Subscription;\r\n  regionsSub: Subscription;\r\n  suggestedAddressModalRef: ModalRef;\r\n\r\n  addressForm: FormGroup = this.fb.group({\r\n    country: this.fb.group({\r\n      isocode: [null, Validators.required],\r\n    }),\r\n    titleCode: [''],\r\n    firstName: ['', Validators.required],\r\n    lastName: ['', Validators.required],\r\n    line1: ['', Validators.required],\r\n    line2: [''],\r\n    town: ['', Validators.required],\r\n    region: this.fb.group({\r\n      isocode: [null, Validators.required],\r\n    }),\r\n    postalCode: ['', Validators.required],\r\n    phone: '',\r\n    defaultAddress: [false],\r\n  });\r\n\r\n  constructor(\r\n    protected fb: FormBuilder,\r\n    protected checkoutDeliveryService: CheckoutDeliveryService,\r\n    protected userService: UserService,\r\n    protected userAddressService: UserAddressService,\r\n    protected globalMessageService: GlobalMessageService,\r\n    protected modalService: ModalService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    // Fetching countries\r\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\r\n      tap((countries: Country[]) => {\r\n        if (Object.keys(countries).length === 0) {\r\n          this.userAddressService.loadDeliveryCountries();\r\n        }\r\n      })\r\n    );\r\n\r\n    // Fetching titles\r\n    this.titles$ = this.userService.getTitles().pipe(\r\n      tap((titles: Title[]) => {\r\n        if (Object.keys(titles).length === 0) {\r\n          this.userService.loadTitles();\r\n        }\r\n      }),\r\n      map((titles) => {\r\n        titles.sort(sortTitles);\r\n        const noneTitle = { code: '', name: 'Title' };\r\n        return [noneTitle, ...titles];\r\n      })\r\n    );\r\n\r\n    // Fetching regions\r\n    this.regions$ = this.selectedCountry$.pipe(\r\n      switchMap((country) => this.userAddressService.getRegions(country)),\r\n      tap((regions: Region[]) => {\r\n        const regionControl = this.addressForm.get('region.isocode');\r\n        if (regions && regions.length > 0) {\r\n          regionControl.enable();\r\n        } else {\r\n          regionControl.disable();\r\n        }\r\n      })\r\n    );\r\n\r\n    // verify the new added address\r\n    this.addressVerifySub = this.checkoutDeliveryService\r\n      .getAddressVerificationResults()\r\n      .subscribe((results: AddressValidation) => {\r\n        if (results.decision === 'FAIL') {\r\n          this.checkoutDeliveryService.clearAddressVerificationResults();\r\n        } else if (results.decision === 'ACCEPT') {\r\n          this.submitAddress.emit(this.addressForm.value);\r\n        } else if (results.decision === 'REJECT') {\r\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\r\n          if (\r\n            results.errors.errors.some(\r\n              (error: ErrorModel) => error.subject === 'titleCode'\r\n            )\r\n          ) {\r\n            this.globalMessageService.add(\r\n              { key: 'addressForm.titleRequired' },\r\n              GlobalMessageType.MSG_TYPE_ERROR\r\n            );\r\n          } else {\r\n            this.globalMessageService.add(\r\n              { key: 'addressForm.invalidAddress' },\r\n              GlobalMessageType.MSG_TYPE_ERROR\r\n            );\r\n          }\r\n          this.checkoutDeliveryService.clearAddressVerificationResults();\r\n        } else if (results.decision === 'REVIEW') {\r\n          this.openSuggestedAddress(results);\r\n        }\r\n      });\r\n\r\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\r\n      this.addressForm.patchValue(this.addressData);\r\n\r\n      this.countrySelected(this.addressData.country);\r\n      if (this.addressData.region) {\r\n        this.regionSelected(this.addressData.region);\r\n      }\r\n    }\r\n  }\r\n\r\n  countrySelected(country: Country): void {\r\n    this.addressForm['controls'].country['controls'].isocode.setValue(\r\n      country.isocode\r\n    );\r\n    this.selectedCountry$.next(country.isocode);\r\n  }\r\n\r\n  regionSelected(region: Region): void {\r\n    this.addressForm['controls'].region['controls'].isocode.setValue(\r\n      region.isocode\r\n    );\r\n  }\r\n\r\n  toggleDefaultAddress(): void {\r\n    this.addressForm['controls'].defaultAddress.setValue(\r\n      this.addressForm.value.defaultAddress\r\n    );\r\n  }\r\n\r\n  back(): void {\r\n    this.backToAddress.emit();\r\n  }\r\n\r\n  verifyAddress(): void {\r\n    if (this.addressForm.valid) {\r\n      if (this.addressForm.get('region').value.isocode) {\r\n        this.regionsSub = this.regions$.pipe(take(1)).subscribe((regions) => {\r\n          const obj = regions.find(\r\n            (region) =>\r\n              region.isocode ===\r\n              this.addressForm.controls['region'].value.isocode\r\n          );\r\n          Object.assign(this.addressForm.value.region, {\r\n            isocodeShort: obj.isocodeShort,\r\n          });\r\n        });\r\n      }\r\n\r\n      if (this.addressForm.dirty) {\r\n        this.checkoutDeliveryService.verifyAddress(this.addressForm.value);\r\n      } else {\r\n        // address form value not changed\r\n        // ignore duplicate address\r\n        this.submitAddress.emit(undefined);\r\n      }\r\n    } else {\r\n      this.addressForm.markAllAsTouched();\r\n    }\r\n  }\r\n\r\n  openSuggestedAddress(results: AddressValidation): void {\r\n    if (!this.suggestedAddressModalRef) {\r\n      this.suggestedAddressModalRef = this.modalService.open(\r\n        SuggestedAddressDialogComponent,\r\n        { centered: true, size: 'lg' }\r\n      );\r\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.addressForm.value;\r\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\r\n        results.suggestedAddresses;\r\n      this.suggestedAddressModalRef.result\r\n        .then((address) => {\r\n          this.checkoutDeliveryService.clearAddressVerificationResults();\r\n          if (address) {\r\n            address = Object.assign(\r\n              {\r\n                titleCode: this.addressForm.value.titleCode,\r\n                phone: this.addressForm.value.phone,\r\n                selected: true,\r\n              },\r\n              address\r\n            );\r\n            this.submitAddress.emit(address);\r\n          }\r\n          this.suggestedAddressModalRef = null;\r\n        })\r\n        .catch(() => {\r\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\r\n          this.checkoutDeliveryService.clearAddressVerificationResults();\r\n          const address = Object.assign(\r\n            {\r\n              selected: true,\r\n            },\r\n            this.addressForm.value\r\n          );\r\n          this.submitAddress.emit(address);\r\n          this.suggestedAddressModalRef = null;\r\n        });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.checkoutDeliveryService.clearAddressVerificationResults();\r\n\r\n    if (this.addressVerifySub) {\r\n      this.addressVerifySub.unsubscribe();\r\n    }\r\n\r\n    if (this.regionsSub) {\r\n      this.regionsSub.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\nimport { I18nModule } from '@spartacus/core';\r\nimport { IconModule } from '../../../../misc/icon/index';\r\nimport { AddressFormComponent } from './address-form.component';\r\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\r\nimport { FormErrorsModule } from '../../../../../shared/index';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    RouterModule,\r\n    NgSelectModule,\r\n    IconModule,\r\n    I18nModule,\r\n    FormErrorsModule,\r\n  ],\r\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\r\n  entryComponents: [SuggestedAddressDialogComponent],\r\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\r\n})\r\nexport class AddressFormModule {}\r\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport {\r\n  ActiveCartService,\r\n  Address,\r\n  CheckoutDeliveryService,\r\n  RoutingService,\r\n  TranslationService,\r\n  UserAddressService,\r\n} from '@spartacus/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { map, take, filter } from 'rxjs/operators';\r\nimport { Card } from '../../../../shared/components/card/card.component';\r\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\r\n\r\nexport interface CardWithAddress {\r\n  card: Card;\r\n  address: Address;\r\n}\r\n\r\n@Component({\r\n  selector: 'cx-shipping-address',\r\n  templateUrl: './shipping-address.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ShippingAddressComponent implements OnInit {\r\n  existingAddresses$: Observable<Address[]>;\r\n  newAddressFormManuallyOpened = false;\r\n  isLoading$: Observable<boolean>;\r\n  cards$: Observable<CardWithAddress[]>;\r\n  selectedAddress$: Observable<Address>;\r\n  forceLoader = false; // this helps with smoother steps transition\r\n  isGuestCheckout = false;\r\n\r\n  constructor(\r\n    protected userAddressService: UserAddressService,\r\n    protected routingService: RoutingService,\r\n    protected checkoutDeliveryService: CheckoutDeliveryService,\r\n    protected checkoutConfigService: CheckoutConfigService,\r\n    protected activatedRoute: ActivatedRoute,\r\n    protected translation: TranslationService,\r\n    protected activeCartService: ActiveCartService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\r\n    this.existingAddresses$ = this.userAddressService.getAddresses();\r\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\r\n\r\n    this.cards$ = combineLatest([\r\n      this.existingAddresses$,\r\n      this.selectedAddress$,\r\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\r\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\r\n      this.translation.translate('addressCard.selected'),\r\n    ]).pipe(\r\n      map(\r\n        ([\r\n          addresses,\r\n          selected,\r\n          textDefaultShippingAddress,\r\n          textShipToThisAddress,\r\n          textSelected,\r\n        ]) => {\r\n          // Select default address if none selected\r\n          if (\r\n            addresses.length &&\r\n            (!selected || Object.keys(selected).length === 0)\r\n          ) {\r\n            const defaultAddress = addresses.find(\r\n              (address) => address.defaultAddress\r\n            );\r\n            selected = defaultAddress;\r\n            this.selectAddress(defaultAddress);\r\n          }\r\n          return addresses.map((address) => {\r\n            const card = this.getCardContent(\r\n              address,\r\n              selected,\r\n              textDefaultShippingAddress,\r\n              textShipToThisAddress,\r\n              textSelected\r\n            );\r\n            return {\r\n              address,\r\n              card,\r\n            };\r\n          });\r\n        }\r\n      )\r\n    );\r\n\r\n    if (!this.activeCartService.isGuestCart()) {\r\n      this.userAddressService.loadAddresses();\r\n    } else {\r\n      this.isGuestCheckout = true;\r\n    }\r\n  }\r\n\r\n  getCardContent(\r\n    address: Address,\r\n    selected: any,\r\n    textDefaultShippingAddress: string,\r\n    textShipToThisAddress: string,\r\n    textSelected: string\r\n  ): Card {\r\n    let region = '';\r\n\r\n    if (address.region && address.region.isocode) {\r\n      region = address.region.isocode + ', ';\r\n    }\r\n\r\n    return {\r\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\r\n      textBold: address.firstName + ' ' + address.lastName,\r\n      text: [\r\n        address.line1,\r\n        address.line2,\r\n        address.town + ', ' + region + address.country.isocode,\r\n        address.postalCode,\r\n        address.phone,\r\n      ],\r\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\r\n      header: selected && selected.id === address.id ? textSelected : '',\r\n    };\r\n  }\r\n\r\n  selectAddress(address: Address): void {\r\n    this.checkoutDeliveryService.setDeliveryAddress(address);\r\n  }\r\n\r\n  addAddress(address: Address): void {\r\n    this.selectedAddress$\r\n      .pipe(\r\n        filter((selected) => !!selected?.shippingAddress),\r\n        take(1)\r\n      )\r\n      .subscribe(() => this.goNext());\r\n\r\n    this.forceLoader = true;\r\n\r\n    this.existingAddresses$.pipe(take(1)).subscribe((addresses) => {\r\n      addresses.includes(address)\r\n        ? this.selectAddress(address)\r\n        : this.checkoutDeliveryService.createAndSetAddress(address);\r\n    });\r\n  }\r\n\r\n  showNewAddressForm(): void {\r\n    this.newAddressFormManuallyOpened = true;\r\n  }\r\n\r\n  hideNewAddressForm(goPrevious: boolean = false): void {\r\n    this.newAddressFormManuallyOpened = false;\r\n    if (goPrevious) {\r\n      this.goPrevious();\r\n    }\r\n  }\r\n\r\n  goNext(): void {\r\n    this.routingService.go(\r\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\r\n    );\r\n  }\r\n\r\n  goPrevious(): void {\r\n    this.routingService.go(\r\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\r\n        this.activatedRoute\r\n      ) || 'cart'\r\n    );\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\r\nimport { CardModule } from '../../../../shared/components/card/card.module';\r\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\r\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\r\n// tslint:disable-next-line:max-line-length\r\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\r\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\r\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\r\nimport { AddressFormModule } from './address-form/address-form.module';\r\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\r\nimport { ShippingAddressComponent } from './shipping-address.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    AddressFormModule,\r\n    CardModule,\r\n    SpinnerModule,\r\n    I18nModule,\r\n    CheckoutProgressMobileTopModule,\r\n    CheckoutProgressMobileBottomModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        CheckoutShippingAddress: {\r\n          component: ShippingAddressComponent,\r\n          guards: [\r\n            CheckoutAuthGuard,\r\n            CartNotEmptyGuard,\r\n            CheckoutDetailsLoadedGuard,\r\n          ],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [ShippingAddressComponent],\r\n  entryComponents: [ShippingAddressComponent],\r\n  exports: [ShippingAddressComponent],\r\n})\r\nexport class ShippingAddressModule {}\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate } from '@angular/router';\r\nimport {\r\n  ActiveCartService,\r\n  AuthService,\r\n  RoutingService,\r\n} from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NotCheckoutAuthGuard implements CanActivate {\r\n  constructor(\r\n    protected routingService: RoutingService,\r\n    protected authService: AuthService,\r\n    protected activeCartService: ActiveCartService\r\n  ) {}\r\n\r\n  canActivate(): Observable<boolean> {\r\n    return this.authService.getUserToken().pipe(\r\n      map((token) => {\r\n        if (token.access_token) {\r\n          this.routingService.go({ cxRoute: 'home' });\r\n        } else if (this.activeCartService.isGuestCart()) {\r\n          this.routingService.go({ cxRoute: 'cart' });\r\n          return false;\r\n        }\r\n        return !token.access_token;\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { KeyboardFocusService } from '../../keyboard-focus/services/keyboard-focus.service';\r\nimport { SkipLink, SkipLinkConfig } from '../config/skip-link.config';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SkipLinkService {\r\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\r\n\r\n  constructor(\r\n    protected config: SkipLinkConfig,\r\n    protected keyboardFocusService: KeyboardFocusService\r\n  ) {}\r\n\r\n  getSkipLinks(): Observable<SkipLink[]> {\r\n    return this.skipLinks$;\r\n  }\r\n\r\n  add(key: string, target: HTMLElement): void {\r\n    const found: SkipLink = this.config.skipLinks.find(\r\n      (skipLink) => skipLink.key === key\r\n    );\r\n\r\n    if (found) {\r\n      const existing: SkipLink[] = this.skipLinks$.value;\r\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\r\n        target,\r\n        i18nKey: found.i18nKey,\r\n        position: found.position,\r\n        key,\r\n      });\r\n      this.skipLinks$.next(existing);\r\n    }\r\n  }\r\n\r\n  remove(key: string): void {\r\n    const found: SkipLink = this.config.skipLinks.find(\r\n      (skipLink) => skipLink.key === key\r\n    );\r\n\r\n    if (found) {\r\n      let existing: SkipLink[] = this.skipLinks$.value;\r\n      existing = existing.filter((skipLink) => skipLink.key !== key);\r\n      this.skipLinks$.next(existing);\r\n    }\r\n  }\r\n\r\n  scrollToTarget(skipLink: SkipLink): void {\r\n    const target =\r\n      skipLink.target instanceof HTMLElement\r\n        ? skipLink.target\r\n        : (skipLink.target as Element).parentElement;\r\n\r\n    // focus first focusable element in the\r\n    const firstFocusable =\r\n      this.keyboardFocusService.findFirstFocusable(target) || target;\r\n\r\n    // we force a tabindex if not available, to ensure we can focus into the element\r\n    const hasTabindex = firstFocusable.hasAttribute('tabindex');\r\n    if (!hasTabindex) {\r\n      firstFocusable.setAttribute('tabindex', '-1');\r\n    }\r\n\r\n    firstFocusable.focus();\r\n\r\n    // drop the tmp tabindex\r\n    if (!hasTabindex) {\r\n      firstFocusable.removeAttribute('tabindex');\r\n    }\r\n  }\r\n\r\n  protected getSkipLinkIndexInArray(key: string): number {\r\n    let index: number = this.config.skipLinks.findIndex(\r\n      (skipLink) => skipLink.key === key\r\n    );\r\n\r\n    while (index > 0) {\r\n      index--;\r\n      const previous: SkipLink = this.config.skipLinks[index];\r\n      if (previous) {\r\n        const existing: SkipLink[] = this.skipLinks$.value;\r\n        const found: number = existing.findIndex(\r\n          (skipLink) => skipLink.key === previous.key\r\n        );\r\n        if (found > -1) {\r\n          return found + 1;\r\n        }\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { SkipLink } from '../config/skip-link.config';\r\nimport { SkipLinkService } from '../service/skip-link.service';\r\n\r\n@Component({\r\n  selector: 'cx-skip-link',\r\n  templateUrl: './skip-link.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SkipLinkComponent {\r\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService.getSkipLinks();\r\n\r\n  constructor(private skipLinkService: SkipLinkService) {}\r\n\r\n  scrollToTarget(skipLink: SkipLink): void {\r\n    this.skipLinkService.scrollToTarget(skipLink);\r\n  }\r\n}\r\n","import { SkipLinkConfig } from './skip-link.config';\r\n\r\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\r\n  skipLinks: [\r\n    {\r\n      key: 'cx-header',\r\n      i18nKey: 'skipLink.labels.header',\r\n    },\r\n    {\r\n      key: 'cx-main',\r\n      i18nKey: 'skipLink.labels.main',\r\n    },\r\n    { key: 'cx-footer', i18nKey: 'skipLink.labels.footer' },\r\n  ],\r\n};\r\n","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { SkipLinkService } from '../service/skip-link.service';\r\n\r\n@Directive({\r\n  selector: '[cxSkipLink]',\r\n})\r\nexport class SkipLinkDirective implements OnInit, OnDestroy {\r\n  @Input() cxSkipLink: string;\r\n\r\n  constructor(\r\n    protected elementRef: ElementRef<HTMLElement>,\r\n    protected skipLinkService: SkipLinkService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.skipLinkService.add(this.cxSkipLink, this.elementRef.nativeElement);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.skipLinkService.remove(this.cxSkipLink);\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport {\r\n  APP_INITIALIZER,\r\n  ComponentFactoryResolver,\r\n  NgModule,\r\n} from '@angular/core';\r\nimport {\r\n  ConfigModule,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n} from '@spartacus/core';\r\nimport { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\r\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\r\nimport { KeyboardFocusModule } from '../keyboard-focus/keyboard-focus.module';\r\nimport { SkipLinkComponent } from './component/skip-link.component';\r\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\r\nimport { SkipLinkDirective } from './directive/skip-link.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    I18nModule,\r\n    ConfigModule.withConfig(defaultSkipLinkConfig),\r\n    KeyboardFocusModule,\r\n  ],\r\n  declarations: [SkipLinkComponent, SkipLinkDirective],\r\n  exports: [SkipLinkDirective],\r\n  entryComponents: [SkipLinkComponent],\r\n\r\n  providers: [\r\n    provideDefaultConfig(defaultSkipLinkConfig),\r\n    {\r\n      provide: APP_INITIALIZER,\r\n      useFactory: skipLinkFactory,\r\n      deps: [ComponentFactoryResolver, OutletService],\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class SkipLinkModule {}\r\n\r\n/**\r\n * Adds the skip link component before the cx-storefront.\r\n */\r\nexport function skipLinkFactory(\r\n  componentFactoryResolver: ComponentFactoryResolver,\r\n  outletService: OutletService\r\n) {\r\n  const isReady = () => {\r\n    const factory = componentFactoryResolver.resolveComponentFactory(\r\n      SkipLinkComponent\r\n    );\r\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\r\n  };\r\n  return isReady;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { NavigationStart, Router } from '@angular/router';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class HamburgerMenuService {\r\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  constructor(router: Router) {\r\n    router.events\r\n      .pipe(filter((event) => event instanceof NavigationStart))\r\n      .subscribe(() => {\r\n        this.toggle(true);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * toggles the expand state of the hamburger menu\r\n   */\r\n  toggle(forceCollapse?: boolean): void {\r\n    if (forceCollapse) {\r\n      this.isExpanded.next(false);\r\n    } else {\r\n      this.isExpanded.next(!this.isExpanded.value);\r\n    }\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\r\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        HamburgerMenuComponent: {\r\n          component: HamburgerMenuComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [HamburgerMenuComponent],\r\n  exports: [HamburgerMenuComponent],\r\n  entryComponents: [HamburgerMenuComponent],\r\n})\r\nexport class HamburgerMenuModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\r\nimport { LaunchDialogModule } from './launch-dialog/index';\r\n\r\n@NgModule({\r\n  imports: [OutletRefModule, LaunchDialogModule.forRoot()],\r\n  exports: [OutletRefModule],\r\n})\r\nexport class LayoutModule {}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport {\r\n  CmsService,\r\n  ContentSlotComponentData,\r\n  ContentSlotData,\r\n  DynamicAttributeService,\r\n} from '@spartacus/core';\r\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\r\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\r\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\r\nimport { CmsComponentsService } from '../../services/cms-components.service';\r\n\r\n/**\r\n * The `PageSlotComponent` is used to render the CMS page slot and it's components.\r\n *\r\n * The Page slot host element will be supplemented with css classes so that the layout\r\n * can be fully controlled by customers:\r\n * - The page slot _position_ is added as a css class by default.\r\n * - The `cx-pending` is added for as long as the slot hasn't start loading.\r\n * - The `page-fold` style class is added for the page slot which is configured as the page fold.\r\n */\r\n@Component({\r\n  selector: 'cx-page-slot,[cx-page-slot]',\r\n  templateUrl: './page-slot.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PageSlotComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * The position represents the unique key for a page slot on a single page, but can\r\n   * be reused cross pages.\r\n   *\r\n   * The position is used to find the CMS components for the page slot. It is also\r\n   * added as an additional CSS class so that layoutt can be applied.\r\n   */\r\n  @Input() set position(value: string) {\r\n    this.position$.next(value);\r\n  }\r\n  get position(): string {\r\n    return this.position$.value;\r\n  }\r\n\r\n  /**\r\n   * Maintains css classes introduced by the host and adds additional classes.\r\n   */\r\n  @Input() @HostBinding() class: string;\r\n\r\n  /**\r\n   * Indicates that the page slot is the last page slot above the fold.\r\n   */\r\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\r\n\r\n  /**\r\n   * Indicates that the components of the page slot haven't been loaded as long\r\n   * as the isPending state is true.\r\n   */\r\n  @HostBinding('class.cx-pending') isPending = true;\r\n\r\n  /**\r\n   * Indicates that the page slot doesn't contain any components. This is no\r\n   * longer used in spartacus, but kept for backwards compatibility.\r\n   */\r\n  @HostBinding('class.has-components') @Input() hasComponents = false;\r\n\r\n  protected position$: BehaviorSubject<string> = new BehaviorSubject(undefined);\r\n\r\n  components: ContentSlotComponentData[];\r\n\r\n  protected slot$: Observable<ContentSlotData> = this.position$.pipe(\r\n    switchMap((position) => this.cmsService.getContentSlot(position)),\r\n    distinctUntilChanged(this.isDistinct)\r\n  );\r\n\r\n  /** Observes the components for the given page slot. */\r\n  components$: Observable<ContentSlotComponentData[]> = this.slot$.pipe(\r\n    map((slot) => slot?.components ?? [])\r\n  );\r\n\r\n  protected subscription: Subscription = new Subscription();\r\n\r\n  /** Keeps track of the pending components that must be loaded for the page slot */\r\n  private pendingComponentCount = 0;\r\n\r\n  /** Tracks the last used position, in case the page slot is used dynamically */\r\n  private lastPosition: string;\r\n  constructor(\r\n    protected cmsService: CmsService,\r\n    protected dynamicAttributeService: DynamicAttributeService,\r\n    protected renderer: Renderer2,\r\n    protected elementRef: ElementRef,\r\n    protected cmsComponentsService: CmsComponentsService,\r\n    protected cd: ChangeDetectorRef\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.subscription.add(\r\n      this.slot$.pipe(tap((slot) => this.decorate(slot))).subscribe((value) => {\r\n        this.components = value?.components || [];\r\n        this.cd.markForCheck();\r\n      })\r\n    );\r\n  }\r\n\r\n  protected decorate(slot: ContentSlotData): void {\r\n    let cls = this.class || '';\r\n\r\n    if (this.lastPosition && cls.indexOf(this.lastPosition) > -1) {\r\n      cls = cls.replace(this.lastPosition, '');\r\n    }\r\n    if (this.position$.value) {\r\n      cls += ` ${this.position$.value}`;\r\n      this.lastPosition = this.position$.value;\r\n    }\r\n\r\n    // host bindings\r\n    this.pending = slot?.components?.length || 0;\r\n    this.hasComponents = slot?.components?.length > 0;\r\n    if (cls && cls !== this.class) {\r\n      this.class = cls;\r\n    }\r\n\r\n    this.addSmartEditSlotClass(slot);\r\n  }\r\n\r\n  /**\r\n   * Sets the pending count for the page slot components. Once all pending components are\r\n   * loaded, the `isPending` flag is updated, so that the associated class can be updated\r\n   */\r\n  protected set pending(count: number) {\r\n    this.pendingComponentCount = count;\r\n    this.isPending = this.pendingComponentCount > 0;\r\n  }\r\n\r\n  protected get pending(): number {\r\n    return this.pendingComponentCount;\r\n  }\r\n\r\n  /*\r\n   * Is triggered when a component is added to the view. This is used to\r\n   * update the pending count\r\n   */\r\n  isLoaded(loadState: boolean) {\r\n    if (loadState) {\r\n      this.pending--;\r\n      this.cd.markForCheck();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The `DeferLoadingStrategy` indicates whether the component should be\r\n   * rendered instantly or whether it should be deferred.\r\n   */\r\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\r\n    const deferLoading = this.cmsComponentsService.getDeferLoadingStrategy(\r\n      componentType\r\n    );\r\n    return { deferLoading };\r\n  }\r\n\r\n  protected isDistinct(old: ContentSlotData, current: ContentSlotData) {\r\n    return (\r\n      current.components &&\r\n      old.components?.length === current.components.length &&\r\n      !old.components.find(\r\n        (el, index) => el.uid !== current.components[index].uid\r\n      )\r\n    );\r\n  }\r\n\r\n  private addSmartEditSlotClass(slot: ContentSlotData): void {\r\n    if (slot) {\r\n      this.dynamicAttributeService.addDynamicAttributes(\r\n        this.elementRef.nativeElement,\r\n        this.renderer,\r\n        { slotData: slot }\r\n      );\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscription?.unsubscribe();\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { OutletModule } from '../../outlet/outlet.module';\r\nimport { PageComponentModule } from '../component/page-component.module';\r\nimport { PageSlotComponent } from './page-slot.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, OutletModule, PageComponentModule],\r\n  providers: [],\r\n  declarations: [PageSlotComponent],\r\n  exports: [PageSlotComponent],\r\n})\r\nexport class PageSlotModule {}\r\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\r\nimport { CmsService, Page } from '@spartacus/core';\r\nimport { combineLatest, Observable, of } from 'rxjs';\r\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\r\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\r\nimport {\r\n  BREAKPOINT,\r\n  LayoutConfig,\r\n  LayoutSlotConfig,\r\n  SlotConfig,\r\n} from '../../../layout/config/layout-config';\r\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PageLayoutService {\r\n  constructor(\r\n    private cms: CmsService,\r\n    private config: LayoutConfig,\r\n    private breakpointService: BreakpointService,\r\n    @Optional()\r\n    @Inject(PAGE_LAYOUT_HANDLER)\r\n    private handlers: PageLayoutHandler[]\r\n  ) {}\r\n\r\n  // Prints warn messages for missing layout configs.\r\n  // The warnings are only printed once per config\r\n  // to not pollute the console log.\r\n  private warnLogMessages = {};\r\n  private logSlots = {};\r\n\r\n  getSlots(section?: string): Observable<string[]> {\r\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\r\n      map(([page, breakpoint]) => {\r\n        const pageTemplate = page.template;\r\n        const slots = this.resolveSlots(page, section, breakpoint);\r\n        return { slots, pageTemplate, breakpoint };\r\n      }),\r\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\r\n        let result = of(slots);\r\n        for (const handler of this.handlers || []) {\r\n          result = handler.handle(result, pageTemplate, section, breakpoint);\r\n        }\r\n        return result;\r\n      }),\r\n      distinctUntilChanged((a, b) => {\r\n        if (a.length !== b.length) {\r\n          return false;\r\n        }\r\n        for (let i = 0; i < a.length; i++) {\r\n          if (a[i] !== b[i]) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns an observable with the last page slot above-the-fold\r\n   * for the given pageTemplate / breakpoint.\r\n   *\r\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\r\n   */\r\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\r\n    return this.breakpointService.breakpoint$.pipe(\r\n      map((breakpoint) => {\r\n        if (!this.config.layoutSlots) {\r\n          // no layout config available\r\n          return null;\r\n        }\r\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\r\n        const config = this.getResponsiveSlotConfig(\r\n          <LayoutSlotConfig>pageTemplateConfig,\r\n          'pageFold',\r\n          breakpoint\r\n        );\r\n        return config ? config.pageFold : null;\r\n      })\r\n    );\r\n  }\r\n\r\n  private resolveSlots(page, section, breakpoint): string[] {\r\n    const config = this.getSlotConfig(\r\n      page.template,\r\n      'slots',\r\n      section,\r\n      breakpoint\r\n    );\r\n    if (config && config.slots) {\r\n      const pageSlots = Object.keys(page.slots);\r\n      return config.slots.filter((slot) => pageSlots.includes(slot));\r\n    } else if (!section) {\r\n      this.logMissingLayoutConfig(page);\r\n      return Object.keys(page.slots);\r\n    } else {\r\n      this.logMissingLayoutConfig(page, section);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  get page$(): Observable<Page> {\r\n    return this.cms.getCurrentPage().pipe(filter((page) => !!page));\r\n  }\r\n\r\n  get templateName$(): Observable<string> {\r\n    return this.page$.pipe(\r\n      filter((page) => !!page.template),\r\n      map((page: Page) => page.template)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * load slots from the layout configuration. The breakpoint is used\r\n   * to load a specific configuration for the given breakpoint. If there's\r\n   * no configuration available for the given breakpoint the default slot\r\n   * configuration is returned.\r\n   */\r\n  protected getSlotConfig(\r\n    templateUid: string,\r\n    configAttribute: string,\r\n    section?: string,\r\n    breakpoint?: BREAKPOINT\r\n  ): SlotConfig {\r\n    if (!this.config.layoutSlots) {\r\n      return null;\r\n    }\r\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\r\n\r\n    if (section) {\r\n      return this.getSlotConfigForSection(\r\n        templateUid,\r\n        configAttribute,\r\n        section,\r\n        breakpoint\r\n      );\r\n    }\r\n\r\n    if (pageTemplateConfig) {\r\n      return this.getResponsiveSlotConfig(\r\n        <LayoutSlotConfig>pageTemplateConfig,\r\n        configAttribute,\r\n        breakpoint\r\n      );\r\n    }\r\n  }\r\n\r\n  protected getSlotConfigForSection(\r\n    templateUid: string,\r\n    configAttribute: string,\r\n    section?: string,\r\n    breakpoint?: BREAKPOINT\r\n  ): SlotConfig {\r\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\r\n\r\n    if (!pageTemplateConfig) {\r\n      return null;\r\n    }\r\n\r\n    // if there's no section config on the page layout\r\n    // we fall back to the global section config\r\n    const sectionConfig = pageTemplateConfig[section]\r\n      ? pageTemplateConfig[section]\r\n      : this.config.layoutSlots[section];\r\n\r\n    if (!sectionConfig) {\r\n      return null;\r\n    }\r\n\r\n    const responsiveConfig = this.getResponsiveSlotConfig(\r\n      <LayoutSlotConfig>sectionConfig,\r\n      configAttribute,\r\n      breakpoint\r\n    );\r\n\r\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\r\n      return responsiveConfig;\r\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\r\n      return pageTemplateConfig[section];\r\n    } else if (this.config.layoutSlots[section]) {\r\n      return <SlotConfig>this.config.layoutSlots[section];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a list of slots for a breakpoint specific configuratoin\r\n   * If there's no specific configuration for the breakpoint,\r\n   * the closest available configuration will be returned.\r\n   */\r\n  protected getResponsiveSlotConfig(\r\n    layoutSlotConfig: LayoutSlotConfig,\r\n    configAttribute: string,\r\n    breakpoint?: BREAKPOINT\r\n  ): SlotConfig {\r\n    let slotConfig = <SlotConfig>layoutSlotConfig;\r\n\r\n    // fallback to default slot config\r\n    if (!layoutSlotConfig || !breakpoint) {\r\n      return slotConfig;\r\n    }\r\n\r\n    // we have a config for the specific breakpoint\r\n    if (\r\n      layoutSlotConfig[breakpoint] &&\r\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\r\n    ) {\r\n      return <SlotConfig>layoutSlotConfig[breakpoint];\r\n    }\r\n\r\n    // find closest config\r\n    const all = this.breakpointService.breakpoints;\r\n\r\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\r\n      if (\r\n        layoutSlotConfig[br] &&\r\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\r\n      ) {\r\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\r\n      }\r\n    }\r\n    return slotConfig;\r\n  }\r\n\r\n  /**\r\n   * In order to help developers, we print some detailed log information in\r\n   * case there's no layout configuration available for the given page template\r\n   * or section. Additionally, the slot positions are printed in the console\r\n   * in a format that can be copied / paste to the configuration.\r\n   */\r\n  private logMissingLayoutConfig(page: Page, section?: string): void {\r\n    if (!isDevMode()) {\r\n      return;\r\n    }\r\n    if (!this.logSlots[page.template]) {\r\n      // the info log is not printed in production\r\n      // tslint:disable-next-line: no-console\r\n      console.info(\r\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\r\n      );\r\n      this.logSlots[page.template] = true;\r\n    }\r\n\r\n    const cacheKey = section || page.template;\r\n    if (!this.warnLogMessages[cacheKey]) {\r\n      console.warn(\r\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\r\n      );\r\n      this.warnLogMessages[cacheKey] = true;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\r\nimport { PageLayoutService } from './page-layout.service';\r\n\r\n@Component({\r\n  selector: 'cx-page-layout',\r\n  templateUrl: './page-layout.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PageLayoutComponent {\r\n  @Input() set section(value: string) {\r\n    this.section$.next(value);\r\n  }\r\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\r\n  readonly templateName$: Observable<string> = this.pageLayoutService\r\n    .templateName$;\r\n\r\n  readonly layoutName$: Observable<string> = this.section$.pipe(\r\n    switchMap((section) => (section ? of(section) : this.templateName$)),\r\n    tap((name) => {\r\n      this.styleClass = name;\r\n    })\r\n  );\r\n\r\n  readonly slots$: Observable<string[]> = this.section$.pipe(\r\n    switchMap((section) => this.pageLayoutService.getSlots(section))\r\n  );\r\n\r\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\r\n    switchMap((templateName) =>\r\n      this.pageLayoutService.getPageFoldSlot(templateName)\r\n    ),\r\n    distinctUntilChanged()\r\n  );\r\n\r\n  private currentClass;\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2,\r\n    private pageLayoutService: PageLayoutService\r\n  ) {}\r\n\r\n  set styleClass(cls: string) {\r\n    if (this.currentClass) {\r\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\r\n    }\r\n    this.renderer.addClass(this.el.nativeElement, cls);\r\n    this.currentClass = cls;\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\r\nimport { OutletModule } from '../../outlet/outlet.module';\r\nimport { PageLayoutComponent } from './page-layout.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, OutletModule, PageSlotModule],\r\n  declarations: [PageLayoutComponent],\r\n  exports: [PageLayoutComponent],\r\n})\r\nexport class PageLayoutModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { Config } from '@spartacus/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: Config,\r\n})\r\nexport abstract class PWAModuleConfig {\r\n  pwa?: {\r\n    enabled?: boolean;\r\n    addToHomeScreen?: boolean;\r\n  };\r\n}\r\n\r\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\r\n  pwa: {\r\n    enabled: false,\r\n    addToHomeScreen: false,\r\n  },\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  GlobalMessageService,\r\n  GlobalMessageType,\r\n  WindowRef,\r\n} from '@spartacus/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { PWAModuleConfig } from '../pwa.module-config';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AddToHomeScreenService {\r\n  private deferredEvent: any;\r\n\r\n  private canPrompt = new BehaviorSubject<boolean>(false);\r\n\r\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\r\n\r\n  constructor(\r\n    private config: PWAModuleConfig,\r\n    private globalMessageService: GlobalMessageService,\r\n    private winRef: WindowRef\r\n  ) {\r\n    if (this.config.pwa.addToHomeScreen) {\r\n      this.init();\r\n    }\r\n  }\r\n\r\n  init() {\r\n    if (this.winRef.nativeWindow) {\r\n      this.winRef.nativeWindow.addEventListener(\r\n        'beforeinstallprompt',\r\n        (event) => {\r\n          event.preventDefault();\r\n          this.deferredEvent = event;\r\n          this.enableAddToHomeScreen();\r\n        }\r\n      );\r\n\r\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\r\n        this.globalMessageService.add(\r\n          { key: 'pwa.addedToHomeScreen' },\r\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\r\n        );\r\n\r\n        this.disableAddToHomeScreen();\r\n        this.deferredEvent = null;\r\n      });\r\n    }\r\n  }\r\n\r\n  enableAddToHomeScreen(): void {\r\n    this.canPrompt.next(true);\r\n  }\r\n\r\n  disableAddToHomeScreen(): void {\r\n    this.canPrompt.next(false);\r\n  }\r\n\r\n  firePrompt(): void {\r\n    if (this.deferredEvent) {\r\n      this.deferredEvent.prompt();\r\n    }\r\n  }\r\n}\r\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\r\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\r\nimport {\r\n  ServiceWorkerModule,\r\n  SwRegistrationOptions,\r\n} from '@angular/service-worker';\r\nimport { Config, I18nModule, provideDefaultConfig } from '@spartacus/core';\r\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\r\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\r\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\r\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\r\n\r\nexport function pwaConfigurationFactory(\r\n  pwaConfig: PWAModuleConfig\r\n): SwRegistrationOptions {\r\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\r\n}\r\n\r\nexport function pwaFactory(addToHomeScreenService): any {\r\n  const result = () => addToHomeScreenService;\r\n  return result;\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ServiceWorkerModule.register('/ngsw-worker.js'),\r\n    I18nModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(defaultPWAModuleConfig),\r\n    {\r\n      provide: SwRegistrationOptions,\r\n      useFactory: pwaConfigurationFactory,\r\n      deps: [Config],\r\n    },\r\n    {\r\n      provide: APP_INITIALIZER,\r\n      useFactory: pwaFactory,\r\n      deps: [AddToHomeScreenService],\r\n      multi: true,\r\n    },\r\n  ],\r\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\r\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\r\n})\r\nexport class PwaModule {}\r\n","import { APP_INITIALIZER, Provider } from '@angular/core';\r\nimport { LanguageService, WindowRef } from '@spartacus/core';\r\n\r\nexport const htmlLangProvider: Provider = {\r\n  provide: APP_INITIALIZER,\r\n  multi: true,\r\n  useFactory: setHtmlLangAttribute,\r\n  deps: [WindowRef, LanguageService],\r\n};\r\n\r\n/**\r\n * Sets active language in <html lang=\"\">\r\n */\r\nexport function setHtmlLangAttribute(\r\n  winRef: WindowRef,\r\n  languageService: LanguageService\r\n) {\r\n  const result = () => {\r\n    languageService.getActive().subscribe((lang) => {\r\n      winRef.document.documentElement.lang = lang.replace(/_/g, '-');\r\n    });\r\n  };\r\n  return result;\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\r\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\r\nimport { filter } from 'rxjs/operators';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SeoMetaService implements OnDestroy {\r\n  constructor(\r\n    protected ngTitle: Title,\r\n    protected ngMeta: Meta,\r\n    protected pageMetaService: PageMetaService\r\n  ) {}\r\n\r\n  private subscription: Subscription;\r\n\r\n  init() {\r\n    this.subscription = this.pageMetaService\r\n      .getMeta()\r\n      .pipe(filter(Boolean))\r\n      .subscribe((meta: PageMeta) => (this.meta = meta));\r\n  }\r\n\r\n  protected set meta(meta: PageMeta) {\r\n    this.title = meta.title;\r\n    this.description = meta.description;\r\n    this.image = meta.image;\r\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\r\n  }\r\n\r\n  protected set title(title: string) {\r\n    this.ngTitle.setTitle(title || '');\r\n  }\r\n\r\n  protected set description(value: string) {\r\n    this.addTag({ name: 'description', content: value });\r\n  }\r\n\r\n  protected set image(imageUrl: string) {\r\n    if (imageUrl) {\r\n      this.addTag({ name: 'og:image', content: imageUrl });\r\n    }\r\n  }\r\n\r\n  protected set robots(value: PageRobotsMeta[]) {\r\n    if (value) {\r\n      this.addTag({ name: 'robots', content: value.join(', ') });\r\n    }\r\n  }\r\n\r\n  protected addTag(meta: MetaDefinition) {\r\n    if (meta.content) {\r\n      this.ngMeta.updateTag(meta);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, OnDestroy, Optional } from '@angular/core';\r\nimport { combineLatest, Observable, of, Subscription } from 'rxjs';\r\nimport { SchemaBuilder } from './builders/schema.interface';\r\nimport { SCHEMA_BUILDER } from './builders/tokens';\r\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class StructuredDataFactory implements OnDestroy {\r\n  constructor(\r\n    private scriptBuilder: JsonLdScriptFactory,\r\n    @Optional()\r\n    @Inject(SCHEMA_BUILDER)\r\n    private builders: SchemaBuilder[]\r\n  ) {}\r\n\r\n  private subscription: Subscription;\r\n\r\n  build() {\r\n    this.subscription = this.collectSchemas().subscribe((schema: {}[]) => {\r\n      this.scriptBuilder.build(schema);\r\n    });\r\n  }\r\n\r\n  private collectSchemas(): Observable<any[]> {\r\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\r\n      return of();\r\n    }\r\n    return combineLatest(\r\n      this.builders.map((builder) => builder.build())\r\n    ).pipe();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import {\r\n  Component,\r\n  ElementRef,\r\n  HostBinding,\r\n  HostListener,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { RoutingService } from '@spartacus/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport {\r\n  FocusConfig,\r\n  KeyboardFocusService,\r\n} from '../a11y/keyboard-focus/index';\r\nimport { SkipLinkComponent } from '../a11y/skip-link/index';\r\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\r\n\r\n@Component({\r\n  selector: 'cx-storefront',\r\n  templateUrl: './storefront.component.html',\r\n})\r\nexport class StorefrontComponent implements OnInit, OnDestroy {\r\n  navigateSubscription: Subscription;\r\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\r\n\r\n  @HostBinding('class.start-navigating') startNavigating;\r\n  @HostBinding('class.stop-navigating') stopNavigating;\r\n\r\n  // required by esc focus\r\n  @HostBinding('tabindex') tabindex = '0';\r\n\r\n  @ViewChild(SkipLinkComponent) child: SkipLinkComponent;\r\n\r\n  private keyboardFocusConfig: FocusConfig = {\r\n    focusOnEscape: true,\r\n    focusOnDoubleEscape: true,\r\n  };\r\n\r\n  @HostListener('keydown.escape', ['$event'])\r\n  handleEscape(event: KeyboardEvent): void {\r\n    this.keyboardFocusService.handleEscape(\r\n      this.elementRef.nativeElement,\r\n      this.keyboardFocusConfig,\r\n      event\r\n    );\r\n  }\r\n\r\n  constructor(\r\n    private hamburgerMenuService: HamburgerMenuService,\r\n    private routingService: RoutingService,\r\n    protected elementRef: ElementRef<HTMLElement>,\r\n    protected keyboardFocusService: KeyboardFocusService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.navigateSubscription = this.routingService\r\n      .isNavigating()\r\n      .subscribe((val) => {\r\n        this.startNavigating = val === true;\r\n        this.stopNavigating = val === false;\r\n      });\r\n  }\r\n\r\n  collapseMenuIfClickOutside(event: MouseEvent) {\r\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\r\n      this.collapseMenu();\r\n    }\r\n  }\r\n\r\n  collapseMenu(): void {\r\n    this.hamburgerMenuService.toggle(true);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.navigateSubscription) {\r\n      this.navigateSubscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FeaturesConfigModule } from '@spartacus/core';\r\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\r\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\r\nimport { OutletModule } from '../../cms-structure/outlet/outlet.module';\r\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\r\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\r\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\r\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\r\nimport { AnonymousConsentsDialogModule } from '../../shared/components/anonymous-consents-dialog/anonymous-consents-dialog.module';\r\nimport { KeyboardFocusModule } from '../a11y/keyboard-focus/keyboard-focus.module';\r\nimport { SkipLinkModule } from '../a11y/skip-link/skip-link.module';\r\nimport { StorefrontComponent } from './storefront.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    GlobalMessageComponentModule,\r\n    OutletModule,\r\n    OutletRefModule,\r\n    PwaModule,\r\n    PageLayoutModule,\r\n    SeoModule,\r\n    PageSlotModule,\r\n    AnonymousConsentsDialogModule,\r\n    FeaturesConfigModule,\r\n\r\n    SkipLinkModule,\r\n    KeyboardFocusModule,\r\n  ],\r\n  declarations: [StorefrontComponent],\r\n  exports: [StorefrontComponent],\r\n})\r\nexport class MainModule {}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\r\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\r\nimport { endWith, first, skipWhile } from 'rxjs/operators';\r\nimport { CmsComponentsService } from './cms-components.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CmsGuardsService {\r\n  constructor(\r\n    protected cmsComponentsService: CmsComponentsService,\r\n    protected injector: Injector\r\n  ) {}\r\n\r\n  cmsPageCanActivate(\r\n    componentTypes: string[],\r\n    route: CmsActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean | UrlTree> {\r\n    const guards = this.cmsComponentsService.getGuards(componentTypes);\r\n\r\n    if (guards.length) {\r\n      const canActivateObservables = guards.map((guardClass) => {\r\n        const guard = this.injector.get<CanActivate>(guardClass, null);\r\n        if (isCanActivate(guard)) {\r\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\r\n            first()\r\n          );\r\n        } else {\r\n          throw new Error('Invalid CanActivate guard in cmsMapping');\r\n        }\r\n      });\r\n\r\n      return concat(...canActivateObservables).pipe(\r\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\r\n        endWith(true),\r\n        first()\r\n      );\r\n    } else {\r\n      return of(true);\r\n    }\r\n  }\r\n}\r\n\r\nfunction wrapIntoObservable<T>(\r\n  value: T | Promise<T> | Observable<T>\r\n): Observable<T> {\r\n  if (isObservable(value)) {\r\n    return value;\r\n  }\r\n\r\n  if (isPromise(value)) {\r\n    return from(Promise.resolve(value));\r\n  }\r\n\r\n  return of(value);\r\n}\r\n\r\nfunction isPromise(obj: any): obj is Promise<any> {\r\n  return !!obj && typeof obj.then === 'function';\r\n}\r\n\r\nfunction isCanActivate(guard: any): guard is CanActivate {\r\n  return guard && isFunction<CanActivate>(guard.canActivate);\r\n}\r\n\r\nfunction isFunction<T>(v: any): v is T {\r\n  return typeof v === 'function';\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { TranslationChunkService, TranslationService } from '@spartacus/core';\r\nimport { CmsComponentsService } from './cms-components.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CmsI18nService {\r\n  constructor(\r\n    protected cmsComponentsService: CmsComponentsService,\r\n    protected translation: TranslationService,\r\n    protected translationChunk: TranslationChunkService\r\n  ) {}\r\n\r\n  loadForComponents(componentTypes: string[]) {\r\n    const i18nKeys = this.cmsComponentsService.getI18nKeys(componentTypes);\r\n    const i18nChunks = new Set<string>();\r\n    for (const key of i18nKeys) {\r\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\r\n    }\r\n    this.translation.loadChunks(Array.from(i18nChunks));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Route, Router } from '@angular/router';\r\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\r\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\r\nimport { CmsComponentsService } from './cms-components.service';\r\n\r\n// This service should be exposed in public API only after the refactor planned in https://github.com/SAP/spartacus/issues/7070\r\n@Injectable({ providedIn: 'root' })\r\nexport class CmsRoutesImplService {\r\n  constructor(\r\n    private router: Router,\r\n    private cmsComponentsService: CmsComponentsService\r\n  ) {}\r\n\r\n  private cmsRouteExists(url: string): boolean {\r\n    const isCmsDrivenRoute = url.startsWith('/');\r\n\r\n    if (!isCmsDrivenRoute) {\r\n      return false;\r\n    }\r\n\r\n    const routePath = url.substr(1);\r\n\r\n    return (\r\n      isCmsDrivenRoute &&\r\n      !!this.router.config.find(\r\n        (route: CmsRoute) =>\r\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\r\n   *\r\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\r\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\r\n   *\r\n   * @param pageContext\r\n   * @param currentUrl\r\n   */\r\n  handleCmsRoutesInGuard(\r\n    pageContext: PageContext,\r\n    componentTypes: string[],\r\n    currentUrl: string,\r\n    currentPageLabel: string\r\n  ): boolean {\r\n    if (this.cmsRouteExists(currentPageLabel)) {\r\n      return true;\r\n    }\r\n\r\n    const componentRoutes = this.cmsComponentsService.getChildRoutes(\r\n      componentTypes\r\n    );\r\n    if (componentRoutes.length) {\r\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\r\n        this.router.navigateByUrl(currentUrl);\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private updateRouting(\r\n    pageContext: PageContext,\r\n    pageLabel: string,\r\n    routes: Route[]\r\n  ): boolean {\r\n    if (\r\n      pageContext.type === PageType.CONTENT_PAGE &&\r\n      pageLabel.startsWith('/') &&\r\n      pageLabel.length > 1\r\n    ) {\r\n      const newRoute: CmsRoute = {\r\n        path: pageLabel.substr(1),\r\n        component: PageLayoutComponent,\r\n        children: routes,\r\n        data: {\r\n          cxCmsRouteContext: {\r\n            type: pageContext.type,\r\n            id: pageLabel,\r\n          },\r\n        },\r\n      };\r\n\r\n      this.router.resetConfig([newRoute, ...this.router.config]);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { PageContext } from '@spartacus/core';\r\nimport { CmsRoutesImplService } from './cms-routes-impl.service';\r\n\r\n// Public injection token for the private implementation of the service `CmsRoutesImplService`.\r\n// After #7070, this class should be replaced with a real implementation.\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useExisting: CmsRoutesImplService,\r\n})\r\nexport abstract class CmsRoutesService {\r\n  abstract handleCmsRoutesInGuard(\r\n    pageContext: PageContext,\r\n    componentTypes: string[],\r\n    currentUrl: string,\r\n    currentPageLabel: string\r\n  ): boolean;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport {\r\n  CmsActivatedRouteSnapshot,\r\n  CmsService,\r\n  Page,\r\n  PageContext,\r\n  PageType,\r\n  SemanticPathService,\r\n} from '@spartacus/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport {\r\n  filter,\r\n  map,\r\n  switchMap,\r\n  take,\r\n  tap,\r\n  withLatestFrom,\r\n} from 'rxjs/operators';\r\nimport { CmsGuardsService } from '../services/cms-guards.service';\r\nimport { CmsI18nService } from '../services/cms-i18n.service';\r\nimport { CmsRoutesService } from '../services/cms-routes.service';\r\nimport { CmsComponentsService } from '../services';\r\n\r\n/**\r\n * Helper service for `CmsPageGuard`\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CmsPageGuardService {\r\n  constructor(\r\n    protected semanticPathService: SemanticPathService,\r\n    protected cmsService: CmsService,\r\n    protected cmsRoutes: CmsRoutesService,\r\n    protected cmsI18n: CmsI18nService,\r\n    protected cmsGuards: CmsGuardsService,\r\n    protected cmsComponentsService: CmsComponentsService\r\n  ) {}\r\n\r\n  /**\r\n   * Takes CMS components types in the current CMS page, triggers (configurable) side effects and returns a boolean - whether the route can be activated.\r\n   *\r\n   * Based on `cmsComponents` config for the components in the page:\r\n   * - Evaluates components' guards; if one of them emits false or UrlTree - the route cannot be activated or redirects to the given UrlTree, respectively.\r\n   * - If all components' guards emitted true, then the route can be activated\r\n   * - Then we trigger loading of configured i18n chunks in parallel\r\n   * - And we register the configured children routes of cms components\r\n   *\r\n   * @param pageContext current cms page context\r\n   * @param pageData cms page data\r\n   * @param route activated route snapshot\r\n   * @param state router state snapshot\r\n   *\r\n   * @returns boolean observable - whether the route can be activated\r\n   */\r\n  canActivatePage(\r\n    pageContext: PageContext,\r\n    pageData: Page,\r\n    route: CmsActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean | UrlTree> {\r\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\r\n      take(1),\r\n      switchMap((componentTypes) =>\r\n        this.cmsComponentsService.determineMappings(componentTypes)\r\n      ),\r\n      switchMap((componentTypes) =>\r\n        this.cmsGuards\r\n          .cmsPageCanActivate(componentTypes, route, state)\r\n          .pipe(withLatestFrom(of(componentTypes)))\r\n      ),\r\n      tap(([canActivate, componentTypes]) => {\r\n        if (canActivate === true) {\r\n          this.cmsI18n.loadForComponents(componentTypes);\r\n        }\r\n      }),\r\n      map(([canActivate, componentTypes]) => {\r\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\r\n        if (canActivate === true && !route?.data?.cxCmsRouteContext) {\r\n          return this.cmsRoutes.handleCmsRoutesInGuard(\r\n            pageContext,\r\n            componentTypes,\r\n            state.url,\r\n            pageLabel\r\n          );\r\n        }\r\n        return canActivate;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Activates the \"NOT FOUND\" cms page.\r\n   *\r\n   * It loads cms page data for the \"NOT FOUND\" page and puts it in the state of the the requested page label.\r\n   * Then it processes its CMS components with the method `canActivatePage()` of this service. For more, see its docs.\r\n   */\r\n  canActivateNotFoundPage(\r\n    pageContext: PageContext,\r\n    route: CmsActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean | UrlTree> {\r\n    const notFoundCmsPageContext: PageContext = {\r\n      type: PageType.CONTENT_PAGE,\r\n      id: this.semanticPathService.get('notFound'),\r\n    };\r\n\r\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\r\n      switchMap((notFoundPage) => {\r\n        if (notFoundPage) {\r\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\r\n            tap((notFoundIndex) => {\r\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\r\n            }),\r\n            switchMap((notFoundIndex) =>\r\n              this.cmsService.getPageIndex(pageContext).pipe(\r\n                // we have to wait for page index update\r\n                filter((index) => index === notFoundIndex)\r\n              )\r\n            ),\r\n            switchMap(() =>\r\n              this.canActivatePage(pageContext, notFoundPage, route, state)\r\n            )\r\n          );\r\n        }\r\n        return of(false);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport {\r\n  CmsActivatedRouteSnapshot,\r\n  CmsService,\r\n  ProtectedRoutesGuard,\r\n  RouteLoadStrategy,\r\n  RoutingConfigService,\r\n  RoutingService,\r\n} from '@spartacus/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { first, switchMap } from 'rxjs/operators';\r\nimport { CmsPageGuardService } from './cms-page-guard.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CmsPageGuard implements CanActivate {\r\n  static guardName = 'CmsPageGuard';\r\n\r\n  constructor(\r\n    protected routingService: RoutingService,\r\n    protected cmsService: CmsService,\r\n    protected protectedRoutesGuard: ProtectedRoutesGuard,\r\n    protected service: CmsPageGuardService,\r\n    protected routingConfig: RoutingConfigService\r\n  ) {}\r\n\r\n  /**\r\n   * Tries to load the CMS page data for the anticipated route and returns:\r\n   * - `true` - if it can be activated\r\n   * - `false` - if it cannot be activated\r\n   * - `UrlTree` - if user should be redirected to a given `UrlTree`\r\n   *\r\n   * If the route can be activated, it fires additional calculations on the CMS components present on this CMS page,\r\n   * based on their configuration (`cmsComponents` config).\r\n   *\r\n   * For more, see docs of the `CmsPageGuardService.canActivatePage`.\r\n   */\r\n  canActivate(\r\n    route: CmsActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean | UrlTree> {\r\n    return this.protectedRoutesGuard.canActivate(route).pipe(\r\n      switchMap((canActivate) =>\r\n        canActivate\r\n          ? this.routingService.getNextPageContext().pipe(\r\n              switchMap((pageContext) =>\r\n                this.cmsService.getPage(pageContext, this.shouldReload()).pipe(\r\n                  first(),\r\n                  switchMap((pageData) =>\r\n                    pageData\r\n                      ? this.service.canActivatePage(\r\n                          pageContext,\r\n                          pageData,\r\n                          route,\r\n                          state\r\n                        )\r\n                      : this.service.canActivateNotFoundPage(\r\n                          pageContext,\r\n                          route,\r\n                          state\r\n                        )\r\n                  )\r\n                )\r\n              )\r\n            )\r\n          : of(false)\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns whether we should reload the CMS page data, even when it was loaded before.\r\n   */\r\n  private shouldReload(): boolean {\r\n    return this.routingConfig.getLoadStrategy() !== RouteLoadStrategy.ONCE;\r\n  }\r\n}\r\n","import { Injector } from '@angular/core';\r\nimport { Route, Router } from '@angular/router';\r\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\r\nimport { PageLayoutComponent } from '../../page/page-layout/page-layout.component';\r\n\r\nconst cmsRoute: Route = {\r\n  path: '**',\r\n  canActivate: [CmsPageGuard],\r\n  component: PageLayoutComponent,\r\n};\r\n\r\nexport function addCmsRoute(injector: Injector) {\r\n  const result = () => {\r\n    const router = injector.get(Router);\r\n    router.config.push(cmsRoute);\r\n  };\r\n  return result;\r\n}\r\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\r\n\r\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\r\n  home: { paths: [''] },\r\n  notFound: { paths: ['not-found'] },\r\n  cart: { paths: ['cart'] },\r\n\r\n  // semantic links for login related pages\r\n  login: { paths: ['login'], protected: false },\r\n  register: { paths: ['login/register'], protected: false },\r\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\r\n  resetPassword: { paths: ['login/pw/change'], protected: false },\r\n  logout: { paths: ['logout'] },\r\n  checkoutLogin: { paths: ['checkout-login'] },\r\n\r\n  checkout: { paths: ['checkout'] },\r\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\r\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\r\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\r\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\r\n  orderConfirmation: { paths: ['order-confirmation'] },\r\n\r\n  // plp routes\r\n  search: { paths: ['search/:query'] },\r\n  category: {\r\n    paths: ['category/:categoryCode'],\r\n    paramsMapping: { categoryCode: 'code' },\r\n  },\r\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\r\n\r\n  // pdp routes\r\n  product: {\r\n    paths: ['product/:productCode/:name'],\r\n    paramsMapping: { productCode: 'code' },\r\n  },\r\n\r\n  termsAndConditions: { paths: ['terms-and-conditions'] },\r\n  orders: {\r\n    paths: ['my-account/orders'],\r\n  },\r\n  orderDetails: {\r\n    paths: ['my-account/order/:orderCode'],\r\n    paramsMapping: { orderCode: 'code' },\r\n  },\r\n  orderGuest: {\r\n    paths: ['guest/order/:orderCode'],\r\n    paramsMapping: { orderCode: 'code' },\r\n  },\r\n  orderReturn: {\r\n    paths: ['my-account/order/return/:orderCode'],\r\n    paramsMapping: { orderCode: 'code' },\r\n  },\r\n  orderReturnConfirmation: {\r\n    paths: ['my-account/order/return/confirmation/:orderCode'],\r\n    paramsMapping: { orderCode: 'code' },\r\n  },\r\n  orderCancel: {\r\n    paths: ['my-account/order/cancel/:orderCode'],\r\n    paramsMapping: { orderCode: 'code' },\r\n  },\r\n  orderCancelConfirmation: {\r\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\r\n    paramsMapping: { orderCode: 'code' },\r\n  },\r\n  returnRequestDetails: {\r\n    paths: ['my-account/return-request/:returnCode'],\r\n    paramsMapping: { returnCode: 'rma' },\r\n  },\r\n  coupons: { paths: ['my-account/coupons'] },\r\n  couponClaim: {\r\n    paths: ['my-account/coupon/claim/:couponCode'],\r\n    paramsMapping: { couponCode: 'code' },\r\n  },\r\n};\r\n\r\nexport const defaultRoutingConfig: RoutingConfig = {\r\n  routing: {\r\n    routes: defaultStorefrontRoutesConfig,\r\n  },\r\n};\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport {\r\n  provideDefaultConfig,\r\n  RoutingModule as CoreRoutingModule,\r\n} from '@spartacus/core';\r\nimport { CmsRouteModule } from './cms-route/cms-route.module';\r\nimport { defaultRoutingConfig } from './default-routing-config';\r\n\r\n@NgModule({\r\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\r\n})\r\nexport class RoutingModule {\r\n  static forRoot(): ModuleWithProviders<RoutingModule> {\r\n    return {\r\n      ngModule: RoutingModule,\r\n      providers: [provideDefaultConfig(defaultRoutingConfig)],\r\n    };\r\n  }\r\n}\r\n","import { isDevMode } from '@angular/core';\r\nimport { UrlMatchResult, UrlSegment } from '@angular/router';\r\n\r\n/**\r\n * Matches the pattern '[ ** / ] marker / :paramName'\r\n *\r\n * @param marker phrase that indicates the start of the match\r\n * @param paramName name of the parameter present after the marker\r\n * @param precedingParamName name of the parameter for every preceding url segment\r\n *        i.e. `param` will result in `param0`, `param1`, ...\r\n */\r\nexport function getSuffixUrlMatcher({\r\n  marker,\r\n  paramName,\r\n  precedingParamName,\r\n}: {\r\n  marker: string;\r\n  paramName: string;\r\n  precedingParamName?: string;\r\n}) {\r\n  precedingParamName = precedingParamName || 'param';\r\n  const matcher = function suffixUrlMatcher(\r\n    segments: UrlSegment[]\r\n  ): UrlMatchResult | null {\r\n    const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\r\n    const isMarkerLastSegment = markerIndex === segments.length - 1;\r\n\r\n    if (markerIndex === -1 || isMarkerLastSegment) {\r\n      return null;\r\n    }\r\n\r\n    const paramIndex = markerIndex + 1;\r\n    const posParams: { [name: string]: UrlSegment } = {\r\n      [paramName]: segments[paramIndex],\r\n    };\r\n\r\n    for (let i = 0; i < markerIndex; i++) {\r\n      posParams[`${precedingParamName}${i}`] = segments[i];\r\n    }\r\n\r\n    return { consumed: segments.slice(0, paramIndex + 1), posParams };\r\n  };\r\n\r\n  if (isDevMode()) {\r\n    matcher['_suffixRouteConfig'] = { marker, paramName, precedingParamName }; // property added for easier debugging of routes\r\n  }\r\n\r\n  return matcher;\r\n}\r\n\r\nfunction findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\r\n  for (let index = elements.length - 1; index >= 0; index--) {\r\n    if (predicate(elements[index])) {\r\n      return index;\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { Injectable } from '@angular/core';\r\nimport { PageMeta, PageMetaService } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { SchemaBuilder } from '../schema.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\r\n  constructor(protected pageMetaService: PageMetaService) {}\r\n\r\n  build(): Observable<any> {\r\n    return this.pageMetaService\r\n      .getMeta()\r\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\r\n  }\r\n\r\n  protected collect(pageMeta: PageMeta): any {\r\n    if (!pageMeta?.breadcrumbs) {\r\n      return;\r\n    }\r\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\r\n      return {\r\n        '@type': 'ListItem',\r\n        position: index + 1,\r\n        item: {\r\n          '@id': crumb.link,\r\n          name: crumb.label,\r\n        },\r\n      };\r\n    });\r\n\r\n    if (pageMeta.title) {\r\n      crumbs.push({\r\n        '@type': 'ListItem',\r\n        position: crumbs.length + 1,\r\n        item: {\r\n          '@id': pageMeta.title,\r\n          name: pageMeta.title,\r\n        },\r\n      });\r\n    }\r\n\r\n    return {\r\n      '@context': 'http://schema.org',\r\n      '@type': 'BreadcrumbList',\r\n      itemListElement: crumbs,\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { JsonLdBuilder } from '../schema.interface';\r\n\r\n/**\r\n * Builds the structured data for the product reviews, see https://schema.org/Review.\r\n * The data includes the aggregated product rating and the individual reviews.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\r\n  constructor(private reviewService: ProductReviewService) {}\r\n\r\n  build(product: Product): Observable<any> {\r\n    return this.reviewService.getByProductCode(product.code).pipe(\r\n      filter(Boolean),\r\n      map((reviews: Review[]) => {\r\n        return {\r\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\r\n          review: reviews.map((review) => this.buildReviews(review)),\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\r\n    const aggregated: any = {\r\n      '@type': 'AggregateRating',\r\n    };\r\n    if (product.averageRating) {\r\n      aggregated.ratingValue = product.averageRating;\r\n    }\r\n    if (reviews) {\r\n      aggregated.ratingCount = reviews.filter((rev) => !!rev.rating).length;\r\n      aggregated.reviewCount = reviews.filter((rev) => !!rev.comment).length;\r\n    }\r\n    return aggregated;\r\n  }\r\n\r\n  private buildReviews(review: Review) {\r\n    const reviewSchema: any = {\r\n      '@type': 'review',\r\n    };\r\n\r\n    if (review.principal && review.principal.name) {\r\n      reviewSchema.author = review.principal.name;\r\n    }\r\n    if (review.date) {\r\n      const date = new Date(review.date);\r\n      reviewSchema.datePublished = `${date.getFullYear()}-${\r\n        date.getMonth() + 1\r\n      }-${date.getDate()}`;\r\n    }\r\n    if (review.headline) {\r\n      reviewSchema.name = review.headline;\r\n    }\r\n    if (review.comment) {\r\n      reviewSchema.description = review.comment;\r\n    }\r\n    if (review.rating) {\r\n      reviewSchema.reviewRating = {\r\n        '@type': 'Rating',\r\n        ratingValue: review.rating.toString(),\r\n      };\r\n    }\r\n\r\n    return reviewSchema;\r\n  }\r\n}\r\n","import { Inject, Injectable, Optional } from '@angular/core';\r\nimport { Product } from '@spartacus/core';\r\nimport { combineLatest, Observable, of } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\r\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\r\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\r\n\r\n/**\r\n * Adds the minimal structured data for the product, see https://schema.org/product.\r\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\r\n * using the `JSONLD_PRODUCT_BUILDER` token.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductSchemaBuilder implements SchemaBuilder {\r\n  constructor(\r\n    private currentProduct: CurrentProductService,\r\n    @Optional()\r\n    @Inject(JSONLD_PRODUCT_BUILDER)\r\n    protected builders: JsonLdBuilder<Product>[]\r\n  ) {}\r\n\r\n  build(): Observable<any> {\r\n    return this.currentProduct.getProduct().pipe(\r\n      switchMap((product: Product) => {\r\n        if (product) {\r\n          return combineLatest(this.collect(product)).pipe(\r\n            map((res: {}[]) => Object.assign({}, ...res))\r\n          );\r\n        }\r\n        return of({});\r\n      })\r\n    );\r\n  }\r\n\r\n  protected collect(product: Product): Observable<any>[] {\r\n    if (!product || !product.code) {\r\n      return [];\r\n    }\r\n    const builders = this.builders\r\n      ? this.builders.map((builder) => builder.build(product))\r\n      : [];\r\n    return [\r\n      of({\r\n        '@context': 'http://schema.org',\r\n        '@type': 'Product',\r\n      }),\r\n      ...builders,\r\n    ];\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\r\nimport {\r\n  CmsBannerCarouselComponent as model,\r\n  CmsService,\r\n  ContentSlotComponentData,\r\n} from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map, tap } from 'rxjs/operators';\r\nimport { CmsComponentData } from '../../../cms-structure/index';\r\n\r\n/**\r\n * Generic carousel that renders CMS Components.\r\n */\r\n@Component({\r\n  selector: 'cx-banner-carousel',\r\n  templateUrl: 'banner-carousel.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class BannerCarouselComponent {\r\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\r\n    filter(Boolean),\r\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\r\n  );\r\n\r\n  private items$: Observable<\r\n    Observable<ContentSlotComponentData>[]\r\n  > = this.componentData$.pipe(\r\n    map((data) => data.banners.trim().split(' ')),\r\n    map((codes) => codes.map((code) => this.cmsService.getComponentData(code)))\r\n  );\r\n\r\n  /**\r\n   * Adds a specific theme for the carousel. The effect can be\r\n   * used in CSS customisations.\r\n   */\r\n  @HostBinding('class') theme = '';\r\n\r\n  constructor(\r\n    private componentData: CmsComponentData<model>,\r\n    private cmsService: CmsService\r\n  ) {}\r\n\r\n  /**\r\n   * Returns an Obervable with an Array of Observables. This is done, so that\r\n   * the component UI could consider to lazy load the UI components when they're\r\n   * in the viewpoint.\r\n   */\r\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\r\n    return this.items$;\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\r\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\r\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\r\nimport { BannerCarouselComponent } from './banner-carousel.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, PageComponentModule, CarouselModule, MediaModule],\r\n  providers: [\r\n    provideDefaultConfig({\r\n      cmsComponents: {\r\n        RotatingImagesComponent: {\r\n          component: BannerCarouselComponent,\r\n        },\r\n      },\r\n    } as CmsConfig),\r\n  ],\r\n  declarations: [BannerCarouselComponent],\r\n  entryComponents: [BannerCarouselComponent],\r\n  exports: [BannerCarouselComponent],\r\n})\r\nexport class BannerCarouselModule {}\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\r\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\r\nimport { MediaModule } from '../../../shared/components/media/media.module';\r\nimport { BannerComponent } from './banner.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, RouterModule, GenericLinkModule, MediaModule],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        SimpleResponsiveBannerComponent: {\r\n          component: BannerComponent,\r\n        },\r\n        BannerComponent: {\r\n          component: BannerComponent,\r\n        },\r\n        SimpleBannerComponent: {\r\n          component: BannerComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [BannerComponent],\r\n  entryComponents: [BannerComponent],\r\n  exports: [BannerComponent],\r\n})\r\nexport class BannerModule {}\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\r\nimport { LinkComponent } from './link.component';\r\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, RouterModule, GenericLinkModule],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        CMSLinkComponent: { component: LinkComponent },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [LinkComponent],\r\n  exports: [LinkComponent],\r\n  entryComponents: [LinkComponent],\r\n})\r\nexport class LinkModule {}\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ParagraphComponent } from './paragraph.component';\r\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        CMSParagraphComponent: {\r\n          component: ParagraphComponent,\r\n        },\r\n        CMSTabParagraphComponent: {\r\n          component: ParagraphComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [ParagraphComponent],\r\n  exports: [ParagraphComponent],\r\n  entryComponents: [ParagraphComponent],\r\n})\r\nexport class CmsParagraphModule {}\r\n","import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  OnDestroy,\r\n  OnInit,\r\n  QueryList,\r\n  ViewChildren,\r\n} from '@angular/core';\r\nimport {\r\n  CmsService,\r\n  CMSTabParagraphContainer,\r\n  WindowRef,\r\n} from '@spartacus/core';\r\nimport { combineLatest, Observable, Subscription } from 'rxjs';\r\nimport { distinctUntilChanged, map, switchMap } from 'rxjs/operators';\r\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\r\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\r\n\r\n@Component({\r\n  selector: 'cx-tab-paragraph-container',\r\n  templateUrl: './tab-paragraph-container.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TabParagraphContainerComponent\r\n  implements AfterViewInit, OnInit, OnDestroy {\r\n  activeTabNum = 0;\r\n\r\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\r\n    ComponentWrapperDirective\r\n  >;\r\n\r\n  tabTitleParams: Observable<any>[] = [];\r\n\r\n  subscription: Subscription;\r\n\r\n  constructor(\r\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\r\n    protected cmsService: CmsService,\r\n    protected winRef: WindowRef\r\n  ) {}\r\n\r\n  components$: Observable<any[]> = this.componentData.data$.pipe(\r\n    distinctUntilChanged((x, y) => x?.components === y?.components),\r\n    switchMap((data) =>\r\n      combineLatest(\r\n        (data?.components ?? '').split(' ').map((component) =>\r\n          this.cmsService.getComponentData<any>(component).pipe(\r\n            distinctUntilChanged(),\r\n            map((tab) => {\r\n              if (!tab) {\r\n                return undefined;\r\n              }\r\n\r\n              if (!tab.flexType) {\r\n                tab = {\r\n                  ...tab,\r\n                  flexType: tab.typeCode,\r\n                };\r\n              }\r\n\r\n              return {\r\n                ...tab,\r\n                title: `${data.uid}.tabs.${tab.uid}`,\r\n              };\r\n            })\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  select(tabNum: number): void {\r\n    this.activeTabNum = tabNum;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.activeTabNum =\r\n      this.winRef.nativeWindow?.history?.state?.activeTab ?? this.activeTabNum;\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\r\n    // In this case, the title parameters are directly pulled from them.\r\n    // If the sub cms components data does not exist, it should should be loaded first.\r\n    // In this case, listen to the changes to wait for them to be created.\r\n    if (this.children.length > 0) {\r\n      this.getTitleParams(this.children);\r\n    } else {\r\n      this.subscription = this.children.changes.subscribe(\r\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\r\n          this.getTitleParams(tabComps)\r\n      );\r\n    }\r\n  }\r\n\r\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\r\n    children.forEach((comp) => {\r\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\r\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\r\n      } else {\r\n        this.tabTitleParams.push(null);\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\r\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\r\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\r\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, PageComponentModule, OutletModule, I18nModule],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        CMSTabParagraphContainer: {\r\n          component: TabParagraphContainerComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [TabParagraphContainerComponent],\r\n  entryComponents: [TabParagraphContainerComponent],\r\n  exports: [TabParagraphContainerComponent],\r\n})\r\nexport class TabParagraphContainerModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  Address,\r\n  CheckoutDeliveryService,\r\n  UserAddressService,\r\n} from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AddressBookComponentService {\r\n  constructor(\r\n    protected userAddressService: UserAddressService,\r\n    protected checkoutDeliveryService: CheckoutDeliveryService\r\n  ) {}\r\n\r\n  getAddresses(): Observable<Address[]> {\r\n    return this.userAddressService.getAddresses();\r\n  }\r\n\r\n  getAddressesStateLoading(): Observable<boolean> {\r\n    return this.userAddressService.getAddressesLoading();\r\n  }\r\n\r\n  loadAddresses() {\r\n    this.userAddressService.loadAddresses();\r\n  }\r\n\r\n  addUserAddress(address: Address) {\r\n    this.userAddressService.addUserAddress(address);\r\n  }\r\n\r\n  updateUserAddress(addressId: string, address: Address) {\r\n    this.userAddressService.updateUserAddress(addressId, address);\r\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  Address,\r\n  TranslationService,\r\n  UserAddressService,\r\n  CheckoutDeliveryService,\r\n} from '@spartacus/core';\r\nimport { Observable, combineLatest } from 'rxjs';\r\nimport { AddressBookComponentService } from './address-book.component.service';\r\nimport { Card } from '../../../shared/components/card';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'cx-address-book',\r\n  templateUrl: './address-book.component.html',\r\n})\r\nexport class AddressBookComponent implements OnInit {\r\n  addresses$: Observable<Address[]>;\r\n  cards$: Observable<Card[]>;\r\n  addressesStateLoading$: Observable<boolean>;\r\n  currentAddress: Address;\r\n\r\n  showAddAddressForm = false;\r\n  showEditAddressForm = false;\r\n  editCard: string;\r\n\r\n  constructor(\r\n    public service: AddressBookComponentService,\r\n    protected translation: TranslationService,\r\n    protected userAddressService: UserAddressService,\r\n    protected checkoutDeliveryService: CheckoutDeliveryService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.addresses$ = this.service.getAddresses();\r\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\r\n    this.service.loadAddresses();\r\n  }\r\n\r\n  addAddressButtonHandle(): void {\r\n    this.showEditAddressForm = false;\r\n    this.showAddAddressForm = true;\r\n  }\r\n\r\n  editAddressButtonHandle(address: Address): void {\r\n    this.showAddAddressForm = false;\r\n    this.showEditAddressForm = true;\r\n    this.currentAddress = address;\r\n  }\r\n\r\n  addAddressSubmit(address: Address): void {\r\n    this.showAddAddressForm = false;\r\n    this.service.addUserAddress(address);\r\n  }\r\n\r\n  addAddressCancel(): void {\r\n    this.showAddAddressForm = false;\r\n  }\r\n\r\n  editAddressSubmit(address: Address): void {\r\n    this.showEditAddressForm = false;\r\n    this.service.updateUserAddress(this.currentAddress['id'], address);\r\n  }\r\n\r\n  editAddressCancel(): void {\r\n    this.showEditAddressForm = false;\r\n  }\r\n\r\n  getCardContent(address: Address) {\r\n    return combineLatest([\r\n      this.translation.translate('addressCard.default'),\r\n      this.translation.translate('addressCard.setAsDefault'),\r\n      this.translation.translate('common.delete'),\r\n      this.translation.translate('common.edit'),\r\n      this.translation.translate('addressBook.areYouSureToDeleteAddress'),\r\n    ]).pipe(\r\n      map(\r\n        ([\r\n          defaultText,\r\n          setAsDefaultText,\r\n          textDelete,\r\n          textEdit,\r\n          textVerifyDeleteMsg,\r\n        ]) => {\r\n          let region = '';\r\n\r\n          if (address.region && address.region.isocode) {\r\n            region = address.region.isocode + ', ';\r\n          }\r\n\r\n          const actions: { name: string; event: string }[] = [];\r\n          if (!address.defaultAddress) {\r\n            actions.push({ name: setAsDefaultText, event: 'default' });\r\n          }\r\n          actions.push({ name: textEdit, event: 'edit' });\r\n          actions.push({ name: textDelete, event: 'delete' });\r\n\r\n          return {\r\n            textBold: address.firstName + ' ' + address.lastName,\r\n            text: [\r\n              address.line1,\r\n              address.line2,\r\n              address.town + ', ' + region + address.country.isocode,\r\n              address.postalCode,\r\n              address.phone,\r\n            ],\r\n            actions: actions,\r\n            header: address.defaultAddress ? `✓ ${defaultText}` : '',\r\n            deleteMsg: textVerifyDeleteMsg,\r\n          };\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  setAddressAsDefault(addressId: string): void {\r\n    this.userAddressService.setAddressAsDefault(addressId);\r\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\r\n  }\r\n\r\n  deleteAddress(addressId: string): void {\r\n    this.userAddressService.deleteUserAddress(addressId);\r\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\r\n  }\r\n\r\n  setEdit(addressId: string): void {\r\n    if (this.editCard !== addressId) {\r\n      this.editCard = addressId;\r\n    } else {\r\n      this.deleteAddress(addressId);\r\n    }\r\n  }\r\n\r\n  cancelCard(): void {\r\n    this.editCard = null;\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport {\r\n  AuthGuard,\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n  UserAddressService,\r\n} from '@spartacus/core';\r\nimport { CardModule } from '../../../shared/components/card/card.module';\r\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\r\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\r\nimport { AddressBookComponent } from './address-book.component';\r\nimport { AddressBookComponentService } from './address-book.component.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    CardModule,\r\n    AddressFormModule,\r\n    SpinnerModule,\r\n    I18nModule,\r\n  ],\r\n  declarations: [AddressBookComponent],\r\n  exports: [AddressBookComponent],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        AccountAddressBookComponent: {\r\n          component: AddressBookComponent,\r\n          providers: [\r\n            {\r\n              provide: AddressBookComponentService,\r\n              useClass: AddressBookComponentService,\r\n              deps: [UserAddressService],\r\n            },\r\n          ],\r\n          guards: [AuthGuard],\r\n        },\r\n      },\r\n    }),\r\n    UserAddressService,\r\n  ],\r\n  entryComponents: [AddressBookComponent],\r\n})\r\nexport class AddressBookModule {}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport {\r\n  AuthService,\r\n  GlobalMessageService,\r\n  GlobalMessageType,\r\n  RoutingService,\r\n  TranslationService,\r\n  UserService,\r\n  UserToken,\r\n} from '@spartacus/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { first } from 'rxjs/operators';\r\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\r\nimport { ModalService } from '../../../../../shared/components/modal/modal.service';\r\n\r\n@Component({\r\n  selector: 'cx-close-account-modal',\r\n  templateUrl: './close-account-modal.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\r\n  iconTypes = ICON_TYPE;\r\n\r\n  private subscription = new Subscription();\r\n  userToken$: Observable<UserToken>;\r\n  isLoading$: Observable<boolean>;\r\n\r\n  constructor(\r\n    protected modalService: ModalService,\r\n    private userService: UserService,\r\n    private authService: AuthService,\r\n    private globalMessageService: GlobalMessageService,\r\n    private routingService: RoutingService,\r\n    private translationService: TranslationService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.userToken$ = this.authService.getUserToken();\r\n    this.userService.resetRemoveUserProcessState();\r\n    this.subscription.add(\r\n      this.userService\r\n        .getRemoveUserResultSuccess()\r\n        .subscribe((success) => this.onSuccess(success))\r\n    );\r\n\r\n    this.subscription.add(\r\n      this.userService\r\n        .getRemoveUserResultError()\r\n        .subscribe((error) => this.onError(error))\r\n    );\r\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\r\n  }\r\n\r\n  onSuccess(success: boolean): void {\r\n    if (success) {\r\n      this.dismissModal();\r\n      this.translationService\r\n        .translate('closeAccount.accountClosedSuccessfully')\r\n        .pipe(first())\r\n        .subscribe((text) => {\r\n          this.globalMessageService.add(\r\n            text,\r\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\r\n          );\r\n        });\r\n      this.routingService.go({ cxRoute: 'home' });\r\n    }\r\n  }\r\n\r\n  onError(error: boolean): void {\r\n    if (error) {\r\n      this.dismissModal();\r\n      this.translationService\r\n        .translate('closeAccount.accountClosedFailure')\r\n        .pipe(first())\r\n        .subscribe((text) => {\r\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\r\n        });\r\n    }\r\n  }\r\n\r\n  dismissModal(reason?: any): void {\r\n    this.modalService.dismissActiveModal(reason);\r\n  }\r\n\r\n  closeAccount() {\r\n    this.userService.remove();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  AuthGuard,\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\r\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\r\nimport { IconModule } from '../../../cms-components/misc/icon/index';\r\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    UrlModule,\r\n    I18nModule,\r\n    IconModule,\r\n    SpinnerModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        CloseAccountComponent: {\r\n          component: CloseAccountComponent,\r\n          guards: [AuthGuard],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\r\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\r\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\r\n})\r\nexport class CloseAccountModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { RoutingService, UserService } from '@spartacus/core';\r\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\r\n@Component({\r\n  selector: 'cx-forgot-password',\r\n  templateUrl: './forgot-password.component.html',\r\n})\r\nexport class ForgotPasswordComponent implements OnInit {\r\n  forgotPasswordForm: FormGroup;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private userService: UserService,\r\n    private routingService: RoutingService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.forgotPasswordForm = this.fb.group({\r\n      userEmail: [\r\n        '',\r\n        [Validators.required, CustomFormValidators.emailValidator],\r\n      ],\r\n    });\r\n  }\r\n\r\n  requestForgotPasswordEmail() {\r\n    if (this.forgotPasswordForm.valid) {\r\n      this.userService.requestForgotPasswordEmail(\r\n        this.forgotPasswordForm.value.userEmail\r\n      );\r\n      this.routingService.go({ cxRoute: 'login' });\r\n    } else {\r\n      this.forgotPasswordForm.markAllAsTouched();\r\n    }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  CmsConfig,\r\n  I18nModule,\r\n  NotAuthGuard,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport { ForgotPasswordComponent } from './forgot-password.component';\r\nimport { FormErrorsModule } from '../../../shared/index';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    RouterModule,\r\n    UrlModule,\r\n    I18nModule,\r\n    FormErrorsModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        ForgotPasswordComponent: {\r\n          component: ForgotPasswordComponent,\r\n          guards: [NotAuthGuard],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [ForgotPasswordComponent],\r\n  exports: [ForgotPasswordComponent],\r\n  entryComponents: [ForgotPasswordComponent],\r\n})\r\nexport class ForgotPasswordModule {}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  HostBinding,\r\n  Input,\r\n} from '@angular/core';\r\nimport { RoutingService } from '@spartacus/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'cx-amend-order-actions',\r\n  templateUrl: './amend-order-actions.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AmendOrderActionsComponent {\r\n  @Input() orderCode: string;\r\n  @Input() amendOrderForm: FormGroup;\r\n  @Input() backRoute: string;\r\n  @Input() forwardRoute: string;\r\n\r\n  @HostBinding('class') styles = 'row';\r\n\r\n  constructor(protected routingService: RoutingService) {}\r\n\r\n  continue(event: Event): void {\r\n    if (this.amendOrderForm.valid) {\r\n      this.routingService.go({\r\n        cxRoute: this.forwardRoute,\r\n        params: { code: this.orderCode },\r\n      });\r\n    } else {\r\n      this.amendOrderForm.markAllAsTouched();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\r\nimport { Injectable } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Order, OrderEntry, Price } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map, switchMap, tap } from 'rxjs/operators';\r\nimport { OrderDetailsService } from '../order-details/order-details.service';\r\nimport { AmendOrderType } from './amend-order.model';\r\n\r\nfunction ValidateQuantityToCancel(control: FormControl) {\r\n  if (!control.value) {\r\n    return null;\r\n  }\r\n  const quantity = Object.values(control.value).reduce(\r\n    (acc: number, val: number) => acc + val,\r\n    0\r\n  );\r\n  return quantity > 0 ? null : { cxNoSelectedItemToCancel: true };\r\n}\r\n\r\n@Injectable()\r\nexport abstract class OrderAmendService {\r\n  protected amendType: AmendOrderType;\r\n  protected form: FormGroup;\r\n\r\n  constructor(protected orderDetailsService: OrderDetailsService) {}\r\n\r\n  /**\r\n   * Returns entries for the given order.\r\n   */\r\n  abstract getEntries(): Observable<OrderEntry[]>;\r\n\r\n  /**\r\n   * Returns entries with an amended quantity.\r\n   */\r\n  getAmendedEntries(): Observable<OrderEntry[]> {\r\n    return this.getForm().pipe(\r\n      switchMap((form) => {\r\n        return this.getEntries().pipe(\r\n          map((entries) =>\r\n            entries.filter(\r\n              (entry) => this.getFormControl(form, entry).value > 0\r\n            )\r\n          )\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Submits the amended order.\r\n   */\r\n  abstract save(): void;\r\n\r\n  getOrder(): Observable<Order> {\r\n    return this.orderDetailsService.getOrderDetails();\r\n  }\r\n\r\n  /**\r\n   * returns the form with form data at runtime\r\n   */\r\n  getForm(): Observable<FormGroup> {\r\n    return this.getOrder().pipe(\r\n      tap((order) => {\r\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\r\n          this.buildForm(order);\r\n        }\r\n      }),\r\n      map(() => this.form)\r\n    );\r\n  }\r\n\r\n  private buildForm(order: Order): void {\r\n    this.form = new FormGroup({});\r\n    this.form.addControl('orderCode', new FormControl(order.code));\r\n\r\n    const entryGroup = new FormGroup(\r\n      {},\r\n      { validators: [ValidateQuantityToCancel] }\r\n    );\r\n    this.form.addControl('entries', entryGroup);\r\n\r\n    (order.entries || []).forEach((entry) => {\r\n      const key = entry.entryNumber.toString();\r\n      entryGroup.addControl(\r\n        key,\r\n        new FormControl(0, {\r\n          validators: [\r\n            Validators.min(0),\r\n            Validators.max(this.getMaxAmendQuantity(entry)),\r\n          ],\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\r\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\r\n  }\r\n\r\n  /**\r\n   * As discussed, this calculation is moved to SPA side.\r\n   * The calculation and validation should be in backend facade layer.\r\n   */\r\n  getAmendedPrice(entry: OrderEntry): Price {\r\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\r\n    const amendedPrice = Object.assign({}, entry.basePrice);\r\n    amendedPrice.value =\r\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\r\n\r\n    amendedPrice.formattedValue = formatCurrency(\r\n      amendedPrice.value,\r\n      // TODO: user current language\r\n      'en',\r\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\r\n      amendedPrice.currencyIso\r\n    );\r\n\r\n    return amendedPrice;\r\n  }\r\n\r\n  getMaxAmendQuantity(entry: OrderEntry) {\r\n    return (\r\n      (this.isCancellation()\r\n        ? entry.cancellableQuantity\r\n        : entry.returnableQuantity) || entry.quantity\r\n    );\r\n  }\r\n\r\n  isCancellation() {\r\n    return this.amendType === AmendOrderType.CANCEL;\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n} from '@angular/core';\r\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\r\n\r\nexport enum ViewModes {\r\n  Grid = 'grid',\r\n  List = 'list',\r\n}\r\n\r\n@Component({\r\n  selector: 'cx-product-view',\r\n  templateUrl: './product-view.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductViewComponent {\r\n  iconTypes = ICON_TYPE;\r\n  @Input()\r\n  mode: ViewModes;\r\n  @Output()\r\n  modeChange = new EventEmitter<string>();\r\n\r\n  get buttonClass() {\r\n    const viewName: string = this.viewMode.toLowerCase();\r\n    return `cx-product-${viewName}`;\r\n  }\r\n\r\n  /**\r\n   *   Display icons inversely to allow users\r\n   *   to see the view they will navigate to\r\n   */\r\n  get viewMode() {\r\n    if (this.mode === 'list') {\r\n      return this.iconTypes.GRID;\r\n    } else if (this.mode === 'grid') {\r\n      return this.iconTypes.LIST;\r\n    }\r\n  }\r\n\r\n  changeMode() {\r\n    const newMode =\r\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\r\n    this.modeChange.emit(newMode);\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { OrderEntry, Price } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { OrderAmendService } from '../amend-order.service';\r\n\r\n@Component({\r\n  selector: 'cx-amend-order-items',\r\n  templateUrl: './amend-order-items.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CancelOrReturnItemsComponent {\r\n  @Input() entries: OrderEntry[];\r\n  @Input() isConfirmation = false;\r\n\r\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\r\n\r\n  constructor(protected orderAmendService: OrderAmendService) {}\r\n\r\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\r\n    const control = <FormControl>(\r\n      form.get('entries').get(entry.entryNumber.toString())\r\n    );\r\n    return control;\r\n  }\r\n\r\n  setAll(form: FormGroup): void {\r\n    this.entries.forEach((entry) =>\r\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\r\n    );\r\n  }\r\n\r\n  getItemPrice(entry: OrderEntry): Price {\r\n    return this.orderAmendService.getAmendedPrice(entry);\r\n  }\r\n\r\n  getMaxAmendQuantity(entry: OrderEntry) {\r\n    return this.orderAmendService.getMaxAmendQuantity(entry);\r\n  }\r\n\r\n  isCancellation() {\r\n    return this.orderAmendService.isCancellation();\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\r\nimport {\r\n  FormErrorsModule,\r\n  ItemCounterModule,\r\n  MediaModule,\r\n} from '../../../../../shared/index';\r\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    I18nModule,\r\n    MediaModule,\r\n    ItemCounterModule,\r\n    FeaturesConfigModule,\r\n    FormErrorsModule,\r\n  ],\r\n  declarations: [CancelOrReturnItemsComponent],\r\n  exports: [CancelOrReturnItemsComponent],\r\n  entryComponents: [CancelOrReturnItemsComponent],\r\n})\r\nexport class AmendOrderItemsModule {}\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { OrderEntry } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { OrderAmendService } from '../../amend-order.service';\r\n\r\n@Component({\r\n  selector: 'cx-cancel-order-confirmation',\r\n  templateUrl: './cancel-order-confirmation.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CancelOrderConfirmationComponent {\r\n  orderCode: string;\r\n\r\n  form$ = this.orderAmendService\r\n    .getForm()\r\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\r\n\r\n  entries$: Observable<\r\n    OrderEntry[]\r\n  > = this.orderAmendService.getAmendedEntries();\r\n\r\n  constructor(protected orderAmendService: OrderAmendService) {}\r\n\r\n  submit(form: FormGroup) {\r\n    if (form.valid) {\r\n      this.orderAmendService.save();\r\n    } else {\r\n      form.markAllAsTouched();\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  CancelOrReturnRequestEntryInput,\r\n  GlobalMessageService,\r\n  GlobalMessageType,\r\n  OrderEntry,\r\n  RoutingService,\r\n  UserOrderService,\r\n} from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, first, map } from 'rxjs/operators';\r\nimport { OrderDetailsService } from '../../order-details/order-details.service';\r\nimport { AmendOrderType } from '../amend-order.model';\r\nimport { OrderAmendService } from '../amend-order.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OrderCancellationService extends OrderAmendService {\r\n  amendType = AmendOrderType.CANCEL;\r\n\r\n  constructor(\r\n    protected orderDetailsService: OrderDetailsService,\r\n    protected userOrderService: UserOrderService,\r\n    protected routing: RoutingService,\r\n    protected globalMessageService: GlobalMessageService\r\n  ) {\r\n    super(orderDetailsService);\r\n  }\r\n  /**\r\n   * Return cancellable order entries.\r\n   */\r\n  getEntries(): Observable<OrderEntry[]> {\r\n    return this.getOrder().pipe(\r\n      filter((order) => !!order?.entries),\r\n      map((order) =>\r\n        order.entries.filter(\r\n          (entry) => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  save(): void {\r\n    const orderCode = this.form.value.orderCode;\r\n    const entries = this.form.value.entries;\r\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\r\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\r\n      .map(\r\n        (entryNumber) =>\r\n          ({\r\n            orderEntryNumber: Number(entryNumber),\r\n            quantity: <number>entries[entryNumber],\r\n          } as CancelOrReturnRequestEntryInput)\r\n      );\r\n\r\n    this.form.reset();\r\n\r\n    this.userOrderService.cancelOrder(orderCode, {\r\n      cancellationRequestEntryInputs: inputs,\r\n    });\r\n\r\n    this.userOrderService\r\n      .getCancelOrderSuccess()\r\n      .pipe(first(Boolean))\r\n      .subscribe(() => this.afterSave(orderCode));\r\n  }\r\n\r\n  private afterSave(orderCode: string): void {\r\n    this.userOrderService.resetCancelOrderProcessState();\r\n    this.globalMessageService.add(\r\n      {\r\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\r\n        params: { orderCode },\r\n      },\r\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\r\n    );\r\n    this.routing.go({\r\n      cxRoute: 'orders',\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, UrlTree } from '@angular/router';\r\nimport { RoutingService } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { OrderCancellationService } from './order-cancellation.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OrderCancellationGuard implements CanActivate {\r\n  constructor(\r\n    protected routing: RoutingService,\r\n    protected orderAmendService: OrderCancellationService\r\n  ) {}\r\n\r\n  canActivate(): Observable<boolean | UrlTree> {\r\n    return this.orderAmendService.getForm().pipe(\r\n      map((form) => {\r\n        if (!form.valid) {\r\n          // the order code is not available in the route\r\n          // as long as we're inside a guard, hence we redirect\r\n          // to the common orders page.\r\n          this.routing.go({ cxRoute: 'orders' });\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\r\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\r\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\r\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\r\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\r\nimport { OrderAmendService } from '../../amend-order.service';\r\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\r\nimport { OrderCancellationService } from '../order-cancellation.service';\r\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild([\r\n      {\r\n        path: null,\r\n        canActivate: [CmsPageGuard],\r\n        component: PageLayoutComponent,\r\n        data: {\r\n          cxRoute: 'orderCancelConfirmation',\r\n        },\r\n      },\r\n    ]),\r\n    ReactiveFormsModule,\r\n    AmendOrderItemsModule,\r\n    AmendOrderActionsModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        CancelOrderConfirmationComponent: {\r\n          component: CancelOrderConfirmationComponent,\r\n          guards: [AuthGuard, OrderCancellationGuard],\r\n          providers: [\r\n            {\r\n              provide: OrderAmendService,\r\n              useExisting: OrderCancellationService,\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [CancelOrderConfirmationComponent],\r\n  exports: [CancelOrderConfirmationComponent],\r\n  entryComponents: [CancelOrderConfirmationComponent],\r\n})\r\nexport class CancelOrderConfirmationModule {}\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { OrderEntry } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { OrderAmendService } from '../../amend-order.service';\r\n\r\n@Component({\r\n  selector: 'cx-cancel-order',\r\n  templateUrl: './cancel-order.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CancelOrderComponent {\r\n  orderCode: string;\r\n\r\n  form$: Observable<FormGroup> = this.orderAmendService\r\n    .getForm()\r\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\r\n\r\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\r\n\r\n  constructor(protected orderAmendService: OrderAmendService) {}\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\r\nimport {\r\n  CmsPageGuard,\r\n  PageLayoutComponent,\r\n} from '../../../../../../cms-structure/index';\r\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\r\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\r\nimport { OrderAmendService } from '../../amend-order.service';\r\nimport { OrderCancellationService } from '../order-cancellation.service';\r\nimport { CancelOrderComponent } from './cancel-order.component';\r\nimport { FormErrorsModule } from '../../../../../../shared/index';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild([\r\n      {\r\n        path: null,\r\n        canActivate: [CmsPageGuard],\r\n        component: PageLayoutComponent,\r\n        data: {\r\n          cxRoute: 'orderCancel',\r\n        },\r\n      },\r\n    ]),\r\n    AmendOrderItemsModule,\r\n    AmendOrderActionsModule,\r\n    FormErrorsModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        CancelOrderComponent: {\r\n          component: CancelOrderComponent,\r\n          guards: [AuthGuard],\r\n          providers: [\r\n            {\r\n              provide: OrderAmendService,\r\n              useExisting: OrderCancellationService,\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [CancelOrderComponent],\r\n  exports: [CancelOrderComponent],\r\n  entryComponents: [CancelOrderComponent],\r\n})\r\nexport class CancelOrderModule {}\r\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  CancelOrReturnRequestEntryInput,\r\n  GlobalMessageService,\r\n  GlobalMessageType,\r\n  OrderEntry,\r\n  OrderReturnRequestService,\r\n  RoutingService,\r\n} from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, first, map } from 'rxjs/operators';\r\nimport { OrderDetailsService } from '../../order-details/order-details.service';\r\nimport { AmendOrderType } from '../amend-order.model';\r\nimport { OrderAmendService } from '../amend-order.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OrderReturnService extends OrderAmendService {\r\n  amendType = AmendOrderType.RETURN;\r\n\r\n  constructor(\r\n    protected orderDetailsService: OrderDetailsService,\r\n    protected returnRequestService: OrderReturnRequestService,\r\n    protected routing: RoutingService,\r\n    protected globalMessageService: GlobalMessageService\r\n  ) {\r\n    super(orderDetailsService);\r\n  }\r\n\r\n  getEntries(): Observable<OrderEntry[]> {\r\n    return this.getOrder().pipe(\r\n      filter((order) => !!order.entries),\r\n      map((order) =>\r\n        order.entries.filter(\r\n          (entry) => entry.entryNumber !== -1 && entry.returnableQuantity > 0\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  save(): void {\r\n    const orderCode = this.form.value.orderCode;\r\n    const entries = this.form.value.entries;\r\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\r\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\r\n      .map(\r\n        (entryNumber) =>\r\n          ({\r\n            orderEntryNumber: Number(entryNumber),\r\n            quantity: <number>entries[entryNumber],\r\n          } as CancelOrReturnRequestEntryInput)\r\n      );\r\n\r\n    this.form.reset();\r\n\r\n    this.returnRequestService.createOrderReturnRequest({\r\n      orderCode,\r\n      returnRequestEntryInputs: inputs,\r\n    });\r\n\r\n    this.returnRequestService\r\n      .getReturnRequestSuccess()\r\n      .pipe(first(Boolean))\r\n      .subscribe(() => this.afterSave());\r\n  }\r\n\r\n  private afterSave(): void {\r\n    this.returnRequestService\r\n      .getOrderReturnRequest()\r\n      .pipe(first((r) => !!r))\r\n      .subscribe((returnRequest) => {\r\n        const rma = returnRequest.rma;\r\n        this.globalMessageService.add(\r\n          {\r\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\r\n            params: { rma },\r\n          },\r\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\r\n        );\r\n        this.routing.go({\r\n          cxRoute: 'returnRequestDetails',\r\n          params: { rma },\r\n        });\r\n      });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, UrlTree } from '@angular/router';\r\nimport { RoutingService } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { OrderReturnService } from './order-return.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OrderReturnGuard implements CanActivate {\r\n  constructor(\r\n    protected routing: RoutingService,\r\n    protected orderAmendService: OrderReturnService\r\n  ) {}\r\n\r\n  canActivate(): Observable<boolean | UrlTree> {\r\n    return this.orderAmendService.getForm().pipe(\r\n      map((form) => {\r\n        if (!form.valid) {\r\n          // the order code is not available in the route\r\n          // as long as we're inside a guard, hence we redirect\r\n          // to the common orders page.\r\n          this.routing.go({ cxRoute: 'orders' });\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { OrderEntry } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { OrderAmendService } from '../../amend-order.service';\r\n\r\n@Component({\r\n  selector: 'cx-return-order-confirmation',\r\n  templateUrl: './return-order-confirmation.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ReturnOrderConfirmationComponent {\r\n  orderCode: string;\r\n\r\n  form$ = this.orderAmendService\r\n    .getForm()\r\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\r\n\r\n  entries$: Observable<\r\n    OrderEntry[]\r\n  > = this.orderAmendService.getAmendedEntries();\r\n\r\n  constructor(protected orderAmendService: OrderAmendService) {}\r\n\r\n  submit(form: FormGroup): void {\r\n    form.disable();\r\n    this.orderAmendService.save();\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  AuthGuard,\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n} from '@spartacus/core';\r\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\r\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\r\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\r\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\r\nimport { OrderAmendService } from '../../amend-order.service';\r\nimport { OrderReturnGuard } from '../order-return.guard';\r\nimport { OrderReturnService } from '../order-return.service';\r\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild([\r\n      {\r\n        path: null,\r\n        canActivate: [CmsPageGuard],\r\n        component: PageLayoutComponent,\r\n        data: {\r\n          cxRoute: 'orderReturnConfirmation',\r\n        },\r\n      },\r\n    ]),\r\n    AmendOrderItemsModule,\r\n    I18nModule,\r\n    ReactiveFormsModule,\r\n    AmendOrderActionsModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        ReturnOrderConfirmationComponent: {\r\n          component: ReturnOrderConfirmationComponent,\r\n          guards: [AuthGuard, OrderReturnGuard],\r\n          providers: [\r\n            {\r\n              provide: OrderAmendService,\r\n              useExisting: OrderReturnService,\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [ReturnOrderConfirmationComponent],\r\n  exports: [ReturnOrderConfirmationComponent],\r\n  entryComponents: [ReturnOrderConfirmationComponent],\r\n})\r\nexport class ReturnOrderConfirmationModule {}\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { OrderEntry } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { OrderAmendService } from '../../amend-order.service';\r\n\r\n@Component({\r\n  selector: 'cx-return-order',\r\n  templateUrl: './return-order.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ReturnOrderComponent {\r\n  orderCode: string;\r\n\r\n  form$: Observable<FormGroup> = this.orderAmendService\r\n    .getForm()\r\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\r\n\r\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\r\n\r\n  constructor(protected orderAmendService: OrderAmendService) {}\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\r\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\r\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\r\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\r\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\r\nimport { OrderAmendService } from '../../amend-order.service';\r\nimport { OrderReturnService } from '../order-return.service';\r\nimport { ReturnOrderComponent } from './return-order.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild([\r\n      {\r\n        path: null,\r\n        canActivate: [CmsPageGuard],\r\n        component: PageLayoutComponent,\r\n        data: {\r\n          cxRoute: 'orderReturn',\r\n        },\r\n      },\r\n    ]),\r\n    AmendOrderItemsModule,\r\n    AmendOrderActionsModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        ReturnOrderComponent: {\r\n          component: ReturnOrderComponent,\r\n          guards: [AuthGuard],\r\n          providers: [\r\n            {\r\n              provide: OrderAmendService,\r\n              useExisting: OrderReturnService,\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [ReturnOrderComponent],\r\n  exports: [ReturnOrderComponent],\r\n  entryComponents: [ReturnOrderComponent],\r\n})\r\nexport class ReturnOrderModule {}\r\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  Consignment,\r\n  Order,\r\n  PromotionLocation,\r\n  PromotionResult,\r\n} from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\r\nimport { OrderDetailsService } from '../order-details.service';\r\nimport {\r\n  cancelledValues,\r\n  completedValues,\r\n} from './order-consigned-entries/order-consigned-entries.model';\r\n\r\n@Component({\r\n  selector: 'cx-order-details-items',\r\n  templateUrl: './order-detail-items.component.html',\r\n})\r\nexport class OrderDetailItemsComponent implements OnInit {\r\n  constructor(\r\n    protected orderDetailsService: OrderDetailsService,\r\n    protected promotionService: PromotionService\r\n  ) {}\r\n\r\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\r\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\r\n  orderPromotions$: Observable<PromotionResult[]>;\r\n  others$: Observable<Consignment[]>;\r\n  completed$: Observable<Consignment[]>;\r\n  cancel$: Observable<Consignment[]>;\r\n\r\n  ngOnInit() {\r\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\r\n      this.promotionLocation\r\n    );\r\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\r\n    this.completed$ = this.getExactStatus(completedValues);\r\n    this.cancel$ = this.getExactStatus(cancelledValues);\r\n  }\r\n\r\n  private getExactStatus(\r\n    consignmentStatus: string[]\r\n  ): Observable<Consignment[]> {\r\n    return this.order$.pipe(\r\n      map((order) => {\r\n        if (Boolean(order.consignments)) {\r\n          return order.consignments.filter((consignment) =>\r\n            consignmentStatus.includes(consignment.status)\r\n          );\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private getOtherStatus(\r\n    ...consignmentStatus: string[]\r\n  ): Observable<Consignment[]> {\r\n    return this.order$.pipe(\r\n      map((order) => {\r\n        if (Boolean(order.consignments)) {\r\n          return order.consignments.filter(\r\n            (consignment) => !consignmentStatus.includes(consignment.status)\r\n          );\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input } from '@angular/core';\r\nimport {\r\n  Consignment,\r\n  Order,\r\n  OrderEntry,\r\n  PromotionLocation,\r\n} from '@spartacus/core';\r\n\r\n@Component({\r\n  selector: 'cx-order-consigned-entries',\r\n  templateUrl: './order-consigned-entries.component.html',\r\n})\r\nexport class OrderConsignedEntriesComponent {\r\n  @Input() consignments: Consignment[];\r\n  @Input() order: Order;\r\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\r\n\r\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\r\n    const products: OrderEntry[] = [];\r\n    consignment.entries.forEach((element) => {\r\n      products.push(element.orderEntry);\r\n    });\r\n\r\n    return products;\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  AuthGuard,\r\n  CmsConfig,\r\n  FeaturesConfig,\r\n  FeaturesConfigModule,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\r\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\r\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\r\nimport { CardModule } from '../../../../shared/components/card/card.module';\r\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\r\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\r\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\r\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\r\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\r\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\r\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\r\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\r\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\r\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\r\nimport { OrderDetailsService } from './order-details.service';\r\n\r\nconst moduleComponents = [\r\n  OrderDetailActionsComponent,\r\n  OrderDetailHeadlineComponent,\r\n  OrderDetailItemsComponent,\r\n  OrderDetailTotalsComponent,\r\n  OrderDetailShippingComponent,\r\n  TrackingEventsComponent,\r\n  ConsignmentTrackingComponent,\r\n  OrderConsignedEntriesComponent,\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CartSharedModule,\r\n    CardModule,\r\n    CommonModule,\r\n    I18nModule,\r\n    FeaturesConfigModule,\r\n    PromotionsModule,\r\n    UrlModule,\r\n    RouterModule.forChild([\r\n      {\r\n        path: null,\r\n        canActivate: [AuthGuard, CmsPageGuard],\r\n        component: PageLayoutComponent,\r\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\r\n      },\r\n      {\r\n        path: null,\r\n        canActivate: [AuthGuard, CmsPageGuard],\r\n        component: PageLayoutComponent,\r\n        data: { cxRoute: 'orderDetails' },\r\n      },\r\n    ]),\r\n    SpinnerModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\r\n      cmsComponents: {\r\n        AccountOrderDetailsActionsComponent: {\r\n          component: OrderDetailActionsComponent,\r\n        },\r\n        AccountOrderDetailsHeadlineComponent: {\r\n          component: OrderDetailHeadlineComponent,\r\n        },\r\n        AccountOrderDetailsItemsComponent: {\r\n          component: OrderDetailItemsComponent,\r\n        },\r\n        AccountOrderDetailsTotalsComponent: {\r\n          component: OrderDetailTotalsComponent,\r\n        },\r\n        AccountOrderDetailsShippingComponent: {\r\n          component: OrderDetailShippingComponent,\r\n        },\r\n      },\r\n      features: {\r\n        consignmentTracking: '1.2',\r\n      },\r\n    }),\r\n    OrderDetailsService,\r\n  ],\r\n  declarations: [...moduleComponents],\r\n  exports: [...moduleComponents],\r\n  entryComponents: [...moduleComponents],\r\n})\r\nexport class OrderDetailsModule {}\r\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\r\nimport {\r\n  Order,\r\n  OrderHistoryList,\r\n  RoutingService,\r\n  TranslationService,\r\n  UserOrderService,\r\n} from '@spartacus/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { map, tap, filter, take } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'cx-order-history',\r\n  templateUrl: './order-history.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderHistoryComponent implements OnDestroy {\r\n  constructor(\r\n    private routing: RoutingService,\r\n    private userOrderService: UserOrderService,\r\n    private translation: TranslationService\r\n  ) {}\r\n\r\n  private PAGE_SIZE = 5;\r\n  sortType: string;\r\n\r\n  orders$: Observable<\r\n    OrderHistoryList\r\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\r\n    tap((orders: OrderHistoryList) => {\r\n      if (orders.pagination) {\r\n        this.sortType = orders.pagination.sort;\r\n      }\r\n    })\r\n  );\r\n\r\n  isLoaded$: Observable<\r\n    boolean\r\n  > = this.userOrderService.getOrderHistoryListLoaded();\r\n\r\n  /**\r\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\r\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\r\n   */\r\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\r\n    map((order) => order.pagination.totalResults),\r\n    filter((totalResults) => totalResults !== undefined),\r\n    take(1)\r\n  );\r\n\r\n  ngOnDestroy(): void {\r\n    this.userOrderService.clearOrderList();\r\n  }\r\n\r\n  changeSortCode(sortCode: string): void {\r\n    const event: { sortCode: string; currentPage: number } = {\r\n      sortCode,\r\n      currentPage: 0,\r\n    };\r\n    this.sortType = sortCode;\r\n    this.fetchOrders(event);\r\n  }\r\n\r\n  pageChange(page: number): void {\r\n    const event: { sortCode: string; currentPage: number } = {\r\n      sortCode: this.sortType,\r\n      currentPage: page,\r\n    };\r\n    this.fetchOrders(event);\r\n  }\r\n\r\n  goToOrderDetail(order: Order): void {\r\n    this.routing.go({\r\n      cxRoute: 'orderDetails',\r\n      params: order,\r\n    });\r\n  }\r\n\r\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\r\n    return combineLatest([\r\n      this.translation.translate('sorting.date'),\r\n      this.translation.translate('sorting.orderNumber'),\r\n    ]).pipe(\r\n      map(([textByDate, textByOrderNumber]) => {\r\n        return {\r\n          byDate: textByDate,\r\n          byOrderNumber: textByOrderNumber,\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\r\n    this.userOrderService.loadOrderList(\r\n      this.PAGE_SIZE,\r\n      event.currentPage,\r\n      event.sortCode\r\n    );\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\nimport {\r\n  AuthGuard,\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\r\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\r\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\r\nimport { OrderHistoryComponent } from './order-history.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild([\r\n      {\r\n        path: null,\r\n        canActivate: [AuthGuard, CmsPageGuard],\r\n        component: PageLayoutComponent,\r\n        data: { cxRoute: 'orders' },\r\n      },\r\n    ]),\r\n    RouterModule,\r\n    FormsModule,\r\n    NgSelectModule,\r\n    ListNavigationModule,\r\n    UrlModule,\r\n    I18nModule,\r\n  ],\r\n  declarations: [OrderHistoryComponent],\r\n  exports: [OrderHistoryComponent],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        AccountOrderHistoryComponent: {\r\n          component: OrderHistoryComponent,\r\n          guards: [AuthGuard],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  entryComponents: [OrderHistoryComponent],\r\n})\r\nexport class OrderHistoryModule {}\r\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  OnInit,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { ReturnRequest } from '@spartacus/core';\r\nimport { ReturnRequestService } from '../return-request.service';\r\n\r\n@Component({\r\n  selector: 'cx-return-request-overview',\r\n  templateUrl: './return-request-overview.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\r\n  constructor(protected returnRequestService: ReturnRequestService) {}\r\n\r\n  rma: string;\r\n  subscription: Subscription;\r\n\r\n  returnRequest$: Observable<\r\n    ReturnRequest\r\n  > = this.returnRequestService\r\n    .getReturnRequest()\r\n    .pipe(tap((returnRequest) => (this.rma = returnRequest.rma)));\r\n\r\n  isCancelling$ = this.returnRequestService.isCancelling$;\r\n\r\n  ngOnInit(): void {\r\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\r\n      (success) => {\r\n        if (success) {\r\n          this.returnRequestService.cancelSuccess(this.rma);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  cancelReturn(returnRequestCode: string): void {\r\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\r\n  }\r\n\r\n  back(): void {\r\n    this.returnRequestService.backToList();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  AuthGuard,\r\n  CmsConfig,\r\n  FeaturesConfigModule,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport { MediaModule } from '../../../../shared/index';\r\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\r\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\r\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\r\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\r\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\r\n\r\nconst components = [\r\n  ReturnRequestOverviewComponent,\r\n  ReturnRequestItemsComponent,\r\n  ReturnRequestTotalsComponent,\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild([\r\n      {\r\n        path: null,\r\n        canActivate: [AuthGuard, CmsPageGuard],\r\n        component: PageLayoutComponent,\r\n        data: { cxRoute: 'returnRequestDetails' },\r\n      },\r\n    ]),\r\n    RouterModule,\r\n    UrlModule,\r\n    I18nModule,\r\n    MediaModule,\r\n    FeaturesConfigModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        ReturnRequestOverviewComponent: {\r\n          component: ReturnRequestOverviewComponent,\r\n        },\r\n        ReturnRequestItemsComponent: {\r\n          component: ReturnRequestItemsComponent,\r\n        },\r\n        ReturnRequestTotalsComponent: {\r\n          component: ReturnRequestTotalsComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [...components],\r\n  exports: [...components],\r\n  entryComponents: [...components],\r\n})\r\nexport class ReturnRequestDetailModule {}\r\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\r\nimport {\r\n  ReturnRequestList,\r\n  OrderReturnRequestService,\r\n  TranslationService,\r\n} from '@spartacus/core';\r\nimport { Observable, combineLatest } from 'rxjs';\r\nimport { tap, map, filter, take } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'cx-order-return-request-list',\r\n  templateUrl: './order-return-request-list.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderReturnRequestListComponent implements OnDestroy {\r\n  constructor(\r\n    private returnRequestService: OrderReturnRequestService,\r\n    private translation: TranslationService\r\n  ) {}\r\n\r\n  private PAGE_SIZE = 5;\r\n  sortType: string;\r\n\r\n  returnRequests$: Observable<\r\n    ReturnRequestList\r\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\r\n    tap((requestList: ReturnRequestList) => {\r\n      if (requestList.pagination) {\r\n        this.sortType = requestList.pagination.sort;\r\n      }\r\n    })\r\n  );\r\n\r\n  /**\r\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\r\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\r\n   */\r\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\r\n    map((returnRequests) => returnRequests.pagination.totalResults),\r\n    filter((totalResults) => totalResults !== undefined),\r\n    take(1)\r\n  );\r\n\r\n  ngOnDestroy(): void {\r\n    this.returnRequestService.clearOrderReturnRequestList();\r\n  }\r\n\r\n  changeSortCode(sortCode: string): void {\r\n    const event: { sortCode: string; currentPage: number } = {\r\n      sortCode,\r\n      currentPage: 0,\r\n    };\r\n    this.sortType = sortCode;\r\n    this.fetchReturnRequests(event);\r\n  }\r\n\r\n  pageChange(page: number): void {\r\n    const event: { sortCode: string; currentPage: number } = {\r\n      sortCode: this.sortType,\r\n      currentPage: page,\r\n    };\r\n    this.fetchReturnRequests(event);\r\n  }\r\n\r\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\r\n    return combineLatest([\r\n      this.translation.translate('sorting.date'),\r\n      this.translation.translate('sorting.rma'),\r\n    ]).pipe(\r\n      map(([textByDate, textByRma]) => {\r\n        return {\r\n          byDate: textByDate,\r\n          byRMA: textByRma,\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  private fetchReturnRequests(event: {\r\n    sortCode: string;\r\n    currentPage: number;\r\n  }): void {\r\n    this.returnRequestService.loadOrderReturnRequestList(\r\n      this.PAGE_SIZE,\r\n      event.currentPage,\r\n      event.sortCode\r\n    );\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  AuthGuard,\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\r\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    ListNavigationModule,\r\n    UrlModule,\r\n    I18nModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        OrderReturnRequestListComponent: {\r\n          component: OrderReturnRequestListComponent,\r\n          guards: [AuthGuard],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [OrderReturnRequestListComponent],\r\n  exports: [OrderReturnRequestListComponent],\r\n  entryComponents: [OrderReturnRequestListComponent],\r\n})\r\nexport class ReturnRequestListModule {}\r\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  PaymentDetails,\r\n  TranslationService,\r\n  UserPaymentService,\r\n} from '@spartacus/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\r\nimport { Card } from '../../../shared/components/card/card.component';\r\n\r\n@Component({\r\n  selector: 'cx-payment-methods',\r\n  templateUrl: './payment-methods.component.html',\r\n})\r\nexport class PaymentMethodsComponent implements OnInit {\r\n  paymentMethods$: Observable<PaymentDetails[]>;\r\n  editCard: string;\r\n  iconTypes = ICON_TYPE;\r\n  loading$: Observable<boolean>;\r\n\r\n  constructor(\r\n    private userPaymentService: UserPaymentService,\r\n    private translation: TranslationService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\r\n      tap((paymentDetails) => {\r\n        // Set first payment method to DEFAULT if none is set\r\n        if (\r\n          paymentDetails.length > 0 &&\r\n          !paymentDetails.find((paymentDetail) => paymentDetail.defaultPayment)\r\n        ) {\r\n          this.setDefaultPaymentMethod(paymentDetails[0]);\r\n        }\r\n      })\r\n    );\r\n\r\n    this.editCard = null;\r\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\r\n    this.userPaymentService.loadPaymentMethods();\r\n  }\r\n\r\n  getCardContent({\r\n    defaultPayment,\r\n    accountHolderName,\r\n    expiryMonth,\r\n    expiryYear,\r\n    cardNumber,\r\n    cardType,\r\n  }: PaymentDetails): Observable<Card> {\r\n    return combineLatest([\r\n      this.translation.translate('paymentCard.setAsDefault'),\r\n      this.translation.translate('common.delete'),\r\n      this.translation.translate('paymentCard.deleteConfirmation'),\r\n      this.translation.translate('paymentCard.expires', {\r\n        month: expiryMonth,\r\n        year: expiryYear,\r\n      }),\r\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\r\n    ]).pipe(\r\n      map(\r\n        ([\r\n          textSetAsDefault,\r\n          textDelete,\r\n          textDeleteConfirmation,\r\n          textExpires,\r\n          textDefaultPaymentMethod,\r\n        ]) => {\r\n          const actions: { name: string; event: string }[] = [];\r\n          if (!defaultPayment) {\r\n            actions.push({ name: textSetAsDefault, event: 'default' });\r\n          }\r\n          actions.push({ name: textDelete, event: 'edit' });\r\n          const card: Card = {\r\n            header: defaultPayment ? textDefaultPaymentMethod : null,\r\n            textBold: accountHolderName,\r\n            text: [cardNumber, textExpires],\r\n            actions,\r\n            deleteMsg: textDeleteConfirmation,\r\n            img: this.getCardIcon(cardType.code),\r\n          };\r\n\r\n          return card;\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\r\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\r\n    this.editCard = null;\r\n  }\r\n\r\n  setEdit(paymentMethod: PaymentDetails): void {\r\n    this.editCard = paymentMethod.id;\r\n  }\r\n\r\n  cancelCard(): void {\r\n    this.editCard = null;\r\n  }\r\n\r\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\r\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\r\n  }\r\n\r\n  getCardIcon(code: string): string {\r\n    let ccIcon: string;\r\n    if (code === 'visa') {\r\n      ccIcon = this.iconTypes.VISA;\r\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\r\n      ccIcon = this.iconTypes.MASTER_CARD;\r\n    } else if (code === 'diners') {\r\n      ccIcon = this.iconTypes.DINERS_CLUB;\r\n    } else if (code === 'amex') {\r\n      ccIcon = this.iconTypes.AMEX;\r\n    } else {\r\n      ccIcon = this.iconTypes.CREDIT_CARD;\r\n    }\r\n\r\n    return ccIcon;\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport {\r\n  AuthGuard,\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n} from '@spartacus/core';\r\nimport { CardModule } from '../../../shared/components/card/card.module';\r\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\r\nimport { PaymentMethodsComponent } from './payment-methods.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, CardModule, SpinnerModule, I18nModule],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        AccountPaymentDetailsComponent: {\r\n          component: PaymentMethodsComponent,\r\n          guards: [AuthGuard],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [PaymentMethodsComponent],\r\n  exports: [PaymentMethodsComponent],\r\n  entryComponents: [PaymentMethodsComponent],\r\n})\r\nexport class PaymentMethodsModule {}\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { RoutingService, UserService } from '@spartacus/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\r\n\r\n@Component({\r\n  selector: 'cx-reset-password-form',\r\n  templateUrl: './reset-password-form.component.html',\r\n})\r\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\r\n  token: string;\r\n  subscription = new Subscription();\r\n\r\n  resetPasswordForm: FormGroup = this.fb.group(\r\n    {\r\n      password: [\r\n        '',\r\n        [Validators.required, CustomFormValidators.passwordValidator],\r\n      ],\r\n      repassword: ['', [Validators.required]],\r\n    },\r\n    {\r\n      validators: CustomFormValidators.passwordsMustMatch(\r\n        'password',\r\n        'repassword'\r\n      ),\r\n    }\r\n  );\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private routingService: RoutingService,\r\n    private userService: UserService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.subscription.add(\r\n      this.routingService\r\n        .getRouterState()\r\n        .subscribe((state) => (this.token = state.state.queryParams['token']))\r\n    );\r\n\r\n    this.subscription.add(\r\n      this.userService.isPasswordReset().subscribe((reset) => {\r\n        if (reset) {\r\n          this.routingService.go({ cxRoute: 'login' });\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  resetPassword() {\r\n    if (this.resetPasswordForm.valid) {\r\n      const password = this.resetPasswordForm.get('password').value;\r\n      this.userService.resetPassword(this.token, password);\r\n    } else {\r\n      this.resetPasswordForm.markAllAsTouched();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  CmsConfig,\r\n  I18nModule,\r\n  NotAuthGuard,\r\n  provideDefaultConfig,\r\n} from '@spartacus/core';\r\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\r\nimport { FormErrorsModule } from '../../../shared/index';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    RouterModule,\r\n    I18nModule,\r\n    FormErrorsModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        ResetPasswordComponent: {\r\n          component: ResetPasswordFormComponent,\r\n          guards: [NotAuthGuard],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [ResetPasswordFormComponent],\r\n  exports: [ResetPasswordFormComponent],\r\n  entryComponents: [ResetPasswordFormComponent],\r\n})\r\nexport class ResetPasswordModule {}\r\n","import { Component, EventEmitter, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\r\n\r\n@Component({\r\n  selector: 'cx-update-email-form',\r\n  templateUrl: './update-email-form.component.html',\r\n})\r\nexport class UpdateEmailFormComponent {\r\n  @Output()\r\n  saveEmail = new EventEmitter<{\r\n    newUid: string;\r\n    password: string;\r\n  }>();\r\n\r\n  @Output()\r\n  cancelEmail = new EventEmitter<void>();\r\n\r\n  updateEmailForm: FormGroup = this.fb.group(\r\n    {\r\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\r\n      confirmEmail: ['', [Validators.required]],\r\n      password: ['', [Validators.required]],\r\n    },\r\n    {\r\n      validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),\r\n    }\r\n  );\r\n\r\n  constructor(private fb: FormBuilder) {}\r\n\r\n  onSubmit(): void {\r\n    if (this.updateEmailForm.valid) {\r\n      const newUid = this.updateEmailForm.get('confirmEmail').value;\r\n      const password = this.updateEmailForm.get('password').value;\r\n\r\n      this.saveEmail.emit({ newUid, password });\r\n    } else {\r\n      this.updateEmailForm.markAllAsTouched();\r\n    }\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.cancelEmail.emit();\r\n  }\r\n}\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport {\r\n  AuthService,\r\n  GlobalMessageService,\r\n  GlobalMessageType,\r\n  RoutingService,\r\n  UserService,\r\n} from '@spartacus/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'cx-update-email',\r\n  templateUrl: './update-email.component.html',\r\n})\r\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\r\n  constructor(\r\n    private routingService: RoutingService,\r\n    private globalMessageService: GlobalMessageService,\r\n    private userService: UserService,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  private subscription = new Subscription();\r\n  private newUid: string;\r\n  isLoading$: Observable<boolean>;\r\n\r\n  ngOnInit() {\r\n    this.userService.resetUpdateEmailResultState();\r\n    this.subscription.add(\r\n      this.userService\r\n        .getUpdateEmailResultSuccess()\r\n        .subscribe((success) => this.onSuccess(success))\r\n    );\r\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.routingService.go({ cxRoute: 'home' });\r\n  }\r\n\r\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\r\n    this.newUid = newUid;\r\n    this.userService.updateEmail(password, newUid);\r\n  }\r\n\r\n  onSuccess(success: boolean): void {\r\n    if (success) {\r\n      this.globalMessageService.add(\r\n        {\r\n          key: 'updateEmailForm.emailUpdateSuccess',\r\n          params: { newUid: this.newUid },\r\n        },\r\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\r\n      );\r\n      this.authService.logout();\r\n      this.routingService.go({ cxRoute: 'login' }, null, {\r\n        state: {\r\n          newUid: this.newUid,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe();\r\n    this.userService.resetUpdateEmailResultState();\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  AuthGuard,\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n} from '@spartacus/core';\r\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\r\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\r\nimport { UpdateEmailComponent } from './update-email.component';\r\nimport { FormErrorsModule } from '../../../shared/index';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    SpinnerModule,\r\n    I18nModule,\r\n    FormErrorsModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        UpdateEmailComponent: {\r\n          component: UpdateEmailComponent,\r\n          guards: [AuthGuard],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\r\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\r\n  entryComponents: [UpdateEmailComponent],\r\n})\r\nexport class UpdateEmailModule {}\r\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\r\n@Component({\r\n  selector: 'cx-update-password-form',\r\n  templateUrl: './update-password-form.component.html',\r\n})\r\nexport class UpdatePasswordFormComponent implements OnInit {\r\n  updatePasswordForm: FormGroup;\r\n\r\n  @Output()\r\n  submitted = new EventEmitter<{ oldPassword: string; newPassword: string }>();\r\n\r\n  @Output()\r\n  cancelled = new EventEmitter<void>();\r\n\r\n  constructor(private fb: FormBuilder) {}\r\n\r\n  ngOnInit() {\r\n    this.updatePasswordForm = this.fb.group(\r\n      {\r\n        oldPassword: ['', [Validators.required]],\r\n        newPassword: [\r\n          '',\r\n          [Validators.required, CustomFormValidators.passwordValidator],\r\n        ],\r\n        newPasswordConfirm: ['', [Validators.required]],\r\n      },\r\n      {\r\n        validators: CustomFormValidators.passwordsMustMatch(\r\n          'newPassword',\r\n          'newPasswordConfirm'\r\n        ),\r\n      }\r\n    );\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.updatePasswordForm.valid) {\r\n      this.submitted.emit({\r\n        oldPassword: this.updatePasswordForm.value.oldPassword,\r\n        newPassword: this.updatePasswordForm.value.newPassword,\r\n      });\r\n    } else {\r\n      this.updatePasswordForm.markAllAsTouched();\r\n    }\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.cancelled.emit();\r\n  }\r\n}\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport {\r\n  GlobalMessageService,\r\n  GlobalMessageType,\r\n  RoutingService,\r\n  UserService,\r\n} from '@spartacus/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'cx-update-password',\r\n  templateUrl: './update-password.component.html',\r\n})\r\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\r\n  private subscription = new Subscription();\r\n  loading$: Observable<boolean>;\r\n\r\n  constructor(\r\n    private routingService: RoutingService,\r\n    private userService: UserService,\r\n    private globalMessageService: GlobalMessageService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.userService.resetUpdatePasswordProcessState();\r\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\r\n    this.subscription.add(\r\n      this.userService\r\n        .getUpdatePasswordResultSuccess()\r\n        .subscribe((success) => this.onSuccess(success))\r\n    );\r\n  }\r\n\r\n  onSuccess(success: boolean): void {\r\n    if (success) {\r\n      this.globalMessageService.add(\r\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\r\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\r\n      );\r\n      this.routingService.go({ cxRoute: 'home' });\r\n    }\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.routingService.go({ cxRoute: 'home' });\r\n  }\r\n\r\n  onSubmit({\r\n    oldPassword,\r\n    newPassword,\r\n  }: {\r\n    oldPassword: string;\r\n    newPassword: string;\r\n  }): void {\r\n    this.userService.updatePassword(oldPassword, newPassword);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n\r\n    this.userService.resetUpdatePasswordProcessState();\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  AuthGuard,\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n} from '@spartacus/core';\r\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\r\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\r\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\r\nimport { FormErrorsModule } from '../../../shared/index';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    SpinnerModule,\r\n    I18nModule,\r\n    FormErrorsModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        UpdatePasswordComponent: {\r\n          component: UpdatePasswordComponent,\r\n          guards: [AuthGuard],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\r\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\r\n  entryComponents: [UpdatePasswordComponent],\r\n})\r\nexport class UpdatePasswordModule {}\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Title, User } from '@spartacus/core';\r\n\r\n@Component({\r\n  selector: 'cx-update-profile-form',\r\n  templateUrl: './update-profile-form.component.html',\r\n})\r\nexport class UpdateProfileFormComponent implements OnInit {\r\n  @Input()\r\n  user: User;\r\n\r\n  @Input()\r\n  titles: Title[];\r\n\r\n  @Output()\r\n  submitted = new EventEmitter<{ userUpdates: User }>();\r\n\r\n  @Output()\r\n  cancelled = new EventEmitter<void>();\r\n\r\n  updateProfileForm: FormGroup = this.fb.group({\r\n    titleCode: [''],\r\n    firstName: ['', Validators.required],\r\n    lastName: ['', Validators.required],\r\n  });\r\n\r\n  constructor(private fb: FormBuilder) {}\r\n\r\n  ngOnInit() {\r\n    if (this.user) {\r\n      this.updateProfileForm.patchValue(this.user);\r\n    }\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.updateProfileForm.valid) {\r\n      this.submitted.emit({\r\n        userUpdates: { ...this.updateProfileForm.value },\r\n      });\r\n    } else {\r\n      this.updateProfileForm.markAllAsTouched();\r\n    }\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.cancelled.emit();\r\n  }\r\n}\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport {\r\n  GlobalMessageService,\r\n  GlobalMessageType,\r\n  RoutingService,\r\n  Title,\r\n  User,\r\n  UserService,\r\n} from '@spartacus/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'cx-update-profile',\r\n  templateUrl: './update-profile.component.html',\r\n})\r\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\r\n  private subscription = new Subscription();\r\n\r\n  titles$: Observable<Title[]>;\r\n  user$: Observable<User>;\r\n  loading$: Observable<boolean>;\r\n\r\n  constructor(\r\n    private routingService: RoutingService,\r\n    private userService: UserService,\r\n    private globalMessageService: GlobalMessageService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // reset the previous form processing state\r\n    this.userService.resetUpdatePersonalDetailsProcessingState();\r\n\r\n    this.user$ = this.userService.get();\r\n    this.titles$ = this.userService.getTitles().pipe(\r\n      tap((titles) => {\r\n        if (Object.keys(titles).length === 0) {\r\n          this.userService.loadTitles();\r\n        }\r\n      })\r\n    );\r\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\r\n\r\n    this.subscription.add(\r\n      this.userService\r\n        .getUpdatePersonalDetailsResultSuccess()\r\n        .subscribe((success) => this.onSuccess(success))\r\n    );\r\n  }\r\n\r\n  onSuccess(success: boolean): void {\r\n    if (success) {\r\n      this.globalMessageService.add(\r\n        { key: 'updateProfileForm.profileUpdateSuccess' },\r\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\r\n      );\r\n      this.routingService.go({ cxRoute: 'home' });\r\n    }\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.routingService.go({ cxRoute: 'home' });\r\n  }\r\n\r\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\r\n    this.userService.updatePersonalDetails(userUpdates);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n\r\n    // clean up the state\r\n    this.userService.resetUpdatePersonalDetailsProcessingState();\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  AuthGuard,\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n} from '@spartacus/core';\r\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\r\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\r\nimport { UpdateProfileComponent } from './update-profile.component';\r\nimport { FormErrorsModule } from '../../../shared/index';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    SpinnerModule,\r\n    I18nModule,\r\n    FormErrorsModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        UpdateProfileComponent: {\r\n          component: UpdateProfileComponent,\r\n          guards: [AuthGuard],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\r\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\r\n  entryComponents: [UpdateProfileComponent],\r\n})\r\nexport class UpdateProfileModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  CustomerCoupon,\r\n  RoutingService,\r\n  TranslationService,\r\n} from '@spartacus/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { combineLatest, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MyCouponsComponentService {\r\n  sortLabels: Observable<{\r\n    byStartDateAsc: string;\r\n    byStartDateDesc: string;\r\n    byEndDateAsc: string;\r\n    byEndDateDesc: string;\r\n  }>;\r\n\r\n  protected readonly RELEVANCE = ':relevance';\r\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\r\n\r\n  constructor(\r\n    protected routingService: RoutingService,\r\n    protected translation: TranslationService\r\n  ) {}\r\n\r\n  launchSearchPage(coupon: CustomerCoupon): void {\r\n    this.routingService.go(\r\n      {\r\n        cxRoute: 'search',\r\n        params: { query: this.buildSearchParam(coupon) },\r\n      },\r\n      { couponcode: coupon.couponId }\r\n    );\r\n  }\r\n\r\n  private buildSearchParam(coupon: CustomerCoupon): string {\r\n    return coupon.allProductsApplicable\r\n      ? this.RELEVANCE\r\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\r\n  }\r\n\r\n  getSortLabels(): Observable<{\r\n    byStartDateAsc: string;\r\n    byStartDateDesc: string;\r\n    byEndDateAsc: string;\r\n    byEndDateDesc: string;\r\n  }> {\r\n    return combineLatest([\r\n      this.translation.translate('myCoupons.startDateAsc'),\r\n      this.translation.translate('myCoupons.startDateDesc'),\r\n      this.translation.translate('myCoupons.endDateAsc'),\r\n      this.translation.translate('myCoupons.endDateDesc'),\r\n    ]).pipe(\r\n      map(\r\n        ([\r\n          textByStartDateAsc,\r\n          textByStartDateDesc,\r\n          textByEndDateAsc,\r\n          textByEndDateDesc,\r\n        ]) => {\r\n          return {\r\n            byStartDateAsc: textByStartDateAsc,\r\n            byStartDateDesc: textByStartDateDesc,\r\n            byEndDateAsc: textByEndDateAsc,\r\n            byEndDateDesc: textByEndDateDesc,\r\n          };\r\n        }\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport {\r\n  CustomerCouponSearchResult,\r\n  CustomerCouponService,\r\n  PaginationModel,\r\n} from '@spartacus/core';\r\nimport { combineLatest, Observable, Subscription } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\r\nimport { MyCouponsComponentService } from './my-coupons.component.service';\r\n\r\n@Component({\r\n  selector: 'cx-my-coupons',\r\n  templateUrl: './my-coupons.component.html',\r\n})\r\nexport class MyCouponsComponent implements OnInit, OnDestroy {\r\n  couponResult$: Observable<CustomerCouponSearchResult>;\r\n  couponsLoading$: Observable<boolean>;\r\n  couponSubscriptionLoading$: Observable<boolean>;\r\n\r\n  iconTypes = ICON_TYPE;\r\n\r\n  private subscriptions = new Subscription();\r\n\r\n  private PAGE_SIZE = 10;\r\n  private sortMapping = {\r\n    byStartDateAsc: 'startDate:asc',\r\n    byStartDateDesc: 'startDate:desc',\r\n    byEndDateAsc: 'endDate:asc',\r\n    byEndDateDesc: 'endDate:desc',\r\n  };\r\n  sort = 'byStartDateAsc';\r\n\r\n  sortOptions = [\r\n    {\r\n      code: 'byStartDateAsc',\r\n      selected: false,\r\n    },\r\n    {\r\n      code: 'byStartDateDesc',\r\n      selected: false,\r\n    },\r\n    {\r\n      code: 'byEndDateAsc',\r\n      selected: false,\r\n    },\r\n    {\r\n      code: 'byEndDateDesc',\r\n      selected: false,\r\n    },\r\n  ];\r\n\r\n  pagination: PaginationModel;\r\n  sortLabels: Observable<{\r\n    byStartDateAsc: string;\r\n    byStartDateDesc: string;\r\n    byEndDateAsc: string;\r\n    byEndDateDesc: string;\r\n  }>;\r\n\r\n  constructor(\r\n    protected couponService: CustomerCouponService,\r\n    protected myCouponsComponentService: MyCouponsComponentService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.couponResult$ = this.couponService\r\n      .getCustomerCoupons(this.PAGE_SIZE)\r\n      .pipe(\r\n        tap(\r\n          (coupons) =>\r\n            (this.pagination = {\r\n              currentPage: coupons.pagination.page,\r\n              pageSize: coupons.pagination.count,\r\n              totalPages: coupons.pagination.totalPages,\r\n              totalResults: coupons.pagination.totalCount,\r\n              sort: this.sort,\r\n            })\r\n        )\r\n      );\r\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\r\n    this.couponSubscriptionLoading$ = combineLatest([\r\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\r\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\r\n    ]).pipe(\r\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\r\n    );\r\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\r\n\r\n    this.subscriptions\r\n      .add(\r\n        this.couponService\r\n          .getSubscribeCustomerCouponResultError()\r\n          .subscribe((error) => {\r\n            this.subscriptionFail(error);\r\n          })\r\n      )\r\n      .add(\r\n        this.couponService\r\n          .getUnsubscribeCustomerCouponResultError()\r\n          .subscribe((error) => {\r\n            this.subscriptionFail(error);\r\n          })\r\n      );\r\n  }\r\n\r\n  private subscriptionFail(error: boolean) {\r\n    if (error) {\r\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\r\n    }\r\n  }\r\n\r\n  sortChange(sort: string): void {\r\n    this.sort = sort;\r\n\r\n    this.couponService.loadCustomerCoupons(\r\n      this.PAGE_SIZE,\r\n      this.pagination.currentPage,\r\n      this.sortMapping[sort]\r\n    );\r\n  }\r\n\r\n  pageChange(page: number): void {\r\n    this.couponService.loadCustomerCoupons(\r\n      this.PAGE_SIZE,\r\n      page,\r\n      this.sortMapping[this.sort]\r\n    );\r\n  }\r\n\r\n  notificationChange({\r\n    couponId,\r\n    notification,\r\n  }: {\r\n    couponId: string;\r\n    notification: boolean;\r\n  }): void {\r\n    if (notification) {\r\n      this.couponService.subscribeCustomerCoupon(couponId);\r\n    } else {\r\n      this.couponService.unsubscribeCustomerCoupon(couponId);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","import { Component, ViewChild, ElementRef } from '@angular/core';\r\nimport { ModalService } from '../../../../../shared/components/modal/index';\r\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\r\nimport { CustomerCoupon } from '@spartacus/core';\r\n\r\n@Component({\r\n  selector: 'cx-coupon-dialog',\r\n  templateUrl: './coupon-dialog.component.html',\r\n})\r\nexport class CouponDialogComponent {\r\n  iconTypes = ICON_TYPE;\r\n  coupon: CustomerCoupon;\r\n\r\n  @ViewChild('dialog', { read: ElementRef })\r\n  dialog: ElementRef;\r\n\r\n  constructor(protected modalService: ModalService) {}\r\n\r\n  dismissModal(reason?: any): void {\r\n    this.modalService.dismissActiveModal(reason);\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport {\r\n  RoutingService,\r\n  CustomerCouponService,\r\n  GlobalMessageService,\r\n  GlobalMessageType,\r\n} from '@spartacus/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  templateUrl: './coupon-claim.component.html',\r\n  selector: 'cx-coupon-claim',\r\n})\r\nexport class CouponClaimComponent implements OnInit, OnDestroy {\r\n  subscription: Subscription;\r\n\r\n  constructor(\r\n    protected couponService: CustomerCouponService,\r\n    protected routingService: RoutingService,\r\n    protected messageService: GlobalMessageService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.routingService\r\n      .getRouterState()\r\n      .subscribe((k) => {\r\n        const couponCode = k.state.params.couponCode;\r\n        if (couponCode) {\r\n          this.couponService.claimCustomerCoupon(couponCode);\r\n          this.subscription = this.couponService\r\n            .getClaimCustomerCouponResultSuccess()\r\n            .subscribe((success) => {\r\n              if (success) {\r\n                this.messageService.add(\r\n                  { key: 'myCoupons.claimCustomerCoupon' },\r\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\r\n                );\r\n              }\r\n              this.routingService.go({ cxRoute: 'coupons' });\r\n            });\r\n        } else {\r\n          this.routingService.go({ cxRoute: 'notFound' });\r\n        }\r\n      })\r\n      .unsubscribe();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  AuthGuard,\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport { CardModule } from '../../../shared/components/card/card.module';\r\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\r\nimport { MyCouponsComponent } from './my-coupons.component';\r\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\r\n\r\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\r\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\r\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\r\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\r\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\r\nimport { IconModule } from '../../misc/icon/icon.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    CardModule,\r\n    SpinnerModule,\r\n    I18nModule,\r\n    RouterModule,\r\n    UrlModule,\r\n    IconModule,\r\n    ListNavigationModule,\r\n    RouterModule.forChild([\r\n      {\r\n        path: null,\r\n        canActivate: [AuthGuard, CmsPageGuard],\r\n        component: PageLayoutComponent,\r\n        data: { cxRoute: 'couponClaim' },\r\n      },\r\n    ]),\r\n  ],\r\n  declarations: [\r\n    MyCouponsComponent,\r\n    CouponCardComponent,\r\n    CouponDialogComponent,\r\n    CouponClaimComponent,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        MyCouponsComponent: {\r\n          component: MyCouponsComponent,\r\n          guards: [AuthGuard],\r\n        },\r\n        CouponClaimComponent: {\r\n          component: CouponClaimComponent,\r\n          guards: [AuthGuard],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  exports: [MyCouponsComponent, CouponClaimComponent],\r\n  entryComponents: [\r\n    MyCouponsComponent,\r\n    CouponDialogComponent,\r\n    CouponClaimComponent,\r\n  ],\r\n})\r\nexport class MyCouponsModule {}\r\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport {\r\n  NotificationPreference,\r\n  UserNotificationPreferenceService,\r\n} from '@spartacus/core';\r\nimport { Observable, combineLatest } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'cx-notification-preference',\r\n  templateUrl: './notification-preference.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NotificationPreferenceComponent implements OnInit {\r\n  preferences$: Observable<NotificationPreference[]>;\r\n  isLoading$: Observable<boolean>;\r\n\r\n  protected preferences: NotificationPreference[] = [];\r\n\r\n  constructor(\r\n    private notificationPreferenceService: UserNotificationPreferenceService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.notificationPreferenceService.resetNotificationPreferences();\r\n    this.preferences$ = this.notificationPreferenceService\r\n      .getPreferences()\r\n      .pipe(tap((preferences) => (this.preferences = preferences)));\r\n    this.notificationPreferenceService.loadPreferences();\r\n\r\n    this.isLoading$ = combineLatest([\r\n      this.notificationPreferenceService.getPreferencesLoading(),\r\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\r\n    ]).pipe(\r\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\r\n    );\r\n  }\r\n\r\n  updatePreference(preference: NotificationPreference) {\r\n    const updatedPreferences = [];\r\n    this.preferences.forEach((p) => {\r\n      if (p.channel === preference.channel) {\r\n        updatedPreferences.push({\r\n          ...p,\r\n          enabled: !p.enabled,\r\n        });\r\n      } else {\r\n        updatedPreferences.push(p);\r\n      }\r\n    });\r\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport {\r\n  AuthGuard,\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n} from '@spartacus/core';\r\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\r\nimport { NotificationPreferenceComponent } from './notification-preference.component';\r\n\r\n@NgModule({\r\n  declarations: [NotificationPreferenceComponent],\r\n  imports: [CommonModule, SpinnerModule, I18nModule],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        NotificationPreferenceComponent: {\r\n          component: NotificationPreferenceComponent,\r\n          guards: [AuthGuard],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  exports: [NotificationPreferenceComponent],\r\n  entryComponents: [NotificationPreferenceComponent],\r\n})\r\nexport class NotificationPreferenceModule {}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport {\r\n  PaginationModel,\r\n  Product,\r\n  ProductInterestEntryRelation,\r\n  ProductInterestSearchResult,\r\n  ProductScope,\r\n  ProductService,\r\n  TranslationService,\r\n  UserInterestsService,\r\n} from '@spartacus/core';\r\nimport { map, tap } from 'rxjs/operators';\r\n\r\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\r\n  results?: (ProductInterestEntryRelation & {\r\n    product$?: Observable<Product>;\r\n  })[];\r\n}\r\n\r\n@Component({\r\n  selector: 'cx-my-interests',\r\n  templateUrl: './my-interests.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MyInterestsComponent implements OnInit, OnDestroy {\r\n  private DEFAULT_PAGE_SIZE = 10;\r\n  private sortMapping = {\r\n    byNameAsc: 'name:asc',\r\n    byNameDesc: 'name:desc',\r\n  };\r\n\r\n  sort = 'byNameAsc';\r\n  sortOptions = [\r\n    {\r\n      code: 'byNameAsc',\r\n      selected: false,\r\n    },\r\n    {\r\n      code: 'byNameDesc',\r\n      selected: false,\r\n    },\r\n  ];\r\n  pagination: PaginationModel;\r\n\r\n  interests$: Observable<ProductInterestSearchResultUI>;\r\n  isRemoveDisabled$: Observable<boolean>;\r\n  getInterestsloading$: Observable<boolean>;\r\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\r\n\r\n  constructor(\r\n    private productInterestService: UserInterestsService,\r\n    private translationService: TranslationService,\r\n    private productService: ProductService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.interests$ = this.productInterestService\r\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\r\n      .pipe(\r\n        tap(\r\n          (interests) =>\r\n            (this.pagination = {\r\n              currentPage: interests.pagination.page,\r\n              pageSize: interests.pagination.count,\r\n              totalPages: interests.pagination.totalPages,\r\n              totalResults: interests.pagination.totalCount,\r\n              sort: 'byNameAsc',\r\n            })\r\n        ),\r\n        map((interest) => ({\r\n          ...interest,\r\n          results: interest.results\r\n            ? interest.results.map((result) => ({\r\n                ...result,\r\n                product$: this.getProduct(result),\r\n              }))\r\n            : interest.results,\r\n        }))\r\n      );\r\n\r\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\r\n    this.isRemoveDisabled$ = combineLatest([\r\n      this.getInterestsloading$,\r\n      this.productInterestService.getRemoveProdutInterestLoading(),\r\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\r\n\r\n    this.sortLabels = this.getSortLabels();\r\n  }\r\n\r\n  private getSortLabels(): Observable<{\r\n    byNameAsc: string;\r\n    byNameDesc: string;\r\n  }> {\r\n    return combineLatest([\r\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\r\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\r\n    ]).pipe(\r\n      map(([asc, desc]) => {\r\n        return {\r\n          byNameAsc: asc,\r\n          byNameDesc: desc,\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  private getProduct(\r\n    interest: ProductInterestEntryRelation\r\n  ): Observable<Product> {\r\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\r\n  }\r\n\r\n  removeInterest(\r\n    relation: ProductInterestEntryRelation & {\r\n      product$?: Observable<Product>;\r\n    }\r\n  ): void {\r\n    this.productInterestService.removeProdutInterest({\r\n      product: relation.product,\r\n      productInterestEntry: relation.productInterestEntry,\r\n    });\r\n  }\r\n\r\n  sortChange(sort: string): void {\r\n    this.sort = sort;\r\n    this.productInterestService.loadProductInterests(\r\n      this.DEFAULT_PAGE_SIZE,\r\n      0,\r\n      this.sortMapping[sort]\r\n    );\r\n  }\r\n\r\n  pageChange(page: number): void {\r\n    this.productInterestService.loadProductInterests(\r\n      this.DEFAULT_PAGE_SIZE,\r\n      page,\r\n      this.sortMapping[this.sort]\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.productInterestService.clearProductInterests();\r\n    this.productInterestService.resetRemoveInterestState();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\r\nimport { MyInterestsComponent } from './my-interests.component';\r\nimport { MediaModule } from '../../../shared/components/media/media.module';\r\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\r\nimport {\r\n  AuthGuard,\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\n\r\n@NgModule({\r\n  declarations: [MyInterestsComponent],\r\n  imports: [\r\n    CommonModule,\r\n    I18nModule,\r\n    RouterModule,\r\n    ListNavigationModule,\r\n    I18nModule,\r\n    UrlModule,\r\n    MediaModule,\r\n    SpinnerModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        MyInterestsComponent: {\r\n          component: MyInterestsComponent,\r\n          guards: [AuthGuard],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  exports: [MyInterestsComponent],\r\n  entryComponents: [MyInterestsComponent],\r\n})\r\nexport class MyInterestsModule {}\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport {\r\n  CmsBreadcrumbsComponent,\r\n  PageMeta,\r\n  PageMetaService,\r\n  TranslationService,\r\n} from '@spartacus/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\r\n\r\n@Component({\r\n  selector: 'cx-breadcrumb',\r\n  templateUrl: './breadcrumb.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class BreadcrumbComponent implements OnInit {\r\n  title$: Observable<string>;\r\n  crumbs$: Observable<any[]>;\r\n\r\n  constructor(\r\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\r\n    protected pageMetaService: PageMetaService,\r\n    private translation: TranslationService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.setTitle();\r\n    this.setCrumbs();\r\n  }\r\n\r\n  private setTitle(): void {\r\n    this.title$ = this.pageMetaService.getMeta().pipe(\r\n      filter(Boolean),\r\n      map((meta: PageMeta) => meta.heading || meta.title)\r\n    );\r\n  }\r\n\r\n  private setCrumbs(): void {\r\n    this.crumbs$ = combineLatest([\r\n      this.pageMetaService.getMeta(),\r\n      this.translation.translate('common.home'),\r\n    ]).pipe(\r\n      map(([meta, textHome]) =>\r\n        meta?.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  CmsConfig,\r\n  CmsPageTitleModule,\r\n  provideDefaultConfig,\r\n} from '@spartacus/core';\r\nimport { BreadcrumbComponent } from './breadcrumb.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, RouterModule, CmsPageTitleModule],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        BreadcrumbComponent: {\r\n          component: BreadcrumbComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [BreadcrumbComponent],\r\n  exports: [BreadcrumbComponent],\r\n  entryComponents: [BreadcrumbComponent],\r\n})\r\nexport class BreadcrumbModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  CmsNavigationComponent,\r\n  CmsService,\r\n  SemanticPathService,\r\n} from '@spartacus/core';\r\nimport { combineLatest, Observable, of } from 'rxjs';\r\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\r\nimport { NavigationNode } from './navigation-node.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NavigationService {\r\n  constructor(\r\n    protected cmsService: CmsService,\r\n    protected semanticPathService: SemanticPathService\r\n  ) {}\r\n\r\n  public createNavigation(\r\n    data$: Observable<CmsNavigationComponent>\r\n  ): Observable<NavigationNode> {\r\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\r\n      map(([data, nav]) => {\r\n        return data\r\n          ? {\r\n              title: data.name,\r\n              children: [nav],\r\n            }\r\n          : undefined;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\r\n   * This function will load the navigation underlying entries and childs if they haven't been\r\n   * loaded so far.\r\n   */\r\n  public getNavigationNode(\r\n    data$: Observable<CmsNavigationComponent>\r\n  ): Observable<NavigationNode> {\r\n    if (!data$) {\r\n      return of();\r\n    }\r\n    return data$.pipe(\r\n      filter((data) => !!data),\r\n      switchMap((data) => {\r\n        const navigation = data.navigationNode ? data.navigationNode : data;\r\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\r\n          tap((items) => {\r\n            if (items === undefined) {\r\n              this.loadNavigationEntryItems(navigation, true);\r\n            } else {\r\n              // we should check whether the existing node items are what expected\r\n              const expectedItems = [];\r\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\r\n              const existingItems = Object.keys(items).map(\r\n                (key) => items[key].uid\r\n              );\r\n              const missingItems = expectedItems.filter(\r\n                (it) => !existingItems.includes(it.id)\r\n              );\r\n              if (missingItems.length > 0) {\r\n                this.cmsService.loadNavigationItems(\r\n                  navigation.uid,\r\n                  missingItems\r\n                );\r\n              }\r\n            }\r\n          }),\r\n          filter(Boolean),\r\n          map((items) => this.populateNavigationNode(navigation, items))\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\r\n   * @param nodeData\r\n   * @param root\r\n   * @param itemsList\r\n   */\r\n  private loadNavigationEntryItems(\r\n    nodeData: any,\r\n    root: boolean,\r\n    itemsList = []\r\n  ): void {\r\n    if (nodeData.entries && nodeData.entries.length > 0) {\r\n      nodeData.entries.forEach((entry) => {\r\n        itemsList.push({\r\n          superType: entry.itemSuperType,\r\n          id: entry.itemId,\r\n        });\r\n      });\r\n    }\r\n\r\n    if (nodeData.children && nodeData.children.length > 0) {\r\n      nodeData.children.forEach((child) =>\r\n        this.loadNavigationEntryItems(child, false, itemsList)\r\n      );\r\n    }\r\n\r\n    if (root) {\r\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a new node tree for the view\r\n   * @param nodeData\r\n   * @param items\r\n   */\r\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\r\n    const node: NavigationNode = {};\r\n\r\n    if (nodeData.title) {\r\n      // the node title will be populated by the first entry (if any)\r\n      // if there's no nodeData.title available\r\n      node.title = nodeData.title;\r\n    }\r\n\r\n    if (nodeData.entries && nodeData.entries.length > 0) {\r\n      this.populateLink(node, nodeData.entries[0], items);\r\n    }\r\n\r\n    if (nodeData.children && nodeData.children.length > 0) {\r\n      const children = nodeData.children\r\n        .map((child) => this.populateNavigationNode(child, items))\r\n        .filter(Boolean);\r\n      if (children.length > 0) {\r\n        node.children = children;\r\n      }\r\n    }\r\n\r\n    // return null in case there are no children\r\n    return Object.keys(node).length === 0 ? null : node;\r\n  }\r\n\r\n  /**\r\n   * The node link is driven by the first entry.\r\n   */\r\n  private populateLink(node: NavigationNode, entry, items) {\r\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\r\n\r\n    // now we only consider CMSLinkComponent\r\n    if (item && entry.itemType === 'CMSLinkComponent') {\r\n      if (!node.title) {\r\n        node.title = item.linkName;\r\n      }\r\n      const url = this.getLink(item);\r\n      // only populate the node link if we have a visible node\r\n      if (node.title && url) {\r\n        node.url = url;\r\n        // the backend provide boolean value for the target\r\n        // in case the link should be opened in a new window\r\n        node.target = !!item.target ? '_blank' : '';\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Gets the URL or link to a related item (category)\r\n   */\r\n  private getLink(item): string | string[] {\r\n    if (item.url) {\r\n      return item.url;\r\n    } else if (item.categoryCode) {\r\n      return this.semanticPathService.transform({\r\n        cxRoute: 'category',\r\n        params: {\r\n          code: item.categoryCode,\r\n          name: item.name,\r\n        },\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnDestroy,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { debounceTime, filter } from 'rxjs/operators';\r\nimport { ICON_TYPE } from '../../misc/icon/index';\r\nimport { NavigationNode } from './navigation-node.model';\r\n\r\n@Component({\r\n  selector: 'cx-navigation-ui',\r\n  templateUrl: './navigation-ui.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NavigationUIComponent implements OnDestroy {\r\n  /**\r\n   * The navigation node to render.\r\n   */\r\n  @Input() node: NavigationNode;\r\n\r\n  /**\r\n   * The number of child nodes that must be wrapped.\r\n   */\r\n  @Input() wrapAfter: number;\r\n  /**\r\n   * the icon type that will be used for navigation nodes\r\n   * with children.\r\n   */\r\n  iconType = ICON_TYPE;\r\n\r\n  /**\r\n   * Indicates whether the navigation should support flyout.\r\n   * If flyout is set to true, the\r\n   * nested child navigation nodes will only appear on hover or focus.\r\n   */\r\n  @Input() @HostBinding('class.flyout') flyout = true;\r\n\r\n  @Input() @HostBinding('class.is-open') isOpen = false;\r\n\r\n  private openNodes: HTMLElement[] = [];\r\n  private subscriptions = new Subscription();\r\n  private resize = new EventEmitter();\r\n\r\n  @HostListener('window:resize')\r\n  onResize() {\r\n    this.resize.next();\r\n  }\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private renderer: Renderer2,\r\n    private elemRef: ElementRef\r\n  ) {\r\n    this.subscriptions.add(\r\n      this.router.events\r\n        .pipe(filter((event) => event instanceof NavigationEnd))\r\n        .subscribe(() => this.clear())\r\n    );\r\n    this.subscriptions.add(\r\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\r\n        this.alignWrappersToRightIfStickOut();\r\n      })\r\n    );\r\n  }\r\n\r\n  toggleOpen(event: UIEvent): void {\r\n    if (event.type === 'keydown') {\r\n      event.preventDefault();\r\n    }\r\n    const node = <HTMLElement>event.currentTarget;\r\n    if (this.openNodes.includes(node)) {\r\n      if (event.type === 'keydown') {\r\n        this.back();\r\n      } else {\r\n        this.openNodes = this.openNodes.filter((n) => n !== node);\r\n        this.renderer.removeClass(node, 'is-open');\r\n      }\r\n    } else {\r\n      this.openNodes.push(node);\r\n    }\r\n\r\n    this.updateClasses();\r\n\r\n    event.stopImmediatePropagation();\r\n    event.stopPropagation();\r\n  }\r\n\r\n  back(): void {\r\n    if (this.openNodes[this.openNodes.length - 1]) {\r\n      this.renderer.removeClass(\r\n        this.openNodes[this.openNodes.length - 1],\r\n        'is-open'\r\n      );\r\n      this.openNodes.pop();\r\n      this.updateClasses();\r\n    }\r\n  }\r\n\r\n  clear(): void {\r\n    this.openNodes = [];\r\n    this.updateClasses();\r\n  }\r\n\r\n  onMouseEnter(event: MouseEvent) {\r\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\r\n    this.focusAfterPreviousClicked(event);\r\n  }\r\n\r\n  getTotalDepth(node: NavigationNode, depth = 0): number {\r\n    if (node.children && node.children.length > 0) {\r\n      return Math.max(\r\n        ...node.children.map((n) => this.getTotalDepth(n, depth + 1))\r\n      );\r\n    } else {\r\n      return depth;\r\n    }\r\n  }\r\n\r\n  getColumnCount(length: number): number {\r\n    return Math.round(length / (this.wrapAfter || length));\r\n  }\r\n\r\n  focusAfterPreviousClicked(event: MouseEvent) {\r\n    const target: HTMLElement = <HTMLElement>(\r\n      (event.target || event.relatedTarget)\r\n    );\r\n    if (\r\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\r\n      target.parentElement.matches('.flyout')\r\n    ) {\r\n      target.focus();\r\n    }\r\n    return target.ownerDocument;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscriptions) {\r\n      this.subscriptions.unsubscribe();\r\n    }\r\n  }\r\n\r\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\r\n    const wrapper = <HTMLElement>node.querySelector('.wrapper');\r\n    const body = <HTMLElement>node.closest('body');\r\n    if (wrapper) {\r\n      this.renderer.removeStyle(wrapper, 'margin-left');\r\n      if (\r\n        wrapper.offsetLeft + wrapper.offsetWidth >\r\n        body.offsetLeft + body.offsetWidth\r\n      ) {\r\n        this.renderer.setStyle(\r\n          wrapper,\r\n          'margin-left',\r\n          `${node.offsetWidth - wrapper.offsetWidth}px`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private alignWrappersToRightIfStickOut() {\r\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\r\n    Array.from(navs)\r\n      .filter((node) => node.tagName === 'NAV')\r\n      .forEach((nav) => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\r\n  }\r\n\r\n  private updateClasses(): void {\r\n    this.openNodes.forEach((node, i) => {\r\n      if (i + 1 < this.openNodes.length) {\r\n        this.renderer.addClass(node, 'is-opened');\r\n        this.renderer.removeClass(node, 'is-open');\r\n      } else {\r\n        this.renderer.removeClass(node, 'is-opened');\r\n        this.renderer.addClass(node, 'is-open');\r\n      }\r\n    });\r\n\r\n    this.isOpen = this.openNodes.length > 0;\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { CmsNavigationComponent } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\r\nimport { NavigationNode } from './navigation-node.model';\r\nimport { NavigationService } from './navigation.service';\r\n\r\n@Component({\r\n  selector: 'cx-navigation',\r\n  templateUrl: './navigation.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NavigationComponent {\r\n  node$: Observable<NavigationNode> = this.service.createNavigation(\r\n    this.componentData.data$\r\n  );\r\n\r\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\r\n    map((d) => d?.styleClass)\r\n  );\r\n\r\n  constructor(\r\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\r\n    protected service: NavigationService\r\n  ) {}\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\r\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\r\nimport { IconModule } from '../../misc/icon/icon.module';\r\nimport { NavigationUIComponent } from './navigation-ui.component';\r\nimport { NavigationComponent } from './navigation.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    IconModule,\r\n    GenericLinkModule,\r\n    I18nModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        NavigationComponent: {\r\n          component: NavigationComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [NavigationComponent, NavigationUIComponent],\r\n  entryComponents: [NavigationComponent],\r\n  exports: [NavigationComponent, NavigationUIComponent],\r\n})\r\nexport class NavigationModule {}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\r\nimport { NavigationModule } from '../navigation/navigation.module';\r\nimport { CategoryNavigationComponent } from './category-navigation.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, NavigationModule],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        CategoryNavigationComponent: {\r\n          component: CategoryNavigationComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [CategoryNavigationComponent],\r\n  entryComponents: [CategoryNavigationComponent],\r\n  exports: [CategoryNavigationComponent],\r\n})\r\nexport class CategoryNavigationModule {}\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { CmsNavigationComponent } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\r\nimport { NavigationNode } from '../navigation/navigation-node.model';\r\nimport { NavigationService } from '../navigation/navigation.service';\r\n\r\n@Component({\r\n  selector: 'cx-footer-navigation',\r\n  templateUrl: './footer-navigation.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FooterNavigationComponent {\r\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\r\n    this.componentData.data$\r\n  );\r\n\r\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\r\n    map((d) => d?.styleClass)\r\n  );\r\n\r\n  constructor(\r\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\r\n    protected service: NavigationService\r\n  ) {}\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\r\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\r\nimport { NavigationModule } from '../navigation/navigation.module';\r\nimport { FooterNavigationComponent } from './footer-navigation.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    NavigationModule,\r\n    GenericLinkModule,\r\n    I18nModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        FooterNavigationComponent: {\r\n          component: FooterNavigationComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [FooterNavigationComponent],\r\n  entryComponents: [FooterNavigationComponent],\r\n  exports: [FooterNavigationComponent],\r\n})\r\nexport class FooterNavigationModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  ProductSearchPage,\r\n  RoutingService,\r\n  SearchboxService,\r\n  TranslationService,\r\n  WindowRef,\r\n} from '@spartacus/core';\r\nimport { combineLatest, Observable, of } from 'rxjs';\r\nimport { map, switchMap, tap } from 'rxjs/operators';\r\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\r\n\r\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SearchBoxComponentService {\r\n  constructor(\r\n    public searchService: SearchboxService,\r\n    protected routingService: RoutingService,\r\n    protected translationService: TranslationService,\r\n    protected winRef: WindowRef\r\n  ) {}\r\n\r\n  /**\r\n   * Executes the search for products and suggestions,\r\n   * unless the configuration is setup to not search for\r\n   * products or suggestions.\r\n   */\r\n  search(query: string, config: SearchBoxConfig): void {\r\n    if (!query || query === '') {\r\n      this.clearResults();\r\n      return;\r\n    }\r\n\r\n    if (\r\n      config.minCharactersBeforeRequest &&\r\n      query.length < config.minCharactersBeforeRequest\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (config.displayProducts) {\r\n      this.searchService.search(query, {\r\n        pageSize: config.maxProducts,\r\n      });\r\n    }\r\n\r\n    if (config.displaySuggestions) {\r\n      this.searchService.searchSuggestions(query, {\r\n        pageSize: config.maxSuggestions,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an observable with the SearchResults. When there's any\r\n   * result, the body tag will get a classname, so that specific style\r\n   * rules can be applied.\r\n   */\r\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\r\n    return combineLatest([\r\n      this.getProductResults(config),\r\n      this.getProductSuggestions(config),\r\n      this.getSearchMessage(config),\r\n    ]).pipe(\r\n      map(([productResults, suggestions, message]) => {\r\n        return {\r\n          products: productResults ? productResults.products : null,\r\n          suggestions,\r\n          message,\r\n        };\r\n      }),\r\n      tap((results) =>\r\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Clears the searchbox results, so that old values are\r\n   * no longer emited upon next search.\r\n   */\r\n  clearResults() {\r\n    this.searchService.clearResults();\r\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\r\n  }\r\n\r\n  hasBodyClass(className: string): boolean {\r\n    return this.winRef.document.body.classList.contains(className);\r\n  }\r\n\r\n  toggleBodyClass(className: string, add?: boolean) {\r\n    if (add === undefined) {\r\n      this.winRef.document.body.classList.toggle(className);\r\n    } else {\r\n      add\r\n        ? this.winRef.document.body.classList.add(className)\r\n        : this.winRef.document.body.classList.remove(className);\r\n    }\r\n  }\r\n\r\n  private hasResults(results: SearchResults): boolean {\r\n    return (\r\n      (!!results.products && results.products.length > 0) ||\r\n      (!!results.suggestions && results.suggestions.length > 0) ||\r\n      !!results.message\r\n    );\r\n  }\r\n\r\n  private getProductResults(\r\n    config: SearchBoxConfig\r\n  ): Observable<ProductSearchPage> {\r\n    if (config.displayProducts) {\r\n      return this.searchService.getResults();\r\n    } else {\r\n      return of({});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loads suggestions from the backend. In case there's no suggestion\r\n   * available, we try to get an exact match suggestion.\r\n   */\r\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\r\n    if (!config.displaySuggestions) {\r\n      return of([]);\r\n    } else {\r\n      return this.searchService.getSuggestionResults().pipe(\r\n        map((res) => res.map((suggestion) => suggestion.value)),\r\n        switchMap((suggestions) => {\r\n          if (suggestions.length === 0) {\r\n            return this.getExactSuggestion(config).pipe(\r\n              map((match) => (match ? [match] : []))\r\n            );\r\n          } else {\r\n            return of(suggestions);\r\n          }\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * whenever there is at least 1 product, we simulate\r\n   * a suggestion to provide easy access to the search result page\r\n   */\r\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\r\n    return this.getProductResults(config).pipe(\r\n      switchMap((productResult) => {\r\n        return productResult.products && productResult.products.length > 0\r\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\r\n              term: productResult.freeTextSearch,\r\n            })\r\n          : of(null);\r\n      })\r\n    );\r\n  }\r\n\r\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\r\n    return combineLatest([\r\n      this.getProductResults(config),\r\n      this.getProductSuggestions(config),\r\n    ]).pipe(\r\n      switchMap(([productResult, suggestions]) => {\r\n        if (\r\n          productResult &&\r\n          productResult.products &&\r\n          productResult.products.length === 0 &&\r\n          suggestions &&\r\n          suggestions.length === 0\r\n        ) {\r\n          return this.fetchTranslation('searchBox.help.noMatch');\r\n        } else {\r\n          return of(null);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Navigates to the search result page with a given query\r\n   */\r\n  public launchSearchPage(query: string): void {\r\n    this.routingService.go({\r\n      cxRoute: 'search',\r\n      params: { query },\r\n    });\r\n  }\r\n\r\n  private fetchTranslation(\r\n    translationKey: string,\r\n    options?: any\r\n  ): Observable<string> {\r\n    return this.translationService.translate(translationKey, options);\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  Optional,\r\n} from '@angular/core';\r\nimport { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, switchMap, tap } from 'rxjs/operators';\r\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\r\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\r\nimport { SearchBoxComponentService } from './search-box-component.service';\r\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\r\n\r\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\r\n  minCharactersBeforeRequest: 1,\r\n  displayProducts: true,\r\n  displaySuggestions: true,\r\n  maxProducts: 5,\r\n  maxSuggestions: 5,\r\n  displayProductImages: true,\r\n};\r\n\r\n@Component({\r\n  selector: 'cx-searchbox',\r\n  templateUrl: './search-box.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SearchBoxComponent {\r\n  config: SearchBoxConfig;\r\n  /**\r\n   * Sets the search box input field\r\n   */\r\n  @Input('queryText')\r\n  set queryText(value: string) {\r\n    if (value) {\r\n      this.search(value);\r\n    }\r\n  }\r\n\r\n  iconTypes = ICON_TYPE;\r\n\r\n  /**\r\n   * In some occasions we need to ignore the close event,\r\n   * for example when we click inside the search result section.\r\n   */\r\n  private ignoreCloseEvent = false;\r\n\r\n  /**\r\n   * The component data is optional, so that this component\r\n   * can be reused without CMS integration.\r\n   */\r\n\r\n  constructor(\r\n    protected searchBoxComponentService: SearchBoxComponentService,\r\n    @Optional()\r\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>,\r\n    protected winRef: WindowRef\r\n  ) {}\r\n\r\n  results$: Observable<SearchResults> = this.config$.pipe(\r\n    tap((c) => (this.config = c)),\r\n    switchMap((config) => this.searchBoxComponentService.getResults(config))\r\n  );\r\n\r\n  /**\r\n   * Returns the backend configuration or default configuration for the searchbox.\r\n   */\r\n  private get config$(): Observable<SearchBoxConfig> {\r\n    if (this.componentData) {\r\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\r\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\r\n        // boolean values, we replace them with boolean values.\r\n        map((c) => {\r\n          return {\r\n            ...c,\r\n            displayProducts:\r\n              <any>c?.displayProducts === 'true' || c?.displayProducts === true,\r\n            displayProductImages:\r\n              <any>c?.displayProductImages === 'true' ||\r\n              c?.displayProductImages === true,\r\n            displaySuggestions:\r\n              <any>c?.displaySuggestions === 'true' ||\r\n              c?.displaySuggestions === true,\r\n          };\r\n        })\r\n      );\r\n    } else {\r\n      return of(DEFAULT_SEARCHBOX_CONFIG);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Closes the searchbox and opens the search result page.\r\n   */\r\n  search(query: string): void {\r\n    this.searchBoxComponentService.search(query, this.config);\r\n    // force the searchbox to open\r\n    this.open();\r\n  }\r\n\r\n  /**\r\n   * Opens the typeahead searchbox\r\n   */\r\n  open(): void {\r\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\r\n  }\r\n\r\n  /**\r\n   * Closes the typehead searchbox.\r\n   */\r\n  close(event: UIEvent, force?: boolean): void {\r\n    // Use timeout to detect changes\r\n    setTimeout(() => {\r\n      if ((!this.ignoreCloseEvent && !this.isSearchboxFocused()) || force) {\r\n        this.blurSearchBox(event);\r\n      }\r\n    });\r\n  }\r\n\r\n  protected blurSearchBox(event: UIEvent): void {\r\n    this.searchBoxComponentService.toggleBodyClass(\r\n      'searchbox-is-active',\r\n      false\r\n    );\r\n    if (event && event.target) {\r\n      (<HTMLElement>event.target).blur();\r\n    }\r\n  }\r\n\r\n  // Check if focus is on searchbox or result list elements\r\n  private isSearchboxFocused(): boolean {\r\n    return (\r\n      this.getResultElements().includes(this.getFocusedElement()) ||\r\n      this.winRef.document.querySelector('input[aria-label=\"search\"]') ===\r\n        this.getFocusedElement()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Especially in mobile we do not want the search icon\r\n   * to focus the input again when it's already open.\r\n   * */\r\n  avoidReopen(event: UIEvent): void {\r\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\r\n      this.close(event);\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  // Return result list as HTMLElement array\r\n  private getResultElements(): HTMLElement[] {\r\n    return Array.from(\r\n      this.winRef.document.querySelectorAll('.products > a, .suggestions > a')\r\n    );\r\n  }\r\n\r\n  // Return focused element as HTMLElement\r\n  private getFocusedElement(): HTMLElement {\r\n    return <HTMLElement>this.winRef.document.activeElement;\r\n  }\r\n\r\n  private getFocusedIndex(): number {\r\n    return this.getResultElements().indexOf(this.getFocusedElement());\r\n  }\r\n\r\n  // Focus on previous item in results list\r\n  focusPreviousChild(event) {\r\n    event.preventDefault(); // Negate normal keyscroll\r\n    const [results, focusedIndex] = [\r\n      this.getResultElements(),\r\n      this.getFocusedIndex(),\r\n    ];\r\n    // Focus on last index moving to first\r\n    if (results.length) {\r\n      if (focusedIndex < 1) {\r\n        results[results.length - 1].focus();\r\n      } else {\r\n        results[focusedIndex - 1].focus();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Focus on next item in results list\r\n  focusNextChild(event) {\r\n    event.preventDefault(); // Negate normal keyscroll\r\n    const [results, focusedIndex] = [\r\n      this.getResultElements(),\r\n      this.getFocusedIndex(),\r\n    ];\r\n    // Focus on first index moving to last\r\n    if (results.length) {\r\n      if (focusedIndex >= results.length - 1) {\r\n        results[0].focus();\r\n      } else {\r\n        results[focusedIndex + 1].focus();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Opens the PLP with the given query.\r\n   *\r\n   * TODO: if there's a single product match, we could open the PDP.\r\n   */\r\n  launchSearchResult(event: UIEvent, query: string): void {\r\n    if (!query || query.trim().length === 0) {\r\n      return;\r\n    }\r\n    this.close(event);\r\n    this.searchBoxComponentService.launchSearchPage(query);\r\n  }\r\n\r\n  /**\r\n   * Disables closing the search result list.\r\n   */\r\n  disableClose(): void {\r\n    this.ignoreCloseEvent = true;\r\n  }\r\n\r\n  /**\r\n   * Clears the search box input field\r\n   */\r\n  public clear(el: HTMLInputElement): void {\r\n    this.disableClose();\r\n    el.value = '';\r\n    this.searchBoxComponentService.clearResults();\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport { IconModule } from '../../misc/icon/icon.module';\r\nimport { MediaModule } from '../../../shared/components/media/media.module';\r\nimport { HighlightPipe } from './highlight.pipe';\r\nimport { SearchBoxComponent } from './search-box.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    MediaModule,\r\n    IconModule,\r\n    UrlModule,\r\n    I18nModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        SearchBoxComponent: {\r\n          component: SearchBoxComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [SearchBoxComponent, HighlightPipe],\r\n  entryComponents: [SearchBoxComponent],\r\n  exports: [SearchBoxComponent],\r\n})\r\nexport class SearchBoxModule {}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport {\r\n  CheckoutService,\r\n  Order,\r\n  PromotionResult,\r\n  PromotionLocation,\r\n} from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\r\n\r\n@Component({\r\n  selector: 'cx-order-confirmation-items',\r\n  templateUrl: './order-confirmation-items.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\r\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\r\n  order$: Observable<Order>;\r\n  orderPromotions$: Observable<PromotionResult[]>;\r\n\r\n  constructor(\r\n    protected checkoutService: CheckoutService,\r\n    protected promotionService: PromotionService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.order$ = this.checkoutService.getOrderDetails();\r\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\r\n      this.promotionLocation\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.checkoutService.clearCheckoutData();\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport {\r\n  Address,\r\n  CheckoutService,\r\n  DeliveryMode,\r\n  Order,\r\n  PaymentDetails,\r\n  TranslationService,\r\n} from '@spartacus/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { Card } from '../../../../shared/components/card/card.component';\r\n\r\n@Component({\r\n  selector: 'cx-order-confirmation-overview',\r\n  templateUrl: './order-confirmation-overview.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\r\n  order$: Observable<Order>;\r\n\r\n  constructor(\r\n    protected checkoutService: CheckoutService,\r\n    private translation: TranslationService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.order$ = this.checkoutService.getOrderDetails();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.checkoutService.clearCheckoutData();\r\n  }\r\n\r\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\r\n    return this.translation.translate('addressCard.shipTo').pipe(\r\n      filter(() => Boolean(deliveryAddress)),\r\n      map((textTitle) => ({\r\n        title: textTitle,\r\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\r\n        text: [\r\n          deliveryAddress.line1,\r\n          deliveryAddress.line2,\r\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\r\n          deliveryAddress.phone,\r\n        ],\r\n      }))\r\n    );\r\n  }\r\n\r\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\r\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\r\n      filter(() => Boolean(deliveryMode)),\r\n      map((textTitle) => ({\r\n        title: textTitle,\r\n        textBold: deliveryMode.name,\r\n        text: [deliveryMode.description],\r\n      }))\r\n    );\r\n  }\r\n\r\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\r\n    return this.translation.translate('addressCard.billTo').pipe(\r\n      filter(() => Boolean(billingAddress)),\r\n      map((textTitle) => ({\r\n        title: textTitle,\r\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\r\n        text: [\r\n          billingAddress.line1,\r\n          billingAddress.line2,\r\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\r\n          billingAddress.phone,\r\n        ],\r\n      }))\r\n    );\r\n  }\r\n\r\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\r\n    return combineLatest([\r\n      this.translation.translate('paymentForm.payment'),\r\n      this.translation.translate('paymentCard.expires', {\r\n        month: Boolean(payment) ? payment.expiryMonth : '',\r\n        year: Boolean(payment) ? payment.expiryYear : '',\r\n      }),\r\n    ]).pipe(\r\n      filter(() => Boolean(payment)),\r\n      map(([textTitle, textExpires]) => ({\r\n        title: textTitle,\r\n        textBold: payment.accountHolderName,\r\n        text: [payment.cardNumber, textExpires],\r\n      }))\r\n    );\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { CheckoutService, Order } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'cx-order-confirmation-thank-you-message',\r\n  templateUrl: './order-confirmation-thank-you-message.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderConfirmationThankYouMessageComponent\r\n  implements OnInit, OnDestroy {\r\n  order$: Observable<Order>;\r\n  isGuestCustomer = false;\r\n  orderGuid: string;\r\n\r\n  constructor(protected checkoutService: CheckoutService) {}\r\n\r\n  ngOnInit() {\r\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\r\n      tap((order) => {\r\n        this.isGuestCustomer = order.guestCustomer;\r\n        this.orderGuid = order.guid;\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.checkoutService.clearCheckoutData();\r\n  }\r\n}\r\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\r\n\r\n@Component({\r\n  selector: 'cx-guest-register-form',\r\n  templateUrl: './guest-register-form.component.html',\r\n})\r\nexport class GuestRegisterFormComponent implements OnDestroy {\r\n  @Input() guid: string;\r\n  @Input() email: string;\r\n\r\n  subscription: Subscription;\r\n  guestRegisterForm: FormGroup = this.fb.group(\r\n    {\r\n      password: [\r\n        '',\r\n        [Validators.required, CustomFormValidators.passwordValidator],\r\n      ],\r\n      passwordconf: ['', Validators.required],\r\n    },\r\n    {\r\n      validators: CustomFormValidators.passwordsMustMatch(\r\n        'password',\r\n        'passwordconf'\r\n      ),\r\n    }\r\n  );\r\n\r\n  constructor(\r\n    protected userService: UserService,\r\n    protected routingService: RoutingService,\r\n    protected authService: AuthService,\r\n    protected fb: FormBuilder\r\n  ) {}\r\n\r\n  submit() {\r\n    if (this.guestRegisterForm.valid) {\r\n      this.userService.registerGuest(\r\n        this.guid,\r\n        this.guestRegisterForm.value.password\r\n      );\r\n      if (!this.subscription) {\r\n        this.subscription = this.authService\r\n          .getUserToken()\r\n          .subscribe((token) => {\r\n            if (token.access_token) {\r\n              this.routingService.go({ cxRoute: 'home' });\r\n            }\r\n          });\r\n      }\r\n    } else {\r\n      this.guestRegisterForm.markAllAsTouched();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, UrlTree, Router } from '@angular/router';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OrderConfirmationGuard implements CanActivate {\r\n  constructor(\r\n    private checkoutService: CheckoutService,\r\n    private router: Router,\r\n    private semanticPathService: SemanticPathService\r\n  ) {}\r\n\r\n  canActivate(): Observable<boolean | UrlTree> {\r\n    return this.checkoutService.getOrderDetails().pipe(\r\n      map((orderDetails) => {\r\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\r\n          return true;\r\n        } else {\r\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  CmsConfig,\r\n  FeaturesConfigModule,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n} from '@spartacus/core';\r\nimport { CardModule } from '../../shared/components/card/card.module';\r\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\r\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\r\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\r\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\r\n// tslint:disable-next-line\r\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\r\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\r\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\r\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\r\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\r\nimport { FormErrorsModule } from '../../shared/index';\r\n\r\nconst orderConfirmationComponents = [\r\n  OrderConfirmationItemsComponent,\r\n  OrderConfirmationOverviewComponent,\r\n  OrderConfirmationThankYouMessageComponent,\r\n  OrderConfirmationTotalsComponent,\r\n  GuestRegisterFormComponent,\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    CartSharedModule,\r\n    CardModule,\r\n    PwaModule,\r\n    PromotionsModule,\r\n    I18nModule,\r\n    ReactiveFormsModule,\r\n    FeaturesConfigModule,\r\n    FormErrorsModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        OrderConfirmationThankMessageComponent: {\r\n          component: OrderConfirmationThankYouMessageComponent,\r\n          guards: [OrderConfirmationGuard],\r\n        },\r\n        OrderConfirmationItemsComponent: {\r\n          component: OrderConfirmationItemsComponent,\r\n          guards: [OrderConfirmationGuard],\r\n        },\r\n        OrderConfirmationTotalsComponent: {\r\n          component: OrderConfirmationTotalsComponent,\r\n          guards: [OrderConfirmationGuard],\r\n        },\r\n        OrderConfirmationOverviewComponent: {\r\n          component: OrderConfirmationOverviewComponent,\r\n          guards: [OrderConfirmationGuard],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [...orderConfirmationComponents],\r\n  exports: [...orderConfirmationComponents],\r\n  entryComponents: [...orderConfirmationComponents],\r\n})\r\nexport class OrderConfirmationModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  Product,\r\n  ProductReference,\r\n  ProductReferenceService,\r\n  ProductService,\r\n  SemanticPathService,\r\n} from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { ProductCarouselItem } from './product-carousel.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductCarouselService {\r\n  constructor(\r\n    protected productService: ProductService,\r\n    protected referenceService: ProductReferenceService,\r\n    protected semanticPathService: SemanticPathService\r\n  ) {}\r\n\r\n  /**\r\n   * Loads the product data and converts it `CarouselItem`.\r\n   */\r\n  loadProduct(code: string): Observable<ProductCarouselItem> {\r\n    return this.productService.get(code).pipe(\r\n      filter(Boolean),\r\n      map((product) => this.convertProduct(product))\r\n    );\r\n  }\r\n\r\n  getProductReferences(\r\n    code: string,\r\n    referenceType: string,\r\n    displayTitle: boolean,\r\n    displayProductPrices: boolean\r\n  ): Observable<ProductCarouselItem[]> {\r\n    return this.referenceService.get(code, referenceType).pipe(\r\n      filter(Boolean),\r\n      map((refs: ProductReference[]) =>\r\n        refs.map((ref) =>\r\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Converts the product to a generic CarouselItem\r\n   */\r\n  private convertProduct(\r\n    source: Product,\r\n    displayTitle = true,\r\n    displayProductPrices = true\r\n  ): ProductCarouselItem {\r\n    const item: ProductCarouselItem = {};\r\n    if (displayTitle) {\r\n      item.title = source.name;\r\n    }\r\n    if (displayProductPrices && source.price && source.price.formattedValue) {\r\n      item.price = source.price.formattedValue;\r\n    }\r\n    if (source.images && source.images.PRIMARY) {\r\n      item.media = {\r\n        container: source.images.PRIMARY,\r\n        format: 'product',\r\n      };\r\n    }\r\n    item.route = this.semanticPathService.transform({\r\n      cxRoute: 'product',\r\n      params: source,\r\n    });\r\n    return item;\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport {\r\n  CmsProductCarouselComponent as model,\r\n  Product,\r\n  ProductScope,\r\n  ProductService,\r\n} from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\r\n\r\n@Component({\r\n  selector: 'cx-product-carousel',\r\n  templateUrl: './product-carousel.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductCarouselComponent {\r\n  protected readonly PRODUCT_SCOPE = ProductScope.LIST;\r\n\r\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\r\n    filter(Boolean)\r\n  );\r\n\r\n  /**\r\n   * returns an Obervable string for the title.\r\n   */\r\n  title$: Observable<string> = this.componentData$.pipe(\r\n    map((data) => data.title)\r\n  );\r\n\r\n  /**\r\n   * Obervable that holds an Array of Observables. This is done, so that\r\n   * the component UI could consider to lazy load the UI components when they're\r\n   * in the viewpoint.\r\n   */\r\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\r\n    map((data) => data.productCodes.trim().split(' ')),\r\n    map((codes) =>\r\n      codes.map((code) => this.productService.get(code, this.PRODUCT_SCOPE))\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    protected componentData: CmsComponentData<model>,\r\n    protected productService: ProductService\r\n  ) {}\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\r\nimport {\r\n  CarouselModule,\r\n  MediaModule,\r\n} from '../../../../shared/components/index';\r\nimport { ProductCarouselComponent } from './product-carousel.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        ProductCarouselComponent: {\r\n          component: ProductCarouselComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [ProductCarouselComponent],\r\n  entryComponents: [ProductCarouselComponent],\r\n  exports: [ProductCarouselComponent],\r\n})\r\nexport class ProductCarouselModule {}\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport {\r\n  CmsProductReferencesComponent,\r\n  Product,\r\n  ProductReference,\r\n  ProductReferenceService,\r\n} from '@spartacus/core';\r\nimport { combineLatest, Observable, of } from 'rxjs';\r\nimport {\r\n  filter,\r\n  map,\r\n  switchMap,\r\n  tap,\r\n  distinctUntilChanged,\r\n} from 'rxjs/operators';\r\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\r\nimport { CurrentProductService } from '../../current-product.service';\r\n\r\n@Component({\r\n  selector: 'cx-product-references',\r\n  templateUrl: './product-references.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductReferencesComponent {\r\n  /**\r\n   * returns an Obervable string for the title\r\n   */\r\n  title$ = this.component.data$.pipe(map((d) => d?.title));\r\n\r\n  private currentProductCode$: Observable<\r\n    string\r\n  > = this.current.getProduct().pipe(\r\n    filter(Boolean),\r\n    map((p: Product) => p.code),\r\n    distinctUntilChanged(),\r\n    tap(() => this.referenceService.cleanReferences())\r\n  );\r\n\r\n  /**\r\n   * Obervable with an Array of Observables. This is done, so that\r\n   * the component UI could consider to lazy load the UI components when they're\r\n   * in the viewpoint.\r\n   */\r\n  items$: Observable<Observable<Product>[]> = combineLatest([\r\n    this.currentProductCode$,\r\n    this.component.data$,\r\n  ]).pipe(\r\n    switchMap(([code, data]) =>\r\n      this.getProductReferences(code, data?.productReferenceTypes)\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\r\n    protected current: CurrentProductService,\r\n    protected referenceService: ProductReferenceService\r\n  ) {}\r\n\r\n  private getProductReferences(\r\n    code: string,\r\n    referenceType: string\r\n  ): Observable<Observable<Product>[]> {\r\n    return this.referenceService.get(code, referenceType).pipe(\r\n      filter(Boolean),\r\n      map((refs: ProductReference[]) => refs.map((ref) => of(ref.target)))\r\n    );\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\r\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\r\nimport { MediaModule } from '../../../../shared/components/media/media.module';\r\nimport { ProductReferencesComponent } from './product-references.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        ProductReferencesComponent: {\r\n          component: ProductReferencesComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [ProductReferencesComponent],\r\n  entryComponents: [ProductReferencesComponent],\r\n  exports: [ProductReferencesComponent],\r\n})\r\nexport class ProductReferencesModule {}\r\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { Product } from '@spartacus/core';\r\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\r\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\r\nimport { CurrentProductService } from '../current-product.service';\r\n\r\n@Component({\r\n  selector: 'cx-product-images',\r\n  templateUrl: './product-images.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductImagesComponent {\r\n  private mainMediaContainer = new BehaviorSubject(null);\r\n\r\n  private product$: Observable<\r\n    Product\r\n  > = this.currentProductService.getProduct().pipe(\r\n    filter(Boolean),\r\n    distinctUntilChanged(),\r\n    tap((p: Product) => {\r\n      this.mainMediaContainer.next(p.images?.PRIMARY ? p.images.PRIMARY : {});\r\n    })\r\n  );\r\n\r\n  thumbs$: Observable<any[]> = this.product$.pipe(\r\n    map((p: Product) => this.createThumbs(p))\r\n  );\r\n\r\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\r\n    map(([, container]) => container)\r\n  );\r\n\r\n  constructor(private currentProductService: CurrentProductService) {}\r\n\r\n  openImage(item: any): void {\r\n    this.mainMediaContainer.next(item);\r\n  }\r\n\r\n  isActive(thumbnail): Observable<boolean> {\r\n    return this.mainMediaContainer.pipe(\r\n      filter(Boolean),\r\n      map((container: any) => {\r\n        return (\r\n          container.zoom &&\r\n          container.zoom.url &&\r\n          thumbnail.zoom &&\r\n          thumbnail.zoom.url &&\r\n          container.zoom.url === thumbnail.zoom.url\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  /** find the index of the main media in the list of media */\r\n  getActive(thumbs: any[]): Observable<number> {\r\n    return this.mainMediaContainer.pipe(\r\n      filter(Boolean),\r\n      map((container: any) => {\r\n        const current = thumbs.find(\r\n          (t) =>\r\n            t.media &&\r\n            container.zoom &&\r\n            t.media.container &&\r\n            t.media.container.zoom &&\r\n            t.media.container.zoom.url === container.zoom.url\r\n        );\r\n        return thumbs.indexOf(current);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return an array of CarouselItems for the product thumbnails.\r\n   * In case there are less then 2 thumbs, we return null.\r\n   */\r\n  private createThumbs(product: Product): Observable<any>[] {\r\n    if (\r\n      !product.images ||\r\n      !product.images.GALLERY ||\r\n      product.images.GALLERY.length < 2\r\n    ) {\r\n      return [];\r\n    }\r\n\r\n    return (<any[]>product.images.GALLERY).map((c) => of({ container: c }));\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\r\nimport { OutletModule } from '../../../cms-structure/outlet/index';\r\nimport { CarouselModule } from '../../../shared/components/carousel/index';\r\nimport { MediaModule } from '../../../shared/components/media/media.module';\r\nimport { ProductImagesComponent } from './product-images.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    MediaModule,\r\n    OutletModule,\r\n    CarouselModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        ProductImagesComponent: {\r\n          component: ProductImagesComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [ProductImagesComponent],\r\n  entryComponents: [ProductImagesComponent],\r\n  exports: [ProductImagesComponent],\r\n})\r\nexport class ProductImagesModule {}\r\n","import {\r\n  AfterContentChecked,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n} from '@angular/core';\r\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { CurrentProductService } from '../current-product.service';\r\n\r\n@Component({\r\n  selector: 'cx-product-intro',\r\n  templateUrl: './product-intro.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductIntroComponent implements AfterContentChecked {\r\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\r\n\r\n  product$: Observable<Product> = this.currentProductService.getProduct();\r\n\r\n  constructor(\r\n    protected currentProductService: CurrentProductService,\r\n    private translationService: TranslationService,\r\n    protected winRef: WindowRef\r\n  ) {}\r\n\r\n  ngAfterContentChecked() {\r\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\r\n  }\r\n\r\n  // Scroll to views component on page and click \"Reviews\" tab\r\n  showReviews() {\r\n    // Use translated label for Reviews tab reference\r\n    this.translationService\r\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\r\n      .subscribe((reviewsTabLabel) => {\r\n        const tabsComponent = this.getTabsComponent();\r\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\r\n        const reviewsComponent = this.getReviewsComponent();\r\n        if (reviewsTab && reviewsComponent) {\r\n          this.clickTabIfInactive(reviewsTab);\r\n          setTimeout(\r\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\r\n            0\r\n          );\r\n        }\r\n      })\r\n      .unsubscribe();\r\n  }\r\n\r\n  // NOTE: Does not currently exists as its own component\r\n  // but part of tabs component. This is likely to change in refactor.\r\n  private getReviewsComponent(): Element {\r\n    return this.winRef.document.querySelector('cx-product-reviews');\r\n  }\r\n\r\n  // Get Tabs Component if exists on page\r\n  private getTabsComponent(): Element {\r\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\r\n  }\r\n\r\n  // Click to activate tab if not already active\r\n  private clickTabIfInactive(tab: HTMLElement): void {\r\n    if (\r\n      !tab.classList.contains('active') ||\r\n      tab.classList.contains('toggled')\r\n    ) {\r\n      tab.click();\r\n    }\r\n  }\r\n\r\n  // Get Tab by label if exists on page\r\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\r\n    if (tabsComponent) {\r\n      // NOTE: Reads through button tags to click on correct tab\r\n      // There may be a better way of doing this now/after refactor\r\n      const tabElements: HTMLCollectionOf<HTMLElement> = tabsComponent.getElementsByTagName(\r\n        'button'\r\n      );\r\n\r\n      // Look through button tab elements until finding tab with label\r\n      for (const buttonElement of Array.from(tabElements)) {\r\n        if (buttonElement.innerHTML.includes(label)) {\r\n          return buttonElement;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\r\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\r\nimport { ProductIntroComponent } from './product-intro.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, I18nModule, StarRatingModule],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        ProductIntroComponent: {\r\n          component: ProductIntroComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [ProductIntroComponent],\r\n  exports: [ProductIntroComponent],\r\n  entryComponents: [ProductIntroComponent],\r\n})\r\nexport class ProductIntroModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport {\r\n  ActivatedRouterStateSnapshot,\r\n  CurrencyService,\r\n  LanguageService,\r\n  ProductSearchPage,\r\n  ProductSearchService,\r\n  RoutingService,\r\n  SearchConfig,\r\n} from '@spartacus/core';\r\nimport { combineLatest, Observable, Subscription } from 'rxjs';\r\nimport {\r\n  distinctUntilChanged,\r\n  filter,\r\n  pluck,\r\n  shareReplay,\r\n  tap,\r\n} from 'rxjs/operators';\r\n\r\ninterface ProductListRouteParams {\r\n  brandCode?: string;\r\n  categoryCode?: string;\r\n  query?: string;\r\n}\r\n\r\ninterface SearchCriteria {\r\n  currentPage?: number;\r\n  pageSize?: number;\r\n  sortCode?: string;\r\n  query?: string;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ProductListComponentService {\r\n  // TODO: make it configurable\r\n  protected defaultPageSize = 10;\r\n\r\n  protected sub: Subscription;\r\n\r\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\r\n\r\n  constructor(\r\n    protected productSearchService: ProductSearchService,\r\n    protected routing: RoutingService,\r\n    protected activatedRoute: ActivatedRoute,\r\n    protected currencyService: CurrencyService,\r\n    protected languageService: LanguageService,\r\n    protected router: Router\r\n  ) {}\r\n\r\n  private searchResults$: Observable<\r\n    ProductSearchPage\r\n  > = this.productSearchService\r\n    .getResults()\r\n    .pipe(filter((searchResult) => Object.keys(searchResult).length > 0));\r\n\r\n  private searchByRouting$: Observable<\r\n    ActivatedRouterStateSnapshot\r\n  > = combineLatest([\r\n    this.routing.getRouterState().pipe(\r\n      distinctUntilChanged((x, y) => {\r\n        // router emits new value also when the anticipated `nextState` changes\r\n        // but we want to perform search only when current url changes\r\n        return x.state.url === y.state.url;\r\n      })\r\n    ),\r\n    // also trigger search on site context changes\r\n    this.languageService.getActive(),\r\n    this.currencyService.getActive(),\r\n  ]).pipe(\r\n    pluck(0, 'state'),\r\n    tap((state: ActivatedRouterStateSnapshot) => {\r\n      const criteria = this.getCriteriaFromRoute(\r\n        state.params,\r\n        state.queryParams\r\n      );\r\n      this.search(criteria);\r\n    })\r\n  );\r\n\r\n  /**\r\n   * This stream should be used only on the Product Listing Page.\r\n   *\r\n   * It not only emits search results, but also performs a search on every change\r\n   * of the route (i.e. route params or query params).\r\n   *\r\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\r\n   * so no longer the search is performed on route change.\r\n   */\r\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\r\n    this.searchResults$,\r\n    this.searchByRouting$,\r\n  ]).pipe(pluck(0), shareReplay({ bufferSize: 1, refCount: true }));\r\n\r\n  private getCriteriaFromRoute(\r\n    routeParams: ProductListRouteParams,\r\n    queryParams: SearchCriteria\r\n  ): SearchCriteria {\r\n    return {\r\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\r\n      pageSize: queryParams.pageSize || this.defaultPageSize,\r\n      currentPage: queryParams.currentPage,\r\n      sortCode: queryParams.sortCode,\r\n    };\r\n  }\r\n\r\n  private getQueryFromRouteParams({\r\n    brandCode,\r\n    categoryCode,\r\n    query,\r\n  }: ProductListRouteParams) {\r\n    if (query) {\r\n      return query;\r\n    }\r\n    if (categoryCode) {\r\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\r\n    }\r\n    if (brandCode) {\r\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\r\n    }\r\n  }\r\n\r\n  private search(criteria: SearchCriteria): void {\r\n    const query = criteria.query;\r\n    const searchConfig = this.getSearchConfig(criteria);\r\n\r\n    this.productSearchService.search(query, searchConfig);\r\n  }\r\n\r\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\r\n    const result: SearchConfig = {\r\n      currentPage: criteria.currentPage,\r\n      pageSize: criteria.pageSize,\r\n      sortCode: criteria.sortCode,\r\n    };\r\n\r\n    // drop empty keys\r\n    Object.keys(result).forEach((key) => !result[key] && delete result[key]);\r\n\r\n    return result;\r\n  }\r\n\r\n  setQuery(query: string): void {\r\n    this.setQueryParams({ query, currentPage: undefined });\r\n  }\r\n\r\n  viewPage(pageNumber: number): void {\r\n    this.setQueryParams({ currentPage: pageNumber });\r\n  }\r\n\r\n  /**\r\n   * Get items from a given page without using navigation\r\n   */\r\n  getPageItems(pageNumber: number): void {\r\n    this.routing\r\n      .getRouterState()\r\n      .subscribe((route) => {\r\n        const routeCriteria = this.getCriteriaFromRoute(\r\n          route.state.params,\r\n          route.state.queryParams\r\n        );\r\n        const criteria = {\r\n          ...routeCriteria,\r\n          currentPage: pageNumber,\r\n        };\r\n        this.search(criteria);\r\n      })\r\n      .unsubscribe();\r\n  }\r\n\r\n  sort(sortCode: string): void {\r\n    this.setQueryParams({ sortCode });\r\n  }\r\n\r\n  private setQueryParams(queryParams: SearchCriteria): void {\r\n    this.router.navigate([], {\r\n      queryParams,\r\n      queryParamsHandling: 'merge',\r\n      relativeTo: this.activatedRoute,\r\n    });\r\n  }\r\n}\r\n","import { Breadcrumb, Facet } from '@spartacus/core';\r\n\r\n/**\r\n * UI model that holds the full list of facet and active facets for\r\n * the product list.\r\n */\r\nexport interface FacetList {\r\n  facets: Facet[];\r\n  activeFacets?: Breadcrumb[];\r\n}\r\n\r\nexport interface FacetCollapseState {\r\n  /**\r\n   * Indicates whether the facet is toggled to expand or collapse the facet values.\r\n   * Whether the toggle results in an expanded or collapsed state, depends on the\r\n   * experience, which is controlled in CSS.\r\n   */\r\n  toggled?: FacetGroupCollapsedState;\r\n\r\n  /**\r\n   * The top number of facet values that will be visible.\r\n   */\r\n  topVisible?: number;\r\n\r\n  /**\r\n   * The max number of facet values which will be visible. This includes\r\n   * the top visible number.\r\n   */\r\n  maxVisible?: number;\r\n}\r\n\r\nexport enum FacetGroupCollapsedState {\r\n  EXPANDED = 'EXPANDED',\r\n  COLLAPSED = 'COLLAPSED',\r\n}\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { ProductSearchPage } from '@spartacus/core';\r\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\r\nimport { take } from 'rxjs/operators';\r\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\r\nimport { ViewConfig } from '../../../../shared/config/view-config';\r\nimport { ViewModes } from '../product-view/product-view.component';\r\nimport { ProductListComponentService } from './product-list-component.service';\r\n\r\n@Component({\r\n  selector: 'cx-product-list',\r\n  templateUrl: './product-list.component.html',\r\n})\r\nexport class ProductListComponent implements OnInit, OnDestroy {\r\n  private subscription = new Subscription();\r\n\r\n  isInfiniteScroll: boolean;\r\n\r\n  model$: Observable<ProductSearchPage> = this.productListComponentService\r\n    .model$;\r\n\r\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\r\n  ViewModes = ViewModes;\r\n\r\n  constructor(\r\n    private pageLayoutService: PageLayoutService,\r\n    private productListComponentService: ProductListComponentService,\r\n    public scrollConfig: ViewConfig\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\r\n\r\n    this.subscription.add(\r\n      this.pageLayoutService.templateName$\r\n        .pipe(take(1))\r\n        .subscribe((template) => {\r\n          this.viewMode$.next(\r\n            template === 'ProductGridPageTemplate'\r\n              ? ViewModes.Grid\r\n              : ViewModes.List\r\n          );\r\n        })\r\n    );\r\n  }\r\n\r\n  sortList(sortCode: string): void {\r\n    this.productListComponentService.sort(sortCode);\r\n  }\r\n\r\n  setViewMode(mode: ViewModes): void {\r\n    this.viewMode$.next(mode);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n}\r\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\r\nimport { ProductSearchPage } from '@spartacus/core';\r\nimport { ViewModes } from '../../product-view/product-view.component';\r\nimport { Subscription } from 'rxjs';\r\nimport { ProductListComponentService } from '../product-list-component.service';\r\nimport { ViewConfig } from '../../../../../shared/config/view-config';\r\n\r\n@Component({\r\n  selector: 'cx-product-scroll',\r\n  templateUrl: './product-scroll.component.html',\r\n})\r\nexport class ProductScrollComponent implements OnDestroy {\r\n  private subscription = new Subscription();\r\n\r\n  @Input('scrollConfig')\r\n  set setConfig(inputConfig: ViewConfig) {\r\n    this.setComponentConfigurations(inputConfig);\r\n  }\r\n\r\n  model: ProductSearchPage;\r\n  @Input('model')\r\n  set setModel(inputModel: ProductSearchPage) {\r\n    this.infiniteScrollOperations(inputModel);\r\n  }\r\n\r\n  inputViewMode: ViewModes;\r\n  @Input('inputViewMode')\r\n  set setViewMode(inputViewMode: ViewModes) {\r\n    this.inputViewMode = inputViewMode;\r\n    //If viewMode is already set (meaning it is not the first load)\r\n    //Reset the product list\r\n    if (this.viewMode) {\r\n      this.resetListOnViewModeChange();\r\n    } else {\r\n      //If viewMode is not set (meaning it is the first load)\r\n      //Set the viewMode\r\n      this.viewMode = inputViewMode;\r\n    }\r\n  }\r\n\r\n  viewMode: ViewModes;\r\n  productLimit: number;\r\n  maxProducts: number;\r\n\r\n  ViewModes = ViewModes;\r\n  appendProducts = false;\r\n  resetList = false;\r\n  isMaxProducts = false;\r\n  isLastPage = false;\r\n  isEmpty = false;\r\n\r\n  constructor(\r\n    private productListComponentService: ProductListComponentService,\r\n    private ref: ChangeDetectorRef\r\n  ) {}\r\n\r\n  scrollPage(pageNumber: number): void {\r\n    this.appendProducts = true;\r\n    this.ref.markForCheck();\r\n    this.productListComponentService.getPageItems(pageNumber);\r\n  }\r\n\r\n  loadNextPage(pageNumber: number): void {\r\n    this.isMaxProducts = false;\r\n    this.scrollPage(pageNumber);\r\n  }\r\n\r\n  scrollToTop(): void {\r\n    window.scroll(0, 0);\r\n  }\r\n\r\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\r\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\r\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\r\n\r\n    //Display \"show more\" button every time when button configuration is true\r\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\r\n    this.productLimit = isButton ? 1 : configProductLimit;\r\n  }\r\n\r\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\r\n    if (this.appendProducts) {\r\n      this.model = {\r\n        ...inputModel,\r\n        products: this.model.products.concat(inputModel.products),\r\n      };\r\n    } else {\r\n      this.model = inputModel;\r\n      this.maxProducts = this.productLimit;\r\n    }\r\n    this.setConditions();\r\n    this.ref.markForCheck();\r\n  }\r\n\r\n  private resetListOnViewModeChange(): void {\r\n    this.scrollToTop();\r\n    this.resetList = true;\r\n    this.productListComponentService.getPageItems(0);\r\n  }\r\n\r\n  //Set booleans after model has been retrieved\r\n  private setConditions(): void {\r\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\r\n\r\n    this.isLastPage =\r\n      this.model.pagination.currentPage ===\r\n      this.model.pagination.totalPages - 1;\r\n\r\n    this.isMaxProducts =\r\n      this.productLimit &&\r\n      this.productLimit !== 0 &&\r\n      this.model.products.length >= this.maxProducts;\r\n\r\n    //Add the productLimit to the current number of products to determine the next max number of products\r\n    if (this.isMaxProducts) {\r\n      this.maxProducts = this.model.products.length + this.productLimit;\r\n    }\r\n\r\n    //Only change viewMode once the new model is set\r\n    //This prevents flickering issues\r\n    if (this.viewMode !== this.inputViewMode) {\r\n      this.viewMode = this.inputViewMode;\r\n    }\r\n\r\n    this.resetList = false;\r\n    this.appendProducts = false;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Params } from '@angular/router';\r\nimport {\r\n  ActivatedRouterStateSnapshot,\r\n  Breadcrumb,\r\n  PageType,\r\n  ProductSearchPage,\r\n  RoutingService,\r\n} from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map, pluck, switchMap } from 'rxjs/operators';\r\nimport { ProductListComponentService } from '../../container/product-list-component.service';\r\nimport { FacetList } from '../facet.model';\r\n\r\n/**\r\n * Provides access to all the facets and active facets for the Product Listing Page.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductFacetService {\r\n  protected readonly routeState$ = this.routing\r\n    .getRouterState()\r\n    .pipe(pluck('state'));\r\n\r\n  protected readonly searchResult$: Observable<\r\n    ProductSearchPage\r\n  > = this.routeState$.pipe(\r\n    switchMap((state) =>\r\n      this.productListComponentService.model$.pipe(\r\n        filter((page) => this.filterForPage(state, page)),\r\n        map((page) => this.mapResults(state, page))\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    protected routing: RoutingService,\r\n    protected productListComponentService: ProductListComponentService\r\n  ) {}\r\n\r\n  /**\r\n   * Observes the facets and active facets for the given page. The facet data\r\n   * is provided in a `FacetList`.\r\n   */\r\n  readonly facetList$: Observable<FacetList> = this.searchResult$.pipe(\r\n    map(\r\n      (result: ProductSearchPage) =>\r\n        ({\r\n          facets: result.facets,\r\n          activeFacets: result.breadcrumbs,\r\n        } as FacetList)\r\n    )\r\n  );\r\n\r\n  /**\r\n   * Filters the current result by verifying if the result is related to the page.\r\n   * This is done to avoid a combination of the next page and the current search results.\r\n   */\r\n  protected filterForPage(\r\n    state: ActivatedRouterStateSnapshot,\r\n    page: ProductSearchPage\r\n  ): boolean {\r\n    if (state.context.type === PageType.CATEGORY_PAGE) {\r\n      return (\r\n        page.currentQuery?.query?.value?.indexOf(\r\n          `allCategories:${state.context.id}`\r\n        ) > -1\r\n      );\r\n    }\r\n\r\n    if (\r\n      state.context.type === PageType.CONTENT_PAGE &&\r\n      state.context.id === 'search'\r\n    ) {\r\n      return page.currentQuery.query.value.startsWith(`${state.params.query}:`);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private mapResults(\r\n    state: ActivatedRouterStateSnapshot,\r\n    page: ProductSearchPage\r\n  ): ProductSearchPage {\r\n    return {\r\n      ...page,\r\n      breadcrumbs: this.filterBreadcrumbs(page.breadcrumbs, state.params),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * filter breadcrumbs which are not actively selected\r\n   * but coming from the route navigation\r\n   */\r\n  private filterBreadcrumbs(\r\n    breadcrumbs: Breadcrumb[],\r\n    params: Params\r\n  ): Breadcrumb[] {\r\n    return breadcrumbs\r\n      ? breadcrumbs.filter(\r\n          (breadcrumb) => !this.hasBreadcrumb(breadcrumb, params)\r\n        )\r\n      : [];\r\n  }\r\n\r\n  /**\r\n   * Indicates whether the breadcrumb is related to navigation parameters,\r\n   * since either the category or brand code should match those codes.\r\n   */\r\n  private hasBreadcrumb(breadcrumb: Breadcrumb, params: Params): boolean {\r\n    return (\r\n      breadcrumb.facetCode === 'allCategories' &&\r\n      breadcrumb.facetValueCode === params.categoryCode\r\n    );\r\n  }\r\n}\r\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Facet } from '@spartacus/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport {\r\n  FacetCollapseState,\r\n  FacetGroupCollapsedState,\r\n  FacetList,\r\n} from '../facet.model';\r\nimport { ProductFacetService } from './product-facet.service';\r\n\r\n/**\r\n * Provides access to the facets as well as their UI state. The UI state\r\n * represents user related changes on the facets, such as expanding or\r\n * collapsing a facet group or expanding the number of _visible_ facet values.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FacetService {\r\n  /**\r\n   * An internal map where we keep the UI state of the facets.\r\n   */\r\n  protected facetState = new Map<string, BehaviorSubject<FacetCollapseState>>();\r\n\r\n  constructor(protected productFacetService: ProductFacetService) {}\r\n\r\n  /**\r\n   * Observes the facets for the given page and configures the initial UI state.\r\n   *\r\n   * Facets are configured on each emission so that we keep the facet UI state.\r\n   * This is mainly done to keep the state during usage of the facet, but also\r\n   * benefitial when the facets are rebuild while using them.\r\n   */\r\n  facetList$: Observable<FacetList> = this.productFacetService.facetList$.pipe(\r\n    tap((facetList) => {\r\n      facetList.facets.forEach((facet) => this.initialize(facet));\r\n    })\r\n  );\r\n\r\n  /**\r\n   * Returns the observed UI state for the facet.\r\n   *\r\n   * The state is initialized using the `initialize` method.\r\n   */\r\n  getState(facet: Facet): Observable<FacetCollapseState> {\r\n    this.initialize(facet);\r\n    return this.facetState.get(facet.name);\r\n  }\r\n\r\n  /**\r\n   * Returns the UI state for the facet.\r\n   *\r\n   * The state is initialized using the `initialize` method.\r\n   */\r\n  protected getStateSnapshot(facet: Facet): FacetCollapseState {\r\n    return (this.getState(facet) as BehaviorSubject<FacetCollapseState>).value;\r\n  }\r\n\r\n  /**\r\n   * Toggles the facet expanded state. If the expanded state becomes false,\r\n   * the visible values will decrease to the top values only.\r\n   *\r\n   * If the optional value argument is provided the expanded state will be set\r\n   * to this value, regardless of the current `expanded` state.\r\n   */\r\n  toggle(facet: Facet, isExpanded: boolean): void {\r\n    const state = this.getStateSnapshot(facet);\r\n\r\n    const toggledState = {\r\n      toggled: isExpanded\r\n        ? FacetGroupCollapsedState.COLLAPSED\r\n        : FacetGroupCollapsedState.EXPANDED,\r\n    } as FacetCollapseState;\r\n\r\n    if (toggledState.toggled === FacetGroupCollapsedState.COLLAPSED) {\r\n      toggledState.maxVisible = state.topVisible;\r\n    }\r\n\r\n    this.updateState(facet, toggledState);\r\n  }\r\n\r\n  /**\r\n   * Increases the visible values to the maximum values of the facet.\r\n   */\r\n  increaseVisibleValues(facet: Facet): void {\r\n    this.updateState(facet, { maxVisible: facet.values.length });\r\n  }\r\n\r\n  /**\r\n   * Decreases the visible values to the topValueCount.\r\n   *\r\n   * The topValueCount defaults to 6, but can be controlled in\r\n   * the backend as well.\r\n   */\r\n  decreaseVisibleValues(facet: Facet): void {\r\n    this.updateState(facet, { maxVisible: facet.topValueCount });\r\n  }\r\n\r\n  /**\r\n   * Persists the facet state and initializes the default values for the top\r\n   * and max visible values.\r\n   */\r\n  protected initialize(facet: Facet): void {\r\n    if (!this.hasState(facet)) {\r\n      this.facetState.set(\r\n        facet.name,\r\n        new BehaviorSubject({\r\n          topVisible: facet.topValueCount || 0,\r\n          maxVisible: facet.topValueCount || 0,\r\n        } as FacetCollapseState)\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the state of the facet in the local facet map.\r\n   */\r\n  protected updateState(facet: Facet, property: FacetCollapseState): void {\r\n    const state = { ...this.getStateSnapshot(facet), ...property };\r\n    this.facetState.get(facet.name).next(state);\r\n  }\r\n\r\n  protected hasState(facet: Facet): boolean {\r\n    return this.facetState.has(facet.name);\r\n  }\r\n\r\n  getLinkParams(query: string): { [key: string]: string } {\r\n    return {\r\n      // to avoid encoding issues with facets that have space (' ') in their name,\r\n      // we replace the decoded '+' back to empty space ' '.\r\n      // For more, see https://github.com/SAP/spartacus/issues/7348\r\n      query: new HttpUrlEncodingCodec().decodeValue(query).replace(/\\+/g, ' '),\r\n    };\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { Breadcrumb } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\r\nimport { FacetList } from '../facet.model';\r\nimport { FacetService } from '../services/facet.service';\r\n\r\n/**\r\n * Active facets render the applied facet values as a list of focusable buttons\r\n * which can be used to remove the applied facet value.\r\n */\r\n@Component({\r\n  selector: 'cx-active-facets',\r\n  templateUrl: './active-facets.component.html',\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n})\r\nexport class ActiveFacetsComponent {\r\n  /** Active facets which are applied to the product results. */\r\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\r\n\r\n  /** Configurable icon which is used for the active facet close button */\r\n  @Input() closeIcon = ICON_TYPE.CLOSE;\r\n\r\n  constructor(protected facetService: FacetService) {}\r\n\r\n  getLinkParams(facet: Breadcrumb) {\r\n    return this.facetService.getLinkParams(facet.removeQuery?.query?.value);\r\n  }\r\n\r\n  /**\r\n   * The focus key is used to persist the focus on the facet when the DOM is being\r\n   * recreated. We only apply the focus key for the given _active_ facet when there\r\n   * the original facets is not available. This happens for non multi-valued facets.\r\n   *\r\n   * With this approach, the we keep the focus, either at the facet list or on the\r\n   * active facets.\r\n   */\r\n  getFocusKey(facetList: FacetList, facet: Breadcrumb) {\r\n    return facetList.facets?.find((f) =>\r\n      f.values?.find((val) => val.name === facet.facetValueName)\r\n    )\r\n      ? ''\r\n      : facet.facetValueName;\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { I18nModule } from '@spartacus/core';\r\nimport { IconModule } from '../../../../../cms-components/misc/icon/icon.module';\r\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\r\nimport { ActiveFacetsComponent } from './active-facets.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    I18nModule,\r\n    IconModule,\r\n    KeyboardFocusModule,\r\n  ],\r\n  declarations: [ActiveFacetsComponent],\r\n  exports: [ActiveFacetsComponent],\r\n})\r\nexport class ActiveFacetsModule {}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Input,\r\n  Output,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport { Facet } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { FocusConfig } from '../../../../../layout/a11y/keyboard-focus/index';\r\nimport { ICON_TYPE } from '../../../../misc/icon/icon.model';\r\nimport { FacetGroupCollapsedState, FacetList } from '../facet.model';\r\nimport { FacetComponent } from '../facet/facet.component';\r\nimport { FacetService } from '../services/facet.service';\r\n\r\n@Component({\r\n  selector: 'cx-facet-list',\r\n  templateUrl: './facet-list.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FacetListComponent {\r\n  private _isDialog: boolean;\r\n  /**\r\n   * Indicates that the facet navigation is rendered in dialog.\r\n   */\r\n  @Input()\r\n  set isDialog(value: boolean) {\r\n    this._isDialog = value;\r\n    if (value) {\r\n      this.renderer.addClass(document.body, 'modal-open');\r\n    }\r\n  }\r\n\r\n  get isDialog(): boolean {\r\n    return this._isDialog;\r\n  }\r\n\r\n  /** Emits when the list must close */\r\n  @Output() closeList = new EventEmitter();\r\n\r\n  /** The list of all facet and values related to the products in the list */\r\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\r\n\r\n  iconTypes = ICON_TYPE;\r\n\r\n  dialogFocusConfig: FocusConfig = {\r\n    trap: true,\r\n    block: true,\r\n    focusOnEscape: true,\r\n    autofocus: 'cx-facet',\r\n  };\r\n\r\n  @HostListener('click') handleClick() {\r\n    this.close();\r\n  }\r\n\r\n  constructor(\r\n    protected facetService: FacetService,\r\n    protected elementRef: ElementRef,\r\n    protected renderer: Renderer2\r\n  ) {}\r\n\r\n  /**\r\n   * Toggles the facet group in case it is not expanded.\r\n   */\r\n  expandFacetGroup(facet: Facet, ref: FacetComponent) {\r\n    if (!ref.isExpanded) {\r\n      this.facetService.toggle(facet, ref.isExpanded);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Indicates that the facet group has been expanded.\r\n   */\r\n  isExpanded(facet: Facet): Observable<boolean> {\r\n    return this.facetService\r\n      .getState(facet)\r\n      .pipe(\r\n        map((value) => value.toggled === FacetGroupCollapsedState.EXPANDED)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Indicates that the facet group has been collapsed.\r\n   */\r\n  isCollapsed(facet: Facet): Observable<boolean> {\r\n    return this.facetService\r\n      .getState(facet)\r\n      .pipe(\r\n        map((value) => value.toggled === FacetGroupCollapsedState.COLLAPSED)\r\n      );\r\n  }\r\n\r\n  close(event?: boolean): void {\r\n    this.renderer.removeClass(document.body, 'modal-open');\r\n    this.closeList.emit(event);\r\n  }\r\n\r\n  block(event?: MouseEvent) {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  HostBinding,\r\n  Input,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewChildren,\r\n} from '@angular/core';\r\nimport { Facet, FacetValue } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\r\nimport { FocusDirective } from '../../../../../layout/a11y/keyboard-focus/focus.directive';\r\nimport { FacetCollapseState } from '../facet.model';\r\nimport { FacetService } from '../services/facet.service';\r\n\r\n@Component({\r\n  selector: 'cx-facet',\r\n  templateUrl: './facet.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FacetComponent {\r\n  protected _facet: Facet;\r\n\r\n  state$: Observable<FacetCollapseState>;\r\n\r\n  /** configurable icon that is used to collapse the facet group  */\r\n  @Input() expandIcon: ICON_TYPE = ICON_TYPE.EXPAND;\r\n  @Input() collapseIcon: ICON_TYPE = ICON_TYPE.COLLAPSE;\r\n\r\n  @HostBinding('class.multi-select') isMultiSelect: boolean;\r\n\r\n  @ViewChildren('facetValue') values: QueryList<ElementRef<HTMLElement>>;\r\n\r\n  @ViewChild(FocusDirective) keyboardFocus: FocusDirective;\r\n\r\n  @Input()\r\n  set facet(value: Facet) {\r\n    this._facet = value;\r\n    this.isMultiSelect = !!value.multiSelect;\r\n    this.state$ = this.facetService.getState(value);\r\n  }\r\n\r\n  get facet(): Facet {\r\n    return this._facet;\r\n  }\r\n\r\n  constructor(\r\n    protected facetService: FacetService,\r\n    protected elementRef: ElementRef<HTMLElement>,\r\n    protected cd: ChangeDetectorRef\r\n  ) {}\r\n\r\n  /**\r\n   * Handles clicking the heading of the facet group, which means toggling\r\n   * the visibility of the group (collapse / expand) and optionally focusing\r\n   * the group.\r\n   */\r\n  toggleGroup(event: UIEvent) {\r\n    const host: HTMLElement = this.elementRef.nativeElement;\r\n    const isLocked = this.keyboardFocus?.isLocked;\r\n\r\n    this.facetService.toggle(this.facet, this.isExpanded);\r\n\r\n    if (!isLocked || this.isExpanded) {\r\n      host.focus();\r\n      // we stop propagating the event as otherwise the focus on the host will trigger\r\n      // an unlock event from the LockFocus directive.\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  get isExpanded(): boolean {\r\n    return this.values.first.nativeElement.offsetParent !== null;\r\n  }\r\n\r\n  openLink(event: KeyboardEvent) {\r\n    (event.target as HTMLElement).click();\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Increases the number of visible values for the facet. This is delegated\r\n   * to `facetService.increaseVisibleValues`.\r\n   */\r\n  increaseVisibleValues(): void {\r\n    this.facetService.increaseVisibleValues(this.facet);\r\n  }\r\n\r\n  /**\r\n   * Decreases the number of visible values for the facet. This is delegated\r\n   * to `facetService.decreaseVisibleValues`.\r\n   */\r\n  decreaseVisibleValues(): void {\r\n    this.facetService.decreaseVisibleValues(this.facet);\r\n  }\r\n\r\n  getLinkParams(value: FacetValue) {\r\n    return this.facetService.getLinkParams(value.query?.query.value);\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { I18nModule, UrlModule } from '@spartacus/core';\r\nimport { IconModule } from '../../../../../cms-components/misc/icon/index';\r\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\r\nimport { FacetComponent } from './facet.component';\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    UrlModule,\r\n    I18nModule,\r\n    IconModule,\r\n    KeyboardFocusModule,\r\n  ],\r\n  declarations: [FacetComponent],\r\n  exports: [FacetComponent],\r\n})\r\nexport class FacetModule {}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { I18nModule } from '@spartacus/core';\r\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\r\nimport { IconModule } from '../../../../misc/icon/icon.module';\r\nimport { FacetModule } from '../facet/facet.module';\r\nimport { FacetListComponent } from './facet-list.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    I18nModule,\r\n    IconModule,\r\n    FacetModule,\r\n    KeyboardFocusModule,\r\n  ],\r\n  declarations: [FacetListComponent],\r\n  exports: [FacetListComponent],\r\n})\r\nexport class FacetListModule {}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { asapScheduler, BehaviorSubject, interval, Observable, of } from 'rxjs';\r\nimport { delayWhen, observeOn, switchMap } from 'rxjs/operators';\r\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\r\nimport { BreakpointService } from '../../../../layout/breakpoint/breakpoint.service';\r\n\r\n@Component({\r\n  selector: 'cx-product-facet-navigation',\r\n  templateUrl: './product-facet-navigation.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductFacetNavigationComponent {\r\n  iconTypes = ICON_TYPE;\r\n\r\n  /**\r\n   * We delay the removal of DOM so that animations can finish playing before the\r\n   * DOM is removed. Removing the DOM, as hidding is not enough to stop elements\r\n   * to be focused.\r\n   */\r\n  protected CLOSE_DELAY = 300;\r\n\r\n  /**\r\n   * Used to open the facet navigation in a dialog. The usage of the dialog depends\r\n   * on the availability of the trigger element, which is driven by CSS.\r\n   *\r\n   * The reference is also used to refocus the trigger after the dialog is closed.\r\n   */\r\n  @ViewChild('trigger') trigger: ElementRef<HTMLElement>;\r\n\r\n  protected open$ = new BehaviorSubject(false);\r\n\r\n  /**\r\n   * Emits the open state that indicates whether the facet list should be rendered.\r\n   * This is either done instantly, or after the user triggers this by using the trigger\r\n   * button. This driven by the visiibility of the trigger, so that the CSS drives\r\n   * the behaviour. This can differ per breakpoint.\r\n   *\r\n   * There's a configurable delay for the closed state, so that the DOM is not removed\r\n   * before some CSS animations are done.\r\n   */\r\n  isOpen$: Observable<boolean> = this.breakpointService.breakpoint$.pipe(\r\n    // deffer emitting a new value to the next micro-task to ensure that the `hasTrigger`\r\n    // method represents the actual UI state.\r\n    observeOn(asapScheduler),\r\n    switchMap(() => (this.hasTrigger ? this.open$ : of(true))),\r\n    delayWhen((launched) => interval(launched ? 0 : this.CLOSE_DELAY))\r\n  );\r\n\r\n  /**\r\n   * Emits the active state that indicates whether the facet list is activated. Activation\r\n   * is related to the css, so that a animation or transition can visualize opening/closing\r\n   * the list (i.e. dialog).\r\n   */\r\n  isActive$ = this.open$.pipe(\r\n    // deffer emitting a new value to the next micro-task to ensure the active class is\r\n    //  applied after the DOM is created\r\n    observeOn(asapScheduler)\r\n  );\r\n\r\n  constructor(protected breakpointService: BreakpointService) {}\r\n\r\n  launch() {\r\n    this.open$.next(true);\r\n  }\r\n\r\n  close() {\r\n    this.open$.next(false);\r\n    this.trigger.nativeElement.focus();\r\n  }\r\n\r\n  /**\r\n   * Indicates that the facet navigation should be open explicitely by a trigger.\r\n   * This is fully controlled by CSS, where the trigger button can be hidden\r\n   * (display:none) for certain screen sizes.\r\n   */\r\n  get hasTrigger() {\r\n    return this.trigger.nativeElement.offsetParent !== null;\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\r\nimport { IconModule } from '../../../misc/icon/icon.module';\r\nimport { ActiveFacetsModule } from './active-facets/active-facets.module';\r\nimport { FacetListModule } from './facet-list/facet-list.module';\r\nimport { ProductFacetNavigationComponent } from './product-facet-navigation.component';\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FacetListModule,\r\n    ActiveFacetsModule,\r\n    IconModule,\r\n    I18nModule,\r\n    ConfigModule.withConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        ProductRefinementComponent: {\r\n          component: ProductFacetNavigationComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [ProductFacetNavigationComponent],\r\n  exports: [ProductFacetNavigationComponent],\r\n})\r\nexport class ProductFacetNavigationModule {}\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { CurrentProductService } from '../current-product.service';\r\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'cx-product-variants',\r\n  templateUrl: './product-variants.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductVariantsComponent implements OnInit {\r\n  constructor(private currentProductService: CurrentProductService) {}\r\n\r\n  variants: BaseOption[] = [];\r\n  variantType = VariantType;\r\n  product$: Observable<Product>;\r\n\r\n  ngOnInit(): void {\r\n    this.product$ = this.currentProductService.getProduct().pipe(\r\n      filter((product) => !!(product && product.baseOptions)),\r\n      distinctUntilChanged(),\r\n      tap((product) => {\r\n        product.baseOptions.forEach((option) => {\r\n          if (option && option.variantType) {\r\n            this.variants[option.variantType] = option;\r\n          }\r\n        });\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport {\r\n  OccConfig,\r\n  BaseOption,\r\n  VariantQualifier,\r\n  VariantOptionQualifier,\r\n  Product,\r\n  ProductService,\r\n  ProductScope,\r\n  RoutingService,\r\n} from '@spartacus/core';\r\nimport { filter, take } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'cx-variant-style-selector',\r\n  templateUrl: './variant-style-selector.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class VariantStyleSelectorComponent {\r\n  constructor(\r\n    private config: OccConfig,\r\n    private productService: ProductService,\r\n    private routingService: RoutingService\r\n  ) {}\r\n\r\n  variantQualifier = VariantQualifier;\r\n\r\n  @Input()\r\n  variants: BaseOption;\r\n\r\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\r\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.STYLE);\r\n    return obj ? obj.value : '';\r\n  }\r\n\r\n  getVariantThumbnailUrl(\r\n    variantOptionQualifiers: VariantOptionQualifier[]\r\n  ): string {\r\n    const qualifier = variantOptionQualifiers.find((item) => item.image);\r\n    return qualifier\r\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\r\n      : '';\r\n  }\r\n\r\n  changeStyle(code: string): void {\r\n    if (code) {\r\n      this.productService\r\n        .get(code, ProductScope.LIST)\r\n        .pipe(\r\n          // below call might looks redundant but in fact this data is going to be loaded anyways\r\n          // we're just calling it earlier and storing\r\n          filter(Boolean),\r\n          take(1)\r\n        )\r\n        .subscribe((product: Product) => {\r\n          this.routingService.go({\r\n            cxRoute: 'product',\r\n            params: product,\r\n          });\r\n        });\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport {\r\n  Product,\r\n  RoutingService,\r\n  BaseOption,\r\n  VariantQualifier,\r\n  VariantOptionQualifier,\r\n  ProductService,\r\n  ProductScope,\r\n} from '@spartacus/core';\r\nimport { filter, take } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'cx-variant-size-selector',\r\n  templateUrl: './variant-size-selector.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class VariantSizeSelectorComponent {\r\n  constructor(\r\n    private productService: ProductService,\r\n    private routingService: RoutingService\r\n  ) {}\r\n\r\n  @Input()\r\n  product: Product;\r\n\r\n  @Input()\r\n  variants: BaseOption;\r\n\r\n  changeSize(code: string): void {\r\n    if (code) {\r\n      this.productService\r\n        .get(code, ProductScope.LIST)\r\n        .pipe(\r\n          // below call might looks redundant but in fact this data is going to be loaded anyways\r\n          // we're just calling it earlier and storing\r\n          filter(Boolean),\r\n          take(1)\r\n        )\r\n        .subscribe((product: Product) => {\r\n          this.routingService.go({\r\n            cxRoute: 'product',\r\n            params: product,\r\n          });\r\n        });\r\n    }\r\n    return null;\r\n  }\r\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\r\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.SIZE);\r\n    return obj ? obj.value : '';\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport {\r\n  BaseOption,\r\n  Product,\r\n  RoutingService,\r\n  VariantOptionQualifier,\r\n  VariantQualifier,\r\n} from '@spartacus/core';\r\n\r\n@Component({\r\n  selector: 'cx-variant-color-selector',\r\n  templateUrl: './variant-color-selector.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class VariantColorSelectorComponent {\r\n  constructor(private routingService: RoutingService) {}\r\n\r\n  @Input()\r\n  product: Product;\r\n\r\n  @Input()\r\n  variants: BaseOption;\r\n\r\n  changeColor(code: string, name: string): void {\r\n    if (code) {\r\n      this.routingService.go({\r\n        cxRoute: 'product',\r\n        params: { code, name },\r\n      });\r\n    }\r\n    return null;\r\n  }\r\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\r\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.COLOR);\r\n    return obj ? obj.value : '';\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  ChangeDetectionStrategy,\r\n} from '@angular/core';\r\n\r\nimport {\r\n  OccConfig,\r\n  VariantOption,\r\n  VariantOptionQualifier,\r\n  VariantQualifier,\r\n} from '@spartacus/core';\r\n\r\n@Component({\r\n  selector: 'cx-variant-style-icons',\r\n  templateUrl: './variant-style-icons.component.html',\r\n  styleUrls: ['./variant-style-icons.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class VariantStyleIconsComponent implements OnInit {\r\n  constructor(private config: OccConfig) {}\r\n\r\n  @Input()\r\n  variants: VariantOption[];\r\n\r\n  variantNames: { [key: string]: string } = {};\r\n\r\n  ngOnInit() {\r\n    this.variants.forEach((variant) => {\r\n      this.variantNames[variant.code] = this.getVariantName(\r\n        variant.variantOptionQualifiers\r\n      );\r\n    });\r\n  }\r\n\r\n  getVariantThumbnailUrl(\r\n    variantOptionQualifiers: VariantOptionQualifier[]\r\n  ): string {\r\n    const thumbnail = variantOptionQualifiers.find(\r\n      (item) => item.qualifier === VariantQualifier.THUMBNAIL\r\n    );\r\n    return thumbnail\r\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\r\n      : '';\r\n  }\r\n\r\n  private getVariantName(\r\n    variantOptionQualifiers: VariantOptionQualifier[]\r\n  ): string {\r\n    const rollupProperty = variantOptionQualifiers.find(\r\n      (item) => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\r\n    );\r\n    const property = rollupProperty\r\n      ? variantOptionQualifiers.find(\r\n          (item) => item.qualifier === rollupProperty.value\r\n        )\r\n      : null;\r\n    return property ? property.value : '';\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, switchMap, filter, take } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n  VariantOption,\r\n  ProductService,\r\n  Product,\r\n  RoutingService,\r\n  ProductScope,\r\n} from '@spartacus/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductVariantGuard implements CanActivate {\r\n  constructor(\r\n    private productService: ProductService,\r\n    private routingService: RoutingService\r\n  ) {}\r\n\r\n  canActivate(): Observable<boolean | UrlTree> {\r\n    return this.routingService.getRouterState().pipe(\r\n      map((state) => state.nextState.params.productCode),\r\n      switchMap((productCode: string) => {\r\n        // if open pdp from smartedit\r\n        if (!productCode) {\r\n          return of(true);\r\n        }\r\n\r\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\r\n          filter(Boolean),\r\n          map((product: Product) => {\r\n            if (!product.purchasable) {\r\n              const variant = this.findVariant(product.variantOptions);\r\n              // below call might looks redundant but in fact this data is going to be loaded anyways\r\n              // we're just calling it earlier and storing\r\n              this.productService\r\n                .get(variant.code, ProductScope.LIST)\r\n                .pipe(filter(Boolean), take(1))\r\n                .subscribe((_product: Product) => {\r\n                  this.routingService.go({\r\n                    cxRoute: 'product',\r\n                    params: _product,\r\n                  });\r\n                });\r\n              return false;\r\n            } else {\r\n              return true;\r\n            }\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  findVariant(variants: VariantOption[]): VariantOption {\r\n    const results: VariantOption[] = variants.filter((variant) => {\r\n      return variant.stock && variant.stock.stockLevel ? variant : false;\r\n    });\r\n    return !results.length && variants.length ? variants[0] : results[0];\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport {\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport { ProductVariantsComponent } from './product-variants.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\r\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\r\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\r\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\r\nimport { ProductVariantGuard } from './guards/product-variant.guard';\r\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    UrlModule,\r\n    I18nModule,\r\n    VariantStyleSelectorModule,\r\n    VariantSizeSelectorModule,\r\n    VariantColorSelectorModule,\r\n    VariantStyleIconsModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        ProductVariantSelectorComponent: {\r\n          component: ProductVariantsComponent,\r\n          guards: [ProductVariantGuard],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [ProductVariantsComponent],\r\n  entryComponents: [ProductVariantsComponent],\r\n  exports: [VariantStyleIconsComponent],\r\n})\r\nexport class ProductVariantsModule {}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  CmsConfig,\r\n  FeaturesConfigModule,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\r\nimport { ViewConfig } from '../../../shared/config/view-config';\r\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\r\nimport {\r\n  ItemCounterModule,\r\n  ListNavigationModule,\r\n  MediaModule,\r\n  SpinnerModule,\r\n  StarRatingModule,\r\n} from '../../../shared/index';\r\nimport { AddToCartModule } from '../../cart/index';\r\nimport { IconModule } from '../../misc/icon/index';\r\nimport { defaultScrollConfig } from '../config/default-scroll-config';\r\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\r\nimport { ProductListComponent } from './container/product-list.component';\r\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\r\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\r\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\r\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\r\nimport { ProductViewComponent } from './product-view/product-view.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    MediaModule,\r\n    AddToCartModule,\r\n    ItemCounterModule,\r\n    ListNavigationModule,\r\n    UrlModule,\r\n    I18nModule,\r\n    StarRatingModule,\r\n    IconModule,\r\n    SpinnerModule,\r\n    InfiniteScrollModule,\r\n    ViewConfigModule,\r\n    ProductVariantsModule,\r\n    FeaturesConfigModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<ViewConfig>defaultScrollConfig),\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        CMSProductListComponent: {\r\n          component: ProductListComponent,\r\n        },\r\n        ProductGridComponent: {\r\n          component: ProductListComponent,\r\n        },\r\n        SearchResultsListComponent: {\r\n          component: ProductListComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [\r\n    ProductListComponent,\r\n    ProductListItemComponent,\r\n    ProductGridItemComponent,\r\n    ProductViewComponent,\r\n    ProductScrollComponent,\r\n  ],\r\n  exports: [\r\n    ProductListComponent,\r\n    ProductListItemComponent,\r\n    ProductGridItemComponent,\r\n    ProductViewComponent,\r\n    ProductScrollComponent,\r\n  ],\r\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\r\n})\r\nexport class ProductListModule {}\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\r\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\r\nimport { ProductSummaryComponent } from './product-summary.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, OutletModule, I18nModule],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        ProductSummaryComponent: {\r\n          component: ProductSummaryComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [ProductSummaryComponent],\r\n  entryComponents: [ProductSummaryComponent],\r\n  exports: [ProductSummaryComponent],\r\n})\r\nexport class ProductSummaryModule {}\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { Product, ProductScope } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { CurrentProductService } from '../../current-product.service';\r\n\r\n@Component({\r\n  selector: 'cx-product-attributes',\r\n  templateUrl: './product-attributes.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductAttributesComponent {\r\n  product$: Observable<Product> = this.currentProductService.getProduct(\r\n    ProductScope.ATTRIBUTES\r\n  );\r\n\r\n  constructor(protected currentProductService: CurrentProductService) {}\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\r\nimport { ProductAttributesComponent } from './product-attributes.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, I18nModule],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        ProductSpecsTabComponent: {\r\n          component: ProductAttributesComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [ProductAttributesComponent],\r\n  entryComponents: [ProductAttributesComponent],\r\n  exports: [ProductAttributesComponent],\r\n})\r\nexport class ProductAttributesModule {}\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\r\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        ProductDetailsTabComponent: {\r\n          component: ProductDetailsTabComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [ProductDetailsTabComponent],\r\n  entryComponents: [ProductDetailsTabComponent],\r\n  exports: [ProductDetailsTabComponent],\r\n})\r\nexport class ProductDetailsTabModule {}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ViewChild,\r\n  ElementRef,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport {\r\n  distinctUntilChanged,\r\n  filter,\r\n  map,\r\n  switchMap,\r\n  tap,\r\n} from 'rxjs/operators';\r\nimport { CurrentProductService } from '../../current-product.service';\r\nimport { CustomFormValidators } from '../../../../shared/index';\r\n\r\n@Component({\r\n  selector: 'cx-product-reviews',\r\n  templateUrl: './product-reviews.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductReviewsComponent {\r\n  @ViewChild('titleInput', { static: false }) titleInput: ElementRef;\r\n  @ViewChild('writeReviewButton', { static: false })\r\n  writeReviewButton: ElementRef;\r\n\r\n  isWritingReview = false;\r\n\r\n  // TODO: configurable\r\n  initialMaxListItems = 5;\r\n  maxListItems: number;\r\n  reviewForm: FormGroup;\r\n\r\n  product$: Observable<Product> = this.currentProductService.getProduct();\r\n\r\n  reviews$: Observable<Review[]> = this.product$.pipe(\r\n    filter((p) => !!p),\r\n    map((p) => p.code),\r\n    distinctUntilChanged(),\r\n    switchMap((productCode) =>\r\n      this.reviewService.getByProductCode(productCode)\r\n    ),\r\n    tap(() => {\r\n      this.resetReviewForm();\r\n      this.maxListItems = this.initialMaxListItems;\r\n    })\r\n  );\r\n\r\n  constructor(\r\n    protected reviewService: ProductReviewService,\r\n    protected currentProductService: CurrentProductService,\r\n    private fb: FormBuilder,\r\n    protected cd: ChangeDetectorRef\r\n  ) {}\r\n\r\n  initiateWriteReview(): void {\r\n    this.isWritingReview = true;\r\n\r\n    this.cd.detectChanges();\r\n\r\n    if (this.titleInput && this.titleInput.nativeElement) {\r\n      this.titleInput.nativeElement.focus();\r\n    }\r\n  }\r\n\r\n  cancelWriteReview(): void {\r\n    this.isWritingReview = false;\r\n    this.resetReviewForm();\r\n\r\n    this.cd.detectChanges();\r\n\r\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\r\n      this.writeReviewButton.nativeElement.focus();\r\n    }\r\n  }\r\n\r\n  setRating(rating: number): void {\r\n    this.reviewForm.controls.rating.setValue(rating);\r\n  }\r\n\r\n  submitReview(product: Product) {\r\n    if (this.reviewForm.valid) {\r\n      this.addReview(product);\r\n    } else {\r\n      this.reviewForm.markAllAsTouched();\r\n    }\r\n  }\r\n\r\n  addReview(product: Product): void {\r\n    const reviewFormControls = this.reviewForm.controls;\r\n    const review: Review = {\r\n      headline: reviewFormControls.title.value,\r\n      comment: reviewFormControls.comment.value,\r\n      rating: reviewFormControls.rating.value,\r\n      alias: reviewFormControls.reviewerName.value,\r\n    };\r\n\r\n    this.reviewService.add(product.code, review);\r\n\r\n    this.isWritingReview = false;\r\n    this.resetReviewForm();\r\n\r\n    this.cd.detectChanges();\r\n\r\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\r\n      this.writeReviewButton.nativeElement.focus();\r\n    }\r\n  }\r\n\r\n  private resetReviewForm(): void {\r\n    this.reviewForm = this.fb.group({\r\n      title: ['', Validators.required],\r\n      comment: ['', Validators.required],\r\n      rating: [null, CustomFormValidators.starRatingEmpty],\r\n      reviewerName: '',\r\n    });\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\r\nimport { ProductReviewsComponent } from './product-reviews.component';\r\nimport { StarRatingModule, FormErrorsModule } from '../../../../shared/index';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    I18nModule,\r\n    StarRatingModule,\r\n    FormErrorsModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        ProductReviewsTabComponent: {\r\n          component: ProductReviewsComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [ProductReviewsComponent],\r\n  entryComponents: [ProductReviewsComponent],\r\n  exports: [ProductReviewsComponent],\r\n})\r\nexport class ProductReviewsModule {}\r\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\r\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\r\n\r\n@Component({\r\n  selector: 'cx-stock-notification-dialog',\r\n  templateUrl: './stock-notification-dialog.component.html',\r\n})\r\nexport class StockNotificationDialogComponent implements OnDestroy {\r\n  subscribeSuccess$: Observable<boolean>;\r\n  enabledPrefs: NotificationPreference[] = [];\r\n\r\n  constructor(\r\n    private modalService: ModalService,\r\n    private interestsService: UserInterestsService\r\n  ) {}\r\n\r\n  close() {\r\n    this.modalService.dismissActiveModal();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.subscribeSuccess$) {\r\n      this.subscribeSuccess$\r\n        .subscribe((success) => {\r\n          if (success) {\r\n            this.interestsService.resetAddInterestState();\r\n          }\r\n        })\r\n        .unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy,\r\n} from '@angular/core';\r\nimport {\r\n  UserInterestsService,\r\n  UserNotificationPreferenceService,\r\n  AuthService,\r\n  OCC_USER_ID_ANONYMOUS,\r\n  NotificationPreference,\r\n  NotificationType,\r\n  Product,\r\n  GlobalMessageService,\r\n  TranslationService,\r\n  GlobalMessageType,\r\n} from '@spartacus/core';\r\nimport { Observable, Subscription, combineLatest } from 'rxjs';\r\nimport { map, filter, tap, first } from 'rxjs/operators';\r\nimport { CurrentProductService } from '../current-product.service';\r\nimport { ModalService } from '../../../shared/components/modal/modal.service';\r\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\r\n\r\n@Component({\r\n  selector: 'cx-stock-notification',\r\n  templateUrl: './stock-notification.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class StockNotificationComponent implements OnInit, OnDestroy {\r\n  hasProductInterests$: Observable<boolean>;\r\n  prefsEnabled$: Observable<boolean>;\r\n  outOfStock$: Observable<boolean>;\r\n  isRemoveInterestLoading$: Observable<boolean>;\r\n  anonymous = true;\r\n\r\n  private enabledPrefs: NotificationPreference[] = [];\r\n  private productCode: string;\r\n  private subscribeSuccess$: Observable<boolean>;\r\n  private subscriptions = new Subscription();\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private currentProductService: CurrentProductService,\r\n    private globalMessageService: GlobalMessageService,\r\n    private translationService: TranslationService,\r\n    private interestsService: UserInterestsService,\r\n    private modalService: ModalService,\r\n    private notificationPrefService: UserNotificationPreferenceService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.outOfStock$ = combineLatest([\r\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\r\n      this.authService.getOccUserId(),\r\n    ]).pipe(\r\n      tap(([product, userId]: [Product, String]) => {\r\n        this.productCode = product.code;\r\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\r\n          this.anonymous = false;\r\n          this.notificationPrefService.loadPreferences();\r\n          this.interestsService.loadProductInterests(\r\n            null,\r\n            null,\r\n            null,\r\n            product.code,\r\n            NotificationType.BACK_IN_STOCK\r\n          );\r\n        }\r\n      }),\r\n      map(\r\n        ([product]: [Product, String]) =>\r\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\r\n      )\r\n    );\r\n\r\n    this.hasProductInterests$ = this.interestsService\r\n      .getProductInterests()\r\n      .pipe(\r\n        map(\r\n          (interests) => !!interests.results && interests.results.length === 1\r\n        )\r\n      );\r\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\r\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\r\n    this.prefsEnabled$ = this.notificationPrefService\r\n      .getEnabledPreferences()\r\n      .pipe(\r\n        tap((prefs) => (this.enabledPrefs = prefs)),\r\n        map((prefs) => prefs.length > 0)\r\n      );\r\n\r\n    this.subscriptions.add(\r\n      this.interestsService.getAddProductInterestError().subscribe((error) => {\r\n        if (error) {\r\n          this.onInterestAddingError();\r\n        }\r\n      })\r\n    );\r\n    this.subscriptions.add(\r\n      this.interestsService\r\n        .getRemoveProdutInterestSuccess()\r\n        .subscribe((success) => {\r\n          if (success) {\r\n            this.onInterestRemovingSuccess();\r\n          }\r\n        })\r\n    );\r\n  }\r\n\r\n  subscribe() {\r\n    this.openDialog();\r\n    this.interestsService.addProductInterest(\r\n      this.productCode,\r\n      NotificationType.BACK_IN_STOCK\r\n    );\r\n  }\r\n\r\n  unsubscribe() {\r\n    this.interestsService.removeProdutInterest(\r\n      {\r\n        product: {\r\n          code: this.productCode,\r\n        },\r\n        productInterestEntry: [\r\n          {\r\n            interestType: NotificationType.BACK_IN_STOCK,\r\n          },\r\n        ],\r\n      },\r\n      true\r\n    );\r\n  }\r\n\r\n  private onInterestRemovingSuccess() {\r\n    this.subscriptions.add(\r\n      this.translationService\r\n        .translate('stockNotification.unsubscribeSuccess')\r\n        .pipe(first())\r\n        .subscribe((text) =>\r\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\r\n        )\r\n    );\r\n    this.interestsService.resetRemoveInterestState();\r\n  }\r\n\r\n  private onInterestAddingError() {\r\n    this.modalService.dismissActiveModal();\r\n    this.interestsService.resetAddInterestState();\r\n  }\r\n\r\n  private openDialog() {\r\n    const modalInstance = this.modalService.open(\r\n      StockNotificationDialogComponent,\r\n      {\r\n        centered: true,\r\n        size: 'lg',\r\n      }\r\n    ).componentInstance;\r\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\r\n    modalInstance.enabledPrefs = this.enabledPrefs;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.unsubscribe();\r\n    this.interestsService.clearProductInterests();\r\n    this.notificationPrefService.clearPreferences();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { StockNotificationComponent } from './stock-notification.component';\r\nimport {\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\r\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@NgModule({\r\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\r\n  imports: [CommonModule, RouterModule, I18nModule, SpinnerModule, UrlModule],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        StockNotificationComponent: {\r\n          component: StockNotificationComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  entryComponents: [\r\n    StockNotificationComponent,\r\n    StockNotificationDialogComponent,\r\n  ],\r\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\r\n})\r\nexport class StockNotificationModule {}\r\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { StoreFinderService, GeoPoint } from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'cx-store-finder-grid',\r\n  templateUrl: './store-finder-grid.component.html',\r\n})\r\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\r\n  locations$: any;\r\n  isLoading$: Observable<boolean>;\r\n  defaultLocation: GeoPoint;\r\n  country: string;\r\n  region: string;\r\n\r\n  constructor(\r\n    private storeFinderService: StoreFinderService,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\r\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\r\n    this.defaultLocation = {};\r\n\r\n    if (this.route.snapshot.params.country) {\r\n      this.storeFinderService.findStoresAction(\r\n        '',\r\n        {\r\n          pageSize: -1,\r\n        },\r\n        undefined,\r\n        this.route.snapshot.params.country\r\n      );\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {}\r\n}\r\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input, Directive } from '@angular/core';\r\nimport { StoreDataService } from '@spartacus/core';\r\n\r\n// tslint:disable:directive-class-suffix\r\n@Directive()\r\nexport class AbstractStoreItemComponent {\r\n  @Input()\r\n  location;\r\n\r\n  constructor(protected storeDataService: StoreDataService) {}\r\n\r\n  getDirections(location: any): string {\r\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\r\n    const latitude = this.storeDataService.getStoreLatitude(location);\r\n    const longitude = this.storeDataService.getStoreLongitude(location);\r\n    return google_map_url + latitude + ',' + longitude;\r\n  }\r\n\r\n  getFormattedStoreAddress(addressParts: string[]): string {\r\n    return addressParts.filter(Boolean).join(', ');\r\n  }\r\n}\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { StoreDataService } from '@spartacus/core';\r\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\r\n\r\n@Component({\r\n  selector: 'cx-store-finder-list-item',\r\n  templateUrl: './store-finder-list-item.component.html',\r\n})\r\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\r\n  @Input()\r\n  locationIndex: number = null;\r\n  @Input()\r\n  listOrderLabel: any;\r\n  @Input()\r\n  displayDistance: boolean;\r\n  @Input()\r\n  useClickEvent: boolean;\r\n  @Output()\r\n  storeItemClick: EventEmitter<number> = new EventEmitter();\r\n\r\n  constructor(protected storeDataService: StoreDataService) {\r\n    super(storeDataService);\r\n  }\r\n\r\n  handleStoreItemClick() {\r\n    if (this.locationIndex !== null) {\r\n      this.storeItemClick.emit(this.locationIndex);\r\n    }\r\n  }\r\n\r\n  onKey(event: KeyboardEvent) {\r\n    if (event.key === 'Enter') {\r\n      this.handleStoreItemClick();\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  Output,\r\n  SimpleChanges,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { GoogleMapRendererService } from '@spartacus/core';\r\n\r\n@Component({\r\n  selector: 'cx-store-finder-map',\r\n  templateUrl: './store-finder-map.component.html',\r\n})\r\nexport class StoreFinderMapComponent implements OnChanges {\r\n  @ViewChild('mapElement', { static: true })\r\n  mapElement: ElementRef;\r\n  @Input()\r\n  locations: any[];\r\n  @Output()\r\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\r\n\r\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.locations && this.locations) {\r\n      this.renderMap();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the center of the map to the given location\r\n   * @param latitude latitude of the new center\r\n   * @param longitude longitude of the new center\r\n   */\r\n  centerMap(latitude: number, longitude: number): void {\r\n    this.googleMapRendererService.centerMap(latitude, longitude);\r\n  }\r\n\r\n  renderMap(): void {\r\n    this.googleMapRendererService.renderMap(\r\n      this.mapElement.nativeElement,\r\n      this.locations,\r\n      (markerIndex) => {\r\n        this.selectStoreItemClickHandle(markerIndex);\r\n      }\r\n    );\r\n  }\r\n\r\n  private selectStoreItemClickHandle(markerIndex: number) {\r\n    this.selectedStoreItem.emit(markerIndex);\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\r\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\r\nimport { StoreDataService, PointOfService } from '@spartacus/core';\r\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\r\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\r\n\r\n@Component({\r\n  selector: 'cx-store-finder-list',\r\n  templateUrl: './store-finder-list.component.html',\r\n})\r\nexport class StoreFinderListComponent {\r\n  @Input()\r\n  locations: any;\r\n  @Input()\r\n  useMylocation: boolean;\r\n  @ViewChild('storeMap')\r\n  storeMap: StoreFinderMapComponent;\r\n\r\n  selectedStore: PointOfService;\r\n  selectedStoreIndex: number;\r\n  isDetailsModeVisible: boolean;\r\n  storeDetails: PointOfService;\r\n  iconTypes = ICON_TYPE;\r\n\r\n  constructor(\r\n    private storeDataService: StoreDataService,\r\n    @Inject(DOCUMENT) private document: any\r\n  ) {\r\n    this.isDetailsModeVisible = false;\r\n  }\r\n\r\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\r\n    this.showStoreDetails(location);\r\n    this.selectedStoreIndex = index;\r\n    this.selectedStore = location;\r\n    this.storeMap.centerMap(\r\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\r\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\r\n    );\r\n  }\r\n\r\n  selectStoreItemList(index: number): void {\r\n    this.selectedStoreIndex = index;\r\n    const storeListItem = this.document.getElementById('item-' + index);\r\n    storeListItem.scrollIntoView({\r\n      behavior: 'smooth',\r\n      block: 'center',\r\n    });\r\n  }\r\n\r\n  showStoreDetails(location: PointOfService) {\r\n    this.isDetailsModeVisible = true;\r\n    this.storeDetails = location;\r\n  }\r\n\r\n  hideStoreDetails() {\r\n    this.isDetailsModeVisible = false;\r\n    this.selectedStoreIndex = undefined;\r\n    this.selectedStore = undefined;\r\n    this.storeMap.renderMap();\r\n  }\r\n}\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Params } from '@angular/router';\r\nimport {\r\n  GeoPoint,\r\n  SearchConfig,\r\n  StoreFinderSearchQuery,\r\n  StoreFinderService,\r\n  StoreFinderConfig,\r\n} from '@spartacus/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'cx-store-finder-search-result',\r\n  templateUrl: './store-finder-search-result.component.html',\r\n})\r\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\r\n  locations: any;\r\n  subscription: Subscription;\r\n  useMyLocation: boolean;\r\n  countryCode: string = null;\r\n  searchConfig: SearchConfig = {\r\n    currentPage: 0,\r\n  };\r\n  radius: number;\r\n  searchQuery: StoreFinderSearchQuery;\r\n  geolocation: GeoPoint;\r\n  locations$: Observable<any>;\r\n  isLoading$: Observable<any>;\r\n\r\n  constructor(\r\n    private storeFinderService: StoreFinderService,\r\n    private route: ActivatedRoute,\r\n    protected config: StoreFinderConfig\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.subscription = this.route.queryParams.subscribe((params) =>\r\n      this.initialize(params)\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  viewPage(pageNumber: number) {\r\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\r\n    this.storeFinderService.findStoresAction(\r\n      this.searchQuery.queryText,\r\n      this.searchConfig,\r\n      this.geolocation,\r\n      this.countryCode,\r\n      this.useMyLocation,\r\n      this.radius\r\n    );\r\n  }\r\n\r\n  private initialize(params: Params) {\r\n    this.searchQuery = this.parseParameters(params);\r\n    this.useMyLocation = params && params.useMyLocation ? true : false;\r\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\r\n    this.radius = this.config.googleMaps.radius;\r\n    this.storeFinderService.findStoresAction(\r\n      this.searchQuery.queryText,\r\n      this.searchConfig,\r\n      this.geolocation,\r\n      this.countryCode,\r\n      this.useMyLocation,\r\n      this.radius\r\n    );\r\n\r\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\r\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\r\n  }\r\n\r\n  private parseParameters(queryParams: {\r\n    [key: string]: any;\r\n  }): StoreFinderSearchQuery {\r\n    let searchQuery: StoreFinderSearchQuery;\r\n\r\n    if (queryParams.query) {\r\n      searchQuery = { queryText: queryParams.query };\r\n    } else {\r\n      searchQuery = { queryText: '' };\r\n    }\r\n\r\n    searchQuery.useMyLocation =\r\n      queryParams.useMyLocation != null &&\r\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\r\n\r\n    return searchQuery;\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport {\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n  StoreFinderCoreModule,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport { LayoutConfig } from '../../layout/config/layout-config';\r\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\r\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\r\nimport { IconModule } from './../misc/icon/icon.module';\r\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\r\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\r\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\r\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\r\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\r\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\r\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\r\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\r\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\r\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\r\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\r\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\r\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    RouterModule,\r\n    ListNavigationModule,\r\n    NgbTabsetModule,\r\n    SpinnerModule,\r\n    UrlModule,\r\n    StoreFinderCoreModule,\r\n    I18nModule,\r\n    IconModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig | LayoutConfig>{\r\n      cmsComponents: {\r\n        StoreFinderComponent: {\r\n          component: StoreFinderComponent,\r\n          childRoutes: [\r\n            {\r\n              path: 'find',\r\n              component: StoreFinderSearchResultComponent,\r\n            },\r\n            {\r\n              path: 'view-all',\r\n              component: StoreFinderStoresCountComponent,\r\n            },\r\n            {\r\n              path: 'country/:country',\r\n              component: StoreFinderGridComponent,\r\n            },\r\n            {\r\n              path: 'country/:country/region/:region',\r\n              component: StoreFinderGridComponent,\r\n            },\r\n            {\r\n              path: 'country/:country/region/:region/:store',\r\n              component: StoreFinderStoreComponent,\r\n            },\r\n            {\r\n              path: 'country/:country/:store',\r\n              component: StoreFinderStoreComponent,\r\n            },\r\n          ],\r\n        },\r\n      },\r\n      layoutSlots: {\r\n        StoreFinderPageTemplate: {\r\n          slots: ['MiddleContent', 'SideContent'],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [\r\n    StoreFinderSearchComponent,\r\n    StoreFinderListComponent,\r\n    StoreFinderMapComponent,\r\n    StoreFinderListItemComponent,\r\n    StoreFinderStoresCountComponent,\r\n    StoreFinderGridComponent,\r\n    StoreFinderStoreDescriptionComponent,\r\n    ScheduleComponent,\r\n    StoreFinderHeaderComponent,\r\n    StoreFinderSearchResultComponent,\r\n    StoreFinderComponent,\r\n    StoreFinderPaginationDetailsComponent,\r\n    StoreFinderStoreComponent,\r\n  ],\r\n  exports: [\r\n    ScheduleComponent,\r\n    StoreFinderComponent,\r\n    StoreFinderGridComponent,\r\n    StoreFinderHeaderComponent,\r\n    StoreFinderListItemComponent,\r\n    StoreFinderMapComponent,\r\n    StoreFinderPaginationDetailsComponent,\r\n    StoreFinderSearchComponent,\r\n    StoreFinderSearchResultComponent,\r\n    StoreFinderListComponent,\r\n    StoreFinderStoreDescriptionComponent,\r\n    StoreFinderStoresCountComponent,\r\n    StoreFinderStoreComponent,\r\n  ],\r\n  entryComponents: [\r\n    StoreFinderComponent,\r\n    StoreFinderSearchResultComponent,\r\n    StoreFinderStoresCountComponent,\r\n    StoreFinderGridComponent,\r\n    StoreFinderStoreComponent,\r\n  ],\r\n})\r\nexport class StoreFinderModule {}\r\n","import { Component, OnDestroy } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActiveCartService, AuthRedirectService } from '@spartacus/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\r\n\r\n@Component({\r\n  selector: 'cx-checkout-login',\r\n  templateUrl: './checkout-login.component.html',\r\n})\r\nexport class CheckoutLoginComponent implements OnDestroy {\r\n  checkoutLoginForm: FormGroup = this.formBuilder.group(\r\n    {\r\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\r\n      emailConfirmation: ['', [Validators.required]],\r\n    },\r\n    {\r\n      validators: CustomFormValidators.emailsMustMatch(\r\n        'email',\r\n        'emailConfirmation'\r\n      ),\r\n    }\r\n  );\r\n  sub: Subscription;\r\n\r\n  constructor(\r\n    protected formBuilder: FormBuilder,\r\n    protected authRedirectService: AuthRedirectService,\r\n    protected activeCartService: ActiveCartService\r\n  ) {}\r\n\r\n  onSubmit() {\r\n    if (this.checkoutLoginForm.valid) {\r\n      const email = this.checkoutLoginForm.get('email').value;\r\n      this.activeCartService.addEmail(email);\r\n\r\n      if (!this.sub) {\r\n        this.sub = this.activeCartService.getAssignedUser().subscribe(() => {\r\n          if (this.activeCartService.isGuestCart()) {\r\n            this.authRedirectService.redirect();\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      this.checkoutLoginForm.markAllAsTouched();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.sub) {\r\n      this.sub.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\r\nimport { CheckoutLoginComponent } from './checkout-login.component';\r\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\r\nimport { FormErrorsModule } from '../../../shared/index';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    I18nModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    FormErrorsModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        GuestCheckoutLoginComponent: {\r\n          component: CheckoutLoginComponent,\r\n          guards: [NotCheckoutAuthGuard],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [CheckoutLoginComponent],\r\n  exports: [CheckoutLoginComponent],\r\n  entryComponents: [CheckoutLoginComponent],\r\n})\r\nexport class CheckoutLoginModule {}\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport {\r\n  AuthRedirectService,\r\n  AuthService,\r\n  GlobalMessageService,\r\n  GlobalMessageType,\r\n  WindowRef,\r\n} from '@spartacus/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\r\nimport { CustomFormValidators } from '../../../shared/index';\r\n\r\n@Component({\r\n  selector: 'cx-login-form',\r\n  templateUrl: './login-form.component.html',\r\n})\r\nexport class LoginFormComponent implements OnInit, OnDestroy {\r\n  sub: Subscription;\r\n  loginForm: FormGroup;\r\n  loginAsGuest = false;\r\n\r\n  constructor(\r\n    protected auth: AuthService,\r\n    protected globalMessageService: GlobalMessageService,\r\n    protected fb: FormBuilder,\r\n    protected authRedirectService: AuthRedirectService,\r\n    protected winRef: WindowRef,\r\n    protected activatedRoute: ActivatedRoute,\r\n    protected checkoutConfigService: CheckoutConfigService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    const routeState = this.winRef.nativeWindow?.history?.state;\r\n    const prefilledEmail = routeState?.['newUid'];\r\n\r\n    this.loginForm = this.fb.group({\r\n      userId: [\r\n        prefilledEmail?.length ? prefilledEmail : '',\r\n        [Validators.required, CustomFormValidators.emailValidator],\r\n      ],\r\n      password: ['', Validators.required],\r\n    });\r\n\r\n    if (this.checkoutConfigService.isGuestCheckout()) {\r\n      this.loginAsGuest = this.activatedRoute?.snapshot?.queryParams?.[\r\n        'forced'\r\n      ];\r\n    }\r\n  }\r\n\r\n  submitForm(): void {\r\n    if (this.loginForm.valid) {\r\n      this.loginUser();\r\n    } else {\r\n      this.loginForm.markAllAsTouched();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.sub) {\r\n      this.sub.unsubscribe();\r\n    }\r\n  }\r\n\r\n  protected loginUser(): void {\r\n    const { userId, password } = this.loginForm.controls;\r\n    this.auth.authorize(\r\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\r\n      password.value\r\n    );\r\n\r\n    if (!this.sub) {\r\n      this.sub = this.auth.getUserToken().subscribe((data) => {\r\n        if (data && data.access_token) {\r\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\r\n          this.authRedirectService.redirect();\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  CmsConfig,\r\n  I18nModule,\r\n  NotAuthGuard,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport { LoginFormComponent } from './login-form.component';\r\nimport { FormErrorsModule } from '../../../shared/index';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    RouterModule,\r\n    UrlModule,\r\n    I18nModule,\r\n    FormErrorsModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        ReturningCustomerLoginComponent: {\r\n          component: LoginFormComponent,\r\n          guards: [NotAuthGuard],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [LoginFormComponent],\r\n  exports: [LoginFormComponent],\r\n  entryComponents: [LoginFormComponent],\r\n})\r\nexport class LoginFormModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AuthService, User, UserService } from '@spartacus/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'cx-login',\r\n  templateUrl: './login.component.html',\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  user$: Observable<User>;\r\n\r\n  constructor(private auth: AuthService, private userService: UserService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.user$ = this.auth.isUserLoggedIn().pipe(\r\n      switchMap((isUserLoggedIn) => {\r\n        if (isUserLoggedIn) {\r\n          return this.userService.get();\r\n        } else {\r\n          return of(undefined);\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\r\nimport { LoginComponent } from './login.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        LoginComponent: {\r\n          component: LoginComponent,\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [LoginComponent],\r\n  entryComponents: [LoginComponent],\r\n  exports: [LoginComponent],\r\n})\r\nexport class LoginModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate } from '@angular/router';\r\nimport {\r\n  AuthService,\r\n  CmsService,\r\n  PageType,\r\n  ProtectedRoutesService,\r\n  RoutingService,\r\n  SemanticPathService,\r\n} from '@spartacus/core';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n/**\r\n * Guards the _logout_ route.\r\n *\r\n * Takes care of routing the user to a logout page (if available) or redirects to\r\n * the homepage. If the homepage is protected, the user is redirected\r\n * to the login route instead.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LogoutGuard implements CanActivate {\r\n  constructor(\r\n    protected auth: AuthService,\r\n    protected cms: CmsService,\r\n    protected routing: RoutingService,\r\n    protected semanticPathService: SemanticPathService,\r\n    protected protectedRoutes: ProtectedRoutesService\r\n  ) {}\r\n\r\n  canActivate(): Observable<any> {\r\n    this.logout();\r\n\r\n    return this.cms\r\n      .hasPage({\r\n        id: this.semanticPathService.get('logout'),\r\n        type: PageType.CONTENT_PAGE,\r\n      })\r\n      .pipe(\r\n        tap((hasPage) => {\r\n          if (!hasPage) {\r\n            this.redirect();\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Whenever there is no specific \"logout\" page configured in the CMS,\r\n   * we redirect after the user is logged out.\r\n   *\r\n   * The user gets redirected to the homepage, unless the homepage is protected\r\n   * (in case of a closed shop). We'll redirect to the login page instead.\r\n   */\r\n  protected redirect(): void {\r\n    const cxRoute = this.protectedRoutes.shouldProtect ? 'login' : 'home';\r\n    this.routing.go({ cxRoute });\r\n  }\r\n\r\n  /**\r\n   * Log user out.\r\n   *\r\n   * This is delegated to the `AuthService`.\r\n   */\r\n  protected logout(): void {\r\n    this.auth.logout();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport {\r\n  AnonymousConsent,\r\n  AnonymousConsentsConfig,\r\n  AnonymousConsentsService,\r\n  ConsentTemplate,\r\n  GlobalMessageEntities,\r\n  GlobalMessageService,\r\n  GlobalMessageType,\r\n  RoutingService,\r\n  Title,\r\n  UserService,\r\n  UserSignUp,\r\n} from '@spartacus/core';\r\nimport { combineLatest, Observable, Subscription } from 'rxjs';\r\nimport { filter, map, tap } from 'rxjs/operators';\r\nimport { sortTitles, CustomFormValidators } from '../../../shared/index';\r\n\r\n@Component({\r\n  selector: 'cx-register',\r\n  templateUrl: './register.component.html',\r\n})\r\nexport class RegisterComponent implements OnInit, OnDestroy {\r\n  titles$: Observable<Title[]>;\r\n  loading$: Observable<boolean>;\r\n  private subscription = new Subscription();\r\n\r\n  anonymousConsent$: Observable<{\r\n    consent: AnonymousConsent;\r\n    template: string;\r\n  }>;\r\n\r\n  registerForm: FormGroup = this.fb.group(\r\n    {\r\n      titleCode: [''],\r\n      firstName: ['', Validators.required],\r\n      lastName: ['', Validators.required],\r\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\r\n      password: [\r\n        '',\r\n        [Validators.required, CustomFormValidators.passwordValidator],\r\n      ],\r\n      passwordconf: ['', Validators.required],\r\n      newsletter: new FormControl({\r\n        value: false,\r\n        disabled: this.isConsentRequired(),\r\n      }),\r\n      termsandconditions: [false, Validators.requiredTrue],\r\n    },\r\n    {\r\n      validators: CustomFormValidators.passwordsMustMatch(\r\n        'password',\r\n        'passwordconf'\r\n      ),\r\n    }\r\n  );\r\n\r\n  constructor(\r\n    protected userService: UserService,\r\n    protected globalMessageService: GlobalMessageService,\r\n    protected fb: FormBuilder,\r\n    protected router: RoutingService,\r\n    protected anonymousConsentsService: AnonymousConsentsService,\r\n    protected anonymousConsentsConfig: AnonymousConsentsConfig\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.titles$ = this.userService.getTitles().pipe(\r\n      tap((titles) => {\r\n        if (Object.keys(titles).length === 0) {\r\n          this.userService.loadTitles();\r\n        }\r\n      }),\r\n      map((titles) => {\r\n        return titles.sort(sortTitles);\r\n      })\r\n    );\r\n\r\n    this.loading$ = this.userService.getRegisterUserResultLoading();\r\n    this.registerUserProcessInit();\r\n\r\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\r\n    this.subscription.add(\r\n      this.globalMessageService\r\n        .get()\r\n        .pipe(filter((messages) => !!Object.keys(messages).length))\r\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\r\n          const messages =\r\n            globalMessageEntities &&\r\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\r\n\r\n          if (\r\n            messages &&\r\n            messages.some((message) => message === 'This field is required.')\r\n          ) {\r\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\r\n            this.globalMessageService.add(\r\n              { key: 'register.titleRequired' },\r\n              GlobalMessageType.MSG_TYPE_ERROR\r\n            );\r\n          }\r\n        })\r\n    );\r\n\r\n    const { registerConsent } = this.anonymousConsentsConfig?.anonymousConsents;\r\n\r\n    this.anonymousConsent$ = combineLatest([\r\n      this.anonymousConsentsService.getConsent(registerConsent),\r\n      this.anonymousConsentsService.getTemplate(registerConsent),\r\n    ]).pipe(\r\n      map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\r\n        return {\r\n          consent,\r\n          template: template ? template.description : '',\r\n        };\r\n      })\r\n    );\r\n\r\n    this.subscription.add(\r\n      this.registerForm.get('newsletter').valueChanges.subscribe(() => {\r\n        this.toggleAnonymousConsent();\r\n      })\r\n    );\r\n  }\r\n\r\n  submitForm(): void {\r\n    if (this.registerForm.valid) {\r\n      this.registerUser();\r\n    } else {\r\n      this.registerForm.markAllAsTouched();\r\n    }\r\n  }\r\n\r\n  registerUser(): void {\r\n    this.userService.register(\r\n      this.collectDataFromRegisterForm(this.registerForm.value)\r\n    );\r\n  }\r\n\r\n  titleSelected(title: Title): void {\r\n    this.registerForm['controls'].titleCode.setValue(title.code);\r\n  }\r\n\r\n  collectDataFromRegisterForm(formData: any): UserSignUp {\r\n    const { firstName, lastName, email, password, titleCode } = formData;\r\n\r\n    return {\r\n      firstName,\r\n      lastName,\r\n      uid: email.toLowerCase(),\r\n      password,\r\n      titleCode,\r\n    };\r\n  }\r\n\r\n  isConsentGiven(consent: AnonymousConsent): boolean {\r\n    return this.anonymousConsentsService.isConsentGiven(consent);\r\n  }\r\n\r\n  private isConsentRequired(): boolean {\r\n    const {\r\n      requiredConsents,\r\n      registerConsent,\r\n    } = this.anonymousConsentsConfig?.anonymousConsents;\r\n\r\n    if (requiredConsents && registerConsent) {\r\n      return requiredConsents.includes(registerConsent);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private onRegisterUserSuccess(success: boolean): void {\r\n    if (success) {\r\n      this.router.go('login');\r\n      this.globalMessageService.add(\r\n        { key: 'register.postRegisterMessage' },\r\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\r\n      );\r\n    }\r\n  }\r\n\r\n  toggleAnonymousConsent(): void {\r\n    const { registerConsent } = this.anonymousConsentsConfig.anonymousConsents;\r\n\r\n    if (Boolean(this.registerForm.get('newsletter').value)) {\r\n      this.anonymousConsentsService.giveConsent(registerConsent);\r\n    } else {\r\n      this.anonymousConsentsService.withdrawConsent(registerConsent);\r\n    }\r\n  }\r\n\r\n  private registerUserProcessInit(): void {\r\n    this.userService.resetRegisterUserProcessState();\r\n    this.subscription.add(\r\n      this.userService.getRegisterUserResultSuccess().subscribe((success) => {\r\n        this.onRegisterUserSuccess(success);\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe();\r\n    this.userService.resetRegisterUserProcessState();\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  CmsConfig,\r\n  I18nModule,\r\n  NotAuthGuard,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport { SpinnerModule, FormErrorsModule } from '../../../shared/index';\r\nimport { LoginModule } from '../login/login.module';\r\nimport { RegisterComponent } from './register.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    LoginModule,\r\n    ReactiveFormsModule,\r\n    RouterModule,\r\n    UrlModule,\r\n    I18nModule,\r\n    SpinnerModule,\r\n    FormErrorsModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        RegisterCustomerComponent: {\r\n          component: RegisterComponent,\r\n          guards: [NotAuthGuard],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [RegisterComponent],\r\n  exports: [RegisterComponent],\r\n  entryComponents: [RegisterComponent],\r\n})\r\nexport class RegisterComponentModule {}\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  AuthGuard,\r\n  CmsConfig,\r\n  I18nModule,\r\n  provideDefaultConfig,\r\n  UrlModule,\r\n} from '@spartacus/core';\r\nimport {\r\n  ItemCounterModule,\r\n  MediaModule,\r\n  StarRatingModule,\r\n} from '../../shared/index';\r\nimport { AddToCartModule } from '../cart/index';\r\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\r\nimport { WishListComponent } from './components/wish-list/wish-list.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    AddToCartModule,\r\n    CommonModule,\r\n    I18nModule,\r\n    MediaModule,\r\n    RouterModule,\r\n    StarRatingModule,\r\n    UrlModule,\r\n    ItemCounterModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<CmsConfig>{\r\n      cmsComponents: {\r\n        WishListComponent: {\r\n          component: WishListComponent,\r\n          guards: [AuthGuard],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  declarations: [WishListComponent, WishListItemComponent],\r\n  entryComponents: [WishListComponent],\r\n  exports: [WishListComponent, WishListItemComponent],\r\n})\r\nexport class WishListModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { HamburgerMenuModule } from '../layout/index';\r\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\r\nimport { AsmModule } from './asm/asm.module';\r\nimport { CartComponentModule } from './cart/cart.module';\r\nimport { CheckoutComponentModule } from './checkout/checkout.module';\r\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\r\nimport {\r\n  BannerModule,\r\n  CmsParagraphModule,\r\n  LinkModule,\r\n  TabParagraphContainerModule,\r\n} from './content/index';\r\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\r\nimport {\r\n  AddressBookModule,\r\n  CloseAccountModule,\r\n  ConsentManagementModule,\r\n  ForgotPasswordModule,\r\n  MyCouponsModule,\r\n  MyInterestsModule,\r\n  NotificationPreferenceModule,\r\n  OrderCancellationModule,\r\n  OrderDetailsModule,\r\n  OrderHistoryModule,\r\n  OrderReturnModule,\r\n  PaymentMethodsModule,\r\n  ResetPasswordModule,\r\n  ReturnRequestDetailModule,\r\n  ReturnRequestListModule,\r\n  UpdateEmailModule,\r\n  UpdatePasswordModule,\r\n  UpdateProfileModule,\r\n} from './myaccount/index';\r\nimport {\r\n  BreadcrumbModule,\r\n  CategoryNavigationModule,\r\n  FooterNavigationModule,\r\n  NavigationModule,\r\n  SearchBoxModule,\r\n} from './navigation/index';\r\nimport { OrderConfirmationModule } from './order-confirmation/index';\r\nimport {\r\n  ProductCarouselModule,\r\n  ProductFacetNavigationModule,\r\n  ProductIntroModule,\r\n  ProductListModule,\r\n  ProductReferencesModule,\r\n  ProductTabsModule,\r\n  StockNotificationModule,\r\n} from './product/index';\r\nimport { ProductImagesModule } from './product/product-images/product-images.module';\r\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\r\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\r\nimport { StoreFinderModule } from './storefinder/store-finder.module';\r\nimport { UserComponentModule } from './user/user.module';\r\nimport { WishListModule } from './wish-list/wish-list.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    AnonymousConsentManagementBannerModule,\r\n    AsmModule,\r\n    HamburgerMenuModule,\r\n    CmsParagraphModule,\r\n    LinkModule,\r\n    BannerModule,\r\n    CategoryNavigationModule,\r\n    NavigationModule,\r\n    FooterNavigationModule,\r\n    BreadcrumbModule,\r\n    SearchBoxModule,\r\n    SiteContextSelectorModule,\r\n    QualtricsModule,\r\n    AddressBookModule,\r\n    OrderHistoryModule,\r\n    OrderCancellationModule,\r\n    OrderReturnModule,\r\n    ReturnRequestListModule,\r\n    ReturnRequestDetailModule,\r\n    ProductListModule,\r\n    ProductFacetNavigationModule,\r\n    ProductTabsModule,\r\n    ProductCarouselModule,\r\n    ProductReferencesModule,\r\n    OrderDetailsModule,\r\n    PaymentMethodsModule,\r\n    UpdateEmailModule,\r\n    UpdatePasswordModule,\r\n    UpdateProfileModule,\r\n    ConsentManagementModule,\r\n    CloseAccountModule,\r\n    CartComponentModule,\r\n    TabParagraphContainerModule,\r\n    OrderConfirmationModule,\r\n    StoreFinderModule,\r\n    ProductImagesModule,\r\n    ProductSummaryModule,\r\n    ProductVariantsModule,\r\n    ProductIntroModule,\r\n    CheckoutComponentModule,\r\n    ForgotPasswordModule,\r\n    ResetPasswordModule,\r\n    BannerCarouselModule,\r\n    UserComponentModule,\r\n    MyCouponsModule,\r\n    WishListModule,\r\n    NotificationPreferenceModule,\r\n    MyInterestsModule,\r\n    StockNotificationModule,\r\n  ],\r\n})\r\nexport class CmsLibModule {}\r\n","import { inject, InjectionToken } from '@angular/core';\r\nimport { Route } from '@angular/router';\r\nimport {\r\n  DEFAULT_URL_MATCHER,\r\n  UrlMatcherFactory,\r\n  UrlMatcherService,\r\n} from '@spartacus/core';\r\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\r\n\r\nexport function getProductDetailsUrlMatcherFactory(\r\n  service: UrlMatcherService,\r\n  defaultMatcherFactory: UrlMatcherFactory\r\n): UrlMatcherFactory {\r\n  const factory = (route: Route) => {\r\n    const defaultMatcher = defaultMatcherFactory(route);\r\n    const suffixPDPMatcher = getSuffixUrlMatcher({\r\n      marker: 'p',\r\n      paramName: 'productCode',\r\n    });\r\n    return service.getCombined([defaultMatcher, suffixPDPMatcher]);\r\n  };\r\n  return factory;\r\n}\r\n\r\n/**\r\n * Injection token with url matcher factory for PDP.\r\n * The provided url matcher matches both:\r\n * - the configured `paths` from routing config and\r\n * - custom pattern  `** / p / :productCode`\r\n *\r\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\r\n * or additional matchers can be added for a specific route.\r\n *\r\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\r\n */\r\nexport const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken<\r\n  UrlMatcherFactory\r\n>('PRODUCT_DETAILS_URL_MATCHER', {\r\n  providedIn: 'root',\r\n  factory: () =>\r\n    getProductDetailsUrlMatcherFactory(\r\n      inject(UrlMatcherService),\r\n      inject(DEFAULT_URL_MATCHER)\r\n    ),\r\n});\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\r\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\r\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\r\nimport { PRODUCT_DETAILS_URL_MATCHER } from './product-details-url-matcher';\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forChild([\r\n      {\r\n        path: null,\r\n        canActivate: [CmsPageGuard],\r\n        component: PageLayoutComponent,\r\n        data: { cxRoute: 'product' },\r\n      },\r\n    ]),\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<RoutingConfig>{\r\n      routing: {\r\n        routes: {\r\n          product: {\r\n            matchers: [PRODUCT_DETAILS_URL_MATCHER],\r\n          },\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n})\r\nexport class ProductDetailsPageModule {}\r\n","import { inject, InjectionToken } from '@angular/core';\r\nimport { Route } from '@angular/router';\r\nimport {\r\n  DEFAULT_URL_MATCHER,\r\n  UrlMatcherFactory,\r\n  UrlMatcherService,\r\n} from '@spartacus/core';\r\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\r\n\r\nexport function getProductListingUrlMatcherFactory(\r\n  service: UrlMatcherService,\r\n  defaultMatcherFactory: UrlMatcherFactory\r\n): UrlMatcherFactory {\r\n  const factory = (route: Route) => {\r\n    const defaultMatcher = defaultMatcherFactory(route);\r\n    const suffixPLPMatcher = getSuffixUrlMatcher({\r\n      marker: 'c',\r\n      paramName: 'categoryCode',\r\n    });\r\n    return service.getCombined([defaultMatcher, suffixPLPMatcher]);\r\n  };\r\n  return factory;\r\n}\r\n\r\n/**\r\n * Injection token with url matcher factory for PLP.\r\n * The provided url matcher matches both:\r\n * - the configured `paths` from routing config and\r\n * - custom pattern  `** / c / :categoryCode`\r\n *\r\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\r\n * or additional matchers can be added for a specific route.\r\n *\r\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\r\n */\r\nexport const PRODUCT_LISTING_URL_MATCHER = new InjectionToken<\r\n  UrlMatcherFactory\r\n>('PRODUCT_LISTING_URL_MATCHER', {\r\n  providedIn: 'root',\r\n  factory: () =>\r\n    getProductListingUrlMatcherFactory(\r\n      inject(UrlMatcherService),\r\n      inject(DEFAULT_URL_MATCHER)\r\n    ),\r\n});\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\r\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\r\nimport { PRODUCT_LISTING_URL_MATCHER } from './product-listing-url-matcher';\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forChild([\r\n      {\r\n        path: null,\r\n        canActivate: [CmsPageGuard],\r\n        component: PageLayoutComponent,\r\n        data: { pageLabel: 'search', cxRoute: 'search' },\r\n      },\r\n      {\r\n        path: null,\r\n        canActivate: [CmsPageGuard],\r\n        component: PageLayoutComponent,\r\n        data: { cxRoute: 'brand' },\r\n      },\r\n      {\r\n        // The 'category' route  may include a greedy suffix url matcher '**/c/:categoryCode'\r\n        // So not to shadow the specific 'brand' route, the 'category' is the last route in the sequence.\r\n        path: null,\r\n        canActivate: [CmsPageGuard],\r\n        component: PageLayoutComponent,\r\n        data: { cxRoute: 'category' },\r\n      },\r\n    ]),\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig(<RoutingConfig>{\r\n      routing: {\r\n        routes: {\r\n          category: {\r\n            matchers: [PRODUCT_LISTING_URL_MATCHER],\r\n          },\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n})\r\nexport class ProductListingPageModule {}\r\n","import { LayoutConfig } from '../../layout/config/layout-config';\r\n\r\nexport const b2cLayoutConfig: LayoutConfig = {\r\n  // deferredLoading: {\r\n  //   strategy: DeferLoadingStrategy.DEFER,\r\n  //   intersectionMargin: '50px',\r\n  // },\r\n  layoutSlots: {\r\n    header: {\r\n      lg: {\r\n        slots: [\r\n          'SiteContext',\r\n          'SiteLinks',\r\n          'SiteLogo',\r\n          'SearchBox',\r\n          'SiteLogin',\r\n          'MiniCart',\r\n          'NavigationBar',\r\n        ],\r\n      },\r\n      slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\r\n    },\r\n    navigation: {\r\n      lg: { slots: [] },\r\n      slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\r\n    },\r\n    footer: {\r\n      slots: ['Footer'],\r\n    },\r\n    LandingPage2Template: {\r\n      pageFold: 'Section2B',\r\n      slots: [\r\n        'Section1',\r\n        'Section2A',\r\n        'Section2B',\r\n        'Section2C',\r\n        'Section3',\r\n        'Section4',\r\n        'Section5',\r\n      ],\r\n    },\r\n\r\n    ContentPage1Template: {\r\n      slots: ['Section2A', 'Section2B'],\r\n    },\r\n    CategoryPageTemplate: {\r\n      pageFold: 'Section2',\r\n      slots: ['Section1', 'Section2', 'Section3'],\r\n    },\r\n    ProductListPageTemplate: {\r\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\r\n    },\r\n    ProductGridPageTemplate: {\r\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\r\n    },\r\n    SearchResultsListPageTemplate: {\r\n      slots: [\r\n        'Section2',\r\n        'ProductLeftRefinements',\r\n        'SearchResultsListSlot',\r\n        'Section4',\r\n      ],\r\n    },\r\n    SearchResultsGridPageTemplate: {\r\n      slots: [\r\n        'Section2',\r\n        'ProductLeftRefinements',\r\n        'SearchResultsGridSlot',\r\n        'Section4',\r\n      ],\r\n    },\r\n    ProductDetailsPageTemplate: {\r\n      lg: {\r\n        pageFold: 'UpSelling',\r\n      },\r\n\r\n      pageFold: 'Summary',\r\n\r\n      slots: [\r\n        'Summary',\r\n        'UpSelling',\r\n        'CrossSelling',\r\n        'Tabs',\r\n        'PlaceholderContentSlot',\r\n      ],\r\n    },\r\n    CartPageTemplate: {\r\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\r\n    },\r\n    AccountPageTemplate: {\r\n      slots: ['BodyContent', 'SideContent'],\r\n    },\r\n    LoginPageTemplate: {\r\n      slots: ['LeftContentSlot', 'RightContentSlot'],\r\n    },\r\n    ErrorPageTemplate: {\r\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\r\n    },\r\n    OrderConfirmationPageTemplate: {\r\n      slots: ['BodyContent', 'SideContent'],\r\n    },\r\n    MultiStepCheckoutSummaryPageTemplate: {\r\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\r\n    },\r\n    CheckoutLoginPageTemplate: {\r\n      slots: ['RightContentSlot'],\r\n    },\r\n  },\r\n};\r\n","import { MediaConfig } from '../../shared/components/media/media.config';\r\n\r\nexport const mediaConfig: MediaConfig = {\r\n  mediaFormats: {\r\n    mobile: {\r\n      width: 400,\r\n    },\r\n    tablet: {\r\n      width: 770,\r\n    },\r\n    desktop: {\r\n      width: 1140,\r\n    },\r\n    widescreen: {\r\n      width: 1400,\r\n    },\r\n    // product media\r\n    cartIcon: {\r\n      width: 65,\r\n    },\r\n    thumbnail: {\r\n      width: 96,\r\n    },\r\n    product: {\r\n      width: 284,\r\n    },\r\n    zoom: {\r\n      width: 515,\r\n    },\r\n  },\r\n};\r\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { NgModule } from '@angular/core';\r\nimport {\r\n  AnonymousConsentsModule,\r\n  AuthModule,\r\n  CartModule,\r\n  CheckoutModule,\r\n  CmsModule,\r\n  ConfigInitializerModule,\r\n  ConfigModule,\r\n  ConfigValidatorModule,\r\n  FeaturesConfigModule,\r\n  GlobalMessageModule,\r\n  I18nModule,\r\n  ProcessModule,\r\n  ProductModule,\r\n  provideConfigFromMetaTags,\r\n  StateModule,\r\n  UserModule,\r\n} from '@spartacus/core';\r\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\r\nimport { LayoutModule } from '../layout/layout.module';\r\nimport { MediaModule } from '../shared/components/media/media.module';\r\nimport { ViewConfigModule } from '../shared/config/view-config.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    StateModule.forRoot(),\r\n    AuthModule.forRoot(),\r\n    AnonymousConsentsModule.forRoot(),\r\n    ConfigModule.forRoot(),\r\n    ConfigInitializerModule.forRoot(),\r\n    ConfigValidatorModule.forRoot(),\r\n    RoutingModule.forRoot(),\r\n    I18nModule.forRoot(),\r\n    CmsModule.forRoot(),\r\n    GlobalMessageModule.forRoot(),\r\n    ProcessModule.forRoot(),\r\n    CartModule.forRoot(),\r\n    CheckoutModule.forRoot(),\r\n    UserModule.forRoot(),\r\n    ProductModule.forRoot(),\r\n    ViewConfigModule.forRoot(),\r\n    FeaturesConfigModule.forRoot('2.0'),\r\n    LayoutModule,\r\n    MediaModule.forRoot(),\r\n  ],\r\n  exports: [LayoutModule],\r\n  providers: [...provideConfigFromMetaTags()],\r\n})\r\nexport class StorefrontFoundationModule {}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport {\r\n  ExternalRoutesModule,\r\n  OccModule,\r\n  PersonalizationModule,\r\n  provideConfig,\r\n  SiteContextModule,\r\n  SmartEditModule,\r\n} from '@spartacus/core';\r\nimport { AsmModule } from '../cms-components/asm/asm.module';\r\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\r\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\r\nimport { MainModule } from '../layout/main/main.module';\r\nimport { StorefrontConfig } from '../storefront-config';\r\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forRoot([], {\r\n      scrollPositionRestoration: 'enabled',\r\n      anchorScrolling: 'enabled',\r\n    }),\r\n\r\n    StoreModule.forRoot({}),\r\n    EffectsModule.forRoot([]),\r\n\r\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\r\n    // since we might have conflicting interceptor logic. See #5461.\r\n    AsmModule,\r\n\r\n    StorefrontFoundationModule,\r\n    MainModule,\r\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\r\n\r\n    SmartEditModule.forRoot(), // should be custom\r\n    PersonalizationModule.forRoot(), // should be custom\r\n\r\n    // opt-in explicitly\r\n    OccModule.forRoot(),\r\n    ProductDetailsPageModule,\r\n    ProductListingPageModule,\r\n    ExternalRoutesModule.forRoot(),\r\n  ],\r\n  exports: [MainModule, StorefrontFoundationModule],\r\n})\r\nexport class StorefrontModule {\r\n  static withConfig(\r\n    config?: StorefrontConfig\r\n  ): ModuleWithProviders<StorefrontModule> {\r\n    return {\r\n      ngModule: StorefrontModule,\r\n      providers: [provideConfig(config)],\r\n    };\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport {\r\n  provideConfig,\r\n  provideDefaultConfig,\r\n  provideDefaultConfigFactory,\r\n} from '@spartacus/core';\r\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\r\nimport { StorefrontConfig } from '../storefront-config';\r\nimport { b2cLayoutConfig, mediaConfig } from './config/index';\r\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\r\nimport { StorefrontModule } from './storefront.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    StorefrontModule,\r\n\r\n    // the cms lib module contains all components that added in the bundle\r\n    CmsLibModule,\r\n  ],\r\n  providers: [\r\n    provideDefaultConfig({\r\n      pwa: {\r\n        enabled: true,\r\n        addToHomeScreen: true,\r\n      },\r\n    }),\r\n    provideDefaultConfig(b2cLayoutConfig),\r\n    provideDefaultConfig(mediaConfig),\r\n    provideDefaultConfigFactory(defaultCmsContentConfig),\r\n  ],\r\n  exports: [StorefrontModule],\r\n})\r\nexport class B2cStorefrontModule {\r\n  static withConfig(\r\n    config?: StorefrontConfig\r\n  ): ModuleWithProviders<B2cStorefrontModule> {\r\n    return {\r\n      ngModule: B2cStorefrontModule,\r\n      providers: [provideConfig(config)],\r\n    };\r\n  }\r\n}\r\n"]}