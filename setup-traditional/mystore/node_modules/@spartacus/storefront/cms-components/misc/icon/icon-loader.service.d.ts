import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { WindowRef } from '@spartacus/core';
import { IconConfig, ICON_TYPE } from './icon.model';
import * as ɵngcc0 from '@angular/core';
export declare class IconLoaderService {
    protected winRef: WindowRef;
    protected iconConfig: IconConfig;
    protected sanitizer: DomSanitizer;
    private loadedResources;
    constructor(winRef: WindowRef, iconConfig: IconConfig, sanitizer: DomSanitizer);
    /**
     * Returns an html fragment which can be added to the DOM in a safe way.
     */
    getHtml(type: ICON_TYPE | string): SafeHtml;
    /**
     *
     * Returns the symbol class(es) for the icon type.
     */
    getStyleClasses(iconType: ICON_TYPE | string): string;
    /**
     * Indicates whether the given `ICON_TYPE` is configured for
     * the given `IconResourceType`.
     */
    private isResourceType;
    /**
     * Returns the path to the svg link. The link supports path names
     * as well, if the config a[[s been setup to support a svg file path.
     * Additionally, the icon prefix will be taken into account to prefix the
     * icon IDs in the SVG.
     */
    private getSvgPath;
    /**
     * Loads the resource url (if any) for the given icon.
     * The icon will only be loaded once.
     *
     * NOTE: this is not working when the shadow is used as there's
     * no head element available and the link must be loaded for every
     * web component.
     */
    addLinkResource(iconType: ICON_TYPE | string): void;
    private findResource;
    getSymbol(iconType: ICON_TYPE | string): string;
    private get config();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IconLoaderService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi1sb2FkZXIuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJpY29uLWxvYWRlci5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZUh0bWwgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuaW1wb3J0IHsgV2luZG93UmVmIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcclxuaW1wb3J0IHsgSWNvbkNvbmZpZywgSUNPTl9UWVBFIH0gZnJvbSAnLi9pY29uLm1vZGVsJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWNvbkxvYWRlclNlcnZpY2Uge1xyXG4gICAgcHJvdGVjdGVkIHdpblJlZjogV2luZG93UmVmO1xyXG4gICAgcHJvdGVjdGVkIGljb25Db25maWc6IEljb25Db25maWc7XHJcbiAgICBwcm90ZWN0ZWQgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXI7XHJcbiAgICBwcml2YXRlIGxvYWRlZFJlc291cmNlcztcclxuICAgIGNvbnN0cnVjdG9yKHdpblJlZjogV2luZG93UmVmLCBpY29uQ29uZmlnOiBJY29uQ29uZmlnLCBzYW5pdGl6ZXI6IERvbVNhbml0aXplcik7XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYW4gaHRtbCBmcmFnbWVudCB3aGljaCBjYW4gYmUgYWRkZWQgdG8gdGhlIERPTSBpbiBhIHNhZmUgd2F5LlxyXG4gICAgICovXHJcbiAgICBnZXRIdG1sKHR5cGU6IElDT05fVFlQRSB8IHN0cmluZyk6IFNhZmVIdG1sO1xyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogUmV0dXJucyB0aGUgc3ltYm9sIGNsYXNzKGVzKSBmb3IgdGhlIGljb24gdHlwZS5cclxuICAgICAqL1xyXG4gICAgZ2V0U3R5bGVDbGFzc2VzKGljb25UeXBlOiBJQ09OX1RZUEUgfCBzdHJpbmcpOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBnaXZlbiBgSUNPTl9UWVBFYCBpcyBjb25maWd1cmVkIGZvclxyXG4gICAgICogdGhlIGdpdmVuIGBJY29uUmVzb3VyY2VUeXBlYC5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBpc1Jlc291cmNlVHlwZTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgcGF0aCB0byB0aGUgc3ZnIGxpbmsuIFRoZSBsaW5rIHN1cHBvcnRzIHBhdGggbmFtZXNcclxuICAgICAqIGFzIHdlbGwsIGlmIHRoZSBjb25maWcgYVtbcyBiZWVuIHNldHVwIHRvIHN1cHBvcnQgYSBzdmcgZmlsZSBwYXRoLlxyXG4gICAgICogQWRkaXRpb25hbGx5LCB0aGUgaWNvbiBwcmVmaXggd2lsbCBiZSB0YWtlbiBpbnRvIGFjY291bnQgdG8gcHJlZml4IHRoZVxyXG4gICAgICogaWNvbiBJRHMgaW4gdGhlIFNWRy5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBnZXRTdmdQYXRoO1xyXG4gICAgLyoqXHJcbiAgICAgKiBMb2FkcyB0aGUgcmVzb3VyY2UgdXJsIChpZiBhbnkpIGZvciB0aGUgZ2l2ZW4gaWNvbi5cclxuICAgICAqIFRoZSBpY29uIHdpbGwgb25seSBiZSBsb2FkZWQgb25jZS5cclxuICAgICAqXHJcbiAgICAgKiBOT1RFOiB0aGlzIGlzIG5vdCB3b3JraW5nIHdoZW4gdGhlIHNoYWRvdyBpcyB1c2VkIGFzIHRoZXJlJ3NcclxuICAgICAqIG5vIGhlYWQgZWxlbWVudCBhdmFpbGFibGUgYW5kIHRoZSBsaW5rIG11c3QgYmUgbG9hZGVkIGZvciBldmVyeVxyXG4gICAgICogd2ViIGNvbXBvbmVudC5cclxuICAgICAqL1xyXG4gICAgYWRkTGlua1Jlc291cmNlKGljb25UeXBlOiBJQ09OX1RZUEUgfCBzdHJpbmcpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBmaW5kUmVzb3VyY2U7XHJcbiAgICBnZXRTeW1ib2woaWNvblR5cGU6IElDT05fVFlQRSB8IHN0cmluZyk6IHN0cmluZztcclxuICAgIHByaXZhdGUgZ2V0IGNvbmZpZygpO1xyXG59XHJcbiJdfQ==