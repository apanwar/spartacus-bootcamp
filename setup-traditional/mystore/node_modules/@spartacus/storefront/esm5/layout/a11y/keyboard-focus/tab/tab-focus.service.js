import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AutoFocusService } from '../autofocus/auto-focus.service';
import * as i0 from "@angular/core";
import * as i1 from "../services/select-focus.util";
var TabFocusService = /** @class */ (function (_super) {
    __extends(TabFocusService, _super);
    function TabFocusService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Moves to the next (or previous) tab.
     */
    TabFocusService.prototype.moveTab = function (host, config, increment, event) {
        if (config === null || config === void 0 ? void 0 : config.tab) {
            var next = config.tab === 'scroll'
                ? this.findNextScrollable(host, config, increment)
                : this.findNext(host, config, increment);
            next === null || next === void 0 ? void 0 : next.focus();
            event.preventDefault();
            event.stopPropagation();
        }
    };
    /**
     * builds out virtual slides out of the full scrollable area, to allow
     * for maximum flexibility for the underlying layout without using hardcoded
     * slide sizes.
     */
    TabFocusService.prototype.findNextScrollable = function (host, config, increment) {
        var _a;
        var active = this.getActiveChild(host, config);
        if (!active) {
            return;
        }
        // slide count
        var virtualSlideCount = Math.round(host.scrollWidth / host.clientWidth);
        // find current virtual slide
        var currentVirtualSlide = Math.round(active.offsetLeft / (host.scrollWidth / virtualSlideCount));
        var nextVirtualSlide = currentVirtualSlide + increment;
        if (increment === 1 /* NEXT */ &&
            nextVirtualSlide >= virtualSlideCount) {
            nextVirtualSlide = 0;
        }
        if (increment === -1 /* PREV */ && nextVirtualSlide < 0) {
            nextVirtualSlide = virtualSlideCount - 1;
        }
        var firstItemOnNextSlide = (_a = this.getChildren(host, config)) === null || _a === void 0 ? void 0 : _a.find(function (tab) {
            return tab.offsetLeft >=
                (host.scrollWidth / virtualSlideCount) * nextVirtualSlide;
        });
        return firstItemOnNextSlide;
    };
    TabFocusService.prototype.findNext = function (host, config, increment) {
        var _this = this;
        var childs = this.getChildren(host, config);
        var activeIndex = childs === null || childs === void 0 ? void 0 : childs.findIndex(function (c) { return c === _this.getActiveChild(host, config); });
        if (!activeIndex || activeIndex === -1) {
            activeIndex = 0;
        }
        activeIndex += increment;
        if (increment === 1 /* NEXT */ && activeIndex >= (childs === null || childs === void 0 ? void 0 : childs.length)) {
            activeIndex = childs.length - 1;
        }
        if (increment === -1 /* PREV */ && activeIndex < 0) {
            activeIndex = 0;
        }
        return childs ? childs[activeIndex] : undefined;
    };
    /**
     * Returns the active focusable child element. If there's no active
     * focusable child element, the first focusable child is returned.
     */
    TabFocusService.prototype.getActiveChild = function (host, config) {
        var _this = this;
        var persisted = this.getPersisted(host, config === null || config === void 0 ? void 0 : config.group);
        if (persisted) {
            return persisted;
        }
        var children = this.getChildren(host, config);
        var index = children.findIndex(function (tab) { return _this.isActive(tab); });
        if (!index || index === -1) {
            index = 0;
        }
        return children[index];
    };
    TabFocusService.prototype.getChildren = function (host, config) {
        if (typeof config.tab === 'string' && config.tab !== 'scroll') {
            return this.selectFocusUtil.query(host, config.tab);
        }
        else {
            return this.findFocusable(host, true);
        }
    };
    /**
     * Returns all focusable child elements of the host element.
     *
     * @param host The host element is used to query child focusable elements.
     * @param locked Indicates if locked elements (tabindex=-1) should be returned, defaults to false.
     * @param invisible Indicates if invisible child elements should be returned, defaults to false.
     */
    TabFocusService.prototype.findFocusable = function (host, locked, invisible) {
        if (locked === void 0) { locked = false; }
        if (invisible === void 0) { invisible = false; }
        return this.selectFocusUtil.findFocusable(host, locked, invisible);
    };
    TabFocusService.prototype.isActive = function (el) {
        var child = document.activeElement;
        var selector = child.tagName;
        return (el === child ||
            !!Array.from(el.querySelectorAll(selector)).find(function (e) { return e === child; }));
    };
    TabFocusService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TabFocusService_Factory() { return new TabFocusService(i0.ɵɵinject(i1.SelectFocusUtility)); }, token: TabFocusService, providedIn: "root" });
    TabFocusService = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], TabFocusService);
    return TabFocusService;
}(AutoFocusService));
export { TabFocusService };
//# sourceMappingURL=data:application/json;base64,