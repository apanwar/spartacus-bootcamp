import { __decorate, __extends } from "tslib";
import { Directive, HostBinding, HostListener } from '@angular/core';
import { BaseFocusDirective } from '../base/base-focus.directive';
/**
 * Directive implementation that adds a CSS class to the host element
 * when the moused is used to focus an element. As soon as the keyboard
 * is used, the class is removed.
 */
var VisibleFocusDirective = /** @class */ (function (_super) {
    __extends(VisibleFocusDirective, _super);
    function VisibleFocusDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultConfig = { disableMouseFocus: true };
        /** controls a polyfill class for the lacking focus-visible feature */
        _this.mouseFocus = false;
        return _this;
    }
    VisibleFocusDirective.prototype.handleMousedown = function () {
        if (this.shouldFocusVisible) {
            this.mouseFocus = true;
        }
    };
    VisibleFocusDirective.prototype.handleKeydown = function () {
        if (this.shouldFocusVisible) {
            this.mouseFocus = false;
        }
    };
    Object.defineProperty(VisibleFocusDirective.prototype, "shouldFocusVisible", {
        get: function () {
            var _a;
            return (_a = this.config) === null || _a === void 0 ? void 0 : _a.disableMouseFocus;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        HostBinding('class.mouse-focus')
    ], VisibleFocusDirective.prototype, "mouseFocus", void 0);
    __decorate([
        HostListener('mousedown')
    ], VisibleFocusDirective.prototype, "handleMousedown", null);
    __decorate([
        HostListener('keydown')
    ], VisibleFocusDirective.prototype, "handleKeydown", null);
    VisibleFocusDirective = __decorate([
        Directive() // selector: '[cxVisibleFocus]'
    ], VisibleFocusDirective);
    return VisibleFocusDirective;
}(BaseFocusDirective));
export { VisibleFocusDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlzaWJsZS1mb2N1cy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL3N0b3JlZnJvbnQvIiwic291cmNlcyI6WyJsYXlvdXQvYTExeS9rZXlib2FyZC1mb2N1cy92aXNpYmxlL3Zpc2libGUtZm9jdXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFHbEU7Ozs7R0FJRztBQUVIO0lBQTJDLHlDQUFrQjtJQUE3RDtRQUFBLHFFQXdCQztRQXZCVyxtQkFBYSxHQUF1QixFQUFFLGlCQUFpQixFQUFFLElBQUksRUFBRSxDQUFDO1FBSzFFLHNFQUFzRTtRQUNwQyxnQkFBVSxHQUFHLEtBQUssQ0FBQzs7SUFpQnZELENBQUM7SUFmNEIsK0NBQWUsR0FBZjtRQUN6QixJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUMzQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztTQUN4QjtJQUNILENBQUM7SUFFd0IsNkNBQWEsR0FBYjtRQUN2QixJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUMzQixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztTQUN6QjtJQUNILENBQUM7SUFFRCxzQkFBYyxxREFBa0I7YUFBaEM7O1lBQ0UsYUFBTyxJQUFJLENBQUMsTUFBTSwwQ0FBRSxpQkFBaUIsQ0FBQztRQUN4QyxDQUFDOzs7T0FBQTtJQWhCaUM7UUFBakMsV0FBVyxDQUFDLG1CQUFtQixDQUFDOzZEQUFvQjtJQUUxQjtRQUExQixZQUFZLENBQUMsV0FBVyxDQUFDO2dFQUl6QjtJQUV3QjtRQUF4QixZQUFZLENBQUMsU0FBUyxDQUFDOzhEQUl2QjtJQW5CVSxxQkFBcUI7UUFEakMsU0FBUyxFQUFFLENBQUMsK0JBQStCO09BQy9CLHFCQUFxQixDQXdCakM7SUFBRCw0QkFBQztDQUFBLEFBeEJELENBQTJDLGtCQUFrQixHQXdCNUQ7U0F4QlkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0QmluZGluZywgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEJhc2VGb2N1c0RpcmVjdGl2ZSB9IGZyb20gJy4uL2Jhc2UvYmFzZS1mb2N1cy5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBWaXNpYmxlRm9jdXNDb25maWcgfSBmcm9tICcuLi9rZXlib2FyZC1mb2N1cy5tb2RlbCc7XHJcblxyXG4vKipcclxuICogRGlyZWN0aXZlIGltcGxlbWVudGF0aW9uIHRoYXQgYWRkcyBhIENTUyBjbGFzcyB0byB0aGUgaG9zdCBlbGVtZW50XHJcbiAqIHdoZW4gdGhlIG1vdXNlZCBpcyB1c2VkIHRvIGZvY3VzIGFuIGVsZW1lbnQuIEFzIHNvb24gYXMgdGhlIGtleWJvYXJkXHJcbiAqIGlzIHVzZWQsIHRoZSBjbGFzcyBpcyByZW1vdmVkLlxyXG4gKi9cclxuQERpcmVjdGl2ZSgpIC8vIHNlbGVjdG9yOiAnW2N4VmlzaWJsZUZvY3VzXSdcclxuZXhwb3J0IGNsYXNzIFZpc2libGVGb2N1c0RpcmVjdGl2ZSBleHRlbmRzIEJhc2VGb2N1c0RpcmVjdGl2ZSB7XHJcbiAgcHJvdGVjdGVkIGRlZmF1bHRDb25maWc6IFZpc2libGVGb2N1c0NvbmZpZyA9IHsgZGlzYWJsZU1vdXNlRm9jdXM6IHRydWUgfTtcclxuXHJcbiAgLy8gQElucHV0KCdjeFZpc2libGVGb2N1cycpXHJcbiAgcHJvdGVjdGVkIGNvbmZpZzogVmlzaWJsZUZvY3VzQ29uZmlnO1xyXG5cclxuICAvKiogY29udHJvbHMgYSBwb2x5ZmlsbCBjbGFzcyBmb3IgdGhlIGxhY2tpbmcgZm9jdXMtdmlzaWJsZSBmZWF0dXJlICovXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5tb3VzZS1mb2N1cycpIG1vdXNlRm9jdXMgPSBmYWxzZTtcclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignbW91c2Vkb3duJykgaGFuZGxlTW91c2Vkb3duKCkge1xyXG4gICAgaWYgKHRoaXMuc2hvdWxkRm9jdXNWaXNpYmxlKSB7XHJcbiAgICAgIHRoaXMubW91c2VGb2N1cyA9IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdrZXlkb3duJykgaGFuZGxlS2V5ZG93bigpIHtcclxuICAgIGlmICh0aGlzLnNob3VsZEZvY3VzVmlzaWJsZSkge1xyXG4gICAgICB0aGlzLm1vdXNlRm9jdXMgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBnZXQgc2hvdWxkRm9jdXNWaXNpYmxlKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlnPy5kaXNhYmxlTW91c2VGb2N1cztcclxuICB9XHJcbn1cclxuIl19