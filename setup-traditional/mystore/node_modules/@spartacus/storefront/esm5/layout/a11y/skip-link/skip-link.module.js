import { __decorate } from "tslib";
import { CommonModule } from '@angular/common';
import { APP_INITIALIZER, ComponentFactoryResolver, NgModule, } from '@angular/core';
import { ConfigModule, I18nModule, provideDefaultConfig, } from '@spartacus/core';
import { OutletPosition } from '../../../cms-structure/outlet/outlet.model';
import { OutletService } from '../../../cms-structure/outlet/outlet.service';
import { KeyboardFocusModule } from '../keyboard-focus/keyboard-focus.module';
import { SkipLinkComponent } from './component/skip-link.component';
import { defaultSkipLinkConfig } from './config/default-skip-link.config';
import { SkipLinkDirective } from './directive/skip-link.directive';
var SkipLinkModule = /** @class */ (function () {
    function SkipLinkModule() {
    }
    SkipLinkModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                I18nModule,
                ConfigModule.withConfig(defaultSkipLinkConfig),
                KeyboardFocusModule,
            ],
            declarations: [SkipLinkComponent, SkipLinkDirective],
            exports: [SkipLinkDirective],
            entryComponents: [SkipLinkComponent],
            providers: [
                provideDefaultConfig(defaultSkipLinkConfig),
                {
                    provide: APP_INITIALIZER,
                    useFactory: skipLinkFactory,
                    deps: [ComponentFactoryResolver, OutletService],
                    multi: true,
                },
            ],
        })
    ], SkipLinkModule);
    return SkipLinkModule;
}());
export { SkipLinkModule };
/**
 * Adds the skip link component before the cx-storefront.
 */
export function skipLinkFactory(componentFactoryResolver, outletService) {
    var isReady = function () {
        var factory = componentFactoryResolver.resolveComponentFactory(SkipLinkComponent);
        outletService.add('cx-storefront', factory, OutletPosition.BEFORE);
    };
    return isReady;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tpcC1saW5rLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvc3RvcmVmcm9udC8iLCJzb3VyY2VzIjpbImxheW91dC9hMTF5L3NraXAtbGluay9za2lwLWxpbmsubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUNMLGVBQWUsRUFDZix3QkFBd0IsRUFDeEIsUUFBUSxHQUNULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFDTCxZQUFZLEVBQ1osVUFBVSxFQUNWLG9CQUFvQixHQUNyQixNQUFNLGlCQUFpQixDQUFDO0FBQ3pCLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUM1RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDN0UsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDOUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDcEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDMUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUF1QnBFO0lBQUE7SUFBNkIsQ0FBQztJQUFqQixjQUFjO1FBckIxQixRQUFRLENBQUM7WUFDUixPQUFPLEVBQUU7Z0JBQ1AsWUFBWTtnQkFDWixVQUFVO2dCQUNWLFlBQVksQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUM7Z0JBQzlDLG1CQUFtQjthQUNwQjtZQUNELFlBQVksRUFBRSxDQUFDLGlCQUFpQixFQUFFLGlCQUFpQixDQUFDO1lBQ3BELE9BQU8sRUFBRSxDQUFDLGlCQUFpQixDQUFDO1lBQzVCLGVBQWUsRUFBRSxDQUFDLGlCQUFpQixDQUFDO1lBRXBDLFNBQVMsRUFBRTtnQkFDVCxvQkFBb0IsQ0FBQyxxQkFBcUIsQ0FBQztnQkFDM0M7b0JBQ0UsT0FBTyxFQUFFLGVBQWU7b0JBQ3hCLFVBQVUsRUFBRSxlQUFlO29CQUMzQixJQUFJLEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSxhQUFhLENBQUM7b0JBQy9DLEtBQUssRUFBRSxJQUFJO2lCQUNaO2FBQ0Y7U0FDRixDQUFDO09BQ1csY0FBYyxDQUFHO0lBQUQscUJBQUM7Q0FBQSxBQUE5QixJQUE4QjtTQUFqQixjQUFjO0FBRTNCOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FDN0Isd0JBQWtELEVBQ2xELGFBQTRCO0lBRTVCLElBQU0sT0FBTyxHQUFHO1FBQ2QsSUFBTSxPQUFPLEdBQUcsd0JBQXdCLENBQUMsdUJBQXVCLENBQzlELGlCQUFpQixDQUNsQixDQUFDO1FBQ0YsYUFBYSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQU8sT0FBTyxFQUFFLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxRSxDQUFDLENBQUM7SUFDRixPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHtcclxuICBBUFBfSU5JVElBTElaRVIsXHJcbiAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxyXG4gIE5nTW9kdWxlLFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1xyXG4gIENvbmZpZ01vZHVsZSxcclxuICBJMThuTW9kdWxlLFxyXG4gIHByb3ZpZGVEZWZhdWx0Q29uZmlnLFxyXG59IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XHJcbmltcG9ydCB7IE91dGxldFBvc2l0aW9uIH0gZnJvbSAnLi4vLi4vLi4vY21zLXN0cnVjdHVyZS9vdXRsZXQvb3V0bGV0Lm1vZGVsJztcclxuaW1wb3J0IHsgT3V0bGV0U2VydmljZSB9IGZyb20gJy4uLy4uLy4uL2Ntcy1zdHJ1Y3R1cmUvb3V0bGV0L291dGxldC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgS2V5Ym9hcmRGb2N1c01vZHVsZSB9IGZyb20gJy4uL2tleWJvYXJkLWZvY3VzL2tleWJvYXJkLWZvY3VzLm1vZHVsZSc7XHJcbmltcG9ydCB7IFNraXBMaW5rQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnQvc2tpcC1saW5rLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IGRlZmF1bHRTa2lwTGlua0NvbmZpZyB9IGZyb20gJy4vY29uZmlnL2RlZmF1bHQtc2tpcC1saW5rLmNvbmZpZyc7XHJcbmltcG9ydCB7IFNraXBMaW5rRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmUvc2tpcC1saW5rLmRpcmVjdGl2ZSc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFtcclxuICAgIENvbW1vbk1vZHVsZSxcclxuICAgIEkxOG5Nb2R1bGUsXHJcbiAgICBDb25maWdNb2R1bGUud2l0aENvbmZpZyhkZWZhdWx0U2tpcExpbmtDb25maWcpLFxyXG4gICAgS2V5Ym9hcmRGb2N1c01vZHVsZSxcclxuICBdLFxyXG4gIGRlY2xhcmF0aW9uczogW1NraXBMaW5rQ29tcG9uZW50LCBTa2lwTGlua0RpcmVjdGl2ZV0sXHJcbiAgZXhwb3J0czogW1NraXBMaW5rRGlyZWN0aXZlXSxcclxuICBlbnRyeUNvbXBvbmVudHM6IFtTa2lwTGlua0NvbXBvbmVudF0sXHJcblxyXG4gIHByb3ZpZGVyczogW1xyXG4gICAgcHJvdmlkZURlZmF1bHRDb25maWcoZGVmYXVsdFNraXBMaW5rQ29uZmlnKSxcclxuICAgIHtcclxuICAgICAgcHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLFxyXG4gICAgICB1c2VGYWN0b3J5OiBza2lwTGlua0ZhY3RvcnksXHJcbiAgICAgIGRlcHM6IFtDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIE91dGxldFNlcnZpY2VdLFxyXG4gICAgICBtdWx0aTogdHJ1ZSxcclxuICAgIH0sXHJcbiAgXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIFNraXBMaW5rTW9kdWxlIHt9XHJcblxyXG4vKipcclxuICogQWRkcyB0aGUgc2tpcCBsaW5rIGNvbXBvbmVudCBiZWZvcmUgdGhlIGN4LXN0b3JlZnJvbnQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2tpcExpbmtGYWN0b3J5KFxyXG4gIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxyXG4gIG91dGxldFNlcnZpY2U6IE91dGxldFNlcnZpY2VcclxuKSB7XHJcbiAgY29uc3QgaXNSZWFkeSA9ICgpID0+IHtcclxuICAgIGNvbnN0IGZhY3RvcnkgPSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoXHJcbiAgICAgIFNraXBMaW5rQ29tcG9uZW50XHJcbiAgICApO1xyXG4gICAgb3V0bGV0U2VydmljZS5hZGQoJ2N4LXN0b3JlZnJvbnQnLCA8YW55PmZhY3RvcnksIE91dGxldFBvc2l0aW9uLkJFRk9SRSk7XHJcbiAgfTtcclxuICByZXR1cm4gaXNSZWFkeTtcclxufVxyXG4iXX0=