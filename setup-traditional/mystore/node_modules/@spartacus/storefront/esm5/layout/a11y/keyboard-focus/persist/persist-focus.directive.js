import { __decorate, __extends } from "tslib";
import { AfterViewInit, Directive, ElementRef, HostBinding, HostListener, OnInit, } from '@angular/core';
import { BlockFocusDirective } from '../block/block-focus.directive';
import { FOCUS_ATTR } from '../keyboard-focus.model';
import { PersistFocusService } from './persist-focus.service';
/**
 * Directive that provides persistence of the focused state. This is useful
 * when a group of focusable elements got refocused or even recreated. That
 * happens often when the DOM is constructed with an `*ngIf` or `*ngFor`.
 *
 * The focus state is based on a configured _key_, which can be passed in the
 * config input, either by using a string primitive or `PersistFocusConfig.key`:
 *
 * ```html
 * <button cxPersistFocus="myKey"></button>
 * <button cxFocus="myKey"></button>
 * <button [cxFocus]="{{key:'myKey'}"></button>
 * ```
 *
 * The focus state can be part of a focus _group_, so that the state is shared
 * and remember for the given group. In order to detect the persistence for a
 * given element, we store the persistence key as a data attribute (`data-cx-focus`):
 *
 * ```html
 * <button data-cx-focus="myKey"></button>
 * ```
 *
 * Other keyboard focus directives can read the key to understand whether the element
 * should retrieve focus.
 *
 */
var PersistFocusDirective = /** @class */ (function (_super) {
    __extends(PersistFocusDirective, _super);
    function PersistFocusDirective(elementRef, service) {
        var _this = _super.call(this, elementRef, service) || this;
        _this.elementRef = elementRef;
        _this.service = service;
        _this.defaultConfig = {};
        /**
         * The persistence key can be passed directly or through the `FocusConfig.key`.
         * While this could be considered a global key, the likeliness of conflicts
         * is very small since the key is cleared when the focus is changed.
         */
        // @Input('cxPersistFocus')
        _this.config = {};
        return _this;
    }
    PersistFocusDirective.prototype.handleFocus = function (event) {
        this.service.set(this.key, this.group);
        event === null || event === void 0 ? void 0 : event.preventDefault();
        event === null || event === void 0 ? void 0 : event.stopPropagation();
    };
    PersistFocusDirective.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
        this.attr = this.key ? this.key : undefined;
    };
    PersistFocusDirective.prototype.setDefaultConfiguration = function () {
        if (typeof this.config === 'string' && this.config !== '') {
            this.config = { key: this.config };
        }
        _super.prototype.setDefaultConfiguration.call(this);
    };
    /**
     * Focus the element explicitly if it was focused before.
     */
    PersistFocusDirective.prototype.ngAfterViewInit = function () {
        if (this.isPersisted) {
            this.host.focus({ preventScroll: true });
        }
    };
    Object.defineProperty(PersistFocusDirective.prototype, "isPersisted", {
        get: function () {
            return !!this.key && this.service.get(this.group) === this.key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PersistFocusDirective.prototype, "key", {
        /**
         * Returns the key for the host element, which is used to persist the
         * focus state. This is useful in cases where the DOM is rebuild.
         */
        get: function () {
            var _a;
            return (_a = this.config) === null || _a === void 0 ? void 0 : _a.key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PersistFocusDirective.prototype, "group", {
        /**
         * returns the persistence group (if any) for the focusable elements.
         */
        get: function () {
            return this.service.getPersistenceGroup(this.host, this.config);
        },
        enumerable: true,
        configurable: true
    });
    PersistFocusDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: PersistFocusService }
    ]; };
    __decorate([
        HostBinding("attr." + FOCUS_ATTR)
    ], PersistFocusDirective.prototype, "attr", void 0);
    __decorate([
        HostListener('focus', ['$event'])
    ], PersistFocusDirective.prototype, "handleFocus", null);
    PersistFocusDirective = __decorate([
        Directive() // selector: '[cxPersistFocus]',
    ], PersistFocusDirective);
    return PersistFocusDirective;
}(BlockFocusDirective));
export { PersistFocusDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc2lzdC1mb2N1cy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL3N0b3JlZnJvbnQvIiwic291cmNlcyI6WyJsYXlvdXQvYTExeS9rZXlib2FyZC1mb2N1cy9wZXJzaXN0L3BlcnNpc3QtZm9jdXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsYUFBYSxFQUNiLFNBQVMsRUFDVCxVQUFVLEVBQ1YsV0FBVyxFQUNYLFlBQVksRUFDWixNQUFNLEdBQ1AsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDckUsT0FBTyxFQUFFLFVBQVUsRUFBc0IsTUFBTSx5QkFBeUIsQ0FBQztBQUN6RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUU5RDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXlCRztBQUVIO0lBQTJDLHlDQUFtQjtJQTJCNUQsK0JBQ1ksVUFBc0IsRUFDdEIsT0FBNEI7UUFGeEMsWUFJRSxrQkFBTSxVQUFVLEVBQUUsT0FBTyxDQUFDLFNBQzNCO1FBSlcsZ0JBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsYUFBTyxHQUFQLE9BQU8sQ0FBcUI7UUEzQjlCLG1CQUFhLEdBQXVCLEVBQUUsQ0FBQztRQUVqRDs7OztXQUlHO1FBQ0gsMkJBQTJCO1FBQ2pCLFlBQU0sR0FBdUIsRUFBRSxDQUFDOztJQXNCMUMsQ0FBQztJQVpELDJDQUFXLEdBQVgsVUFBWSxLQUFxQjtRQUMvQixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV2QyxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsY0FBYyxHQUFHO1FBQ3hCLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxlQUFlLEdBQUc7SUFDM0IsQ0FBQztJQVNELHdDQUFRLEdBQVI7UUFDRSxpQkFBTSxRQUFRLFdBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUM5QyxDQUFDO0lBRVMsdURBQXVCLEdBQWpDO1FBQ0UsSUFBSSxPQUFPLElBQUksQ0FBQyxNQUFNLEtBQUssUUFBUSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssRUFBRSxFQUFFO1lBQ3pELElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3BDO1FBQ0QsaUJBQU0sdUJBQXVCLFdBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCwrQ0FBZSxHQUFmO1FBQ0UsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7U0FDMUM7SUFDSCxDQUFDO0lBRUQsc0JBQWMsOENBQVc7YUFBekI7WUFDRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQ2pFLENBQUM7OztPQUFBO0lBTUQsc0JBQWMsc0NBQUc7UUFKakI7OztXQUdHO2FBQ0g7O1lBQ0UsYUFBUSxJQUFJLENBQUMsTUFBNkIsMENBQUUsR0FBRyxDQUFDO1FBQ2xELENBQUM7OztPQUFBO0lBS0Qsc0JBQWMsd0NBQUs7UUFIbkI7O1dBRUc7YUFDSDtZQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FDckMsSUFBSSxDQUFDLElBQUksRUFDVCxJQUFJLENBQUMsTUFBNEIsQ0FDbEMsQ0FBQztRQUNKLENBQUM7OztPQUFBOztnQkEvQ3VCLFVBQVU7Z0JBQ2IsbUJBQW1COztJQVpMO1FBQWxDLFdBQVcsQ0FBQyxVQUFRLFVBQVksQ0FBQzt1REFBYztJQUdoRDtRQURDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQzs0REFNakM7SUF6QlUscUJBQXFCO1FBRGpDLFNBQVMsRUFBRSxDQUFDLGdDQUFnQztPQUNoQyxxQkFBcUIsQ0E0RWpDO0lBQUQsNEJBQUM7Q0FBQSxBQTVFRCxDQUEyQyxtQkFBbUIsR0E0RTdEO1NBNUVZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQWZ0ZXJWaWV3SW5pdCxcclxuICBEaXJlY3RpdmUsXHJcbiAgRWxlbWVudFJlZixcclxuICBIb3N0QmluZGluZyxcclxuICBIb3N0TGlzdGVuZXIsXHJcbiAgT25Jbml0LFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCbG9ja0ZvY3VzRGlyZWN0aXZlIH0gZnJvbSAnLi4vYmxvY2svYmxvY2stZm9jdXMuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgRk9DVVNfQVRUUiwgUGVyc2lzdEZvY3VzQ29uZmlnIH0gZnJvbSAnLi4va2V5Ym9hcmQtZm9jdXMubW9kZWwnO1xyXG5pbXBvcnQgeyBQZXJzaXN0Rm9jdXNTZXJ2aWNlIH0gZnJvbSAnLi9wZXJzaXN0LWZvY3VzLnNlcnZpY2UnO1xyXG5cclxuLyoqXHJcbiAqIERpcmVjdGl2ZSB0aGF0IHByb3ZpZGVzIHBlcnNpc3RlbmNlIG9mIHRoZSBmb2N1c2VkIHN0YXRlLiBUaGlzIGlzIHVzZWZ1bFxyXG4gKiB3aGVuIGEgZ3JvdXAgb2YgZm9jdXNhYmxlIGVsZW1lbnRzIGdvdCByZWZvY3VzZWQgb3IgZXZlbiByZWNyZWF0ZWQuIFRoYXRcclxuICogaGFwcGVucyBvZnRlbiB3aGVuIHRoZSBET00gaXMgY29uc3RydWN0ZWQgd2l0aCBhbiBgKm5nSWZgIG9yIGAqbmdGb3JgLlxyXG4gKlxyXG4gKiBUaGUgZm9jdXMgc3RhdGUgaXMgYmFzZWQgb24gYSBjb25maWd1cmVkIF9rZXlfLCB3aGljaCBjYW4gYmUgcGFzc2VkIGluIHRoZVxyXG4gKiBjb25maWcgaW5wdXQsIGVpdGhlciBieSB1c2luZyBhIHN0cmluZyBwcmltaXRpdmUgb3IgYFBlcnNpc3RGb2N1c0NvbmZpZy5rZXlgOlxyXG4gKlxyXG4gKiBgYGBodG1sXHJcbiAqIDxidXR0b24gY3hQZXJzaXN0Rm9jdXM9XCJteUtleVwiPjwvYnV0dG9uPlxyXG4gKiA8YnV0dG9uIGN4Rm9jdXM9XCJteUtleVwiPjwvYnV0dG9uPlxyXG4gKiA8YnV0dG9uIFtjeEZvY3VzXT1cInt7a2V5OidteUtleSd9XCI+PC9idXR0b24+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBUaGUgZm9jdXMgc3RhdGUgY2FuIGJlIHBhcnQgb2YgYSBmb2N1cyBfZ3JvdXBfLCBzbyB0aGF0IHRoZSBzdGF0ZSBpcyBzaGFyZWRcclxuICogYW5kIHJlbWVtYmVyIGZvciB0aGUgZ2l2ZW4gZ3JvdXAuIEluIG9yZGVyIHRvIGRldGVjdCB0aGUgcGVyc2lzdGVuY2UgZm9yIGFcclxuICogZ2l2ZW4gZWxlbWVudCwgd2Ugc3RvcmUgdGhlIHBlcnNpc3RlbmNlIGtleSBhcyBhIGRhdGEgYXR0cmlidXRlIChgZGF0YS1jeC1mb2N1c2ApOlxyXG4gKlxyXG4gKiBgYGBodG1sXHJcbiAqIDxidXR0b24gZGF0YS1jeC1mb2N1cz1cIm15S2V5XCI+PC9idXR0b24+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBPdGhlciBrZXlib2FyZCBmb2N1cyBkaXJlY3RpdmVzIGNhbiByZWFkIHRoZSBrZXkgdG8gdW5kZXJzdGFuZCB3aGV0aGVyIHRoZSBlbGVtZW50XHJcbiAqIHNob3VsZCByZXRyaWV2ZSBmb2N1cy5cclxuICpcclxuICovXHJcbkBEaXJlY3RpdmUoKSAvLyBzZWxlY3RvcjogJ1tjeFBlcnNpc3RGb2N1c10nLFxyXG5leHBvcnQgY2xhc3MgUGVyc2lzdEZvY3VzRGlyZWN0aXZlIGV4dGVuZHMgQmxvY2tGb2N1c0RpcmVjdGl2ZVxyXG4gIGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcclxuICBwcm90ZWN0ZWQgZGVmYXVsdENvbmZpZzogUGVyc2lzdEZvY3VzQ29uZmlnID0ge307XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBwZXJzaXN0ZW5jZSBrZXkgY2FuIGJlIHBhc3NlZCBkaXJlY3RseSBvciB0aHJvdWdoIHRoZSBgRm9jdXNDb25maWcua2V5YC5cclxuICAgKiBXaGlsZSB0aGlzIGNvdWxkIGJlIGNvbnNpZGVyZWQgYSBnbG9iYWwga2V5LCB0aGUgbGlrZWxpbmVzcyBvZiBjb25mbGljdHNcclxuICAgKiBpcyB2ZXJ5IHNtYWxsIHNpbmNlIHRoZSBrZXkgaXMgY2xlYXJlZCB3aGVuIHRoZSBmb2N1cyBpcyBjaGFuZ2VkLlxyXG4gICAqL1xyXG4gIC8vIEBJbnB1dCgnY3hQZXJzaXN0Rm9jdXMnKVxyXG4gIHByb3RlY3RlZCBjb25maWc6IFBlcnNpc3RGb2N1c0NvbmZpZyA9IHt9O1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgcGVyc2lzdGVuY2Uga2V5IGlzIG1haW50YWluZWQgaW4gYW4gZWxlbWVudCBhdHRyaWJ1dGUgZm9yIG90aGVyXHJcbiAgICogaW1wbGVtZW50YXRpb25zLiBUaGlzIGlzIG5lZWRlZCB0byBlbnN1cmUgdGhhdCB3ZSBjYW4gcmVzb2x2ZSB0aGUgZm9jdXNcclxuICAgKiBzdGF0ZSBpbiBjYXNlIG9mIGEgcmVwYWludC5cclxuICAgKi9cclxuICBASG9zdEJpbmRpbmcoYGF0dHIuJHtGT0NVU19BVFRSfWApIGF0dHI6IHN0cmluZztcclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignZm9jdXMnLCBbJyRldmVudCddKVxyXG4gIGhhbmRsZUZvY3VzKGV2ZW50PzogS2V5Ym9hcmRFdmVudCkge1xyXG4gICAgdGhpcy5zZXJ2aWNlLnNldCh0aGlzLmtleSwgdGhpcy5ncm91cCk7XHJcblxyXG4gICAgZXZlbnQ/LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBldmVudD8uc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxyXG4gICAgcHJvdGVjdGVkIHNlcnZpY2U6IFBlcnNpc3RGb2N1c1NlcnZpY2VcclxuICApIHtcclxuICAgIHN1cGVyKGVsZW1lbnRSZWYsIHNlcnZpY2UpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICBzdXBlci5uZ09uSW5pdCgpO1xyXG4gICAgdGhpcy5hdHRyID0gdGhpcy5rZXkgPyB0aGlzLmtleSA6IHVuZGVmaW5lZDtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBzZXREZWZhdWx0Q29uZmlndXJhdGlvbigpIHtcclxuICAgIGlmICh0eXBlb2YgdGhpcy5jb25maWcgPT09ICdzdHJpbmcnICYmIHRoaXMuY29uZmlnICE9PSAnJykge1xyXG4gICAgICB0aGlzLmNvbmZpZyA9IHsga2V5OiB0aGlzLmNvbmZpZyB9O1xyXG4gICAgfVxyXG4gICAgc3VwZXIuc2V0RGVmYXVsdENvbmZpZ3VyYXRpb24oKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZvY3VzIHRoZSBlbGVtZW50IGV4cGxpY2l0bHkgaWYgaXQgd2FzIGZvY3VzZWQgYmVmb3JlLlxyXG4gICAqL1xyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIGlmICh0aGlzLmlzUGVyc2lzdGVkKSB7XHJcbiAgICAgIHRoaXMuaG9zdC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgZ2V0IGlzUGVyc2lzdGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuICEhdGhpcy5rZXkgJiYgdGhpcy5zZXJ2aWNlLmdldCh0aGlzLmdyb3VwKSA9PT0gdGhpcy5rZXk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRoZSBrZXkgZm9yIHRoZSBob3N0IGVsZW1lbnQsIHdoaWNoIGlzIHVzZWQgdG8gcGVyc2lzdCB0aGVcclxuICAgKiBmb2N1cyBzdGF0ZS4gVGhpcyBpcyB1c2VmdWwgaW4gY2FzZXMgd2hlcmUgdGhlIERPTSBpcyByZWJ1aWxkLlxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBnZXQga2V5KCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gKHRoaXMuY29uZmlnIGFzIFBlcnNpc3RGb2N1c0NvbmZpZyk/LmtleTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHJldHVybnMgdGhlIHBlcnNpc3RlbmNlIGdyb3VwIChpZiBhbnkpIGZvciB0aGUgZm9jdXNhYmxlIGVsZW1lbnRzLlxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBnZXQgZ3JvdXAoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLnNlcnZpY2UuZ2V0UGVyc2lzdGVuY2VHcm91cChcclxuICAgICAgdGhpcy5ob3N0LFxyXG4gICAgICB0aGlzLmNvbmZpZyBhcyBQZXJzaXN0Rm9jdXNDb25maWdcclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiJdfQ==