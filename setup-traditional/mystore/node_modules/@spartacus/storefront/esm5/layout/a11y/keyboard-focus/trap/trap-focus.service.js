import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { TabFocusService } from '../tab/tab-focus.service';
import * as i0 from "@angular/core";
import * as i1 from "../services/select-focus.util";
var TrapFocusService = /** @class */ (function (_super) {
    __extends(TrapFocusService, _super);
    function TrapFocusService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Indicates whether any of the child elements of the host are focusable.
     *
     * @param host `HTMLElement` that is used to query the focusable elements.
     */
    TrapFocusService.prototype.hasFocusableChildren = function (host) {
        return this.findFocusable(host).length > 0;
    };
    /**
     * Focus the next or previous element of all available focusable elements.
     * The focus is _trapped_ in case there's no next or previous available element.
     * The focus will automatically move the start or end of the list.
     */
    TrapFocusService.prototype.moveFocus = function (host, config, increment, event) {
        var focusable = this.findFocusable(host);
        var index = focusable.findIndex(function (v) { return v === event.target; }) + increment;
        var shouldMoveFocus = (index >= 0 && index < focusable.length) ||
            (index < 0 && this.getTrapStart(config.trap)) ||
            (index >= focusable.length && this.getTrapEnd(config.trap));
        if (shouldMoveFocus) {
            if (index >= focusable.length) {
                index = 0;
            }
            if (index < 0) {
                index = focusable.length - 1;
            }
            event.preventDefault();
            event.stopPropagation();
            var el = focusable[index];
            el.focus();
        }
    };
    TrapFocusService.prototype.getTrapStart = function (trap) {
        return trap === true || trap === 'start';
    };
    TrapFocusService.prototype.getTrapEnd = function (trap) {
        return trap === true || trap === 'end';
    };
    TrapFocusService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TrapFocusService_Factory() { return new TrapFocusService(i0.ɵɵinject(i1.SelectFocusUtility)); }, token: TrapFocusService, providedIn: "root" });
    TrapFocusService = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], TrapFocusService);
    return TrapFocusService;
}(TabFocusService));
export { TrapFocusService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhcC1mb2N1cy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9zdG9yZWZyb250LyIsInNvdXJjZXMiOlsibGF5b3V0L2ExMXkva2V5Ym9hcmQtZm9jdXMvdHJhcC90cmFwLWZvY3VzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBCQUEwQixDQUFDOzs7QUFLM0Q7SUFBc0Msb0NBQWU7SUFBckQ7O0tBc0RDO0lBckRDOzs7O09BSUc7SUFDSCwrQ0FBb0IsR0FBcEIsVUFBcUIsSUFBaUI7UUFDcEMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxvQ0FBUyxHQUFULFVBQ0UsSUFBaUIsRUFDakIsTUFBdUIsRUFDdkIsU0FBcUIsRUFDckIsS0FBYztRQUVkLElBQU0sU0FBUyxHQUFrQixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTFELElBQUksS0FBSyxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxDQUFDLEtBQUssS0FBSyxDQUFDLE1BQU0sRUFBbEIsQ0FBa0IsQ0FBQyxHQUFHLFNBQVMsQ0FBQztRQUV2RSxJQUFNLGVBQWUsR0FDbkIsQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLEtBQUssR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDO1lBQ3hDLENBQUMsS0FBSyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM3QyxDQUFDLEtBQUssSUFBSSxTQUFTLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFOUQsSUFBSSxlQUFlLEVBQUU7WUFDbkIsSUFBSSxLQUFLLElBQUksU0FBUyxDQUFDLE1BQU0sRUFBRTtnQkFDN0IsS0FBSyxHQUFHLENBQUMsQ0FBQzthQUNYO1lBQ0QsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO2dCQUNiLEtBQUssR0FBRyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQzthQUM5QjtZQUVELEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN2QixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7WUFFeEIsSUFBTSxFQUFFLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRTVCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNaO0lBQ0gsQ0FBQztJQUVTLHVDQUFZLEdBQXRCLFVBQXVCLElBQStCO1FBQ3BELE9BQU8sSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssT0FBTyxDQUFDO0lBQzNDLENBQUM7SUFFUyxxQ0FBVSxHQUFwQixVQUFxQixJQUErQjtRQUNsRCxPQUFPLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLEtBQUssQ0FBQztJQUN6QyxDQUFDOztJQXJEVSxnQkFBZ0I7UUFINUIsVUFBVSxDQUFDO1lBQ1YsVUFBVSxFQUFFLE1BQU07U0FDbkIsQ0FBQztPQUNXLGdCQUFnQixDQXNENUI7MkJBN0REO0NBNkRDLEFBdERELENBQXNDLGVBQWUsR0FzRHBEO1NBdERZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTU9WRV9GT0NVUywgVHJhcEZvY3VzQ29uZmlnIH0gZnJvbSAnLi4va2V5Ym9hcmQtZm9jdXMubW9kZWwnO1xyXG5pbXBvcnQgeyBUYWJGb2N1c1NlcnZpY2UgfSBmcm9tICcuLi90YWIvdGFiLWZvY3VzLnNlcnZpY2UnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFRyYXBGb2N1c1NlcnZpY2UgZXh0ZW5kcyBUYWJGb2N1c1NlcnZpY2Uge1xyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIGFueSBvZiB0aGUgY2hpbGQgZWxlbWVudHMgb2YgdGhlIGhvc3QgYXJlIGZvY3VzYWJsZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBob3N0IGBIVE1MRWxlbWVudGAgdGhhdCBpcyB1c2VkIHRvIHF1ZXJ5IHRoZSBmb2N1c2FibGUgZWxlbWVudHMuXHJcbiAgICovXHJcbiAgaGFzRm9jdXNhYmxlQ2hpbGRyZW4oaG9zdDogSFRNTEVsZW1lbnQpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmZpbmRGb2N1c2FibGUoaG9zdCkubGVuZ3RoID4gMDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZvY3VzIHRoZSBuZXh0IG9yIHByZXZpb3VzIGVsZW1lbnQgb2YgYWxsIGF2YWlsYWJsZSBmb2N1c2FibGUgZWxlbWVudHMuXHJcbiAgICogVGhlIGZvY3VzIGlzIF90cmFwcGVkXyBpbiBjYXNlIHRoZXJlJ3Mgbm8gbmV4dCBvciBwcmV2aW91cyBhdmFpbGFibGUgZWxlbWVudC5cclxuICAgKiBUaGUgZm9jdXMgd2lsbCBhdXRvbWF0aWNhbGx5IG1vdmUgdGhlIHN0YXJ0IG9yIGVuZCBvZiB0aGUgbGlzdC5cclxuICAgKi9cclxuICBtb3ZlRm9jdXMoXHJcbiAgICBob3N0OiBIVE1MRWxlbWVudCxcclxuICAgIGNvbmZpZzogVHJhcEZvY3VzQ29uZmlnLFxyXG4gICAgaW5jcmVtZW50OiBNT1ZFX0ZPQ1VTLFxyXG4gICAgZXZlbnQ6IFVJRXZlbnRcclxuICApOiB2b2lkIHtcclxuICAgIGNvbnN0IGZvY3VzYWJsZTogSFRNTEVsZW1lbnRbXSA9IHRoaXMuZmluZEZvY3VzYWJsZShob3N0KTtcclxuXHJcbiAgICBsZXQgaW5kZXggPSBmb2N1c2FibGUuZmluZEluZGV4KCh2KSA9PiB2ID09PSBldmVudC50YXJnZXQpICsgaW5jcmVtZW50O1xyXG5cclxuICAgIGNvbnN0IHNob3VsZE1vdmVGb2N1cyA9XHJcbiAgICAgIChpbmRleCA+PSAwICYmIGluZGV4IDwgZm9jdXNhYmxlLmxlbmd0aCkgfHxcclxuICAgICAgKGluZGV4IDwgMCAmJiB0aGlzLmdldFRyYXBTdGFydChjb25maWcudHJhcCkpIHx8XHJcbiAgICAgIChpbmRleCA+PSBmb2N1c2FibGUubGVuZ3RoICYmIHRoaXMuZ2V0VHJhcEVuZChjb25maWcudHJhcCkpO1xyXG5cclxuICAgIGlmIChzaG91bGRNb3ZlRm9jdXMpIHtcclxuICAgICAgaWYgKGluZGV4ID49IGZvY3VzYWJsZS5sZW5ndGgpIHtcclxuICAgICAgICBpbmRleCA9IDA7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGluZGV4IDwgMCkge1xyXG4gICAgICAgIGluZGV4ID0gZm9jdXNhYmxlLmxlbmd0aCAtIDE7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgY29uc3QgZWwgPSBmb2N1c2FibGVbaW5kZXhdO1xyXG5cclxuICAgICAgZWwuZm9jdXMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBnZXRUcmFwU3RhcnQodHJhcDogYm9vbGVhbiB8ICdzdGFydCcgfCAnZW5kJyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRyYXAgPT09IHRydWUgfHwgdHJhcCA9PT0gJ3N0YXJ0JztcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBnZXRUcmFwRW5kKHRyYXA6IGJvb2xlYW4gfCAnc3RhcnQnIHwgJ2VuZCcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0cmFwID09PSB0cnVlIHx8IHRyYXAgPT09ICdlbmQnO1xyXG4gIH1cclxufVxyXG4iXX0=