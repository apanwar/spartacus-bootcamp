import { __decorate } from "tslib";
import { Directive, ElementRef, HostBinding, Input, OnInit, } from '@angular/core';
import { BaseFocusService } from './base-focus.service';
/**
 * Abstract directive that provides a common interface for all focus directives:
 * - Block Focus
 * - Persist Focus
 * - Escape Focus
 * - Auto Focus
 * - Tab Focus
 * - Trap Focus
 * - Lock Focus
 */
var BaseFocusDirective = /** @class */ (function () {
    function BaseFocusDirective(elementRef, service) {
        this.elementRef = elementRef;
        this.service = service;
        /**
         * A default config can be provided for each directive if a specific focus directive
         * is used directly. i.e. `<div cxAutoFocus></div>`
         */
        this.defaultConfig = {};
    }
    BaseFocusDirective.prototype.ngOnInit = function () {
        this.setDefaultConfiguration();
        this.requiredTabindex = -1;
    };
    /**
     * Override the (input) config if it undefined or an empty string, with the
     * `defaultConfig`. The `defaultConfig` might be specified for each directive
     * differently. If a specific directive is used (i.e. `cxAutoFocus`), the
     * specific (inherited) defaultConfig will be used.
     */
    BaseFocusDirective.prototype.setDefaultConfiguration = function () {
        if ((!this.config || this.config === '') && this.defaultConfig) {
            this.config = this.defaultConfig;
        }
    };
    Object.defineProperty(BaseFocusDirective.prototype, "host", {
        /**
         * Helper method to return the host element for the directive
         * given by the `elementRef`.
         */
        get: function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseFocusDirective.prototype, "requiredTabindex", {
        /**
         * Force a tabindex on the host element if it is _requried_ to make the element
         * focusable. If the element is focusable by nature or by a given tabindex, the
         * `tabindex` is not applied.
         *
         * Buttons, active links, etc. do no need an explicit tabindex to receive focus.
         */
        set: function (tabindex) {
            if (this.requiresExplicitTabIndex) {
                this.tabindex = tabindex;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseFocusDirective.prototype, "requiresExplicitTabIndex", {
        /**
         * Returns true if the host element does not have a tabindex defined
         * and it also doesn't get focus by browsers nature (i.e. button or
         * active link).
         */
        get: function () {
            return (this.tabindex === undefined &&
                ['button', 'input', 'select', 'textarea'].indexOf(this.host.tagName.toLowerCase()) === -1 &&
                !(this.host.tagName === 'A' &&
                    (this.host.hasAttribute('href') || this.host.hasAttribute('routerlink'))));
        },
        enumerable: true,
        configurable: true
    });
    BaseFocusDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: BaseFocusService }
    ]; };
    __decorate([
        Input(), HostBinding('attr.tabindex')
    ], BaseFocusDirective.prototype, "tabindex", void 0);
    BaseFocusDirective = __decorate([
        Directive()
    ], BaseFocusDirective);
    return BaseFocusDirective;
}());
export { BaseFocusDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1mb2N1cy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL3N0b3JlZnJvbnQvIiwic291cmNlcyI6WyJsYXlvdXQvYTExeS9rZXlib2FyZC1mb2N1cy9iYXNlL2Jhc2UtZm9jdXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLEVBQ1gsS0FBSyxFQUNMLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV4RDs7Ozs7Ozs7O0dBU0c7QUFFSDtJQWVFLDRCQUNZLFVBQW1DLEVBQ25DLE9BQXlCO1FBRHpCLGVBQVUsR0FBVixVQUFVLENBQXlCO1FBQ25DLFlBQU8sR0FBUCxPQUFPLENBQWtCO1FBVnJDOzs7V0FHRztRQUNPLGtCQUFhLEdBQW9CLEVBQUUsQ0FBQztJQU8zQyxDQUFDO0lBRUoscUNBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1FBQy9CLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDTyxvREFBdUIsR0FBakM7UUFDRSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUM5RCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7U0FDbEM7SUFDSCxDQUFDO0lBTUQsc0JBQWMsb0NBQUk7UUFKbEI7OztXQUdHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO1FBQ3ZDLENBQUM7OztPQUFBO0lBU0Qsc0JBQWMsZ0RBQWdCO1FBUDlCOzs7Ozs7V0FNRzthQUNILFVBQStCLFFBQWdCO1lBQzdDLElBQUksSUFBSSxDQUFDLHdCQUF3QixFQUFFO2dCQUNqQyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQzthQUMxQjtRQUNILENBQUM7OztPQUFBO0lBT0Qsc0JBQWMsd0RBQXdCO1FBTHRDOzs7O1dBSUc7YUFDSDtZQUNFLE9BQU8sQ0FDTCxJQUFJLENBQUMsUUFBUSxLQUFLLFNBQVM7Z0JBQzNCLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUMvQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FDaEMsS0FBSyxDQUFDLENBQUM7Z0JBQ1IsQ0FBQyxDQUNDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLEdBQUc7b0JBQ3pCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FDekUsQ0FDRixDQUFDO1FBQ0osQ0FBQzs7O09BQUE7O2dCQTFEdUIsVUFBVTtnQkFDYixnQkFBZ0I7O0lBSkU7UUFBdEMsS0FBSyxFQUFFLEVBQUUsV0FBVyxDQUFDLGVBQWUsQ0FBQzt3REFBa0I7SUFicEMsa0JBQWtCO1FBRHZDLFNBQVMsRUFBRTtPQUNVLGtCQUFrQixDQTJFdkM7SUFBRCx5QkFBQztDQUFBLEFBM0VELElBMkVDO1NBM0VxQixrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIERpcmVjdGl2ZSxcclxuICBFbGVtZW50UmVmLFxyXG4gIEhvc3RCaW5kaW5nLFxyXG4gIElucHV0LFxyXG4gIE9uSW5pdCxcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQmFzZUZvY3VzQ29uZmlnIH0gZnJvbSAnLi4va2V5Ym9hcmQtZm9jdXMubW9kZWwnO1xyXG5pbXBvcnQgeyBCYXNlRm9jdXNTZXJ2aWNlIH0gZnJvbSAnLi9iYXNlLWZvY3VzLnNlcnZpY2UnO1xyXG5cclxuLyoqXHJcbiAqIEFic3RyYWN0IGRpcmVjdGl2ZSB0aGF0IHByb3ZpZGVzIGEgY29tbW9uIGludGVyZmFjZSBmb3IgYWxsIGZvY3VzIGRpcmVjdGl2ZXM6XHJcbiAqIC0gQmxvY2sgRm9jdXNcclxuICogLSBQZXJzaXN0IEZvY3VzXHJcbiAqIC0gRXNjYXBlIEZvY3VzXHJcbiAqIC0gQXV0byBGb2N1c1xyXG4gKiAtIFRhYiBGb2N1c1xyXG4gKiAtIFRyYXAgRm9jdXNcclxuICogLSBMb2NrIEZvY3VzXHJcbiAqL1xyXG5ARGlyZWN0aXZlKClcclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VGb2N1c0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgLyoqXHJcbiAgICogT3B0aW9uYWwgY29uZmlndXJhdGlvbiBmb3IgdGhlIGZvY3VzIGRpcmVjdGl2ZSBkcml2ZXMgdGhlIGJlaGF2aW91ciBvZiB0aGUga2V5Ym9hcmRcclxuICAgKiBmb2N1cyBkaXJlY3RpdmUuXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGNvbmZpZzogQmFzZUZvY3VzQ29uZmlnO1xyXG5cclxuICAvKipcclxuICAgKiBBIGRlZmF1bHQgY29uZmlnIGNhbiBiZSBwcm92aWRlZCBmb3IgZWFjaCBkaXJlY3RpdmUgaWYgYSBzcGVjaWZpYyBmb2N1cyBkaXJlY3RpdmVcclxuICAgKiBpcyB1c2VkIGRpcmVjdGx5LiBpLmUuIGA8ZGl2IGN4QXV0b0ZvY3VzPjwvZGl2PmBcclxuICAgKi9cclxuICBwcm90ZWN0ZWQgZGVmYXVsdENvbmZpZzogQmFzZUZvY3VzQ29uZmlnID0ge307XHJcblxyXG4gIEBJbnB1dCgpIEBIb3N0QmluZGluZygnYXR0ci50YWJpbmRleCcpIHRhYmluZGV4OiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxyXG4gICAgcHJvdGVjdGVkIHNlcnZpY2U6IEJhc2VGb2N1c1NlcnZpY2VcclxuICApIHt9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy5zZXREZWZhdWx0Q29uZmlndXJhdGlvbigpO1xyXG4gICAgdGhpcy5yZXF1aXJlZFRhYmluZGV4ID0gLTE7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPdmVycmlkZSB0aGUgKGlucHV0KSBjb25maWcgaWYgaXQgdW5kZWZpbmVkIG9yIGFuIGVtcHR5IHN0cmluZywgd2l0aCB0aGVcclxuICAgKiBgZGVmYXVsdENvbmZpZ2AuIFRoZSBgZGVmYXVsdENvbmZpZ2AgbWlnaHQgYmUgc3BlY2lmaWVkIGZvciBlYWNoIGRpcmVjdGl2ZVxyXG4gICAqIGRpZmZlcmVudGx5LiBJZiBhIHNwZWNpZmljIGRpcmVjdGl2ZSBpcyB1c2VkIChpLmUuIGBjeEF1dG9Gb2N1c2ApLCB0aGVcclxuICAgKiBzcGVjaWZpYyAoaW5oZXJpdGVkKSBkZWZhdWx0Q29uZmlnIHdpbGwgYmUgdXNlZC5cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgc2V0RGVmYXVsdENvbmZpZ3VyYXRpb24oKTogdm9pZCB7XHJcbiAgICBpZiAoKCF0aGlzLmNvbmZpZyB8fCB0aGlzLmNvbmZpZyA9PT0gJycpICYmIHRoaXMuZGVmYXVsdENvbmZpZykge1xyXG4gICAgICB0aGlzLmNvbmZpZyA9IHRoaXMuZGVmYXVsdENvbmZpZztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEhlbHBlciBtZXRob2QgdG8gcmV0dXJuIHRoZSBob3N0IGVsZW1lbnQgZm9yIHRoZSBkaXJlY3RpdmVcclxuICAgKiBnaXZlbiBieSB0aGUgYGVsZW1lbnRSZWZgLlxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBnZXQgaG9zdCgpOiBIVE1MRWxlbWVudCB7XHJcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGb3JjZSBhIHRhYmluZGV4IG9uIHRoZSBob3N0IGVsZW1lbnQgaWYgaXQgaXMgX3JlcXVyaWVkXyB0byBtYWtlIHRoZSBlbGVtZW50XHJcbiAgICogZm9jdXNhYmxlLiBJZiB0aGUgZWxlbWVudCBpcyBmb2N1c2FibGUgYnkgbmF0dXJlIG9yIGJ5IGEgZ2l2ZW4gdGFiaW5kZXgsIHRoZVxyXG4gICAqIGB0YWJpbmRleGAgaXMgbm90IGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBCdXR0b25zLCBhY3RpdmUgbGlua3MsIGV0Yy4gZG8gbm8gbmVlZCBhbiBleHBsaWNpdCB0YWJpbmRleCB0byByZWNlaXZlIGZvY3VzLlxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBzZXQgcmVxdWlyZWRUYWJpbmRleCh0YWJpbmRleDogbnVtYmVyKSB7XHJcbiAgICBpZiAodGhpcy5yZXF1aXJlc0V4cGxpY2l0VGFiSW5kZXgpIHtcclxuICAgICAgdGhpcy50YWJpbmRleCA9IHRhYmluZGV4O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBob3N0IGVsZW1lbnQgZG9lcyBub3QgaGF2ZSBhIHRhYmluZGV4IGRlZmluZWRcclxuICAgKiBhbmQgaXQgYWxzbyBkb2Vzbid0IGdldCBmb2N1cyBieSBicm93c2VycyBuYXR1cmUgKGkuZS4gYnV0dG9uIG9yXHJcbiAgICogYWN0aXZlIGxpbmspLlxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBnZXQgcmVxdWlyZXNFeHBsaWNpdFRhYkluZGV4KCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgdGhpcy50YWJpbmRleCA9PT0gdW5kZWZpbmVkICYmXHJcbiAgICAgIFsnYnV0dG9uJywgJ2lucHV0JywgJ3NlbGVjdCcsICd0ZXh0YXJlYSddLmluZGV4T2YoXHJcbiAgICAgICAgdGhpcy5ob3N0LnRhZ05hbWUudG9Mb3dlckNhc2UoKVxyXG4gICAgICApID09PSAtMSAmJlxyXG4gICAgICAhKFxyXG4gICAgICAgIHRoaXMuaG9zdC50YWdOYW1lID09PSAnQScgJiZcclxuICAgICAgICAodGhpcy5ob3N0Lmhhc0F0dHJpYnV0ZSgnaHJlZicpIHx8IHRoaXMuaG9zdC5oYXNBdHRyaWJ1dGUoJ3JvdXRlcmxpbmsnKSlcclxuICAgICAgKVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIl19