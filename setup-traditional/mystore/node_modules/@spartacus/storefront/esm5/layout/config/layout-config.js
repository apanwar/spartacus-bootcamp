import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Config } from '@spartacus/core';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
export var BREAKPOINT;
(function (BREAKPOINT) {
    BREAKPOINT["xs"] = "xs";
    BREAKPOINT["sm"] = "sm";
    BREAKPOINT["md"] = "md";
    BREAKPOINT["lg"] = "lg";
    BREAKPOINT["xl"] = "xl";
})(BREAKPOINT || (BREAKPOINT = {}));
/**
 * The LayoutConfig supports the configuration of page slots by page templates
 * or page sections, such as headers and footers. The configuration also supports
 * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered
 * por a given breakpoint.
 */
var LayoutConfig = /** @class */ (function () {
    function LayoutConfig() {
    }
    LayoutConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function LayoutConfig_Factory() { return i0.ɵɵinject(i1.Config); }, token: LayoutConfig, providedIn: "root" });
    LayoutConfig = __decorate([
        Injectable({
            providedIn: 'root',
            useExisting: Config,
        })
    ], LayoutConfig);
    return LayoutConfig;
}());
export { LayoutConfig };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvc3RvcmVmcm9udC8iLCJzb3VyY2VzIjpbImxheW91dC9jb25maWcvbGF5b3V0LWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUF3QixNQUFNLGlCQUFpQixDQUFDOzs7QUFHL0QsTUFBTSxDQUFOLElBQVksVUFNWDtBQU5ELFdBQVksVUFBVTtJQUNwQix1QkFBUyxDQUFBO0lBQ1QsdUJBQVMsQ0FBQTtJQUNULHVCQUFTLENBQUE7SUFDVCx1QkFBUyxDQUFBO0lBQ1QsdUJBQVMsQ0FBQTtBQUNYLENBQUMsRUFOVyxVQUFVLEtBQVYsVUFBVSxRQU1yQjtBQW1DRDs7Ozs7R0FLRztBQUtIO0lBQUE7S0FnQ0M7O0lBaENxQixZQUFZO1FBSmpDLFVBQVUsQ0FBQztZQUNWLFVBQVUsRUFBRSxNQUFNO1lBQ2xCLFdBQVcsRUFBRSxNQUFNO1NBQ3BCLENBQUM7T0FDb0IsWUFBWSxDQWdDakM7dUJBdkZEO0NBdUZDLEFBaENELElBZ0NDO1NBaENxQixZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb25maWcsIERlZmVyTG9hZGluZ1N0cmF0ZWd5IH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcclxuaW1wb3J0IHsgTGF1bmNoQ29uZmlnIH0gZnJvbSAnLi4vbGF1bmNoLWRpYWxvZy9pbmRleCc7XHJcblxyXG5leHBvcnQgZW51bSBCUkVBS1BPSU5UIHtcclxuICB4cyA9ICd4cycsXHJcbiAgc20gPSAnc20nLFxyXG4gIG1kID0gJ21kJyxcclxuICBsZyA9ICdsZycsXHJcbiAgeGwgPSAneGwnLFxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBMYXlvdXRTZWN0aW9ucyA9XHJcbiAgfCAnaGVhZGVyJ1xyXG4gIHwgJ2Zvb3RlcidcclxuICB8ICdMYW5kaW5nUGFnZTJUZW1wbGF0ZSdcclxuICB8IHN0cmluZztcclxuXHJcbmV4cG9ydCB0eXBlIFNsb3RDb25maWcgPSB7XHJcbiAgLyoqIFRoZSBjbXMgcGFnZSBzbG90cyBhcmUgbWFwcGVkIGJ5IHRoZSBgc2xvdC5wb3NpdGlvbmAuICovXHJcbiAgc2xvdHM/OiBzdHJpbmdbXTtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHBhZ2UgZm9sZCBpZGVudGlmaWVzIHRoZSBsYXN0IGV4cGVjdGVkIHBhZ2Ugc2xvdCBhYm92ZS10aGUtZm9sZC5cclxuICAgKiBJdCdzIHBlcmZlY3RseSBmaW5lIHRvIHNwZWNpZnkgdGhpcyBieSBpZGljYXRpb24sIGhvd2V2ZXIgYSBtb3JlXHJcbiAgICogcHJlY2lzZSBpbmRpY2F0aW9uIHdpbGwgaGF2ZSBhbiBwb3NpdGl2ZSBpbXBhY3Qgb24gcGVyZm9ybWFuY2UuXHJcbiAgICovXHJcbiAgcGFnZUZvbGQ/OiBzdHJpbmc7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBTbG90R3JvdXAgPSB7XHJcbiAgLyoqIFRoZSBwYWdlIHNsb3QgY29uZmlndXJhdGlvbiBmb3IgbGFyZ2Ugc2NyZWVucyAqL1xyXG4gIFtCUkVBS1BPSU5ULmxnXT86IFNsb3RDb25maWc7XHJcbiAgLyoqIFRoZSBwYWdlIHNsb3QgY29uZmlndXJhdGlvbiBmb3IgbWVkaXVtIHNjcmVlbnMgKi9cclxuICBbQlJFQUtQT0lOVC5tZF0/OiBTbG90Q29uZmlnO1xyXG4gIC8qKiBUaGUgcGFnZSBzbG90IGNvbmZpZ3VyYXRpb24gZm9yIHNtYWxsIHNjcmVlbnMgKi9cclxuICBbQlJFQUtQT0lOVC5zbV0/OiBTbG90Q29uZmlnO1xyXG4gIC8qKiBUaGUgcGFnZSBzbG90IGNvbmZpZ3VyYXRpb24gZm9yIGV4dHJhIHNtYWxsIHNjcmVlbnMgKi9cclxuICBbQlJFQUtQT0lOVC54c10/OiBTbG90Q29uZmlnO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgTGF5b3V0U2xvdENvbmZpZyA9IHtcclxuICBbc2VjdGlvbiBpbiBMYXlvdXRTZWN0aW9uc106IFNsb3RDb25maWcgfCBTbG90R3JvdXAgfCBMYXlvdXRTbG90Q29uZmlnO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRoZSBMYXlvdXRDb25maWcgc3VwcG9ydHMgdGhlIGNvbmZpZ3VyYXRpb24gb2YgcGFnZSBzbG90cyBieSBwYWdlIHRlbXBsYXRlc1xyXG4gKiBvciBwYWdlIHNlY3Rpb25zLCBzdWNoIGFzIGhlYWRlcnMgYW5kIGZvb3RlcnMuIFRoZSBjb25maWd1cmF0aW9uIGFsc28gc3VwcG9ydHNcclxuICogYWRhcHRpdmUgZGVzaWduIHBlciBicmVhZHBvaW50IChub3QgcGVyIGRldmljZSB0eXBlKSwgc28gdGhhdCB0aGUgRE9NIGlzIChyZSlyZW5kZXJlZFxyXG4gKiBwb3IgYSBnaXZlbiBicmVha3BvaW50LlxyXG4gKi9cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290JyxcclxuICB1c2VFeGlzdGluZzogQ29uZmlnLFxyXG59KVxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTGF5b3V0Q29uZmlnIHtcclxuICAvKiogVGhlIGJyZWFrcG9pbnQgY29uZmlndXJhdGlvbiBpcyB1c2VkIHdoZW4gdGhlIERPTSBpcyAocmUpcmVuZGVyZWQgaW4gc3BlY2lmaWMgdmlldy5cclxuICAgKiBUaGlzIGFsbG93cyBmb3IgYWRhcHRpdmUgcmVuZGVyaW5nLCBzbyB0aGF0IHRoZSBET00gaXMgcmVuZGVyZWQgZm9yIHNwZWNpZmljIGJyZWFrcG9pbnRzLiAqL1xyXG4gIGJyZWFrcG9pbnRzPzoge1xyXG4gICAgW0JSRUFLUE9JTlQueHNdPzogbnVtYmVyO1xyXG4gICAgW0JSRUFLUE9JTlQuc21dPzogbnVtYmVyO1xyXG4gICAgW0JSRUFLUE9JTlQubWRdPzogbnVtYmVyO1xyXG4gICAgW0JSRUFLUE9JTlQubGddPzogbnVtYmVyO1xyXG4gIH07XHJcbiAgbGF5b3V0U2xvdHM/OiBMYXlvdXRTbG90Q29uZmlnO1xyXG5cclxuICAvKipcclxuICAgKiBEZWZlcnJyZWQgbG9hZGluZyBpcyBhIHRlY2huaXF1ZSB0byBob2xkIG9mIHdpdGggdGhlIGxvYWRpbmcgLyBjcmVhdGlvblxyXG4gICAqIG9mIERPTSBlbGVtZW50cyB3aGljaCBhcmUgbm90IG5vdCBpbiB0aGUgaW5pdGlhbCB2aWV3IHBvcnQuXHJcbiAgICogVGhpcyB0ZWNobmlxdWUgd2lsIGluY3JlYXNlIHBlcmZvcm1hbmNlLlxyXG4gICAqL1xyXG4gIGRlZmVycmVkTG9hZGluZz86IHtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGdsb2JhbCBzdHJhdGVneSB3aWxsIGJlIHVzZWQgYXMgYSBmYWxsYmFjayBzdHJhdGVneSBmb3IgYWxsIERPTSBjcmVhdGlvbixcclxuICAgICAqIGJ1dCBjYW4gYmUgb3ZlcnJpZGVuIGJ5IGxvY2FsIGNvbmZpZ3VyYXRpb24sIGkuZS4gZm9yIGNtcyBjb21wb25lbnRzLlxyXG4gICAgICovXHJcbiAgICBzdHJhdGVneT86IERlZmVyTG9hZGluZ1N0cmF0ZWd5O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgaW50ZXJzZWN0aW9uIG1hcmdpbiBjb250YWlucyB0aGUgb2Zmc2V0IHVzZWQgYnkgdGhlIEludGVyc2VjdGlvbiBPYnNlcnZlclxyXG4gICAgICogdG8gb2JzZXJ2ZSBlbGVtZW50cyBvdXRzaWRlIHRoZSB2aWV3IHBvcnQuXHJcbiAgICAgKlxyXG4gICAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9JbnRlcnNlY3Rpb25PYnNlcnZlci9yb290TWFyZ2luXHJcbiAgICAgKi9cclxuICAgIGludGVyc2VjdGlvbk1hcmdpbj86IHN0cmluZztcclxuICB9O1xyXG5cclxuICBsYXVuY2g/OiBMYXVuY2hDb25maWc7XHJcbn1cclxuIl19