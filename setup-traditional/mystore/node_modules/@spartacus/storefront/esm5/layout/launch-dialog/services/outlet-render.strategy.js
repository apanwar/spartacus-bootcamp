import { __decorate, __extends, __param } from "tslib";
import { DOCUMENT } from '@angular/common';
import { ComponentFactory, ComponentFactoryResolver, ComponentRef, Inject, Injectable, RendererFactory2, } from '@angular/core';
import { map, tap } from 'rxjs/operators';
import { OutletPosition, OutletService, } from '../../../cms-structure/outlet/index';
import { OutletRendererService } from '../../../cms-structure/outlet/outlet-renderer.service';
import { LaunchRenderStrategy } from './launch-render.strategy';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../../../cms-structure/outlet/outlet.service";
import * as i3 from "../../../cms-structure/outlet/outlet-renderer.service";
var OutletRenderStrategy = /** @class */ (function (_super) {
    __extends(OutletRenderStrategy, _super);
    function OutletRenderStrategy(document, rendererFactory, outletService, componentFactoryResolver, outletRendererService) {
        var _this = _super.call(this, document, rendererFactory) || this;
        _this.document = document;
        _this.rendererFactory = rendererFactory;
        _this.outletService = outletService;
        _this.componentFactoryResolver = componentFactoryResolver;
        _this.outletRendererService = outletRendererService;
        return _this;
    }
    /**
     * Renders the element in the configured outlet
     *
     * @param config
     * @param caller
     * @param vcr
     */
    OutletRenderStrategy.prototype.render = function (config, caller) {
        var _this = this;
        if (this.shouldRender(caller, config)) {
            var template_1 = this.componentFactoryResolver.resolveComponentFactory(config.component);
            this.outletService.add(config.outlet, template_1, config.position ? config.position : OutletPosition.BEFORE);
            this.outletRendererService.render(config.outlet);
            this.renderedCallers.push({ caller: caller });
            return this.outletRendererService.getOutletRef(config.outlet).pipe(map(function (outletDirective) {
                var components = outletDirective.renderedComponents.get(config.position ? config.position : OutletPosition.BEFORE);
                return components
                    .reverse()
                    .find(function (component) { return component.componentType === template_1.componentType; });
            }), tap(function (component) {
                if (config === null || config === void 0 ? void 0 : config.dialogType) {
                    _this.applyClasses(component, config === null || config === void 0 ? void 0 : config.dialogType);
                }
            }));
        }
    };
    OutletRenderStrategy.prototype.hasMatch = function (config) {
        return Boolean(config.outlet);
    };
    OutletRenderStrategy.prototype.remove = function (caller, config) {
        var template = this.componentFactoryResolver.resolveComponentFactory(config.component);
        this.outletService.remove(config.outlet, config.position ? config.position : OutletPosition.BEFORE, template);
        _super.prototype.remove.call(this, caller, config);
    };
    OutletRenderStrategy.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: RendererFactory2 },
        { type: OutletService },
        { type: ComponentFactoryResolver },
        { type: OutletRendererService }
    ]; };
    OutletRenderStrategy.ɵprov = i0.ɵɵdefineInjectable({ factory: function OutletRenderStrategy_Factory() { return new OutletRenderStrategy(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.RendererFactory2), i0.ɵɵinject(i2.OutletService), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i3.OutletRendererService)); }, token: OutletRenderStrategy, providedIn: "root" });
    OutletRenderStrategy = __decorate([
        Injectable({ providedIn: 'root' }),
        __param(0, Inject(DOCUMENT))
    ], OutletRenderStrategy);
    return OutletRenderStrategy;
}(LaunchRenderStrategy));
export { OutletRenderStrategy };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0bGV0LXJlbmRlci5zdHJhdGVneS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvc3RvcmVmcm9udC8iLCJzb3VyY2VzIjpbImxheW91dC9sYXVuY2gtZGlhbG9nL3NlcnZpY2VzL291dGxldC1yZW5kZXIuc3RyYXRlZ3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLHdCQUF3QixFQUN4QixZQUFZLEVBQ1osTUFBTSxFQUNOLFVBQVUsRUFDVixnQkFBZ0IsR0FDakIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLEVBQ0wsY0FBYyxFQUNkLGFBQWEsR0FDZCxNQUFNLHFDQUFxQyxDQUFDO0FBQzdDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBRTlGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDOzs7OztBQUdoRTtJQUEwQyx3Q0FBb0I7SUFDNUQsOEJBQzhCLFFBQWEsRUFDL0IsZUFBaUMsRUFDakMsYUFBbUQsRUFDbkQsd0JBQWtELEVBQ2xELHFCQUE0QztRQUx4RCxZQU9FLGtCQUFNLFFBQVEsRUFBRSxlQUFlLENBQUMsU0FDakM7UUFQNkIsY0FBUSxHQUFSLFFBQVEsQ0FBSztRQUMvQixxQkFBZSxHQUFmLGVBQWUsQ0FBa0I7UUFDakMsbUJBQWEsR0FBYixhQUFhLENBQXNDO1FBQ25ELDhCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMEI7UUFDbEQsMkJBQXFCLEdBQXJCLHFCQUFxQixDQUF1Qjs7SUFHeEQsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILHFDQUFNLEdBQU4sVUFDRSxNQUEwQixFQUMxQixNQUE4QjtRQUZoQyxpQkFtQ0M7UUEvQkMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsRUFBRTtZQUNyQyxJQUFNLFVBQVEsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsdUJBQXVCLENBQ3BFLE1BQU0sQ0FBQyxTQUFTLENBQ2pCLENBQUM7WUFDRixJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FDcEIsTUFBTSxDQUFDLE1BQU0sRUFDYixVQUFRLEVBQ1IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FDMUQsQ0FBQztZQUNGLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2pELElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxRQUFBLEVBQUUsQ0FBQyxDQUFDO1lBRXRDLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUNoRSxHQUFHLENBQUMsVUFBQyxlQUFlO2dCQUNsQixJQUFNLFVBQVUsR0FBRyxlQUFlLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUN2RCxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUNuQyxDQUFDO2dCQUV6QixPQUFPLFVBQVU7cUJBQ2QsT0FBTyxFQUFFO3FCQUNULElBQUksQ0FDSCxVQUFDLFNBQVMsSUFBSyxPQUFBLFNBQVMsQ0FBQyxhQUFhLEtBQUssVUFBUSxDQUFDLGFBQWEsRUFBbEQsQ0FBa0QsQ0FDbEUsQ0FBQztZQUNOLENBQUMsQ0FBQyxFQUNGLEdBQUcsQ0FBQyxVQUFDLFNBQVM7Z0JBQ1osSUFBSSxNQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUUsVUFBVSxFQUFFO29CQUN0QixLQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxNQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUUsVUFBVSxDQUFDLENBQUM7aUJBQ2xEO1lBQ0gsQ0FBQyxDQUFDLENBQ0gsQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVELHVDQUFRLEdBQVIsVUFBUyxNQUEwQjtRQUNqQyxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELHFDQUFNLEdBQU4sVUFBTyxNQUE4QixFQUFFLE1BQTBCO1FBQy9ELElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyx1QkFBdUIsQ0FDcEUsTUFBTSxDQUFDLFNBQVMsQ0FDakIsQ0FBQztRQUVGLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUN2QixNQUFNLENBQUMsTUFBTSxFQUNiLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQ3pELFFBQVEsQ0FDVCxDQUFDO1FBRUYsaUJBQU0sTUFBTSxZQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMvQixDQUFDOztnREFyRUUsTUFBTSxTQUFDLFFBQVE7Z0JBQ1csZ0JBQWdCO2dCQUNsQixhQUFhO2dCQUNGLHdCQUF3QjtnQkFDM0IscUJBQXFCOzs7SUFON0Msb0JBQW9CO1FBRGhDLFVBQVUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsQ0FBQztRQUc5QixXQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQTtPQUZSLG9CQUFvQixDQXdFaEM7K0JBNUZEO0NBNEZDLEFBeEVELENBQTBDLG9CQUFvQixHQXdFN0Q7U0F4RVksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQge1xyXG4gIENvbXBvbmVudEZhY3RvcnksXHJcbiAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxyXG4gIENvbXBvbmVudFJlZixcclxuICBJbmplY3QsXHJcbiAgSW5qZWN0YWJsZSxcclxuICBSZW5kZXJlckZhY3RvcnkyLFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQge1xyXG4gIE91dGxldFBvc2l0aW9uLFxyXG4gIE91dGxldFNlcnZpY2UsXHJcbn0gZnJvbSAnLi4vLi4vLi4vY21zLXN0cnVjdHVyZS9vdXRsZXQvaW5kZXgnO1xyXG5pbXBvcnQgeyBPdXRsZXRSZW5kZXJlclNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9jbXMtc3RydWN0dXJlL291dGxldC9vdXRsZXQtcmVuZGVyZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IExhdW5jaE91dGxldERpYWxvZywgTEFVTkNIX0NBTExFUiB9IGZyb20gJy4uL2NvbmZpZy9pbmRleCc7XHJcbmltcG9ydCB7IExhdW5jaFJlbmRlclN0cmF0ZWd5IH0gZnJvbSAnLi9sYXVuY2gtcmVuZGVyLnN0cmF0ZWd5JztcclxuXHJcbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXHJcbmV4cG9ydCBjbGFzcyBPdXRsZXRSZW5kZXJTdHJhdGVneSBleHRlbmRzIExhdW5jaFJlbmRlclN0cmF0ZWd5IHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBJbmplY3QoRE9DVU1FTlQpIHByb3RlY3RlZCBkb2N1bWVudDogYW55LFxyXG4gICAgcHJvdGVjdGVkIHJlbmRlcmVyRmFjdG9yeTogUmVuZGVyZXJGYWN0b3J5MixcclxuICAgIHByb3RlY3RlZCBvdXRsZXRTZXJ2aWNlOiBPdXRsZXRTZXJ2aWNlPENvbXBvbmVudEZhY3Rvcnk8YW55Pj4sXHJcbiAgICBwcm90ZWN0ZWQgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXHJcbiAgICBwcm90ZWN0ZWQgb3V0bGV0UmVuZGVyZXJTZXJ2aWNlOiBPdXRsZXRSZW5kZXJlclNlcnZpY2VcclxuICApIHtcclxuICAgIHN1cGVyKGRvY3VtZW50LCByZW5kZXJlckZhY3RvcnkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVuZGVycyB0aGUgZWxlbWVudCBpbiB0aGUgY29uZmlndXJlZCBvdXRsZXRcclxuICAgKlxyXG4gICAqIEBwYXJhbSBjb25maWdcclxuICAgKiBAcGFyYW0gY2FsbGVyXHJcbiAgICogQHBhcmFtIHZjclxyXG4gICAqL1xyXG4gIHJlbmRlcihcclxuICAgIGNvbmZpZzogTGF1bmNoT3V0bGV0RGlhbG9nLFxyXG4gICAgY2FsbGVyOiBMQVVOQ0hfQ0FMTEVSIHwgc3RyaW5nXHJcbiAgKTogT2JzZXJ2YWJsZTxDb21wb25lbnRSZWY8YW55Pj4ge1xyXG4gICAgaWYgKHRoaXMuc2hvdWxkUmVuZGVyKGNhbGxlciwgY29uZmlnKSkge1xyXG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KFxyXG4gICAgICAgIGNvbmZpZy5jb21wb25lbnRcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5vdXRsZXRTZXJ2aWNlLmFkZChcclxuICAgICAgICBjb25maWcub3V0bGV0LFxyXG4gICAgICAgIHRlbXBsYXRlLFxyXG4gICAgICAgIGNvbmZpZy5wb3NpdGlvbiA/IGNvbmZpZy5wb3NpdGlvbiA6IE91dGxldFBvc2l0aW9uLkJFRk9SRVxyXG4gICAgICApO1xyXG4gICAgICB0aGlzLm91dGxldFJlbmRlcmVyU2VydmljZS5yZW5kZXIoY29uZmlnLm91dGxldCk7XHJcbiAgICAgIHRoaXMucmVuZGVyZWRDYWxsZXJzLnB1c2goeyBjYWxsZXIgfSk7XHJcblxyXG4gICAgICByZXR1cm4gdGhpcy5vdXRsZXRSZW5kZXJlclNlcnZpY2UuZ2V0T3V0bGV0UmVmKGNvbmZpZy5vdXRsZXQpLnBpcGUoXHJcbiAgICAgICAgbWFwKChvdXRsZXREaXJlY3RpdmUpID0+IHtcclxuICAgICAgICAgIGNvbnN0IGNvbXBvbmVudHMgPSBvdXRsZXREaXJlY3RpdmUucmVuZGVyZWRDb21wb25lbnRzLmdldChcclxuICAgICAgICAgICAgY29uZmlnLnBvc2l0aW9uID8gY29uZmlnLnBvc2l0aW9uIDogT3V0bGV0UG9zaXRpb24uQkVGT1JFXHJcbiAgICAgICAgICApIGFzIENvbXBvbmVudFJlZjxhbnk+W107XHJcblxyXG4gICAgICAgICAgcmV0dXJuIGNvbXBvbmVudHNcclxuICAgICAgICAgICAgLnJldmVyc2UoKVxyXG4gICAgICAgICAgICAuZmluZChcclxuICAgICAgICAgICAgICAoY29tcG9uZW50KSA9PiBjb21wb25lbnQuY29tcG9uZW50VHlwZSA9PT0gdGVtcGxhdGUuY29tcG9uZW50VHlwZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0pLFxyXG4gICAgICAgIHRhcCgoY29tcG9uZW50KSA9PiB7XHJcbiAgICAgICAgICBpZiAoY29uZmlnPy5kaWFsb2dUeXBlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwbHlDbGFzc2VzKGNvbXBvbmVudCwgY29uZmlnPy5kaWFsb2dUeXBlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGFzTWF0Y2goY29uZmlnOiBMYXVuY2hPdXRsZXREaWFsb2cpIHtcclxuICAgIHJldHVybiBCb29sZWFuKGNvbmZpZy5vdXRsZXQpO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlKGNhbGxlcjogTEFVTkNIX0NBTExFUiB8IHN0cmluZywgY29uZmlnOiBMYXVuY2hPdXRsZXREaWFsb2cpOiB2b2lkIHtcclxuICAgIGNvbnN0IHRlbXBsYXRlID0gdGhpcy5jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoXHJcbiAgICAgIGNvbmZpZy5jb21wb25lbnRcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5vdXRsZXRTZXJ2aWNlLnJlbW92ZShcclxuICAgICAgY29uZmlnLm91dGxldCxcclxuICAgICAgY29uZmlnLnBvc2l0aW9uID8gY29uZmlnLnBvc2l0aW9uIDogT3V0bGV0UG9zaXRpb24uQkVGT1JFLFxyXG4gICAgICB0ZW1wbGF0ZVxyXG4gICAgKTtcclxuXHJcbiAgICBzdXBlci5yZW1vdmUoY2FsbGVyLCBjb25maWcpO1xyXG4gIH1cclxufVxyXG4iXX0=