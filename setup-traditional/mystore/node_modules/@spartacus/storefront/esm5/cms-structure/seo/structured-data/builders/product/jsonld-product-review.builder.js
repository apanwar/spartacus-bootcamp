import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Product, ProductReviewService, Review } from '@spartacus/core';
import { filter, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
/**
 * Builds the structured data for the product reviews, see https://schema.org/Review.
 * The data includes the aggregated product rating and the individual reviews.
 */
var JsonLdProductReviewBuilder = /** @class */ (function () {
    function JsonLdProductReviewBuilder(reviewService) {
        this.reviewService = reviewService;
    }
    JsonLdProductReviewBuilder.prototype.build = function (product) {
        var _this = this;
        return this.reviewService.getByProductCode(product.code).pipe(filter(Boolean), map(function (reviews) {
            return {
                aggregateRating: _this.buildAggregatedReviews(product, reviews),
                review: reviews.map(function (review) { return _this.buildReviews(review); }),
            };
        }));
    };
    JsonLdProductReviewBuilder.prototype.buildAggregatedReviews = function (product, reviews) {
        var aggregated = {
            '@type': 'AggregateRating',
        };
        if (product.averageRating) {
            aggregated.ratingValue = product.averageRating;
        }
        if (reviews) {
            aggregated.ratingCount = reviews.filter(function (rev) { return !!rev.rating; }).length;
            aggregated.reviewCount = reviews.filter(function (rev) { return !!rev.comment; }).length;
        }
        return aggregated;
    };
    JsonLdProductReviewBuilder.prototype.buildReviews = function (review) {
        var reviewSchema = {
            '@type': 'review',
        };
        if (review.principal && review.principal.name) {
            reviewSchema.author = review.principal.name;
        }
        if (review.date) {
            var date = new Date(review.date);
            reviewSchema.datePublished = date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate();
        }
        if (review.headline) {
            reviewSchema.name = review.headline;
        }
        if (review.comment) {
            reviewSchema.description = review.comment;
        }
        if (review.rating) {
            reviewSchema.reviewRating = {
                '@type': 'Rating',
                ratingValue: review.rating.toString(),
            };
        }
        return reviewSchema;
    };
    JsonLdProductReviewBuilder.ctorParameters = function () { return [
        { type: ProductReviewService }
    ]; };
    JsonLdProductReviewBuilder.ɵprov = i0.ɵɵdefineInjectable({ factory: function JsonLdProductReviewBuilder_Factory() { return new JsonLdProductReviewBuilder(i0.ɵɵinject(i1.ProductReviewService)); }, token: JsonLdProductReviewBuilder, providedIn: "root" });
    JsonLdProductReviewBuilder = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], JsonLdProductReviewBuilder);
    return JsonLdProductReviewBuilder;
}());
export { JsonLdProductReviewBuilder };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbmxkLXByb2R1Y3QtcmV2aWV3LmJ1aWxkZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL3N0b3JlZnJvbnQvIiwic291cmNlcyI6WyJjbXMtc3RydWN0dXJlL3Nlby9zdHJ1Y3R1cmVkLWRhdGEvYnVpbGRlcnMvcHJvZHVjdC9qc29ubGQtcHJvZHVjdC1yZXZpZXcuYnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXhFLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQUc3Qzs7O0dBR0c7QUFJSDtJQUNFLG9DQUFvQixhQUFtQztRQUFuQyxrQkFBYSxHQUFiLGFBQWEsQ0FBc0I7SUFBRyxDQUFDO0lBRTNELDBDQUFLLEdBQUwsVUFBTSxPQUFnQjtRQUF0QixpQkFVQztRQVRDLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUMzRCxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQ2YsR0FBRyxDQUFDLFVBQUMsT0FBaUI7WUFDcEIsT0FBTztnQkFDTCxlQUFlLEVBQUUsS0FBSSxDQUFDLHNCQUFzQixDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUM7Z0JBQzlELE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQUMsTUFBTSxJQUFLLE9BQUEsS0FBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBekIsQ0FBeUIsQ0FBQzthQUMzRCxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFTywyREFBc0IsR0FBOUIsVUFBK0IsT0FBZ0IsRUFBRSxPQUFpQjtRQUNoRSxJQUFNLFVBQVUsR0FBUTtZQUN0QixPQUFPLEVBQUUsaUJBQWlCO1NBQzNCLENBQUM7UUFDRixJQUFJLE9BQU8sQ0FBQyxhQUFhLEVBQUU7WUFDekIsVUFBVSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDO1NBQ2hEO1FBQ0QsSUFBSSxPQUFPLEVBQUU7WUFDWCxVQUFVLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBQyxHQUFHLElBQUssT0FBQSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBWixDQUFZLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDdEUsVUFBVSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQUMsR0FBRyxJQUFLLE9BQUEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQWIsQ0FBYSxDQUFDLENBQUMsTUFBTSxDQUFDO1NBQ3hFO1FBQ0QsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztJQUVPLGlEQUFZLEdBQXBCLFVBQXFCLE1BQWM7UUFDakMsSUFBTSxZQUFZLEdBQVE7WUFDeEIsT0FBTyxFQUFFLFFBQVE7U0FDbEIsQ0FBQztRQUVGLElBQUksTUFBTSxDQUFDLFNBQVMsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRTtZQUM3QyxZQUFZLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO1NBQzdDO1FBQ0QsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFO1lBQ2YsSUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ25DLFlBQVksQ0FBQyxhQUFhLEdBQU0sSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUNoRCxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxVQUNqQixJQUFJLENBQUMsT0FBTyxFQUFJLENBQUM7U0FDdEI7UUFDRCxJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDbkIsWUFBWSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO1NBQ3JDO1FBQ0QsSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFO1lBQ2xCLFlBQVksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztTQUMzQztRQUNELElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUNqQixZQUFZLENBQUMsWUFBWSxHQUFHO2dCQUMxQixPQUFPLEVBQUUsUUFBUTtnQkFDakIsV0FBVyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO2FBQ3RDLENBQUM7U0FDSDtRQUVELE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7O2dCQXhEa0Msb0JBQW9COzs7SUFENUMsMEJBQTBCO1FBSHRDLFVBQVUsQ0FBQztZQUNWLFVBQVUsRUFBRSxNQUFNO1NBQ25CLENBQUM7T0FDVywwQkFBMEIsQ0EwRHRDO3FDQXZFRDtDQXVFQyxBQTFERCxJQTBEQztTQTFEWSwwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFByb2R1Y3QsIFByb2R1Y3RSZXZpZXdTZXJ2aWNlLCBSZXZpZXcgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGZpbHRlciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBKc29uTGRCdWlsZGVyIH0gZnJvbSAnLi4vc2NoZW1hLmludGVyZmFjZSc7XHJcblxyXG4vKipcclxuICogQnVpbGRzIHRoZSBzdHJ1Y3R1cmVkIGRhdGEgZm9yIHRoZSBwcm9kdWN0IHJldmlld3MsIHNlZSBodHRwczovL3NjaGVtYS5vcmcvUmV2aWV3LlxyXG4gKiBUaGUgZGF0YSBpbmNsdWRlcyB0aGUgYWdncmVnYXRlZCBwcm9kdWN0IHJhdGluZyBhbmQgdGhlIGluZGl2aWR1YWwgcmV2aWV3cy5cclxuICovXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBKc29uTGRQcm9kdWN0UmV2aWV3QnVpbGRlciBpbXBsZW1lbnRzIEpzb25MZEJ1aWxkZXI8UHJvZHVjdD4ge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmV2aWV3U2VydmljZTogUHJvZHVjdFJldmlld1NlcnZpY2UpIHt9XHJcblxyXG4gIGJ1aWxkKHByb2R1Y3Q6IFByb2R1Y3QpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMucmV2aWV3U2VydmljZS5nZXRCeVByb2R1Y3RDb2RlKHByb2R1Y3QuY29kZSkucGlwZShcclxuICAgICAgZmlsdGVyKEJvb2xlYW4pLFxyXG4gICAgICBtYXAoKHJldmlld3M6IFJldmlld1tdKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIGFnZ3JlZ2F0ZVJhdGluZzogdGhpcy5idWlsZEFnZ3JlZ2F0ZWRSZXZpZXdzKHByb2R1Y3QsIHJldmlld3MpLFxyXG4gICAgICAgICAgcmV2aWV3OiByZXZpZXdzLm1hcCgocmV2aWV3KSA9PiB0aGlzLmJ1aWxkUmV2aWV3cyhyZXZpZXcpKSxcclxuICAgICAgICB9O1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYnVpbGRBZ2dyZWdhdGVkUmV2aWV3cyhwcm9kdWN0OiBQcm9kdWN0LCByZXZpZXdzOiBSZXZpZXdbXSkge1xyXG4gICAgY29uc3QgYWdncmVnYXRlZDogYW55ID0ge1xyXG4gICAgICAnQHR5cGUnOiAnQWdncmVnYXRlUmF0aW5nJyxcclxuICAgIH07XHJcbiAgICBpZiAocHJvZHVjdC5hdmVyYWdlUmF0aW5nKSB7XHJcbiAgICAgIGFnZ3JlZ2F0ZWQucmF0aW5nVmFsdWUgPSBwcm9kdWN0LmF2ZXJhZ2VSYXRpbmc7XHJcbiAgICB9XHJcbiAgICBpZiAocmV2aWV3cykge1xyXG4gICAgICBhZ2dyZWdhdGVkLnJhdGluZ0NvdW50ID0gcmV2aWV3cy5maWx0ZXIoKHJldikgPT4gISFyZXYucmF0aW5nKS5sZW5ndGg7XHJcbiAgICAgIGFnZ3JlZ2F0ZWQucmV2aWV3Q291bnQgPSByZXZpZXdzLmZpbHRlcigocmV2KSA9PiAhIXJldi5jb21tZW50KS5sZW5ndGg7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYWdncmVnYXRlZDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYnVpbGRSZXZpZXdzKHJldmlldzogUmV2aWV3KSB7XHJcbiAgICBjb25zdCByZXZpZXdTY2hlbWE6IGFueSA9IHtcclxuICAgICAgJ0B0eXBlJzogJ3JldmlldycsXHJcbiAgICB9O1xyXG5cclxuICAgIGlmIChyZXZpZXcucHJpbmNpcGFsICYmIHJldmlldy5wcmluY2lwYWwubmFtZSkge1xyXG4gICAgICByZXZpZXdTY2hlbWEuYXV0aG9yID0gcmV2aWV3LnByaW5jaXBhbC5uYW1lO1xyXG4gICAgfVxyXG4gICAgaWYgKHJldmlldy5kYXRlKSB7XHJcbiAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShyZXZpZXcuZGF0ZSk7XHJcbiAgICAgIHJldmlld1NjaGVtYS5kYXRlUHVibGlzaGVkID0gYCR7ZGF0ZS5nZXRGdWxsWWVhcigpfS0ke1xyXG4gICAgICAgIGRhdGUuZ2V0TW9udGgoKSArIDFcclxuICAgICAgfS0ke2RhdGUuZ2V0RGF0ZSgpfWA7XHJcbiAgICB9XHJcbiAgICBpZiAocmV2aWV3LmhlYWRsaW5lKSB7XHJcbiAgICAgIHJldmlld1NjaGVtYS5uYW1lID0gcmV2aWV3LmhlYWRsaW5lO1xyXG4gICAgfVxyXG4gICAgaWYgKHJldmlldy5jb21tZW50KSB7XHJcbiAgICAgIHJldmlld1NjaGVtYS5kZXNjcmlwdGlvbiA9IHJldmlldy5jb21tZW50O1xyXG4gICAgfVxyXG4gICAgaWYgKHJldmlldy5yYXRpbmcpIHtcclxuICAgICAgcmV2aWV3U2NoZW1hLnJldmlld1JhdGluZyA9IHtcclxuICAgICAgICAnQHR5cGUnOiAnUmF0aW5nJyxcclxuICAgICAgICByYXRpbmdWYWx1ZTogcmV2aWV3LnJhdGluZy50b1N0cmluZygpLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXZpZXdTY2hlbWE7XHJcbiAgfVxyXG59XHJcbiJdfQ==