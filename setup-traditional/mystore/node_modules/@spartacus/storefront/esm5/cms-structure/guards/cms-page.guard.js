import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { CmsActivatedRouteSnapshot, CmsService, ProtectedRoutesGuard, RouteLoadStrategy, RoutingConfigService, RoutingService, } from '@spartacus/core';
import { of } from 'rxjs';
import { first, switchMap } from 'rxjs/operators';
import { CmsPageGuardService } from './cms-page-guard.service';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "./cms-page-guard.service";
var CmsPageGuard = /** @class */ (function () {
    function CmsPageGuard(routingService, cmsService, protectedRoutesGuard, service, routingConfig) {
        this.routingService = routingService;
        this.cmsService = cmsService;
        this.protectedRoutesGuard = protectedRoutesGuard;
        this.service = service;
        this.routingConfig = routingConfig;
    }
    /**
     * Tries to load the CMS page data for the anticipated route and returns:
     * - `true` - if it can be activated
     * - `false` - if it cannot be activated
     * - `UrlTree` - if user should be redirected to a given `UrlTree`
     *
     * If the route can be activated, it fires additional calculations on the CMS components present on this CMS page,
     * based on their configuration (`cmsComponents` config).
     *
     * For more, see docs of the `CmsPageGuardService.canActivatePage`.
     */
    CmsPageGuard.prototype.canActivate = function (route, state) {
        var _this = this;
        return this.protectedRoutesGuard.canActivate(route).pipe(switchMap(function (canActivate) {
            return canActivate
                ? _this.routingService.getNextPageContext().pipe(switchMap(function (pageContext) {
                    return _this.cmsService.getPage(pageContext, _this.shouldReload()).pipe(first(), switchMap(function (pageData) {
                        return pageData
                            ? _this.service.canActivatePage(pageContext, pageData, route, state)
                            : _this.service.canActivateNotFoundPage(pageContext, route, state);
                    }));
                }))
                : of(false);
        }));
    };
    /**
     * Returns whether we should reload the CMS page data, even when it was loaded before.
     */
    CmsPageGuard.prototype.shouldReload = function () {
        return this.routingConfig.getLoadStrategy() !== "once" /* ONCE */;
    };
    CmsPageGuard.guardName = 'CmsPageGuard';
    CmsPageGuard.ctorParameters = function () { return [
        { type: RoutingService },
        { type: CmsService },
        { type: ProtectedRoutesGuard },
        { type: CmsPageGuardService },
        { type: RoutingConfigService }
    ]; };
    CmsPageGuard.ɵprov = i0.ɵɵdefineInjectable({ factory: function CmsPageGuard_Factory() { return new CmsPageGuard(i0.ɵɵinject(i1.RoutingService), i0.ɵɵinject(i1.CmsService), i0.ɵɵinject(i1.ProtectedRoutesGuard), i0.ɵɵinject(i2.CmsPageGuardService), i0.ɵɵinject(i1.RoutingConfigService)); }, token: CmsPageGuard, providedIn: "root" });
    CmsPageGuard = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], CmsPageGuard);
    return CmsPageGuard;
}());
export { CmsPageGuard };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY21zLXBhZ2UuZ3VhcmQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL3N0b3JlZnJvbnQvIiwic291cmNlcyI6WyJjbXMtc3RydWN0dXJlL2d1YXJkcy9jbXMtcGFnZS5ndWFyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQ0wseUJBQXlCLEVBQ3pCLFVBQVUsRUFDVixvQkFBb0IsRUFDcEIsaUJBQWlCLEVBQ2pCLG9CQUFvQixFQUNwQixjQUFjLEdBQ2YsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7Ozs7QUFLL0Q7SUFHRSxzQkFDWSxjQUE4QixFQUM5QixVQUFzQixFQUN0QixvQkFBMEMsRUFDMUMsT0FBNEIsRUFDNUIsYUFBbUM7UUFKbkMsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQUMxQyxZQUFPLEdBQVAsT0FBTyxDQUFxQjtRQUM1QixrQkFBYSxHQUFiLGFBQWEsQ0FBc0I7SUFDNUMsQ0FBQztJQUVKOzs7Ozs7Ozs7O09BVUc7SUFDSCxrQ0FBVyxHQUFYLFVBQ0UsS0FBZ0MsRUFDaEMsS0FBMEI7UUFGNUIsaUJBK0JDO1FBM0JDLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQ3RELFNBQVMsQ0FBQyxVQUFDLFdBQVc7WUFDcEIsT0FBQSxXQUFXO2dCQUNULENBQUMsQ0FBQyxLQUFJLENBQUMsY0FBYyxDQUFDLGtCQUFrQixFQUFFLENBQUMsSUFBSSxDQUMzQyxTQUFTLENBQUMsVUFBQyxXQUFXO29CQUNwQixPQUFBLEtBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxLQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQzVELEtBQUssRUFBRSxFQUNQLFNBQVMsQ0FBQyxVQUFDLFFBQVE7d0JBQ2pCLE9BQUEsUUFBUTs0QkFDTixDQUFDLENBQUMsS0FBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQzFCLFdBQVcsRUFDWCxRQUFRLEVBQ1IsS0FBSyxFQUNMLEtBQUssQ0FDTjs0QkFDSCxDQUFDLENBQUMsS0FBSSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FDbEMsV0FBVyxFQUNYLEtBQUssRUFDTCxLQUFLLENBQ047b0JBWEwsQ0FXSyxDQUNOLENBQ0Y7Z0JBaEJELENBZ0JDLENBQ0YsQ0FDRjtnQkFDSCxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQztRQXRCYixDQXNCYSxDQUNkLENBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNLLG1DQUFZLEdBQXBCO1FBQ0UsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFBRSxzQkFBMkIsQ0FBQztJQUN6RSxDQUFDO0lBM0RNLHNCQUFTLEdBQUcsY0FBYyxDQUFDOztnQkFHTixjQUFjO2dCQUNsQixVQUFVO2dCQUNBLG9CQUFvQjtnQkFDakMsbUJBQW1CO2dCQUNiLG9CQUFvQjs7O0lBUnBDLFlBQVk7UUFIeEIsVUFBVSxDQUFDO1lBQ1YsVUFBVSxFQUFFLE1BQU07U0FDbkIsQ0FBQztPQUNXLFlBQVksQ0E2RHhCO3VCQTlFRDtDQThFQyxBQTdERCxJQTZEQztTQTdEWSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDYW5BY3RpdmF0ZSwgUm91dGVyU3RhdGVTbmFwc2hvdCwgVXJsVHJlZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7XHJcbiAgQ21zQWN0aXZhdGVkUm91dGVTbmFwc2hvdCxcclxuICBDbXNTZXJ2aWNlLFxyXG4gIFByb3RlY3RlZFJvdXRlc0d1YXJkLFxyXG4gIFJvdXRlTG9hZFN0cmF0ZWd5LFxyXG4gIFJvdXRpbmdDb25maWdTZXJ2aWNlLFxyXG4gIFJvdXRpbmdTZXJ2aWNlLFxyXG59IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGZpcnN0LCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IENtc1BhZ2VHdWFyZFNlcnZpY2UgfSBmcm9tICcuL2Ntcy1wYWdlLWd1YXJkLnNlcnZpY2UnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIENtc1BhZ2VHdWFyZCBpbXBsZW1lbnRzIENhbkFjdGl2YXRlIHtcclxuICBzdGF0aWMgZ3VhcmROYW1lID0gJ0Ntc1BhZ2VHdWFyZCc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJvdGVjdGVkIHJvdXRpbmdTZXJ2aWNlOiBSb3V0aW5nU2VydmljZSxcclxuICAgIHByb3RlY3RlZCBjbXNTZXJ2aWNlOiBDbXNTZXJ2aWNlLFxyXG4gICAgcHJvdGVjdGVkIHByb3RlY3RlZFJvdXRlc0d1YXJkOiBQcm90ZWN0ZWRSb3V0ZXNHdWFyZCxcclxuICAgIHByb3RlY3RlZCBzZXJ2aWNlOiBDbXNQYWdlR3VhcmRTZXJ2aWNlLFxyXG4gICAgcHJvdGVjdGVkIHJvdXRpbmdDb25maWc6IFJvdXRpbmdDb25maWdTZXJ2aWNlXHJcbiAgKSB7fVxyXG5cclxuICAvKipcclxuICAgKiBUcmllcyB0byBsb2FkIHRoZSBDTVMgcGFnZSBkYXRhIGZvciB0aGUgYW50aWNpcGF0ZWQgcm91dGUgYW5kIHJldHVybnM6XHJcbiAgICogLSBgdHJ1ZWAgLSBpZiBpdCBjYW4gYmUgYWN0aXZhdGVkXHJcbiAgICogLSBgZmFsc2VgIC0gaWYgaXQgY2Fubm90IGJlIGFjdGl2YXRlZFxyXG4gICAqIC0gYFVybFRyZWVgIC0gaWYgdXNlciBzaG91bGQgYmUgcmVkaXJlY3RlZCB0byBhIGdpdmVuIGBVcmxUcmVlYFxyXG4gICAqXHJcbiAgICogSWYgdGhlIHJvdXRlIGNhbiBiZSBhY3RpdmF0ZWQsIGl0IGZpcmVzIGFkZGl0aW9uYWwgY2FsY3VsYXRpb25zIG9uIHRoZSBDTVMgY29tcG9uZW50cyBwcmVzZW50IG9uIHRoaXMgQ01TIHBhZ2UsXHJcbiAgICogYmFzZWQgb24gdGhlaXIgY29uZmlndXJhdGlvbiAoYGNtc0NvbXBvbmVudHNgIGNvbmZpZykuXHJcbiAgICpcclxuICAgKiBGb3IgbW9yZSwgc2VlIGRvY3Mgb2YgdGhlIGBDbXNQYWdlR3VhcmRTZXJ2aWNlLmNhbkFjdGl2YXRlUGFnZWAuXHJcbiAgICovXHJcbiAgY2FuQWN0aXZhdGUoXHJcbiAgICByb3V0ZTogQ21zQWN0aXZhdGVkUm91dGVTbmFwc2hvdCxcclxuICAgIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90XHJcbiAgKTogT2JzZXJ2YWJsZTxib29sZWFuIHwgVXJsVHJlZT4ge1xyXG4gICAgcmV0dXJuIHRoaXMucHJvdGVjdGVkUm91dGVzR3VhcmQuY2FuQWN0aXZhdGUocm91dGUpLnBpcGUoXHJcbiAgICAgIHN3aXRjaE1hcCgoY2FuQWN0aXZhdGUpID0+XHJcbiAgICAgICAgY2FuQWN0aXZhdGVcclxuICAgICAgICAgID8gdGhpcy5yb3V0aW5nU2VydmljZS5nZXROZXh0UGFnZUNvbnRleHQoKS5waXBlKFxyXG4gICAgICAgICAgICAgIHN3aXRjaE1hcCgocGFnZUNvbnRleHQpID0+XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNtc1NlcnZpY2UuZ2V0UGFnZShwYWdlQ29udGV4dCwgdGhpcy5zaG91bGRSZWxvYWQoKSkucGlwZShcclxuICAgICAgICAgICAgICAgICAgZmlyc3QoKSxcclxuICAgICAgICAgICAgICAgICAgc3dpdGNoTWFwKChwYWdlRGF0YSkgPT5cclxuICAgICAgICAgICAgICAgICAgICBwYWdlRGF0YVxyXG4gICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnNlcnZpY2UuY2FuQWN0aXZhdGVQYWdlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VDb250ZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VEYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5zZXJ2aWNlLmNhbkFjdGl2YXRlTm90Rm91bmRQYWdlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VDb250ZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgOiBvZihmYWxzZSlcclxuICAgICAgKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgd2hldGhlciB3ZSBzaG91bGQgcmVsb2FkIHRoZSBDTVMgcGFnZSBkYXRhLCBldmVuIHdoZW4gaXQgd2FzIGxvYWRlZCBiZWZvcmUuXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzaG91bGRSZWxvYWQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5yb3V0aW5nQ29uZmlnLmdldExvYWRTdHJhdGVneSgpICE9PSBSb3V0ZUxvYWRTdHJhdGVneS5PTkNFO1xyXG4gIH1cclxufVxyXG4iXX0=