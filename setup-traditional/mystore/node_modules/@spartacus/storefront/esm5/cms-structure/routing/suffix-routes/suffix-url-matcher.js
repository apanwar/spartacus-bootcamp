import { isDevMode } from '@angular/core';
/**
 * Matches the pattern '[ ** / ] marker / :paramName'
 *
 * @param marker phrase that indicates the start of the match
 * @param paramName name of the parameter present after the marker
 * @param precedingParamName name of the parameter for every preceding url segment
 *        i.e. `param` will result in `param0`, `param1`, ...
 */
export function getSuffixUrlMatcher(_a) {
    var marker = _a.marker, paramName = _a.paramName, precedingParamName = _a.precedingParamName;
    precedingParamName = precedingParamName || 'param';
    var matcher = function suffixUrlMatcher(segments) {
        var _a;
        var markerIndex = findLastIndex(segments, function (_a) {
            var path = _a.path;
            return path === marker;
        });
        var isMarkerLastSegment = markerIndex === segments.length - 1;
        if (markerIndex === -1 || isMarkerLastSegment) {
            return null;
        }
        var paramIndex = markerIndex + 1;
        var posParams = (_a = {},
            _a[paramName] = segments[paramIndex],
            _a);
        for (var i = 0; i < markerIndex; i++) {
            posParams["" + precedingParamName + i] = segments[i];
        }
        return { consumed: segments.slice(0, paramIndex + 1), posParams: posParams };
    };
    if (isDevMode()) {
        matcher['_suffixRouteConfig'] = { marker: marker, paramName: paramName, precedingParamName: precedingParamName }; // property added for easier debugging of routes
    }
    return matcher;
}
function findLastIndex(elements, predicate) {
    for (var index = elements.length - 1; index >= 0; index--) {
        if (predicate(elements[index])) {
            return index;
        }
    }
    return -1;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VmZml4LXVybC1tYXRjaGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9zdG9yZWZyb250LyIsInNvdXJjZXMiOlsiY21zLXN0cnVjdHVyZS9yb3V0aW5nL3N1ZmZpeC1yb3V0ZXMvc3VmZml4LXVybC1tYXRjaGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHMUM7Ozs7Ozs7R0FPRztBQUNILE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxFQVFuQztRQVBDLGtCQUFNLEVBQ04sd0JBQVMsRUFDVCwwQ0FBa0I7SUFNbEIsa0JBQWtCLEdBQUcsa0JBQWtCLElBQUksT0FBTyxDQUFDO0lBQ25ELElBQU0sT0FBTyxHQUFHLFNBQVMsZ0JBQWdCLENBQ3ZDLFFBQXNCOztRQUV0QixJQUFNLFdBQVcsR0FBRyxhQUFhLENBQUMsUUFBUSxFQUFFLFVBQUMsRUFBUTtnQkFBTixjQUFJO1lBQU8sT0FBQSxJQUFJLEtBQUssTUFBTTtRQUFmLENBQWUsQ0FBQyxDQUFDO1FBQzNFLElBQU0sbUJBQW1CLEdBQUcsV0FBVyxLQUFLLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBRWhFLElBQUksV0FBVyxLQUFLLENBQUMsQ0FBQyxJQUFJLG1CQUFtQixFQUFFO1lBQzdDLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxJQUFNLFVBQVUsR0FBRyxXQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQ25DLElBQU0sU0FBUztZQUNiLEdBQUMsU0FBUyxJQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUM7ZUFDbEMsQ0FBQztRQUVGLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDcEMsU0FBUyxDQUFDLEtBQUcsa0JBQWtCLEdBQUcsQ0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3REO1FBRUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxVQUFVLEdBQUcsQ0FBQyxDQUFDLEVBQUUsU0FBUyxXQUFBLEVBQUUsQ0FBQztJQUNwRSxDQUFDLENBQUM7SUFFRixJQUFJLFNBQVMsRUFBRSxFQUFFO1FBQ2YsT0FBTyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsRUFBRSxNQUFNLFFBQUEsRUFBRSxTQUFTLFdBQUEsRUFBRSxrQkFBa0Isb0JBQUEsRUFBRSxDQUFDLENBQUMsZ0RBQWdEO0tBQzVIO0lBRUQsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFJLFFBQWEsRUFBRSxTQUE2QjtJQUNwRSxLQUFLLElBQUksS0FBSyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDekQsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDOUIsT0FBTyxLQUFLLENBQUM7U0FDZDtLQUNGO0lBQ0QsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNaLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0Rldk1vZGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVXJsTWF0Y2hSZXN1bHQsIFVybFNlZ21lbnQgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5cclxuLyoqXHJcbiAqIE1hdGNoZXMgdGhlIHBhdHRlcm4gJ1sgKiogLyBdIG1hcmtlciAvIDpwYXJhbU5hbWUnXHJcbiAqXHJcbiAqIEBwYXJhbSBtYXJrZXIgcGhyYXNlIHRoYXQgaW5kaWNhdGVzIHRoZSBzdGFydCBvZiB0aGUgbWF0Y2hcclxuICogQHBhcmFtIHBhcmFtTmFtZSBuYW1lIG9mIHRoZSBwYXJhbWV0ZXIgcHJlc2VudCBhZnRlciB0aGUgbWFya2VyXHJcbiAqIEBwYXJhbSBwcmVjZWRpbmdQYXJhbU5hbWUgbmFtZSBvZiB0aGUgcGFyYW1ldGVyIGZvciBldmVyeSBwcmVjZWRpbmcgdXJsIHNlZ21lbnRcclxuICogICAgICAgIGkuZS4gYHBhcmFtYCB3aWxsIHJlc3VsdCBpbiBgcGFyYW0wYCwgYHBhcmFtMWAsIC4uLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFN1ZmZpeFVybE1hdGNoZXIoe1xyXG4gIG1hcmtlcixcclxuICBwYXJhbU5hbWUsXHJcbiAgcHJlY2VkaW5nUGFyYW1OYW1lLFxyXG59OiB7XHJcbiAgbWFya2VyOiBzdHJpbmc7XHJcbiAgcGFyYW1OYW1lOiBzdHJpbmc7XHJcbiAgcHJlY2VkaW5nUGFyYW1OYW1lPzogc3RyaW5nO1xyXG59KSB7XHJcbiAgcHJlY2VkaW5nUGFyYW1OYW1lID0gcHJlY2VkaW5nUGFyYW1OYW1lIHx8ICdwYXJhbSc7XHJcbiAgY29uc3QgbWF0Y2hlciA9IGZ1bmN0aW9uIHN1ZmZpeFVybE1hdGNoZXIoXHJcbiAgICBzZWdtZW50czogVXJsU2VnbWVudFtdXHJcbiAgKTogVXJsTWF0Y2hSZXN1bHQgfCBudWxsIHtcclxuICAgIGNvbnN0IG1hcmtlckluZGV4ID0gZmluZExhc3RJbmRleChzZWdtZW50cywgKHsgcGF0aCB9KSA9PiBwYXRoID09PSBtYXJrZXIpO1xyXG4gICAgY29uc3QgaXNNYXJrZXJMYXN0U2VnbWVudCA9IG1hcmtlckluZGV4ID09PSBzZWdtZW50cy5sZW5ndGggLSAxO1xyXG5cclxuICAgIGlmIChtYXJrZXJJbmRleCA9PT0gLTEgfHwgaXNNYXJrZXJMYXN0U2VnbWVudCkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBwYXJhbUluZGV4ID0gbWFya2VySW5kZXggKyAxO1xyXG4gICAgY29uc3QgcG9zUGFyYW1zOiB7IFtuYW1lOiBzdHJpbmddOiBVcmxTZWdtZW50IH0gPSB7XHJcbiAgICAgIFtwYXJhbU5hbWVdOiBzZWdtZW50c1twYXJhbUluZGV4XSxcclxuICAgIH07XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXJrZXJJbmRleDsgaSsrKSB7XHJcbiAgICAgIHBvc1BhcmFtc1tgJHtwcmVjZWRpbmdQYXJhbU5hbWV9JHtpfWBdID0gc2VnbWVudHNbaV07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHsgY29uc3VtZWQ6IHNlZ21lbnRzLnNsaWNlKDAsIHBhcmFtSW5kZXggKyAxKSwgcG9zUGFyYW1zIH07XHJcbiAgfTtcclxuXHJcbiAgaWYgKGlzRGV2TW9kZSgpKSB7XHJcbiAgICBtYXRjaGVyWydfc3VmZml4Um91dGVDb25maWcnXSA9IHsgbWFya2VyLCBwYXJhbU5hbWUsIHByZWNlZGluZ1BhcmFtTmFtZSB9OyAvLyBwcm9wZXJ0eSBhZGRlZCBmb3IgZWFzaWVyIGRlYnVnZ2luZyBvZiByb3V0ZXNcclxuICB9XHJcblxyXG4gIHJldHVybiBtYXRjaGVyO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaW5kTGFzdEluZGV4PFQ+KGVsZW1lbnRzOiBUW10sIHByZWRpY2F0ZTogKGVsOiBUKSA9PiBib29sZWFuKSB7XHJcbiAgZm9yIChsZXQgaW5kZXggPSBlbGVtZW50cy5sZW5ndGggLSAxOyBpbmRleCA+PSAwOyBpbmRleC0tKSB7XHJcbiAgICBpZiAocHJlZGljYXRlKGVsZW1lbnRzW2luZGV4XSkpIHtcclxuICAgICAgcmV0dXJuIGluZGV4O1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gLTE7XHJcbn1cclxuIl19