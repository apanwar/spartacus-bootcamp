import { __assign, __decorate } from "tslib";
import { Injectable, } from '@angular/core';
import { from } from 'rxjs';
import { DefaultComponentHandler } from './default-component.handler';
import { switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./default-component.handler";
/**
 * Lazy component handler used for launching lazy loaded cms components implemented
 * as native Angular components.
 */
var LazyComponentHandler = /** @class */ (function () {
    function LazyComponentHandler(defaultHandler) {
        this.defaultHandler = defaultHandler;
    }
    /**
     * We want to mach dynamic import signature () => import('')
     */
    LazyComponentHandler.prototype.hasMatch = function (componentMapping) {
        return (typeof componentMapping.component === 'function' &&
            this.isNotClass(componentMapping.component));
    };
    LazyComponentHandler.prototype.isNotClass = function (symbol) {
        var signature = symbol.toString().substr(0, 20).replace(' ', '');
        return signature.startsWith('function()') || signature.startsWith('()=>');
    };
    LazyComponentHandler.prototype.getPriority = function () {
        return -10 /* LOW */;
    };
    LazyComponentHandler.prototype.launcher = function (componentMapping, viewContainerRef, elementInjector) {
        var _this = this;
        return from(componentMapping.component()).pipe(switchMap(function (component) {
            return _this.defaultHandler.launcher(__assign(__assign({}, componentMapping), { component: component }), viewContainerRef, elementInjector);
        }));
    };
    LazyComponentHandler.ctorParameters = function () { return [
        { type: DefaultComponentHandler }
    ]; };
    LazyComponentHandler.ɵprov = i0.ɵɵdefineInjectable({ factory: function LazyComponentHandler_Factory() { return new LazyComponentHandler(i0.ɵɵinject(i1.DefaultComponentHandler)); }, token: LazyComponentHandler, providedIn: "root" });
    LazyComponentHandler = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], LazyComponentHandler);
    return LazyComponentHandler;
}());
export { LazyComponentHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS1jb21wb25lbnQuaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvc3RvcmVmcm9udC8iLCJzb3VyY2VzIjpbImNtcy1zdHJ1Y3R1cmUvcGFnZS9jb21wb25lbnQvaGFuZGxlcnMvbGF6eS1jb21wb25lbnQuaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUdMLFVBQVUsR0FHWCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsSUFBSSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBRzNDOzs7R0FHRztBQUlIO0lBQ0UsOEJBQXNCLGNBQXVDO1FBQXZDLG1CQUFjLEdBQWQsY0FBYyxDQUF5QjtJQUFHLENBQUM7SUFFakU7O09BRUc7SUFDSCx1Q0FBUSxHQUFSLFVBQVMsZ0JBQXFDO1FBQzVDLE9BQU8sQ0FDTCxPQUFPLGdCQUFnQixDQUFDLFNBQVMsS0FBSyxVQUFVO1lBQ2hELElBQUksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLENBQzVDLENBQUM7SUFDSixDQUFDO0lBRU8seUNBQVUsR0FBbEIsVUFBbUIsTUFBVztRQUM1QixJQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ25FLE9BQU8sU0FBUyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsSUFBSSxTQUFTLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFRCwwQ0FBVyxHQUFYO1FBQ0UscUJBQW9CO0lBQ3RCLENBQUM7SUFFRCx1Q0FBUSxHQUFSLFVBQ0UsZ0JBQXFDLEVBQ3JDLGdCQUFrQyxFQUNsQyxlQUEwQjtRQUg1QixpQkFjQztRQVRDLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUM1QyxTQUFTLENBQUMsVUFBQyxTQUFTO1lBQ2xCLE9BQUEsS0FBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLHVCQUNyQixnQkFBZ0IsS0FBRSxTQUFTLFdBQUEsS0FDaEMsZ0JBQWdCLEVBQ2hCLGVBQWUsQ0FDaEI7UUFKRCxDQUlDLENBQ0YsQ0FDRixDQUFDO0lBQ0osQ0FBQzs7Z0JBbkNxQyx1QkFBdUI7OztJQURsRCxvQkFBb0I7UUFIaEMsVUFBVSxDQUFDO1lBQ1YsVUFBVSxFQUFFLE1BQU07U0FDbkIsQ0FBQztPQUNXLG9CQUFvQixDQXFDaEM7K0JBekREO0NBeURDLEFBckNELElBcUNDO1NBckNZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQ29tcG9uZW50UmVmLFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgSW5qZWN0YWJsZSxcclxuICBJbmplY3RvcixcclxuICBWaWV3Q29udGFpbmVyUmVmLFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDbXNDb21wb25lbnRNYXBwaW5nLCBQcmlvcml0eSB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XHJcbmltcG9ydCB7IGZyb20sIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgRGVmYXVsdENvbXBvbmVudEhhbmRsZXIgfSBmcm9tICcuL2RlZmF1bHQtY29tcG9uZW50LmhhbmRsZXInO1xyXG5pbXBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IENvbXBvbmVudEhhbmRsZXIgfSBmcm9tICcuL2NvbXBvbmVudC1oYW5kbGVyJztcclxuXHJcbi8qKlxyXG4gKiBMYXp5IGNvbXBvbmVudCBoYW5kbGVyIHVzZWQgZm9yIGxhdW5jaGluZyBsYXp5IGxvYWRlZCBjbXMgY29tcG9uZW50cyBpbXBsZW1lbnRlZFxyXG4gKiBhcyBuYXRpdmUgQW5ndWxhciBjb21wb25lbnRzLlxyXG4gKi9cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIExhenlDb21wb25lbnRIYW5kbGVyIGltcGxlbWVudHMgQ29tcG9uZW50SGFuZGxlciB7XHJcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGRlZmF1bHRIYW5kbGVyOiBEZWZhdWx0Q29tcG9uZW50SGFuZGxlcikge31cclxuXHJcbiAgLyoqXHJcbiAgICogV2Ugd2FudCB0byBtYWNoIGR5bmFtaWMgaW1wb3J0IHNpZ25hdHVyZSAoKSA9PiBpbXBvcnQoJycpXHJcbiAgICovXHJcbiAgaGFzTWF0Y2goY29tcG9uZW50TWFwcGluZzogQ21zQ29tcG9uZW50TWFwcGluZyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgdHlwZW9mIGNvbXBvbmVudE1hcHBpbmcuY29tcG9uZW50ID09PSAnZnVuY3Rpb24nICYmXHJcbiAgICAgIHRoaXMuaXNOb3RDbGFzcyhjb21wb25lbnRNYXBwaW5nLmNvbXBvbmVudClcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGlzTm90Q2xhc3Moc3ltYm9sOiBhbnkpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IHNpZ25hdHVyZSA9IHN5bWJvbC50b1N0cmluZygpLnN1YnN0cigwLCAyMCkucmVwbGFjZSgnICcsICcnKTtcclxuICAgIHJldHVybiBzaWduYXR1cmUuc3RhcnRzV2l0aCgnZnVuY3Rpb24oKScpIHx8IHNpZ25hdHVyZS5zdGFydHNXaXRoKCcoKT0+Jyk7XHJcbiAgfVxyXG5cclxuICBnZXRQcmlvcml0eSgpOiBQcmlvcml0eSB7XHJcbiAgICByZXR1cm4gUHJpb3JpdHkuTE9XO1xyXG4gIH1cclxuXHJcbiAgbGF1bmNoZXIoXHJcbiAgICBjb21wb25lbnRNYXBwaW5nOiBDbXNDb21wb25lbnRNYXBwaW5nLFxyXG4gICAgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcclxuICAgIGVsZW1lbnRJbmplY3Rvcj86IEluamVjdG9yXHJcbiAgKTogT2JzZXJ2YWJsZTx7IGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY7IGNvbXBvbmVudFJlZj86IENvbXBvbmVudFJlZjxhbnk+IH0+IHtcclxuICAgIHJldHVybiBmcm9tKGNvbXBvbmVudE1hcHBpbmcuY29tcG9uZW50KCkpLnBpcGUoXHJcbiAgICAgIHN3aXRjaE1hcCgoY29tcG9uZW50KSA9PlxyXG4gICAgICAgIHRoaXMuZGVmYXVsdEhhbmRsZXIubGF1bmNoZXIoXHJcbiAgICAgICAgICB7IC4uLmNvbXBvbmVudE1hcHBpbmcsIGNvbXBvbmVudCB9LFxyXG4gICAgICAgICAgdmlld0NvbnRhaW5lclJlZixcclxuICAgICAgICAgIGVsZW1lbnRJbmplY3RvclxyXG4gICAgICAgIClcclxuICAgICAgKVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIl19