import { __decorate } from "tslib";
import { ComponentFactoryResolver, Injectable, } from '@angular/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Default component handler used for dynamically launching cms components implemented
 * as native Angular components.
 */
var DefaultComponentHandler = /** @class */ (function () {
    function DefaultComponentHandler() {
    }
    DefaultComponentHandler.prototype.hasMatch = function (componentMapping) {
        return typeof componentMapping.component === 'function';
    };
    DefaultComponentHandler.prototype.getPriority = function () {
        return -50 /* FALLBACK */;
    };
    DefaultComponentHandler.prototype.launcher = function (componentMapping, viewContainerRef, elementInjector) {
        var _this = this;
        return new Observable(function (subscriber) {
            var componentRef;
            var injector = elementInjector !== null && elementInjector !== void 0 ? elementInjector : viewContainerRef.injector;
            var dispose = function () {
                if (componentRef) {
                    componentRef.destroy();
                }
            };
            var factory = _this.getComponentFactory(injector, componentMapping.component);
            if (factory) {
                componentRef = viewContainerRef.createComponent(factory, undefined, injector);
                subscriber.next({ elementRef: componentRef.location, componentRef: componentRef });
            }
            return dispose;
        });
    };
    DefaultComponentHandler.prototype.getComponentFactory = function (injector, component) {
        if (!component) {
            return null;
        }
        var factory = injector
            .get(ComponentFactoryResolver)
            .resolveComponentFactory(component);
        return factory;
    };
    DefaultComponentHandler.ɵprov = i0.ɵɵdefineInjectable({ factory: function DefaultComponentHandler_Factory() { return new DefaultComponentHandler(); }, token: DefaultComponentHandler, providedIn: "root" });
    DefaultComponentHandler = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], DefaultComponentHandler);
    return DefaultComponentHandler;
}());
export { DefaultComponentHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1jb21wb25lbnQuaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvc3RvcmVmcm9udC8iLCJzb3VyY2VzIjpbImNtcy1zdHJ1Y3R1cmUvcGFnZS9jb21wb25lbnQvaGFuZGxlcnMvZGVmYXVsdC1jb21wb25lbnQuaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLHdCQUF3QixFQUd4QixVQUFVLEdBR1gsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFHbEM7OztHQUdHO0FBSUg7SUFBQTtLQXdEQztJQXZEQywwQ0FBUSxHQUFSLFVBQVMsZ0JBQXFDO1FBQzVDLE9BQU8sT0FBTyxnQkFBZ0IsQ0FBQyxTQUFTLEtBQUssVUFBVSxDQUFDO0lBQzFELENBQUM7SUFFRCw2Q0FBVyxHQUFYO1FBQ0UsMEJBQXlCO0lBQzNCLENBQUM7SUFFRCwwQ0FBUSxHQUFSLFVBQ0UsZ0JBQXFDLEVBQ3JDLGdCQUFrQyxFQUNsQyxlQUEwQjtRQUg1QixpQkFtQ0M7UUE5QkMsT0FBTyxJQUFJLFVBQVUsQ0FHbEIsVUFBQyxVQUFVO1lBQ1osSUFBSSxZQUErQixDQUFDO1lBRXBDLElBQU0sUUFBUSxHQUFHLGVBQWUsYUFBZixlQUFlLGNBQWYsZUFBZSxHQUFJLGdCQUFnQixDQUFDLFFBQVEsQ0FBQztZQUU5RCxJQUFNLE9BQU8sR0FBRztnQkFDZCxJQUFJLFlBQVksRUFBRTtvQkFDaEIsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO2lCQUN4QjtZQUNILENBQUMsQ0FBQztZQUVGLElBQU0sT0FBTyxHQUFHLEtBQUksQ0FBQyxtQkFBbUIsQ0FDdEMsUUFBUSxFQUNSLGdCQUFnQixDQUFDLFNBQVMsQ0FDM0IsQ0FBQztZQUVGLElBQUksT0FBTyxFQUFFO2dCQUNYLFlBQVksR0FBRyxnQkFBZ0IsQ0FBQyxlQUFlLENBQzdDLE9BQU8sRUFDUCxTQUFTLEVBQ1QsUUFBUSxDQUNULENBQUM7Z0JBQ0YsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLFVBQVUsRUFBRSxZQUFZLENBQUMsUUFBUSxFQUFFLFlBQVksY0FBQSxFQUFFLENBQUMsQ0FBQzthQUN0RTtZQUVELE9BQU8sT0FBTyxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVTLHFEQUFtQixHQUE3QixVQUE4QixRQUFrQixFQUFFLFNBQWM7UUFDOUQsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNkLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxJQUFNLE9BQU8sR0FBRyxRQUFRO2FBQ3JCLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQzthQUM3Qix1QkFBdUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUV0QyxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDOztJQXZEVSx1QkFBdUI7UUFIbkMsVUFBVSxDQUFDO1lBQ1YsVUFBVSxFQUFFLE1BQU07U0FDbkIsQ0FBQztPQUNXLHVCQUF1QixDQXdEbkM7a0NBM0VEO0NBMkVDLEFBeERELElBd0RDO1NBeERZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxyXG4gIENvbXBvbmVudFJlZixcclxuICBFbGVtZW50UmVmLFxyXG4gIEluamVjdGFibGUsXHJcbiAgSW5qZWN0b3IsXHJcbiAgVmlld0NvbnRhaW5lclJlZixcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29tcG9uZW50SGFuZGxlciB9IGZyb20gJy4vY29tcG9uZW50LWhhbmRsZXInO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IENtc0NvbXBvbmVudE1hcHBpbmcsIFByaW9yaXR5IH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBEZWZhdWx0IGNvbXBvbmVudCBoYW5kbGVyIHVzZWQgZm9yIGR5bmFtaWNhbGx5IGxhdW5jaGluZyBjbXMgY29tcG9uZW50cyBpbXBsZW1lbnRlZFxyXG4gKiBhcyBuYXRpdmUgQW5ndWxhciBjb21wb25lbnRzLlxyXG4gKi9cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIERlZmF1bHRDb21wb25lbnRIYW5kbGVyIGltcGxlbWVudHMgQ29tcG9uZW50SGFuZGxlciB7XHJcbiAgaGFzTWF0Y2goY29tcG9uZW50TWFwcGluZzogQ21zQ29tcG9uZW50TWFwcGluZyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBjb21wb25lbnRNYXBwaW5nLmNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJztcclxuICB9XHJcblxyXG4gIGdldFByaW9yaXR5KCk6IFByaW9yaXR5IHtcclxuICAgIHJldHVybiBQcmlvcml0eS5GQUxMQkFDSztcclxuICB9XHJcblxyXG4gIGxhdW5jaGVyKFxyXG4gICAgY29tcG9uZW50TWFwcGluZzogQ21zQ29tcG9uZW50TWFwcGluZyxcclxuICAgIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsXHJcbiAgICBlbGVtZW50SW5qZWN0b3I/OiBJbmplY3RvclxyXG4gICk6IE9ic2VydmFibGU8eyBlbGVtZW50UmVmOiBFbGVtZW50UmVmOyBjb21wb25lbnRSZWY/OiBDb21wb25lbnRSZWY8YW55PiB9PiB7XHJcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGU8e1xyXG4gICAgICBlbGVtZW50UmVmOiBFbGVtZW50UmVmO1xyXG4gICAgICBjb21wb25lbnRSZWY/OiBDb21wb25lbnRSZWY8YW55PjtcclxuICAgIH0+KChzdWJzY3JpYmVyKSA9PiB7XHJcbiAgICAgIGxldCBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxhbnk+O1xyXG5cclxuICAgICAgY29uc3QgaW5qZWN0b3IgPSBlbGVtZW50SW5qZWN0b3IgPz8gdmlld0NvbnRhaW5lclJlZi5pbmplY3RvcjtcclxuXHJcbiAgICAgIGNvbnN0IGRpc3Bvc2UgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKGNvbXBvbmVudFJlZikge1xyXG4gICAgICAgICAgY29tcG9uZW50UmVmLmRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb25zdCBmYWN0b3J5ID0gdGhpcy5nZXRDb21wb25lbnRGYWN0b3J5KFxyXG4gICAgICAgIGluamVjdG9yLFxyXG4gICAgICAgIGNvbXBvbmVudE1hcHBpbmcuY29tcG9uZW50XHJcbiAgICAgICk7XHJcblxyXG4gICAgICBpZiAoZmFjdG9yeSkge1xyXG4gICAgICAgIGNvbXBvbmVudFJlZiA9IHZpZXdDb250YWluZXJSZWYuY3JlYXRlQ29tcG9uZW50KFxyXG4gICAgICAgICAgZmFjdG9yeSxcclxuICAgICAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgICAgIGluamVjdG9yXHJcbiAgICAgICAgKTtcclxuICAgICAgICBzdWJzY3JpYmVyLm5leHQoeyBlbGVtZW50UmVmOiBjb21wb25lbnRSZWYubG9jYXRpb24sIGNvbXBvbmVudFJlZiB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGRpc3Bvc2U7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBnZXRDb21wb25lbnRGYWN0b3J5KGluamVjdG9yOiBJbmplY3RvciwgY29tcG9uZW50OiBhbnkpOiBhbnkge1xyXG4gICAgaWYgKCFjb21wb25lbnQpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBjb25zdCBmYWN0b3J5ID0gaW5qZWN0b3JcclxuICAgICAgLmdldChDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIpXHJcbiAgICAgIC5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShjb21wb25lbnQpO1xyXG5cclxuICAgIHJldHVybiBmYWN0b3J5O1xyXG4gIH1cclxufVxyXG4iXX0=