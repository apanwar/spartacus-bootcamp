import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, Input, OnDestroy, OnInit, Renderer2, } from '@angular/core';
import { CmsService, ContentSlotComponentData, ContentSlotData, DynamicAttributeService, } from '@spartacus/core';
import { BehaviorSubject, Subscription } from 'rxjs';
import { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';
import { CmsComponentsService } from '../../services/cms-components.service';
/**
 * The `PageSlotComponent` is used to render the CMS page slot and it's components.
 *
 * The Page slot host element will be supplemented with css classes so that the layout
 * can be fully controlled by customers:
 * - The page slot _position_ is added as a css class by default.
 * - The `cx-pending` is added for as long as the slot hasn't start loading.
 * - The `page-fold` style class is added for the page slot which is configured as the page fold.
 */
var PageSlotComponent = /** @class */ (function () {
    function PageSlotComponent(cmsService, dynamicAttributeService, renderer, elementRef, cmsComponentsService, cd) {
        var _this = this;
        this.cmsService = cmsService;
        this.dynamicAttributeService = dynamicAttributeService;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.cmsComponentsService = cmsComponentsService;
        this.cd = cd;
        /**
         * Indicates that the page slot is the last page slot above the fold.
         */
        this.isPageFold = false;
        /**
         * Indicates that the components of the page slot haven't been loaded as long
         * as the isPending state is true.
         */
        this.isPending = true;
        /**
         * Indicates that the page slot doesn't contain any components. This is no
         * longer used in spartacus, but kept for backwards compatibility.
         */
        this.hasComponents = false;
        this.position$ = new BehaviorSubject(undefined);
        this.slot$ = this.position$.pipe(switchMap(function (position) { return _this.cmsService.getContentSlot(position); }), distinctUntilChanged(this.isDistinct));
        /** Observes the components for the given page slot. */
        this.components$ = this.slot$.pipe(map(function (slot) { var _a; return (_a = slot === null || slot === void 0 ? void 0 : slot.components) !== null && _a !== void 0 ? _a : []; }));
        this.subscription = new Subscription();
        /** Keeps track of the pending components that must be loaded for the page slot */
        this.pendingComponentCount = 0;
    }
    Object.defineProperty(PageSlotComponent.prototype, "position", {
        get: function () {
            return this.position$.value;
        },
        /**
         * The position represents the unique key for a page slot on a single page, but can
         * be reused cross pages.
         *
         * The position is used to find the CMS components for the page slot. It is also
         * added as an additional CSS class so that layoutt can be applied.
         */
        set: function (value) {
            this.position$.next(value);
        },
        enumerable: true,
        configurable: true
    });
    PageSlotComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.subscription.add(this.slot$.pipe(tap(function (slot) { return _this.decorate(slot); })).subscribe(function (value) {
            _this.components = (value === null || value === void 0 ? void 0 : value.components) || [];
            _this.cd.markForCheck();
        }));
    };
    PageSlotComponent.prototype.decorate = function (slot) {
        var _a, _b;
        var cls = this.class || '';
        if (this.lastPosition && cls.indexOf(this.lastPosition) > -1) {
            cls = cls.replace(this.lastPosition, '');
        }
        if (this.position$.value) {
            cls += " " + this.position$.value;
            this.lastPosition = this.position$.value;
        }
        // host bindings
        this.pending = ((_a = slot === null || slot === void 0 ? void 0 : slot.components) === null || _a === void 0 ? void 0 : _a.length) || 0;
        this.hasComponents = ((_b = slot === null || slot === void 0 ? void 0 : slot.components) === null || _b === void 0 ? void 0 : _b.length) > 0;
        if (cls && cls !== this.class) {
            this.class = cls;
        }
        this.addSmartEditSlotClass(slot);
    };
    Object.defineProperty(PageSlotComponent.prototype, "pending", {
        get: function () {
            return this.pendingComponentCount;
        },
        /**
         * Sets the pending count for the page slot components. Once all pending components are
         * loaded, the `isPending` flag is updated, so that the associated class can be updated
         */
        set: function (count) {
            this.pendingComponentCount = count;
            this.isPending = this.pendingComponentCount > 0;
        },
        enumerable: true,
        configurable: true
    });
    /*
     * Is triggered when a component is added to the view. This is used to
     * update the pending count
     */
    PageSlotComponent.prototype.isLoaded = function (loadState) {
        if (loadState) {
            this.pending--;
            this.cd.markForCheck();
        }
    };
    /**
     * The `DeferLoadingStrategy` indicates whether the component should be
     * rendered instantly or whether it should be deferred.
     */
    PageSlotComponent.prototype.getComponentDeferOptions = function (componentType) {
        var deferLoading = this.cmsComponentsService.getDeferLoadingStrategy(componentType);
        return { deferLoading: deferLoading };
    };
    PageSlotComponent.prototype.isDistinct = function (old, current) {
        var _a;
        return (current.components &&
            ((_a = old.components) === null || _a === void 0 ? void 0 : _a.length) === current.components.length &&
            !old.components.find(function (el, index) { return el.uid !== current.components[index].uid; }));
    };
    PageSlotComponent.prototype.addSmartEditSlotClass = function (slot) {
        if (slot) {
            this.dynamicAttributeService.addDynamicAttributes(this.elementRef.nativeElement, this.renderer, { slotData: slot });
        }
    };
    PageSlotComponent.prototype.ngOnDestroy = function () {
        var _a;
        (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    };
    PageSlotComponent.ctorParameters = function () { return [
        { type: CmsService },
        { type: DynamicAttributeService },
        { type: Renderer2 },
        { type: ElementRef },
        { type: CmsComponentsService },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input()
    ], PageSlotComponent.prototype, "position", null);
    __decorate([
        Input(), HostBinding()
    ], PageSlotComponent.prototype, "class", void 0);
    __decorate([
        HostBinding('class.page-fold'), Input()
    ], PageSlotComponent.prototype, "isPageFold", void 0);
    __decorate([
        HostBinding('class.cx-pending')
    ], PageSlotComponent.prototype, "isPending", void 0);
    __decorate([
        HostBinding('class.has-components'), Input()
    ], PageSlotComponent.prototype, "hasComponents", void 0);
    PageSlotComponent = __decorate([
        Component({
            selector: 'cx-page-slot,[cx-page-slot]',
            template: "<ng-template\r\n  [cxOutlet]=\"position\"\r\n  [cxOutletContext]=\"{ components$: components$ }\"\r\n>\r\n  <ng-template\r\n    *ngFor=\"let component of components\"\r\n    [cxOutlet]=\"component.flexType\"\r\n    [cxOutletContext]=\"{ component: component }\"\r\n    [cxOutletDefer]=\"getComponentDeferOptions(component.flexType)\"\r\n    (loaded)=\"isLoaded($event)\"\r\n  >\r\n    <ng-container [cxComponentWrapper]=\"component\"></ng-container>\r\n  </ng-template>\r\n</ng-template>\r\n",
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], PageSlotComponent);
    return PageSlotComponent;
}());
export { PageSlotComponent };
//# sourceMappingURL=data:application/json;base64,