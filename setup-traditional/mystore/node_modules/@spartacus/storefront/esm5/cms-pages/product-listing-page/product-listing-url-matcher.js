import { inject, InjectionToken } from '@angular/core';
import { DEFAULT_URL_MATCHER, UrlMatcherService, } from '@spartacus/core';
import { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';
export function getProductListingUrlMatcherFactory(service, defaultMatcherFactory) {
    var factory = function (route) {
        var defaultMatcher = defaultMatcherFactory(route);
        var suffixPLPMatcher = getSuffixUrlMatcher({
            marker: 'c',
            paramName: 'categoryCode',
        });
        return service.getCombined([defaultMatcher, suffixPLPMatcher]);
    };
    return factory;
}
/**
 * Injection token with url matcher factory for PLP.
 * The provided url matcher matches both:
 * - the configured `paths` from routing config and
 * - custom pattern  `** / c / :categoryCode`
 *
 * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER
 * or additional matchers can be added for a specific route.
 *
 * Note: Matchers will "match" a route, but do not contribute to the creation of the route, nor do they guard routes.
 */
export var PRODUCT_LISTING_URL_MATCHER = new InjectionToken('PRODUCT_LISTING_URL_MATCHER', {
    providedIn: 'root',
    factory: function () {
        return getProductListingUrlMatcherFactory(inject(UrlMatcherService), inject(DEFAULT_URL_MATCHER));
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1saXN0aW5nLXVybC1tYXRjaGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9zdG9yZWZyb250LyIsInNvdXJjZXMiOlsiY21zLXBhZ2VzL3Byb2R1Y3QtbGlzdGluZy1wYWdlL3Byb2R1Y3QtbGlzdGluZy11cmwtbWF0Y2hlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RCxPQUFPLEVBQ0wsbUJBQW1CLEVBRW5CLGlCQUFpQixHQUNsQixNQUFNLGlCQUFpQixDQUFDO0FBQ3pCLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDhEQUE4RCxDQUFDO0FBRW5HLE1BQU0sVUFBVSxrQ0FBa0MsQ0FDaEQsT0FBMEIsRUFDMUIscUJBQXdDO0lBRXhDLElBQU0sT0FBTyxHQUFHLFVBQUMsS0FBWTtRQUMzQixJQUFNLGNBQWMsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwRCxJQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO1lBQzNDLE1BQU0sRUFBRSxHQUFHO1lBQ1gsU0FBUyxFQUFFLGNBQWM7U0FDMUIsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsY0FBYyxFQUFFLGdCQUFnQixDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDLENBQUM7SUFDRixPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDO0FBRUQ7Ozs7Ozs7Ozs7R0FVRztBQUNILE1BQU0sQ0FBQyxJQUFNLDJCQUEyQixHQUFHLElBQUksY0FBYyxDQUUzRCw2QkFBNkIsRUFBRTtJQUMvQixVQUFVLEVBQUUsTUFBTTtJQUNsQixPQUFPLEVBQUU7UUFDUCxPQUFBLGtDQUFrQyxDQUNoQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsRUFDekIsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQzVCO0lBSEQsQ0FHQztDQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdCwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQge1xyXG4gIERFRkFVTFRfVVJMX01BVENIRVIsXHJcbiAgVXJsTWF0Y2hlckZhY3RvcnksXHJcbiAgVXJsTWF0Y2hlclNlcnZpY2UsXHJcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcclxuaW1wb3J0IHsgZ2V0U3VmZml4VXJsTWF0Y2hlciB9IGZyb20gJy4uLy4uL2Ntcy1zdHJ1Y3R1cmUvcm91dGluZy9zdWZmaXgtcm91dGVzL3N1ZmZpeC11cmwtbWF0Y2hlcic7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJvZHVjdExpc3RpbmdVcmxNYXRjaGVyRmFjdG9yeShcclxuICBzZXJ2aWNlOiBVcmxNYXRjaGVyU2VydmljZSxcclxuICBkZWZhdWx0TWF0Y2hlckZhY3Rvcnk6IFVybE1hdGNoZXJGYWN0b3J5XHJcbik6IFVybE1hdGNoZXJGYWN0b3J5IHtcclxuICBjb25zdCBmYWN0b3J5ID0gKHJvdXRlOiBSb3V0ZSkgPT4ge1xyXG4gICAgY29uc3QgZGVmYXVsdE1hdGNoZXIgPSBkZWZhdWx0TWF0Y2hlckZhY3Rvcnkocm91dGUpO1xyXG4gICAgY29uc3Qgc3VmZml4UExQTWF0Y2hlciA9IGdldFN1ZmZpeFVybE1hdGNoZXIoe1xyXG4gICAgICBtYXJrZXI6ICdjJyxcclxuICAgICAgcGFyYW1OYW1lOiAnY2F0ZWdvcnlDb2RlJyxcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHNlcnZpY2UuZ2V0Q29tYmluZWQoW2RlZmF1bHRNYXRjaGVyLCBzdWZmaXhQTFBNYXRjaGVyXSk7XHJcbiAgfTtcclxuICByZXR1cm4gZmFjdG9yeTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEluamVjdGlvbiB0b2tlbiB3aXRoIHVybCBtYXRjaGVyIGZhY3RvcnkgZm9yIFBMUC5cclxuICogVGhlIHByb3ZpZGVkIHVybCBtYXRjaGVyIG1hdGNoZXMgYm90aDpcclxuICogLSB0aGUgY29uZmlndXJlZCBgcGF0aHNgIGZyb20gcm91dGluZyBjb25maWcgYW5kXHJcbiAqIC0gY3VzdG9tIHBhdHRlcm4gIGAqKiAvIGMgLyA6Y2F0ZWdvcnlDb2RlYFxyXG4gKlxyXG4gKiBJZiB0aGUgdGhpcyBtYXRjaGVyIGRvZXNuJ3QgZml0IHRoZSByZXF1aXJlbWVudHMsIGl0IGNhbiBiZSByZXBsYWNlZCB3aXRoIHRoZSBERUZBVUxUX1VSTF9NQVRDSEVSXHJcbiAqIG9yIGFkZGl0aW9uYWwgbWF0Y2hlcnMgY2FuIGJlIGFkZGVkIGZvciBhIHNwZWNpZmljIHJvdXRlLlxyXG4gKlxyXG4gKiBOb3RlOiBNYXRjaGVycyB3aWxsIFwibWF0Y2hcIiBhIHJvdXRlLCBidXQgZG8gbm90IGNvbnRyaWJ1dGUgdG8gdGhlIGNyZWF0aW9uIG9mIHRoZSByb3V0ZSwgbm9yIGRvIHRoZXkgZ3VhcmQgcm91dGVzLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFBST0RVQ1RfTElTVElOR19VUkxfTUFUQ0hFUiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxcclxuICBVcmxNYXRjaGVyRmFjdG9yeVxyXG4+KCdQUk9EVUNUX0xJU1RJTkdfVVJMX01BVENIRVInLCB7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG4gIGZhY3Rvcnk6ICgpID0+XHJcbiAgICBnZXRQcm9kdWN0TGlzdGluZ1VybE1hdGNoZXJGYWN0b3J5KFxyXG4gICAgICBpbmplY3QoVXJsTWF0Y2hlclNlcnZpY2UpLFxyXG4gICAgICBpbmplY3QoREVGQVVMVF9VUkxfTUFUQ0hFUilcclxuICAgICksXHJcbn0pO1xyXG4iXX0=