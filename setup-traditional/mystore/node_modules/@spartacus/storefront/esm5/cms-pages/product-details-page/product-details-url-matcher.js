import { inject, InjectionToken } from '@angular/core';
import { DEFAULT_URL_MATCHER, UrlMatcherService, } from '@spartacus/core';
import { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';
export function getProductDetailsUrlMatcherFactory(service, defaultMatcherFactory) {
    var factory = function (route) {
        var defaultMatcher = defaultMatcherFactory(route);
        var suffixPDPMatcher = getSuffixUrlMatcher({
            marker: 'p',
            paramName: 'productCode',
        });
        return service.getCombined([defaultMatcher, suffixPDPMatcher]);
    };
    return factory;
}
/**
 * Injection token with url matcher factory for PDP.
 * The provided url matcher matches both:
 * - the configured `paths` from routing config and
 * - custom pattern  `** / p / :productCode`
 *
 * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER
 * or additional matchers can be added for a specific route.
 *
 * Note: Matchers will "match" a route, but do not contribute to the creation of the route, nor do they guard routes.
 */
export var PRODUCT_DETAILS_URL_MATCHER = new InjectionToken('PRODUCT_DETAILS_URL_MATCHER', {
    providedIn: 'root',
    factory: function () {
        return getProductDetailsUrlMatcherFactory(inject(UrlMatcherService), inject(DEFAULT_URL_MATCHER));
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1kZXRhaWxzLXVybC1tYXRjaGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9zdG9yZWZyb250LyIsInNvdXJjZXMiOlsiY21zLXBhZ2VzL3Byb2R1Y3QtZGV0YWlscy1wYWdlL3Byb2R1Y3QtZGV0YWlscy11cmwtbWF0Y2hlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RCxPQUFPLEVBQ0wsbUJBQW1CLEVBRW5CLGlCQUFpQixHQUNsQixNQUFNLGlCQUFpQixDQUFDO0FBQ3pCLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDhEQUE4RCxDQUFDO0FBRW5HLE1BQU0sVUFBVSxrQ0FBa0MsQ0FDaEQsT0FBMEIsRUFDMUIscUJBQXdDO0lBRXhDLElBQU0sT0FBTyxHQUFHLFVBQUMsS0FBWTtRQUMzQixJQUFNLGNBQWMsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwRCxJQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDO1lBQzNDLE1BQU0sRUFBRSxHQUFHO1lBQ1gsU0FBUyxFQUFFLGFBQWE7U0FDekIsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsY0FBYyxFQUFFLGdCQUFnQixDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDLENBQUM7SUFDRixPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDO0FBRUQ7Ozs7Ozs7Ozs7R0FVRztBQUNILE1BQU0sQ0FBQyxJQUFNLDJCQUEyQixHQUFHLElBQUksY0FBYyxDQUUzRCw2QkFBNkIsRUFBRTtJQUMvQixVQUFVLEVBQUUsTUFBTTtJQUNsQixPQUFPLEVBQUU7UUFDUCxPQUFBLGtDQUFrQyxDQUNoQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsRUFDekIsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQzVCO0lBSEQsQ0FHQztDQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdCwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQge1xyXG4gIERFRkFVTFRfVVJMX01BVENIRVIsXHJcbiAgVXJsTWF0Y2hlckZhY3RvcnksXHJcbiAgVXJsTWF0Y2hlclNlcnZpY2UsXHJcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcclxuaW1wb3J0IHsgZ2V0U3VmZml4VXJsTWF0Y2hlciB9IGZyb20gJy4uLy4uL2Ntcy1zdHJ1Y3R1cmUvcm91dGluZy9zdWZmaXgtcm91dGVzL3N1ZmZpeC11cmwtbWF0Y2hlcic7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJvZHVjdERldGFpbHNVcmxNYXRjaGVyRmFjdG9yeShcclxuICBzZXJ2aWNlOiBVcmxNYXRjaGVyU2VydmljZSxcclxuICBkZWZhdWx0TWF0Y2hlckZhY3Rvcnk6IFVybE1hdGNoZXJGYWN0b3J5XHJcbik6IFVybE1hdGNoZXJGYWN0b3J5IHtcclxuICBjb25zdCBmYWN0b3J5ID0gKHJvdXRlOiBSb3V0ZSkgPT4ge1xyXG4gICAgY29uc3QgZGVmYXVsdE1hdGNoZXIgPSBkZWZhdWx0TWF0Y2hlckZhY3Rvcnkocm91dGUpO1xyXG4gICAgY29uc3Qgc3VmZml4UERQTWF0Y2hlciA9IGdldFN1ZmZpeFVybE1hdGNoZXIoe1xyXG4gICAgICBtYXJrZXI6ICdwJyxcclxuICAgICAgcGFyYW1OYW1lOiAncHJvZHVjdENvZGUnLFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gc2VydmljZS5nZXRDb21iaW5lZChbZGVmYXVsdE1hdGNoZXIsIHN1ZmZpeFBEUE1hdGNoZXJdKTtcclxuICB9O1xyXG4gIHJldHVybiBmYWN0b3J5O1xyXG59XHJcblxyXG4vKipcclxuICogSW5qZWN0aW9uIHRva2VuIHdpdGggdXJsIG1hdGNoZXIgZmFjdG9yeSBmb3IgUERQLlxyXG4gKiBUaGUgcHJvdmlkZWQgdXJsIG1hdGNoZXIgbWF0Y2hlcyBib3RoOlxyXG4gKiAtIHRoZSBjb25maWd1cmVkIGBwYXRoc2AgZnJvbSByb3V0aW5nIGNvbmZpZyBhbmRcclxuICogLSBjdXN0b20gcGF0dGVybiAgYCoqIC8gcCAvIDpwcm9kdWN0Q29kZWBcclxuICpcclxuICogSWYgdGhlIHRoaXMgbWF0Y2hlciBkb2Vzbid0IGZpdCB0aGUgcmVxdWlyZW1lbnRzLCBpdCBjYW4gYmUgcmVwbGFjZWQgd2l0aCB0aGUgREVGQVVMVF9VUkxfTUFUQ0hFUlxyXG4gKiBvciBhZGRpdGlvbmFsIG1hdGNoZXJzIGNhbiBiZSBhZGRlZCBmb3IgYSBzcGVjaWZpYyByb3V0ZS5cclxuICpcclxuICogTm90ZTogTWF0Y2hlcnMgd2lsbCBcIm1hdGNoXCIgYSByb3V0ZSwgYnV0IGRvIG5vdCBjb250cmlidXRlIHRvIHRoZSBjcmVhdGlvbiBvZiB0aGUgcm91dGUsIG5vciBkbyB0aGV5IGd1YXJkIHJvdXRlcy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBQUk9EVUNUX0RFVEFJTFNfVVJMX01BVENIRVIgPSBuZXcgSW5qZWN0aW9uVG9rZW48XHJcbiAgVXJsTWF0Y2hlckZhY3RvcnlcclxuPignUFJPRFVDVF9ERVRBSUxTX1VSTF9NQVRDSEVSJywge1xyXG4gIHByb3ZpZGVkSW46ICdyb290JyxcclxuICBmYWN0b3J5OiAoKSA9PlxyXG4gICAgZ2V0UHJvZHVjdERldGFpbHNVcmxNYXRjaGVyRmFjdG9yeShcclxuICAgICAgaW5qZWN0KFVybE1hdGNoZXJTZXJ2aWNlKSxcclxuICAgICAgaW5qZWN0KERFRkFVTFRfVVJMX01BVENIRVIpXHJcbiAgICApLFxyXG59KTtcclxuIl19