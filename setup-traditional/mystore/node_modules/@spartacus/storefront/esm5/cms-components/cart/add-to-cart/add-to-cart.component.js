import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, OnDestroy, OnInit, } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { ActiveCartService, OrderEntry, Product } from '@spartacus/core';
import { filter } from 'rxjs/operators';
import { ModalService } from '../../../shared/components/modal/modal.service';
import { CurrentProductService } from '../../product/current-product.service';
import { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';
var AddToCartComponent = /** @class */ (function () {
    function AddToCartComponent(modalService, currentProductService, cd, activeCartService) {
        this.modalService = modalService;
        this.currentProductService = currentProductService;
        this.cd = cd;
        this.activeCartService = activeCartService;
        this.showQuantity = true;
        this.hasStock = false;
        this.quantity = 1;
        this.increment = false;
        this.addToCartForm = new FormGroup({
            quantity: new FormControl(1),
        });
    }
    AddToCartComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.product) {
            this.productCode = this.product.code;
            this.cartEntry$ = this.activeCartService.getEntry(this.productCode);
            this.setStockInfo(this.product);
            this.cd.markForCheck();
        }
        else if (this.productCode) {
            this.cartEntry$ = this.activeCartService.getEntry(this.productCode);
            // force hasStock and quantity for the time being, as we do not have more info:
            this.quantity = 1;
            this.hasStock = true;
            this.cd.markForCheck();
        }
        else {
            this.subscription = this.currentProductService
                .getProduct()
                .pipe(filter(Boolean))
                .subscribe(function (product) {
                _this.productCode = product.code;
                _this.setStockInfo(product);
                _this.cartEntry$ = _this.activeCartService.getEntry(_this.productCode);
                _this.cd.markForCheck();
            });
        }
    };
    AddToCartComponent.prototype.setStockInfo = function (product) {
        this.quantity = 1;
        this.hasStock =
            product.stock && product.stock.stockLevelStatus !== 'outOfStock';
        if (this.hasStock && product.stock.stockLevel) {
            this.maxQuantity = product.stock.stockLevel;
        }
    };
    AddToCartComponent.prototype.updateCount = function (value) {
        this.quantity = value;
    };
    AddToCartComponent.prototype.addToCart = function () {
        var _this = this;
        var quantity = this.addToCartForm.get('quantity').value;
        if (!this.productCode || quantity <= 0) {
            return;
        }
        // check item is already present in the cart
        // so modal will have proper header text displayed
        this.activeCartService
            .getEntry(this.productCode)
            .subscribe(function (entry) {
            if (entry) {
                _this.increment = true;
            }
            _this.openModal();
            _this.activeCartService.addEntry(_this.productCode, quantity);
            _this.increment = false;
        })
            .unsubscribe();
    };
    AddToCartComponent.prototype.openModal = function () {
        var modalInstance;
        this.modalRef = this.modalService.open(AddedToCartDialogComponent, {
            centered: true,
            size: 'lg',
        });
        modalInstance = this.modalRef.componentInstance;
        modalInstance.entry$ = this.cartEntry$;
        modalInstance.cart$ = this.activeCartService.getActive();
        modalInstance.loaded$ = this.activeCartService.isStable();
        modalInstance.quantity = this.quantity;
        modalInstance.increment = this.increment;
    };
    AddToCartComponent.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    AddToCartComponent.ctorParameters = function () { return [
        { type: ModalService },
        { type: CurrentProductService },
        { type: ChangeDetectorRef },
        { type: ActiveCartService }
    ]; };
    __decorate([
        Input()
    ], AddToCartComponent.prototype, "productCode", void 0);
    __decorate([
        Input()
    ], AddToCartComponent.prototype, "showQuantity", void 0);
    __decorate([
        Input()
    ], AddToCartComponent.prototype, "product", void 0);
    AddToCartComponent = __decorate([
        Component({
            selector: 'cx-add-to-cart',
            template: "<form *ngIf=\"productCode\" [formGroup]=\"addToCartForm\" (submit)=\"addToCart()\">\r\n  <div class=\"quantity\" *ngIf=\"showQuantity\">\r\n    <label>{{ 'addToCart.quantity' | cxTranslate }}</label>\r\n    <cx-item-counter\r\n      *ngIf=\"hasStock\"\r\n      [max]=\"maxQuantity\"\r\n      [control]=\"addToCartForm.get('quantity')\"\r\n    ></cx-item-counter>\r\n    <span class=\"info\">{{\r\n      hasStock\r\n        ? ('addToCart.inStock' | cxTranslate)\r\n        : ('addToCart.outOfStock' | cxTranslate)\r\n    }}</span>\r\n  </div>\r\n\r\n  <button\r\n    *ngIf=\"hasStock\"\r\n    class=\"btn btn-primary btn-block\"\r\n    type=\"submit\"\r\n    [disabled]=\"quantity <= 0 || quantity > maxQuantity\"\r\n  >\r\n    {{ 'addToCart.addToCart' | cxTranslate }}\r\n  </button>\r\n</form>\r\n",
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], AddToCartComponent);
    return AddToCartComponent;
}());
export { AddToCartComponent };
//# sourceMappingURL=data:application/json;base64,