import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { ActiveCartService, ConsignmentEntry, PromotionLocation, SelectiveCartService, } from '@spartacus/core';
import { map, startWith } from 'rxjs/operators';
var CartItemListComponent = /** @class */ (function () {
    function CartItemListComponent(activeCartService, selectiveCartService) {
        this.activeCartService = activeCartService;
        this.selectiveCartService = selectiveCartService;
        this.readonly = false;
        this.hasHeader = true;
        this.options = {
            isSaveForLater: false,
            optionalBtn: null,
        };
        this._items = [];
        this.promotionLocation = PromotionLocation.ActiveCart;
    }
    Object.defineProperty(CartItemListComponent.prototype, "items", {
        get: function () {
            return this._items;
        },
        set: function (items) {
            this.resolveItems(items);
            this.createForm();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CartItemListComponent.prototype, "setLoading", {
        set: function (value) {
            if (!this.readonly) {
                // Whenver the cart is loading, we disable the complete form
                // to avoid any user interaction with the cart.
                value
                    ? this.form.disable({ emitEvent: false })
                    : this.form.enable({ emitEvent: false });
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * The items we're getting form the input do not have a consistent model.
     * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.
     */
    CartItemListComponent.prototype.resolveItems = function (items) {
        if (items.every(function (item) { return item.hasOwnProperty('orderEntry'); })) {
            this._items = items.map(function (consignmentEntry) {
                var entry = Object.assign({}, consignmentEntry.orderEntry);
                entry.quantity = consignmentEntry.quantity;
                return entry;
            });
        }
        else {
            this._items = items;
        }
    };
    CartItemListComponent.prototype.createForm = function () {
        var _this = this;
        this.form = new FormGroup({});
        this._items.forEach(function (item) {
            var code = item.product.code;
            var group = new FormGroup({
                entryNumber: new FormControl(item.entryNumber),
                quantity: new FormControl(item.quantity, { updateOn: 'blur' }),
            });
            if (!item.updateable || _this.readonly) {
                group.disable();
            }
            _this.form.addControl(code, group);
        });
    };
    CartItemListComponent.prototype.removeEntry = function (item) {
        if (this.selectiveCartService && this.options.isSaveForLater) {
            this.selectiveCartService.removeEntry(item);
        }
        else {
            this.activeCartService.removeEntry(item);
        }
        delete this.form.controls[item.product.code];
    };
    CartItemListComponent.prototype.getControl = function (item) {
        var _this = this;
        return this.form.get(item.product.code).valueChanges.pipe(
        // tslint:disable-next-line:deprecation
        startWith(null), map(function (value) {
            if (value && _this.selectiveCartService && _this.options.isSaveForLater) {
                _this.selectiveCartService.updateEntry(value.entryNumber, value.quantity);
            }
            else if (value) {
                _this.activeCartService.updateEntry(value.entryNumber, value.quantity);
            }
        }), map(function () { return _this.form.get(item.product.code); }));
    };
    CartItemListComponent.ctorParameters = function () { return [
        { type: ActiveCartService },
        { type: SelectiveCartService }
    ]; };
    __decorate([
        Input()
    ], CartItemListComponent.prototype, "readonly", void 0);
    __decorate([
        Input()
    ], CartItemListComponent.prototype, "hasHeader", void 0);
    __decorate([
        Input()
    ], CartItemListComponent.prototype, "options", void 0);
    __decorate([
        Input('items')
    ], CartItemListComponent.prototype, "items", null);
    __decorate([
        Input()
    ], CartItemListComponent.prototype, "promotionLocation", void 0);
    __decorate([
        Input('cartIsLoading')
    ], CartItemListComponent.prototype, "setLoading", null);
    CartItemListComponent = __decorate([
        Component({
            selector: 'cx-cart-item-list',
            template: "<div *ngIf=\"hasHeader\" class=\"d-none d-md-block d-lg-block d-xl-block\">\r\n  <div class=\"cx-item-list-header row\">\r\n    <div class=\"cx-item-list-desc col-md-5 col-lg-5 col-xl-6\">\r\n      {{ 'cartItems.description' | cxTranslate }}\r\n    </div>\r\n    <div class=\"cx-item-list-price col-md-3 col-lg-2 col-xl-2\">\r\n      {{ 'cartItems.itemPrice' | cxTranslate }}\r\n    </div>\r\n    <div class=\"cx-item-list-qty col-md-2 col-lg-3 col-xl-2\">\r\n      {{ 'cartItems.quantity' | cxTranslate }}\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"options.isSaveForLater; else totalHeader\">\r\n      <div class=\"cx-item-list-total col-md-2 col-lg-2 col-xl-2\">\r\n        {{ 'saveForLaterItems.stock' | cxTranslate }}\r\n      </div>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"cx-item-list-row\" *ngFor=\"let item of items; let i = index\">\r\n  <div\r\n    class=\"cx-item-list-items\"\r\n    *ngIf=\"getControl(item) | async as control\"\r\n    [class.is-changed]=\"control.get('quantity').dirty\"\r\n  >\r\n    <cx-cart-item\r\n      [item]=\"item\"\r\n      [quantityControl]=\"control.get('quantity')\"\r\n      [readonly]=\"readonly\"\r\n      [promotionLocation]=\"promotionLocation\"\r\n      [options]=\"options\"\r\n    >\r\n    </cx-cart-item>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #totalHeader>\r\n  <div class=\"cx-item-list-total col-md-2 col-lg-2 col-xl-2\">\r\n    {{ 'cartItems.total' | cxTranslate }}\r\n  </div>\r\n</ng-template>\r\n",
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], CartItemListComponent);
    return CartItemListComponent;
}());
export { CartItemListComponent };
//# sourceMappingURL=data:application/json;base64,