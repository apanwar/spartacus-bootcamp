import { __decorate } from "tslib";
import { Component, Input } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AuthService, RoutingService, UserService } from '@spartacus/core';
import { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';
var GuestRegisterFormComponent = /** @class */ (function () {
    function GuestRegisterFormComponent(userService, routingService, authService, fb) {
        this.userService = userService;
        this.routingService = routingService;
        this.authService = authService;
        this.fb = fb;
        this.guestRegisterForm = this.fb.group({
            password: [
                '',
                [Validators.required, CustomFormValidators.passwordValidator],
            ],
            passwordconf: ['', Validators.required],
        }, {
            validators: CustomFormValidators.passwordsMustMatch('password', 'passwordconf'),
        });
    }
    GuestRegisterFormComponent.prototype.submit = function () {
        var _this = this;
        if (this.guestRegisterForm.valid) {
            this.userService.registerGuest(this.guid, this.guestRegisterForm.value.password);
            if (!this.subscription) {
                this.subscription = this.authService
                    .getUserToken()
                    .subscribe(function (token) {
                    if (token.access_token) {
                        _this.routingService.go({ cxRoute: 'home' });
                    }
                });
            }
        }
        else {
            this.guestRegisterForm.markAllAsTouched();
        }
    };
    GuestRegisterFormComponent.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    GuestRegisterFormComponent.ctorParameters = function () { return [
        { type: UserService },
        { type: RoutingService },
        { type: AuthService },
        { type: FormBuilder }
    ]; };
    __decorate([
        Input()
    ], GuestRegisterFormComponent.prototype, "guid", void 0);
    __decorate([
        Input()
    ], GuestRegisterFormComponent.prototype, "email", void 0);
    GuestRegisterFormComponent = __decorate([
        Component({
            selector: 'cx-guest-register-form',
            template: "<div class=\"register-guest\">\r\n  <div class=\"col-md-6 col-lg-4\">\r\n    <h3>{{ 'checkoutOrderConfirmation.createAccount' | cxTranslate }}</h3>\r\n    <p>\r\n      {{\r\n        'checkoutOrderConfirmation.createAccountForNext'\r\n          | cxTranslate: { email: email }\r\n      }}\r\n    </p>\r\n\r\n    <form (ngSubmit)=\"submit()\" [formGroup]=\"guestRegisterForm\">\r\n      <div class=\"form-group\">\r\n        <label>\r\n          <span class=\"label-content\">{{\r\n            'register.password.label' | cxTranslate\r\n          }}</span>\r\n          <input\r\n            class=\"form-control\"\r\n            type=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"{{ 'register.password.placeholder' | cxTranslate }}\"\r\n            formControlName=\"password\"\r\n          />\r\n          <cx-form-errors\r\n            [control]=\"guestRegisterForm.get('password')\"\r\n          ></cx-form-errors>\r\n        </label>\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label>\r\n          <span class=\"label-content\">{{\r\n            'register.confirmPassword.label' | cxTranslate\r\n          }}</span>\r\n          <input\r\n            class=\"form-control\"\r\n            type=\"password\"\r\n            name=\"passwordconf\"\r\n            placeholder=\"{{\r\n              'register.confirmPassword.placeholder' | cxTranslate\r\n            }}\"\r\n            formControlName=\"passwordconf\"\r\n          />\r\n          <cx-form-errors\r\n            [control]=\"guestRegisterForm.get('passwordconf')\"\r\n          ></cx-form-errors>\r\n        </label>\r\n      </div>\r\n\r\n      <button type=\"submit\" class=\"btn btn-block btn-primary\">\r\n        {{ 'common.submit' | cxTranslate }}\r\n      </button>\r\n    </form>\r\n  </div>\r\n</div>\r\n"
        })
    ], GuestRegisterFormComponent);
    return GuestRegisterFormComponent;
}());
export { GuestRegisterFormComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Vlc3QtcmVnaXN0ZXItZm9ybS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL3N0b3JlZnJvbnQvIiwic291cmNlcyI6WyJjbXMtY29tcG9uZW50cy9vcmRlci1jb25maXJtYXRpb24vY29tcG9uZW50cy9ndWVzdC1yZWdpc3Rlci1mb3JtL2d1ZXN0LXJlZ2lzdGVyLWZvcm0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUM1RCxPQUFPLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRSxPQUFPLEVBQUUsV0FBVyxFQUFFLGNBQWMsRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUzRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw0REFBNEQsQ0FBQztBQU1sRztJQXFCRSxvQ0FDWSxXQUF3QixFQUN4QixjQUE4QixFQUM5QixXQUF3QixFQUN4QixFQUFlO1FBSGYsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDeEIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLE9BQUUsR0FBRixFQUFFLENBQWE7UUFwQjNCLHNCQUFpQixHQUFjLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUMxQztZQUNFLFFBQVEsRUFBRTtnQkFDUixFQUFFO2dCQUNGLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxvQkFBb0IsQ0FBQyxpQkFBaUIsQ0FBQzthQUM5RDtZQUNELFlBQVksRUFBRSxDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDO1NBQ3hDLEVBQ0Q7WUFDRSxVQUFVLEVBQUUsb0JBQW9CLENBQUMsa0JBQWtCLENBQ2pELFVBQVUsRUFDVixjQUFjLENBQ2Y7U0FDRixDQUNGLENBQUM7SUFPQyxDQUFDO0lBRUosMkNBQU0sR0FBTjtRQUFBLGlCQWtCQztRQWpCQyxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUU7WUFDaEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQzVCLElBQUksQ0FBQyxJQUFJLEVBQ1QsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxRQUFRLENBQ3RDLENBQUM7WUFDRixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRTtnQkFDdEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsV0FBVztxQkFDakMsWUFBWSxFQUFFO3FCQUNkLFNBQVMsQ0FBQyxVQUFDLEtBQUs7b0JBQ2YsSUFBSSxLQUFLLENBQUMsWUFBWSxFQUFFO3dCQUN0QixLQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO3FCQUM3QztnQkFDSCxDQUFDLENBQUMsQ0FBQzthQUNOO1NBQ0Y7YUFBTTtZQUNMLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1NBQzNDO0lBQ0gsQ0FBQztJQUVELGdEQUFXLEdBQVg7UUFDRSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNqQztJQUNILENBQUM7O2dCQTlCd0IsV0FBVztnQkFDUixjQUFjO2dCQUNqQixXQUFXO2dCQUNwQixXQUFXOztJQXhCbEI7UUFBUixLQUFLLEVBQUU7NERBQWM7SUFDYjtRQUFSLEtBQUssRUFBRTs2REFBZTtJQUZaLDBCQUEwQjtRQUp0QyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsd0JBQXdCO1lBQ2xDLGt6REFBbUQ7U0FDcEQsQ0FBQztPQUNXLDBCQUEwQixDQXFEdEM7SUFBRCxpQ0FBQztDQUFBLEFBckRELElBcURDO1NBckRZLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGb3JtQnVpbGRlciwgRm9ybUdyb3VwLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBBdXRoU2VydmljZSwgUm91dGluZ1NlcnZpY2UsIFVzZXJTZXJ2aWNlIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEN1c3RvbUZvcm1WYWxpZGF0b3JzIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL3V0aWxzL3ZhbGlkYXRvcnMvY3VzdG9tLWZvcm0tdmFsaWRhdG9ycyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2N4LWd1ZXN0LXJlZ2lzdGVyLWZvcm0nLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9ndWVzdC1yZWdpc3Rlci1mb3JtLmNvbXBvbmVudC5odG1sJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIEd1ZXN0UmVnaXN0ZXJGb3JtQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95IHtcclxuICBASW5wdXQoKSBndWlkOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgZW1haWw6IHN0cmluZztcclxuXHJcbiAgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XHJcbiAgZ3Vlc3RSZWdpc3RlckZvcm06IEZvcm1Hcm91cCA9IHRoaXMuZmIuZ3JvdXAoXHJcbiAgICB7XHJcbiAgICAgIHBhc3N3b3JkOiBbXHJcbiAgICAgICAgJycsXHJcbiAgICAgICAgW1ZhbGlkYXRvcnMucmVxdWlyZWQsIEN1c3RvbUZvcm1WYWxpZGF0b3JzLnBhc3N3b3JkVmFsaWRhdG9yXSxcclxuICAgICAgXSxcclxuICAgICAgcGFzc3dvcmRjb25mOiBbJycsIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdmFsaWRhdG9yczogQ3VzdG9tRm9ybVZhbGlkYXRvcnMucGFzc3dvcmRzTXVzdE1hdGNoKFxyXG4gICAgICAgICdwYXNzd29yZCcsXHJcbiAgICAgICAgJ3Bhc3N3b3JkY29uZidcclxuICAgICAgKSxcclxuICAgIH1cclxuICApO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByb3RlY3RlZCB1c2VyU2VydmljZTogVXNlclNlcnZpY2UsXHJcbiAgICBwcm90ZWN0ZWQgcm91dGluZ1NlcnZpY2U6IFJvdXRpbmdTZXJ2aWNlLFxyXG4gICAgcHJvdGVjdGVkIGF1dGhTZXJ2aWNlOiBBdXRoU2VydmljZSxcclxuICAgIHByb3RlY3RlZCBmYjogRm9ybUJ1aWxkZXJcclxuICApIHt9XHJcblxyXG4gIHN1Ym1pdCgpIHtcclxuICAgIGlmICh0aGlzLmd1ZXN0UmVnaXN0ZXJGb3JtLnZhbGlkKSB7XHJcbiAgICAgIHRoaXMudXNlclNlcnZpY2UucmVnaXN0ZXJHdWVzdChcclxuICAgICAgICB0aGlzLmd1aWQsXHJcbiAgICAgICAgdGhpcy5ndWVzdFJlZ2lzdGVyRm9ybS52YWx1ZS5wYXNzd29yZFxyXG4gICAgICApO1xyXG4gICAgICBpZiAoIXRoaXMuc3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLmF1dGhTZXJ2aWNlXHJcbiAgICAgICAgICAuZ2V0VXNlclRva2VuKClcclxuICAgICAgICAgIC5zdWJzY3JpYmUoKHRva2VuKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0b2tlbi5hY2Nlc3NfdG9rZW4pIHtcclxuICAgICAgICAgICAgICB0aGlzLnJvdXRpbmdTZXJ2aWNlLmdvKHsgY3hSb3V0ZTogJ2hvbWUnIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5ndWVzdFJlZ2lzdGVyRm9ybS5tYXJrQWxsQXNUb3VjaGVkKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xyXG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=