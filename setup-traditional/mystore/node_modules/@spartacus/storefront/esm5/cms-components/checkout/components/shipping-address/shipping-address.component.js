import { __decorate, __read } from "tslib";
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { ActiveCartService, Address, CheckoutDeliveryService, RoutingService, TranslationService, UserAddressService, } from '@spartacus/core';
import { combineLatest } from 'rxjs';
import { map, take, filter } from 'rxjs/operators';
import { CheckoutConfigService } from '../../services/checkout-config.service';
var ShippingAddressComponent = /** @class */ (function () {
    function ShippingAddressComponent(userAddressService, routingService, checkoutDeliveryService, checkoutConfigService, activatedRoute, translation, activeCartService) {
        this.userAddressService = userAddressService;
        this.routingService = routingService;
        this.checkoutDeliveryService = checkoutDeliveryService;
        this.checkoutConfigService = checkoutConfigService;
        this.activatedRoute = activatedRoute;
        this.translation = translation;
        this.activeCartService = activeCartService;
        this.newAddressFormManuallyOpened = false;
        this.forceLoader = false; // this helps with smoother steps transition
        this.isGuestCheckout = false;
    }
    ShippingAddressComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.isLoading$ = this.userAddressService.getAddressesLoading();
        this.existingAddresses$ = this.userAddressService.getAddresses();
        this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();
        this.cards$ = combineLatest([
            this.existingAddresses$,
            this.selectedAddress$,
            this.translation.translate('checkoutAddress.defaultShippingAddress'),
            this.translation.translate('checkoutAddress.shipToThisAddress'),
            this.translation.translate('addressCard.selected'),
        ]).pipe(map(function (_a) {
            var _b = __read(_a, 5), addresses = _b[0], selected = _b[1], textDefaultShippingAddress = _b[2], textShipToThisAddress = _b[3], textSelected = _b[4];
            // Select default address if none selected
            if (addresses.length &&
                (!selected || Object.keys(selected).length === 0)) {
                var defaultAddress = addresses.find(function (address) { return address.defaultAddress; });
                selected = defaultAddress;
                _this.selectAddress(defaultAddress);
            }
            return addresses.map(function (address) {
                var card = _this.getCardContent(address, selected, textDefaultShippingAddress, textShipToThisAddress, textSelected);
                return {
                    address: address,
                    card: card,
                };
            });
        }));
        if (!this.activeCartService.isGuestCart()) {
            this.userAddressService.loadAddresses();
        }
        else {
            this.isGuestCheckout = true;
        }
    };
    ShippingAddressComponent.prototype.getCardContent = function (address, selected, textDefaultShippingAddress, textShipToThisAddress, textSelected) {
        var region = '';
        if (address.region && address.region.isocode) {
            region = address.region.isocode + ', ';
        }
        return {
            title: address.defaultAddress ? textDefaultShippingAddress : '',
            textBold: address.firstName + ' ' + address.lastName,
            text: [
                address.line1,
                address.line2,
                address.town + ', ' + region + address.country.isocode,
                address.postalCode,
                address.phone,
            ],
            actions: [{ name: textShipToThisAddress, event: 'send' }],
            header: selected && selected.id === address.id ? textSelected : '',
        };
    };
    ShippingAddressComponent.prototype.selectAddress = function (address) {
        this.checkoutDeliveryService.setDeliveryAddress(address);
    };
    ShippingAddressComponent.prototype.addAddress = function (address) {
        var _this = this;
        this.selectedAddress$
            .pipe(filter(function (selected) { return !!(selected === null || selected === void 0 ? void 0 : selected.shippingAddress); }), take(1))
            .subscribe(function () { return _this.goNext(); });
        this.forceLoader = true;
        this.existingAddresses$.pipe(take(1)).subscribe(function (addresses) {
            addresses.includes(address)
                ? _this.selectAddress(address)
                : _this.checkoutDeliveryService.createAndSetAddress(address);
        });
    };
    ShippingAddressComponent.prototype.showNewAddressForm = function () {
        this.newAddressFormManuallyOpened = true;
    };
    ShippingAddressComponent.prototype.hideNewAddressForm = function (goPrevious) {
        if (goPrevious === void 0) { goPrevious = false; }
        this.newAddressFormManuallyOpened = false;
        if (goPrevious) {
            this.goPrevious();
        }
    };
    ShippingAddressComponent.prototype.goNext = function () {
        this.routingService.go(this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute));
    };
    ShippingAddressComponent.prototype.goPrevious = function () {
        this.routingService.go(this.checkoutConfigService.getPreviousCheckoutStepUrl(this.activatedRoute) || 'cart');
    };
    ShippingAddressComponent.ctorParameters = function () { return [
        { type: UserAddressService },
        { type: RoutingService },
        { type: CheckoutDeliveryService },
        { type: CheckoutConfigService },
        { type: ActivatedRoute },
        { type: TranslationService },
        { type: ActiveCartService }
    ]; };
    ShippingAddressComponent = __decorate([
        Component({
            selector: 'cx-shipping-address',
            template: "<ng-container *ngIf=\"cards$ | async as cards\">\r\n  <h3 class=\"cx-checkout-title d-none d-lg-block d-xl-block\">\r\n    {{ 'checkoutAddress.shippingAddress' | cxTranslate }}\r\n  </h3>\r\n  <ng-container *ngIf=\"!forceLoader && !(isLoading$ | async); else loading\">\r\n    <ng-container\r\n      *ngIf=\"\r\n        cards?.length && !newAddressFormManuallyOpened;\r\n        else newAddressForm\r\n      \"\r\n    >\r\n      <p class=\"cx-checkout-text\">\r\n        {{ 'checkoutAddress.selectYourShippingAddress' | cxTranslate }}\r\n      </p>\r\n      <div class=\"cx-checkout-btns row\">\r\n        <div class=\"col-sm-12 col-md-12 col-lg-6\">\r\n          <button\r\n            class=\"btn btn-block btn-action\"\r\n            (click)=\"showNewAddressForm()\"\r\n          >\r\n            {{ 'checkoutAddress.addNewAddress' | cxTranslate }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"cx-checkout-body row\">\r\n        <div\r\n          class=\"cx-shipping-address-card col-md-12 col-lg-6\"\r\n          *ngFor=\"let card of cards; let i = index\"\r\n        >\r\n          <div\r\n            class=\"cx-shipping-address-card-inner\"\r\n            (click)=\"selectAddress(card.address)\"\r\n          >\r\n            <cx-card\r\n              [border]=\"true\"\r\n              [fitToContainer]=\"true\"\r\n              [content]=\"card.card\"\r\n              (sendCard)=\"selectAddress(card.address)\"\r\n            ></cx-card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"cx-checkout-btns row\">\r\n        <div class=\"col-md-12 col-lg-6\">\r\n          <button\r\n            class=\"cx-btn btn btn-block btn-action\"\r\n            (click)=\"goPrevious()\"\r\n          >\r\n            {{ 'checkout.backToCart' | cxTranslate }}\r\n          </button>\r\n        </div>\r\n        <div class=\"col-md-12 col-lg-6\">\r\n          <button\r\n            class=\"cx-btn btn btn-block btn-primary\"\r\n            [disabled]=\"!(selectedAddress$ | async)?.id\"\r\n            (click)=\"goNext()\"\r\n          >\r\n            {{ 'common.continue' | cxTranslate }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-template #newAddressForm>\r\n      <ng-container *ngIf=\"cards.length; else initialAddressForm\">\r\n        <cx-address-form\r\n          [showTitleCode]=\"true\"\r\n          (backToAddress)=\"hideNewAddressForm(false)\"\r\n          (submitAddress)=\"addAddress($event)\"\r\n        ></cx-address-form>\r\n      </ng-container>\r\n      <ng-template #initialAddressForm>\r\n        <cx-address-form\r\n          [showTitleCode]=\"true\"\r\n          [setAsDefaultField]=\"!isGuestCheckout\"\r\n          [addressData]=\"selectedAddress$ | async\"\r\n          cancelBtnLabel=\"{{ 'checkout.backToCart' | cxTranslate }}\"\r\n          (backToAddress)=\"hideNewAddressForm(true)\"\r\n          (submitAddress)=\"addAddress($event)\"\r\n        ></cx-address-form>\r\n      </ng-template>\r\n    </ng-template>\r\n  </ng-container>\r\n\r\n  <ng-template #loading>\r\n    <div class=\"cx-spinner\">\r\n      <cx-spinner></cx-spinner>\r\n    </div>\r\n  </ng-template>\r\n</ng-container>\r\n",
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], ShippingAddressComponent);
    return ShippingAddressComponent;
}());
export { ShippingAddressComponent };
//# sourceMappingURL=data:application/json;base64,