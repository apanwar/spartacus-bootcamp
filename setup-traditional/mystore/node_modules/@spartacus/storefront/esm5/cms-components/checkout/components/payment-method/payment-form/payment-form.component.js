import { __decorate, __read } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Address, AddressValidation, CardType, CheckoutDeliveryService, CheckoutPaymentService, Country, GlobalMessageService, GlobalMessageType, Region, StateUtils, UserAddressService, UserPaymentService, } from '@spartacus/core';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { map, switchMap, tap } from 'rxjs/operators';
import { ModalRef, ModalService, } from '../../../../../shared/components/modal/index';
import { ICON_TYPE } from '../../../../misc/icon/index';
import { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line
var PaymentFormComponent = /** @class */ (function () {
    function PaymentFormComponent(checkoutPaymentService, checkoutDeliveryService, userPaymentService, globalMessageService, fb, modalService, userAddressService) {
        this.checkoutPaymentService = checkoutPaymentService;
        this.checkoutDeliveryService = checkoutDeliveryService;
        this.userPaymentService = userPaymentService;
        this.globalMessageService = globalMessageService;
        this.fb = fb;
        this.modalService = modalService;
        this.userAddressService = userAddressService;
        this.iconTypes = ICON_TYPE;
        this.months = [];
        this.years = [];
        this.sameAsShippingAddress = true;
        this.selectedCountry$ = new BehaviorSubject('');
        this.goBack = new EventEmitter();
        this.closeForm = new EventEmitter();
        this.setPaymentDetails = new EventEmitter();
        this.paymentForm = this.fb.group({
            cardType: this.fb.group({
                code: [null, Validators.required],
            }),
            accountHolderName: ['', Validators.required],
            cardNumber: ['', Validators.required],
            expiryMonth: [null, Validators.required],
            expiryYear: [null, Validators.required],
            cvn: ['', Validators.required],
            defaultPayment: [false],
        });
        this.billingAddressForm = this.fb.group({
            firstName: ['', Validators.required],
            lastName: ['', Validators.required],
            line1: ['', Validators.required],
            line2: [''],
            town: ['', Validators.required],
            region: this.fb.group({
                isocodeShort: [null, Validators.required],
            }),
            country: this.fb.group({
                isocode: [null, Validators.required],
            }),
            postalCode: ['', Validators.required],
        });
    }
    PaymentFormComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.expMonthAndYear();
        this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(tap(function (countries) {
            // If the store is empty fetch countries. This is also used when changing language.
            if (Object.keys(countries).length === 0) {
                _this.userPaymentService.loadBillingCountries();
            }
        }));
        this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(tap(function (cardTypes) {
            if (Object.keys(cardTypes).length === 0) {
                _this.checkoutPaymentService.loadSupportedCardTypes();
            }
        }));
        this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();
        this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();
        this.showSameAsShippingAddressCheckbox$ = combineLatest([
            this.countries$,
            this.shippingAddress$,
        ]).pipe(map(function (_a) {
            var _b = __read(_a, 2), countries = _b[0], address = _b[1];
            return ((address === null || address === void 0 ? void 0 : address.country) &&
                !!countries.filter(function (country) {
                    return country.isocode === address.country.isocode;
                }).length);
        }), tap(function (shouldShowCheckbox) {
            _this.sameAsShippingAddress = shouldShowCheckbox;
        }));
        // verify the new added address
        this.addressVerifySub = this.checkoutDeliveryService
            .getAddressVerificationResults()
            .subscribe(function (results) {
            if (results.decision === 'FAIL') {
                _this.checkoutDeliveryService.clearAddressVerificationResults();
            }
            else if (results.decision === 'ACCEPT') {
                _this.next();
            }
            else if (results.decision === 'REJECT') {
                _this.globalMessageService.add({ key: 'addressForm.invalidAddress' }, GlobalMessageType.MSG_TYPE_ERROR);
                _this.checkoutDeliveryService.clearAddressVerificationResults();
            }
            else if (results.decision === 'REVIEW') {
                _this.openSuggestedAddress(results);
            }
        });
        this.regions$ = this.selectedCountry$.pipe(switchMap(function (country) { return _this.userAddressService.getRegions(country); }), tap(function (regions) {
            var regionControl = _this.billingAddressForm.get('region.isocodeShort');
            if (regions.length > 0) {
                regionControl.enable();
            }
            else {
                regionControl.disable();
            }
        }));
    };
    PaymentFormComponent.prototype.expMonthAndYear = function () {
        var year = new Date().getFullYear();
        for (var i = 0; i < 10; i++) {
            this.years.push(year + i);
        }
        for (var j = 1; j <= 12; j++) {
            if (j < 10) {
                this.months.push("0" + j);
            }
            else {
                this.months.push(j.toString());
            }
        }
    };
    PaymentFormComponent.prototype.toggleDefaultPaymentMethod = function () {
        this.paymentForm.value.defaultPayment = !this.paymentForm.value
            .defaultPayment;
    };
    PaymentFormComponent.prototype.toggleSameAsShippingAddress = function () {
        this.sameAsShippingAddress = !this.sameAsShippingAddress;
    };
    PaymentFormComponent.prototype.getAddressCardContent = function (address) {
        var region = '';
        if (address.region && address.region.isocode) {
            region = address.region.isocode + ', ';
        }
        return {
            textBold: address.firstName + ' ' + address.lastName,
            text: [
                address.line1,
                address.line2,
                address.town + ', ' + region + address.country.isocode,
                address.postalCode,
                address.phone,
            ],
        };
    };
    PaymentFormComponent.prototype.openSuggestedAddress = function (results) {
        var _this = this;
        if (!this.suggestedAddressModalRef) {
            this.suggestedAddressModalRef = this.modalService.open(SuggestedAddressDialogComponent, { centered: true, size: 'lg' });
            this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddressForm.value;
            this.suggestedAddressModalRef.componentInstance.suggestedAddresses =
                results.suggestedAddresses;
            this.suggestedAddressModalRef.result
                .then(function () {
                _this.checkoutDeliveryService.clearAddressVerificationResults();
                _this.suggestedAddressModalRef = null;
            })
                .catch(function () {
                // this  callback is called when modal is closed with Esc key or clicking backdrop
                _this.checkoutDeliveryService.clearAddressVerificationResults();
                _this.suggestedAddressModalRef = null;
            });
        }
    };
    PaymentFormComponent.prototype.close = function () {
        this.closeForm.emit();
    };
    PaymentFormComponent.prototype.back = function () {
        this.goBack.emit();
    };
    PaymentFormComponent.prototype.verifyAddress = function () {
        if (this.sameAsShippingAddress) {
            this.next();
        }
        else {
            this.checkoutDeliveryService.verifyAddress(this.billingAddressForm.value);
        }
    };
    PaymentFormComponent.prototype.countrySelected = function (country) {
        this.billingAddressForm.get('country.isocode').setValue(country.isocode);
        this.selectedCountry$.next(country.isocode);
    };
    PaymentFormComponent.prototype.next = function () {
        if (this.paymentForm.valid) {
            if (this.sameAsShippingAddress) {
                this.setPaymentDetails.emit({
                    paymentDetails: this.paymentForm.value,
                    billingAddress: null,
                });
            }
            else {
                if (this.billingAddressForm.valid) {
                    this.setPaymentDetails.emit({
                        paymentDetails: this.paymentForm.value,
                        billingAddress: this.billingAddressForm.value,
                    });
                }
                else {
                    this.billingAddressForm.markAllAsTouched();
                }
            }
        }
        else {
            this.paymentForm.markAllAsTouched();
            if (!this.sameAsShippingAddress) {
                this.billingAddressForm.markAllAsTouched();
            }
        }
    };
    PaymentFormComponent.prototype.ngOnDestroy = function () {
        if (this.addressVerifySub) {
            this.addressVerifySub.unsubscribe();
        }
    };
    PaymentFormComponent.ctorParameters = function () { return [
        { type: CheckoutPaymentService },
        { type: CheckoutDeliveryService },
        { type: UserPaymentService },
        { type: GlobalMessageService },
        { type: FormBuilder },
        { type: ModalService },
        { type: UserAddressService }
    ]; };
    __decorate([
        Input()
    ], PaymentFormComponent.prototype, "setAsDefaultField", void 0);
    __decorate([
        Input()
    ], PaymentFormComponent.prototype, "paymentMethodsCount", void 0);
    __decorate([
        Output()
    ], PaymentFormComponent.prototype, "goBack", void 0);
    __decorate([
        Output()
    ], PaymentFormComponent.prototype, "closeForm", void 0);
    __decorate([
        Output()
    ], PaymentFormComponent.prototype, "setPaymentDetails", void 0);
    PaymentFormComponent = __decorate([
        Component({
            selector: 'cx-payment-form',
            template: "<!-- FORM -->\r\n<ng-container *ngIf=\"!(loading$ | async).loading; else spinner\">\r\n  <form (ngSubmit)=\"next()\" [formGroup]=\"paymentForm\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12 col-xl-10\">\r\n        <div class=\"form-group\" formGroupName=\"cardType\">\r\n          <ng-container *ngIf=\"cardTypes$ | async as cardTypes\">\r\n            <div *ngIf=\"cardTypes.length !== 0\">\r\n              <label aria-required=\"true\">\r\n                <span class=\"label-content required\">{{\r\n                  'paymentForm.paymentType' | cxTranslate\r\n                }}</span>\r\n                <ng-select\r\n                  [searchable]=\"false\"\r\n                  [clearable]=\"false\"\r\n                  [items]=\"cardTypes\"\r\n                  bindLabel=\"name\"\r\n                  bindValue=\"code\"\r\n                  placeholder=\"{{ 'paymentForm.selectOne' | cxTranslate }}\"\r\n                  formControlName=\"code\"\r\n                >\r\n                </ng-select>\r\n                <cx-form-errors\r\n                  [control]=\"paymentForm.get('cardType.code')\"\r\n                ></cx-form-errors>\r\n              </label>\r\n            </div>\r\n          </ng-container>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label>\r\n            <span class=\"label-content\">{{\r\n              'paymentForm.accountHolderName.label' | cxTranslate\r\n            }}</span>\r\n            <input\r\n              class=\"form-control\"\r\n              type=\"text\"\r\n              placeholder=\"{{\r\n                'paymentForm.accountHolderName.placeholder' | cxTranslate\r\n              }}\"\r\n              formControlName=\"accountHolderName\"\r\n            />\r\n            <cx-form-errors\r\n              [control]=\"paymentForm.get('accountHolderName')\"\r\n            ></cx-form-errors>\r\n          </label>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label>\r\n            <span class=\"label-content\">{{\r\n              'paymentForm.cardNumber' | cxTranslate\r\n            }}</span>\r\n            <input\r\n              type=\"text\"\r\n              class=\"form-control\"\r\n              formControlName=\"cardNumber\"\r\n            />\r\n            <cx-form-errors\r\n              [control]=\"paymentForm.get('cardNumber')\"\r\n            ></cx-form-errors>\r\n          </label>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n          <div class=\"form-group col-md-8\">\r\n            <label>\r\n              <span class=\"label-content\">{{\r\n                'paymentForm.expirationDate' | cxTranslate\r\n              }}</span>\r\n              <div class=\"cx-payment-form-exp-date\">\r\n                <div class=\"cx-payment-form-exp-date-wrapper\">\r\n                  <ng-select\r\n                    [searchable]=\"false\"\r\n                    [clearable]=\"false\"\r\n                    [items]=\"months\"\r\n                    placeholder=\"{{ 'paymentForm.monthMask' | cxTranslate }}\"\r\n                    formControlName=\"expiryMonth\"\r\n                  >\r\n                  </ng-select>\r\n                  <cx-form-errors\r\n                    [control]=\"paymentForm.get('expiryMonth')\"\r\n                  ></cx-form-errors>\r\n                </div>\r\n                <div class=\"cx-payment-form-exp-date-wrapper\">\r\n                  <ng-select\r\n                    [searchable]=\"false\"\r\n                    [clearable]=\"false\"\r\n                    [items]=\"years\"\r\n                    placeholder=\"{{ 'paymentForm.yearMask' | cxTranslate }}\"\r\n                    formControlName=\"expiryYear\"\r\n                  >\r\n                  </ng-select>\r\n                  <cx-form-errors\r\n                    [control]=\"paymentForm.get('expiryYear')\"\r\n                  ></cx-form-errors>\r\n                </div>\r\n              </div>\r\n            </label>\r\n          </div>\r\n\r\n          <div class=\"form-group col-md-4\">\r\n            <label>\r\n              <span class=\"label-content\">\r\n                {{ 'paymentForm.securityCode' | cxTranslate }}\r\n                <cx-icon\r\n                  [type]=\"iconTypes.INFO\"\r\n                  class=\"cx-payment-form-tooltip\"\r\n                  placement=\"right\"\r\n                  title=\"{{ 'paymentForm.securityCodeTitle' | cxTranslate }}\"\r\n                  alt=\"\"\r\n                ></cx-icon>\r\n              </span>\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                id=\"cVVNumber\"\r\n                formControlName=\"cvn\"\r\n              />\r\n              <cx-form-errors\r\n                [control]=\"paymentForm.get('cvn')\"\r\n              ></cx-form-errors>\r\n            </label>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-group\" *ngIf=\"setAsDefaultField\">\r\n          <div class=\"form-check\">\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                class=\"form-check-input\"\r\n                (change)=\"toggleDefaultPaymentMethod()\"\r\n              />\r\n              <span class=\"form-check-label\">{{\r\n                'paymentForm.setAsDefault' | cxTranslate\r\n              }}</span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- BILLING -->\r\n        <div class=\"cx-payment-form-billing\">\r\n          <div class=\"cx-payment-form-billing-address\">\r\n            {{ 'paymentForm.billingAddress' | cxTranslate }}\r\n          </div>\r\n\r\n          <!-- SAME AS SHIPPING CHECKBOX -->\r\n          <ng-container *ngIf=\"showSameAsShippingAddressCheckbox$ | async\">\r\n            <div class=\"form-group\">\r\n              <div class=\"form-check\">\r\n                <label>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    class=\"form-check-input\"\r\n                    [checked]=\"sameAsShippingAddress\"\r\n                    (change)=\"toggleSameAsShippingAddress()\"\r\n                  />\r\n                  <span class=\"form-check-label\">{{\r\n                    'paymentForm.sameAsShippingAddress' | cxTranslate\r\n                  }}</span>\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </ng-container>\r\n\r\n          <!-- BILLING INFO COMPONENT -->\r\n          <ng-container\r\n            *ngIf=\"\r\n              sameAsShippingAddress && shippingAddress$\r\n                | async as shippingAddress;\r\n              else billingAddress\r\n            \"\r\n          >\r\n            <cx-card\r\n              [content]=\"getAddressCardContent(shippingAddress)\"\r\n            ></cx-card>\r\n          </ng-container>\r\n\r\n          <ng-template #billingAddress>\r\n            <div [formGroup]=\"billingAddressForm\">\r\n              <div class=\"form-group\" formGroupName=\"country\">\r\n                <ng-container *ngIf=\"countries$ | async as countries\">\r\n                  <div *ngIf=\"countries.length !== 0\">\r\n                    <label aria-required=\"true\">\r\n                      <span class=\"label-content required\">{{\r\n                        'addressForm.country' | cxTranslate\r\n                      }}</span>\r\n                      <ng-select\r\n                        [searchable]=\"true\"\r\n                        [clearable]=\"false\"\r\n                        [items]=\"countries\"\r\n                        bindLabel=\"name\"\r\n                        bindValue=\"isocode\"\r\n                        placeholder=\"{{\r\n                          'addressForm.selectOne' | cxTranslate\r\n                        }}\"\r\n                        (change)=\"countrySelected($event)\"\r\n                        formControlName=\"isocode\"\r\n                      >\r\n                      </ng-select>\r\n                      <cx-form-errors\r\n                        [control]=\"billingAddressForm.get('country.isocode')\"\r\n                      ></cx-form-errors>\r\n                    </label>\r\n                  </div>\r\n                </ng-container>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label>\r\n                  <span class=\"label-content required\">{{\r\n                    'addressForm.firstName.label' | cxTranslate\r\n                  }}</span>\r\n                  <input\r\n                    class=\"form-control\"\r\n                    type=\"text\"\r\n                    placeholder=\"{{\r\n                      'addressForm.firstName.placeholder' | cxTranslate\r\n                    }}\"\r\n                    formControlName=\"firstName\"\r\n                  />\r\n                  <cx-form-errors\r\n                    [control]=\"billingAddressForm.get('firstName')\"\r\n                  ></cx-form-errors>\r\n                </label>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label>\r\n                  <span class=\"label-content required\">{{\r\n                    'addressForm.lastName.label' | cxTranslate\r\n                  }}</span>\r\n                  <input\r\n                    type=\"text\"\r\n                    class=\"form-control\"\r\n                    placeholder=\"{{\r\n                      'addressForm.lastName.placeholder' | cxTranslate\r\n                    }}\"\r\n                    formControlName=\"lastName\"\r\n                  />\r\n                  <cx-form-errors\r\n                    [control]=\"billingAddressForm.get('lastName')\"\r\n                  ></cx-form-errors>\r\n                </label>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label>\r\n                  <span class=\"label-content required\">{{\r\n                    'addressForm.address1' | cxTranslate\r\n                  }}</span>\r\n                  <input\r\n                    type=\"text\"\r\n                    class=\"form-control\"\r\n                    placeholder=\"{{\r\n                      'addressForm.streetAddress' | cxTranslate\r\n                    }}\"\r\n                    formControlName=\"line1\"\r\n                  />\r\n                  <cx-form-errors\r\n                    [control]=\"billingAddressForm.get('line1')\"\r\n                  ></cx-form-errors>\r\n                </label>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label>\r\n                  <span class=\"label-content\">{{\r\n                    'addressForm.address2' | cxTranslate\r\n                  }}</span>\r\n                  <input\r\n                    type=\"text\"\r\n                    class=\"form-control\"\r\n                    placeholder=\"{{ 'addressForm.aptSuite' | cxTranslate }}\"\r\n                    formControlName=\"line2\"\r\n                  />\r\n                </label>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"form-group col-md-6\">\r\n                  <label>\r\n                    <span class=\"label-content required\">{{\r\n                      'addressForm.city.label' | cxTranslate\r\n                    }}</span>\r\n                    <input\r\n                      type=\"text\"\r\n                      class=\"form-control\"\r\n                      placeholder=\"{{\r\n                        'addressForm.city.placeholder' | cxTranslate\r\n                      }}\"\r\n                      formControlName=\"town\"\r\n                    />\r\n                    <cx-form-errors\r\n                      [control]=\"billingAddressForm.get('town')\"\r\n                    ></cx-form-errors>\r\n                  </label>\r\n                </div>\r\n                <div class=\"form-group col-md-6\">\r\n                  <label>\r\n                    <span class=\"label-content required\">{{\r\n                      'addressForm.zipCode.label' | cxTranslate\r\n                    }}</span>\r\n                    <input\r\n                      type=\"text\"\r\n                      class=\"form-control\"\r\n                      placeholder=\"{{\r\n                        'addressForm.zipCode.placeholder' | cxTranslate\r\n                      }}\"\r\n                      formControlName=\"postalCode\"\r\n                    />\r\n                    <cx-form-errors\r\n                      [control]=\"billingAddressForm.get('postalCode')\"\r\n                    ></cx-form-errors>\r\n                  </label>\r\n                </div>\r\n                <ng-container\r\n                  *ngIf=\"regions$ | async as regions\"\r\n                  formGroupName=\"region\"\r\n                >\r\n                  <ng-container *ngIf=\"regions.length !== 0\">\r\n                    <div class=\"form-group col-md-6\">\r\n                      <label aria-required=\"true\">\r\n                        <span class=\"label-content required\">{{\r\n                          'addressForm.state' | cxTranslate\r\n                        }}</span>\r\n                        <ng-select\r\n                          class=\"region-select\"\r\n                          formControlName=\"isocodeShort\"\r\n                          [searchable]=\"true\"\r\n                          [clearable]=\"false\"\r\n                          [items]=\"regions\"\r\n                          bindLabel=\"{{\r\n                            regions[0].name ? 'name' : 'isocodeShort'\r\n                          }}\"\r\n                          bindValue=\"{{\r\n                            regions[0].name ? 'isocodeShort' : 'region'\r\n                          }}\"\r\n                          placeholder=\"{{\r\n                            'addressForm.selectOne' | cxTranslate\r\n                          }}\"\r\n                        >\r\n                        </ng-select>\r\n                        <cx-form-errors\r\n                          [control]=\"\r\n                            billingAddressForm.get('region.isocodeShort')\r\n                          \"\r\n                        ></cx-form-errors>\r\n                      </label>\r\n                    </div>\r\n                  </ng-container>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n          </ng-template>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- BUTTON SECTION -->\r\n    <div class=\"cx-checkout-btns row\">\r\n      <div class=\"col-md-12 col-lg-6\">\r\n        <button\r\n          *ngIf=\"paymentMethodsCount === 0\"\r\n          class=\"btn btn-block btn-action\"\r\n          (click)=\"back()\"\r\n        >\r\n          {{ 'common.back' | cxTranslate }}\r\n        </button>\r\n        <button\r\n          *ngIf=\"paymentMethodsCount > 0\"\r\n          class=\"btn btn-block btn-action\"\r\n          (click)=\"close()\"\r\n        >\r\n          {{ 'paymentForm.changePayment' | cxTranslate }}\r\n        </button>\r\n      </div>\r\n      <div class=\"col-md-12 col-lg-6\">\r\n        <button class=\"btn btn-block btn-primary\" type=\"submit\">\r\n          {{ 'common.continue' | cxTranslate }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</ng-container>\r\n\r\n<ng-template #spinner>\r\n  <cx-spinner></cx-spinner>\r\n</ng-template>\r\n",
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], PaymentFormComponent);
    return PaymentFormComponent;
}());
export { PaymentFormComponent };
//# sourceMappingURL=data:application/json;base64,