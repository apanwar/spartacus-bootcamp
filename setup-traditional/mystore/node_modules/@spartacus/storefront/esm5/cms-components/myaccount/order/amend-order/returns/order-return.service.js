import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { CancelOrReturnRequestEntryInput, GlobalMessageService, GlobalMessageType, OrderEntry, OrderReturnRequestService, RoutingService, } from '@spartacus/core';
import { filter, first, map } from 'rxjs/operators';
import { OrderDetailsService } from '../../order-details/order-details.service';
import { AmendOrderType } from '../amend-order.model';
import { OrderAmendService } from '../amend-order.service';
import * as i0 from "@angular/core";
import * as i1 from "../../order-details/order-details.service";
import * as i2 from "@spartacus/core";
var OrderReturnService = /** @class */ (function (_super) {
    __extends(OrderReturnService, _super);
    function OrderReturnService(orderDetailsService, returnRequestService, routing, globalMessageService) {
        var _this = _super.call(this, orderDetailsService) || this;
        _this.orderDetailsService = orderDetailsService;
        _this.returnRequestService = returnRequestService;
        _this.routing = routing;
        _this.globalMessageService = globalMessageService;
        _this.amendType = AmendOrderType.RETURN;
        return _this;
    }
    OrderReturnService.prototype.getEntries = function () {
        return this.getOrder().pipe(filter(function (order) { return !!order.entries; }), map(function (order) {
            return order.entries.filter(function (entry) { return entry.entryNumber !== -1 && entry.returnableQuantity > 0; });
        }));
    };
    OrderReturnService.prototype.save = function () {
        var _this = this;
        var orderCode = this.form.value.orderCode;
        var entries = this.form.value.entries;
        var inputs = Object.keys(entries)
            .filter(function (entryNumber) { return entries[entryNumber] > 0; })
            .map(function (entryNumber) {
            return ({
                orderEntryNumber: Number(entryNumber),
                quantity: entries[entryNumber],
            });
        });
        this.form.reset();
        this.returnRequestService.createOrderReturnRequest({
            orderCode: orderCode,
            returnRequestEntryInputs: inputs,
        });
        this.returnRequestService
            .getReturnRequestSuccess()
            .pipe(first(Boolean))
            .subscribe(function () { return _this.afterSave(); });
    };
    OrderReturnService.prototype.afterSave = function () {
        var _this = this;
        this.returnRequestService
            .getOrderReturnRequest()
            .pipe(first(function (r) { return !!r; }))
            .subscribe(function (returnRequest) {
            var rma = returnRequest.rma;
            _this.globalMessageService.add({
                key: 'orderDetails.cancellationAndReturn.returnSuccess',
                params: { rma: rma },
            }, GlobalMessageType.MSG_TYPE_CONFIRMATION);
            _this.routing.go({
                cxRoute: 'returnRequestDetails',
                params: { rma: rma },
            });
        });
    };
    OrderReturnService.ctorParameters = function () { return [
        { type: OrderDetailsService },
        { type: OrderReturnRequestService },
        { type: RoutingService },
        { type: GlobalMessageService }
    ]; };
    OrderReturnService.ɵprov = i0.ɵɵdefineInjectable({ factory: function OrderReturnService_Factory() { return new OrderReturnService(i0.ɵɵinject(i1.OrderDetailsService), i0.ɵɵinject(i2.OrderReturnRequestService), i0.ɵɵinject(i2.RoutingService), i0.ɵɵinject(i2.GlobalMessageService)); }, token: OrderReturnService, providedIn: "root" });
    OrderReturnService = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], OrderReturnService);
    return OrderReturnService;
}(OrderAmendService));
export { OrderReturnService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItcmV0dXJuLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL3N0b3JlZnJvbnQvIiwic291cmNlcyI6WyJjbXMtY29tcG9uZW50cy9teWFjY291bnQvb3JkZXIvYW1lbmQtb3JkZXIvcmV0dXJucy9vcmRlci1yZXR1cm4uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQ0wsK0JBQStCLEVBQy9CLG9CQUFvQixFQUNwQixpQkFBaUIsRUFDakIsVUFBVSxFQUNWLHlCQUF5QixFQUN6QixjQUFjLEdBQ2YsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUNoRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7Ozs7QUFLM0Q7SUFBd0Msc0NBQWlCO0lBR3ZELDRCQUNZLG1CQUF3QyxFQUN4QyxvQkFBK0MsRUFDL0MsT0FBdUIsRUFDdkIsb0JBQTBDO1FBSnRELFlBTUUsa0JBQU0sbUJBQW1CLENBQUMsU0FDM0I7UUFOVyx5QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBQ3hDLDBCQUFvQixHQUFwQixvQkFBb0IsQ0FBMkI7UUFDL0MsYUFBTyxHQUFQLE9BQU8sQ0FBZ0I7UUFDdkIsMEJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQU50RCxlQUFTLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQzs7SUFTbEMsQ0FBQztJQUVELHVDQUFVLEdBQVY7UUFDRSxPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQ3pCLE1BQU0sQ0FBQyxVQUFDLEtBQUssSUFBSyxPQUFBLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFmLENBQWUsQ0FBQyxFQUNsQyxHQUFHLENBQUMsVUFBQyxLQUFLO1lBQ1IsT0FBQSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FDbEIsVUFBQyxLQUFLLElBQUssT0FBQSxLQUFLLENBQUMsV0FBVyxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsR0FBRyxDQUFDLEVBQXhELENBQXdELENBQ3BFO1FBRkQsQ0FFQyxDQUNGLENBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRCxpQ0FBSSxHQUFKO1FBQUEsaUJBd0JDO1FBdkJDLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUM1QyxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFDeEMsSUFBTSxNQUFNLEdBQXNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO2FBQ25FLE1BQU0sQ0FBQyxVQUFDLFdBQVcsSUFBSyxPQUFRLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQWhDLENBQWdDLENBQUM7YUFDekQsR0FBRyxDQUNGLFVBQUMsV0FBVztZQUNWLE9BQUEsQ0FBQztnQkFDQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDO2dCQUNyQyxRQUFRLEVBQVUsT0FBTyxDQUFDLFdBQVcsQ0FBQzthQUNILENBQUE7UUFIckMsQ0FHcUMsQ0FDeEMsQ0FBQztRQUVKLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFbEIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLHdCQUF3QixDQUFDO1lBQ2pELFNBQVMsV0FBQTtZQUNULHdCQUF3QixFQUFFLE1BQU07U0FDakMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLG9CQUFvQjthQUN0Qix1QkFBdUIsRUFBRTthQUN6QixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ3BCLFNBQVMsQ0FBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLFNBQVMsRUFBRSxFQUFoQixDQUFnQixDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVPLHNDQUFTLEdBQWpCO1FBQUEsaUJBa0JDO1FBakJDLElBQUksQ0FBQyxvQkFBb0I7YUFDdEIscUJBQXFCLEVBQUU7YUFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLENBQUMsQ0FBQyxDQUFDLEVBQUgsQ0FBRyxDQUFDLENBQUM7YUFDdkIsU0FBUyxDQUFDLFVBQUMsYUFBYTtZQUN2QixJQUFNLEdBQUcsR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDO1lBQzlCLEtBQUksQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQzNCO2dCQUNFLEdBQUcsRUFBRSxrREFBa0Q7Z0JBQ3ZELE1BQU0sRUFBRSxFQUFFLEdBQUcsS0FBQSxFQUFFO2FBQ2hCLEVBQ0QsaUJBQWlCLENBQUMscUJBQXFCLENBQ3hDLENBQUM7WUFDRixLQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztnQkFDZCxPQUFPLEVBQUUsc0JBQXNCO2dCQUMvQixNQUFNLEVBQUUsRUFBRSxHQUFHLEtBQUEsRUFBRTthQUNoQixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7O2dCQS9EZ0MsbUJBQW1CO2dCQUNsQix5QkFBeUI7Z0JBQ3RDLGNBQWM7Z0JBQ0Qsb0JBQW9COzs7SUFQM0Msa0JBQWtCO1FBSDlCLFVBQVUsQ0FBQztZQUNWLFVBQVUsRUFBRSxNQUFNO1NBQ25CLENBQUM7T0FDVyxrQkFBa0IsQ0FvRTlCOzZCQXRGRDtDQXNGQyxBQXBFRCxDQUF3QyxpQkFBaUIsR0FvRXhEO1NBcEVZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtcclxuICBDYW5jZWxPclJldHVyblJlcXVlc3RFbnRyeUlucHV0LFxyXG4gIEdsb2JhbE1lc3NhZ2VTZXJ2aWNlLFxyXG4gIEdsb2JhbE1lc3NhZ2VUeXBlLFxyXG4gIE9yZGVyRW50cnksXHJcbiAgT3JkZXJSZXR1cm5SZXF1ZXN0U2VydmljZSxcclxuICBSb3V0aW5nU2VydmljZSxcclxufSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGZpbHRlciwgZmlyc3QsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgT3JkZXJEZXRhaWxzU2VydmljZSB9IGZyb20gJy4uLy4uL29yZGVyLWRldGFpbHMvb3JkZXItZGV0YWlscy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQW1lbmRPcmRlclR5cGUgfSBmcm9tICcuLi9hbWVuZC1vcmRlci5tb2RlbCc7XHJcbmltcG9ydCB7IE9yZGVyQW1lbmRTZXJ2aWNlIH0gZnJvbSAnLi4vYW1lbmQtb3JkZXIuc2VydmljZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgT3JkZXJSZXR1cm5TZXJ2aWNlIGV4dGVuZHMgT3JkZXJBbWVuZFNlcnZpY2Uge1xyXG4gIGFtZW5kVHlwZSA9IEFtZW5kT3JkZXJUeXBlLlJFVFVSTjtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgb3JkZXJEZXRhaWxzU2VydmljZTogT3JkZXJEZXRhaWxzU2VydmljZSxcclxuICAgIHByb3RlY3RlZCByZXR1cm5SZXF1ZXN0U2VydmljZTogT3JkZXJSZXR1cm5SZXF1ZXN0U2VydmljZSxcclxuICAgIHByb3RlY3RlZCByb3V0aW5nOiBSb3V0aW5nU2VydmljZSxcclxuICAgIHByb3RlY3RlZCBnbG9iYWxNZXNzYWdlU2VydmljZTogR2xvYmFsTWVzc2FnZVNlcnZpY2VcclxuICApIHtcclxuICAgIHN1cGVyKG9yZGVyRGV0YWlsc1NlcnZpY2UpO1xyXG4gIH1cclxuXHJcbiAgZ2V0RW50cmllcygpOiBPYnNlcnZhYmxlPE9yZGVyRW50cnlbXT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0T3JkZXIoKS5waXBlKFxyXG4gICAgICBmaWx0ZXIoKG9yZGVyKSA9PiAhIW9yZGVyLmVudHJpZXMpLFxyXG4gICAgICBtYXAoKG9yZGVyKSA9PlxyXG4gICAgICAgIG9yZGVyLmVudHJpZXMuZmlsdGVyKFxyXG4gICAgICAgICAgKGVudHJ5KSA9PiBlbnRyeS5lbnRyeU51bWJlciAhPT0gLTEgJiYgZW50cnkucmV0dXJuYWJsZVF1YW50aXR5ID4gMFxyXG4gICAgICAgIClcclxuICAgICAgKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHNhdmUoKTogdm9pZCB7XHJcbiAgICBjb25zdCBvcmRlckNvZGUgPSB0aGlzLmZvcm0udmFsdWUub3JkZXJDb2RlO1xyXG4gICAgY29uc3QgZW50cmllcyA9IHRoaXMuZm9ybS52YWx1ZS5lbnRyaWVzO1xyXG4gICAgY29uc3QgaW5wdXRzOiBDYW5jZWxPclJldHVyblJlcXVlc3RFbnRyeUlucHV0W10gPSBPYmplY3Qua2V5cyhlbnRyaWVzKVxyXG4gICAgICAuZmlsdGVyKChlbnRyeU51bWJlcikgPT4gPG51bWJlcj5lbnRyaWVzW2VudHJ5TnVtYmVyXSA+IDApXHJcbiAgICAgIC5tYXAoXHJcbiAgICAgICAgKGVudHJ5TnVtYmVyKSA9PlxyXG4gICAgICAgICAgKHtcclxuICAgICAgICAgICAgb3JkZXJFbnRyeU51bWJlcjogTnVtYmVyKGVudHJ5TnVtYmVyKSxcclxuICAgICAgICAgICAgcXVhbnRpdHk6IDxudW1iZXI+ZW50cmllc1tlbnRyeU51bWJlcl0sXHJcbiAgICAgICAgICB9IGFzIENhbmNlbE9yUmV0dXJuUmVxdWVzdEVudHJ5SW5wdXQpXHJcbiAgICAgICk7XHJcblxyXG4gICAgdGhpcy5mb3JtLnJlc2V0KCk7XHJcblxyXG4gICAgdGhpcy5yZXR1cm5SZXF1ZXN0U2VydmljZS5jcmVhdGVPcmRlclJldHVyblJlcXVlc3Qoe1xyXG4gICAgICBvcmRlckNvZGUsXHJcbiAgICAgIHJldHVyblJlcXVlc3RFbnRyeUlucHV0czogaW5wdXRzLFxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5yZXR1cm5SZXF1ZXN0U2VydmljZVxyXG4gICAgICAuZ2V0UmV0dXJuUmVxdWVzdFN1Y2Nlc3MoKVxyXG4gICAgICAucGlwZShmaXJzdChCb29sZWFuKSlcclxuICAgICAgLnN1YnNjcmliZSgoKSA9PiB0aGlzLmFmdGVyU2F2ZSgpKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYWZ0ZXJTYXZlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5yZXR1cm5SZXF1ZXN0U2VydmljZVxyXG4gICAgICAuZ2V0T3JkZXJSZXR1cm5SZXF1ZXN0KClcclxuICAgICAgLnBpcGUoZmlyc3QoKHIpID0+ICEhcikpXHJcbiAgICAgIC5zdWJzY3JpYmUoKHJldHVyblJlcXVlc3QpID0+IHtcclxuICAgICAgICBjb25zdCBybWEgPSByZXR1cm5SZXF1ZXN0LnJtYTtcclxuICAgICAgICB0aGlzLmdsb2JhbE1lc3NhZ2VTZXJ2aWNlLmFkZChcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAga2V5OiAnb3JkZXJEZXRhaWxzLmNhbmNlbGxhdGlvbkFuZFJldHVybi5yZXR1cm5TdWNjZXNzJyxcclxuICAgICAgICAgICAgcGFyYW1zOiB7IHJtYSB9LFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIEdsb2JhbE1lc3NhZ2VUeXBlLk1TR19UWVBFX0NPTkZJUk1BVElPTlxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5yb3V0aW5nLmdvKHtcclxuICAgICAgICAgIGN4Um91dGU6ICdyZXR1cm5SZXF1ZXN0RGV0YWlscycsXHJcbiAgICAgICAgICBwYXJhbXM6IHsgcm1hIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=