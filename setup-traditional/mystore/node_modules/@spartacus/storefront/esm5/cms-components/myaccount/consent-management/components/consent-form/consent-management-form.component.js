import { __decorate } from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { ANONYMOUS_CONSENT_STATUS, } from '@spartacus/core';
var ConsentManagementFormComponent = /** @class */ (function () {
    function ConsentManagementFormComponent() {
        this.consentGiven = false;
        this.requiredConsents = [];
        this.consentChanged = new EventEmitter();
    }
    ConsentManagementFormComponent.prototype.ngOnInit = function () {
        if (this.consent) {
            this.consentGiven = Boolean(this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN);
        }
        else {
            if (this.consentTemplate && this.consentTemplate.currentConsent) {
                if (this.consentTemplate.currentConsent.consentWithdrawnDate) {
                    this.consentGiven = false;
                }
                else if (this.consentTemplate.currentConsent.consentGivenDate) {
                    this.consentGiven = true;
                }
            }
        }
    };
    ConsentManagementFormComponent.prototype.onConsentChange = function () {
        this.consentGiven = !this.consentGiven;
        this.consentChanged.emit({
            given: this.consentGiven,
            template: this.consentTemplate,
        });
    };
    ConsentManagementFormComponent.prototype.isRequired = function (templateId) {
        return this.requiredConsents.includes(templateId);
    };
    __decorate([
        Input()
    ], ConsentManagementFormComponent.prototype, "consentTemplate", void 0);
    __decorate([
        Input()
    ], ConsentManagementFormComponent.prototype, "requiredConsents", void 0);
    __decorate([
        Input()
    ], ConsentManagementFormComponent.prototype, "consent", void 0);
    __decorate([
        Output()
    ], ConsentManagementFormComponent.prototype, "consentChanged", void 0);
    ConsentManagementFormComponent = __decorate([
        Component({
            selector: 'cx-consent-management-form',
            template: "<div class=\"form-check\">\r\n  <label>\r\n    <input\r\n      type=\"checkbox\"\r\n      class=\"form-check-input\"\r\n      (change)=\"onConsentChange()\"\r\n      [checked]=\"consentGiven\"\r\n      [disabled]=\"isRequired(consentTemplate?.id)\"\r\n    />\r\n    <span class=\"form-check-label cx-be-bold\">\r\n      {{ consentTemplate?.name }}\r\n    </span>\r\n    <br />\r\n    <span class=\"form-check-label\">\r\n      {{ consentTemplate?.description }}\r\n    </span>\r\n  </label>\r\n</div>\r\n"
        })
    ], ConsentManagementFormComponent);
    return ConsentManagementFormComponent;
}());
export { ConsentManagementFormComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc2VudC1tYW5hZ2VtZW50LWZvcm0uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9zdG9yZWZyb250LyIsInNvdXJjZXMiOlsiY21zLWNvbXBvbmVudHMvbXlhY2NvdW50L2NvbnNlbnQtbWFuYWdlbWVudC9jb21wb25lbnRzL2NvbnNlbnQtZm9ybS9jb25zZW50LW1hbmFnZW1lbnQtZm9ybS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUVMLHdCQUF3QixHQUV6QixNQUFNLGlCQUFpQixDQUFDO0FBTXpCO0lBa0JFO1FBakJBLGlCQUFZLEdBQUcsS0FBSyxDQUFDO1FBTXJCLHFCQUFnQixHQUFhLEVBQUUsQ0FBQztRQU1oQyxtQkFBYyxHQUFHLElBQUksWUFBWSxFQUc3QixDQUFDO0lBRVUsQ0FBQztJQUVoQixpREFBUSxHQUFSO1FBQ0UsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUN6QixJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksS0FBSyx3QkFBd0IsQ0FBQyxLQUFLLENBQzdELENBQUM7U0FDSDthQUFNO1lBQ0wsSUFBSSxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsY0FBYyxFQUFFO2dCQUMvRCxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDLG9CQUFvQixFQUFFO29CQUM1RCxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztpQkFDM0I7cUJBQU0sSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsRUFBRTtvQkFDL0QsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7aUJBQzFCO2FBQ0Y7U0FDRjtJQUNILENBQUM7SUFFRCx3REFBZSxHQUFmO1FBQ0UsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7UUFFdkMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUM7WUFDdkIsS0FBSyxFQUFFLElBQUksQ0FBQyxZQUFZO1lBQ3hCLFFBQVEsRUFBRSxJQUFJLENBQUMsZUFBZTtTQUMvQixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsbURBQVUsR0FBVixVQUFXLFVBQWtCO1FBQzNCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBM0NEO1FBREMsS0FBSyxFQUFFOzJFQUN5QjtJQUdqQztRQURDLEtBQUssRUFBRTs0RUFDd0I7SUFHaEM7UUFEQyxLQUFLLEVBQUU7bUVBQ2tCO0lBRzFCO1FBREMsTUFBTSxFQUFFOzBFQUlKO0lBaEJNLDhCQUE4QjtRQUoxQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsNEJBQTRCO1lBQ3RDLG9nQkFBdUQ7U0FDeEQsQ0FBQztPQUNXLDhCQUE4QixDQWdEMUM7SUFBRCxxQ0FBQztDQUFBLEFBaERELElBZ0RDO1NBaERZLDhCQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtcclxuICBBbm9ueW1vdXNDb25zZW50LFxyXG4gIEFOT05ZTU9VU19DT05TRU5UX1NUQVRVUyxcclxuICBDb25zZW50VGVtcGxhdGUsXHJcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnY3gtY29uc2VudC1tYW5hZ2VtZW50LWZvcm0nLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9jb25zZW50LW1hbmFnZW1lbnQtZm9ybS5jb21wb25lbnQuaHRtbCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDb25zZW50TWFuYWdlbWVudEZvcm1Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIGNvbnNlbnRHaXZlbiA9IGZhbHNlO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIGNvbnNlbnRUZW1wbGF0ZTogQ29uc2VudFRlbXBsYXRlO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHJlcXVpcmVkQ29uc2VudHM6IHN0cmluZ1tdID0gW107XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgY29uc2VudDogQW5vbnltb3VzQ29uc2VudDtcclxuXHJcbiAgQE91dHB1dCgpXHJcbiAgY29uc2VudENoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHtcclxuICAgIGdpdmVuOiBib29sZWFuO1xyXG4gICAgdGVtcGxhdGU6IENvbnNlbnRUZW1wbGF0ZTtcclxuICB9PigpO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHt9XHJcblxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuY29uc2VudCkge1xyXG4gICAgICB0aGlzLmNvbnNlbnRHaXZlbiA9IEJvb2xlYW4oXHJcbiAgICAgICAgdGhpcy5jb25zZW50LmNvbnNlbnRTdGF0ZSA9PT0gQU5PTllNT1VTX0NPTlNFTlRfU1RBVFVTLkdJVkVOXHJcbiAgICAgICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAodGhpcy5jb25zZW50VGVtcGxhdGUgJiYgdGhpcy5jb25zZW50VGVtcGxhdGUuY3VycmVudENvbnNlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5jb25zZW50VGVtcGxhdGUuY3VycmVudENvbnNlbnQuY29uc2VudFdpdGhkcmF3bkRhdGUpIHtcclxuICAgICAgICAgIHRoaXMuY29uc2VudEdpdmVuID0gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNvbnNlbnRUZW1wbGF0ZS5jdXJyZW50Q29uc2VudC5jb25zZW50R2l2ZW5EYXRlKSB7XHJcbiAgICAgICAgICB0aGlzLmNvbnNlbnRHaXZlbiA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkNvbnNlbnRDaGFuZ2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLmNvbnNlbnRHaXZlbiA9ICF0aGlzLmNvbnNlbnRHaXZlbjtcclxuXHJcbiAgICB0aGlzLmNvbnNlbnRDaGFuZ2VkLmVtaXQoe1xyXG4gICAgICBnaXZlbjogdGhpcy5jb25zZW50R2l2ZW4sXHJcbiAgICAgIHRlbXBsYXRlOiB0aGlzLmNvbnNlbnRUZW1wbGF0ZSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaXNSZXF1aXJlZCh0ZW1wbGF0ZUlkOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLnJlcXVpcmVkQ29uc2VudHMuaW5jbHVkZXModGVtcGxhdGVJZCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==