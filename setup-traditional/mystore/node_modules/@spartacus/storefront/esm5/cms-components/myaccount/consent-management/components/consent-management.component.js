import { __decorate, __read } from "tslib";
import { Component } from '@angular/core';
import { AnonymousConsentsConfig, AnonymousConsentsService, AuthService, ConsentTemplate, GlobalMessageService, GlobalMessageType, UserConsentService, } from '@spartacus/core';
import { BehaviorSubject, combineLatest, concat, Subscription, } from 'rxjs';
import { distinctUntilChanged, filter, map, scan, skipWhile, tap, withLatestFrom, } from 'rxjs/operators';
var ConsentManagementComponent = /** @class */ (function () {
    function ConsentManagementComponent(userConsentService, globalMessageService, anonymousConsentsConfig, anonymousConsentsService, authService) {
        this.userConsentService = userConsentService;
        this.globalMessageService = globalMessageService;
        this.anonymousConsentsConfig = anonymousConsentsConfig;
        this.anonymousConsentsService = anonymousConsentsService;
        this.authService = authService;
        this.subscriptions = new Subscription();
        this.allConsentsLoading = new BehaviorSubject(false);
        this.requiredConsents = [];
    }
    ConsentManagementComponent.prototype.ngOnInit = function () {
        this.loading$ = combineLatest([
            this.userConsentService.getConsentsResultLoading(),
            this.userConsentService.getGiveConsentResultLoading(),
            this.userConsentService.getWithdrawConsentResultLoading(),
            this.authService.isUserLoggedIn(),
            this.allConsentsLoading,
        ]).pipe(map(function (_a) {
            var _b = __read(_a, 5), consentLoading = _b[0], giveConsentLoading = _b[1], withdrawConsentLoading = _b[2], isUserLoggedIn = _b[3], allConsentsLoading = _b[4];
            return consentLoading ||
                giveConsentLoading ||
                withdrawConsentLoading ||
                !isUserLoggedIn ||
                allConsentsLoading;
        }));
        this.consentListInit();
        this.giveConsentInit();
        this.withdrawConsentInit();
    };
    ConsentManagementComponent.prototype.consentListInit = function () {
        var _this = this;
        this.templateList$ = this.userConsentService.getConsents().pipe(withLatestFrom(this.anonymousConsentsService.getTemplates(), this.authService.isUserLoggedIn()), filter(function (_a) {
            var _b = __read(_a, 3), _templateList = _b[0], _anonymousTemplates = _b[1], isUserLoggedIn = _b[2];
            return isUserLoggedIn;
        }), tap(function (_a) {
            var _b = __read(_a, 2), templateList = _b[0], _anonymousTemplates = _b[1];
            if (!_this.consentsExists(templateList)) {
                _this.userConsentService.loadConsents();
            }
        }), map(function (_a) {
            var _b = __read(_a, 2), templateList = _b[0], anonymousTemplates = _b[1];
            if (Boolean(_this.anonymousConsentsConfig.anonymousConsents)) {
                if (Boolean(_this.anonymousConsentsConfig.anonymousConsents.requiredConsents)) {
                    _this.requiredConsents = _this.anonymousConsentsConfig.anonymousConsents.requiredConsents;
                }
                if (Boolean(_this.anonymousConsentsConfig.anonymousConsents
                    .consentManagementPage)) {
                    return _this.hideAnonymousConsents(templateList, anonymousTemplates);
                }
            }
            return templateList;
        }));
    };
    ConsentManagementComponent.prototype.hideAnonymousConsents = function (templateList, anonymousTemplates) {
        if (anonymousTemplates === void 0) { anonymousTemplates = []; }
        var hideTemplateIds = [];
        if (!this.anonymousConsentsConfig.anonymousConsents.consentManagementPage
            .showAnonymousConsents) {
            hideTemplateIds = anonymousTemplates.map(function (template) { return template.id; });
            return this.userConsentService.filterConsentTemplates(templateList, hideTemplateIds);
        }
        if (Boolean(this.anonymousConsentsConfig.anonymousConsents.consentManagementPage
            .hideConsents) &&
            this.anonymousConsentsConfig.anonymousConsents.consentManagementPage
                .hideConsents.length > 0) {
            hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents
                .consentManagementPage.hideConsents;
        }
        return this.userConsentService.filterConsentTemplates(templateList, hideTemplateIds);
    };
    ConsentManagementComponent.prototype.giveConsentInit = function () {
        var _this = this;
        this.userConsentService.resetGiveConsentProcessState();
        this.subscriptions.add(this.userConsentService
            .getGiveConsentResultSuccess()
            .subscribe(function (success) { return _this.onConsentGivenSuccess(success); }));
    };
    ConsentManagementComponent.prototype.withdrawConsentInit = function () {
        var _this = this;
        this.userConsentService.resetWithdrawConsentProcessState();
        this.subscriptions.add(this.userConsentService
            .getWithdrawConsentResultLoading()
            .pipe(skipWhile(Boolean), withLatestFrom(this.userConsentService.getWithdrawConsentResultSuccess()), map(function (_a) {
            var _b = __read(_a, 2), withdrawalSuccess = _b[1];
            return withdrawalSuccess;
        }), tap(function (withdrawalSuccess) {
            if (withdrawalSuccess) {
                _this.userConsentService.loadConsents();
            }
        }))
            .subscribe(function (withdrawalSuccess) {
            return _this.onConsentWithdrawnSuccess(withdrawalSuccess);
        }));
    };
    ConsentManagementComponent.prototype.consentsExists = function (templateList) {
        return Boolean(templateList) && templateList.length > 0;
    };
    ConsentManagementComponent.prototype.onConsentChange = function (_a) {
        var given = _a.given, template = _a.template;
        if (given) {
            this.userConsentService.giveConsent(template.id, template.version);
        }
        else {
            this.userConsentService.withdrawConsent(template.currentConsent.code);
        }
    };
    ConsentManagementComponent.prototype.onConsentGivenSuccess = function (success) {
        if (success) {
            this.userConsentService.resetGiveConsentProcessState();
            this.globalMessageService.add({ key: 'consentManagementForm.message.success.given' }, GlobalMessageType.MSG_TYPE_CONFIRMATION);
        }
    };
    ConsentManagementComponent.prototype.onConsentWithdrawnSuccess = function (success) {
        if (success) {
            this.userConsentService.resetWithdrawConsentProcessState();
            this.globalMessageService.add({ key: 'consentManagementForm.message.success.withdrawn' }, GlobalMessageType.MSG_TYPE_CONFIRMATION);
        }
    };
    ConsentManagementComponent.prototype.rejectAll = function (templates) {
        var _this = this;
        if (templates === void 0) { templates = []; }
        var consentsToWithdraw = [];
        templates.forEach(function (template) {
            if (_this.userConsentService.isConsentGiven(template.currentConsent)) {
                if (_this.isRequiredConsent(template)) {
                    return;
                }
                consentsToWithdraw.push(template);
            }
        });
        this.allConsentsLoading.next(true);
        this.subscriptions.add(this.setupWithdrawalStream(consentsToWithdraw)
            .pipe(tap(function (_timesLoaded) { return _this.allConsentsLoading.next(false); }))
            .subscribe());
    };
    ConsentManagementComponent.prototype.setupWithdrawalStream = function (consentsToWithdraw) {
        var _this = this;
        if (consentsToWithdraw === void 0) { consentsToWithdraw = []; }
        var loading$ = concat(this.userConsentService.getWithdrawConsentResultLoading()).pipe(distinctUntilChanged(), filter(function (loading) { return !loading; }));
        var count$ = loading$.pipe(scan(function (acc, _value) { return acc + 1; }, -1));
        var withdraw$ = count$.pipe(tap(function (i) {
            if (i < consentsToWithdraw.length) {
                _this.userConsentService.withdrawConsent(consentsToWithdraw[i].currentConsent.code);
            }
        }));
        var checkTimesLoaded$ = withdraw$.pipe(filter(function (timesLoaded) { return timesLoaded === consentsToWithdraw.length; }));
        return checkTimesLoaded$;
    };
    ConsentManagementComponent.prototype.allowAll = function (templates) {
        var _this = this;
        if (templates === void 0) { templates = []; }
        var consentsToGive = [];
        templates.forEach(function (template) {
            if (_this.userConsentService.isConsentWithdrawn(template.currentConsent)) {
                if (_this.isRequiredConsent(template)) {
                    return;
                }
                consentsToGive.push(template);
            }
        });
        this.allConsentsLoading.next(true);
        this.subscriptions.add(this.setupGiveStream(consentsToGive)
            .pipe(tap(function (_timesLoaded) { return _this.allConsentsLoading.next(false); }))
            .subscribe());
    };
    ConsentManagementComponent.prototype.setupGiveStream = function (consentsToGive) {
        var _this = this;
        if (consentsToGive === void 0) { consentsToGive = []; }
        var loading$ = concat(this.userConsentService.getGiveConsentResultLoading()).pipe(distinctUntilChanged(), filter(function (loading) { return !loading; }));
        var count$ = loading$.pipe(scan(function (acc, _value) { return acc + 1; }, -1));
        var giveConsent$ = count$.pipe(tap(function (i) {
            if (i < consentsToGive.length) {
                _this.userConsentService.giveConsent(consentsToGive[i].id, consentsToGive[i].version);
            }
        }));
        var checkTimesLoaded$ = giveConsent$.pipe(filter(function (timesLoaded) { return timesLoaded === consentsToGive.length; }));
        return checkTimesLoaded$;
    };
    ConsentManagementComponent.prototype.isRequiredConsent = function (template) {
        return (Boolean(this.anonymousConsentsConfig.anonymousConsents) &&
            Boolean(this.anonymousConsentsConfig.anonymousConsents.requiredConsents) &&
            this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(template.id));
    };
    ConsentManagementComponent.prototype.ngOnDestroy = function () {
        this.subscriptions.unsubscribe();
        this.allConsentsLoading.unsubscribe();
        this.userConsentService.resetGiveConsentProcessState();
        this.userConsentService.resetWithdrawConsentProcessState();
    };
    ConsentManagementComponent.ctorParameters = function () { return [
        { type: UserConsentService },
        { type: GlobalMessageService },
        { type: AnonymousConsentsConfig },
        { type: AnonymousConsentsService },
        { type: AuthService }
    ]; };
    ConsentManagementComponent = __decorate([
        Component({
            selector: 'cx-consent-management',
            template: "<div *ngIf=\"loading$ | async; else consentManagementForm\">\r\n  <div class=\"cx-spinner\">\r\n    <cx-spinner></cx-spinner>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #consentManagementForm>\r\n  <ng-container *ngIf=\"templateList$ | async as templateList\">\r\n    <div class=\"cx-consent-action-links\">\r\n      <div class=\"col-sm-12 col-md-8 col-lg-6\">\r\n        <button\r\n          tabindex=\"0\"\r\n          class=\"btn btn-link cx-action-link\"\r\n          (click)=\"rejectAll(templateList)\"\r\n        >\r\n          {{ 'consentManagementForm.clearAll' | cxTranslate }}\r\n        </button>\r\n        <button\r\n          tabindex=\"0\"\r\n          class=\"btn btn-link cx-action-link\"\r\n          (click)=\"allowAll(templateList)\"\r\n        >\r\n          {{ 'consentManagementForm.selectAll' | cxTranslate }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"cx-consent-toggles\">\r\n      <div class=\"col-sm-12 col-md-8 col-lg-6\">\r\n        <cx-consent-management-form\r\n          *ngFor=\"let consentTemplate of templateList\"\r\n          [consentTemplate]=\"consentTemplate\"\r\n          [requiredConsents]=\"requiredConsents\"\r\n          (consentChanged)=\"onConsentChange($event)\"\r\n        ></cx-consent-management-form>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</ng-template>\r\n"
        })
    ], ConsentManagementComponent);
    return ConsentManagementComponent;
}());
export { ConsentManagementComponent };
//# sourceMappingURL=data:application/json;base64,