import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { tap } from 'rxjs/operators';
import { OrderAmendService } from '../../amend-order.service';
var ReturnOrderConfirmationComponent = /** @class */ (function () {
    function ReturnOrderConfirmationComponent(orderAmendService) {
        var _this = this;
        this.orderAmendService = orderAmendService;
        this.form$ = this.orderAmendService
            .getForm()
            .pipe(tap(function (form) { return (_this.orderCode = form.value.orderCode); }));
        this.entries$ = this.orderAmendService.getAmendedEntries();
    }
    ReturnOrderConfirmationComponent.prototype.submit = function (form) {
        form.disable();
        this.orderAmendService.save();
    };
    ReturnOrderConfirmationComponent.ctorParameters = function () { return [
        { type: OrderAmendService }
    ]; };
    ReturnOrderConfirmationComponent = __decorate([
        Component({
            selector: 'cx-return-order-confirmation',
            template: "<form\r\n  *ngIf=\"form$ | async as form\"\r\n  [formGroup]=\"form\"\r\n  (ngSubmit)=\"submit(form)\"\r\n>\r\n  <ng-container *ngTemplateOutlet=\"actions\"></ng-container>\r\n\r\n  <cx-amend-order-items\r\n    *ngIf=\"entries$ | async as entries\"\r\n    [entries]=\"entries\"\r\n    [isConfirmation]=\"true\"\r\n  >\r\n  </cx-amend-order-items>\r\n\r\n  <ng-container *ngTemplateOutlet=\"actions\"></ng-container>\r\n\r\n  <ng-template #actions>\r\n    <cx-amend-order-actions\r\n      *ngIf=\"orderCode\"\r\n      [orderCode]=\"orderCode\"\r\n      [amendOrderForm]=\"form\"\r\n      backRoute=\"orderReturn\"\r\n    ></cx-amend-order-actions>\r\n  </ng-template>\r\n</form>\r\n",
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], ReturnOrderConfirmationComponent);
    return ReturnOrderConfirmationComponent;
}());
export { ReturnOrderConfirmationComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV0dXJuLW9yZGVyLWNvbmZpcm1hdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL3N0b3JlZnJvbnQvIiwic291cmNlcyI6WyJjbXMtY29tcG9uZW50cy9teWFjY291bnQvb3JkZXIvYW1lbmQtb3JkZXIvcmV0dXJucy9yZXR1cm4tb3JkZXItY29uZmlybWF0aW9uL3JldHVybi1vcmRlci1jb25maXJtYXRpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSW5FLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQU85RDtJQVdFLDBDQUFzQixpQkFBb0M7UUFBMUQsaUJBQThEO1FBQXhDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFSMUQsVUFBSyxHQUFHLElBQUksQ0FBQyxpQkFBaUI7YUFDM0IsT0FBTyxFQUFFO2FBQ1QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLElBQUksSUFBSyxPQUFBLENBQUMsS0FBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUF2QyxDQUF1QyxDQUFDLENBQUMsQ0FBQztRQUVoRSxhQUFRLEdBRUosSUFBSSxDQUFDLGlCQUFpQixDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFFYyxDQUFDO0lBRTlELGlEQUFNLEdBQU4sVUFBTyxJQUFlO1FBQ3BCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNmLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNoQyxDQUFDOztnQkFMd0MsaUJBQWlCOztJQVgvQyxnQ0FBZ0M7UUFMNUMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLDhCQUE4QjtZQUN4QyxvckJBQXlEO1lBQ3pELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO1NBQ2hELENBQUM7T0FDVyxnQ0FBZ0MsQ0FpQjVDO0lBQUQsdUNBQUM7Q0FBQSxBQWpCRCxJQWlCQztTQWpCWSxnQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgT3JkZXJFbnRyeSB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBPcmRlckFtZW5kU2VydmljZSB9IGZyb20gJy4uLy4uL2FtZW5kLW9yZGVyLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdjeC1yZXR1cm4tb3JkZXItY29uZmlybWF0aW9uJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vcmV0dXJuLW9yZGVyLWNvbmZpcm1hdGlvbi5jb21wb25lbnQuaHRtbCcsXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBSZXR1cm5PcmRlckNvbmZpcm1hdGlvbkNvbXBvbmVudCB7XHJcbiAgb3JkZXJDb2RlOiBzdHJpbmc7XHJcblxyXG4gIGZvcm0kID0gdGhpcy5vcmRlckFtZW5kU2VydmljZVxyXG4gICAgLmdldEZvcm0oKVxyXG4gICAgLnBpcGUodGFwKChmb3JtKSA9PiAodGhpcy5vcmRlckNvZGUgPSBmb3JtLnZhbHVlLm9yZGVyQ29kZSkpKTtcclxuXHJcbiAgZW50cmllcyQ6IE9ic2VydmFibGU8XHJcbiAgICBPcmRlckVudHJ5W11cclxuICA+ID0gdGhpcy5vcmRlckFtZW5kU2VydmljZS5nZXRBbWVuZGVkRW50cmllcygpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgb3JkZXJBbWVuZFNlcnZpY2U6IE9yZGVyQW1lbmRTZXJ2aWNlKSB7fVxyXG5cclxuICBzdWJtaXQoZm9ybTogRm9ybUdyb3VwKTogdm9pZCB7XHJcbiAgICBmb3JtLmRpc2FibGUoKTtcclxuICAgIHRoaXMub3JkZXJBbWVuZFNlcnZpY2Uuc2F2ZSgpO1xyXG4gIH1cclxufVxyXG4iXX0=