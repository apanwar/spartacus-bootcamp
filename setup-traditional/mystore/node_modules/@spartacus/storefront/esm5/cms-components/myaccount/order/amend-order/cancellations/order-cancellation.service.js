import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { CancelOrReturnRequestEntryInput, GlobalMessageService, GlobalMessageType, OrderEntry, RoutingService, UserOrderService, } from '@spartacus/core';
import { filter, first, map } from 'rxjs/operators';
import { OrderDetailsService } from '../../order-details/order-details.service';
import { AmendOrderType } from '../amend-order.model';
import { OrderAmendService } from '../amend-order.service';
import * as i0 from "@angular/core";
import * as i1 from "../../order-details/order-details.service";
import * as i2 from "@spartacus/core";
var OrderCancellationService = /** @class */ (function (_super) {
    __extends(OrderCancellationService, _super);
    function OrderCancellationService(orderDetailsService, userOrderService, routing, globalMessageService) {
        var _this = _super.call(this, orderDetailsService) || this;
        _this.orderDetailsService = orderDetailsService;
        _this.userOrderService = userOrderService;
        _this.routing = routing;
        _this.globalMessageService = globalMessageService;
        _this.amendType = AmendOrderType.CANCEL;
        return _this;
    }
    /**
     * Return cancellable order entries.
     */
    OrderCancellationService.prototype.getEntries = function () {
        return this.getOrder().pipe(filter(function (order) { return !!(order === null || order === void 0 ? void 0 : order.entries); }), map(function (order) {
            return order.entries.filter(function (entry) { return entry.entryNumber !== -1 && entry.cancellableQuantity > 0; });
        }));
    };
    OrderCancellationService.prototype.save = function () {
        var _this = this;
        var orderCode = this.form.value.orderCode;
        var entries = this.form.value.entries;
        var inputs = Object.keys(entries)
            .filter(function (entryNumber) { return entries[entryNumber] > 0; })
            .map(function (entryNumber) {
            return ({
                orderEntryNumber: Number(entryNumber),
                quantity: entries[entryNumber],
            });
        });
        this.form.reset();
        this.userOrderService.cancelOrder(orderCode, {
            cancellationRequestEntryInputs: inputs,
        });
        this.userOrderService
            .getCancelOrderSuccess()
            .pipe(first(Boolean))
            .subscribe(function () { return _this.afterSave(orderCode); });
    };
    OrderCancellationService.prototype.afterSave = function (orderCode) {
        this.userOrderService.resetCancelOrderProcessState();
        this.globalMessageService.add({
            key: 'orderDetails.cancellationAndReturn.cancelSuccess',
            params: { orderCode: orderCode },
        }, GlobalMessageType.MSG_TYPE_CONFIRMATION);
        this.routing.go({
            cxRoute: 'orders',
        });
    };
    OrderCancellationService.ctorParameters = function () { return [
        { type: OrderDetailsService },
        { type: UserOrderService },
        { type: RoutingService },
        { type: GlobalMessageService }
    ]; };
    OrderCancellationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function OrderCancellationService_Factory() { return new OrderCancellationService(i0.ɵɵinject(i1.OrderDetailsService), i0.ɵɵinject(i2.UserOrderService), i0.ɵɵinject(i2.RoutingService), i0.ɵɵinject(i2.GlobalMessageService)); }, token: OrderCancellationService, providedIn: "root" });
    OrderCancellationService = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], OrderCancellationService);
    return OrderCancellationService;
}(OrderAmendService));
export { OrderCancellationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItY2FuY2VsbGF0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL3N0b3JlZnJvbnQvIiwic291cmNlcyI6WyJjbXMtY29tcG9uZW50cy9teWFjY291bnQvb3JkZXIvYW1lbmQtb3JkZXIvY2FuY2VsbGF0aW9ucy9vcmRlci1jYW5jZWxsYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQ0wsK0JBQStCLEVBQy9CLG9CQUFvQixFQUNwQixpQkFBaUIsRUFDakIsVUFBVSxFQUNWLGNBQWMsRUFDZCxnQkFBZ0IsR0FDakIsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUNoRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7Ozs7QUFLM0Q7SUFBOEMsNENBQWlCO0lBRzdELGtDQUNZLG1CQUF3QyxFQUN4QyxnQkFBa0MsRUFDbEMsT0FBdUIsRUFDdkIsb0JBQTBDO1FBSnRELFlBTUUsa0JBQU0sbUJBQW1CLENBQUMsU0FDM0I7UUFOVyx5QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBQ3hDLHNCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsYUFBTyxHQUFQLE9BQU8sQ0FBZ0I7UUFDdkIsMEJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQU50RCxlQUFTLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQzs7SUFTbEMsQ0FBQztJQUNEOztPQUVHO0lBQ0gsNkNBQVUsR0FBVjtRQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FDekIsTUFBTSxDQUFDLFVBQUMsS0FBSyxJQUFLLE9BQUEsQ0FBQyxFQUFDLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxPQUFPLENBQUEsRUFBaEIsQ0FBZ0IsQ0FBQyxFQUNuQyxHQUFHLENBQUMsVUFBQyxLQUFLO1lBQ1IsT0FBQSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FDbEIsVUFBQyxLQUFLLElBQUssT0FBQSxLQUFLLENBQUMsV0FBVyxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsR0FBRyxDQUFDLEVBQXpELENBQXlELENBQ3JFO1FBRkQsQ0FFQyxDQUNGLENBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRCx1Q0FBSSxHQUFKO1FBQUEsaUJBdUJDO1FBdEJDLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUM1QyxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFDeEMsSUFBTSxNQUFNLEdBQXNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO2FBQ25FLE1BQU0sQ0FBQyxVQUFDLFdBQVcsSUFBSyxPQUFRLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQWhDLENBQWdDLENBQUM7YUFDekQsR0FBRyxDQUNGLFVBQUMsV0FBVztZQUNWLE9BQUEsQ0FBQztnQkFDQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDO2dCQUNyQyxRQUFRLEVBQVUsT0FBTyxDQUFDLFdBQVcsQ0FBQzthQUNILENBQUE7UUFIckMsQ0FHcUMsQ0FDeEMsQ0FBQztRQUVKLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFbEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUU7WUFDM0MsOEJBQThCLEVBQUUsTUFBTTtTQUN2QyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsZ0JBQWdCO2FBQ2xCLHFCQUFxQixFQUFFO2FBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDcEIsU0FBUyxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUF6QixDQUF5QixDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVPLDRDQUFTLEdBQWpCLFVBQWtCLFNBQWlCO1FBQ2pDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyw0QkFBNEIsRUFBRSxDQUFDO1FBQ3JELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQzNCO1lBQ0UsR0FBRyxFQUFFLGtEQUFrRDtZQUN2RCxNQUFNLEVBQUUsRUFBRSxTQUFTLFdBQUEsRUFBRTtTQUN0QixFQUNELGlCQUFpQixDQUFDLHFCQUFxQixDQUN4QyxDQUFDO1FBQ0YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDZCxPQUFPLEVBQUUsUUFBUTtTQUNsQixDQUFDLENBQUM7SUFDTCxDQUFDOztnQkExRGdDLG1CQUFtQjtnQkFDdEIsZ0JBQWdCO2dCQUN6QixjQUFjO2dCQUNELG9CQUFvQjs7O0lBUDNDLHdCQUF3QjtRQUhwQyxVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDO09BQ1csd0JBQXdCLENBK0RwQzttQ0FqRkQ7Q0FpRkMsQUEvREQsQ0FBOEMsaUJBQWlCLEdBK0Q5RDtTQS9EWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7XHJcbiAgQ2FuY2VsT3JSZXR1cm5SZXF1ZXN0RW50cnlJbnB1dCxcclxuICBHbG9iYWxNZXNzYWdlU2VydmljZSxcclxuICBHbG9iYWxNZXNzYWdlVHlwZSxcclxuICBPcmRlckVudHJ5LFxyXG4gIFJvdXRpbmdTZXJ2aWNlLFxyXG4gIFVzZXJPcmRlclNlcnZpY2UsXHJcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBmaWx0ZXIsIGZpcnN0LCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IE9yZGVyRGV0YWlsc1NlcnZpY2UgfSBmcm9tICcuLi8uLi9vcmRlci1kZXRhaWxzL29yZGVyLWRldGFpbHMuc2VydmljZSc7XHJcbmltcG9ydCB7IEFtZW5kT3JkZXJUeXBlIH0gZnJvbSAnLi4vYW1lbmQtb3JkZXIubW9kZWwnO1xyXG5pbXBvcnQgeyBPcmRlckFtZW5kU2VydmljZSB9IGZyb20gJy4uL2FtZW5kLW9yZGVyLnNlcnZpY2UnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIE9yZGVyQ2FuY2VsbGF0aW9uU2VydmljZSBleHRlbmRzIE9yZGVyQW1lbmRTZXJ2aWNlIHtcclxuICBhbWVuZFR5cGUgPSBBbWVuZE9yZGVyVHlwZS5DQU5DRUw7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJvdGVjdGVkIG9yZGVyRGV0YWlsc1NlcnZpY2U6IE9yZGVyRGV0YWlsc1NlcnZpY2UsXHJcbiAgICBwcm90ZWN0ZWQgdXNlck9yZGVyU2VydmljZTogVXNlck9yZGVyU2VydmljZSxcclxuICAgIHByb3RlY3RlZCByb3V0aW5nOiBSb3V0aW5nU2VydmljZSxcclxuICAgIHByb3RlY3RlZCBnbG9iYWxNZXNzYWdlU2VydmljZTogR2xvYmFsTWVzc2FnZVNlcnZpY2VcclxuICApIHtcclxuICAgIHN1cGVyKG9yZGVyRGV0YWlsc1NlcnZpY2UpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBSZXR1cm4gY2FuY2VsbGFibGUgb3JkZXIgZW50cmllcy5cclxuICAgKi9cclxuICBnZXRFbnRyaWVzKCk6IE9ic2VydmFibGU8T3JkZXJFbnRyeVtdPiB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRPcmRlcigpLnBpcGUoXHJcbiAgICAgIGZpbHRlcigob3JkZXIpID0+ICEhb3JkZXI/LmVudHJpZXMpLFxyXG4gICAgICBtYXAoKG9yZGVyKSA9PlxyXG4gICAgICAgIG9yZGVyLmVudHJpZXMuZmlsdGVyKFxyXG4gICAgICAgICAgKGVudHJ5KSA9PiBlbnRyeS5lbnRyeU51bWJlciAhPT0gLTEgJiYgZW50cnkuY2FuY2VsbGFibGVRdWFudGl0eSA+IDBcclxuICAgICAgICApXHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzYXZlKCk6IHZvaWQge1xyXG4gICAgY29uc3Qgb3JkZXJDb2RlID0gdGhpcy5mb3JtLnZhbHVlLm9yZGVyQ29kZTtcclxuICAgIGNvbnN0IGVudHJpZXMgPSB0aGlzLmZvcm0udmFsdWUuZW50cmllcztcclxuICAgIGNvbnN0IGlucHV0czogQ2FuY2VsT3JSZXR1cm5SZXF1ZXN0RW50cnlJbnB1dFtdID0gT2JqZWN0LmtleXMoZW50cmllcylcclxuICAgICAgLmZpbHRlcigoZW50cnlOdW1iZXIpID0+IDxudW1iZXI+ZW50cmllc1tlbnRyeU51bWJlcl0gPiAwKVxyXG4gICAgICAubWFwKFxyXG4gICAgICAgIChlbnRyeU51bWJlcikgPT5cclxuICAgICAgICAgICh7XHJcbiAgICAgICAgICAgIG9yZGVyRW50cnlOdW1iZXI6IE51bWJlcihlbnRyeU51bWJlciksXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiA8bnVtYmVyPmVudHJpZXNbZW50cnlOdW1iZXJdLFxyXG4gICAgICAgICAgfSBhcyBDYW5jZWxPclJldHVyblJlcXVlc3RFbnRyeUlucHV0KVxyXG4gICAgICApO1xyXG5cclxuICAgIHRoaXMuZm9ybS5yZXNldCgpO1xyXG5cclxuICAgIHRoaXMudXNlck9yZGVyU2VydmljZS5jYW5jZWxPcmRlcihvcmRlckNvZGUsIHtcclxuICAgICAgY2FuY2VsbGF0aW9uUmVxdWVzdEVudHJ5SW5wdXRzOiBpbnB1dHMsXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnVzZXJPcmRlclNlcnZpY2VcclxuICAgICAgLmdldENhbmNlbE9yZGVyU3VjY2VzcygpXHJcbiAgICAgIC5waXBlKGZpcnN0KEJvb2xlYW4pKVxyXG4gICAgICAuc3Vic2NyaWJlKCgpID0+IHRoaXMuYWZ0ZXJTYXZlKG9yZGVyQ29kZSkpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhZnRlclNhdmUob3JkZXJDb2RlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIHRoaXMudXNlck9yZGVyU2VydmljZS5yZXNldENhbmNlbE9yZGVyUHJvY2Vzc1N0YXRlKCk7XHJcbiAgICB0aGlzLmdsb2JhbE1lc3NhZ2VTZXJ2aWNlLmFkZChcclxuICAgICAge1xyXG4gICAgICAgIGtleTogJ29yZGVyRGV0YWlscy5jYW5jZWxsYXRpb25BbmRSZXR1cm4uY2FuY2VsU3VjY2VzcycsXHJcbiAgICAgICAgcGFyYW1zOiB7IG9yZGVyQ29kZSB9LFxyXG4gICAgICB9LFxyXG4gICAgICBHbG9iYWxNZXNzYWdlVHlwZS5NU0dfVFlQRV9DT05GSVJNQVRJT05cclxuICAgICk7XHJcbiAgICB0aGlzLnJvdXRpbmcuZ28oe1xyXG4gICAgICBjeFJvdXRlOiAnb3JkZXJzJyxcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=