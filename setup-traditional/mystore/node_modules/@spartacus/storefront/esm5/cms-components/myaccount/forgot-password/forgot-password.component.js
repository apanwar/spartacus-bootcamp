import { __decorate } from "tslib";
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { RoutingService, UserService } from '@spartacus/core';
import { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';
var ForgotPasswordComponent = /** @class */ (function () {
    function ForgotPasswordComponent(fb, userService, routingService) {
        this.fb = fb;
        this.userService = userService;
        this.routingService = routingService;
    }
    ForgotPasswordComponent.prototype.ngOnInit = function () {
        this.forgotPasswordForm = this.fb.group({
            userEmail: [
                '',
                [Validators.required, CustomFormValidators.emailValidator],
            ],
        });
    };
    ForgotPasswordComponent.prototype.requestForgotPasswordEmail = function () {
        if (this.forgotPasswordForm.valid) {
            this.userService.requestForgotPasswordEmail(this.forgotPasswordForm.value.userEmail);
            this.routingService.go({ cxRoute: 'login' });
        }
        else {
            this.forgotPasswordForm.markAllAsTouched();
        }
    };
    ForgotPasswordComponent.ctorParameters = function () { return [
        { type: FormBuilder },
        { type: UserService },
        { type: RoutingService }
    ]; };
    ForgotPasswordComponent = __decorate([
        Component({
            selector: 'cx-forgot-password',
            template: "<form\r\n  (ngSubmit)=\"requestForgotPasswordEmail()\"\r\n  [formGroup]=\"forgotPasswordForm\"\r\n>\r\n  <div class=\"form-group\">\r\n    <label>\r\n      <span class=\"label-content\">{{\r\n        'forgottenPassword.emailAddress.label' | cxTranslate\r\n      }}</span>\r\n      <input\r\n        type=\"email\"\r\n        class=\"form-control\"\r\n        placeholder=\"{{\r\n          'forgottenPassword.emailAddress.placeholder' | cxTranslate\r\n        }}\"\r\n        formControlName=\"userEmail\"\r\n      />\r\n      <cx-form-errors\r\n        [control]=\"forgotPasswordForm.get('userEmail')\"\r\n      ></cx-form-errors>\r\n    </label>\r\n  </div>\r\n\r\n  <button type=\"submit\" class=\"btn btn-block btn-primary\">\r\n    {{ 'common.submit' | cxTranslate }}\r\n  </button>\r\n  <a\r\n    class=\"btn btn-block btn-secondary\"\r\n    [routerLink]=\"{ cxRoute: 'login' } | cxUrl\"\r\n    >{{ 'common.cancel' | cxTranslate }}</a\r\n  >\r\n</form>\r\n"
        })
    ], ForgotPasswordComponent);
    return ForgotPasswordComponent;
}());
export { ForgotPasswordComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yZ290LXBhc3N3b3JkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvc3RvcmVmcm9udC8iLCJzb3VyY2VzIjpbImNtcy1jb21wb25lbnRzL215YWNjb3VudC9mb3Jnb3QtcGFzc3dvcmQvZm9yZ290LXBhc3N3b3JkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNsRCxPQUFPLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRSxPQUFPLEVBQUUsY0FBYyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBSy9GO0lBR0UsaUNBQ1UsRUFBZSxFQUNmLFdBQXdCLEVBQ3hCLGNBQThCO1FBRjlCLE9BQUUsR0FBRixFQUFFLENBQWE7UUFDZixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4QixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7SUFDckMsQ0FBQztJQUVKLDBDQUFRLEdBQVI7UUFDRSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUM7WUFDdEMsU0FBUyxFQUFFO2dCQUNULEVBQUU7Z0JBQ0YsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLG9CQUFvQixDQUFDLGNBQWMsQ0FBQzthQUMzRDtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCw0REFBMEIsR0FBMUI7UUFDRSxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUU7WUFDakMsSUFBSSxDQUFDLFdBQVcsQ0FBQywwQkFBMEIsQ0FDekMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxTQUFTLENBQ3hDLENBQUM7WUFDRixJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1NBQzlDO2FBQU07WUFDTCxJQUFJLENBQUMsa0JBQWtCLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztTQUM1QztJQUNILENBQUM7O2dCQXZCYSxXQUFXO2dCQUNGLFdBQVc7Z0JBQ1IsY0FBYzs7SUFON0IsdUJBQXVCO1FBSm5DLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxvQkFBb0I7WUFDOUIsNjhCQUErQztTQUNoRCxDQUFDO09BQ1csdUJBQXVCLENBNEJuQztJQUFELDhCQUFDO0NBQUEsQUE1QkQsSUE0QkM7U0E1QlksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRm9ybUJ1aWxkZXIsIEZvcm1Hcm91cCwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgUm91dGluZ1NlcnZpY2UsIFVzZXJTZXJ2aWNlIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcclxuaW1wb3J0IHsgQ3VzdG9tRm9ybVZhbGlkYXRvcnMgfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvdXRpbHMvdmFsaWRhdG9ycy9jdXN0b20tZm9ybS12YWxpZGF0b3JzJztcclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdjeC1mb3Jnb3QtcGFzc3dvcmQnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9mb3Jnb3QtcGFzc3dvcmQuY29tcG9uZW50Lmh0bWwnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRm9yZ290UGFzc3dvcmRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIGZvcmdvdFBhc3N3b3JkRm9ybTogRm9ybUdyb3VwO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgZmI6IEZvcm1CdWlsZGVyLFxyXG4gICAgcHJpdmF0ZSB1c2VyU2VydmljZTogVXNlclNlcnZpY2UsXHJcbiAgICBwcml2YXRlIHJvdXRpbmdTZXJ2aWNlOiBSb3V0aW5nU2VydmljZVxyXG4gICkge31cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLmZvcmdvdFBhc3N3b3JkRm9ybSA9IHRoaXMuZmIuZ3JvdXAoe1xyXG4gICAgICB1c2VyRW1haWw6IFtcclxuICAgICAgICAnJyxcclxuICAgICAgICBbVmFsaWRhdG9ycy5yZXF1aXJlZCwgQ3VzdG9tRm9ybVZhbGlkYXRvcnMuZW1haWxWYWxpZGF0b3JdLFxyXG4gICAgICBdLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICByZXF1ZXN0Rm9yZ290UGFzc3dvcmRFbWFpbCgpIHtcclxuICAgIGlmICh0aGlzLmZvcmdvdFBhc3N3b3JkRm9ybS52YWxpZCkge1xyXG4gICAgICB0aGlzLnVzZXJTZXJ2aWNlLnJlcXVlc3RGb3Jnb3RQYXNzd29yZEVtYWlsKFxyXG4gICAgICAgIHRoaXMuZm9yZ290UGFzc3dvcmRGb3JtLnZhbHVlLnVzZXJFbWFpbFxyXG4gICAgICApO1xyXG4gICAgICB0aGlzLnJvdXRpbmdTZXJ2aWNlLmdvKHsgY3hSb3V0ZTogJ2xvZ2luJyB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZm9yZ290UGFzc3dvcmRGb3JtLm1hcmtBbGxBc1RvdWNoZWQoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19