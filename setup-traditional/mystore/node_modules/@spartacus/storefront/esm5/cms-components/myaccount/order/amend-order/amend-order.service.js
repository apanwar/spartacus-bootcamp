import { __decorate } from "tslib";
import { formatCurrency, getCurrencySymbol } from '@angular/common';
import { Injectable } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { map, switchMap, tap } from 'rxjs/operators';
import { OrderDetailsService } from '../order-details/order-details.service';
import { AmendOrderType } from './amend-order.model';
function ValidateQuantityToCancel(control) {
    if (!control.value) {
        return null;
    }
    var quantity = Object.values(control.value).reduce(function (acc, val) { return acc + val; }, 0);
    return quantity > 0 ? null : { cxNoSelectedItemToCancel: true };
}
var OrderAmendService = /** @class */ (function () {
    function OrderAmendService(orderDetailsService) {
        this.orderDetailsService = orderDetailsService;
    }
    /**
     * Returns entries with an amended quantity.
     */
    OrderAmendService.prototype.getAmendedEntries = function () {
        var _this = this;
        return this.getForm().pipe(switchMap(function (form) {
            return _this.getEntries().pipe(map(function (entries) {
                return entries.filter(function (entry) { return _this.getFormControl(form, entry).value > 0; });
            }));
        }));
    };
    OrderAmendService.prototype.getOrder = function () {
        return this.orderDetailsService.getOrderDetails();
    };
    /**
     * returns the form with form data at runtime
     */
    OrderAmendService.prototype.getForm = function () {
        var _this = this;
        return this.getOrder().pipe(tap(function (order) {
            if (!_this.form || _this.form.get('orderCode').value !== order.code) {
                _this.buildForm(order);
            }
        }), map(function () { return _this.form; }));
    };
    OrderAmendService.prototype.buildForm = function (order) {
        var _this = this;
        this.form = new FormGroup({});
        this.form.addControl('orderCode', new FormControl(order.code));
        var entryGroup = new FormGroup({}, { validators: [ValidateQuantityToCancel] });
        this.form.addControl('entries', entryGroup);
        (order.entries || []).forEach(function (entry) {
            var key = entry.entryNumber.toString();
            entryGroup.addControl(key, new FormControl(0, {
                validators: [
                    Validators.min(0),
                    Validators.max(_this.getMaxAmendQuantity(entry)),
                ],
            }));
        });
    };
    OrderAmendService.prototype.getFormControl = function (form, entry) {
        return form.get('entries').get(entry.entryNumber.toString());
    };
    /**
     * As discussed, this calculation is moved to SPA side.
     * The calculation and validation should be in backend facade layer.
     */
    OrderAmendService.prototype.getAmendedPrice = function (entry) {
        var amendedQuantity = this.getFormControl(this.form, entry).value;
        var amendedPrice = Object.assign({}, entry.basePrice);
        amendedPrice.value =
            Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;
        amendedPrice.formattedValue = formatCurrency(amendedPrice.value, 
        // TODO: user current language
        'en', getCurrencySymbol(amendedPrice.currencyIso, 'narrow'), amendedPrice.currencyIso);
        return amendedPrice;
    };
    OrderAmendService.prototype.getMaxAmendQuantity = function (entry) {
        return ((this.isCancellation()
            ? entry.cancellableQuantity
            : entry.returnableQuantity) || entry.quantity);
    };
    OrderAmendService.prototype.isCancellation = function () {
        return this.amendType === AmendOrderType.CANCEL;
    };
    OrderAmendService.ctorParameters = function () { return [
        { type: OrderDetailsService }
    ]; };
    OrderAmendService = __decorate([
        Injectable()
    ], OrderAmendService);
    return OrderAmendService;
}());
export { OrderAmendService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1lbmQtb3JkZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvc3RvcmVmcm9udC8iLCJzb3VyY2VzIjpbImNtcy1jb21wb25lbnRzL215YWNjb3VudC9vcmRlci9hbWVuZC1vcmRlci9hbWVuZC1vcmRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDcEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUdwRSxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUM3RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFckQsU0FBUyx3QkFBd0IsQ0FBQyxPQUFvQjtJQUNwRCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQztLQUNiO0lBQ0QsSUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUNsRCxVQUFDLEdBQVcsRUFBRSxHQUFXLElBQUssT0FBQSxHQUFHLEdBQUcsR0FBRyxFQUFULENBQVMsRUFDdkMsQ0FBQyxDQUNGLENBQUM7SUFDRixPQUFPLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSx3QkFBd0IsRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUNsRSxDQUFDO0FBR0Q7SUFJRSwyQkFBc0IsbUJBQXdDO1FBQXhDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FB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TSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3hELFlBQVksQ0FBQyxLQUFLO1lBQ2hCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsZUFBZSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUVsRSxZQUFZLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FDMUMsWUFBWSxDQUFDLEtBQUs7UUFDbEIsOEJBQThCO1FBQzlCLElBQUksRUFDSixpQkFBaUIsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxFQUNyRCxZQUFZLENBQUMsV0FBVyxDQUN6QixDQUFDO1FBRUYsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQztJQUVELCtDQUFtQixHQUFuQixVQUFvQixLQUFpQjtRQUNuQyxPQUFPLENBQ0wsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3BCLENBQUMsQ0FBQyxLQUFLLENBQUMsbUJBQW1CO1lBQzNCLENBQUMsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUNoRCxDQUFDO0lBQ0osQ0FBQztJQUVELDBDQUFjLEdBQWQ7UUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLEtBQUssY0FBYyxDQUFDLE1BQU0sQ0FBQztJQUNsRCxDQUFDOztnQkExRzBDLG1CQUFtQjs7SUFKMUMsaUJBQWlCO1FBRHRDLFVBQVUsRUFBRTtPQUNTLGlCQUFpQixDQStHdEM7SUFBRCx3QkFBQztDQUFBLEFBL0dELElBK0dDO1NBL0dxQixpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmb3JtYXRDdXJyZW5jeSwgZ2V0Q3VycmVuY3lTeW1ib2wgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZvcm1Db250cm9sLCBGb3JtR3JvdXAsIFZhbGlkYXRvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IE9yZGVyLCBPcmRlckVudHJ5LCBQcmljZSB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwLCBzd2l0Y2hNYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgT3JkZXJEZXRhaWxzU2VydmljZSB9IGZyb20gJy4uL29yZGVyLWRldGFpbHMvb3JkZXItZGV0YWlscy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQW1lbmRPcmRlclR5cGUgfSBmcm9tICcuL2FtZW5kLW9yZGVyLm1vZGVsJztcclxuXHJcbmZ1bmN0aW9uIFZhbGlkYXRlUXVhbnRpdHlUb0NhbmNlbChjb250cm9sOiBGb3JtQ29udHJvbCkge1xyXG4gIGlmICghY29udHJvbC52YWx1ZSkge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG4gIGNvbnN0IHF1YW50aXR5ID0gT2JqZWN0LnZhbHVlcyhjb250cm9sLnZhbHVlKS5yZWR1Y2UoXHJcbiAgICAoYWNjOiBudW1iZXIsIHZhbDogbnVtYmVyKSA9PiBhY2MgKyB2YWwsXHJcbiAgICAwXHJcbiAgKTtcclxuICByZXR1cm4gcXVhbnRpdHkgPiAwID8gbnVsbCA6IHsgY3hOb1NlbGVjdGVkSXRlbVRvQ2FuY2VsOiB0cnVlIH07XHJcbn1cclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE9yZGVyQW1lbmRTZXJ2aWNlIHtcclxuICBwcm90ZWN0ZWQgYW1lbmRUeXBlOiBBbWVuZE9yZGVyVHlwZTtcclxuICBwcm90ZWN0ZWQgZm9ybTogRm9ybUdyb3VwO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgb3JkZXJEZXRhaWxzU2VydmljZTogT3JkZXJEZXRhaWxzU2VydmljZSkge31cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyBlbnRyaWVzIGZvciB0aGUgZ2l2ZW4gb3JkZXIuXHJcbiAgICovXHJcbiAgYWJzdHJhY3QgZ2V0RW50cmllcygpOiBPYnNlcnZhYmxlPE9yZGVyRW50cnlbXT47XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgZW50cmllcyB3aXRoIGFuIGFtZW5kZWQgcXVhbnRpdHkuXHJcbiAgICovXHJcbiAgZ2V0QW1lbmRlZEVudHJpZXMoKTogT2JzZXJ2YWJsZTxPcmRlckVudHJ5W10+IHtcclxuICAgIHJldHVybiB0aGlzLmdldEZvcm0oKS5waXBlKFxyXG4gICAgICBzd2l0Y2hNYXAoKGZvcm0pID0+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRFbnRyaWVzKCkucGlwZShcclxuICAgICAgICAgIG1hcCgoZW50cmllcykgPT5cclxuICAgICAgICAgICAgZW50cmllcy5maWx0ZXIoXHJcbiAgICAgICAgICAgICAgKGVudHJ5KSA9PiB0aGlzLmdldEZvcm1Db250cm9sKGZvcm0sIGVudHJ5KS52YWx1ZSA+IDBcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3VibWl0cyB0aGUgYW1lbmRlZCBvcmRlci5cclxuICAgKi9cclxuICBhYnN0cmFjdCBzYXZlKCk6IHZvaWQ7XHJcblxyXG4gIGdldE9yZGVyKCk6IE9ic2VydmFibGU8T3JkZXI+IHtcclxuICAgIHJldHVybiB0aGlzLm9yZGVyRGV0YWlsc1NlcnZpY2UuZ2V0T3JkZXJEZXRhaWxzKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiByZXR1cm5zIHRoZSBmb3JtIHdpdGggZm9ybSBkYXRhIGF0IHJ1bnRpbWVcclxuICAgKi9cclxuICBnZXRGb3JtKCk6IE9ic2VydmFibGU8Rm9ybUdyb3VwPiB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRPcmRlcigpLnBpcGUoXHJcbiAgICAgIHRhcCgob3JkZXIpID0+IHtcclxuICAgICAgICBpZiAoIXRoaXMuZm9ybSB8fCB0aGlzLmZvcm0uZ2V0KCdvcmRlckNvZGUnKS52YWx1ZSAhPT0gb3JkZXIuY29kZSkge1xyXG4gICAgICAgICAgdGhpcy5idWlsZEZvcm0ob3JkZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSksXHJcbiAgICAgIG1hcCgoKSA9PiB0aGlzLmZvcm0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBidWlsZEZvcm0ob3JkZXI6IE9yZGVyKTogdm9pZCB7XHJcbiAgICB0aGlzLmZvcm0gPSBuZXcgRm9ybUdyb3VwKHt9KTtcclxuICAgIHRoaXMuZm9ybS5hZGRDb250cm9sKCdvcmRlckNvZGUnLCBuZXcgRm9ybUNvbnRyb2wob3JkZXIuY29kZSkpO1xyXG5cclxuICAgIGNvbnN0IGVudHJ5R3JvdXAgPSBuZXcgRm9ybUdyb3VwKFxyXG4gICAgICB7fSxcclxuICAgICAgeyB2YWxpZGF0b3JzOiBbVmFsaWRhdGVRdWFudGl0eVRvQ2FuY2VsXSB9XHJcbiAgICApO1xyXG4gICAgdGhpcy5mb3JtLmFkZENvbnRyb2woJ2VudHJpZXMnLCBlbnRyeUdyb3VwKTtcclxuXHJcbiAgICAob3JkZXIuZW50cmllcyB8fCBbXSkuZm9yRWFjaCgoZW50cnkpID0+IHtcclxuICAgICAgY29uc3Qga2V5ID0gZW50cnkuZW50cnlOdW1iZXIudG9TdHJpbmcoKTtcclxuICAgICAgZW50cnlHcm91cC5hZGRDb250cm9sKFxyXG4gICAgICAgIGtleSxcclxuICAgICAgICBuZXcgRm9ybUNvbnRyb2woMCwge1xyXG4gICAgICAgICAgdmFsaWRhdG9yczogW1xyXG4gICAgICAgICAgICBWYWxpZGF0b3JzLm1pbigwKSxcclxuICAgICAgICAgICAgVmFsaWRhdG9ycy5tYXgodGhpcy5nZXRNYXhBbWVuZFF1YW50aXR5KGVudHJ5KSksXHJcbiAgICAgICAgICBdLFxyXG4gICAgICAgIH0pXHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBnZXRGb3JtQ29udHJvbChmb3JtOiBGb3JtR3JvdXAsIGVudHJ5OiBPcmRlckVudHJ5KTogRm9ybUNvbnRyb2wge1xyXG4gICAgcmV0dXJuIDxGb3JtQ29udHJvbD5mb3JtLmdldCgnZW50cmllcycpLmdldChlbnRyeS5lbnRyeU51bWJlci50b1N0cmluZygpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFzIGRpc2N1c3NlZCwgdGhpcyBjYWxjdWxhdGlvbiBpcyBtb3ZlZCB0byBTUEEgc2lkZS5cclxuICAgKiBUaGUgY2FsY3VsYXRpb24gYW5kIHZhbGlkYXRpb24gc2hvdWxkIGJlIGluIGJhY2tlbmQgZmFjYWRlIGxheWVyLlxyXG4gICAqL1xyXG4gIGdldEFtZW5kZWRQcmljZShlbnRyeTogT3JkZXJFbnRyeSk6IFByaWNlIHtcclxuICAgIGNvbnN0IGFtZW5kZWRRdWFudGl0eSA9IHRoaXMuZ2V0Rm9ybUNvbnRyb2wodGhpcy5mb3JtLCBlbnRyeSkudmFsdWU7XHJcbiAgICBjb25zdCBhbWVuZGVkUHJpY2UgPSBPYmplY3QuYXNzaWduKHt9LCBlbnRyeS5iYXNlUHJpY2UpO1xyXG4gICAgYW1lbmRlZFByaWNlLnZhbHVlID1cclxuICAgICAgTWF0aC5yb3VuZChlbnRyeS5iYXNlUHJpY2UudmFsdWUgKiBhbWVuZGVkUXVhbnRpdHkgKiAxMDApIC8gMTAwO1xyXG5cclxuICAgIGFtZW5kZWRQcmljZS5mb3JtYXR0ZWRWYWx1ZSA9IGZvcm1hdEN1cnJlbmN5KFxyXG4gICAgICBhbWVuZGVkUHJpY2UudmFsdWUsXHJcbiAgICAgIC8vIFRPRE86IHVzZXIgY3VycmVudCBsYW5ndWFnZVxyXG4gICAgICAnZW4nLFxyXG4gICAgICBnZXRDdXJyZW5jeVN5bWJvbChhbWVuZGVkUHJpY2UuY3VycmVuY3lJc28sICduYXJyb3cnKSxcclxuICAgICAgYW1lbmRlZFByaWNlLmN1cnJlbmN5SXNvXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiBhbWVuZGVkUHJpY2U7XHJcbiAgfVxyXG5cclxuICBnZXRNYXhBbWVuZFF1YW50aXR5KGVudHJ5OiBPcmRlckVudHJ5KSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAodGhpcy5pc0NhbmNlbGxhdGlvbigpXHJcbiAgICAgICAgPyBlbnRyeS5jYW5jZWxsYWJsZVF1YW50aXR5XHJcbiAgICAgICAgOiBlbnRyeS5yZXR1cm5hYmxlUXVhbnRpdHkpIHx8IGVudHJ5LnF1YW50aXR5XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgaXNDYW5jZWxsYXRpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5hbWVuZFR5cGUgPT09IEFtZW5kT3JkZXJUeXBlLkNBTkNFTDtcclxuICB9XHJcbn1cclxuIl19