import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Product, ProductReference, ProductReferenceService, ProductService, SemanticPathService, } from '@spartacus/core';
import { filter, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
var ProductCarouselService = /** @class */ (function () {
    function ProductCarouselService(productService, referenceService, semanticPathService) {
        this.productService = productService;
        this.referenceService = referenceService;
        this.semanticPathService = semanticPathService;
    }
    /**
     * Loads the product data and converts it `CarouselItem`.
     */
    ProductCarouselService.prototype.loadProduct = function (code) {
        var _this = this;
        return this.productService.get(code).pipe(filter(Boolean), map(function (product) { return _this.convertProduct(product); }));
    };
    ProductCarouselService.prototype.getProductReferences = function (code, referenceType, displayTitle, displayProductPrices) {
        var _this = this;
        return this.referenceService.get(code, referenceType).pipe(filter(Boolean), map(function (refs) {
            return refs.map(function (ref) {
                return _this.convertProduct(ref.target, displayTitle, displayProductPrices);
            });
        }));
    };
    /**
     * Converts the product to a generic CarouselItem
     */
    ProductCarouselService.prototype.convertProduct = function (source, displayTitle, displayProductPrices) {
        if (displayTitle === void 0) { displayTitle = true; }
        if (displayProductPrices === void 0) { displayProductPrices = true; }
        var item = {};
        if (displayTitle) {
            item.title = source.name;
        }
        if (displayProductPrices && source.price && source.price.formattedValue) {
            item.price = source.price.formattedValue;
        }
        if (source.images && source.images.PRIMARY) {
            item.media = {
                container: source.images.PRIMARY,
                format: 'product',
            };
        }
        item.route = this.semanticPathService.transform({
            cxRoute: 'product',
            params: source,
        });
        return item;
    };
    ProductCarouselService.ctorParameters = function () { return [
        { type: ProductService },
        { type: ProductReferenceService },
        { type: SemanticPathService }
    ]; };
    ProductCarouselService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProductCarouselService_Factory() { return new ProductCarouselService(i0.ɵɵinject(i1.ProductService), i0.ɵɵinject(i1.ProductReferenceService), i0.ɵɵinject(i1.SemanticPathService)); }, token: ProductCarouselService, providedIn: "root" });
    ProductCarouselService = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], ProductCarouselService);
    return ProductCarouselService;
}());
export { ProductCarouselService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1jYXJvdXNlbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9zdG9yZWZyb250LyIsInNvdXJjZXMiOlsiY21zLWNvbXBvbmVudHMvcHJvZHVjdC9jYXJvdXNlbC9wcm9kdWN0LWNhcm91c2VsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUNMLE9BQU8sRUFDUCxnQkFBZ0IsRUFDaEIsdUJBQXVCLEVBQ3ZCLGNBQWMsRUFDZCxtQkFBbUIsR0FDcEIsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFNN0M7SUFDRSxnQ0FDWSxjQUE4QixFQUM5QixnQkFBeUMsRUFDekMsbUJBQXdDO1FBRnhDLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUM5QixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQXlCO1FBQ3pDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7SUFDakQsQ0FBQztJQUVKOztPQUVHO0lBQ0gsNENBQVcsR0FBWCxVQUFZLElBQVk7UUFBeEIsaUJBS0M7UUFKQyxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FDdkMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUNmLEdBQUcsQ0FBQyxVQUFDLE9BQU8sSUFBSyxPQUFBLEtBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQTVCLENBQTRCLENBQUMsQ0FDL0MsQ0FBQztJQUNKLENBQUM7SUFFRCxxREFBb0IsR0FBcEIsVUFDRSxJQUFZLEVBQ1osYUFBcUIsRUFDckIsWUFBcUIsRUFDckIsb0JBQTZCO1FBSi9CLGlCQWNDO1FBUkMsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQ3hELE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFDZixHQUFHLENBQUMsVUFBQyxJQUF3QjtZQUMzQixPQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQyxHQUFHO2dCQUNYLE9BQUEsS0FBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFlBQVksRUFBRSxvQkFBb0IsQ0FBQztZQUFuRSxDQUFtRSxDQUNwRTtRQUZELENBRUMsQ0FDRixDQUNGLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSywrQ0FBYyxHQUF0QixVQUNFLE1BQWUsRUFDZixZQUFtQixFQUNuQixvQkFBMkI7UUFEM0IsNkJBQUEsRUFBQSxtQkFBbUI7UUFDbkIscUNBQUEsRUFBQSwyQkFBMkI7UUFFM0IsSUFBTSxJQUFJLEdBQXdCLEVBQUUsQ0FBQztRQUNyQyxJQUFJLFlBQVksRUFBRTtZQUNoQixJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7U0FDMUI7UUFDRCxJQUFJLG9CQUFvQixJQUFJLE1BQU0sQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUU7WUFDdkUsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQztTQUMxQztRQUNELElBQUksTUFBTSxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRTtZQUMxQyxJQUFJLENBQUMsS0FBSyxHQUFHO2dCQUNYLFNBQVMsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU87Z0JBQ2hDLE1BQU0sRUFBRSxTQUFTO2FBQ2xCLENBQUM7U0FDSDtRQUNELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQztZQUM5QyxPQUFPLEVBQUUsU0FBUztZQUNsQixNQUFNLEVBQUUsTUFBTTtTQUNmLENBQUMsQ0FBQztRQUNILE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7Z0JBekQyQixjQUFjO2dCQUNaLHVCQUF1QjtnQkFDcEIsbUJBQW1COzs7SUFKekMsc0JBQXNCO1FBSGxDLFVBQVUsQ0FBQztZQUNWLFVBQVUsRUFBRSxNQUFNO1NBQ25CLENBQUM7T0FDVyxzQkFBc0IsQ0E0RGxDO2lDQTNFRDtDQTJFQyxBQTVERCxJQTREQztTQTVEWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7XHJcbiAgUHJvZHVjdCxcclxuICBQcm9kdWN0UmVmZXJlbmNlLFxyXG4gIFByb2R1Y3RSZWZlcmVuY2VTZXJ2aWNlLFxyXG4gIFByb2R1Y3RTZXJ2aWNlLFxyXG4gIFNlbWFudGljUGF0aFNlcnZpY2UsXHJcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgUHJvZHVjdENhcm91c2VsSXRlbSB9IGZyb20gJy4vcHJvZHVjdC1jYXJvdXNlbC5tb2RlbCc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUHJvZHVjdENhcm91c2VsU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgcHJvZHVjdFNlcnZpY2U6IFByb2R1Y3RTZXJ2aWNlLFxyXG4gICAgcHJvdGVjdGVkIHJlZmVyZW5jZVNlcnZpY2U6IFByb2R1Y3RSZWZlcmVuY2VTZXJ2aWNlLFxyXG4gICAgcHJvdGVjdGVkIHNlbWFudGljUGF0aFNlcnZpY2U6IFNlbWFudGljUGF0aFNlcnZpY2VcclxuICApIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIExvYWRzIHRoZSBwcm9kdWN0IGRhdGEgYW5kIGNvbnZlcnRzIGl0IGBDYXJvdXNlbEl0ZW1gLlxyXG4gICAqL1xyXG4gIGxvYWRQcm9kdWN0KGNvZGU6IHN0cmluZyk6IE9ic2VydmFibGU8UHJvZHVjdENhcm91c2VsSXRlbT4ge1xyXG4gICAgcmV0dXJuIHRoaXMucHJvZHVjdFNlcnZpY2UuZ2V0KGNvZGUpLnBpcGUoXHJcbiAgICAgIGZpbHRlcihCb29sZWFuKSxcclxuICAgICAgbWFwKChwcm9kdWN0KSA9PiB0aGlzLmNvbnZlcnRQcm9kdWN0KHByb2R1Y3QpKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGdldFByb2R1Y3RSZWZlcmVuY2VzKFxyXG4gICAgY29kZTogc3RyaW5nLFxyXG4gICAgcmVmZXJlbmNlVHlwZTogc3RyaW5nLFxyXG4gICAgZGlzcGxheVRpdGxlOiBib29sZWFuLFxyXG4gICAgZGlzcGxheVByb2R1Y3RQcmljZXM6IGJvb2xlYW5cclxuICApOiBPYnNlcnZhYmxlPFByb2R1Y3RDYXJvdXNlbEl0ZW1bXT4ge1xyXG4gICAgcmV0dXJuIHRoaXMucmVmZXJlbmNlU2VydmljZS5nZXQoY29kZSwgcmVmZXJlbmNlVHlwZSkucGlwZShcclxuICAgICAgZmlsdGVyKEJvb2xlYW4pLFxyXG4gICAgICBtYXAoKHJlZnM6IFByb2R1Y3RSZWZlcmVuY2VbXSkgPT5cclxuICAgICAgICByZWZzLm1hcCgocmVmKSA9PlxyXG4gICAgICAgICAgdGhpcy5jb252ZXJ0UHJvZHVjdChyZWYudGFyZ2V0LCBkaXNwbGF5VGl0bGUsIGRpc3BsYXlQcm9kdWN0UHJpY2VzKVxyXG4gICAgICAgIClcclxuICAgICAgKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnZlcnRzIHRoZSBwcm9kdWN0IHRvIGEgZ2VuZXJpYyBDYXJvdXNlbEl0ZW1cclxuICAgKi9cclxuICBwcml2YXRlIGNvbnZlcnRQcm9kdWN0KFxyXG4gICAgc291cmNlOiBQcm9kdWN0LFxyXG4gICAgZGlzcGxheVRpdGxlID0gdHJ1ZSxcclxuICAgIGRpc3BsYXlQcm9kdWN0UHJpY2VzID0gdHJ1ZVxyXG4gICk6IFByb2R1Y3RDYXJvdXNlbEl0ZW0ge1xyXG4gICAgY29uc3QgaXRlbTogUHJvZHVjdENhcm91c2VsSXRlbSA9IHt9O1xyXG4gICAgaWYgKGRpc3BsYXlUaXRsZSkge1xyXG4gICAgICBpdGVtLnRpdGxlID0gc291cmNlLm5hbWU7XHJcbiAgICB9XHJcbiAgICBpZiAoZGlzcGxheVByb2R1Y3RQcmljZXMgJiYgc291cmNlLnByaWNlICYmIHNvdXJjZS5wcmljZS5mb3JtYXR0ZWRWYWx1ZSkge1xyXG4gICAgICBpdGVtLnByaWNlID0gc291cmNlLnByaWNlLmZvcm1hdHRlZFZhbHVlO1xyXG4gICAgfVxyXG4gICAgaWYgKHNvdXJjZS5pbWFnZXMgJiYgc291cmNlLmltYWdlcy5QUklNQVJZKSB7XHJcbiAgICAgIGl0ZW0ubWVkaWEgPSB7XHJcbiAgICAgICAgY29udGFpbmVyOiBzb3VyY2UuaW1hZ2VzLlBSSU1BUlksXHJcbiAgICAgICAgZm9ybWF0OiAncHJvZHVjdCcsXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBpdGVtLnJvdXRlID0gdGhpcy5zZW1hbnRpY1BhdGhTZXJ2aWNlLnRyYW5zZm9ybSh7XHJcbiAgICAgIGN4Um91dGU6ICdwcm9kdWN0JyxcclxuICAgICAgcGFyYW1zOiBzb3VyY2UsXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBpdGVtO1xyXG4gIH1cclxufVxyXG4iXX0=