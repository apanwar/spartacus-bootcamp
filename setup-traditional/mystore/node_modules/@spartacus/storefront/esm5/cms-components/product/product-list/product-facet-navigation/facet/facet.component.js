import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, Input, QueryList, ViewChild, ViewChildren, } from '@angular/core';
import { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';
import { FocusDirective } from '../../../../../layout/a11y/keyboard-focus/focus.directive';
import { FacetService } from '../services/facet.service';
var FacetComponent = /** @class */ (function () {
    function FacetComponent(facetService, elementRef, cd) {
        this.facetService = facetService;
        this.elementRef = elementRef;
        this.cd = cd;
        /** configurable icon that is used to collapse the facet group  */
        this.expandIcon = ICON_TYPE.EXPAND;
        this.collapseIcon = ICON_TYPE.COLLAPSE;
    }
    Object.defineProperty(FacetComponent.prototype, "facet", {
        get: function () {
            return this._facet;
        },
        set: function (value) {
            this._facet = value;
            this.isMultiSelect = !!value.multiSelect;
            this.state$ = this.facetService.getState(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Handles clicking the heading of the facet group, which means toggling
     * the visibility of the group (collapse / expand) and optionally focusing
     * the group.
     */
    FacetComponent.prototype.toggleGroup = function (event) {
        var _a;
        var host = this.elementRef.nativeElement;
        var isLocked = (_a = this.keyboardFocus) === null || _a === void 0 ? void 0 : _a.isLocked;
        this.facetService.toggle(this.facet, this.isExpanded);
        if (!isLocked || this.isExpanded) {
            host.focus();
            // we stop propagating the event as otherwise the focus on the host will trigger
            // an unlock event from the LockFocus directive.
            event.stopPropagation();
        }
    };
    Object.defineProperty(FacetComponent.prototype, "isExpanded", {
        get: function () {
            return this.values.first.nativeElement.offsetParent !== null;
        },
        enumerable: true,
        configurable: true
    });
    FacetComponent.prototype.openLink = function (event) {
        event.target.click();
        event.preventDefault();
    };
    /**
     * Increases the number of visible values for the facet. This is delegated
     * to `facetService.increaseVisibleValues`.
     */
    FacetComponent.prototype.increaseVisibleValues = function () {
        this.facetService.increaseVisibleValues(this.facet);
    };
    /**
     * Decreases the number of visible values for the facet. This is delegated
     * to `facetService.decreaseVisibleValues`.
     */
    FacetComponent.prototype.decreaseVisibleValues = function () {
        this.facetService.decreaseVisibleValues(this.facet);
    };
    FacetComponent.prototype.getLinkParams = function (value) {
        var _a;
        return this.facetService.getLinkParams((_a = value.query) === null || _a === void 0 ? void 0 : _a.query.value);
    };
    FacetComponent.ctorParameters = function () { return [
        { type: FacetService },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input()
    ], FacetComponent.prototype, "expandIcon", void 0);
    __decorate([
        Input()
    ], FacetComponent.prototype, "collapseIcon", void 0);
    __decorate([
        HostBinding('class.multi-select')
    ], FacetComponent.prototype, "isMultiSelect", void 0);
    __decorate([
        ViewChildren('facetValue')
    ], FacetComponent.prototype, "values", void 0);
    __decorate([
        ViewChild(FocusDirective)
    ], FacetComponent.prototype, "keyboardFocus", void 0);
    __decorate([
        Input()
    ], FacetComponent.prototype, "facet", null);
    FacetComponent = __decorate([
        Component({
            selector: 'cx-facet',
            template: "<ng-container *ngIf=\"state$ | async as state\">\r\n  <button class=\"heading\" (click)=\"toggleGroup($event)\">\r\n    {{ facet.name }}\r\n    <cx-icon class=\"collapse-icon\" [type]=\"collapseIcon\"></cx-icon>\r\n    <cx-icon class=\"expand-icon\" [type]=\"expandIcon\"></cx-icon>\r\n  </button>\r\n\r\n  <a\r\n    *ngFor=\"let value of facet.values | slice: 0:state.topVisible\"\r\n    #facetValue\r\n    routerLink=\"./\"\r\n    [queryParams]=\"getLinkParams(value)\"\r\n    class=\"value\"\r\n    [class.selected]=\"value.selected\"\r\n    [cxFocus]=\"value.name\"\r\n    (keydown.space)=\"openLink($event)\"\r\n  >\r\n    <span>\r\n      <span class=\"label\">{{ value.name }}</span>\r\n      <span class=\"count\">{{ value.count }}</span>\r\n    </span>\r\n  </a>\r\n\r\n  <div class=\"more\">\r\n    <a\r\n      *ngFor=\"\r\n        let value of facet.values | slice: state.topVisible:state.maxVisible\r\n      \"\r\n      #facetValue\r\n      routerLink=\"./\"\r\n      [queryParams]=\"getLinkParams(value)\"\r\n      class=\"value\"\r\n      [class.selected]=\"value.selected\"\r\n      [cxFocus]=\"value.name\"\r\n      (keydown.space)=\"openLink($event)\"\r\n    >\r\n      <span\r\n        >{{ value.name }}<span class=\"count\">{{ value.count }}</span></span\r\n      >\r\n    </a>\r\n\r\n    <button\r\n      *ngIf=\"state.maxVisible > state.topVisible\"\r\n      (click)=\"decreaseVisibleValues()\"\r\n      class=\"cx-action-link\"\r\n      cxFocus=\"moreorless\"\r\n    >\r\n      {{ 'productList.showLess' | cxTranslate }}\r\n    </button>\r\n\r\n    <button\r\n      *ngIf=\"state.maxVisible > 0 && state.maxVisible < facet.values.length\"\r\n      (click)=\"increaseVisibleValues()\"\r\n      class=\"cx-action-link\"\r\n      cxFocus=\"moreorless\"\r\n    >\r\n      {{ 'productList.showMore' | cxTranslate }}\r\n    </button>\r\n  </div>\r\n</ng-container>\r\n",
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], FacetComponent);
    return FacetComponent;
}());
export { FacetComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjZXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9zdG9yZWZyb250LyIsInNvdXJjZXMiOlsiY21zLWNvbXBvbmVudHMvcHJvZHVjdC9wcm9kdWN0LWxpc3QvcHJvZHVjdC1mYWNldC1uYXZpZ2F0aW9uL2ZhY2V0L2ZhY2V0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLEVBQ1gsS0FBSyxFQUNMLFNBQVMsRUFDVCxTQUFTLEVBQ1QsWUFBWSxHQUNiLE1BQU0sZUFBZSxDQUFDO0FBR3ZCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUMvRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMkRBQTJELENBQUM7QUFFM0YsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBT3pEO0lBMEJFLHdCQUNZLFlBQTBCLEVBQzFCLFVBQW1DLEVBQ25DLEVBQXFCO1FBRnJCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzFCLGVBQVUsR0FBVixVQUFVLENBQXlCO1FBQ25DLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBeEJqQyxrRUFBa0U7UUFDekQsZUFBVSxHQUFjLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFDekMsaUJBQVksR0FBYyxTQUFTLENBQUMsUUFBUSxDQUFDO0lBdUJuRCxDQUFDO0lBZEosc0JBQUksaUNBQUs7YUFNVDtZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNyQixDQUFDO2FBUkQsVUFBVSxLQUFZO1lBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUM7WUFDekMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsRCxDQUFDOzs7T0FBQTtJQVlEOzs7O09BSUc7SUFDSCxvQ0FBVyxHQUFYLFVBQVksS0FBYzs7UUFDeEIsSUFBTSxJQUFJLEdBQWdCLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO1FBQ3hELElBQU0sUUFBUSxTQUFHLElBQUksQ0FBQyxhQUFhLDBDQUFFLFFBQVEsQ0FBQztRQUU5QyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUV0RCxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDaEMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2IsZ0ZBQWdGO1lBQ2hGLGdEQUFnRDtZQUNoRCxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDekI7SUFDSCxDQUFDO0lBRUQsc0JBQUksc0NBQVU7YUFBZDtZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFlBQVksS0FBSyxJQUFJLENBQUM7UUFDL0QsQ0FBQzs7O09BQUE7SUFFRCxpQ0FBUSxHQUFSLFVBQVMsS0FBb0I7UUFDMUIsS0FBSyxDQUFDLE1BQXNCLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDdEMsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7O09BR0c7SUFDSCw4Q0FBcUIsR0FBckI7UUFDRSxJQUFJLENBQUMsWUFBWSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsOENBQXFCLEdBQXJCO1FBQ0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELHNDQUFhLEdBQWIsVUFBYyxLQUFpQjs7UUFDN0IsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsT0FBQyxLQUFLLENBQUMsS0FBSywwQ0FBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkUsQ0FBQzs7Z0JBbkR5QixZQUFZO2dCQUNkLFVBQVU7Z0JBQ2xCLGlCQUFpQjs7SUF2QnhCO1FBQVIsS0FBSyxFQUFFO3NEQUEwQztJQUN6QztRQUFSLEtBQUssRUFBRTt3REFBOEM7SUFFbkI7UUFBbEMsV0FBVyxDQUFDLG9CQUFvQixDQUFDO3lEQUF3QjtJQUU5QjtRQUEzQixZQUFZLENBQUMsWUFBWSxDQUFDO2tEQUE0QztJQUU1QztRQUExQixTQUFTLENBQUMsY0FBYyxDQUFDO3lEQUErQjtJQUd6RDtRQURDLEtBQUssRUFBRTsrQ0FLUDtJQXBCVSxjQUFjO1FBTDFCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxVQUFVO1lBQ3BCLHUyREFBcUM7WUFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07U0FDaEQsQ0FBQztPQUNXLGNBQWMsQ0ErRTFCO0lBQUQscUJBQUM7Q0FBQSxBQS9FRCxJQStFQztTQS9FWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcclxuICBDaGFuZ2VEZXRlY3RvclJlZixcclxuICBDb21wb25lbnQsXHJcbiAgRWxlbWVudFJlZixcclxuICBIb3N0QmluZGluZyxcclxuICBJbnB1dCxcclxuICBRdWVyeUxpc3QsXHJcbiAgVmlld0NoaWxkLFxyXG4gIFZpZXdDaGlsZHJlbixcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRmFjZXQsIEZhY2V0VmFsdWUgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IElDT05fVFlQRSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2Ntcy1jb21wb25lbnRzL21pc2MvaWNvbi9pY29uLm1vZGVsJztcclxuaW1wb3J0IHsgRm9jdXNEaXJlY3RpdmUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9sYXlvdXQvYTExeS9rZXlib2FyZC1mb2N1cy9mb2N1cy5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBGYWNldENvbGxhcHNlU3RhdGUgfSBmcm9tICcuLi9mYWNldC5tb2RlbCc7XHJcbmltcG9ydCB7IEZhY2V0U2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2ZhY2V0LnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdjeC1mYWNldCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2ZhY2V0LmNvbXBvbmVudC5odG1sJyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxufSlcclxuZXhwb3J0IGNsYXNzIEZhY2V0Q29tcG9uZW50IHtcclxuICBwcm90ZWN0ZWQgX2ZhY2V0OiBGYWNldDtcclxuXHJcbiAgc3RhdGUkOiBPYnNlcnZhYmxlPEZhY2V0Q29sbGFwc2VTdGF0ZT47XHJcblxyXG4gIC8qKiBjb25maWd1cmFibGUgaWNvbiB0aGF0IGlzIHVzZWQgdG8gY29sbGFwc2UgdGhlIGZhY2V0IGdyb3VwICAqL1xyXG4gIEBJbnB1dCgpIGV4cGFuZEljb246IElDT05fVFlQRSA9IElDT05fVFlQRS5FWFBBTkQ7XHJcbiAgQElucHV0KCkgY29sbGFwc2VJY29uOiBJQ09OX1RZUEUgPSBJQ09OX1RZUEUuQ09MTEFQU0U7XHJcblxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MubXVsdGktc2VsZWN0JykgaXNNdWx0aVNlbGVjdDogYm9vbGVhbjtcclxuXHJcbiAgQFZpZXdDaGlsZHJlbignZmFjZXRWYWx1ZScpIHZhbHVlczogUXVlcnlMaXN0PEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+PjtcclxuXHJcbiAgQFZpZXdDaGlsZChGb2N1c0RpcmVjdGl2ZSkga2V5Ym9hcmRGb2N1czogRm9jdXNEaXJlY3RpdmU7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgc2V0IGZhY2V0KHZhbHVlOiBGYWNldCkge1xyXG4gICAgdGhpcy5fZmFjZXQgPSB2YWx1ZTtcclxuICAgIHRoaXMuaXNNdWx0aVNlbGVjdCA9ICEhdmFsdWUubXVsdGlTZWxlY3Q7XHJcbiAgICB0aGlzLnN0YXRlJCA9IHRoaXMuZmFjZXRTZXJ2aWNlLmdldFN0YXRlKHZhbHVlKTtcclxuICB9XHJcblxyXG4gIGdldCBmYWNldCgpOiBGYWNldCB7XHJcbiAgICByZXR1cm4gdGhpcy5fZmFjZXQ7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByb3RlY3RlZCBmYWNldFNlcnZpY2U6IEZhY2V0U2VydmljZSxcclxuICAgIHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcclxuICAgIHByb3RlY3RlZCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWZcclxuICApIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIEhhbmRsZXMgY2xpY2tpbmcgdGhlIGhlYWRpbmcgb2YgdGhlIGZhY2V0IGdyb3VwLCB3aGljaCBtZWFucyB0b2dnbGluZ1xyXG4gICAqIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBncm91cCAoY29sbGFwc2UgLyBleHBhbmQpIGFuZCBvcHRpb25hbGx5IGZvY3VzaW5nXHJcbiAgICogdGhlIGdyb3VwLlxyXG4gICAqL1xyXG4gIHRvZ2dsZUdyb3VwKGV2ZW50OiBVSUV2ZW50KSB7XHJcbiAgICBjb25zdCBob3N0OiBIVE1MRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xyXG4gICAgY29uc3QgaXNMb2NrZWQgPSB0aGlzLmtleWJvYXJkRm9jdXM/LmlzTG9ja2VkO1xyXG5cclxuICAgIHRoaXMuZmFjZXRTZXJ2aWNlLnRvZ2dsZSh0aGlzLmZhY2V0LCB0aGlzLmlzRXhwYW5kZWQpO1xyXG5cclxuICAgIGlmICghaXNMb2NrZWQgfHwgdGhpcy5pc0V4cGFuZGVkKSB7XHJcbiAgICAgIGhvc3QuZm9jdXMoKTtcclxuICAgICAgLy8gd2Ugc3RvcCBwcm9wYWdhdGluZyB0aGUgZXZlbnQgYXMgb3RoZXJ3aXNlIHRoZSBmb2N1cyBvbiB0aGUgaG9zdCB3aWxsIHRyaWdnZXJcclxuICAgICAgLy8gYW4gdW5sb2NrIGV2ZW50IGZyb20gdGhlIExvY2tGb2N1cyBkaXJlY3RpdmUuXHJcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0IGlzRXhwYW5kZWQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy52YWx1ZXMuZmlyc3QubmF0aXZlRWxlbWVudC5vZmZzZXRQYXJlbnQgIT09IG51bGw7XHJcbiAgfVxyXG5cclxuICBvcGVuTGluayhldmVudDogS2V5Ym9hcmRFdmVudCkge1xyXG4gICAgKGV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudCkuY2xpY2soKTtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbmNyZWFzZXMgdGhlIG51bWJlciBvZiB2aXNpYmxlIHZhbHVlcyBmb3IgdGhlIGZhY2V0LiBUaGlzIGlzIGRlbGVnYXRlZFxyXG4gICAqIHRvIGBmYWNldFNlcnZpY2UuaW5jcmVhc2VWaXNpYmxlVmFsdWVzYC5cclxuICAgKi9cclxuICBpbmNyZWFzZVZpc2libGVWYWx1ZXMoKTogdm9pZCB7XHJcbiAgICB0aGlzLmZhY2V0U2VydmljZS5pbmNyZWFzZVZpc2libGVWYWx1ZXModGhpcy5mYWNldCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEZWNyZWFzZXMgdGhlIG51bWJlciBvZiB2aXNpYmxlIHZhbHVlcyBmb3IgdGhlIGZhY2V0LiBUaGlzIGlzIGRlbGVnYXRlZFxyXG4gICAqIHRvIGBmYWNldFNlcnZpY2UuZGVjcmVhc2VWaXNpYmxlVmFsdWVzYC5cclxuICAgKi9cclxuICBkZWNyZWFzZVZpc2libGVWYWx1ZXMoKTogdm9pZCB7XHJcbiAgICB0aGlzLmZhY2V0U2VydmljZS5kZWNyZWFzZVZpc2libGVWYWx1ZXModGhpcy5mYWNldCk7XHJcbiAgfVxyXG5cclxuICBnZXRMaW5rUGFyYW1zKHZhbHVlOiBGYWNldFZhbHVlKSB7XHJcbiAgICByZXR1cm4gdGhpcy5mYWNldFNlcnZpY2UuZ2V0TGlua1BhcmFtcyh2YWx1ZS5xdWVyeT8ucXVlcnkudmFsdWUpO1xyXG4gIH1cclxufVxyXG4iXX0=