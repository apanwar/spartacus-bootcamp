import { __decorate } from "tslib";
import { Component, Input, ChangeDetectionStrategy, } from '@angular/core';
import { OccConfig, VariantOption, VariantOptionQualifier, VariantQualifier, } from '@spartacus/core';
var VariantStyleIconsComponent = /** @class */ (function () {
    function VariantStyleIconsComponent(config) {
        this.config = config;
        this.variantNames = {};
    }
    VariantStyleIconsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.variants.forEach(function (variant) {
            _this.variantNames[variant.code] = _this.getVariantName(variant.variantOptionQualifiers);
        });
    };
    VariantStyleIconsComponent.prototype.getVariantThumbnailUrl = function (variantOptionQualifiers) {
        var thumbnail = variantOptionQualifiers.find(function (item) { return item.qualifier === VariantQualifier.THUMBNAIL; });
        return thumbnail
            ? "" + this.config.backend.occ.baseUrl + thumbnail.image.url
            : '';
    };
    VariantStyleIconsComponent.prototype.getVariantName = function (variantOptionQualifiers) {
        var rollupProperty = variantOptionQualifiers.find(function (item) { return item.qualifier === VariantQualifier.ROLLUP_PROPERTY; });
        var property = rollupProperty
            ? variantOptionQualifiers.find(function (item) { return item.qualifier === rollupProperty.value; })
            : null;
        return property ? property.value : '';
    };
    VariantStyleIconsComponent.ctorParameters = function () { return [
        { type: OccConfig }
    ]; };
    __decorate([
        Input()
    ], VariantStyleIconsComponent.prototype, "variants", void 0);
    VariantStyleIconsComponent = __decorate([
        Component({
            selector: 'cx-variant-style-icons',
            template: "<ul class=\"variant-list\">\n  <li *ngFor=\"let v of variants\">\n    <img\n      [attr.src]=\"getVariantThumbnailUrl(v.variantOptionQualifiers)\"\n      [attr.title]=\"variantNames[v.code]\"\n      [attr.alt]=\"variantNames[v.code]\"\n    />\n  </li>\n</ul>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: ["ul{padding:0;white-space:nowrap;overflow:hidden}ul li{display:inline}ul li img{width:50px}"]
        })
    ], VariantStyleIconsComponent);
    return VariantStyleIconsComponent;
}());
export { VariantStyleIconsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFyaWFudC1zdHlsZS1pY29ucy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL3N0b3JlZnJvbnQvIiwic291cmNlcyI6WyJjbXMtY29tcG9uZW50cy9wcm9kdWN0L3Byb2R1Y3QtdmFyaWFudHMvdmFyaWFudC1zdHlsZS1pY29ucy92YXJpYW50LXN0eWxlLWljb25zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBRUwsdUJBQXVCLEdBQ3hCLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFDTCxTQUFTLEVBQ1QsYUFBYSxFQUNiLHNCQUFzQixFQUN0QixnQkFBZ0IsR0FDakIsTUFBTSxpQkFBaUIsQ0FBQztBQVF6QjtJQUNFLG9DQUFvQixNQUFpQjtRQUFqQixXQUFNLEdBQU4sTUFBTSxDQUFXO1FBS3JDLGlCQUFZLEdBQThCLEVBQUUsQ0FBQztJQUxMLENBQUM7SUFPekMsNkNBQVEsR0FBUjtRQUFBLGlCQU1DO1FBTEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBQyxPQUFPO1lBQzVCLEtBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUksQ0FBQyxjQUFjLENBQ25ELE9BQU8sQ0FBQyx1QkFBdUIsQ0FDaEMsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELDJEQUFzQixHQUF0QixVQUNFLHVCQUFpRDtRQUVqRCxJQUFNLFNBQVMsR0FBRyx1QkFBdUIsQ0FBQyxJQUFJLENBQzVDLFVBQUMsSUFBSSxJQUFLLE9BQUEsSUFBSSxDQUFDLFNBQVMsS0FBSyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQTdDLENBQTZDLENBQ3hELENBQUM7UUFDRixPQUFPLFNBQVM7WUFDZCxDQUFDLENBQUMsS0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBSztZQUM1RCxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ1QsQ0FBQztJQUVPLG1EQUFjLEdBQXRCLFVBQ0UsdUJBQWlEO1FBRWpELElBQU0sY0FBYyxHQUFHLHVCQUF1QixDQUFDLElBQUksQ0FDakQsVUFBQyxJQUFJLElBQUssT0FBQSxJQUFJLENBQUMsU0FBUyxLQUFLLGdCQUFnQixDQUFDLGVBQWUsRUFBbkQsQ0FBbUQsQ0FDOUQsQ0FBQztRQUNGLElBQU0sUUFBUSxHQUFHLGNBQWM7WUFDN0IsQ0FBQyxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FDMUIsVUFBQyxJQUFJLElBQUssT0FBQSxJQUFJLENBQUMsU0FBUyxLQUFLLGNBQWMsQ0FBQyxLQUFLLEVBQXZDLENBQXVDLENBQ2xEO1lBQ0gsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNULE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDeEMsQ0FBQzs7Z0JBdEMyQixTQUFTOztJQUdyQztRQURDLEtBQUssRUFBRTtnRUFDa0I7SUFKZiwwQkFBMEI7UUFOdEMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLHdCQUF3QjtZQUNsQyxnUkFBbUQ7WUFFbkQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O1NBQ2hELENBQUM7T0FDVywwQkFBMEIsQ0F3Q3RDO0lBQUQsaUNBQUM7Q0FBQSxBQXhDRCxJQXdDQztTQXhDWSwwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENvbXBvbmVudCxcclxuICBJbnB1dCxcclxuICBPbkluaXQsXHJcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQge1xyXG4gIE9jY0NvbmZpZyxcclxuICBWYXJpYW50T3B0aW9uLFxyXG4gIFZhcmlhbnRPcHRpb25RdWFsaWZpZXIsXHJcbiAgVmFyaWFudFF1YWxpZmllcixcclxufSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdjeC12YXJpYW50LXN0eWxlLWljb25zJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vdmFyaWFudC1zdHlsZS1pY29ucy5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vdmFyaWFudC1zdHlsZS1pY29ucy5jb21wb25lbnQuc2NzcyddLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgVmFyaWFudFN0eWxlSWNvbnNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29uZmlnOiBPY2NDb25maWcpIHt9XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgdmFyaWFudHM6IFZhcmlhbnRPcHRpb25bXTtcclxuXHJcbiAgdmFyaWFudE5hbWVzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge307XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy52YXJpYW50cy5mb3JFYWNoKCh2YXJpYW50KSA9PiB7XHJcbiAgICAgIHRoaXMudmFyaWFudE5hbWVzW3ZhcmlhbnQuY29kZV0gPSB0aGlzLmdldFZhcmlhbnROYW1lKFxyXG4gICAgICAgIHZhcmlhbnQudmFyaWFudE9wdGlvblF1YWxpZmllcnNcclxuICAgICAgKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0VmFyaWFudFRodW1ibmFpbFVybChcclxuICAgIHZhcmlhbnRPcHRpb25RdWFsaWZpZXJzOiBWYXJpYW50T3B0aW9uUXVhbGlmaWVyW11cclxuICApOiBzdHJpbmcge1xyXG4gICAgY29uc3QgdGh1bWJuYWlsID0gdmFyaWFudE9wdGlvblF1YWxpZmllcnMuZmluZChcclxuICAgICAgKGl0ZW0pID0+IGl0ZW0ucXVhbGlmaWVyID09PSBWYXJpYW50UXVhbGlmaWVyLlRIVU1CTkFJTFxyXG4gICAgKTtcclxuICAgIHJldHVybiB0aHVtYm5haWxcclxuICAgICAgPyBgJHt0aGlzLmNvbmZpZy5iYWNrZW5kLm9jYy5iYXNlVXJsfSR7dGh1bWJuYWlsLmltYWdlLnVybH1gXHJcbiAgICAgIDogJyc7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldFZhcmlhbnROYW1lKFxyXG4gICAgdmFyaWFudE9wdGlvblF1YWxpZmllcnM6IFZhcmlhbnRPcHRpb25RdWFsaWZpZXJbXVxyXG4gICk6IHN0cmluZyB7XHJcbiAgICBjb25zdCByb2xsdXBQcm9wZXJ0eSA9IHZhcmlhbnRPcHRpb25RdWFsaWZpZXJzLmZpbmQoXHJcbiAgICAgIChpdGVtKSA9PiBpdGVtLnF1YWxpZmllciA9PT0gVmFyaWFudFF1YWxpZmllci5ST0xMVVBfUFJPUEVSVFlcclxuICAgICk7XHJcbiAgICBjb25zdCBwcm9wZXJ0eSA9IHJvbGx1cFByb3BlcnR5XHJcbiAgICAgID8gdmFyaWFudE9wdGlvblF1YWxpZmllcnMuZmluZChcclxuICAgICAgICAgIChpdGVtKSA9PiBpdGVtLnF1YWxpZmllciA9PT0gcm9sbHVwUHJvcGVydHkudmFsdWVcclxuICAgICAgICApXHJcbiAgICAgIDogbnVsbDtcclxuICAgIHJldHVybiBwcm9wZXJ0eSA/IHByb3BlcnR5LnZhbHVlIDogJyc7XHJcbiAgfVxyXG59XHJcbiJdfQ==