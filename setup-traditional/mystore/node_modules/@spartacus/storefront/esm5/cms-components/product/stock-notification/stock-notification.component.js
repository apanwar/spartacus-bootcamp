import { __decorate, __read } from "tslib";
import { Component, ChangeDetectionStrategy, } from '@angular/core';
import { UserInterestsService, UserNotificationPreferenceService, AuthService, OCC_USER_ID_ANONYMOUS, NotificationPreference, NotificationType, Product, GlobalMessageService, TranslationService, GlobalMessageType, } from '@spartacus/core';
import { Subscription, combineLatest } from 'rxjs';
import { map, filter, tap, first } from 'rxjs/operators';
import { CurrentProductService } from '../current-product.service';
import { ModalService } from '../../../shared/components/modal/modal.service';
import { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';
var StockNotificationComponent = /** @class */ (function () {
    function StockNotificationComponent(authService, currentProductService, globalMessageService, translationService, interestsService, modalService, notificationPrefService) {
        this.authService = authService;
        this.currentProductService = currentProductService;
        this.globalMessageService = globalMessageService;
        this.translationService = translationService;
        this.interestsService = interestsService;
        this.modalService = modalService;
        this.notificationPrefService = notificationPrefService;
        this.anonymous = true;
        this.enabledPrefs = [];
        this.subscriptions = new Subscription();
    }
    StockNotificationComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.outOfStock$ = combineLatest([
            this.currentProductService.getProduct().pipe(filter(Boolean)),
            this.authService.getOccUserId(),
        ]).pipe(tap(function (_a) {
            var _b = __read(_a, 2), product = _b[0], userId = _b[1];
            _this.productCode = product.code;
            if (userId !== OCC_USER_ID_ANONYMOUS) {
                _this.anonymous = false;
                _this.notificationPrefService.loadPreferences();
                _this.interestsService.loadProductInterests(null, null, null, product.code, NotificationType.BACK_IN_STOCK);
            }
        }), map(function (_a) {
            var _b = __read(_a, 1), product = _b[0];
            return !!product.stock && product.stock.stockLevelStatus === 'outOfStock';
        }));
        this.hasProductInterests$ = this.interestsService
            .getProductInterests()
            .pipe(map(function (interests) { return !!interests.results && interests.results.length === 1; }));
        this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();
        this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();
        this.prefsEnabled$ = this.notificationPrefService
            .getEnabledPreferences()
            .pipe(tap(function (prefs) { return (_this.enabledPrefs = prefs); }), map(function (prefs) { return prefs.length > 0; }));
        this.subscriptions.add(this.interestsService.getAddProductInterestError().subscribe(function (error) {
            if (error) {
                _this.onInterestAddingError();
            }
        }));
        this.subscriptions.add(this.interestsService
            .getRemoveProdutInterestSuccess()
            .subscribe(function (success) {
            if (success) {
                _this.onInterestRemovingSuccess();
            }
        }));
    };
    StockNotificationComponent.prototype.subscribe = function () {
        this.openDialog();
        this.interestsService.addProductInterest(this.productCode, NotificationType.BACK_IN_STOCK);
    };
    StockNotificationComponent.prototype.unsubscribe = function () {
        this.interestsService.removeProdutInterest({
            product: {
                code: this.productCode,
            },
            productInterestEntry: [
                {
                    interestType: NotificationType.BACK_IN_STOCK,
                },
            ],
        }, true);
    };
    StockNotificationComponent.prototype.onInterestRemovingSuccess = function () {
        var _this = this;
        this.subscriptions.add(this.translationService
            .translate('stockNotification.unsubscribeSuccess')
            .pipe(first())
            .subscribe(function (text) {
            return _this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO);
        }));
        this.interestsService.resetRemoveInterestState();
    };
    StockNotificationComponent.prototype.onInterestAddingError = function () {
        this.modalService.dismissActiveModal();
        this.interestsService.resetAddInterestState();
    };
    StockNotificationComponent.prototype.openDialog = function () {
        var modalInstance = this.modalService.open(StockNotificationDialogComponent, {
            centered: true,
            size: 'lg',
        }).componentInstance;
        modalInstance.subscribeSuccess$ = this.subscribeSuccess$;
        modalInstance.enabledPrefs = this.enabledPrefs;
    };
    StockNotificationComponent.prototype.ngOnDestroy = function () {
        this.subscriptions.unsubscribe();
        this.interestsService.clearProductInterests();
        this.notificationPrefService.clearPreferences();
    };
    StockNotificationComponent.ctorParameters = function () { return [
        { type: AuthService },
        { type: CurrentProductService },
        { type: GlobalMessageService },
        { type: TranslationService },
        { type: UserInterestsService },
        { type: ModalService },
        { type: UserNotificationPreferenceService }
    ]; };
    StockNotificationComponent = __decorate([
        Component({
            selector: 'cx-stock-notification',
            template: "<ng-container *ngIf=\"outOfStock$ | async\">\r\n  <ng-container *ngIf=\"!(hasProductInterests$ | async); else stopNotify\">\r\n    <ng-container *ngIf=\"prefsEnabled$ | async; else disableNotify\">\r\n      <div class=\"stock-notification-notes\">\r\n        <p>{{ 'stockNotification.getNotified' | cxTranslate }}</p>\r\n      </div>\r\n      <button\r\n        class=\"btn btn-primary btn-block btn-notify\"\r\n        type=\"button\"\r\n        (click)=\"subscribe()\"\r\n      >\r\n        {{ 'stockNotification.notifyMe' | cxTranslate }}\r\n      </button>\r\n    </ng-container>\r\n  </ng-container>\r\n</ng-container>\r\n\r\n<ng-template #disableNotify>\r\n  <div class=\"stock-notification-notes\">\r\n    <p>\r\n      <ng-container *ngIf=\"anonymous; else loggedIn\">\r\n        <a [routerLink]=\"{ cxRoute: 'login' } | cxUrl\">\r\n          {{ 'miniLogin.signInRegister' | cxTranslate }}</a\r\n        >\r\n        {{ 'stockNotification.getNotifySuffix' | cxTranslate }}<br />\r\n      </ng-container>\r\n      <ng-template #loggedIn>\r\n        {{ 'stockNotification.getNotify' | cxTranslate }}<br />\r\n        {{ 'stockNotification.activateChannelsPrefix' | cxTranslate\r\n        }}<a [routerLink]=\"['/my-account/notification-preference']\">{{\r\n          'stockNotification.channelsLink' | cxTranslate\r\n        }}</a\r\n        >{{ 'stockNotification.activateChannelsSuffix' | cxTranslate }}\r\n      </ng-template>\r\n    </p>\r\n  </div>\r\n  <button\r\n    class=\"btn btn-primary btn-block btn-notify\"\r\n    type=\"button\"\r\n    disabled=\"true\"\r\n  >\r\n    {{ 'stockNotification.notifyMe' | cxTranslate }}\r\n  </button>\r\n</ng-template>\r\n\r\n<ng-template #stopNotify>\r\n  <ng-container *ngIf=\"!(isRemoveInterestLoading$ | async); else loading\">\r\n    <div class=\"stock-notification-notes\">\r\n      <p>{{ 'stockNotification.notified' | cxTranslate }}</p>\r\n    </div>\r\n    <button\r\n      class=\"btn btn-primary btn-block btn-stop-notify\"\r\n      type=\"button\"\r\n      (click)=\"unsubscribe()\"\r\n    >\r\n      {{ 'stockNotification.stopNotify' | cxTranslate }}\r\n    </button>\r\n  </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #loading>\r\n  <div class=\"cx-dialog-body modal-body\">\r\n    <div class=\"cx-dialog-row\">\r\n      <div class=\"col-sm-12\">\r\n        <cx-spinner></cx-spinner>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n",
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], StockNotificationComponent);
    return StockNotificationComponent;
}());
export { StockNotificationComponent };
//# sourceMappingURL=data:application/json;base64,