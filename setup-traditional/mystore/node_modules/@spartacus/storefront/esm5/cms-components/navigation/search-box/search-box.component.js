import { __assign, __decorate, __param, __read } from "tslib";
import { ChangeDetectionStrategy, Component, Input, Optional, } from '@angular/core';
import { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';
import { of } from 'rxjs';
import { map, switchMap, tap } from 'rxjs/operators';
import { ICON_TYPE } from '../../../cms-components/misc/icon/index';
import { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';
import { SearchBoxComponentService } from './search-box-component.service';
var DEFAULT_SEARCHBOX_CONFIG = {
    minCharactersBeforeRequest: 1,
    displayProducts: true,
    displaySuggestions: true,
    maxProducts: 5,
    maxSuggestions: 5,
    displayProductImages: true,
};
var SearchBoxComponent = /** @class */ (function () {
    /**
     * The component data is optional, so that this component
     * can be reused without CMS integration.
     */
    function SearchBoxComponent(searchBoxComponentService, componentData, winRef) {
        var _this = this;
        this.searchBoxComponentService = searchBoxComponentService;
        this.componentData = componentData;
        this.winRef = winRef;
        this.iconTypes = ICON_TYPE;
        /**
         * In some occasions we need to ignore the close event,
         * for example when we click inside the search result section.
         */
        this.ignoreCloseEvent = false;
        this.results$ = this.config$.pipe(tap(function (c) { return (_this.config = c); }), switchMap(function (config) { return _this.searchBoxComponentService.getResults(config); }));
    }
    Object.defineProperty(SearchBoxComponent.prototype, "queryText", {
        /**
         * Sets the search box input field
         */
        set: function (value) {
            if (value) {
                this.search(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchBoxComponent.prototype, "config$", {
        /**
         * Returns the backend configuration or default configuration for the searchbox.
         */
        get: function () {
            if (this.componentData) {
                return this.componentData.data$.pipe(
                // Since the backend returns string values (i.e. displayProducts: "true") for
                // boolean values, we replace them with boolean values.
                map(function (c) {
                    return __assign(__assign({}, c), { displayProducts: (c === null || c === void 0 ? void 0 : c.displayProducts) === 'true' || (c === null || c === void 0 ? void 0 : c.displayProducts) === true, displayProductImages: (c === null || c === void 0 ? void 0 : c.displayProductImages) === 'true' ||
                            (c === null || c === void 0 ? void 0 : c.displayProductImages) === true, displaySuggestions: (c === null || c === void 0 ? void 0 : c.displaySuggestions) === 'true' ||
                            (c === null || c === void 0 ? void 0 : c.displaySuggestions) === true });
                }));
            }
            else {
                return of(DEFAULT_SEARCHBOX_CONFIG);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Closes the searchbox and opens the search result page.
     */
    SearchBoxComponent.prototype.search = function (query) {
        this.searchBoxComponentService.search(query, this.config);
        // force the searchbox to open
        this.open();
    };
    /**
     * Opens the typeahead searchbox
     */
    SearchBoxComponent.prototype.open = function () {
        this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);
    };
    /**
     * Closes the typehead searchbox.
     */
    SearchBoxComponent.prototype.close = function (event, force) {
        var _this = this;
        // Use timeout to detect changes
        setTimeout(function () {
            if ((!_this.ignoreCloseEvent && !_this.isSearchboxFocused()) || force) {
                _this.blurSearchBox(event);
            }
        });
    };
    SearchBoxComponent.prototype.blurSearchBox = function (event) {
        this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', false);
        if (event && event.target) {
            event.target.blur();
        }
    };
    // Check if focus is on searchbox or result list elements
    SearchBoxComponent.prototype.isSearchboxFocused = function () {
        return (this.getResultElements().includes(this.getFocusedElement()) ||
            this.winRef.document.querySelector('input[aria-label="search"]') ===
                this.getFocusedElement());
    };
    /**
     * Especially in mobile we do not want the search icon
     * to focus the input again when it's already open.
     * */
    SearchBoxComponent.prototype.avoidReopen = function (event) {
        if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {
            this.close(event);
            event.preventDefault();
        }
    };
    // Return result list as HTMLElement array
    SearchBoxComponent.prototype.getResultElements = function () {
        return Array.from(this.winRef.document.querySelectorAll('.products > a, .suggestions > a'));
    };
    // Return focused element as HTMLElement
    SearchBoxComponent.prototype.getFocusedElement = function () {
        return this.winRef.document.activeElement;
    };
    SearchBoxComponent.prototype.getFocusedIndex = function () {
        return this.getResultElements().indexOf(this.getFocusedElement());
    };
    // Focus on previous item in results list
    SearchBoxComponent.prototype.focusPreviousChild = function (event) {
        event.preventDefault(); // Negate normal keyscroll
        var _a = __read([
            this.getResultElements(),
            this.getFocusedIndex(),
        ], 2), results = _a[0], focusedIndex = _a[1];
        // Focus on last index moving to first
        if (results.length) {
            if (focusedIndex < 1) {
                results[results.length - 1].focus();
            }
            else {
                results[focusedIndex - 1].focus();
            }
        }
    };
    // Focus on next item in results list
    SearchBoxComponent.prototype.focusNextChild = function (event) {
        event.preventDefault(); // Negate normal keyscroll
        var _a = __read([
            this.getResultElements(),
            this.getFocusedIndex(),
        ], 2), results = _a[0], focusedIndex = _a[1];
        // Focus on first index moving to last
        if (results.length) {
            if (focusedIndex >= results.length - 1) {
                results[0].focus();
            }
            else {
                results[focusedIndex + 1].focus();
            }
        }
    };
    /**
     * Opens the PLP with the given query.
     *
     * TODO: if there's a single product match, we could open the PDP.
     */
    SearchBoxComponent.prototype.launchSearchResult = function (event, query) {
        if (!query || query.trim().length === 0) {
            return;
        }
        this.close(event);
        this.searchBoxComponentService.launchSearchPage(query);
    };
    /**
     * Disables closing the search result list.
     */
    SearchBoxComponent.prototype.disableClose = function () {
        this.ignoreCloseEvent = true;
    };
    /**
     * Clears the search box input field
     */
    SearchBoxComponent.prototype.clear = function (el) {
        this.disableClose();
        el.value = '';
        this.searchBoxComponentService.clearResults();
    };
    SearchBoxComponent.ctorParameters = function () { return [
        { type: SearchBoxComponentService },
        { type: CmsComponentData, decorators: [{ type: Optional }] },
        { type: WindowRef }
    ]; };
    __decorate([
        Input('queryText')
    ], SearchBoxComponent.prototype, "queryText", null);
    SearchBoxComponent = __decorate([
        Component({
            selector: 'cx-searchbox',
            template: "<label class=\"searchbox\" [class.dirty]=\"!!searchInput.value\">\r\n  <input\r\n    #searchInput\r\n    [placeholder]=\"'searchBox.placeholder' | cxTranslate\"\r\n    aria-label=\"search\"\r\n    (focus)=\"open()\"\r\n    (input)=\"search(searchInput.value)\"\r\n    (blur)=\"close($event)\"\r\n    (keydown.escape)=\"close($event)\"\r\n    (keydown.enter)=\"\r\n      close($event, true); launchSearchResult($event, searchInput.value)\r\n    \"\r\n    (keydown.arrowup)=\"focusPreviousChild($event)\"\r\n    (keydown.arrowdown)=\"focusNextChild($event)\"\r\n  />\r\n\r\n  <cx-icon\r\n    [type]=\"iconTypes.RESET\"\r\n    aria-label=\"reset\"\r\n    (mousedown)=\"clear(searchInput)\"\r\n    (keydown.enter)=\"clear(searchInput)\"\r\n    class=\"reset\"\r\n    tabindex=\"0\"\r\n  ></cx-icon>\r\n\r\n  <cx-icon\r\n    [type]=\"iconTypes.SEARCH\"\r\n    aria-label=\"search\"\r\n    class=\"search\"\r\n    (mousedown)=\"avoidReopen($event)\"\r\n    (keydown.enter)=\"avoidReopen($event)\"\r\n    tabindex=\"0\"\r\n  ></cx-icon>\r\n</label>\r\n\r\n<div\r\n  *ngIf=\"results$ | async as result\"\r\n  class=\"results\"\r\n  (click)=\"close($event, true)\"\r\n>\r\n  <div\r\n    *ngIf=\"result.message\"\r\n    class=\"message\"\r\n    [innerHTML]=\"result.message\"\r\n  ></div>\r\n\r\n  <div class=\"suggestions\">\r\n    <a\r\n      *ngFor=\"let suggestion of result.suggestions\"\r\n      [innerHTML]=\"suggestion | cxHighlight: searchInput.value\"\r\n      [routerLink]=\"\r\n        {\r\n          cxRoute: 'search',\r\n          params: { query: suggestion }\r\n        } | cxUrl\r\n      \"\r\n      (keydown.arrowup)=\"focusPreviousChild($event)\"\r\n      (keydown.arrowdown)=\"focusNextChild($event)\"\r\n      (keydown.enter)=\"close($event, true)\"\r\n      (keydown.escape)=\"close($event, true)\"\r\n      (blur)=\"close($event)\"\r\n    >\r\n    </a>\r\n  </div>\r\n\r\n  <div class=\"products\" *ngIf=\"result.products\">\r\n    <a\r\n      *ngFor=\"let product of result.products\"\r\n      [routerLink]=\"\r\n        {\r\n          cxRoute: 'product',\r\n          params: product\r\n        } | cxUrl\r\n      \"\r\n      [class.has-media]=\"config.displayProductImages\"\r\n      (keydown.arrowup)=\"focusPreviousChild($event)\"\r\n      (keydown.arrowdown)=\"focusNextChild($event)\"\r\n      (keydown.enter)=\"close($event, true)\"\r\n      (keydown.escape)=\"close($event, true)\"\r\n      (blur)=\"close($event)\"\r\n    >\r\n      <cx-media\r\n        *ngIf=\"config.displayProductImages\"\r\n        [container]=\"product.images?.PRIMARY\"\r\n        [alt]=\"product.summary\"\r\n      ></cx-media>\r\n      <h4 class=\"name\" [innerHTML]=\"product.nameHtml\"></h4>\r\n      <span class=\"price\">{{ product.price?.formattedValue }}</span>\r\n    </a>\r\n  </div>\r\n</div>\r\n",
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        __param(1, Optional())
    ], SearchBoxComponent);
    return SearchBoxComponent;
}());
export { SearchBoxComponent };
//# sourceMappingURL=data:application/json;base64,