import { __decorate, __read } from "tslib";
import { Component } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, Validators, } from '@angular/forms';
import { AnonymousConsent, AnonymousConsentsConfig, AnonymousConsentsService, ConsentTemplate, GlobalMessageEntities, GlobalMessageService, GlobalMessageType, RoutingService, Title, UserService, UserSignUp, } from '@spartacus/core';
import { combineLatest, Subscription } from 'rxjs';
import { filter, map, tap } from 'rxjs/operators';
import { sortTitles, CustomFormValidators } from '../../../shared/index';
var RegisterComponent = /** @class */ (function () {
    function RegisterComponent(userService, globalMessageService, fb, router, anonymousConsentsService, anonymousConsentsConfig) {
        this.userService = userService;
        this.globalMessageService = globalMessageService;
        this.fb = fb;
        this.router = router;
        this.anonymousConsentsService = anonymousConsentsService;
        this.anonymousConsentsConfig = anonymousConsentsConfig;
        this.subscription = new Subscription();
        this.registerForm = this.fb.group({
            titleCode: [''],
            firstName: ['', Validators.required],
            lastName: ['', Validators.required],
            email: ['', [Validators.required, CustomFormValidators.emailValidator]],
            password: [
                '',
                [Validators.required, CustomFormValidators.passwordValidator],
            ],
            passwordconf: ['', Validators.required],
            newsletter: new FormControl({
                value: false,
                disabled: this.isConsentRequired(),
            }),
            termsandconditions: [false, Validators.requiredTrue],
        }, {
            validators: CustomFormValidators.passwordsMustMatch('password', 'passwordconf'),
        });
    }
    RegisterComponent.prototype.ngOnInit = function () {
        var _this = this;
        var _a;
        this.titles$ = this.userService.getTitles().pipe(tap(function (titles) {
            if (Object.keys(titles).length === 0) {
                _this.userService.loadTitles();
            }
        }), map(function (titles) {
            return titles.sort(sortTitles);
        }));
        this.loading$ = this.userService.getRegisterUserResultLoading();
        this.registerUserProcessInit();
        // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)
        this.subscription.add(this.globalMessageService
            .get()
            .pipe(filter(function (messages) { return !!Object.keys(messages).length; }))
            .subscribe(function (globalMessageEntities) {
            var messages = globalMessageEntities &&
                globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];
            if (messages &&
                messages.some(function (message) { return message === 'This field is required.'; })) {
                _this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);
                _this.globalMessageService.add({ key: 'register.titleRequired' }, GlobalMessageType.MSG_TYPE_ERROR);
            }
        }));
        var registerConsent = ((_a = this.anonymousConsentsConfig) === null || _a === void 0 ? void 0 : _a.anonymousConsents).registerConsent;
        this.anonymousConsent$ = combineLatest([
            this.anonymousConsentsService.getConsent(registerConsent),
            this.anonymousConsentsService.getTemplate(registerConsent),
        ]).pipe(map(function (_a) {
            var _b = __read(_a, 2), consent = _b[0], template = _b[1];
            return {
                consent: consent,
                template: template ? template.description : '',
            };
        }));
        this.subscription.add(this.registerForm.get('newsletter').valueChanges.subscribe(function () {
            _this.toggleAnonymousConsent();
        }));
    };
    RegisterComponent.prototype.submitForm = function () {
        if (this.registerForm.valid) {
            this.registerUser();
        }
        else {
            this.registerForm.markAllAsTouched();
        }
    };
    RegisterComponent.prototype.registerUser = function () {
        this.userService.register(this.collectDataFromRegisterForm(this.registerForm.value));
    };
    RegisterComponent.prototype.titleSelected = function (title) {
        this.registerForm['controls'].titleCode.setValue(title.code);
    };
    RegisterComponent.prototype.collectDataFromRegisterForm = function (formData) {
        var firstName = formData.firstName, lastName = formData.lastName, email = formData.email, password = formData.password, titleCode = formData.titleCode;
        return {
            firstName: firstName,
            lastName: lastName,
            uid: email.toLowerCase(),
            password: password,
            titleCode: titleCode,
        };
    };
    RegisterComponent.prototype.isConsentGiven = function (consent) {
        return this.anonymousConsentsService.isConsentGiven(consent);
    };
    RegisterComponent.prototype.isConsentRequired = function () {
        var _a;
        var _b = (_a = this.anonymousConsentsConfig) === null || _a === void 0 ? void 0 : _a.anonymousConsents, requiredConsents = _b.requiredConsents, registerConsent = _b.registerConsent;
        if (requiredConsents && registerConsent) {
            return requiredConsents.includes(registerConsent);
        }
        return false;
    };
    RegisterComponent.prototype.onRegisterUserSuccess = function (success) {
        if (success) {
            this.router.go('login');
            this.globalMessageService.add({ key: 'register.postRegisterMessage' }, GlobalMessageType.MSG_TYPE_CONFIRMATION);
        }
    };
    RegisterComponent.prototype.toggleAnonymousConsent = function () {
        var registerConsent = this.anonymousConsentsConfig.anonymousConsents.registerConsent;
        if (Boolean(this.registerForm.get('newsletter').value)) {
            this.anonymousConsentsService.giveConsent(registerConsent);
        }
        else {
            this.anonymousConsentsService.withdrawConsent(registerConsent);
        }
    };
    RegisterComponent.prototype.registerUserProcessInit = function () {
        var _this = this;
        this.userService.resetRegisterUserProcessState();
        this.subscription.add(this.userService.getRegisterUserResultSuccess().subscribe(function (success) {
            _this.onRegisterUserSuccess(success);
        }));
    };
    RegisterComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
        this.userService.resetRegisterUserProcessState();
    };
    RegisterComponent.ctorParameters = function () { return [
        { type: UserService },
        { type: GlobalMessageService },
        { type: FormBuilder },
        { type: RoutingService },
        { type: AnonymousConsentsService },
        { type: AnonymousConsentsConfig }
    ]; };
    RegisterComponent = __decorate([
        Component({
            selector: 'cx-register',
            template: "<section\r\n  class=\"cx-page-section container\"\r\n  *ngIf=\"!(loading$ | async); else loading\"\r\n>\r\n  <div class=\"row justify-content-center\">\r\n    <div class=\"col-md-6\">\r\n      <div class=\"cx-section\">\r\n        <form (ngSubmit)=\"submitForm()\" [formGroup]=\"registerForm\">\r\n          <div class=\"form-group\">\r\n            <label>\r\n              <span class=\"label-content\">{{\r\n                'register.title' | cxTranslate\r\n              }}</span>\r\n              <select formControlName=\"titleCode\" class=\"form-control\">\r\n                <option selected value=\"\" disabled>{{\r\n                  'register.selectTitle' | cxTranslate\r\n                }}</option>\r\n                <option\r\n                  *ngFor=\"let title of titles$ | async\"\r\n                  [value]=\"title.code\"\r\n                  >{{ title.name }}</option\r\n                >\r\n              </select>\r\n            </label>\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label>\r\n              <span class=\"label-content\">{{\r\n                'register.firstName.label' | cxTranslate\r\n              }}</span>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"firstname\"\r\n                placeholder=\"{{\r\n                  'register.firstName.placeholder' | cxTranslate\r\n                }}\"\r\n                formControlName=\"firstName\"\r\n              />\r\n              <cx-form-errors\r\n                [control]=\"registerForm.get('firstName')\"\r\n              ></cx-form-errors>\r\n            </label>\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label>\r\n              <span class=\"label-content\">{{\r\n                'register.lastName.label' | cxTranslate\r\n              }}</span>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"lastname\"\r\n                placeholder=\"{{\r\n                  'register.lastName.placeholder' | cxTranslate\r\n                }}\"\r\n                formControlName=\"lastName\"\r\n              />\r\n              <cx-form-errors\r\n                [control]=\"registerForm.get('lastName')\"\r\n              ></cx-form-errors>\r\n            </label>\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label>\r\n              <span class=\"label-content\">{{\r\n                'register.emailAddress.label' | cxTranslate\r\n              }}</span>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"email\"\r\n                name=\"email\"\r\n                placeholder=\"{{\r\n                  'register.emailAddress.placeholder' | cxTranslate\r\n                }}\"\r\n                formControlName=\"email\"\r\n              />\r\n              <cx-form-errors\r\n                [control]=\"registerForm.get('email')\"\r\n              ></cx-form-errors>\r\n            </label>\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label>\r\n              <span class=\"label-content\">{{\r\n                'register.password.label' | cxTranslate\r\n              }}</span>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                placeholder=\"{{\r\n                  'register.password.placeholder' | cxTranslate\r\n                }}\"\r\n                formControlName=\"password\"\r\n              />\r\n              <cx-form-errors\r\n                [control]=\"registerForm.get('password')\"\r\n              ></cx-form-errors>\r\n            </label>\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label>\r\n              <span class=\"label-content\">{{\r\n                'register.confirmPassword.label' | cxTranslate\r\n              }}</span>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"password\"\r\n                name=\"confirmpassword\"\r\n                placeholder=\"{{\r\n                  'register.confirmPassword.placeholder' | cxTranslate\r\n                }}\"\r\n                formControlName=\"passwordconf\"\r\n              />\r\n              <cx-form-errors\r\n                [control]=\"registerForm.get('passwordconf')\"\r\n              ></cx-form-errors>\r\n            </label>\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <div class=\"form-check\">\r\n              <label *ngIf=\"anonymousConsent$ | async as anonymousConsent\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  name=\"newsletter\"\r\n                  class=\"form-check-input\"\r\n                  formControlName=\"newsletter\"\r\n                  [checked]=\"isConsentGiven(anonymousConsent.consent)\"\r\n                />\r\n                <span class=\"form-check-label\">\r\n                  {{ anonymousConsent.template }}\r\n                </span>\r\n              </label>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <div class=\"form-check\">\r\n              <label>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  name=\"termsandconditions\"\r\n                  formControlName=\"termsandconditions\"\r\n                />\r\n                <span class=\"form-check-label\">\r\n                  {{ 'register.confirmThatRead' | cxTranslate }}\r\n                  <a\r\n                    [routerLink]=\"{ cxRoute: 'termsAndConditions' } | cxUrl\"\r\n                    target=\"_blank\"\r\n                  >\r\n                    {{ 'register.termsAndConditions' | cxTranslate }}\r\n                  </a>\r\n                </span>\r\n                <cx-form-errors\r\n                  [control]=\"registerForm.get('termsandconditions')\"\r\n                ></cx-form-errors>\r\n              </label>\r\n            </div>\r\n          </div>\r\n          <button type=\"submit\" class=\"btn btn-block btn-primary\">\r\n            {{ 'register.register' | cxTranslate }}\r\n          </button>\r\n          <a\r\n            class=\"cx-login-link btn-link\"\r\n            [routerLink]=\"{ cxRoute: 'login' } | cxUrl\"\r\n            >{{ 'register.signIn' | cxTranslate }}</a\r\n          >\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n\r\n<ng-template #loading>\r\n  <div class=\"cx-spinner\"><cx-spinner></cx-spinner></div>\r\n</ng-template>\r\n"
        })
    ], RegisterComponent);
    return RegisterComponent;
}());
export { RegisterComponent };
//# sourceMappingURL=data:application/json;base64,