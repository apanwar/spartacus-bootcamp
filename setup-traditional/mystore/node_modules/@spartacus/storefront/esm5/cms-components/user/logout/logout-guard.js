import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { AuthService, CmsService, PageType, ProtectedRoutesService, RoutingService, SemanticPathService, } from '@spartacus/core';
import { tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
/**
 * Guards the _logout_ route.
 *
 * Takes care of routing the user to a logout page (if available) or redirects to
 * the homepage. If the homepage is protected, the user is redirected
 * to the login route instead.
 */
var LogoutGuard = /** @class */ (function () {
    function LogoutGuard(auth, cms, routing, semanticPathService, protectedRoutes) {
        this.auth = auth;
        this.cms = cms;
        this.routing = routing;
        this.semanticPathService = semanticPathService;
        this.protectedRoutes = protectedRoutes;
    }
    LogoutGuard.prototype.canActivate = function () {
        var _this = this;
        this.logout();
        return this.cms
            .hasPage({
            id: this.semanticPathService.get('logout'),
            type: PageType.CONTENT_PAGE,
        })
            .pipe(tap(function (hasPage) {
            if (!hasPage) {
                _this.redirect();
            }
        }));
    };
    /**
     * Whenever there is no specific "logout" page configured in the CMS,
     * we redirect after the user is logged out.
     *
     * The user gets redirected to the homepage, unless the homepage is protected
     * (in case of a closed shop). We'll redirect to the login page instead.
     */
    LogoutGuard.prototype.redirect = function () {
        var cxRoute = this.protectedRoutes.shouldProtect ? 'login' : 'home';
        this.routing.go({ cxRoute: cxRoute });
    };
    /**
     * Log user out.
     *
     * This is delegated to the `AuthService`.
     */
    LogoutGuard.prototype.logout = function () {
        this.auth.logout();
    };
    LogoutGuard.ctorParameters = function () { return [
        { type: AuthService },
        { type: CmsService },
        { type: RoutingService },
        { type: SemanticPathService },
        { type: ProtectedRoutesService }
    ]; };
    LogoutGuard.ɵprov = i0.ɵɵdefineInjectable({ factory: function LogoutGuard_Factory() { return new LogoutGuard(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i1.CmsService), i0.ɵɵinject(i1.RoutingService), i0.ɵɵinject(i1.SemanticPathService), i0.ɵɵinject(i1.ProtectedRoutesService)); }, token: LogoutGuard, providedIn: "root" });
    LogoutGuard = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], LogoutGuard);
    return LogoutGuard;
}());
export { LogoutGuard };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nb3V0LWd1YXJkLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9zdG9yZWZyb250LyIsInNvdXJjZXMiOlsiY21zLWNvbXBvbmVudHMvdXNlci9sb2dvdXQvbG9nb3V0LWd1YXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFDTCxXQUFXLEVBQ1gsVUFBVSxFQUNWLFFBQVEsRUFDUixzQkFBc0IsRUFDdEIsY0FBYyxFQUNkLG1CQUFtQixHQUNwQixNQUFNLGlCQUFpQixDQUFDO0FBRXpCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBRXJDOzs7Ozs7R0FNRztBQUlIO0lBQ0UscUJBQ1ksSUFBaUIsRUFDakIsR0FBZSxFQUNmLE9BQXVCLEVBQ3ZCLG1CQUF3QyxFQUN4QyxlQUF1QztRQUp2QyxTQUFJLEdBQUosSUFBSSxDQUFhO1FBQ2pCLFFBQUcsR0FBSCxHQUFHLENBQVk7UUFDZixZQUFPLEdBQVAsT0FBTyxDQUFnQjtRQUN2Qix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBQ3hDLG9CQUFlLEdBQWYsZUFBZSxDQUF3QjtJQUNoRCxDQUFDO0lBRUosaUNBQVcsR0FBWDtRQUFBLGlCQWVDO1FBZEMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRWQsT0FBTyxJQUFJLENBQUMsR0FBRzthQUNaLE9BQU8sQ0FBQztZQUNQLEVBQUUsRUFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQztZQUMxQyxJQUFJLEVBQUUsUUFBUSxDQUFDLFlBQVk7U0FDNUIsQ0FBQzthQUNELElBQUksQ0FDSCxHQUFHLENBQUMsVUFBQyxPQUFPO1lBQ1YsSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDWixLQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7YUFDakI7UUFDSCxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ04sQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNPLDhCQUFRLEdBQWxCO1FBQ0UsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ3RFLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxTQUFBLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRDs7OztPQUlHO0lBQ08sNEJBQU0sR0FBaEI7UUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3JCLENBQUM7O2dCQTNDaUIsV0FBVztnQkFDWixVQUFVO2dCQUNOLGNBQWM7Z0JBQ0YsbUJBQW1CO2dCQUN2QixzQkFBc0I7OztJQU54QyxXQUFXO1FBSHZCLFVBQVUsQ0FBQztZQUNWLFVBQVUsRUFBRSxNQUFNO1NBQ25CLENBQUM7T0FDVyxXQUFXLENBOEN2QjtzQkFyRUQ7Q0FxRUMsQUE5Q0QsSUE4Q0M7U0E5Q1ksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ2FuQWN0aXZhdGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQge1xyXG4gIEF1dGhTZXJ2aWNlLFxyXG4gIENtc1NlcnZpY2UsXHJcbiAgUGFnZVR5cGUsXHJcbiAgUHJvdGVjdGVkUm91dGVzU2VydmljZSxcclxuICBSb3V0aW5nU2VydmljZSxcclxuICBTZW1hbnRpY1BhdGhTZXJ2aWNlLFxyXG59IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuLyoqXHJcbiAqIEd1YXJkcyB0aGUgX2xvZ291dF8gcm91dGUuXHJcbiAqXHJcbiAqIFRha2VzIGNhcmUgb2Ygcm91dGluZyB0aGUgdXNlciB0byBhIGxvZ291dCBwYWdlIChpZiBhdmFpbGFibGUpIG9yIHJlZGlyZWN0cyB0b1xyXG4gKiB0aGUgaG9tZXBhZ2UuIElmIHRoZSBob21lcGFnZSBpcyBwcm90ZWN0ZWQsIHRoZSB1c2VyIGlzIHJlZGlyZWN0ZWRcclxuICogdG8gdGhlIGxvZ2luIHJvdXRlIGluc3RlYWQuXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTG9nb3V0R3VhcmQgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgYXV0aDogQXV0aFNlcnZpY2UsXHJcbiAgICBwcm90ZWN0ZWQgY21zOiBDbXNTZXJ2aWNlLFxyXG4gICAgcHJvdGVjdGVkIHJvdXRpbmc6IFJvdXRpbmdTZXJ2aWNlLFxyXG4gICAgcHJvdGVjdGVkIHNlbWFudGljUGF0aFNlcnZpY2U6IFNlbWFudGljUGF0aFNlcnZpY2UsXHJcbiAgICBwcm90ZWN0ZWQgcHJvdGVjdGVkUm91dGVzOiBQcm90ZWN0ZWRSb3V0ZXNTZXJ2aWNlXHJcbiAgKSB7fVxyXG5cclxuICBjYW5BY3RpdmF0ZSgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgdGhpcy5sb2dvdXQoKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5jbXNcclxuICAgICAgLmhhc1BhZ2Uoe1xyXG4gICAgICAgIGlkOiB0aGlzLnNlbWFudGljUGF0aFNlcnZpY2UuZ2V0KCdsb2dvdXQnKSxcclxuICAgICAgICB0eXBlOiBQYWdlVHlwZS5DT05URU5UX1BBR0UsXHJcbiAgICAgIH0pXHJcbiAgICAgIC5waXBlKFxyXG4gICAgICAgIHRhcCgoaGFzUGFnZSkgPT4ge1xyXG4gICAgICAgICAgaWYgKCFoYXNQYWdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVkaXJlY3QoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogV2hlbmV2ZXIgdGhlcmUgaXMgbm8gc3BlY2lmaWMgXCJsb2dvdXRcIiBwYWdlIGNvbmZpZ3VyZWQgaW4gdGhlIENNUyxcclxuICAgKiB3ZSByZWRpcmVjdCBhZnRlciB0aGUgdXNlciBpcyBsb2dnZWQgb3V0LlxyXG4gICAqXHJcbiAgICogVGhlIHVzZXIgZ2V0cyByZWRpcmVjdGVkIHRvIHRoZSBob21lcGFnZSwgdW5sZXNzIHRoZSBob21lcGFnZSBpcyBwcm90ZWN0ZWRcclxuICAgKiAoaW4gY2FzZSBvZiBhIGNsb3NlZCBzaG9wKS4gV2UnbGwgcmVkaXJlY3QgdG8gdGhlIGxvZ2luIHBhZ2UgaW5zdGVhZC5cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgcmVkaXJlY3QoKTogdm9pZCB7XHJcbiAgICBjb25zdCBjeFJvdXRlID0gdGhpcy5wcm90ZWN0ZWRSb3V0ZXMuc2hvdWxkUHJvdGVjdCA/ICdsb2dpbicgOiAnaG9tZSc7XHJcbiAgICB0aGlzLnJvdXRpbmcuZ28oeyBjeFJvdXRlIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTG9nIHVzZXIgb3V0LlxyXG4gICAqXHJcbiAgICogVGhpcyBpcyBkZWxlZ2F0ZWQgdG8gdGhlIGBBdXRoU2VydmljZWAuXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGxvZ291dCgpOiB2b2lkIHtcclxuICAgIHRoaXMuYXV0aC5sb2dvdXQoKTtcclxuICB9XHJcbn1cclxuIl19