import { __decorate } from "tslib";
import { Injectable, isDevMode, Renderer2, RendererFactory2, } from '@angular/core';
import { WindowRef } from '@spartacus/core';
import { fromEvent, of } from 'rxjs';
import { filter, map, switchMap, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
export var QUALTRICS_EVENT_NAME = 'qsi_js_loaded';
/**
 * Service to integration Qualtrics.
 *
 * The integration observes the Qualtrics API, and when available, it runs the QSI API
 * to let Qualtrics evaluate the application.
 *
 * The service supports an additional _hook_ (`isDataLoaded()`) that can be used to load application
 * data before pulling the QSI API. This is beneficial in a single page application when additional
 * data is required before the Qualtrics _creatives_ run.
 *
 * This service also supports the creation of the Qualtrics deployment script. This is optional, as
 * the script can be added in alternatives ways.
 */
var QualtricsLoaderService = /** @class */ (function () {
    function QualtricsLoaderService(winRef, rendererFactory) {
        var _this = this;
        var _a;
        this.winRef = winRef;
        this.rendererFactory = rendererFactory;
        /**
         * QSI load event that happens when the QSI JS file is loaded.
         */
        this.qsiLoaded$ = ((_a = this.winRef) === null || _a === void 0 ? void 0 : _a.nativeWindow) ? fromEvent(this.winRef.nativeWindow, QUALTRICS_EVENT_NAME)
            : of();
        /**
         * Emits the Qualtrics Site Intercept (QSI) JavaScript API whenever available.
         *
         * The API is emitted when the JavaScript resource holding this API is fully loaded.
         * The API is also stored locally in the service, in case it's required later on.
         */
        this.qsi$ = this.qsiLoaded$.pipe(switchMap(function () { return _this.isDataLoaded(); }), map(function () { var _a; return (_a = _this.winRef) === null || _a === void 0 ? void 0 : _a.nativeWindow['QSI']; }), filter(function (api) { return Boolean(api); }), tap(function (qsi) { return (_this.qsiApi = qsi); }));
        this.initialize();
    }
    /**
     * Starts observing the Qualtrics integration. The integration is based on a
     * Qualtrics specific event (`qsi_js_loaded`). As soon as this events happens,
     * we run the API.
     */
    QualtricsLoaderService.prototype.initialize = function () {
        var _this = this;
        this.qsi$.subscribe(function () { return _this.run(); });
    };
    /**
     * Evaluates the Qualtrics project code for the application.
     *
     * In order to reload the evaluation in Qualtrics, the API requires to unload the API before
     * running it again. We don't do this by default, but offer a flag to conditionally unload the API.
     */
    QualtricsLoaderService.prototype.run = function (reload) {
        if (reload === void 0) { reload = false; }
        var _a;
        if (!((_a = this.qsiApi) === null || _a === void 0 ? void 0 : _a.API)) {
            if (isDevMode()) {
                console.log('The QSI api is not available');
            }
            return;
        }
        if (reload) {
            // Removes any currently displaying creatives
            this.qsiApi.API.unload();
        }
        // Starts the intercept code evaluation right after loading the Site Intercept
        // code for any defined intercepts or creatives
        this.qsiApi.API.load().done(this.qsiApi.API.run());
    };
    /**
     * Adds the deployment script to the DOM.
     *
     * The script will not be added twice if it was loaded before. In that case, we use
     * the Qualtrics API directly to _unload_ and _run_ the project.
     */
    QualtricsLoaderService.prototype.addScript = function (scriptSource) {
        if (this.hasScript(scriptSource)) {
            this.run(true);
        }
        else {
            var script = this.renderer.createElement('script');
            script.type = 'text/javascript';
            script.defer = true;
            script.src = scriptSource;
            this.renderer.appendChild(this.winRef.document.body, script);
        }
    };
    /**
     * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data.
     * You can observe any data in this method.
     *
     * Defaults to true.
     */
    QualtricsLoaderService.prototype.isDataLoaded = function () {
        return of(true);
    };
    /**
     * Indicates if the script is already added to the DOM.
     */
    QualtricsLoaderService.prototype.hasScript = function (source) {
        return !!this.winRef.document.querySelector("script[src=\"" + source + "\"]");
    };
    Object.defineProperty(QualtricsLoaderService.prototype, "renderer", {
        get: function () {
            return this.rendererFactory.createRenderer(null, null);
        },
        enumerable: true,
        configurable: true
    });
    QualtricsLoaderService.ctorParameters = function () { return [
        { type: WindowRef },
        { type: RendererFactory2 }
    ]; };
    QualtricsLoaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function QualtricsLoaderService_Factory() { return new QualtricsLoaderService(i0.ɵɵinject(i1.WindowRef), i0.ɵɵinject(i0.RendererFactory2)); }, token: QualtricsLoaderService, providedIn: "root" });
    QualtricsLoaderService = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], QualtricsLoaderService);
    return QualtricsLoaderService;
}());
export { QualtricsLoaderService };
//# sourceMappingURL=data:application/json;base64,