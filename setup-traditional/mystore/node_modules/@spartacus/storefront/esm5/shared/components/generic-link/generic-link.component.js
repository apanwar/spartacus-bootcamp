import { __decorate, __read } from "tslib";
import { Component, Input } from '@angular/core';
import { Params, Router } from '@angular/router';
/**
 * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.
 */
var GenericLinkComponent = /** @class */ (function () {
    function GenericLinkComponent(router) {
        this.router = router;
        /**
         * Pattern matching string starting with `http://` or `https://`.
         */
        this.PROTOCOL_REGEX = /^https?:\/\//i;
        /**
         * Used to split url into 2 parts:
         * 1. the path
         * 2. query params + hash fragment
         */
        this.URL_SPLIT = /(^[^#?]*)(.*)/;
        /**
         * Parsed parts of the @Input `url`, when it's a local URL.
         * It should not be used when the `url` is external.
         * @see `url`
         */
        this.routeParts = {};
    }
    /**
     * Returns true when the @Input `url` is a string starting with `http://` or `https://`.
     */
    GenericLinkComponent.prototype.isExternalUrl = function () {
        return typeof this.url === 'string' && this.PROTOCOL_REGEX.test(this.url);
    };
    Object.defineProperty(GenericLinkComponent.prototype, "rel", {
        get: function () {
            return this.target === '_blank' ? 'noopener' : null;
        },
        enumerable: true,
        configurable: true
    });
    GenericLinkComponent.prototype.ngOnChanges = function (changes) {
        if (changes['url']) {
            this.setUrlParts(changes['url'].currentValue);
        }
    };
    Object.defineProperty(GenericLinkComponent.prototype, "routerUrl", {
        /**
         * The part with the path of the local url.
         */
        get: function () {
            return this.routeParts.path;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GenericLinkComponent.prototype, "queryParams", {
        /**
         * The part with the query params of the local url.
         */
        get: function () {
            return this.routeParts.queryParams;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GenericLinkComponent.prototype, "fragment", {
        /**
         * The part with the hash fragment of the local url.
         */
        get: function () {
            return this.routeParts.fragment;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Parses the given url and sets the property `urlParts` accordingly.
     */
    GenericLinkComponent.prototype.setUrlParts = function (url) {
        if (typeof url === 'string') {
            url = this.getAbsoluteUrl(url); // string links in CMS sometimes don't have the leading slash, so fix it here
            this.routeParts = this.splitUrl(url);
        }
        else {
            this.routeParts = { path: url };
        }
    };
    /**
     * Parses the given string into 3 parts:
     * - string path (wrapped in an array to be compatible with Angular syntax for the `routerLink`)
     * - query params (as an object)
     * - hash fragment (string)
     */
    GenericLinkComponent.prototype.splitUrl = function (url) {
        if (url === void 0) { url = ''; }
        var _a = this.router.parseUrl(url), queryParams = _a.queryParams, fragment = _a.fragment;
        var _b = __read(url.match(this.URL_SPLIT), 2), path = _b[1];
        // wrap path in an array, to have the Angular-like path format
        return { path: [path], queryParams: queryParams, fragment: fragment };
    };
    /**
     * Prepends a leading slash to the given URL string, in case it doesn't have it.
     */
    GenericLinkComponent.prototype.getAbsoluteUrl = function (url) {
        return url.startsWith('/') ? url : '/' + url;
    };
    GenericLinkComponent.ctorParameters = function () { return [
        { type: Router }
    ]; };
    __decorate([
        Input()
    ], GenericLinkComponent.prototype, "url", void 0);
    __decorate([
        Input()
    ], GenericLinkComponent.prototype, "target", void 0);
    __decorate([
        Input()
    ], GenericLinkComponent.prototype, "class", void 0);
    __decorate([
        Input()
    ], GenericLinkComponent.prototype, "id", void 0);
    __decorate([
        Input()
    ], GenericLinkComponent.prototype, "style", void 0);
    __decorate([
        Input()
    ], GenericLinkComponent.prototype, "title", void 0);
    GenericLinkComponent = __decorate([
        Component({
            selector: 'cx-generic-link',
            template: "<!-- https://github.com/angular/angular/issues/24567 -->\r\n\r\n<ng-container *ngIf=\"isExternalUrl(); else isLocalUrl\">\r\n  <a\r\n    role=\"link\"\r\n    [href]=\"url\"\r\n    [attr.target]=\"target\"\r\n    [attr.rel]=\"rel\"\r\n    [attr.class]=\"class\"\r\n    [attr.id]=\"id\"\r\n    [attr.style]=\"style\"\r\n    [attr.title]=\"title\"\r\n  >\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </a>\r\n</ng-container>\r\n\r\n<ng-template #isLocalUrl>\r\n  <a\r\n    role=\"link\"\r\n    [routerLink]=\"routerUrl\"\r\n    [queryParams]=\"queryParams\"\r\n    [fragment]=\"fragment\"\r\n    [attr.target]=\"target\"\r\n    [attr.class]=\"class\"\r\n    [attr.id]=\"id\"\r\n    [attr.style]=\"style\"\r\n    [attr.title]=\"title\"\r\n  >\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </a>\r\n</ng-template>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n"
        })
    ], GenericLinkComponent);
    return GenericLinkComponent;
}());
export { GenericLinkComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJpYy1saW5rLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvc3RvcmVmcm9udC8iLCJzb3VyY2VzIjpbInNoYXJlZC9jb21wb25lbnRzL2dlbmVyaWMtbGluay9nZW5lcmljLWxpbmsuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBNEIsTUFBTSxlQUFlLENBQUM7QUFDM0UsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQWNqRDs7R0FFRztBQUtIO0lBQ0UsOEJBQXNCLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBRXBDOztXQUVHO1FBQ2MsbUJBQWMsR0FBVyxlQUFlLENBQUM7UUFFMUQ7Ozs7V0FJRztRQUNjLGNBQVMsR0FBRyxlQUFlLENBQUM7UUFFN0M7Ozs7V0FJRztRQUNLLGVBQVUsR0FBZSxFQUFFLENBQUM7SUFuQkcsQ0FBQztJQTRCeEM7O09BRUc7SUFDSCw0Q0FBYSxHQUFiO1FBQ0UsT0FBTyxPQUFPLElBQUksQ0FBQyxHQUFHLEtBQUssUUFBUSxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRUQsc0JBQUkscUNBQUc7YUFBUDtZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3RELENBQUM7OztPQUFBO0lBRUQsMENBQVcsR0FBWCxVQUFZLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQy9DO0lBQ0gsQ0FBQztJQUtELHNCQUFJLDJDQUFTO1FBSGI7O1dBRUc7YUFDSDtZQUNFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7UUFDOUIsQ0FBQzs7O09BQUE7SUFLRCxzQkFBSSw2Q0FBVztRQUhmOztXQUVHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDO1FBQ3JDLENBQUM7OztPQUFBO0lBS0Qsc0JBQUksMENBQVE7UUFIWjs7V0FFRzthQUNIO1lBQ0UsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztRQUNsQyxDQUFDOzs7T0FBQTtJQUVEOztPQUVHO0lBQ0ssMENBQVcsR0FBbkIsVUFBb0IsR0FBbUI7UUFDckMsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7WUFDM0IsR0FBRyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyw2RUFBNkU7WUFDN0csSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQWEsQ0FBQyxDQUFDO1NBQ2hEO2FBQU07WUFDTCxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ssdUNBQVEsR0FBaEIsVUFBaUIsR0FBZ0I7UUFBaEIsb0JBQUEsRUFBQSxRQUFnQjtRQUN6QixJQUFBLDhCQUFxRCxFQUFuRCw0QkFBVyxFQUFFLHNCQUFzQyxDQUFDO1FBQ3RELElBQUEseUNBQW9DLEVBQWpDLFlBQWlDLENBQUM7UUFFM0MsOERBQThEO1FBQzlELE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxXQUFXLGFBQUEsRUFBRSxRQUFRLFVBQUEsRUFBRSxDQUFDO0lBQ2pELENBQUM7SUFFRDs7T0FFRztJQUNLLDZDQUFjLEdBQXRCLFVBQXVCLEdBQVc7UUFDaEMsT0FBTyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDL0MsQ0FBQzs7Z0JBakc2QixNQUFNOztJQXFCM0I7UUFBUixLQUFLLEVBQUU7cURBQXFCO0lBQ3BCO1FBQVIsS0FBSyxFQUFFO3dEQUFnQjtJQUNmO1FBQVIsS0FBSyxFQUFFO3VEQUFlO0lBQ2Q7UUFBUixLQUFLLEVBQUU7b0RBQVk7SUFDWDtRQUFSLEtBQUssRUFBRTt1REFBZTtJQUNkO1FBQVIsS0FBSyxFQUFFO3VEQUFlO0lBM0JaLG9CQUFvQjtRQUpoQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsaUJBQWlCO1lBQzNCLDA3QkFBNEM7U0FDN0MsQ0FBQztPQUNXLG9CQUFvQixDQW1HaEM7SUFBRCwyQkFBQztDQUFBLEFBbkdELElBbUdDO1NBbkdZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQYXJhbXMsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcblxyXG4vLyBwcml2YXRlXHJcbmludGVyZmFjZSBSb3V0ZVBhcnRzIHtcclxuICAvKiogUGF0aCBpbiB0aGUgQW5ndWxhci1saWtlIGFycmF5IGZvcm1hdCAqL1xyXG4gIHBhdGg/OiBzdHJpbmdbXTtcclxuXHJcbiAgLyoqIFF1ZXJ5IHBhcmFtcyAqL1xyXG4gIHF1ZXJ5UGFyYW1zPzogUGFyYW1zO1xyXG5cclxuICAvKiogSGFzaCBmcmFnbWVudCAqL1xyXG4gIGZyYWdtZW50Pzogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogVGhpcyBjb21wb25lbnQgbmF2aWdhdGVzIHVzaW5nIFtyb3V0ZXJMaW5rXSBhdHRyaWJ1dGUgd2hlbiBpbnB1dCAndXJsJyBpcyBhIHJlbGF0aXZlIHVybC4gT3RoZXJ3aXNlICh3aGVuIGl0J3MgYWJzb2x1dGUpLCBbaHJlZl0gaXMgdXNlZC5cclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnY3gtZ2VuZXJpYy1saW5rJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vZ2VuZXJpYy1saW5rLmNvbXBvbmVudC5odG1sJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIEdlbmVyaWNMaW5rQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcm91dGVyOiBSb3V0ZXIpIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIFBhdHRlcm4gbWF0Y2hpbmcgc3RyaW5nIHN0YXJ0aW5nIHdpdGggYGh0dHA6Ly9gIG9yIGBodHRwczovL2AuXHJcbiAgICovXHJcbiAgcHJpdmF0ZSByZWFkb25seSBQUk9UT0NPTF9SRUdFWDogUmVnRXhwID0gL15odHRwcz86XFwvXFwvL2k7XHJcblxyXG4gIC8qKlxyXG4gICAqIFVzZWQgdG8gc3BsaXQgdXJsIGludG8gMiBwYXJ0czpcclxuICAgKiAxLiB0aGUgcGF0aFxyXG4gICAqIDIuIHF1ZXJ5IHBhcmFtcyArIGhhc2ggZnJhZ21lbnRcclxuICAgKi9cclxuICBwcml2YXRlIHJlYWRvbmx5IFVSTF9TUExJVCA9IC8oXlteIz9dKikoLiopLztcclxuXHJcbiAgLyoqXHJcbiAgICogUGFyc2VkIHBhcnRzIG9mIHRoZSBASW5wdXQgYHVybGAsIHdoZW4gaXQncyBhIGxvY2FsIFVSTC5cclxuICAgKiBJdCBzaG91bGQgbm90IGJlIHVzZWQgd2hlbiB0aGUgYHVybGAgaXMgZXh0ZXJuYWwuXHJcbiAgICogQHNlZSBgdXJsYFxyXG4gICAqL1xyXG4gIHByaXZhdGUgcm91dGVQYXJ0czogUm91dGVQYXJ0cyA9IHt9O1xyXG5cclxuICBASW5wdXQoKSB1cmw6IHN0cmluZyB8IGFueVtdO1xyXG4gIEBJbnB1dCgpIHRhcmdldDogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGNsYXNzOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgaWQ6IHN0cmluZztcclxuICBASW5wdXQoKSBzdHlsZTogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIHRpdGxlOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdHJ1ZSB3aGVuIHRoZSBASW5wdXQgYHVybGAgaXMgYSBzdHJpbmcgc3RhcnRpbmcgd2l0aCBgaHR0cDovL2Agb3IgYGh0dHBzOi8vYC5cclxuICAgKi9cclxuICBpc0V4dGVybmFsVXJsKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLnVybCA9PT0gJ3N0cmluZycgJiYgdGhpcy5QUk9UT0NPTF9SRUdFWC50ZXN0KHRoaXMudXJsKTtcclxuICB9XHJcblxyXG4gIGdldCByZWwoKSB7XHJcbiAgICByZXR1cm4gdGhpcy50YXJnZXQgPT09ICdfYmxhbmsnID8gJ25vb3BlbmVyJyA6IG51bGw7XHJcbiAgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICBpZiAoY2hhbmdlc1sndXJsJ10pIHtcclxuICAgICAgdGhpcy5zZXRVcmxQYXJ0cyhjaGFuZ2VzWyd1cmwnXS5jdXJyZW50VmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHBhcnQgd2l0aCB0aGUgcGF0aCBvZiB0aGUgbG9jYWwgdXJsLlxyXG4gICAqL1xyXG4gIGdldCByb3V0ZXJVcmwoKTogYW55W10ge1xyXG4gICAgcmV0dXJuIHRoaXMucm91dGVQYXJ0cy5wYXRoO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHBhcnQgd2l0aCB0aGUgcXVlcnkgcGFyYW1zIG9mIHRoZSBsb2NhbCB1cmwuXHJcbiAgICovXHJcbiAgZ2V0IHF1ZXJ5UGFyYW1zKCk6IFBhcmFtcyB7XHJcbiAgICByZXR1cm4gdGhpcy5yb3V0ZVBhcnRzLnF1ZXJ5UGFyYW1zO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHBhcnQgd2l0aCB0aGUgaGFzaCBmcmFnbWVudCBvZiB0aGUgbG9jYWwgdXJsLlxyXG4gICAqL1xyXG4gIGdldCBmcmFnbWVudCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMucm91dGVQYXJ0cy5mcmFnbWVudDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFBhcnNlcyB0aGUgZ2l2ZW4gdXJsIGFuZCBzZXRzIHRoZSBwcm9wZXJ0eSBgdXJsUGFydHNgIGFjY29yZGluZ2x5LlxyXG4gICAqL1xyXG4gIHByaXZhdGUgc2V0VXJsUGFydHModXJsOiBzdHJpbmcgfCBhbnlbXSkge1xyXG4gICAgaWYgKHR5cGVvZiB1cmwgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHVybCA9IHRoaXMuZ2V0QWJzb2x1dGVVcmwodXJsKTsgLy8gc3RyaW5nIGxpbmtzIGluIENNUyBzb21ldGltZXMgZG9uJ3QgaGF2ZSB0aGUgbGVhZGluZyBzbGFzaCwgc28gZml4IGl0IGhlcmVcclxuICAgICAgdGhpcy5yb3V0ZVBhcnRzID0gdGhpcy5zcGxpdFVybCh1cmwgYXMgc3RyaW5nKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucm91dGVQYXJ0cyA9IHsgcGF0aDogdXJsIH07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBQYXJzZXMgdGhlIGdpdmVuIHN0cmluZyBpbnRvIDMgcGFydHM6XHJcbiAgICogLSBzdHJpbmcgcGF0aCAod3JhcHBlZCBpbiBhbiBhcnJheSB0byBiZSBjb21wYXRpYmxlIHdpdGggQW5ndWxhciBzeW50YXggZm9yIHRoZSBgcm91dGVyTGlua2ApXHJcbiAgICogLSBxdWVyeSBwYXJhbXMgKGFzIGFuIG9iamVjdClcclxuICAgKiAtIGhhc2ggZnJhZ21lbnQgKHN0cmluZylcclxuICAgKi9cclxuICBwcml2YXRlIHNwbGl0VXJsKHVybDogc3RyaW5nID0gJycpOiBSb3V0ZVBhcnRzIHtcclxuICAgIGNvbnN0IHsgcXVlcnlQYXJhbXMsIGZyYWdtZW50IH0gPSB0aGlzLnJvdXRlci5wYXJzZVVybCh1cmwpO1xyXG4gICAgY29uc3QgWywgcGF0aF0gPSB1cmwubWF0Y2godGhpcy5VUkxfU1BMSVQpO1xyXG5cclxuICAgIC8vIHdyYXAgcGF0aCBpbiBhbiBhcnJheSwgdG8gaGF2ZSB0aGUgQW5ndWxhci1saWtlIHBhdGggZm9ybWF0XHJcbiAgICByZXR1cm4geyBwYXRoOiBbcGF0aF0sIHF1ZXJ5UGFyYW1zLCBmcmFnbWVudCB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUHJlcGVuZHMgYSBsZWFkaW5nIHNsYXNoIHRvIHRoZSBnaXZlbiBVUkwgc3RyaW5nLCBpbiBjYXNlIGl0IGRvZXNuJ3QgaGF2ZSBpdC5cclxuICAgKi9cclxuICBwcml2YXRlIGdldEFic29sdXRlVXJsKHVybDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB1cmwuc3RhcnRzV2l0aCgnLycpID8gdXJsIDogJy8nICsgdXJsO1xyXG4gIH1cclxufVxyXG4iXX0=