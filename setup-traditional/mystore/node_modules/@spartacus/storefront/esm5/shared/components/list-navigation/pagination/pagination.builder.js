import { __decorate, __read, __spread } from "tslib";
import { Injectable } from '@angular/core';
import { PaginationConfig } from './config/pagination.config';
import { PaginationItemType, PaginationNavigationPosition, } from './pagination.model';
import * as i0 from "@angular/core";
import * as i1 from "./config/pagination.config";
var FALLBACK_PAGINATION_OPTIONS = {
    rangeCount: 3,
    dotsLabel: '...',
    startLabel: '«',
    previousLabel: '‹',
    nextLabel: '›',
    endLabel: '»',
};
/**
 * Builds a pagination structures based on a pageCount and current page number.
 * There are various {@link PaginationConfig} options which can be used to configure
 * the behaviour of the build. Alternatively, CSS can be used to further customise
 * the pagination.
 *
 * Examples:
 * The full blown pagination items contain the follow elements:
 *
 * `« ‹ 1 ... 4 (5) 6 ... 9 › »`
 *
 * This includes pagination items to the following pages:
 * - start page
 * - previous page
 * - first page
 * - page range
 * - last page
 * - next page
 * - end page
 *
 * All of those links are configurable, including the size of the page range.
 * The current page will always be centered in the page range to provide direct access
 * to the previous and next page.
 */
var PaginationBuilder = /** @class */ (function () {
    function PaginationBuilder(paginationConfig) {
        this.paginationConfig = paginationConfig;
    }
    /**
     * Builds a list of `PaginationItem`. The give pageCount and current are used
     * to build out the full pagination. There are various {@link PaginationConfig} options
     * which can be used to configure the behaviour of the build. Alternatively, CSS
     * can be used to further specialize visibility of the pagination.
     *
     * @param pageCount The total number of pages
     * @param current The current page number, 0-index based
     * @returns An array of `PaginationItem`
     */
    PaginationBuilder.prototype.paginate = function (pageCount, current) {
        var pages = [];
        if (pageCount < 2) {
            return pages;
        }
        this.addPages(pages, pageCount, current);
        this.addDots(pages, pageCount);
        this.addFirstLast(pages, pageCount);
        this.addNavigation(pages, pageCount, current);
        return pages;
    };
    /**
     * Returns the current page with surrounding pages (based on the `config.rangeCount`).
     * The current page is always centered to provide direct access to the previous and next page.
     *
     * @param pages The list of page items that is used to amend
     * @param pageCount The total number of pages
     * @param current The current page number, 0-index based
     */
    PaginationBuilder.prototype.addPages = function (pages, pageCount, current) {
        var start = this.getStartOfRange(pageCount, current);
        var max = Math.min(this.config.rangeCount, pageCount);
        Array.from(Array(max)).forEach(function (_, i) {
            pages.push({
                number: i + start,
                label: String(i + start + 1),
                type: PaginationItemType.PAGE,
            });
        });
    };
    /**
     * Adds dots before and after the given pages, if configured (defaults to true).
     * If the dots only represent a single page, the page number is added instead of
     * the dots, unless the configuration requires dots always.
     *
     * @param pages The list of page items that is used to amend
     * @param pageCount The total number of pages
     */
    PaginationBuilder.prototype.addDots = function (pages, pageCount) {
        var _this = this;
        if (!this.config.addDots) {
            return;
        }
        var addFirstGap = function () {
            var firstItemNumber = pages[0].number;
            var gapNumber = _this.config.addFirst ? 1 : 0;
            if (firstItemNumber > gapNumber) {
                var isGap = !_this.config.substituteDotsForSingularPage ||
                    firstItemNumber !== gapNumber + 1;
                var isSubstitued = _this.config.addFirst &&
                    _this.config.substituteDotsForSingularPage &&
                    gapNumber === 0;
                var type = isGap
                    ? PaginationItemType.GAP
                    : isSubstitued
                        ? PaginationItemType.FIRST
                        : PaginationItemType.PAGE;
                return [
                    Object.assign({
                        label: isGap ? _this.config.dotsLabel : String(gapNumber + 1),
                        type: type,
                    }, isGap ? null : { number: gapNumber }),
                ];
            }
            else
                return [];
        };
        var addLastGap = function () {
            var nextPageNumber = pages[pages.length - 1].number + 1;
            var last = pageCount - (_this.config.addLast ? 2 : 1);
            if (nextPageNumber <= last) {
                var isSubstitued = _this.config.addLast &&
                    _this.config.substituteDotsForSingularPage &&
                    nextPageNumber === last;
                var isGap = nextPageNumber <
                    pageCount -
                        (_this.config.substituteDotsForSingularPage ? 1 : 0) -
                        (_this.config.addLast ? 1 : 0);
                var type = isGap
                    ? PaginationItemType.GAP
                    : isSubstitued
                        ? PaginationItemType.LAST
                        : PaginationItemType.PAGE;
                return [
                    Object.assign({
                        label: isGap ? _this.config.dotsLabel : String(nextPageNumber + 1),
                        type: type,
                    }, isGap ? null : { number: nextPageNumber }),
                ];
            }
            else
                return [];
        };
        pages.unshift.apply(pages, __spread(addFirstGap()));
        pages.push.apply(pages, __spread(addLastGap()));
    };
    /**
     * Add links to the first and last page, if configured to do so.
     *
     * @param pages The list of page items that is used to amend
     * @param pageCount The total number of pages
     *
     */
    PaginationBuilder.prototype.addFirstLast = function (pages, pageCount) {
        if (this.config.addFirst && pages[0].number !== 0) {
            pages.unshift({
                number: 0,
                label: '1',
                type: PaginationItemType.FIRST,
            });
        }
        if (this.config.addLast &&
            pages[pages.length - 1].number !== pageCount - 1) {
            pages.push({
                number: pageCount - 1,
                label: String(pageCount),
                type: PaginationItemType.LAST,
            });
        }
    };
    /**
     * Add links to the start, previous, next and last page, if configured to do so.
     * The order of the links can be configured by using the {@link PaginationConfig},
     * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).
     * The `PaginationNavigationPosition` allows for 3 flavours:
     *
     * - by default the pagination starts with start and previous and ends with the next and end links
     * - BEFORE – all navigation links are added in the front of the pagination list
     * - AFTER – all navigation links are pushed to the end of the pagination list
     *
     * @param pages The list of page items that is used to amend
     * @param pageCount The total number of pages
     * @param current The current page number, 0-index based
     *
     */
    PaginationBuilder.prototype.addNavigation = function (pages, pageCount, current) {
        var before = this.getBeforeLinks(current);
        var after = this.getAfter(pageCount, current);
        var pos = this.config.navigationPosition;
        if (!pos || pos === PaginationNavigationPosition.ASIDE) {
            pages.unshift.apply(pages, __spread(before));
            pages.push.apply(pages, __spread(after));
        }
        else {
            if (pos === PaginationNavigationPosition.BEFORE) {
                pages.unshift.apply(pages, __spread(before, after));
            }
            if (pos === PaginationNavigationPosition.AFTER) {
                pages.push.apply(pages, __spread(before, after));
            }
        }
    };
    /**
     * Returns the start and previous links, if applicable.
     */
    PaginationBuilder.prototype.getBeforeLinks = function (current) {
        var _this = this;
        var list = [];
        if (this.config.addStart) {
            var start = function () {
                return Object.assign({
                    label: _this.config.startLabel,
                    type: PaginationItemType.START,
                }, current > 0 ? { number: 0 } : null);
            };
            list.push(start());
        }
        if (this.config.addPrevious) {
            var previous = function () {
                return Object.assign({
                    label: _this.config.previousLabel,
                    type: PaginationItemType.PREVIOUS,
                }, current > 0 ? { number: current - 1 } : null);
            };
            list.push(previous());
        }
        return list;
    };
    /**
     * Returns the next and end links, if applicable.
     */
    PaginationBuilder.prototype.getAfter = function (pageCount, current) {
        var _this = this;
        var list = [];
        if (this.config.addNext) {
            var next = function () {
                return Object.assign({
                    label: _this.config.nextLabel,
                    type: PaginationItemType.NEXT,
                }, current < pageCount - 1 ? { number: current + 1 } : null);
            };
            list.push(next());
        }
        if (this.config.addEnd) {
            var end = function () {
                return Object.assign({
                    label: _this.config.endLabel,
                    type: PaginationItemType.END,
                }, current < pageCount - 1 ? { number: pageCount - 1 } : null);
            };
            list.push(end());
        }
        return list;
    };
    /**
     * Resolves the first page of the range we need to build.
     * This is the page that is leading up to the range of the
     * current page.
     *
     * @param pageCount The total number of pages.
     * @param current The current page number, 0-index based.
     */
    PaginationBuilder.prototype.getStartOfRange = function (pageCount, current) {
        var count = this.config.rangeCount - 1;
        // the least number of pages before and after the current
        var delta = Math.round(count / 2);
        // ensure that we start with at least the first page
        var minStart = Math.max(0, current - delta);
        // ensures that we start with at least 1 and do not pass the last range
        var maxStart = Math.max(0, pageCount - count - 1);
        // ensure that we get at least a full range at the end
        return Math.min(maxStart, minStart);
    };
    Object.defineProperty(PaginationBuilder.prototype, "config", {
        get: function () {
            return Object.assign(FALLBACK_PAGINATION_OPTIONS, this.paginationConfig.pagination);
        },
        enumerable: true,
        configurable: true
    });
    PaginationBuilder.ctorParameters = function () { return [
        { type: PaginationConfig }
    ]; };
    PaginationBuilder.ɵprov = i0.ɵɵdefineInjectable({ factory: function PaginationBuilder_Factory() { return new PaginationBuilder(i0.ɵɵinject(i1.PaginationConfig)); }, token: PaginationBuilder, providedIn: "root" });
    PaginationBuilder = __decorate([
        Injectable({
            providedIn: 'root',
        })
    ], PaginationBuilder);
    return PaginationBuilder;
}());
export { PaginationBuilder };
//# sourceMappingURL=data:application/json;base64,