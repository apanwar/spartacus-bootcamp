import { __decorate, __param } from "tslib";
import { Inject, Injectable } from '@angular/core';
import { Config } from '@spartacus/core';
import { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "../../../layout/breakpoint/breakpoint.service";
/**
 * Service which generates media URLs. It leverage the MediaContainer and MediaFormats so
 * that URLs and sizes are generated for the same media. This helps to improve performance
 * across difference devices and layouts.
 *
 * Media formats are optional, but highly recommended. The format will help the browser to
 * identify the right media for the right experience.
 *
 * The MediaService will generate absolute URLs in case relative URLs are provided for the Media.
 * The baseUrl is read from the `occConfig.backend.media.baseUrl` or
 * `occConfig.backend.occ.baseUrl`.
 */
var MediaService = /** @class */ (function () {
    function MediaService(config, 
    /**
     * The BreakpointService is no longer used in version 2.0 as the different size formats are
     * driven by configuration only. There's however a change that this service will play a role
     * in the near future, which is why we keep the constructor as-is.
     */
    breakpointService) {
        this.config = config;
        this.breakpointService = breakpointService;
    }
    /**
     * Returns a `Media` object with the main media (`src`) and various media (`src`)
     * for specific formats.
     */
    MediaService.prototype.getMedia = function (mediaContainer, format, alt) {
        if (!mediaContainer) {
            return;
        }
        var mainMedia = mediaContainer.url
            ? mediaContainer
            : this.resolveMedia(mediaContainer, format);
        return {
            src: this.resolveAbsoluteUrl(mainMedia === null || mainMedia === void 0 ? void 0 : mainMedia.url),
            alt: alt || (mainMedia === null || mainMedia === void 0 ? void 0 : mainMedia.altText),
            srcset: this.resolveSrcSet(mediaContainer),
        };
    };
    Object.defineProperty(MediaService.prototype, "sortedFormats", {
        /**
         * Creates the media formats in a logical sorted order. The map contains the
         * format key and the format size information. We do this only once for performance
         * benefits.
         */
        get: function () {
            var _this = this;
            if (!this._sortedFormats) {
                this._sortedFormats = Object.keys(this.config.mediaFormats)
                    .map(function (key) { return ({
                    code: key,
                    size: _this.config.mediaFormats[key],
                }); })
                    .sort(function (a, b) { return (a.size.width > b.size.width ? 1 : -1); });
            }
            return this._sortedFormats;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaService.prototype, "reversedFormats", {
        /**
         * Creates the media formats in a reversed sorted order.
         */
        get: function () {
            if (!this._reversedFormats) {
                this._reversedFormats = this.sortedFormats.slice().reverse();
            }
            return this._reversedFormats;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Resolves the right media for the given format. The fo
     */
    MediaService.prototype.resolveMedia = function (media, format) {
        return media[this.resolveFormat(media, format)];
    };
    /**
     * Validates the format against the given mediaContainer. If there is no format available,
     * or if the mediaContainer doesn't contain a media for the given media, the most optimal
     * format is resolved. If even that is not possible, the first format is returned.
     */
    MediaService.prototype.resolveFormat = function (mediaContainer, format) {
        if (format && mediaContainer[format]) {
            return format;
        }
        return (this.resolveBestFormat(mediaContainer) || Object.keys(mediaContainer)[0]);
    };
    /**
     * Returns the media format code with the best size.
     */
    MediaService.prototype.resolveBestFormat = function (media) {
        var _a;
        return (_a = this.reversedFormats.find(function (format) {
            return media.hasOwnProperty(format.code);
        })) === null || _a === void 0 ? void 0 : _a.code;
    };
    /**
     * Returns a set of media for the available media formats. Additionally, the congiured media
     * format width is added to the srcset, so that browsers can select the appropriate media.
     */
    MediaService.prototype.resolveSrcSet = function (media) {
        var _this = this;
        if (!media) {
            return undefined;
        }
        var srcset = this.sortedFormats.reduce(function (set, format) {
            if (!!media[format.code]) {
                if (set) {
                    set += ', ';
                }
                set += _this.resolveAbsoluteUrl(media[format.code].url) + " " + format.size.width + "w";
            }
            return set;
        }, '');
        return srcset === '' ? undefined : srcset;
    };
    /**
     * Resolves the absolute URL for the given url. In most cases, this URL represents
     * the relative URL on the backend. In that case, we prefix the url with the baseUrl.
     */
    MediaService.prototype.resolveAbsoluteUrl = function (url) {
        if (!url) {
            return null;
        }
        return url.startsWith('http') ? url : this.getBaseUrl() + url;
    };
    /**
     * The base URL is either driven by a specific `backend.media.baseUrl`, or by the
     * `backend.occ.baseUrl`.
     *
     * The `backend.media.baseUrl` can be used to load media from a different location.
     *
     * In Commerce Cloud, a differnt location could mean a different "aspect".
     */
    MediaService.prototype.getBaseUrl = function () {
        return (this.config.backend.media.baseUrl ||
            this.config.backend.occ.baseUrl ||
            '');
    };
    MediaService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [Config,] }] },
        { type: BreakpointService }
    ]; };
    MediaService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MediaService_Factory() { return new MediaService(i0.ɵɵinject(i1.Config), i0.ɵɵinject(i2.BreakpointService)); }, token: MediaService, providedIn: "root" });
    MediaService = __decorate([
        Injectable({
            providedIn: 'root',
        }),
        __param(0, Inject(Config))
    ], MediaService);
    return MediaService;
}());
export { MediaService };
//# sourceMappingURL=data:application/json;base64,