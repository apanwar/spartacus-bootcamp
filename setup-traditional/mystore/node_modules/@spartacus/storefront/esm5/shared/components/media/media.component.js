import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, } from '@angular/core';
import { MediaService } from './media.service';
var MediaComponent = /** @class */ (function () {
    function MediaComponent(mediaService) {
        this.mediaService = mediaService;
        /**
         * Once the media is loaded, we emit an event.
         */
        this.loaded = new EventEmitter();
        /**
         * The `cx-media` component has an `is-initialized` class as long as the
         * media is being initialized.
         */
        this.isInitialized = false;
        /**
         * The `cx-media` component has a `is-loading` class as long as the
         * media is loaded. Wehn the media is loaded, the `is-initialized` class
         * is added.
         */
        this.isLoading = true;
        /**
         * When there's no media provided for the content, or in case an error
         * happened during loading, we add the `is-missing` class. Visual effects
         * can be controlled by CSS.
         */
        this.isMissing = false;
    }
    MediaComponent.prototype.ngOnChanges = function () {
        this.create();
    };
    /**
     * Creates the `Media` object
     */
    MediaComponent.prototype.create = function () {
        var _a;
        this.media = this.mediaService.getMedia(this.container, this.format, this.alt);
        if (!((_a = this.media) === null || _a === void 0 ? void 0 : _a.src)) {
            this.handleMissing();
        }
    };
    /**
     * This handler is called from the UI when the image is loaded.
     */
    MediaComponent.prototype.loadHandler = function () {
        this.isLoading = false;
        this.isInitialized = true;
        this.isMissing = false;
        this.loaded.emit(true);
    };
    /**
     * Whenever an error happens during load, we mark the component
     * with css classes to have a missing media.
     */
    MediaComponent.prototype.errorHandler = function () {
        this.handleMissing();
    };
    MediaComponent.prototype.handleMissing = function () {
        this.isLoading = false;
        this.isInitialized = true;
        this.isMissing = true;
        this.loaded.emit(false);
    };
    MediaComponent.ctorParameters = function () { return [
        { type: MediaService }
    ]; };
    __decorate([
        Input()
    ], MediaComponent.prototype, "container", void 0);
    __decorate([
        Input()
    ], MediaComponent.prototype, "format", void 0);
    __decorate([
        Input()
    ], MediaComponent.prototype, "alt", void 0);
    __decorate([
        Output()
    ], MediaComponent.prototype, "loaded", void 0);
    __decorate([
        HostBinding('class.is-initialized')
    ], MediaComponent.prototype, "isInitialized", void 0);
    __decorate([
        HostBinding('class.is-loading')
    ], MediaComponent.prototype, "isLoading", void 0);
    __decorate([
        HostBinding('class.is-missing')
    ], MediaComponent.prototype, "isMissing", void 0);
    MediaComponent = __decorate([
        Component({
            selector: 'cx-media',
            template: "<img\n  *ngIf=\"media?.src\"\n  [attr.src]=\"media.src\"\n  [attr.srcset]=\"media.srcset\"\n  [attr.alt]=\"media.alt\"\n  (load)=\"loadHandler()\"\n  (error)=\"errorHandler()\"\n/>\n",
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], MediaComponent);
    return MediaComponent;
}());
export { MediaComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVkaWEuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9zdG9yZWZyb250LyIsInNvdXJjZXMiOlsic2hhcmVkL2NvbXBvbmVudHMvbWVkaWEvbWVkaWEuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxZQUFZLEVBQ1osV0FBVyxFQUNYLEtBQUssRUFFTCxNQUFNLEdBQ1AsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBTy9DO0lBbURFLHdCQUFzQixZQUEwQjtRQUExQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQS9CaEQ7O1dBRUc7UUFDTyxXQUFNLEdBQTBCLElBQUksWUFBWSxFQUFXLENBQUM7UUFRdEU7OztXQUdHO1FBQ2tDLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBRTNEOzs7O1dBSUc7UUFDOEIsY0FBUyxHQUFHLElBQUksQ0FBQztRQUVsRDs7OztXQUlHO1FBQzhCLGNBQVMsR0FBRyxLQUFLLENBQUM7SUFFQSxDQUFDO0lBRXBELG9DQUFXLEdBQVg7UUFDRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVEOztPQUVHO0lBQ08sK0JBQU0sR0FBaEI7O1FBQ0UsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FDckMsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLENBQUMsTUFBTSxFQUNYLElBQUksQ0FBQyxHQUFHLENBQ1QsQ0FBQztRQUNGLElBQUksUUFBQyxJQUFJLENBQUMsS0FBSywwQ0FBRSxHQUFHLENBQUEsRUFBRTtZQUNwQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDdEI7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxvQ0FBVyxHQUFYO1FBQ0UsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDMUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVEOzs7T0FHRztJQUNILHFDQUFZLEdBQVo7UUFDRSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVTLHNDQUFhLEdBQXZCO1FBQ0UsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDMUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUIsQ0FBQzs7Z0JBM0NtQyxZQUFZOztJQTVDdkM7UUFBUixLQUFLLEVBQUU7cURBQTJCO0lBSzFCO1FBQVIsS0FBSyxFQUFFO2tEQUFnQjtJQU1mO1FBQVIsS0FBSyxFQUFFOytDQUFhO0lBS1g7UUFBVCxNQUFNLEVBQUU7a0RBQTZEO0lBWWpDO1FBQXBDLFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQzt5REFBdUI7SUFPMUI7UUFBaEMsV0FBVyxDQUFDLGtCQUFrQixDQUFDO3FEQUFrQjtJQU9qQjtRQUFoQyxXQUFXLENBQUMsa0JBQWtCLENBQUM7cURBQW1CO0lBakR4QyxjQUFjO1FBTDFCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxVQUFVO1lBQ3BCLGtNQUFxQztZQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtTQUNoRCxDQUFDO09BQ1csY0FBYyxDQStGMUI7SUFBRCxxQkFBQztDQUFBLEFBL0ZELElBK0ZDO1NBL0ZZLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxyXG4gIENvbXBvbmVudCxcclxuICBFdmVudEVtaXR0ZXIsXHJcbiAgSG9zdEJpbmRpbmcsXHJcbiAgSW5wdXQsXHJcbiAgT25DaGFuZ2VzLFxyXG4gIE91dHB1dCxcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTWVkaWEsIE1lZGlhQ29udGFpbmVyIH0gZnJvbSAnLi9tZWRpYS5tb2RlbCc7XHJcbmltcG9ydCB7IE1lZGlhU2VydmljZSB9IGZyb20gJy4vbWVkaWEuc2VydmljZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2N4LW1lZGlhJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vbWVkaWEuY29tcG9uZW50Lmh0bWwnLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTWVkaWFDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBtZWRpYSBjb250YWluZXIgY2FuIGhvbGQgbXVsdGlwbGUgbWVkaWEgaXRlbXMsIHNvIHRoYXRcclxuICAgKiBhIHNwZWNpZmljIG1lZGlhIChieSBmb3JtYXQpIGNhbiBiZSB1c2VkIG9yIG11bHRpcGxlIG1lZGlhXHJcbiAgICogY2FuIGJlIHByb3ZpZGVkIGluIGEgYHNyY3NldGAgc28gdGhlIGJyb3dzZXIgd2lsbCBmaWd1cmUgb3V0XHJcbiAgICogdGhlIGJlc3QgbWVkaWEgZm9yIHRoZSBkZXZpY2UuXHJcbiAgICovXHJcbiAgQElucHV0KCkgY29udGFpbmVyOiBNZWRpYUNvbnRhaW5lcjtcclxuXHJcbiAgLyoqXHJcbiAgICogaWYgYSBtZWRpYSBmb3JtYXQgaXMgZ2l2ZW4sIGEgbWVkaWEgZm9yIHRoZSBnaXZlbiBmb3JtYXQgd2lsbCBiZSByZW5kZXJlZFxyXG4gICAqL1xyXG4gIEBJbnB1dCgpIGZvcm1hdDogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBBIHNwZWNpZmljIGFsdCB0ZXh0IGZvciBhbiBpbWFnZSwgd2hpY2ggb3ZlcnJ1bGVzIHRoZSBhbHQgdGV4dFxyXG4gICAqIGZyb20gdGhlIGNvbnRhaW5lciBkYXRhLlxyXG4gICAqL1xyXG4gIEBJbnB1dCgpIGFsdDogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBPbmNlIHRoZSBtZWRpYSBpcyBsb2FkZWQsIHdlIGVtaXQgYW4gZXZlbnQuXHJcbiAgICovXHJcbiAgQE91dHB1dCgpIGxvYWRlZDogRXZlbnRFbWl0dGVyPEJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcjxCb29sZWFuPigpO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgbWVkaWEgY29udGFpbnMgdGhlIGluZm8gZm9yIHRoZSBVSSB0byBjcmVhdGUgdGhlIGltYWdlLiBUaGlzIG1lZGlhXHJcbiAgICogb2JqZWN0IG1pZ2h0IGNvbnRhaW4gbW9yZSBpbmZvIG9uY2Ugb3RoZXIgbWVkaWEgdHlwZXMgKGkuZS4gdmlkZW8pIGlzIHN1cHBvcnRlZC5cclxuICAgKi9cclxuICBtZWRpYTogTWVkaWE7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgY3gtbWVkaWFgIGNvbXBvbmVudCBoYXMgYW4gYGlzLWluaXRpYWxpemVkYCBjbGFzcyBhcyBsb25nIGFzIHRoZVxyXG4gICAqIG1lZGlhIGlzIGJlaW5nIGluaXRpYWxpemVkLlxyXG4gICAqL1xyXG4gIEBIb3N0QmluZGluZygnY2xhc3MuaXMtaW5pdGlhbGl6ZWQnKSBpc0luaXRpYWxpemVkID0gZmFsc2U7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgY3gtbWVkaWFgIGNvbXBvbmVudCBoYXMgYSBgaXMtbG9hZGluZ2AgY2xhc3MgYXMgbG9uZyBhcyB0aGVcclxuICAgKiBtZWRpYSBpcyBsb2FkZWQuIFdlaG4gdGhlIG1lZGlhIGlzIGxvYWRlZCwgdGhlIGBpcy1pbml0aWFsaXplZGAgY2xhc3NcclxuICAgKiBpcyBhZGRlZC5cclxuICAgKi9cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlzLWxvYWRpbmcnKSBpc0xvYWRpbmcgPSB0cnVlO1xyXG5cclxuICAvKipcclxuICAgKiBXaGVuIHRoZXJlJ3Mgbm8gbWVkaWEgcHJvdmlkZWQgZm9yIHRoZSBjb250ZW50LCBvciBpbiBjYXNlIGFuIGVycm9yXHJcbiAgICogaGFwcGVuZWQgZHVyaW5nIGxvYWRpbmcsIHdlIGFkZCB0aGUgYGlzLW1pc3NpbmdgIGNsYXNzLiBWaXN1YWwgZWZmZWN0c1xyXG4gICAqIGNhbiBiZSBjb250cm9sbGVkIGJ5IENTUy5cclxuICAgKi9cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlzLW1pc3NpbmcnKSBpc01pc3NpbmcgPSBmYWxzZTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIG1lZGlhU2VydmljZTogTWVkaWFTZXJ2aWNlKSB7fVxyXG5cclxuICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcclxuICAgIHRoaXMuY3JlYXRlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIHRoZSBgTWVkaWFgIG9iamVjdFxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBjcmVhdGUoKTogdm9pZCB7XHJcbiAgICB0aGlzLm1lZGlhID0gdGhpcy5tZWRpYVNlcnZpY2UuZ2V0TWVkaWEoXHJcbiAgICAgIHRoaXMuY29udGFpbmVyLFxyXG4gICAgICB0aGlzLmZvcm1hdCxcclxuICAgICAgdGhpcy5hbHRcclxuICAgICk7XHJcbiAgICBpZiAoIXRoaXMubWVkaWE/LnNyYykge1xyXG4gICAgICB0aGlzLmhhbmRsZU1pc3NpbmcoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgaGFuZGxlciBpcyBjYWxsZWQgZnJvbSB0aGUgVUkgd2hlbiB0aGUgaW1hZ2UgaXMgbG9hZGVkLlxyXG4gICAqL1xyXG4gIGxvYWRIYW5kbGVyKCk6IHZvaWQge1xyXG4gICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcclxuICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IHRydWU7XHJcbiAgICB0aGlzLmlzTWlzc2luZyA9IGZhbHNlO1xyXG4gICAgdGhpcy5sb2FkZWQuZW1pdCh0cnVlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFdoZW5ldmVyIGFuIGVycm9yIGhhcHBlbnMgZHVyaW5nIGxvYWQsIHdlIG1hcmsgdGhlIGNvbXBvbmVudFxyXG4gICAqIHdpdGggY3NzIGNsYXNzZXMgdG8gaGF2ZSBhIG1pc3NpbmcgbWVkaWEuXHJcbiAgICovXHJcbiAgZXJyb3JIYW5kbGVyKCk6IHZvaWQge1xyXG4gICAgdGhpcy5oYW5kbGVNaXNzaW5nKCk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgaGFuZGxlTWlzc2luZygpIHtcclxuICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XHJcbiAgICB0aGlzLmlzSW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG4gICAgdGhpcy5pc01pc3NpbmcgPSB0cnVlO1xyXG4gICAgdGhpcy5sb2FkZWQuZW1pdChmYWxzZSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==