import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, Input, isDevMode, OnInit, TemplateRef, } from '@angular/core';
import { tap } from 'rxjs/operators';
import { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';
import { CarouselService } from './carousel.service';
/**
 * Generic carousel component that can be used to render any carousel items,
 * such as products, images, banners, or any component. Carousel items are
 * rendered in so-called carousel slides, and the previous/next buttons as well as
 * the indicator-buttons can used to navigate the slides.
 *
 * The component uses an array of Observables (`items$`) as an input, to allow
 * for lazy loading of items.
 *
 * The number of items per slide is calculated with the `itemWidth`, which can given
 * in pixels or percentage.
 *
 * To allow for flexible rendering of items, the rendering is delegated to the
 * given `template`. This allows for maximum flexibility.
 */
var CarouselComponent = /** @class */ (function () {
    function CarouselComponent(el, service) {
        this.el = el;
        this.service = service;
        /**
         * Specifies the minimum size of the carousel item, either in px or %.
         * This value is used for the calculation of numbers per carousel, so that
         * the number of carousel items is dynamic. The calculation uses the `itemWidth`
         * and the host element `clientWidth`, so that the carousel is reusable in
         * different layouts (for example in a 50% grid).
         */
        this.itemWidth = '300px';
        /**
         * Indicates whether the visual indicators are used.
         */
        this.hideIndicators = false;
        this.indicatorIcon = ICON_TYPE.CIRCLE;
        this.previousIcon = ICON_TYPE.CARET_LEFT;
        this.nextIcon = ICON_TYPE.CARET_RIGHT;
    }
    Object.defineProperty(CarouselComponent.prototype, "setItems", {
        set: function (inputItems) {
            this.items = inputItems;
            //Reset slider when changing products
            this.activeSlide = 0;
        },
        enumerable: true,
        configurable: true
    });
    CarouselComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.template && isDevMode()) {
            console.error('No template reference provided to render the carousel items for the `cx-carousel`');
            return;
        }
        this.size$ = this.service
            .getItemsPerSlide(this.el.nativeElement, this.itemWidth)
            .pipe(tap(function () { return (_this.activeSlide = 0); }));
    };
    CarouselComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: CarouselService }
    ]; };
    __decorate([
        Input()
    ], CarouselComponent.prototype, "title", void 0);
    __decorate([
        Input('items')
    ], CarouselComponent.prototype, "setItems", null);
    __decorate([
        Input()
    ], CarouselComponent.prototype, "template", void 0);
    __decorate([
        Input()
    ], CarouselComponent.prototype, "itemWidth", void 0);
    __decorate([
        Input()
    ], CarouselComponent.prototype, "hideIndicators", void 0);
    __decorate([
        Input()
    ], CarouselComponent.prototype, "indicatorIcon", void 0);
    __decorate([
        Input()
    ], CarouselComponent.prototype, "previousIcon", void 0);
    __decorate([
        Input()
    ], CarouselComponent.prototype, "nextIcon", void 0);
    CarouselComponent = __decorate([
        Component({
            selector: 'cx-carousel',
            template: "<ng-container *ngIf=\"items?.length > 0 && (size$ | async) as size\">\r\n  <h3 *ngIf=\"title\">{{ title }}</h3>\r\n\r\n  <div class=\"carousel-panel\" [ngClass]=\"'size-' + size\">\r\n    <button\r\n      *ngIf=\"size < items.length\"\r\n      class=\"previous\"\r\n      (click)=\"activeSlide = activeSlide - size\"\r\n      [disabled]=\"activeSlide === 0\"\r\n    >\r\n      <cx-icon [type]=\"previousIcon\"></cx-icon>\r\n    </button>\r\n\r\n    <div class=\"slides\">\r\n      <ng-container *ngFor=\"let _ of items; let i = index\">\r\n        <div\r\n          class=\"slide\"\r\n          *ngIf=\"i % size === 0\"\r\n          [class.active]=\"i === activeSlide\"\r\n        >\r\n          <ng-container\r\n            *ngFor=\"let item of items | slice: i:i + size; let j = index\"\r\n          >\r\n            <div\r\n              *ngIf=\"item | async as data\"\r\n              class=\"item\"\r\n              [class.active]=\"i === activeSlide\"\r\n            >\r\n              <ng-container\r\n                *ngTemplateOutlet=\"template; context: { item: data }\"\r\n              ></ng-container>\r\n            </div>\r\n          </ng-container>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n\r\n    <button\r\n      *ngIf=\"size < items.length\"\r\n      class=\"next\"\r\n      (click)=\"activeSlide = activeSlide + size\"\r\n      tabindex=\"-1\"\r\n      [disabled]=\"activeSlide > items.length - size - 1\"\r\n    >\r\n      <cx-icon [type]=\"nextIcon\"></cx-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <div *ngIf=\"!hideIndicators && size < items.length\" class=\"indicators\">\r\n    <ng-container *ngFor=\"let _ of items; let i = index\">\r\n      <button\r\n        *ngIf=\"i % size === 0\"\r\n        (focus)=\"activeSlide = i\"\r\n        [disabled]=\"i === activeSlide\"\r\n        tabindex=\"-1\"\r\n      >\r\n        <cx-icon [type]=\"indicatorIcon\"></cx-icon>\r\n      </button>\r\n    </ng-container>\r\n  </div>\r\n</ng-container>\r\n",
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], CarouselComponent);
    return CarouselComponent;
}());
export { CarouselComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9zdG9yZWZyb250LyIsInNvdXJjZXMiOlsic2hhcmVkL2NvbXBvbmVudHMvY2Fyb3VzZWwvY2Fyb3VzZWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsS0FBSyxFQUNMLFNBQVMsRUFDVCxNQUFNLEVBQ04sV0FBVyxHQUNaLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDekUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXJEOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBTUg7SUE2Q0UsMkJBQXNCLEVBQWMsRUFBWSxPQUF3QjtRQUFsRCxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVksWUFBTyxHQUFQLE9BQU8sQ0FBaUI7UUFyQnhFOzs7Ozs7V0FNRztRQUNNLGNBQVMsR0FBRyxPQUFPLENBQUM7UUFFN0I7O1dBRUc7UUFDTSxtQkFBYyxHQUFHLEtBQUssQ0FBQztRQUV2QixrQkFBYSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFDakMsaUJBQVksR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDO1FBQ3BDLGFBQVEsR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFDO0lBS2lDLENBQUM7SUFqQzVFLHNCQUFJLHVDQUFRO2FBQVosVUFBYSxVQUE2QjtZQUN4QyxJQUFJLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQztZQUN4QixxQ0FBcUM7WUFDckMsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFDdkIsQ0FBQzs7O09BQUE7SUErQkQsb0NBQVEsR0FBUjtRQUFBLGlCQVVDO1FBVEMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksU0FBUyxFQUFFLEVBQUU7WUFDakMsT0FBTyxDQUFDLEtBQUssQ0FDWCxtRkFBbUYsQ0FDcEYsQ0FBQztZQUNGLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU87YUFDdEIsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQzthQUN2RCxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQU0sT0FBQSxDQUFDLEtBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQXRCLENBQXNCLENBQUMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7O2dCQVp5QixVQUFVO2dCQUFxQixlQUFlOztJQXpDL0Q7UUFBUixLQUFLLEVBQUU7b0RBQWU7SUFRdkI7UUFEQyxLQUFLLENBQUMsT0FBTyxDQUFDO3FEQUtkO0lBTVE7UUFBUixLQUFLLEVBQUU7dURBQTRCO0lBUzNCO1FBQVIsS0FBSyxFQUFFO3dEQUFxQjtJQUtwQjtRQUFSLEtBQUssRUFBRTs2REFBd0I7SUFFdkI7UUFBUixLQUFLLEVBQUU7NERBQWtDO0lBQ2pDO1FBQVIsS0FBSyxFQUFFOzJEQUFxQztJQUNwQztRQUFSLEtBQUssRUFBRTt1REFBa0M7SUF4Qy9CLGlCQUFpQjtRQUw3QixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsYUFBYTtZQUN2QiwrOERBQXdDO1lBQ3hDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO1NBQ2hELENBQUM7T0FDVyxpQkFBaUIsQ0EwRDdCO0lBQUQsd0JBQUM7Q0FBQSxBQTFERCxJQTBEQztTQTFEWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxyXG4gIENvbXBvbmVudCxcclxuICBFbGVtZW50UmVmLFxyXG4gIElucHV0LFxyXG4gIGlzRGV2TW9kZSxcclxuICBPbkluaXQsXHJcbiAgVGVtcGxhdGVSZWYsXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBJQ09OX1RZUEUgfSBmcm9tICcuLi8uLi8uLi9jbXMtY29tcG9uZW50cy9taXNjL2ljb24vaWNvbi5tb2RlbCc7XHJcbmltcG9ydCB7IENhcm91c2VsU2VydmljZSB9IGZyb20gJy4vY2Fyb3VzZWwuc2VydmljZSc7XHJcblxyXG4vKipcclxuICogR2VuZXJpYyBjYXJvdXNlbCBjb21wb25lbnQgdGhhdCBjYW4gYmUgdXNlZCB0byByZW5kZXIgYW55IGNhcm91c2VsIGl0ZW1zLFxyXG4gKiBzdWNoIGFzIHByb2R1Y3RzLCBpbWFnZXMsIGJhbm5lcnMsIG9yIGFueSBjb21wb25lbnQuIENhcm91c2VsIGl0ZW1zIGFyZVxyXG4gKiByZW5kZXJlZCBpbiBzby1jYWxsZWQgY2Fyb3VzZWwgc2xpZGVzLCBhbmQgdGhlIHByZXZpb3VzL25leHQgYnV0dG9ucyBhcyB3ZWxsIGFzXHJcbiAqIHRoZSBpbmRpY2F0b3ItYnV0dG9ucyBjYW4gdXNlZCB0byBuYXZpZ2F0ZSB0aGUgc2xpZGVzLlxyXG4gKlxyXG4gKiBUaGUgY29tcG9uZW50IHVzZXMgYW4gYXJyYXkgb2YgT2JzZXJ2YWJsZXMgKGBpdGVtcyRgKSBhcyBhbiBpbnB1dCwgdG8gYWxsb3dcclxuICogZm9yIGxhenkgbG9hZGluZyBvZiBpdGVtcy5cclxuICpcclxuICogVGhlIG51bWJlciBvZiBpdGVtcyBwZXIgc2xpZGUgaXMgY2FsY3VsYXRlZCB3aXRoIHRoZSBgaXRlbVdpZHRoYCwgd2hpY2ggY2FuIGdpdmVuXHJcbiAqIGluIHBpeGVscyBvciBwZXJjZW50YWdlLlxyXG4gKlxyXG4gKiBUbyBhbGxvdyBmb3IgZmxleGlibGUgcmVuZGVyaW5nIG9mIGl0ZW1zLCB0aGUgcmVuZGVyaW5nIGlzIGRlbGVnYXRlZCB0byB0aGVcclxuICogZ2l2ZW4gYHRlbXBsYXRlYC4gVGhpcyBhbGxvd3MgZm9yIG1heGltdW0gZmxleGliaWxpdHkuXHJcbiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2N4LWNhcm91c2VsJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vY2Fyb3VzZWwuY29tcG9uZW50Lmh0bWwnLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2Fyb3VzZWxDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0aXRsZSBpcyByZW5kZXJlZCBhcyB0aGUgY2Fyb3VzZWwgaGVhZGluZy5cclxuICAgKi9cclxuICBASW5wdXQoKSB0aXRsZTogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgaXRlbXMkIHJlcHJlc2VudCB0aGUgY2Fyb3VzZWwgaXRlbXMuIFRoZSBpdGVtcyQgYXJlXHJcbiAgICogb2JzZXJ2YWJsZXMgc28gdGhhdCB0aGUgaXRlbXMgY2FuIGJlIGxvYWRlZCBvbiBkZW1hbmQuXHJcbiAgICovXHJcbiAgaXRlbXM6IE9ic2VydmFibGU8YW55PltdO1xyXG4gIEBJbnB1dCgnaXRlbXMnKVxyXG4gIHNldCBzZXRJdGVtcyhpbnB1dEl0ZW1zOiBPYnNlcnZhYmxlPGFueT5bXSkge1xyXG4gICAgdGhpcy5pdGVtcyA9IGlucHV0SXRlbXM7XHJcbiAgICAvL1Jlc2V0IHNsaWRlciB3aGVuIGNoYW5naW5nIHByb2R1Y3RzXHJcbiAgICB0aGlzLmFjdGl2ZVNsaWRlID0gMDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSB0ZW1wbGF0ZSBpcyByZW5kZXJlZCBmb3IgZWFjaCBpdGVtLCBzbyB0aGF0IHRoZSBhY3R1YWxcclxuICAgKiB2aWV3IGNhbiBiZSBnaXZlbiBieSB0aGUgY29tcG9lbnQgdGhhdCB1c2VzIHRoZSBgQ2Fyb3VzZWxDb21wb25lbnRgLlxyXG4gICAqL1xyXG4gIEBJbnB1dCgpIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG5cclxuICAvKipcclxuICAgKiBTcGVjaWZpZXMgdGhlIG1pbmltdW0gc2l6ZSBvZiB0aGUgY2Fyb3VzZWwgaXRlbSwgZWl0aGVyIGluIHB4IG9yICUuXHJcbiAgICogVGhpcyB2YWx1ZSBpcyB1c2VkIGZvciB0aGUgY2FsY3VsYXRpb24gb2YgbnVtYmVycyBwZXIgY2Fyb3VzZWwsIHNvIHRoYXRcclxuICAgKiB0aGUgbnVtYmVyIG9mIGNhcm91c2VsIGl0ZW1zIGlzIGR5bmFtaWMuIFRoZSBjYWxjdWxhdGlvbiB1c2VzIHRoZSBgaXRlbVdpZHRoYFxyXG4gICAqIGFuZCB0aGUgaG9zdCBlbGVtZW50IGBjbGllbnRXaWR0aGAsIHNvIHRoYXQgdGhlIGNhcm91c2VsIGlzIHJldXNhYmxlIGluXHJcbiAgICogZGlmZmVyZW50IGxheW91dHMgKGZvciBleGFtcGxlIGluIGEgNTAlIGdyaWQpLlxyXG4gICAqL1xyXG4gIEBJbnB1dCgpIGl0ZW1XaWR0aCA9ICczMDBweCc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSB2aXN1YWwgaW5kaWNhdG9ycyBhcmUgdXNlZC5cclxuICAgKi9cclxuICBASW5wdXQoKSBoaWRlSW5kaWNhdG9ycyA9IGZhbHNlO1xyXG5cclxuICBASW5wdXQoKSBpbmRpY2F0b3JJY29uID0gSUNPTl9UWVBFLkNJUkNMRTtcclxuICBASW5wdXQoKSBwcmV2aW91c0ljb24gPSBJQ09OX1RZUEUuQ0FSRVRfTEVGVDtcclxuICBASW5wdXQoKSBuZXh0SWNvbiA9IElDT05fVFlQRS5DQVJFVF9SSUdIVDtcclxuXHJcbiAgYWN0aXZlU2xpZGU6IG51bWJlcjtcclxuICBzaXplJDogT2JzZXJ2YWJsZTxudW1iZXI+O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZWw6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCBzZXJ2aWNlOiBDYXJvdXNlbFNlcnZpY2UpIHt9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgaWYgKCF0aGlzLnRlbXBsYXRlICYmIGlzRGV2TW9kZSgpKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgJ05vIHRlbXBsYXRlIHJlZmVyZW5jZSBwcm92aWRlZCB0byByZW5kZXIgdGhlIGNhcm91c2VsIGl0ZW1zIGZvciB0aGUgYGN4LWNhcm91c2VsYCdcclxuICAgICAgKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zaXplJCA9IHRoaXMuc2VydmljZVxyXG4gICAgICAuZ2V0SXRlbXNQZXJTbGlkZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIHRoaXMuaXRlbVdpZHRoKVxyXG4gICAgICAucGlwZSh0YXAoKCkgPT4gKHRoaXMuYWN0aXZlU2xpZGUgPSAwKSkpO1xyXG4gIH1cclxufVxyXG4iXX0=