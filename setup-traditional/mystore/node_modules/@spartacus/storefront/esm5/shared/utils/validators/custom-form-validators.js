import { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';
var CustomFormValidators = /** @class */ (function () {
    function CustomFormValidators() {
    }
    /**
     * Checks control's value with predefined email regexp
     *
     * NOTE: Use it as a control validator
     *
     * @static
     * @param {AbstractControl} control
     * @returns {(ValidationErrors | null)} Uses 'cxInvalidEmail' validator error
     * @memberof CustomFormValidators
     */
    CustomFormValidators.emailValidator = function (control) {
        var email = control.value;
        return !email.length || email.match(EMAIL_PATTERN)
            ? null
            : { cxInvalidEmail: true };
    };
    /**
     * Checks control's value with predefined password regexp
     *
     * NOTE: Use it as a control validator
     *
     * @static
     * @param {AbstractControl} control
     * @returns {(ValidationErrors | null)} Uses 'cxInvalidPassword' validator error
     * @memberof CustomFormValidators
     */
    CustomFormValidators.passwordValidator = function (control) {
        var password = control.value;
        return !password.length || password.match(PASSWORD_PATTERN)
            ? null
            : { cxInvalidPassword: true };
    };
    /**
     * Checks if control's value is between 1 and 5
     *
     * NOTE: Use it as a control validator
     *
     * @static
     * @param {AbstractControl} control
     * @returns {(ValidationErrors | null)} Uses 'cxStarRatingEmpty' validator error
     * @memberof CustomFormValidators
     */
    CustomFormValidators.starRatingEmpty = function (control) {
        var rating = control.value;
        return rating >= 1 && rating <= 5 ? null : { cxStarRatingEmpty: true };
    };
    /**
     * Checks if two password controls match
     *
     * NOTE: Use it as a form validator and pass password control names as parameters
     *
     * @static
     * @param {string} password First password control name
     * @param {string} passwordConfirmation Second password control name
     * @returns Uses 'cxPasswordsMustMatch' validator error
     * @memberof CustomFormValidators
     */
    CustomFormValidators.passwordsMustMatch = function (password, passwordConfirmation) {
        var validator = function (formGroup) {
            return controlsMustMatch(formGroup, password, passwordConfirmation, 'cxPasswordsMustMatch');
        };
        return validator;
    };
    /**
     * Checks if two email controls match
     *
     * NOTE: Use it as a form validator and pass email control names as parameters
     *
     * @static
     * @param {string} email First email control name
     * @param {string} emailConfirmation Second email control name
     * @returns Uses 'cxEmailsMustMatch' validator error
     * @memberof CustomFormValidators
     */
    CustomFormValidators.emailsMustMatch = function (email, emailConfirmation) {
        var validator = function (formGroup) {
            return controlsMustMatch(formGroup, email, emailConfirmation, 'cxEmailsMustMatch');
        };
        return validator;
    };
    return CustomFormValidators;
}());
export { CustomFormValidators };
/**
 * Generic function for validators, which checks if two passed controls match.
 *
 * @param formGroup
 * @param firstControlName First control to check
 * @param secondControlName Second control to check
 * @param errorName Error which will be returned by validator
 */
export function controlsMustMatch(formGroup, firstControlName, secondControlName, errorName) {
    var _a;
    var firstControl = formGroup.controls[firstControlName];
    var secondControl = formGroup.controls[secondControlName];
    if (secondControl.errors && !secondControl.errors[errorName]) {
        return;
    }
    secondControl.setErrors(firstControl.value !== secondControl.value ? (_a = {}, _a[errorName] = true, _a) : null);
}
//# sourceMappingURL=data:application/json;base64,