import { __decorate } from "tslib";
import { Directive, ElementRef, HostBinding, Input, OnInit, } from '@angular/core';
import { BaseFocusService } from './base-focus.service';
/**
 * Abstract directive that provides a common interface for all focus directives:
 * - Block Focus
 * - Persist Focus
 * - Escape Focus
 * - Auto Focus
 * - Tab Focus
 * - Trap Focus
 * - Lock Focus
 */
let BaseFocusDirective = class BaseFocusDirective {
    constructor(elementRef, service) {
        this.elementRef = elementRef;
        this.service = service;
        /**
         * A default config can be provided for each directive if a specific focus directive
         * is used directly. i.e. `<div cxAutoFocus></div>`
         */
        this.defaultConfig = {};
    }
    ngOnInit() {
        this.setDefaultConfiguration();
        this.requiredTabindex = -1;
    }
    /**
     * Override the (input) config if it undefined or an empty string, with the
     * `defaultConfig`. The `defaultConfig` might be specified for each directive
     * differently. If a specific directive is used (i.e. `cxAutoFocus`), the
     * specific (inherited) defaultConfig will be used.
     */
    setDefaultConfiguration() {
        if ((!this.config || this.config === '') && this.defaultConfig) {
            this.config = this.defaultConfig;
        }
    }
    /**
     * Helper method to return the host element for the directive
     * given by the `elementRef`.
     */
    get host() {
        return this.elementRef.nativeElement;
    }
    /**
     * Force a tabindex on the host element if it is _requried_ to make the element
     * focusable. If the element is focusable by nature or by a given tabindex, the
     * `tabindex` is not applied.
     *
     * Buttons, active links, etc. do no need an explicit tabindex to receive focus.
     */
    set requiredTabindex(tabindex) {
        if (this.requiresExplicitTabIndex) {
            this.tabindex = tabindex;
        }
    }
    /**
     * Returns true if the host element does not have a tabindex defined
     * and it also doesn't get focus by browsers nature (i.e. button or
     * active link).
     */
    get requiresExplicitTabIndex() {
        return (this.tabindex === undefined &&
            ['button', 'input', 'select', 'textarea'].indexOf(this.host.tagName.toLowerCase()) === -1 &&
            !(this.host.tagName === 'A' &&
                (this.host.hasAttribute('href') || this.host.hasAttribute('routerlink'))));
    }
};
BaseFocusDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: BaseFocusService }
];
__decorate([
    Input(), HostBinding('attr.tabindex')
], BaseFocusDirective.prototype, "tabindex", void 0);
BaseFocusDirective = __decorate([
    Directive()
], BaseFocusDirective);
export { BaseFocusDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1mb2N1cy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL3N0b3JlZnJvbnQvIiwic291cmNlcyI6WyJsYXlvdXQvYTExeS9rZXlib2FyZC1mb2N1cy9iYXNlL2Jhc2UtZm9jdXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLEVBQ1gsS0FBSyxFQUNMLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV4RDs7Ozs7Ozs7O0dBU0c7QUFFSCxJQUFzQixrQkFBa0IsR0FBeEMsTUFBc0Isa0JBQWtCO0lBZXRDLFlBQ1ksVUFBbUMsRUFDbkMsT0FBeUI7UUFEekIsZUFBVSxHQUFWLFVBQVUsQ0FBeUI7UUFDbkMsWUFBTyxHQUFQLE9BQU8sQ0FBa0I7UUFWckM7OztXQUdHO1FBQ08sa0JBQWEsR0FBb0IsRUFBRSxDQUFDO0lBTzNDLENBQUM7SUFFSixRQUFRO1FBQ04sSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNPLHVCQUF1QjtRQUMvQixJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUM5RCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7U0FDbEM7SUFDSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsSUFBYyxJQUFJO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7SUFDdkMsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILElBQWMsZ0JBQWdCLENBQUMsUUFBZ0I7UUFDN0MsSUFBSSxJQUFJLENBQUMsd0JBQXdCLEVBQUU7WUFDakMsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQWMsd0JBQXdCO1FBQ3BDLE9BQU8sQ0FDTCxJQUFJLENBQUMsUUFBUSxLQUFLLFNBQVM7WUFDM0IsQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQy9DLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUNoQyxLQUFLLENBQUMsQ0FBQztZQUNSLENBQUMsQ0FDQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyxHQUFHO2dCQUN6QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQ3pFLENBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRixDQUFBOztZQTNEeUIsVUFBVTtZQUNiLGdCQUFnQjs7QUFKRTtJQUF0QyxLQUFLLEVBQUUsRUFBRSxXQUFXLENBQUMsZUFBZSxDQUFDO29EQUFrQjtBQWJwQyxrQkFBa0I7SUFEdkMsU0FBUyxFQUFFO0dBQ1Usa0JBQWtCLENBMkV2QztTQTNFcUIsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBEaXJlY3RpdmUsXHJcbiAgRWxlbWVudFJlZixcclxuICBIb3N0QmluZGluZyxcclxuICBJbnB1dCxcclxuICBPbkluaXQsXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEJhc2VGb2N1c0NvbmZpZyB9IGZyb20gJy4uL2tleWJvYXJkLWZvY3VzLm1vZGVsJztcclxuaW1wb3J0IHsgQmFzZUZvY3VzU2VydmljZSB9IGZyb20gJy4vYmFzZS1mb2N1cy5zZXJ2aWNlJztcclxuXHJcbi8qKlxyXG4gKiBBYnN0cmFjdCBkaXJlY3RpdmUgdGhhdCBwcm92aWRlcyBhIGNvbW1vbiBpbnRlcmZhY2UgZm9yIGFsbCBmb2N1cyBkaXJlY3RpdmVzOlxyXG4gKiAtIEJsb2NrIEZvY3VzXHJcbiAqIC0gUGVyc2lzdCBGb2N1c1xyXG4gKiAtIEVzY2FwZSBGb2N1c1xyXG4gKiAtIEF1dG8gRm9jdXNcclxuICogLSBUYWIgRm9jdXNcclxuICogLSBUcmFwIEZvY3VzXHJcbiAqIC0gTG9jayBGb2N1c1xyXG4gKi9cclxuQERpcmVjdGl2ZSgpXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlRm9jdXNEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIC8qKlxyXG4gICAqIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBmb2N1cyBkaXJlY3RpdmUgZHJpdmVzIHRoZSBiZWhhdmlvdXIgb2YgdGhlIGtleWJvYXJkXHJcbiAgICogZm9jdXMgZGlyZWN0aXZlLlxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBjb25maWc6IEJhc2VGb2N1c0NvbmZpZztcclxuXHJcbiAgLyoqXHJcbiAgICogQSBkZWZhdWx0IGNvbmZpZyBjYW4gYmUgcHJvdmlkZWQgZm9yIGVhY2ggZGlyZWN0aXZlIGlmIGEgc3BlY2lmaWMgZm9jdXMgZGlyZWN0aXZlXHJcbiAgICogaXMgdXNlZCBkaXJlY3RseS4gaS5lLiBgPGRpdiBjeEF1dG9Gb2N1cz48L2Rpdj5gXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGRlZmF1bHRDb25maWc6IEJhc2VGb2N1c0NvbmZpZyA9IHt9O1xyXG5cclxuICBASW5wdXQoKSBASG9zdEJpbmRpbmcoJ2F0dHIudGFiaW5kZXgnKSB0YWJpbmRleDogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcclxuICAgIHByb3RlY3RlZCBzZXJ2aWNlOiBCYXNlRm9jdXNTZXJ2aWNlXHJcbiAgKSB7fVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMuc2V0RGVmYXVsdENvbmZpZ3VyYXRpb24oKTtcclxuICAgIHRoaXMucmVxdWlyZWRUYWJpbmRleCA9IC0xO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogT3ZlcnJpZGUgdGhlIChpbnB1dCkgY29uZmlnIGlmIGl0IHVuZGVmaW5lZCBvciBhbiBlbXB0eSBzdHJpbmcsIHdpdGggdGhlXHJcbiAgICogYGRlZmF1bHRDb25maWdgLiBUaGUgYGRlZmF1bHRDb25maWdgIG1pZ2h0IGJlIHNwZWNpZmllZCBmb3IgZWFjaCBkaXJlY3RpdmVcclxuICAgKiBkaWZmZXJlbnRseS4gSWYgYSBzcGVjaWZpYyBkaXJlY3RpdmUgaXMgdXNlZCAoaS5lLiBgY3hBdXRvRm9jdXNgKSwgdGhlXHJcbiAgICogc3BlY2lmaWMgKGluaGVyaXRlZCkgZGVmYXVsdENvbmZpZyB3aWxsIGJlIHVzZWQuXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIHNldERlZmF1bHRDb25maWd1cmF0aW9uKCk6IHZvaWQge1xyXG4gICAgaWYgKCghdGhpcy5jb25maWcgfHwgdGhpcy5jb25maWcgPT09ICcnKSAmJiB0aGlzLmRlZmF1bHRDb25maWcpIHtcclxuICAgICAgdGhpcy5jb25maWcgPSB0aGlzLmRlZmF1bHRDb25maWc7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBIZWxwZXIgbWV0aG9kIHRvIHJldHVybiB0aGUgaG9zdCBlbGVtZW50IGZvciB0aGUgZGlyZWN0aXZlXHJcbiAgICogZ2l2ZW4gYnkgdGhlIGBlbGVtZW50UmVmYC5cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgZ2V0IGhvc3QoKTogSFRNTEVsZW1lbnQge1xyXG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRm9yY2UgYSB0YWJpbmRleCBvbiB0aGUgaG9zdCBlbGVtZW50IGlmIGl0IGlzIF9yZXF1cmllZF8gdG8gbWFrZSB0aGUgZWxlbWVudFxyXG4gICAqIGZvY3VzYWJsZS4gSWYgdGhlIGVsZW1lbnQgaXMgZm9jdXNhYmxlIGJ5IG5hdHVyZSBvciBieSBhIGdpdmVuIHRhYmluZGV4LCB0aGVcclxuICAgKiBgdGFiaW5kZXhgIGlzIG5vdCBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQnV0dG9ucywgYWN0aXZlIGxpbmtzLCBldGMuIGRvIG5vIG5lZWQgYW4gZXhwbGljaXQgdGFiaW5kZXggdG8gcmVjZWl2ZSBmb2N1cy5cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgc2V0IHJlcXVpcmVkVGFiaW5kZXgodGFiaW5kZXg6IG51bWJlcikge1xyXG4gICAgaWYgKHRoaXMucmVxdWlyZXNFeHBsaWNpdFRhYkluZGV4KSB7XHJcbiAgICAgIHRoaXMudGFiaW5kZXggPSB0YWJpbmRleDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgaG9zdCBlbGVtZW50IGRvZXMgbm90IGhhdmUgYSB0YWJpbmRleCBkZWZpbmVkXHJcbiAgICogYW5kIGl0IGFsc28gZG9lc24ndCBnZXQgZm9jdXMgYnkgYnJvd3NlcnMgbmF0dXJlIChpLmUuIGJ1dHRvbiBvclxyXG4gICAqIGFjdGl2ZSBsaW5rKS5cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgZ2V0IHJlcXVpcmVzRXhwbGljaXRUYWJJbmRleCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIHRoaXMudGFiaW5kZXggPT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICBbJ2J1dHRvbicsICdpbnB1dCcsICdzZWxlY3QnLCAndGV4dGFyZWEnXS5pbmRleE9mKFxyXG4gICAgICAgIHRoaXMuaG9zdC50YWdOYW1lLnRvTG93ZXJDYXNlKClcclxuICAgICAgKSA9PT0gLTEgJiZcclxuICAgICAgIShcclxuICAgICAgICB0aGlzLmhvc3QudGFnTmFtZSA9PT0gJ0EnICYmXHJcbiAgICAgICAgKHRoaXMuaG9zdC5oYXNBdHRyaWJ1dGUoJ2hyZWYnKSB8fCB0aGlzLmhvc3QuaGFzQXR0cmlidXRlKCdyb3V0ZXJsaW5rJykpXHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiJdfQ==