import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
let OutletRendererService = class OutletRendererService {
    constructor() {
        this.outletRefs = new BehaviorSubject(new Map());
    }
    /**
     * Dynamically render the templates in the specified array
     *
     * @param outlet
     */
    render(outlet) {
        if (this.outletRefs.value.size !== 0) {
            this.outletRefs.value.get(outlet).render();
        }
    }
    /**
     * Register outlet to be available to render dynamically
     *
     * @param cxOutlet
     * @param context
     */
    register(cxOutlet, context) {
        this.outletRefs.next(this.outletRefs.value.set(cxOutlet, context));
    }
    /**
     * Returns map of outlets
     *
     */
    getOutletRef(outlet) {
        return this.outletRefs.asObservable().pipe(map((val) => val.get(outlet)), filter((val) => Boolean(val)));
    }
};
OutletRendererService.ɵprov = i0.ɵɵdefineInjectable({ factory: function OutletRendererService_Factory() { return new OutletRendererService(); }, token: OutletRendererService, providedIn: "root" });
OutletRendererService = __decorate([
    Injectable({
        providedIn: 'root',
    })
], OutletRendererService);
export { OutletRendererService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0bGV0LXJlbmRlcmVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL3N0b3JlZnJvbnQvIiwic291cmNlcyI6WyJjbXMtc3RydWN0dXJlL291dGxldC9vdXRsZXQtcmVuZGVyZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZUFBZSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBTTdDLElBQWEscUJBQXFCLEdBQWxDLE1BQWEscUJBQXFCO0lBQWxDO1FBQ1UsZUFBVSxHQUFHLElBQUksZUFBZSxDQUFDLElBQUksR0FBRyxFQUEyQixDQUFDLENBQUM7S0FnQzlFO0lBOUJDOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsTUFBYztRQUNuQixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUU7WUFDcEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQzVDO0lBQ0gsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsUUFBUSxDQUFDLFFBQWdCLEVBQUUsT0FBd0I7UUFDakQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFDRDs7O09BR0c7SUFDSCxZQUFZLENBQUMsTUFBYztRQUN6QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUN4QyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFDN0IsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDOUIsQ0FBQztJQUNKLENBQUM7Q0FDRixDQUFBOztBQWpDWSxxQkFBcUI7SUFIakMsVUFBVSxDQUFDO1FBQ1YsVUFBVSxFQUFFLE1BQU07S0FDbkIsQ0FBQztHQUNXLHFCQUFxQixDQWlDakM7U0FqQ1kscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZmlsdGVyLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IE91dGxldERpcmVjdGl2ZSB9IGZyb20gJy4vb3V0bGV0LmRpcmVjdGl2ZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgT3V0bGV0UmVuZGVyZXJTZXJ2aWNlIHtcclxuICBwcml2YXRlIG91dGxldFJlZnMgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KG5ldyBNYXA8c3RyaW5nLCBPdXRsZXREaXJlY3RpdmU+KCkpO1xyXG5cclxuICAvKipcclxuICAgKiBEeW5hbWljYWxseSByZW5kZXIgdGhlIHRlbXBsYXRlcyBpbiB0aGUgc3BlY2lmaWVkIGFycmF5XHJcbiAgICpcclxuICAgKiBAcGFyYW0gb3V0bGV0XHJcbiAgICovXHJcbiAgcmVuZGVyKG91dGxldDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5vdXRsZXRSZWZzLnZhbHVlLnNpemUgIT09IDApIHtcclxuICAgICAgdGhpcy5vdXRsZXRSZWZzLnZhbHVlLmdldChvdXRsZXQpLnJlbmRlcigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVnaXN0ZXIgb3V0bGV0IHRvIGJlIGF2YWlsYWJsZSB0byByZW5kZXIgZHluYW1pY2FsbHlcclxuICAgKlxyXG4gICAqIEBwYXJhbSBjeE91dGxldFxyXG4gICAqIEBwYXJhbSBjb250ZXh0XHJcbiAgICovXHJcbiAgcmVnaXN0ZXIoY3hPdXRsZXQ6IHN0cmluZywgY29udGV4dDogT3V0bGV0RGlyZWN0aXZlKTogdm9pZCB7XHJcbiAgICB0aGlzLm91dGxldFJlZnMubmV4dCh0aGlzLm91dGxldFJlZnMudmFsdWUuc2V0KGN4T3V0bGV0LCBjb250ZXh0KSk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgbWFwIG9mIG91dGxldHNcclxuICAgKlxyXG4gICAqL1xyXG4gIGdldE91dGxldFJlZihvdXRsZXQ6IHN0cmluZyk6IE9ic2VydmFibGU8T3V0bGV0RGlyZWN0aXZlPiB7XHJcbiAgICByZXR1cm4gdGhpcy5vdXRsZXRSZWZzLmFzT2JzZXJ2YWJsZSgpLnBpcGUoXHJcbiAgICAgIG1hcCgodmFsKSA9PiB2YWwuZ2V0KG91dGxldCkpLFxyXG4gICAgICBmaWx0ZXIoKHZhbCkgPT4gQm9vbGVhbih2YWwpKVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIl19