import { __decorate } from "tslib";
import { ComponentFactoryResolver, Injectable, } from '@angular/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Default component handler used for dynamically launching cms components implemented
 * as native Angular components.
 */
let DefaultComponentHandler = class DefaultComponentHandler {
    hasMatch(componentMapping) {
        return typeof componentMapping.component === 'function';
    }
    getPriority() {
        return -50 /* FALLBACK */;
    }
    launcher(componentMapping, viewContainerRef, elementInjector) {
        return new Observable((subscriber) => {
            let componentRef;
            const injector = elementInjector !== null && elementInjector !== void 0 ? elementInjector : viewContainerRef.injector;
            const dispose = () => {
                if (componentRef) {
                    componentRef.destroy();
                }
            };
            const factory = this.getComponentFactory(injector, componentMapping.component);
            if (factory) {
                componentRef = viewContainerRef.createComponent(factory, undefined, injector);
                subscriber.next({ elementRef: componentRef.location, componentRef });
            }
            return dispose;
        });
    }
    getComponentFactory(injector, component) {
        if (!component) {
            return null;
        }
        const factory = injector
            .get(ComponentFactoryResolver)
            .resolveComponentFactory(component);
        return factory;
    }
};
DefaultComponentHandler.ɵprov = i0.ɵɵdefineInjectable({ factory: function DefaultComponentHandler_Factory() { return new DefaultComponentHandler(); }, token: DefaultComponentHandler, providedIn: "root" });
DefaultComponentHandler = __decorate([
    Injectable({
        providedIn: 'root',
    })
], DefaultComponentHandler);
export { DefaultComponentHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1jb21wb25lbnQuaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvc3RvcmVmcm9udC8iLCJzb3VyY2VzIjpbImNtcy1zdHJ1Y3R1cmUvcGFnZS9jb21wb25lbnQvaGFuZGxlcnMvZGVmYXVsdC1jb21wb25lbnQuaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLHdCQUF3QixFQUd4QixVQUFVLEdBR1gsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFHbEM7OztHQUdHO0FBSUgsSUFBYSx1QkFBdUIsR0FBcEMsTUFBYSx1QkFBdUI7SUFDbEMsUUFBUSxDQUFDLGdCQUFxQztRQUM1QyxPQUFPLE9BQU8sZ0JBQWdCLENBQUMsU0FBUyxLQUFLLFVBQVUsQ0FBQztJQUMxRCxDQUFDO0lBRUQsV0FBVztRQUNULDBCQUF5QjtJQUMzQixDQUFDO0lBRUQsUUFBUSxDQUNOLGdCQUFxQyxFQUNyQyxnQkFBa0MsRUFDbEMsZUFBMEI7UUFFMUIsT0FBTyxJQUFJLFVBQVUsQ0FHbEIsQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUNoQixJQUFJLFlBQStCLENBQUM7WUFFcEMsTUFBTSxRQUFRLEdBQUcsZUFBZSxhQUFmLGVBQWUsY0FBZixlQUFlLEdBQUksZ0JBQWdCLENBQUMsUUFBUSxDQUFDO1lBRTlELE1BQU0sT0FBTyxHQUFHLEdBQUcsRUFBRTtnQkFDbkIsSUFBSSxZQUFZLEVBQUU7b0JBQ2hCLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQztpQkFDeEI7WUFDSCxDQUFDLENBQUM7WUFFRixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQ3RDLFFBQVEsRUFDUixnQkFBZ0IsQ0FBQyxTQUFTLENBQzNCLENBQUM7WUFFRixJQUFJLE9BQU8sRUFBRTtnQkFDWCxZQUFZLEdBQUcsZ0JBQWdCLENBQUMsZUFBZSxDQUM3QyxPQUFPLEVBQ1AsU0FBUyxFQUNULFFBQVEsQ0FDVCxDQUFDO2dCQUNGLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxVQUFVLEVBQUUsWUFBWSxDQUFDLFFBQVEsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO2FBQ3RFO1lBRUQsT0FBTyxPQUFPLENBQUM7UUFDakIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRVMsbUJBQW1CLENBQUMsUUFBa0IsRUFBRSxTQUFjO1FBQzlELElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDZCxPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsTUFBTSxPQUFPLEdBQUcsUUFBUTthQUNyQixHQUFHLENBQUMsd0JBQXdCLENBQUM7YUFDN0IsdUJBQXVCLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFdEMsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztDQUNGLENBQUE7O0FBeERZLHVCQUF1QjtJQUhuQyxVQUFVLENBQUM7UUFDVixVQUFVLEVBQUUsTUFBTTtLQUNuQixDQUFDO0dBQ1csdUJBQXVCLENBd0RuQztTQXhEWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcclxuICBDb21wb25lbnRSZWYsXHJcbiAgRWxlbWVudFJlZixcclxuICBJbmplY3RhYmxlLFxyXG4gIEluamVjdG9yLFxyXG4gIFZpZXdDb250YWluZXJSZWYsXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbXBvbmVudEhhbmRsZXIgfSBmcm9tICcuL2NvbXBvbmVudC1oYW5kbGVyJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBDbXNDb21wb25lbnRNYXBwaW5nLCBQcmlvcml0eSB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XHJcblxyXG4vKipcclxuICogRGVmYXVsdCBjb21wb25lbnQgaGFuZGxlciB1c2VkIGZvciBkeW5hbWljYWxseSBsYXVuY2hpbmcgY21zIGNvbXBvbmVudHMgaW1wbGVtZW50ZWRcclxuICogYXMgbmF0aXZlIEFuZ3VsYXIgY29tcG9uZW50cy5cclxuICovXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEZWZhdWx0Q29tcG9uZW50SGFuZGxlciBpbXBsZW1lbnRzIENvbXBvbmVudEhhbmRsZXIge1xyXG4gIGhhc01hdGNoKGNvbXBvbmVudE1hcHBpbmc6IENtc0NvbXBvbmVudE1hcHBpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0eXBlb2YgY29tcG9uZW50TWFwcGluZy5jb21wb25lbnQgPT09ICdmdW5jdGlvbic7XHJcbiAgfVxyXG5cclxuICBnZXRQcmlvcml0eSgpOiBQcmlvcml0eSB7XHJcbiAgICByZXR1cm4gUHJpb3JpdHkuRkFMTEJBQ0s7XHJcbiAgfVxyXG5cclxuICBsYXVuY2hlcihcclxuICAgIGNvbXBvbmVudE1hcHBpbmc6IENtc0NvbXBvbmVudE1hcHBpbmcsXHJcbiAgICB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxyXG4gICAgZWxlbWVudEluamVjdG9yPzogSW5qZWN0b3JcclxuICApOiBPYnNlcnZhYmxlPHsgZWxlbWVudFJlZjogRWxlbWVudFJlZjsgY29tcG9uZW50UmVmPzogQ29tcG9uZW50UmVmPGFueT4gfT4ge1xyXG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlPHtcclxuICAgICAgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcclxuICAgICAgY29tcG9uZW50UmVmPzogQ29tcG9uZW50UmVmPGFueT47XHJcbiAgICB9Pigoc3Vic2NyaWJlcikgPT4ge1xyXG4gICAgICBsZXQgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8YW55PjtcclxuXHJcbiAgICAgIGNvbnN0IGluamVjdG9yID0gZWxlbWVudEluamVjdG9yID8/IHZpZXdDb250YWluZXJSZWYuaW5qZWN0b3I7XHJcblxyXG4gICAgICBjb25zdCBkaXNwb3NlID0gKCkgPT4ge1xyXG4gICAgICAgIGlmIChjb21wb25lbnRSZWYpIHtcclxuICAgICAgICAgIGNvbXBvbmVudFJlZi5kZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgY29uc3QgZmFjdG9yeSA9IHRoaXMuZ2V0Q29tcG9uZW50RmFjdG9yeShcclxuICAgICAgICBpbmplY3RvcixcclxuICAgICAgICBjb21wb25lbnRNYXBwaW5nLmNvbXBvbmVudFxyXG4gICAgICApO1xyXG5cclxuICAgICAgaWYgKGZhY3RvcnkpIHtcclxuICAgICAgICBjb21wb25lbnRSZWYgPSB2aWV3Q29udGFpbmVyUmVmLmNyZWF0ZUNvbXBvbmVudChcclxuICAgICAgICAgIGZhY3RvcnksXHJcbiAgICAgICAgICB1bmRlZmluZWQsXHJcbiAgICAgICAgICBpbmplY3RvclxyXG4gICAgICAgICk7XHJcbiAgICAgICAgc3Vic2NyaWJlci5uZXh0KHsgZWxlbWVudFJlZjogY29tcG9uZW50UmVmLmxvY2F0aW9uLCBjb21wb25lbnRSZWYgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBkaXNwb3NlO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgZ2V0Q29tcG9uZW50RmFjdG9yeShpbmplY3RvcjogSW5qZWN0b3IsIGNvbXBvbmVudDogYW55KTogYW55IHtcclxuICAgIGlmICghY29tcG9uZW50KSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZmFjdG9yeSA9IGluamVjdG9yXHJcbiAgICAgIC5nZXQoQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyKVxyXG4gICAgICAucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoY29tcG9uZW50KTtcclxuXHJcbiAgICByZXR1cm4gZmFjdG9yeTtcclxuICB9XHJcbn1cclxuIl19