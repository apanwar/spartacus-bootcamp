import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, Input, isDevMode, OnInit, TemplateRef, } from '@angular/core';
import { tap } from 'rxjs/operators';
import { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';
import { CarouselService } from './carousel.service';
/**
 * Generic carousel component that can be used to render any carousel items,
 * such as products, images, banners, or any component. Carousel items are
 * rendered in so-called carousel slides, and the previous/next buttons as well as
 * the indicator-buttons can used to navigate the slides.
 *
 * The component uses an array of Observables (`items$`) as an input, to allow
 * for lazy loading of items.
 *
 * The number of items per slide is calculated with the `itemWidth`, which can given
 * in pixels or percentage.
 *
 * To allow for flexible rendering of items, the rendering is delegated to the
 * given `template`. This allows for maximum flexibility.
 */
let CarouselComponent = class CarouselComponent {
    constructor(el, service) {
        this.el = el;
        this.service = service;
        /**
         * Specifies the minimum size of the carousel item, either in px or %.
         * This value is used for the calculation of numbers per carousel, so that
         * the number of carousel items is dynamic. The calculation uses the `itemWidth`
         * and the host element `clientWidth`, so that the carousel is reusable in
         * different layouts (for example in a 50% grid).
         */
        this.itemWidth = '300px';
        /**
         * Indicates whether the visual indicators are used.
         */
        this.hideIndicators = false;
        this.indicatorIcon = ICON_TYPE.CIRCLE;
        this.previousIcon = ICON_TYPE.CARET_LEFT;
        this.nextIcon = ICON_TYPE.CARET_RIGHT;
    }
    set setItems(inputItems) {
        this.items = inputItems;
        //Reset slider when changing products
        this.activeSlide = 0;
    }
    ngOnInit() {
        if (!this.template && isDevMode()) {
            console.error('No template reference provided to render the carousel items for the `cx-carousel`');
            return;
        }
        this.size$ = this.service
            .getItemsPerSlide(this.el.nativeElement, this.itemWidth)
            .pipe(tap(() => (this.activeSlide = 0)));
    }
};
CarouselComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: CarouselService }
];
__decorate([
    Input()
], CarouselComponent.prototype, "title", void 0);
__decorate([
    Input('items')
], CarouselComponent.prototype, "setItems", null);
__decorate([
    Input()
], CarouselComponent.prototype, "template", void 0);
__decorate([
    Input()
], CarouselComponent.prototype, "itemWidth", void 0);
__decorate([
    Input()
], CarouselComponent.prototype, "hideIndicators", void 0);
__decorate([
    Input()
], CarouselComponent.prototype, "indicatorIcon", void 0);
__decorate([
    Input()
], CarouselComponent.prototype, "previousIcon", void 0);
__decorate([
    Input()
], CarouselComponent.prototype, "nextIcon", void 0);
CarouselComponent = __decorate([
    Component({
        selector: 'cx-carousel',
        template: "<ng-container *ngIf=\"items?.length > 0 && (size$ | async) as size\">\r\n  <h3 *ngIf=\"title\">{{ title }}</h3>\r\n\r\n  <div class=\"carousel-panel\" [ngClass]=\"'size-' + size\">\r\n    <button\r\n      *ngIf=\"size < items.length\"\r\n      class=\"previous\"\r\n      (click)=\"activeSlide = activeSlide - size\"\r\n      [disabled]=\"activeSlide === 0\"\r\n    >\r\n      <cx-icon [type]=\"previousIcon\"></cx-icon>\r\n    </button>\r\n\r\n    <div class=\"slides\">\r\n      <ng-container *ngFor=\"let _ of items; let i = index\">\r\n        <div\r\n          class=\"slide\"\r\n          *ngIf=\"i % size === 0\"\r\n          [class.active]=\"i === activeSlide\"\r\n        >\r\n          <ng-container\r\n            *ngFor=\"let item of items | slice: i:i + size; let j = index\"\r\n          >\r\n            <div\r\n              *ngIf=\"item | async as data\"\r\n              class=\"item\"\r\n              [class.active]=\"i === activeSlide\"\r\n            >\r\n              <ng-container\r\n                *ngTemplateOutlet=\"template; context: { item: data }\"\r\n              ></ng-container>\r\n            </div>\r\n          </ng-container>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n\r\n    <button\r\n      *ngIf=\"size < items.length\"\r\n      class=\"next\"\r\n      (click)=\"activeSlide = activeSlide + size\"\r\n      tabindex=\"-1\"\r\n      [disabled]=\"activeSlide > items.length - size - 1\"\r\n    >\r\n      <cx-icon [type]=\"nextIcon\"></cx-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <div *ngIf=\"!hideIndicators && size < items.length\" class=\"indicators\">\r\n    <ng-container *ngFor=\"let _ of items; let i = index\">\r\n      <button\r\n        *ngIf=\"i % size === 0\"\r\n        (focus)=\"activeSlide = i\"\r\n        [disabled]=\"i === activeSlide\"\r\n        tabindex=\"-1\"\r\n      >\r\n        <cx-icon [type]=\"indicatorIcon\"></cx-icon>\r\n      </button>\r\n    </ng-container>\r\n  </div>\r\n</ng-container>\r\n",
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], CarouselComponent);
export { CarouselComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9zdG9yZWZyb250LyIsInNvdXJjZXMiOlsic2hhcmVkL2NvbXBvbmVudHMvY2Fyb3VzZWwvY2Fyb3VzZWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsS0FBSyxFQUNMLFNBQVMsRUFDVCxNQUFNLEVBQ04sV0FBVyxHQUNaLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDekUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXJEOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBTUgsSUFBYSxpQkFBaUIsR0FBOUIsTUFBYSxpQkFBaUI7SUE2QzVCLFlBQXNCLEVBQWMsRUFBWSxPQUF3QjtRQUFsRCxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVksWUFBTyxHQUFQLE9BQU8sQ0FBaUI7UUFyQnhFOzs7Ozs7V0FNRztRQUNNLGNBQVMsR0FBRyxPQUFPLENBQUM7UUFFN0I7O1dBRUc7UUFDTSxtQkFBYyxHQUFHLEtBQUssQ0FBQztRQUV2QixrQkFBYSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFDakMsaUJBQVksR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDO1FBQ3BDLGFBQVEsR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFDO0lBS2lDLENBQUM7SUFqQzVFLElBQUksUUFBUSxDQUFDLFVBQTZCO1FBQ3hDLElBQUksQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDO1FBQ3hCLHFDQUFxQztRQUNyQyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBK0JELFFBQVE7UUFDTixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxTQUFTLEVBQUUsRUFBRTtZQUNqQyxPQUFPLENBQUMsS0FBSyxDQUNYLG1GQUFtRixDQUNwRixDQUFDO1lBQ0YsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTzthQUN0QixnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO2FBQ3ZELElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3QyxDQUFDO0NBQ0YsQ0FBQTs7WUFiMkIsVUFBVTtZQUFxQixlQUFlOztBQXpDL0Q7SUFBUixLQUFLLEVBQUU7Z0RBQWU7QUFRdkI7SUFEQyxLQUFLLENBQUMsT0FBTyxDQUFDO2lEQUtkO0FBTVE7SUFBUixLQUFLLEVBQUU7bURBQTRCO0FBUzNCO0lBQVIsS0FBSyxFQUFFO29EQUFxQjtBQUtwQjtJQUFSLEtBQUssRUFBRTt5REFBd0I7QUFFdkI7SUFBUixLQUFLLEVBQUU7d0RBQWtDO0FBQ2pDO0lBQVIsS0FBSyxFQUFFO3VEQUFxQztBQUNwQztJQUFSLEtBQUssRUFBRTttREFBa0M7QUF4Qy9CLGlCQUFpQjtJQUw3QixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsYUFBYTtRQUN2QiwrOERBQXdDO1FBQ3hDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO0tBQ2hELENBQUM7R0FDVyxpQkFBaUIsQ0EwRDdCO1NBMURZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXHJcbiAgQ29tcG9uZW50LFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgSW5wdXQsXHJcbiAgaXNEZXZNb2RlLFxyXG4gIE9uSW5pdCxcclxuICBUZW1wbGF0ZVJlZixcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IElDT05fVFlQRSB9IGZyb20gJy4uLy4uLy4uL2Ntcy1jb21wb25lbnRzL21pc2MvaWNvbi9pY29uLm1vZGVsJztcclxuaW1wb3J0IHsgQ2Fyb3VzZWxTZXJ2aWNlIH0gZnJvbSAnLi9jYXJvdXNlbC5zZXJ2aWNlJztcclxuXHJcbi8qKlxyXG4gKiBHZW5lcmljIGNhcm91c2VsIGNvbXBvbmVudCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlbmRlciBhbnkgY2Fyb3VzZWwgaXRlbXMsXHJcbiAqIHN1Y2ggYXMgcHJvZHVjdHMsIGltYWdlcywgYmFubmVycywgb3IgYW55IGNvbXBvbmVudC4gQ2Fyb3VzZWwgaXRlbXMgYXJlXHJcbiAqIHJlbmRlcmVkIGluIHNvLWNhbGxlZCBjYXJvdXNlbCBzbGlkZXMsIGFuZCB0aGUgcHJldmlvdXMvbmV4dCBidXR0b25zIGFzIHdlbGwgYXNcclxuICogdGhlIGluZGljYXRvci1idXR0b25zIGNhbiB1c2VkIHRvIG5hdmlnYXRlIHRoZSBzbGlkZXMuXHJcbiAqXHJcbiAqIFRoZSBjb21wb25lbnQgdXNlcyBhbiBhcnJheSBvZiBPYnNlcnZhYmxlcyAoYGl0ZW1zJGApIGFzIGFuIGlucHV0LCB0byBhbGxvd1xyXG4gKiBmb3IgbGF6eSBsb2FkaW5nIG9mIGl0ZW1zLlxyXG4gKlxyXG4gKiBUaGUgbnVtYmVyIG9mIGl0ZW1zIHBlciBzbGlkZSBpcyBjYWxjdWxhdGVkIHdpdGggdGhlIGBpdGVtV2lkdGhgLCB3aGljaCBjYW4gZ2l2ZW5cclxuICogaW4gcGl4ZWxzIG9yIHBlcmNlbnRhZ2UuXHJcbiAqXHJcbiAqIFRvIGFsbG93IGZvciBmbGV4aWJsZSByZW5kZXJpbmcgb2YgaXRlbXMsIHRoZSByZW5kZXJpbmcgaXMgZGVsZWdhdGVkIHRvIHRoZVxyXG4gKiBnaXZlbiBgdGVtcGxhdGVgLiBUaGlzIGFsbG93cyBmb3IgbWF4aW11bSBmbGV4aWJpbGl0eS5cclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnY3gtY2Fyb3VzZWwnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9jYXJvdXNlbC5jb21wb25lbnQuaHRtbCcsXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDYXJvdXNlbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgLyoqXHJcbiAgICogVGhlIHRpdGxlIGlzIHJlbmRlcmVkIGFzIHRoZSBjYXJvdXNlbCBoZWFkaW5nLlxyXG4gICAqL1xyXG4gIEBJbnB1dCgpIHRpdGxlOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBpdGVtcyQgcmVwcmVzZW50IHRoZSBjYXJvdXNlbCBpdGVtcy4gVGhlIGl0ZW1zJCBhcmVcclxuICAgKiBvYnNlcnZhYmxlcyBzbyB0aGF0IHRoZSBpdGVtcyBjYW4gYmUgbG9hZGVkIG9uIGRlbWFuZC5cclxuICAgKi9cclxuICBpdGVtczogT2JzZXJ2YWJsZTxhbnk+W107XHJcbiAgQElucHV0KCdpdGVtcycpXHJcbiAgc2V0IHNldEl0ZW1zKGlucHV0SXRlbXM6IE9ic2VydmFibGU8YW55PltdKSB7XHJcbiAgICB0aGlzLml0ZW1zID0gaW5wdXRJdGVtcztcclxuICAgIC8vUmVzZXQgc2xpZGVyIHdoZW4gY2hhbmdpbmcgcHJvZHVjdHNcclxuICAgIHRoaXMuYWN0aXZlU2xpZGUgPSAwO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHRlbXBsYXRlIGlzIHJlbmRlcmVkIGZvciBlYWNoIGl0ZW0sIHNvIHRoYXQgdGhlIGFjdHVhbFxyXG4gICAqIHZpZXcgY2FuIGJlIGdpdmVuIGJ5IHRoZSBjb21wb2VudCB0aGF0IHVzZXMgdGhlIGBDYXJvdXNlbENvbXBvbmVudGAuXHJcbiAgICovXHJcbiAgQElucHV0KCkgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XHJcblxyXG4gIC8qKlxyXG4gICAqIFNwZWNpZmllcyB0aGUgbWluaW11bSBzaXplIG9mIHRoZSBjYXJvdXNlbCBpdGVtLCBlaXRoZXIgaW4gcHggb3IgJS5cclxuICAgKiBUaGlzIHZhbHVlIGlzIHVzZWQgZm9yIHRoZSBjYWxjdWxhdGlvbiBvZiBudW1iZXJzIHBlciBjYXJvdXNlbCwgc28gdGhhdFxyXG4gICAqIHRoZSBudW1iZXIgb2YgY2Fyb3VzZWwgaXRlbXMgaXMgZHluYW1pYy4gVGhlIGNhbGN1bGF0aW9uIHVzZXMgdGhlIGBpdGVtV2lkdGhgXHJcbiAgICogYW5kIHRoZSBob3N0IGVsZW1lbnQgYGNsaWVudFdpZHRoYCwgc28gdGhhdCB0aGUgY2Fyb3VzZWwgaXMgcmV1c2FibGUgaW5cclxuICAgKiBkaWZmZXJlbnQgbGF5b3V0cyAoZm9yIGV4YW1wbGUgaW4gYSA1MCUgZ3JpZCkuXHJcbiAgICovXHJcbiAgQElucHV0KCkgaXRlbVdpZHRoID0gJzMwMHB4JztcclxuXHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHZpc3VhbCBpbmRpY2F0b3JzIGFyZSB1c2VkLlxyXG4gICAqL1xyXG4gIEBJbnB1dCgpIGhpZGVJbmRpY2F0b3JzID0gZmFsc2U7XHJcblxyXG4gIEBJbnB1dCgpIGluZGljYXRvckljb24gPSBJQ09OX1RZUEUuQ0lSQ0xFO1xyXG4gIEBJbnB1dCgpIHByZXZpb3VzSWNvbiA9IElDT05fVFlQRS5DQVJFVF9MRUZUO1xyXG4gIEBJbnB1dCgpIG5leHRJY29uID0gSUNPTl9UWVBFLkNBUkVUX1JJR0hUO1xyXG5cclxuICBhY3RpdmVTbGlkZTogbnVtYmVyO1xyXG4gIHNpemUkOiBPYnNlcnZhYmxlPG51bWJlcj47XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBlbDogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHNlcnZpY2U6IENhcm91c2VsU2VydmljZSkge31cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICBpZiAoIXRoaXMudGVtcGxhdGUgJiYgaXNEZXZNb2RlKCkpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICAnTm8gdGVtcGxhdGUgcmVmZXJlbmNlIHByb3ZpZGVkIHRvIHJlbmRlciB0aGUgY2Fyb3VzZWwgaXRlbXMgZm9yIHRoZSBgY3gtY2Fyb3VzZWxgJ1xyXG4gICAgICApO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLnNpemUkID0gdGhpcy5zZXJ2aWNlXHJcbiAgICAgIC5nZXRJdGVtc1BlclNsaWRlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgdGhpcy5pdGVtV2lkdGgpXHJcbiAgICAgIC5waXBlKHRhcCgoKSA9PiAodGhpcy5hY3RpdmVTbGlkZSA9IDApKSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==