import { __decorate } from "tslib";
import { Component, ElementRef, HostBinding, HostListener, OnDestroy, OnInit, } from '@angular/core';
import { AnonymousConsent, AnonymousConsentsConfig, AnonymousConsentsService, ConsentTemplate, } from '@spartacus/core';
import { combineLatest, Subscription } from 'rxjs';
import { distinctUntilChanged, take, tap } from 'rxjs/operators';
import { ICON_TYPE } from '../../../cms-components/misc/icon/index';
import { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';
let AnonymousConsentDialogComponent = class AnonymousConsentDialogComponent {
    constructor(config, anonymousConsentsService, el, launchDialogService) {
        this.config = config;
        this.anonymousConsentsService = anonymousConsentsService;
        this.el = el;
        this.launchDialogService = launchDialogService;
        this.role = 'dialog';
        this.modal = true;
        this.subscriptions = new Subscription();
        this.showLegalDescription = true;
        this.iconTypes = ICON_TYPE;
        this.requiredConsents = [];
        this.focusConfig = {
            trap: true,
            block: true,
            autofocus: 'input[type="checkbox"]',
            focusOnEscape: true,
        };
        if (Boolean(this.config.anonymousConsents)) {
            this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;
            if (Boolean(this.config.anonymousConsents.requiredConsents)) {
                this.requiredConsents = this.config.anonymousConsents.requiredConsents;
            }
        }
    }
    handleClick(event) {
        // Close on click outside the dialog window
        if (event.target.tagName === this.el.nativeElement.tagName) {
            this.close('Cross click');
        }
    }
    ngOnInit() {
        this.templates$ = this.anonymousConsentsService.getTemplates();
        this.consents$ = this.anonymousConsentsService.getConsents();
        this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();
    }
    close(reason) {
        this.launchDialogService.closeDialog(reason);
    }
    rejectAll() {
        this.subscriptions.add(combineLatest([this.templates$, this.consents$])
            .pipe(take(1), distinctUntilChanged(), tap(([templates, consents]) => templates.forEach((template) => {
            const consent = this.getCorrespondingConsent(template, consents);
            if (this.anonymousConsentsService.isConsentGiven(consent)) {
                if (this.isRequiredConsent(template)) {
                    return;
                }
                this.anonymousConsentsService.withdrawConsent(template.id);
            }
        })))
            .subscribe());
        this.close('rejectAll');
    }
    allowAll() {
        this.subscriptions.add(combineLatest([this.templates$, this.consents$])
            .pipe(take(1), distinctUntilChanged(), tap(([templates, consents]) => templates.forEach((template) => {
            const consent = this.getCorrespondingConsent(template, consents);
            if ((consent && consent.consentState == null) ||
                this.anonymousConsentsService.isConsentWithdrawn(consent)) {
                if (this.isRequiredConsent(template)) {
                    return;
                }
                this.anonymousConsentsService.giveConsent(template.id);
            }
        })))
            .subscribe());
        this.close('allowAll');
    }
    isRequiredConsent(template) {
        return (Boolean(this.config.anonymousConsents) &&
            Boolean(this.config.anonymousConsents.requiredConsents) &&
            this.config.anonymousConsents.requiredConsents.includes(template.id));
    }
    onConsentChange({ given, template, }) {
        if (given) {
            this.anonymousConsentsService.giveConsent(template.id);
        }
        else {
            this.anonymousConsentsService.withdrawConsent(template.id);
        }
    }
    getCorrespondingConsent(template, consents = []) {
        for (const consent of consents) {
            if (template.id === consent.templateCode) {
                return consent;
            }
        }
        return null;
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
};
AnonymousConsentDialogComponent.ctorParameters = () => [
    { type: AnonymousConsentsConfig },
    { type: AnonymousConsentsService },
    { type: ElementRef },
    { type: LaunchDialogService }
];
__decorate([
    HostBinding('attr.role')
], AnonymousConsentDialogComponent.prototype, "role", void 0);
__decorate([
    HostBinding('attr.aria-modal')
], AnonymousConsentDialogComponent.prototype, "modal", void 0);
__decorate([
    HostListener('click', ['$event'])
], AnonymousConsentDialogComponent.prototype, "handleClick", null);
AnonymousConsentDialogComponent = __decorate([
    Component({
        selector: 'cx-anonymous-consent-dialog',
        template: "<div\r\n  class=\"cx-anonymous-consent-dialog\"\r\n  [cxFocus]=\"focusConfig\"\r\n  (esc)=\"close('Escape clicked')\"\r\n>\r\n  <div class=\"cx-dialog-content\">\r\n    <div *ngIf=\"loading$ | async; else dialogBody\">\r\n      <cx-spinner></cx-spinner>\r\n    </div>\r\n    <ng-template #dialogBody>\r\n      <div class=\"cx-dialog-header\">\r\n        <h3>\r\n          {{ 'anonymousConsents.dialog.title' | cxTranslate }}\r\n        </h3>\r\n        <button\r\n          type=\"button\"\r\n          class=\"close\"\r\n          aria-label=\"Close\"\r\n          (click)=\"close('Cross click')\"\r\n        >\r\n          <span aria-hidden=\"true\">\r\n            <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\r\n          </span>\r\n        </button>\r\n      </div>\r\n      <!-- Separator -->\r\n      <div class=\"cx-dialog-description\" *ngIf=\"showLegalDescription\">\r\n        {{ 'anonymousConsents.dialog.legalDescription' | cxTranslate }}\r\n        <div\r\n          class=\"cx-dialog-separator col-sm-12 d-xs-block d-sm-block d-md-none\"\r\n        ></div>\r\n      </div>\r\n      <!-- Actions -->\r\n      <div class=\"cx-dialog-buttons\">\r\n        <a tabindex=\"0\" class=\"btn-link cx-action-link\" (click)=\"rejectAll()\">{{\r\n          'anonymousConsents.dialog.clearAll' | cxTranslate\r\n        }}</a>\r\n        <a tabindex=\"0\" class=\"btn-link cx-action-link\" (click)=\"allowAll()\">{{\r\n          'anonymousConsents.dialog.selectAll' | cxTranslate\r\n        }}</a>\r\n      </div>\r\n      <!-- Modal Body -->\r\n      <div class=\"cx-dialog-body\" *ngIf=\"templates$ | async as templates\">\r\n        <ng-container *ngIf=\"consents$ | async as consents\">\r\n          <div\r\n            class=\"cx-dialog-row col-sm-12 col-md-6\"\r\n            *ngFor=\"let template of templates\"\r\n          >\r\n            <cx-consent-management-form\r\n              [consentTemplate]=\"template\"\r\n              [requiredConsents]=\"requiredConsents\"\r\n              [consent]=\"getCorrespondingConsent(template, consents)\"\r\n              (consentChanged)=\"onConsentChange($event)\"\r\n            ></cx-consent-management-form>\r\n          </div>\r\n        </ng-container>\r\n      </div>\r\n    </ng-template>\r\n  </div>\r\n</div>\r\n"
    })
], AnonymousConsentDialogComponent);
export { AnonymousConsentDialogComponent };
//# sourceMappingURL=data:application/json;base64,