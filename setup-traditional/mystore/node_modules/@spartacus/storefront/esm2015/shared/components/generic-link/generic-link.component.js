import { __decorate } from "tslib";
import { Component, Input } from '@angular/core';
import { Params, Router } from '@angular/router';
/**
 * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.
 */
let GenericLinkComponent = class GenericLinkComponent {
    constructor(router) {
        this.router = router;
        /**
         * Pattern matching string starting with `http://` or `https://`.
         */
        this.PROTOCOL_REGEX = /^https?:\/\//i;
        /**
         * Used to split url into 2 parts:
         * 1. the path
         * 2. query params + hash fragment
         */
        this.URL_SPLIT = /(^[^#?]*)(.*)/;
        /**
         * Parsed parts of the @Input `url`, when it's a local URL.
         * It should not be used when the `url` is external.
         * @see `url`
         */
        this.routeParts = {};
    }
    /**
     * Returns true when the @Input `url` is a string starting with `http://` or `https://`.
     */
    isExternalUrl() {
        return typeof this.url === 'string' && this.PROTOCOL_REGEX.test(this.url);
    }
    get rel() {
        return this.target === '_blank' ? 'noopener' : null;
    }
    ngOnChanges(changes) {
        if (changes['url']) {
            this.setUrlParts(changes['url'].currentValue);
        }
    }
    /**
     * The part with the path of the local url.
     */
    get routerUrl() {
        return this.routeParts.path;
    }
    /**
     * The part with the query params of the local url.
     */
    get queryParams() {
        return this.routeParts.queryParams;
    }
    /**
     * The part with the hash fragment of the local url.
     */
    get fragment() {
        return this.routeParts.fragment;
    }
    /**
     * Parses the given url and sets the property `urlParts` accordingly.
     */
    setUrlParts(url) {
        if (typeof url === 'string') {
            url = this.getAbsoluteUrl(url); // string links in CMS sometimes don't have the leading slash, so fix it here
            this.routeParts = this.splitUrl(url);
        }
        else {
            this.routeParts = { path: url };
        }
    }
    /**
     * Parses the given string into 3 parts:
     * - string path (wrapped in an array to be compatible with Angular syntax for the `routerLink`)
     * - query params (as an object)
     * - hash fragment (string)
     */
    splitUrl(url = '') {
        const { queryParams, fragment } = this.router.parseUrl(url);
        const [, path] = url.match(this.URL_SPLIT);
        // wrap path in an array, to have the Angular-like path format
        return { path: [path], queryParams, fragment };
    }
    /**
     * Prepends a leading slash to the given URL string, in case it doesn't have it.
     */
    getAbsoluteUrl(url) {
        return url.startsWith('/') ? url : '/' + url;
    }
};
GenericLinkComponent.ctorParameters = () => [
    { type: Router }
];
__decorate([
    Input()
], GenericLinkComponent.prototype, "url", void 0);
__decorate([
    Input()
], GenericLinkComponent.prototype, "target", void 0);
__decorate([
    Input()
], GenericLinkComponent.prototype, "class", void 0);
__decorate([
    Input()
], GenericLinkComponent.prototype, "id", void 0);
__decorate([
    Input()
], GenericLinkComponent.prototype, "style", void 0);
__decorate([
    Input()
], GenericLinkComponent.prototype, "title", void 0);
GenericLinkComponent = __decorate([
    Component({
        selector: 'cx-generic-link',
        template: "<!-- https://github.com/angular/angular/issues/24567 -->\r\n\r\n<ng-container *ngIf=\"isExternalUrl(); else isLocalUrl\">\r\n  <a\r\n    role=\"link\"\r\n    [href]=\"url\"\r\n    [attr.target]=\"target\"\r\n    [attr.rel]=\"rel\"\r\n    [attr.class]=\"class\"\r\n    [attr.id]=\"id\"\r\n    [attr.style]=\"style\"\r\n    [attr.title]=\"title\"\r\n  >\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </a>\r\n</ng-container>\r\n\r\n<ng-template #isLocalUrl>\r\n  <a\r\n    role=\"link\"\r\n    [routerLink]=\"routerUrl\"\r\n    [queryParams]=\"queryParams\"\r\n    [fragment]=\"fragment\"\r\n    [attr.target]=\"target\"\r\n    [attr.class]=\"class\"\r\n    [attr.id]=\"id\"\r\n    [attr.style]=\"style\"\r\n    [attr.title]=\"title\"\r\n  >\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </a>\r\n</ng-template>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n"
    })
], GenericLinkComponent);
export { GenericLinkComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJpYy1saW5rLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvc3RvcmVmcm9udC8iLCJzb3VyY2VzIjpbInNoYXJlZC9jb21wb25lbnRzL2dlbmVyaWMtbGluay9nZW5lcmljLWxpbmsuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBNEIsTUFBTSxlQUFlLENBQUM7QUFDM0UsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQWNqRDs7R0FFRztBQUtILElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQW9CO0lBQy9CLFlBQXNCLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBRXBDOztXQUVHO1FBQ2MsbUJBQWMsR0FBVyxlQUFlLENBQUM7UUFFMUQ7Ozs7V0FJRztRQUNjLGNBQVMsR0FBRyxlQUFlLENBQUM7UUFFN0M7Ozs7V0FJRztRQUNLLGVBQVUsR0FBZSxFQUFFLENBQUM7SUFuQkcsQ0FBQztJQTRCeEM7O09BRUc7SUFDSCxhQUFhO1FBQ1gsT0FBTyxPQUFPLElBQUksQ0FBQyxHQUFHLEtBQUssUUFBUSxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRUQsSUFBSSxHQUFHO1FBQ0wsT0FBTyxJQUFJLENBQUMsTUFBTSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDdEQsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNsQixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUMvQztJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILElBQUksU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7SUFDOUIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQztJQUNyQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO0lBQ2xDLENBQUM7SUFFRDs7T0FFRztJQUNLLFdBQVcsQ0FBQyxHQUFtQjtRQUNyQyxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsRUFBRTtZQUMzQixHQUFHLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLDZFQUE2RTtZQUM3RyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBYSxDQUFDLENBQUM7U0FDaEQ7YUFBTTtZQUNMLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUM7U0FDakM7SUFDSCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSyxRQUFRLENBQUMsTUFBYyxFQUFFO1FBQy9CLE1BQU0sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUQsTUFBTSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFM0MsOERBQThEO1FBQzlELE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLENBQUM7SUFDakQsQ0FBQztJQUVEOztPQUVHO0lBQ0ssY0FBYyxDQUFDLEdBQVc7UUFDaEMsT0FBTyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDL0MsQ0FBQztDQUNGLENBQUE7O1lBbEcrQixNQUFNOztBQXFCM0I7SUFBUixLQUFLLEVBQUU7aURBQXFCO0FBQ3BCO0lBQVIsS0FBSyxFQUFFO29EQUFnQjtBQUNmO0lBQVIsS0FBSyxFQUFFO21EQUFlO0FBQ2Q7SUFBUixLQUFLLEVBQUU7Z0RBQVk7QUFDWDtJQUFSLEtBQUssRUFBRTttREFBZTtBQUNkO0lBQVIsS0FBSyxFQUFFO21EQUFlO0FBM0JaLG9CQUFvQjtJQUpoQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsaUJBQWlCO1FBQzNCLDA3QkFBNEM7S0FDN0MsQ0FBQztHQUNXLG9CQUFvQixDQW1HaEM7U0FuR1ksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBhcmFtcywgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuXHJcbi8vIHByaXZhdGVcclxuaW50ZXJmYWNlIFJvdXRlUGFydHMge1xyXG4gIC8qKiBQYXRoIGluIHRoZSBBbmd1bGFyLWxpa2UgYXJyYXkgZm9ybWF0ICovXHJcbiAgcGF0aD86IHN0cmluZ1tdO1xyXG5cclxuICAvKiogUXVlcnkgcGFyYW1zICovXHJcbiAgcXVlcnlQYXJhbXM/OiBQYXJhbXM7XHJcblxyXG4gIC8qKiBIYXNoIGZyYWdtZW50ICovXHJcbiAgZnJhZ21lbnQ/OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGlzIGNvbXBvbmVudCBuYXZpZ2F0ZXMgdXNpbmcgW3JvdXRlckxpbmtdIGF0dHJpYnV0ZSB3aGVuIGlucHV0ICd1cmwnIGlzIGEgcmVsYXRpdmUgdXJsLiBPdGhlcndpc2UgKHdoZW4gaXQncyBhYnNvbHV0ZSksIFtocmVmXSBpcyB1c2VkLlxyXG4gKi9cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdjeC1nZW5lcmljLWxpbmsnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9nZW5lcmljLWxpbmsuY29tcG9uZW50Lmh0bWwnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgR2VuZXJpY0xpbmtDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xyXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCByb3V0ZXI6IFJvdXRlcikge31cclxuXHJcbiAgLyoqXHJcbiAgICogUGF0dGVybiBtYXRjaGluZyBzdHJpbmcgc3RhcnRpbmcgd2l0aCBgaHR0cDovL2Agb3IgYGh0dHBzOi8vYC5cclxuICAgKi9cclxuICBwcml2YXRlIHJlYWRvbmx5IFBST1RPQ09MX1JFR0VYOiBSZWdFeHAgPSAvXmh0dHBzPzpcXC9cXC8vaTtcclxuXHJcbiAgLyoqXHJcbiAgICogVXNlZCB0byBzcGxpdCB1cmwgaW50byAyIHBhcnRzOlxyXG4gICAqIDEuIHRoZSBwYXRoXHJcbiAgICogMi4gcXVlcnkgcGFyYW1zICsgaGFzaCBmcmFnbWVudFxyXG4gICAqL1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgVVJMX1NQTElUID0gLyheW14jP10qKSguKikvO1xyXG5cclxuICAvKipcclxuICAgKiBQYXJzZWQgcGFydHMgb2YgdGhlIEBJbnB1dCBgdXJsYCwgd2hlbiBpdCdzIGEgbG9jYWwgVVJMLlxyXG4gICAqIEl0IHNob3VsZCBub3QgYmUgdXNlZCB3aGVuIHRoZSBgdXJsYCBpcyBleHRlcm5hbC5cclxuICAgKiBAc2VlIGB1cmxgXHJcbiAgICovXHJcbiAgcHJpdmF0ZSByb3V0ZVBhcnRzOiBSb3V0ZVBhcnRzID0ge307XHJcblxyXG4gIEBJbnB1dCgpIHVybDogc3RyaW5nIHwgYW55W107XHJcbiAgQElucHV0KCkgdGFyZ2V0OiBzdHJpbmc7XHJcbiAgQElucHV0KCkgY2xhc3M6IHN0cmluZztcclxuICBASW5wdXQoKSBpZDogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIHN0eWxlOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgdGl0bGU6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0cnVlIHdoZW4gdGhlIEBJbnB1dCBgdXJsYCBpcyBhIHN0cmluZyBzdGFydGluZyB3aXRoIGBodHRwOi8vYCBvciBgaHR0cHM6Ly9gLlxyXG4gICAqL1xyXG4gIGlzRXh0ZXJuYWxVcmwoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMudXJsID09PSAnc3RyaW5nJyAmJiB0aGlzLlBST1RPQ09MX1JFR0VYLnRlc3QodGhpcy51cmwpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHJlbCgpIHtcclxuICAgIHJldHVybiB0aGlzLnRhcmdldCA9PT0gJ19ibGFuaycgPyAnbm9vcGVuZXInIDogbnVsbDtcclxuICB9XHJcblxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuICAgIGlmIChjaGFuZ2VzWyd1cmwnXSkge1xyXG4gICAgICB0aGlzLnNldFVybFBhcnRzKGNoYW5nZXNbJ3VybCddLmN1cnJlbnRWYWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGUgcGFydCB3aXRoIHRoZSBwYXRoIG9mIHRoZSBsb2NhbCB1cmwuXHJcbiAgICovXHJcbiAgZ2V0IHJvdXRlclVybCgpOiBhbnlbXSB7XHJcbiAgICByZXR1cm4gdGhpcy5yb3V0ZVBhcnRzLnBhdGg7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGUgcGFydCB3aXRoIHRoZSBxdWVyeSBwYXJhbXMgb2YgdGhlIGxvY2FsIHVybC5cclxuICAgKi9cclxuICBnZXQgcXVlcnlQYXJhbXMoKTogUGFyYW1zIHtcclxuICAgIHJldHVybiB0aGlzLnJvdXRlUGFydHMucXVlcnlQYXJhbXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGUgcGFydCB3aXRoIHRoZSBoYXNoIGZyYWdtZW50IG9mIHRoZSBsb2NhbCB1cmwuXHJcbiAgICovXHJcbiAgZ2V0IGZyYWdtZW50KCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5yb3V0ZVBhcnRzLmZyYWdtZW50O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUGFyc2VzIHRoZSBnaXZlbiB1cmwgYW5kIHNldHMgdGhlIHByb3BlcnR5IGB1cmxQYXJ0c2AgYWNjb3JkaW5nbHkuXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzZXRVcmxQYXJ0cyh1cmw6IHN0cmluZyB8IGFueVtdKSB7XHJcbiAgICBpZiAodHlwZW9mIHVybCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgdXJsID0gdGhpcy5nZXRBYnNvbHV0ZVVybCh1cmwpOyAvLyBzdHJpbmcgbGlua3MgaW4gQ01TIHNvbWV0aW1lcyBkb24ndCBoYXZlIHRoZSBsZWFkaW5nIHNsYXNoLCBzbyBmaXggaXQgaGVyZVxyXG4gICAgICB0aGlzLnJvdXRlUGFydHMgPSB0aGlzLnNwbGl0VXJsKHVybCBhcyBzdHJpbmcpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5yb3V0ZVBhcnRzID0geyBwYXRoOiB1cmwgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFBhcnNlcyB0aGUgZ2l2ZW4gc3RyaW5nIGludG8gMyBwYXJ0czpcclxuICAgKiAtIHN0cmluZyBwYXRoICh3cmFwcGVkIGluIGFuIGFycmF5IHRvIGJlIGNvbXBhdGlibGUgd2l0aCBBbmd1bGFyIHN5bnRheCBmb3IgdGhlIGByb3V0ZXJMaW5rYClcclxuICAgKiAtIHF1ZXJ5IHBhcmFtcyAoYXMgYW4gb2JqZWN0KVxyXG4gICAqIC0gaGFzaCBmcmFnbWVudCAoc3RyaW5nKVxyXG4gICAqL1xyXG4gIHByaXZhdGUgc3BsaXRVcmwodXJsOiBzdHJpbmcgPSAnJyk6IFJvdXRlUGFydHMge1xyXG4gICAgY29uc3QgeyBxdWVyeVBhcmFtcywgZnJhZ21lbnQgfSA9IHRoaXMucm91dGVyLnBhcnNlVXJsKHVybCk7XHJcbiAgICBjb25zdCBbLCBwYXRoXSA9IHVybC5tYXRjaCh0aGlzLlVSTF9TUExJVCk7XHJcblxyXG4gICAgLy8gd3JhcCBwYXRoIGluIGFuIGFycmF5LCB0byBoYXZlIHRoZSBBbmd1bGFyLWxpa2UgcGF0aCBmb3JtYXRcclxuICAgIHJldHVybiB7IHBhdGg6IFtwYXRoXSwgcXVlcnlQYXJhbXMsIGZyYWdtZW50IH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBQcmVwZW5kcyBhIGxlYWRpbmcgc2xhc2ggdG8gdGhlIGdpdmVuIFVSTCBzdHJpbmcsIGluIGNhc2UgaXQgZG9lc24ndCBoYXZlIGl0LlxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0QWJzb2x1dGVVcmwodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHVybC5zdGFydHNXaXRoKCcvJykgPyB1cmwgOiAnLycgKyB1cmw7XHJcbiAgfVxyXG59XHJcbiJdfQ==