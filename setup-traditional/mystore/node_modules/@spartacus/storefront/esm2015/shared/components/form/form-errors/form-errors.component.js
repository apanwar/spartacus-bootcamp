import { __decorate } from "tslib";
import { Component, Input, ChangeDetectionStrategy, HostBinding, } from '@angular/core';
import { startWith, map } from 'rxjs/operators';
/**
 * This component renders form errors.
 */
let FormErrorsComponent = class FormErrorsComponent {
    set control(control) {
        this._control = control;
        this.errors$ = control === null || control === void 0 ? void 0 : control.statusChanges.pipe(startWith({}), map(() => control.errors || {}), map((errors) => Object.entries(errors)
            .filter((error) => error[1])
            .map((error) => error[0])));
    }
    get control() {
        return this._control;
    }
    get invalid() {
        return this.control.invalid;
    }
    get dirty() {
        return this.control.dirty;
    }
    get touched() {
        return this.control.touched;
    }
};
__decorate([
    Input()
], FormErrorsComponent.prototype, "control", null);
__decorate([
    HostBinding('class.control-invalid')
], FormErrorsComponent.prototype, "invalid", null);
__decorate([
    HostBinding('class.control-dirty')
], FormErrorsComponent.prototype, "dirty", null);
__decorate([
    HostBinding('class.control-touched')
], FormErrorsComponent.prototype, "touched", null);
FormErrorsComponent = __decorate([
    Component({
        selector: 'cx-form-errors',
        template: "<p *ngFor=\"let errorName of errors$ | async\">\r\n  {{ 'formErrors.' + errorName | cxTranslate }}\r\n</p>\r\n",
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], FormErrorsComponent);
export { FormErrorsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1lcnJvcnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9zdG9yZWZyb250LyIsInNvdXJjZXMiOlsic2hhcmVkL2NvbXBvbmVudHMvZm9ybS9mb3JtLWVycm9ycy9mb3JtLWVycm9ycy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLHVCQUF1QixFQUN2QixXQUFXLEdBQ1osTUFBTSxlQUFlLENBQUM7QUFHdkIsT0FBTyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVoRDs7R0FFRztBQU1ILElBQWEsbUJBQW1CLEdBQWhDLE1BQWEsbUJBQW1CO0lBSzlCLElBQUksT0FBTyxDQUFDLE9BQW9CO1FBQzlCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1FBRXhCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLGFBQWEsQ0FBQyxJQUFJLENBQ3hDLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFDYixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsRUFDL0IsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FDYixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQzthQUNuQixNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMzQixHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUM1QixDQUNGLENBQUM7SUFDSixDQUFDO0lBRUQsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFcUMsSUFBSSxPQUFPO1FBQy9DLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7SUFDOUIsQ0FBQztJQUNtQyxJQUFJLEtBQUs7UUFDM0MsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUM1QixDQUFDO0lBQ3FDLElBQUksT0FBTztRQUMvQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO0lBQzlCLENBQUM7Q0FDRixDQUFBO0FBM0JDO0lBREMsS0FBSyxFQUFFO2tEQWFQO0FBTXFDO0lBQXJDLFdBQVcsQ0FBQyx1QkFBdUIsQ0FBQztrREFFcEM7QUFDbUM7SUFBbkMsV0FBVyxDQUFDLHFCQUFxQixDQUFDO2dEQUVsQztBQUNxQztJQUFyQyxXQUFXLENBQUMsdUJBQXVCLENBQUM7a0RBRXBDO0FBL0JVLG1CQUFtQjtJQUwvQixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsZ0JBQWdCO1FBQzFCLDBIQUEyQztRQUMzQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtLQUNoRCxDQUFDO0dBQ1csbUJBQW1CLENBZ0MvQjtTQWhDWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENvbXBvbmVudCxcclxuICBJbnB1dCxcclxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcclxuICBIb3N0QmluZGluZyxcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRm9ybUNvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgc3RhcnRXaXRoLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG4vKipcclxuICogVGhpcyBjb21wb25lbnQgcmVuZGVycyBmb3JtIGVycm9ycy5cclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnY3gtZm9ybS1lcnJvcnMnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9mb3JtLWVycm9ycy5jb21wb25lbnQuaHRtbCcsXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGb3JtRXJyb3JzQ29tcG9uZW50IHtcclxuICBfY29udHJvbDogRm9ybUNvbnRyb2w7XHJcbiAgZXJyb3JzJDogT2JzZXJ2YWJsZTxzdHJpbmdbXT47XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgc2V0IGNvbnRyb2woY29udHJvbDogRm9ybUNvbnRyb2wpIHtcclxuICAgIHRoaXMuX2NvbnRyb2wgPSBjb250cm9sO1xyXG5cclxuICAgIHRoaXMuZXJyb3JzJCA9IGNvbnRyb2w/LnN0YXR1c0NoYW5nZXMucGlwZShcclxuICAgICAgc3RhcnRXaXRoKHt9KSxcclxuICAgICAgbWFwKCgpID0+IGNvbnRyb2wuZXJyb3JzIHx8IHt9KSxcclxuICAgICAgbWFwKChlcnJvcnMpID0+XHJcbiAgICAgICAgT2JqZWN0LmVudHJpZXMoZXJyb3JzKVxyXG4gICAgICAgICAgLmZpbHRlcigoZXJyb3IpID0+IGVycm9yWzFdKVxyXG4gICAgICAgICAgLm1hcCgoZXJyb3IpID0+IGVycm9yWzBdKVxyXG4gICAgICApXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGNvbnRyb2woKTogRm9ybUNvbnRyb2wge1xyXG4gICAgcmV0dXJuIHRoaXMuX2NvbnRyb2w7XHJcbiAgfVxyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmNvbnRyb2wtaW52YWxpZCcpIGdldCBpbnZhbGlkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29udHJvbC5pbnZhbGlkO1xyXG4gIH1cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmNvbnRyb2wtZGlydHknKSBnZXQgZGlydHkoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb250cm9sLmRpcnR5O1xyXG4gIH1cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmNvbnRyb2wtdG91Y2hlZCcpIGdldCB0b3VjaGVkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29udHJvbC50b3VjaGVkO1xyXG4gIH1cclxufVxyXG4iXX0=