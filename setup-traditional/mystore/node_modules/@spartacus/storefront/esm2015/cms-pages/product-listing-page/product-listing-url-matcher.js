import { inject, InjectionToken } from '@angular/core';
import { DEFAULT_URL_MATCHER, UrlMatcherService, } from '@spartacus/core';
import { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';
export function getProductListingUrlMatcherFactory(service, defaultMatcherFactory) {
    const factory = (route) => {
        const defaultMatcher = defaultMatcherFactory(route);
        const suffixPLPMatcher = getSuffixUrlMatcher({
            marker: 'c',
            paramName: 'categoryCode',
        });
        return service.getCombined([defaultMatcher, suffixPLPMatcher]);
    };
    return factory;
}
/**
 * Injection token with url matcher factory for PLP.
 * The provided url matcher matches both:
 * - the configured `paths` from routing config and
 * - custom pattern  `** / c / :categoryCode`
 *
 * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER
 * or additional matchers can be added for a specific route.
 *
 * Note: Matchers will "match" a route, but do not contribute to the creation of the route, nor do they guard routes.
 */
export const PRODUCT_LISTING_URL_MATCHER = new InjectionToken('PRODUCT_LISTING_URL_MATCHER', {
    providedIn: 'root',
    factory: () => getProductListingUrlMatcherFactory(inject(UrlMatcherService), inject(DEFAULT_URL_MATCHER)),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1saXN0aW5nLXVybC1tYXRjaGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9zdG9yZWZyb250LyIsInNvdXJjZXMiOlsiY21zLXBhZ2VzL3Byb2R1Y3QtbGlzdGluZy1wYWdlL3Byb2R1Y3QtbGlzdGluZy11cmwtbWF0Y2hlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RCxPQUFPLEVBQ0wsbUJBQW1CLEVBRW5CLGlCQUFpQixHQUNsQixNQUFNLGlCQUFpQixDQUFDO0FBQ3pCLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDhEQUE4RCxDQUFDO0FBRW5HLE1BQU0sVUFBVSxrQ0FBa0MsQ0FDaEQsT0FBMEIsRUFDMUIscUJBQXdDO0lBRXhDLE1BQU0sT0FBTyxHQUFHLENBQUMsS0FBWSxFQUFFLEVBQUU7UUFDL0IsTUFBTSxjQUFjLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEQsTUFBTSxnQkFBZ0IsR0FBRyxtQkFBbUIsQ0FBQztZQUMzQyxNQUFNLEVBQUUsR0FBRztZQUNYLFNBQVMsRUFBRSxjQUFjO1NBQzFCLENBQUMsQ0FBQztRQUNILE9BQU8sT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLGNBQWMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7SUFDakUsQ0FBQyxDQUFDO0lBQ0YsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQztBQUVEOzs7Ozs7Ozs7O0dBVUc7QUFDSCxNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyxJQUFJLGNBQWMsQ0FFM0QsNkJBQTZCLEVBQUU7SUFDL0IsVUFBVSxFQUFFLE1BQU07SUFDbEIsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUNaLGtDQUFrQyxDQUNoQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsRUFDekIsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQzVCO0NBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5qZWN0LCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7XHJcbiAgREVGQVVMVF9VUkxfTUFUQ0hFUixcclxuICBVcmxNYXRjaGVyRmFjdG9yeSxcclxuICBVcmxNYXRjaGVyU2VydmljZSxcclxufSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xyXG5pbXBvcnQgeyBnZXRTdWZmaXhVcmxNYXRjaGVyIH0gZnJvbSAnLi4vLi4vY21zLXN0cnVjdHVyZS9yb3V0aW5nL3N1ZmZpeC1yb3V0ZXMvc3VmZml4LXVybC1tYXRjaGVyJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQcm9kdWN0TGlzdGluZ1VybE1hdGNoZXJGYWN0b3J5KFxyXG4gIHNlcnZpY2U6IFVybE1hdGNoZXJTZXJ2aWNlLFxyXG4gIGRlZmF1bHRNYXRjaGVyRmFjdG9yeTogVXJsTWF0Y2hlckZhY3RvcnlcclxuKTogVXJsTWF0Y2hlckZhY3Rvcnkge1xyXG4gIGNvbnN0IGZhY3RvcnkgPSAocm91dGU6IFJvdXRlKSA9PiB7XHJcbiAgICBjb25zdCBkZWZhdWx0TWF0Y2hlciA9IGRlZmF1bHRNYXRjaGVyRmFjdG9yeShyb3V0ZSk7XHJcbiAgICBjb25zdCBzdWZmaXhQTFBNYXRjaGVyID0gZ2V0U3VmZml4VXJsTWF0Y2hlcih7XHJcbiAgICAgIG1hcmtlcjogJ2MnLFxyXG4gICAgICBwYXJhbU5hbWU6ICdjYXRlZ29yeUNvZGUnLFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gc2VydmljZS5nZXRDb21iaW5lZChbZGVmYXVsdE1hdGNoZXIsIHN1ZmZpeFBMUE1hdGNoZXJdKTtcclxuICB9O1xyXG4gIHJldHVybiBmYWN0b3J5O1xyXG59XHJcblxyXG4vKipcclxuICogSW5qZWN0aW9uIHRva2VuIHdpdGggdXJsIG1hdGNoZXIgZmFjdG9yeSBmb3IgUExQLlxyXG4gKiBUaGUgcHJvdmlkZWQgdXJsIG1hdGNoZXIgbWF0Y2hlcyBib3RoOlxyXG4gKiAtIHRoZSBjb25maWd1cmVkIGBwYXRoc2AgZnJvbSByb3V0aW5nIGNvbmZpZyBhbmRcclxuICogLSBjdXN0b20gcGF0dGVybiAgYCoqIC8gYyAvIDpjYXRlZ29yeUNvZGVgXHJcbiAqXHJcbiAqIElmIHRoZSB0aGlzIG1hdGNoZXIgZG9lc24ndCBmaXQgdGhlIHJlcXVpcmVtZW50cywgaXQgY2FuIGJlIHJlcGxhY2VkIHdpdGggdGhlIERFRkFVTFRfVVJMX01BVENIRVJcclxuICogb3IgYWRkaXRpb25hbCBtYXRjaGVycyBjYW4gYmUgYWRkZWQgZm9yIGEgc3BlY2lmaWMgcm91dGUuXHJcbiAqXHJcbiAqIE5vdGU6IE1hdGNoZXJzIHdpbGwgXCJtYXRjaFwiIGEgcm91dGUsIGJ1dCBkbyBub3QgY29udHJpYnV0ZSB0byB0aGUgY3JlYXRpb24gb2YgdGhlIHJvdXRlLCBub3IgZG8gdGhleSBndWFyZCByb3V0ZXMuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgUFJPRFVDVF9MSVNUSU5HX1VSTF9NQVRDSEVSID0gbmV3IEluamVjdGlvblRva2VuPFxyXG4gIFVybE1hdGNoZXJGYWN0b3J5XHJcbj4oJ1BST0RVQ1RfTElTVElOR19VUkxfTUFUQ0hFUicsIHtcclxuICBwcm92aWRlZEluOiAncm9vdCcsXHJcbiAgZmFjdG9yeTogKCkgPT5cclxuICAgIGdldFByb2R1Y3RMaXN0aW5nVXJsTWF0Y2hlckZhY3RvcnkoXHJcbiAgICAgIGluamVjdChVcmxNYXRjaGVyU2VydmljZSksXHJcbiAgICAgIGluamVjdChERUZBVUxUX1VSTF9NQVRDSEVSKVxyXG4gICAgKSxcclxufSk7XHJcbiJdfQ==