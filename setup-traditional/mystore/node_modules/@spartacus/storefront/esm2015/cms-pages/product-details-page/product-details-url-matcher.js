import { inject, InjectionToken } from '@angular/core';
import { DEFAULT_URL_MATCHER, UrlMatcherService, } from '@spartacus/core';
import { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';
export function getProductDetailsUrlMatcherFactory(service, defaultMatcherFactory) {
    const factory = (route) => {
        const defaultMatcher = defaultMatcherFactory(route);
        const suffixPDPMatcher = getSuffixUrlMatcher({
            marker: 'p',
            paramName: 'productCode',
        });
        return service.getCombined([defaultMatcher, suffixPDPMatcher]);
    };
    return factory;
}
/**
 * Injection token with url matcher factory for PDP.
 * The provided url matcher matches both:
 * - the configured `paths` from routing config and
 * - custom pattern  `** / p / :productCode`
 *
 * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER
 * or additional matchers can be added for a specific route.
 *
 * Note: Matchers will "match" a route, but do not contribute to the creation of the route, nor do they guard routes.
 */
export const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken('PRODUCT_DETAILS_URL_MATCHER', {
    providedIn: 'root',
    factory: () => getProductDetailsUrlMatcherFactory(inject(UrlMatcherService), inject(DEFAULT_URL_MATCHER)),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1kZXRhaWxzLXVybC1tYXRjaGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9zdG9yZWZyb250LyIsInNvdXJjZXMiOlsiY21zLXBhZ2VzL3Byb2R1Y3QtZGV0YWlscy1wYWdlL3Byb2R1Y3QtZGV0YWlscy11cmwtbWF0Y2hlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RCxPQUFPLEVBQ0wsbUJBQW1CLEVBRW5CLGlCQUFpQixHQUNsQixNQUFNLGlCQUFpQixDQUFDO0FBQ3pCLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDhEQUE4RCxDQUFDO0FBRW5HLE1BQU0sVUFBVSxrQ0FBa0MsQ0FDaEQsT0FBMEIsRUFDMUIscUJBQXdDO0lBRXhDLE1BQU0sT0FBTyxHQUFHLENBQUMsS0FBWSxFQUFFLEVBQUU7UUFDL0IsTUFBTSxjQUFjLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEQsTUFBTSxnQkFBZ0IsR0FBRyxtQkFBbUIsQ0FBQztZQUMzQyxNQUFNLEVBQUUsR0FBRztZQUNYLFNBQVMsRUFBRSxhQUFhO1NBQ3pCLENBQUMsQ0FBQztRQUNILE9BQU8sT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLGNBQWMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7SUFDakUsQ0FBQyxDQUFDO0lBQ0YsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQztBQUVEOzs7Ozs7Ozs7O0dBVUc7QUFDSCxNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyxJQUFJLGNBQWMsQ0FFM0QsNkJBQTZCLEVBQUU7SUFDL0IsVUFBVSxFQUFFLE1BQU07SUFDbEIsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUNaLGtDQUFrQyxDQUNoQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsRUFDekIsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQzVCO0NBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5qZWN0LCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7XHJcbiAgREVGQVVMVF9VUkxfTUFUQ0hFUixcclxuICBVcmxNYXRjaGVyRmFjdG9yeSxcclxuICBVcmxNYXRjaGVyU2VydmljZSxcclxufSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xyXG5pbXBvcnQgeyBnZXRTdWZmaXhVcmxNYXRjaGVyIH0gZnJvbSAnLi4vLi4vY21zLXN0cnVjdHVyZS9yb3V0aW5nL3N1ZmZpeC1yb3V0ZXMvc3VmZml4LXVybC1tYXRjaGVyJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQcm9kdWN0RGV0YWlsc1VybE1hdGNoZXJGYWN0b3J5KFxyXG4gIHNlcnZpY2U6IFVybE1hdGNoZXJTZXJ2aWNlLFxyXG4gIGRlZmF1bHRNYXRjaGVyRmFjdG9yeTogVXJsTWF0Y2hlckZhY3RvcnlcclxuKTogVXJsTWF0Y2hlckZhY3Rvcnkge1xyXG4gIGNvbnN0IGZhY3RvcnkgPSAocm91dGU6IFJvdXRlKSA9PiB7XHJcbiAgICBjb25zdCBkZWZhdWx0TWF0Y2hlciA9IGRlZmF1bHRNYXRjaGVyRmFjdG9yeShyb3V0ZSk7XHJcbiAgICBjb25zdCBzdWZmaXhQRFBNYXRjaGVyID0gZ2V0U3VmZml4VXJsTWF0Y2hlcih7XHJcbiAgICAgIG1hcmtlcjogJ3AnLFxyXG4gICAgICBwYXJhbU5hbWU6ICdwcm9kdWN0Q29kZScsXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBzZXJ2aWNlLmdldENvbWJpbmVkKFtkZWZhdWx0TWF0Y2hlciwgc3VmZml4UERQTWF0Y2hlcl0pO1xyXG4gIH07XHJcbiAgcmV0dXJuIGZhY3Rvcnk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbmplY3Rpb24gdG9rZW4gd2l0aCB1cmwgbWF0Y2hlciBmYWN0b3J5IGZvciBQRFAuXHJcbiAqIFRoZSBwcm92aWRlZCB1cmwgbWF0Y2hlciBtYXRjaGVzIGJvdGg6XHJcbiAqIC0gdGhlIGNvbmZpZ3VyZWQgYHBhdGhzYCBmcm9tIHJvdXRpbmcgY29uZmlnIGFuZFxyXG4gKiAtIGN1c3RvbSBwYXR0ZXJuICBgKiogLyBwIC8gOnByb2R1Y3RDb2RlYFxyXG4gKlxyXG4gKiBJZiB0aGUgdGhpcyBtYXRjaGVyIGRvZXNuJ3QgZml0IHRoZSByZXF1aXJlbWVudHMsIGl0IGNhbiBiZSByZXBsYWNlZCB3aXRoIHRoZSBERUZBVUxUX1VSTF9NQVRDSEVSXHJcbiAqIG9yIGFkZGl0aW9uYWwgbWF0Y2hlcnMgY2FuIGJlIGFkZGVkIGZvciBhIHNwZWNpZmljIHJvdXRlLlxyXG4gKlxyXG4gKiBOb3RlOiBNYXRjaGVycyB3aWxsIFwibWF0Y2hcIiBhIHJvdXRlLCBidXQgZG8gbm90IGNvbnRyaWJ1dGUgdG8gdGhlIGNyZWF0aW9uIG9mIHRoZSByb3V0ZSwgbm9yIGRvIHRoZXkgZ3VhcmQgcm91dGVzLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFBST0RVQ1RfREVUQUlMU19VUkxfTUFUQ0hFUiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxcclxuICBVcmxNYXRjaGVyRmFjdG9yeVxyXG4+KCdQUk9EVUNUX0RFVEFJTFNfVVJMX01BVENIRVInLCB7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG4gIGZhY3Rvcnk6ICgpID0+XHJcbiAgICBnZXRQcm9kdWN0RGV0YWlsc1VybE1hdGNoZXJGYWN0b3J5KFxyXG4gICAgICBpbmplY3QoVXJsTWF0Y2hlclNlcnZpY2UpLFxyXG4gICAgICBpbmplY3QoREVGQVVMVF9VUkxfTUFUQ0hFUilcclxuICAgICksXHJcbn0pO1xyXG4iXX0=