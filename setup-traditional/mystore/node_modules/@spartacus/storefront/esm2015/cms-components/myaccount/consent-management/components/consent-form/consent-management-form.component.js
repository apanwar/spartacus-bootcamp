import { __decorate } from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { ANONYMOUS_CONSENT_STATUS, } from '@spartacus/core';
let ConsentManagementFormComponent = class ConsentManagementFormComponent {
    constructor() {
        this.consentGiven = false;
        this.requiredConsents = [];
        this.consentChanged = new EventEmitter();
    }
    ngOnInit() {
        if (this.consent) {
            this.consentGiven = Boolean(this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN);
        }
        else {
            if (this.consentTemplate && this.consentTemplate.currentConsent) {
                if (this.consentTemplate.currentConsent.consentWithdrawnDate) {
                    this.consentGiven = false;
                }
                else if (this.consentTemplate.currentConsent.consentGivenDate) {
                    this.consentGiven = true;
                }
            }
        }
    }
    onConsentChange() {
        this.consentGiven = !this.consentGiven;
        this.consentChanged.emit({
            given: this.consentGiven,
            template: this.consentTemplate,
        });
    }
    isRequired(templateId) {
        return this.requiredConsents.includes(templateId);
    }
};
__decorate([
    Input()
], ConsentManagementFormComponent.prototype, "consentTemplate", void 0);
__decorate([
    Input()
], ConsentManagementFormComponent.prototype, "requiredConsents", void 0);
__decorate([
    Input()
], ConsentManagementFormComponent.prototype, "consent", void 0);
__decorate([
    Output()
], ConsentManagementFormComponent.prototype, "consentChanged", void 0);
ConsentManagementFormComponent = __decorate([
    Component({
        selector: 'cx-consent-management-form',
        template: "<div class=\"form-check\">\r\n  <label>\r\n    <input\r\n      type=\"checkbox\"\r\n      class=\"form-check-input\"\r\n      (change)=\"onConsentChange()\"\r\n      [checked]=\"consentGiven\"\r\n      [disabled]=\"isRequired(consentTemplate?.id)\"\r\n    />\r\n    <span class=\"form-check-label cx-be-bold\">\r\n      {{ consentTemplate?.name }}\r\n    </span>\r\n    <br />\r\n    <span class=\"form-check-label\">\r\n      {{ consentTemplate?.description }}\r\n    </span>\r\n  </label>\r\n</div>\r\n"
    })
], ConsentManagementFormComponent);
export { ConsentManagementFormComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc2VudC1tYW5hZ2VtZW50LWZvcm0uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9zdG9yZWZyb250LyIsInNvdXJjZXMiOlsiY21zLWNvbXBvbmVudHMvbXlhY2NvdW50L2NvbnNlbnQtbWFuYWdlbWVudC9jb21wb25lbnRzL2NvbnNlbnQtZm9ybS9jb25zZW50LW1hbmFnZW1lbnQtZm9ybS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUVMLHdCQUF3QixHQUV6QixNQUFNLGlCQUFpQixDQUFDO0FBTXpCLElBQWEsOEJBQThCLEdBQTNDLE1BQWEsOEJBQThCO0lBa0J6QztRQWpCQSxpQkFBWSxHQUFHLEtBQUssQ0FBQztRQU1yQixxQkFBZ0IsR0FBYSxFQUFFLENBQUM7UUFNaEMsbUJBQWMsR0FBRyxJQUFJLFlBQVksRUFHN0IsQ0FBQztJQUVVLENBQUM7SUFFaEIsUUFBUTtRQUNOLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FDekIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEtBQUssd0JBQXdCLENBQUMsS0FBSyxDQUM3RCxDQUFDO1NBQ0g7YUFBTTtZQUNMLElBQUksSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsRUFBRTtnQkFDL0QsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxvQkFBb0IsRUFBRTtvQkFDNUQsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7aUJBQzNCO3FCQUFNLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLEVBQUU7b0JBQy9ELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO2lCQUMxQjthQUNGO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBRXZDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDO1lBQ3ZCLEtBQUssRUFBRSxJQUFJLENBQUMsWUFBWTtZQUN4QixRQUFRLEVBQUUsSUFBSSxDQUFDLGVBQWU7U0FDL0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFVBQVUsQ0FBQyxVQUFrQjtRQUMzQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDcEQsQ0FBQztDQUNGLENBQUE7QUE1Q0M7SUFEQyxLQUFLLEVBQUU7dUVBQ3lCO0FBR2pDO0lBREMsS0FBSyxFQUFFO3dFQUN3QjtBQUdoQztJQURDLEtBQUssRUFBRTsrREFDa0I7QUFHMUI7SUFEQyxNQUFNLEVBQUU7c0VBSUo7QUFoQk0sOEJBQThCO0lBSjFDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSw0QkFBNEI7UUFDdEMsb2dCQUF1RDtLQUN4RCxDQUFDO0dBQ1csOEJBQThCLENBZ0QxQztTQWhEWSw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7XHJcbiAgQW5vbnltb3VzQ29uc2VudCxcclxuICBBTk9OWU1PVVNfQ09OU0VOVF9TVEFUVVMsXHJcbiAgQ29uc2VudFRlbXBsYXRlLFxyXG59IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2N4LWNvbnNlbnQtbWFuYWdlbWVudC1mb3JtJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vY29uc2VudC1tYW5hZ2VtZW50LWZvcm0uY29tcG9uZW50Lmh0bWwnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ29uc2VudE1hbmFnZW1lbnRGb3JtQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBjb25zZW50R2l2ZW4gPSBmYWxzZTtcclxuXHJcbiAgQElucHV0KClcclxuICBjb25zZW50VGVtcGxhdGU6IENvbnNlbnRUZW1wbGF0ZTtcclxuXHJcbiAgQElucHV0KClcclxuICByZXF1aXJlZENvbnNlbnRzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIGNvbnNlbnQ6IEFub255bW91c0NvbnNlbnQ7XHJcblxyXG4gIEBPdXRwdXQoKVxyXG4gIGNvbnNlbnRDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcjx7XHJcbiAgICBnaXZlbjogYm9vbGVhbjtcclxuICAgIHRlbXBsYXRlOiBDb25zZW50VGVtcGxhdGU7XHJcbiAgfT4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmNvbnNlbnQpIHtcclxuICAgICAgdGhpcy5jb25zZW50R2l2ZW4gPSBCb29sZWFuKFxyXG4gICAgICAgIHRoaXMuY29uc2VudC5jb25zZW50U3RhdGUgPT09IEFOT05ZTU9VU19DT05TRU5UX1NUQVRVUy5HSVZFTlxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKHRoaXMuY29uc2VudFRlbXBsYXRlICYmIHRoaXMuY29uc2VudFRlbXBsYXRlLmN1cnJlbnRDb25zZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29uc2VudFRlbXBsYXRlLmN1cnJlbnRDb25zZW50LmNvbnNlbnRXaXRoZHJhd25EYXRlKSB7XHJcbiAgICAgICAgICB0aGlzLmNvbnNlbnRHaXZlbiA9IGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5jb25zZW50VGVtcGxhdGUuY3VycmVudENvbnNlbnQuY29uc2VudEdpdmVuRGF0ZSkge1xyXG4gICAgICAgICAgdGhpcy5jb25zZW50R2l2ZW4gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25Db25zZW50Q2hhbmdlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5jb25zZW50R2l2ZW4gPSAhdGhpcy5jb25zZW50R2l2ZW47XHJcblxyXG4gICAgdGhpcy5jb25zZW50Q2hhbmdlZC5lbWl0KHtcclxuICAgICAgZ2l2ZW46IHRoaXMuY29uc2VudEdpdmVuLFxyXG4gICAgICB0ZW1wbGF0ZTogdGhpcy5jb25zZW50VGVtcGxhdGUsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGlzUmVxdWlyZWQodGVtcGxhdGVJZDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5yZXF1aXJlZENvbnNlbnRzLmluY2x1ZGVzKHRlbXBsYXRlSWQpO1xyXG4gIH1cclxufVxyXG4iXX0=