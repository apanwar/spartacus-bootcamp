import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { tap } from 'rxjs/operators';
import { OrderAmendService } from '../../amend-order.service';
let CancelOrderConfirmationComponent = class CancelOrderConfirmationComponent {
    constructor(orderAmendService) {
        this.orderAmendService = orderAmendService;
        this.form$ = this.orderAmendService
            .getForm()
            .pipe(tap((form) => (this.orderCode = form.value.orderCode)));
        this.entries$ = this.orderAmendService.getAmendedEntries();
    }
    submit(form) {
        if (form.valid) {
            this.orderAmendService.save();
        }
        else {
            form.markAllAsTouched();
        }
    }
};
CancelOrderConfirmationComponent.ctorParameters = () => [
    { type: OrderAmendService }
];
CancelOrderConfirmationComponent = __decorate([
    Component({
        selector: 'cx-cancel-order-confirmation',
        template: "<form\r\n  *ngIf=\"form$ | async as form\"\r\n  [formGroup]=\"form\"\r\n  (ngSubmit)=\"submit(form)\"\r\n>\r\n  <ng-container *ngTemplateOutlet=\"actions\"></ng-container>\r\n\r\n  <cx-amend-order-items\r\n    *ngIf=\"entries$ | async as entries\"\r\n    [entries]=\"entries\"\r\n    [isConfirmation]=\"true\"\r\n  >\r\n  </cx-amend-order-items>\r\n\r\n  <ng-container *ngTemplateOutlet=\"actions\"></ng-container>\r\n\r\n  <ng-template #actions>\r\n    <cx-amend-order-actions\r\n      *ngIf=\"orderCode\"\r\n      [orderCode]=\"orderCode\"\r\n      [amendOrderForm]=\"form\"\r\n      backRoute=\"orderCancel\"\r\n    ></cx-amend-order-actions>\r\n  </ng-template>\r\n</form>\r\n",
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], CancelOrderConfirmationComponent);
export { CancelOrderConfirmationComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FuY2VsLW9yZGVyLWNvbmZpcm1hdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL3N0b3JlZnJvbnQvIiwic291cmNlcyI6WyJjbXMtY29tcG9uZW50cy9teWFjY291bnQvb3JkZXIvYW1lbmQtb3JkZXIvY2FuY2VsbGF0aW9ucy9jYW5jZWwtb3JkZXItY29uZmlybWF0aW9uL2NhbmNlbC1vcmRlci1jb25maXJtYXRpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSW5FLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQU85RCxJQUFhLGdDQUFnQyxHQUE3QyxNQUFhLGdDQUFnQztJQVczQyxZQUFzQixpQkFBb0M7UUFBcEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQVIxRCxVQUFLLEdBQUcsSUFBSSxDQUFDLGlCQUFpQjthQUMzQixPQUFPLEVBQUU7YUFDVCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFaEUsYUFBUSxHQUVKLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBRWMsQ0FBQztJQUU5RCxNQUFNLENBQUMsSUFBZTtRQUNwQixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDL0I7YUFBTTtZQUNMLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQztDQUNGLENBQUE7O1lBVDBDLGlCQUFpQjs7QUFYL0MsZ0NBQWdDO0lBTDVDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSw4QkFBOEI7UUFDeEMsb3JCQUF5RDtRQUN6RCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtLQUNoRCxDQUFDO0dBQ1csZ0NBQWdDLENBb0I1QztTQXBCWSxnQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgT3JkZXJFbnRyeSB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBPcmRlckFtZW5kU2VydmljZSB9IGZyb20gJy4uLy4uL2FtZW5kLW9yZGVyLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdjeC1jYW5jZWwtb3JkZXItY29uZmlybWF0aW9uJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vY2FuY2VsLW9yZGVyLWNvbmZpcm1hdGlvbi5jb21wb25lbnQuaHRtbCcsXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDYW5jZWxPcmRlckNvbmZpcm1hdGlvbkNvbXBvbmVudCB7XHJcbiAgb3JkZXJDb2RlOiBzdHJpbmc7XHJcblxyXG4gIGZvcm0kID0gdGhpcy5vcmRlckFtZW5kU2VydmljZVxyXG4gICAgLmdldEZvcm0oKVxyXG4gICAgLnBpcGUodGFwKChmb3JtKSA9PiAodGhpcy5vcmRlckNvZGUgPSBmb3JtLnZhbHVlLm9yZGVyQ29kZSkpKTtcclxuXHJcbiAgZW50cmllcyQ6IE9ic2VydmFibGU8XHJcbiAgICBPcmRlckVudHJ5W11cclxuICA+ID0gdGhpcy5vcmRlckFtZW5kU2VydmljZS5nZXRBbWVuZGVkRW50cmllcygpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgb3JkZXJBbWVuZFNlcnZpY2U6IE9yZGVyQW1lbmRTZXJ2aWNlKSB7fVxyXG5cclxuICBzdWJtaXQoZm9ybTogRm9ybUdyb3VwKSB7XHJcbiAgICBpZiAoZm9ybS52YWxpZCkge1xyXG4gICAgICB0aGlzLm9yZGVyQW1lbmRTZXJ2aWNlLnNhdmUoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGZvcm0ubWFya0FsbEFzVG91Y2hlZCgpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=