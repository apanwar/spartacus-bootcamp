import { __decorate } from "tslib";
import { Component, EventEmitter, Output } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';
let UpdatePasswordFormComponent = class UpdatePasswordFormComponent {
    constructor(fb) {
        this.fb = fb;
        this.submitted = new EventEmitter();
        this.cancelled = new EventEmitter();
    }
    ngOnInit() {
        this.updatePasswordForm = this.fb.group({
            oldPassword: ['', [Validators.required]],
            newPassword: [
                '',
                [Validators.required, CustomFormValidators.passwordValidator],
            ],
            newPasswordConfirm: ['', [Validators.required]],
        }, {
            validators: CustomFormValidators.passwordsMustMatch('newPassword', 'newPasswordConfirm'),
        });
    }
    onSubmit() {
        if (this.updatePasswordForm.valid) {
            this.submitted.emit({
                oldPassword: this.updatePasswordForm.value.oldPassword,
                newPassword: this.updatePasswordForm.value.newPassword,
            });
        }
        else {
            this.updatePasswordForm.markAllAsTouched();
        }
    }
    onCancel() {
        this.cancelled.emit();
    }
};
UpdatePasswordFormComponent.ctorParameters = () => [
    { type: FormBuilder }
];
__decorate([
    Output()
], UpdatePasswordFormComponent.prototype, "submitted", void 0);
__decorate([
    Output()
], UpdatePasswordFormComponent.prototype, "cancelled", void 0);
UpdatePasswordFormComponent = __decorate([
    Component({
        selector: 'cx-update-password-form',
        template: "<form\r\n  (ngSubmit)=\"onSubmit()\"\r\n  [formGroup]=\"updatePasswordForm\"\r\n  class=\"cx-update-password-component\"\r\n>\r\n  <div class=\"form-group row\">\r\n    <div class=\"col-md-12\">\r\n      <label>\r\n        <span class=\"label-content\">{{\r\n          'updatePasswordForm.oldPassword.label' | cxTranslate\r\n        }}</span>\r\n        <input\r\n          class=\"form-control\"\r\n          type=\"password\"\r\n          name=\"oldPassword\"\r\n          placeholder=\"{{\r\n            'updatePasswordForm.oldPassword.placeholder' | cxTranslate\r\n          }}\"\r\n          formControlName=\"oldPassword\"\r\n        />\r\n        <cx-form-errors\r\n          [control]=\"updatePasswordForm.get('oldPassword')\"\r\n        ></cx-form-errors>\r\n      </label>\r\n    </div>\r\n  </div>\r\n  <div class=\"form-group row\">\r\n    <div class=\"col-md-12\">\r\n      <label>\r\n        <span class=\"label-content\">{{\r\n          'updatePasswordForm.newPassword.label' | cxTranslate\r\n        }}</span>\r\n        <input\r\n          class=\"form-control\"\r\n          type=\"password\"\r\n          name=\"newPassword\"\r\n          placeholder=\"{{\r\n            'updatePasswordForm.newPassword.placeholder' | cxTranslate\r\n          }}\"\r\n          formControlName=\"newPassword\"\r\n        />\r\n        <cx-form-errors\r\n          [control]=\"updatePasswordForm.get('newPassword')\"\r\n        ></cx-form-errors>\r\n      </label>\r\n    </div>\r\n  </div>\r\n  <div class=\"form-group row\">\r\n    <div class=\"col-md-12\">\r\n      <label>\r\n        <span class=\"label-content\">{{\r\n          'updatePasswordForm.confirmPassword.label' | cxTranslate\r\n        }}</span>\r\n        <input\r\n          class=\"form-control\"\r\n          type=\"password\"\r\n          name=\"newPasswordConfirm\"\r\n          placeholder=\"{{\r\n            'updatePasswordForm.confirmPassword.placeholder' | cxTranslate\r\n          }}\"\r\n          formControlName=\"newPasswordConfirm\"\r\n        />\r\n        <cx-form-errors\r\n          [control]=\"updatePasswordForm.get('newPasswordConfirm')\"\r\n        ></cx-form-errors>\r\n      </label>\r\n    </div>\r\n  </div>\r\n  <div class=\"form-group row\">\r\n    <div class=\"col-lg-6 col-md-12\">\r\n      <button\r\n        class=\"btn btn-block btn-secondary\"\r\n        type=\"button\"\r\n        (click)=\"onCancel()\"\r\n      >\r\n        {{ 'common.cancel' | cxTranslate }}\r\n      </button>\r\n    </div>\r\n    <div class=\"col-lg-6 col-md-12\">\r\n      <button class=\"btn btn-block btn-primary\" type=\"submit\">\r\n        {{ 'common.save' | cxTranslate }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n</form>\r\n"
    })
], UpdatePasswordFormComponent);
export { UpdatePasswordFormComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLXBhc3N3b3JkLWZvcm0uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9zdG9yZWZyb250LyIsInNvdXJjZXMiOlsiY21zLWNvbXBvbmVudHMvbXlhY2NvdW50L3VwZGF0ZS1wYXNzd29yZC9jb21wb25lbnRzL3VwZGF0ZS1wYXNzd29yZC1mb3JtL3VwZGF0ZS1wYXNzd29yZC1mb3JtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLCtEQUErRCxDQUFDO0FBS3JHLElBQWEsMkJBQTJCLEdBQXhDLE1BQWEsMkJBQTJCO0lBU3RDLFlBQW9CLEVBQWU7UUFBZixPQUFFLEdBQUYsRUFBRSxDQUFhO1FBTG5DLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBZ0QsQ0FBQztRQUc3RSxjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztJQUVDLENBQUM7SUFFdkMsUUFBUTtRQUNOLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FDckM7WUFDRSxXQUFXLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDeEMsV0FBVyxFQUFFO2dCQUNYLEVBQUU7Z0JBQ0YsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLG9CQUFvQixDQUFDLGlCQUFpQixDQUFDO2FBQzlEO1lBQ0Qsa0JBQWtCLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDaEQsRUFDRDtZQUNFLFVBQVUsRUFBRSxvQkFBb0IsQ0FBQyxrQkFBa0IsQ0FDakQsYUFBYSxFQUNiLG9CQUFvQixDQUNyQjtTQUNGLENBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO2dCQUNsQixXQUFXLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxXQUFXO2dCQUN0RCxXQUFXLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxXQUFXO2FBQ3ZELENBQUMsQ0FBQztTQUNKO2FBQU07WUFDTCxJQUFJLENBQUMsa0JBQWtCLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztTQUM1QztJQUNILENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN4QixDQUFDO0NBQ0YsQ0FBQTs7WUFuQ3lCLFdBQVc7O0FBTG5DO0lBREMsTUFBTSxFQUFFOzhEQUNvRTtBQUc3RTtJQURDLE1BQU0sRUFBRTs4REFDNEI7QUFQMUIsMkJBQTJCO0lBSnZDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSx5QkFBeUI7UUFDbkMsd3FGQUFvRDtLQUNyRCxDQUFDO0dBQ1csMkJBQTJCLENBNEN2QztTQTVDWSwyQkFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRm9ybUJ1aWxkZXIsIEZvcm1Hcm91cCwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgQ3VzdG9tRm9ybVZhbGlkYXRvcnMgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zaGFyZWQvdXRpbHMvdmFsaWRhdG9ycy9jdXN0b20tZm9ybS12YWxpZGF0b3JzJztcclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdjeC11cGRhdGUtcGFzc3dvcmQtZm9ybScsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3VwZGF0ZS1wYXNzd29yZC1mb3JtLmNvbXBvbmVudC5odG1sJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFVwZGF0ZVBhc3N3b3JkRm9ybUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgdXBkYXRlUGFzc3dvcmRGb3JtOiBGb3JtR3JvdXA7XHJcblxyXG4gIEBPdXRwdXQoKVxyXG4gIHN1Ym1pdHRlZCA9IG5ldyBFdmVudEVtaXR0ZXI8eyBvbGRQYXNzd29yZDogc3RyaW5nOyBuZXdQYXNzd29yZDogc3RyaW5nIH0+KCk7XHJcblxyXG4gIEBPdXRwdXQoKVxyXG4gIGNhbmNlbGxlZCA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBmYjogRm9ybUJ1aWxkZXIpIHt9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy51cGRhdGVQYXNzd29yZEZvcm0gPSB0aGlzLmZiLmdyb3VwKFxyXG4gICAgICB7XHJcbiAgICAgICAgb2xkUGFzc3dvcmQ6IFsnJywgW1ZhbGlkYXRvcnMucmVxdWlyZWRdXSxcclxuICAgICAgICBuZXdQYXNzd29yZDogW1xyXG4gICAgICAgICAgJycsXHJcbiAgICAgICAgICBbVmFsaWRhdG9ycy5yZXF1aXJlZCwgQ3VzdG9tRm9ybVZhbGlkYXRvcnMucGFzc3dvcmRWYWxpZGF0b3JdLFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgbmV3UGFzc3dvcmRDb25maXJtOiBbJycsIFtWYWxpZGF0b3JzLnJlcXVpcmVkXV0sXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICB2YWxpZGF0b3JzOiBDdXN0b21Gb3JtVmFsaWRhdG9ycy5wYXNzd29yZHNNdXN0TWF0Y2goXHJcbiAgICAgICAgICAnbmV3UGFzc3dvcmQnLFxyXG4gICAgICAgICAgJ25ld1Bhc3N3b3JkQ29uZmlybSdcclxuICAgICAgICApLFxyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgb25TdWJtaXQoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy51cGRhdGVQYXNzd29yZEZvcm0udmFsaWQpIHtcclxuICAgICAgdGhpcy5zdWJtaXR0ZWQuZW1pdCh7XHJcbiAgICAgICAgb2xkUGFzc3dvcmQ6IHRoaXMudXBkYXRlUGFzc3dvcmRGb3JtLnZhbHVlLm9sZFBhc3N3b3JkLFxyXG4gICAgICAgIG5ld1Bhc3N3b3JkOiB0aGlzLnVwZGF0ZVBhc3N3b3JkRm9ybS52YWx1ZS5uZXdQYXNzd29yZCxcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnVwZGF0ZVBhc3N3b3JkRm9ybS5tYXJrQWxsQXNUb3VjaGVkKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkNhbmNlbCgpOiB2b2lkIHtcclxuICAgIHRoaXMuY2FuY2VsbGVkLmVtaXQoKTtcclxuICB9XHJcbn1cclxuIl19