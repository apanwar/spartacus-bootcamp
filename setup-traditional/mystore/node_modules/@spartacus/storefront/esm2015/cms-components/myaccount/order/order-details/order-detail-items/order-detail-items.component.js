import { __decorate } from "tslib";
import { Component } from '@angular/core';
import { PromotionLocation, } from '@spartacus/core';
import { map } from 'rxjs/operators';
import { PromotionService } from '../../../../../shared/services/promotion/promotion.service';
import { OrderDetailsService } from '../order-details.service';
import { cancelledValues, completedValues, } from './order-consigned-entries/order-consigned-entries.model';
let OrderDetailItemsComponent = class OrderDetailItemsComponent {
    constructor(orderDetailsService, promotionService) {
        this.orderDetailsService = orderDetailsService;
        this.promotionService = promotionService;
        this.promotionLocation = PromotionLocation.Order;
        this.order$ = this.orderDetailsService.getOrderDetails();
    }
    ngOnInit() {
        this.orderPromotions$ = this.promotionService.getOrderPromotions(this.promotionLocation);
        this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);
        this.completed$ = this.getExactStatus(completedValues);
        this.cancel$ = this.getExactStatus(cancelledValues);
    }
    getExactStatus(consignmentStatus) {
        return this.order$.pipe(map((order) => {
            if (Boolean(order.consignments)) {
                return order.consignments.filter((consignment) => consignmentStatus.includes(consignment.status));
            }
        }));
    }
    getOtherStatus(...consignmentStatus) {
        return this.order$.pipe(map((order) => {
            if (Boolean(order.consignments)) {
                return order.consignments.filter((consignment) => !consignmentStatus.includes(consignment.status));
            }
        }));
    }
};
OrderDetailItemsComponent.ctorParameters = () => [
    { type: OrderDetailsService },
    { type: PromotionService }
];
OrderDetailItemsComponent = __decorate([
    Component({
        selector: 'cx-order-details-items',
        template: "<ng-container *ngIf=\"order$ | async as order\">\r\n  <ng-container\r\n    *ngIf=\"order.consignments?.length || order.unconsignedEntries?.length\"\r\n  >\r\n    <ng-container *ngIf=\"orderPromotions$ | async as orderPromotions\">\r\n      <cx-promotions [promotions]=\"orderPromotions\"></cx-promotions>\r\n    </ng-container>\r\n  </ng-container>\r\n\r\n  <!-- consigned entries -->\r\n  <ng-container *ngIf=\"order.consignments?.length\">\r\n    <cx-order-consigned-entries\r\n      *ngIf=\"others$ | async as others\"\r\n      [order]=\"order\"\r\n      [consignments]=\"others\"\r\n    ></cx-order-consigned-entries>\r\n\r\n    <cx-order-consigned-entries\r\n      *ngIf=\"completed$ | async as completed\"\r\n      [order]=\"order\"\r\n      [consignments]=\"completed\"\r\n    ></cx-order-consigned-entries>\r\n\r\n    <cx-order-consigned-entries\r\n      *ngIf=\"cancel$ | async as cancel\"\r\n      [order]=\"order\"\r\n      [consignments]=\"cancel\"\r\n    ></cx-order-consigned-entries>\r\n  </ng-container>\r\n\r\n  <!-- unconsigned entries -->\r\n  <ng-container *ngIf=\"order.unconsignedEntries?.length\">\r\n    <div class=\"cx-list row\">\r\n      <div class=\"cx-list-header col-12\">\r\n        <div class=\"cx-list-status\">\r\n          {{\r\n            'orderDetails.statusDisplay'\r\n              | cxTranslate: { context: order.statusDisplay }\r\n          }}\r\n        </div>\r\n      </div>\r\n      <div class=\"cx-list-item col-12\">\r\n        <cx-cart-item-list\r\n          [items]=\"order?.unconsignedEntries\"\r\n          [readonly]=\"true\"\r\n          [promotionLocation]=\"promotionLocation\"\r\n        ></cx-cart-item-list>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</ng-container>\r\n"
    })
], OrderDetailItemsComponent);
export { OrderDetailItemsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItZGV0YWlsLWl0ZW1zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvc3RvcmVmcm9udC8iLCJzb3VyY2VzIjpbImNtcy1jb21wb25lbnRzL215YWNjb3VudC9vcmRlci9vcmRlci1kZXRhaWxzL29yZGVyLWRldGFpbC1pdGVtcy9vcmRlci1kZXRhaWwtaXRlbXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFHTCxpQkFBaUIsR0FFbEIsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNERBQTRELENBQUM7QUFDOUYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDL0QsT0FBTyxFQUNMLGVBQWUsRUFDZixlQUFlLEdBQ2hCLE1BQU0seURBQXlELENBQUM7QUFNakUsSUFBYSx5QkFBeUIsR0FBdEMsTUFBYSx5QkFBeUI7SUFDcEMsWUFDWSxtQkFBd0MsRUFDeEMsZ0JBQWtDO1FBRGxDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFDeEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUc5QyxzQkFBaUIsR0FBc0IsaUJBQWlCLENBQUMsS0FBSyxDQUFDO1FBQy9ELFdBQU0sR0FBc0IsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGVBQWUsRUFBRSxDQUFDO0lBSHBFLENBQUM7SUFTSixRQUFRO1FBQ04sSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FDOUQsSUFBSSxDQUFDLGlCQUFpQixDQUN2QixDQUFDO1FBQ0YsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsZUFBZSxFQUFFLEdBQUcsZUFBZSxDQUFDLENBQUM7UUFDM0UsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRU8sY0FBYyxDQUNwQixpQkFBMkI7UUFFM0IsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDWixJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEVBQUU7Z0JBQy9CLE9BQU8sS0FBSyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUMvQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUMvQyxDQUFDO2FBQ0g7UUFDSCxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVPLGNBQWMsQ0FDcEIsR0FBRyxpQkFBMkI7UUFFOUIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDWixJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEVBQUU7Z0JBQy9CLE9BQU8sS0FBSyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQzlCLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQ2pFLENBQUM7YUFDSDtRQUNILENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0NBQ0YsQ0FBQTs7WUEvQ2tDLG1CQUFtQjtZQUN0QixnQkFBZ0I7O0FBSG5DLHlCQUF5QjtJQUpyQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsd0JBQXdCO1FBQ2xDLHd0REFBa0Q7S0FDbkQsQ0FBQztHQUNXLHlCQUF5QixDQWlEckM7U0FqRFkseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtcclxuICBDb25zaWdubWVudCxcclxuICBPcmRlcixcclxuICBQcm9tb3Rpb25Mb2NhdGlvbixcclxuICBQcm9tb3Rpb25SZXN1bHQsXHJcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IFByb21vdGlvblNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zaGFyZWQvc2VydmljZXMvcHJvbW90aW9uL3Byb21vdGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgT3JkZXJEZXRhaWxzU2VydmljZSB9IGZyb20gJy4uL29yZGVyLWRldGFpbHMuc2VydmljZSc7XHJcbmltcG9ydCB7XHJcbiAgY2FuY2VsbGVkVmFsdWVzLFxyXG4gIGNvbXBsZXRlZFZhbHVlcyxcclxufSBmcm9tICcuL29yZGVyLWNvbnNpZ25lZC1lbnRyaWVzL29yZGVyLWNvbnNpZ25lZC1lbnRyaWVzLm1vZGVsJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnY3gtb3JkZXItZGV0YWlscy1pdGVtcycsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL29yZGVyLWRldGFpbC1pdGVtcy5jb21wb25lbnQuaHRtbCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBPcmRlckRldGFpbEl0ZW1zQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByb3RlY3RlZCBvcmRlckRldGFpbHNTZXJ2aWNlOiBPcmRlckRldGFpbHNTZXJ2aWNlLFxyXG4gICAgcHJvdGVjdGVkIHByb21vdGlvblNlcnZpY2U6IFByb21vdGlvblNlcnZpY2VcclxuICApIHt9XHJcblxyXG4gIHByb21vdGlvbkxvY2F0aW9uOiBQcm9tb3Rpb25Mb2NhdGlvbiA9IFByb21vdGlvbkxvY2F0aW9uLk9yZGVyO1xyXG4gIG9yZGVyJDogT2JzZXJ2YWJsZTxPcmRlcj4gPSB0aGlzLm9yZGVyRGV0YWlsc1NlcnZpY2UuZ2V0T3JkZXJEZXRhaWxzKCk7XHJcbiAgb3JkZXJQcm9tb3Rpb25zJDogT2JzZXJ2YWJsZTxQcm9tb3Rpb25SZXN1bHRbXT47XHJcbiAgb3RoZXJzJDogT2JzZXJ2YWJsZTxDb25zaWdubWVudFtdPjtcclxuICBjb21wbGV0ZWQkOiBPYnNlcnZhYmxlPENvbnNpZ25tZW50W10+O1xyXG4gIGNhbmNlbCQ6IE9ic2VydmFibGU8Q29uc2lnbm1lbnRbXT47XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy5vcmRlclByb21vdGlvbnMkID0gdGhpcy5wcm9tb3Rpb25TZXJ2aWNlLmdldE9yZGVyUHJvbW90aW9ucyhcclxuICAgICAgdGhpcy5wcm9tb3Rpb25Mb2NhdGlvblxyXG4gICAgKTtcclxuICAgIHRoaXMub3RoZXJzJCA9IHRoaXMuZ2V0T3RoZXJTdGF0dXMoLi4uY29tcGxldGVkVmFsdWVzLCAuLi5jYW5jZWxsZWRWYWx1ZXMpO1xyXG4gICAgdGhpcy5jb21wbGV0ZWQkID0gdGhpcy5nZXRFeGFjdFN0YXR1cyhjb21wbGV0ZWRWYWx1ZXMpO1xyXG4gICAgdGhpcy5jYW5jZWwkID0gdGhpcy5nZXRFeGFjdFN0YXR1cyhjYW5jZWxsZWRWYWx1ZXMpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRFeGFjdFN0YXR1cyhcclxuICAgIGNvbnNpZ25tZW50U3RhdHVzOiBzdHJpbmdbXVxyXG4gICk6IE9ic2VydmFibGU8Q29uc2lnbm1lbnRbXT4ge1xyXG4gICAgcmV0dXJuIHRoaXMub3JkZXIkLnBpcGUoXHJcbiAgICAgIG1hcCgob3JkZXIpID0+IHtcclxuICAgICAgICBpZiAoQm9vbGVhbihvcmRlci5jb25zaWdubWVudHMpKSB7XHJcbiAgICAgICAgICByZXR1cm4gb3JkZXIuY29uc2lnbm1lbnRzLmZpbHRlcigoY29uc2lnbm1lbnQpID0+XHJcbiAgICAgICAgICAgIGNvbnNpZ25tZW50U3RhdHVzLmluY2x1ZGVzKGNvbnNpZ25tZW50LnN0YXR1cylcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0T3RoZXJTdGF0dXMoXHJcbiAgICAuLi5jb25zaWdubWVudFN0YXR1czogc3RyaW5nW11cclxuICApOiBPYnNlcnZhYmxlPENvbnNpZ25tZW50W10+IHtcclxuICAgIHJldHVybiB0aGlzLm9yZGVyJC5waXBlKFxyXG4gICAgICBtYXAoKG9yZGVyKSA9PiB7XHJcbiAgICAgICAgaWYgKEJvb2xlYW4ob3JkZXIuY29uc2lnbm1lbnRzKSkge1xyXG4gICAgICAgICAgcmV0dXJuIG9yZGVyLmNvbnNpZ25tZW50cy5maWx0ZXIoXHJcbiAgICAgICAgICAgIChjb25zaWdubWVudCkgPT4gIWNvbnNpZ25tZW50U3RhdHVzLmluY2x1ZGVzKGNvbnNpZ25tZW50LnN0YXR1cylcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIl19