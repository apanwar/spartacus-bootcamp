import { __decorate } from "tslib";
import { Component, ElementRef, ViewChild, ViewContainerRef, } from '@angular/core';
import { take } from 'rxjs/operators';
import { AnonymousConsentLaunchDialogService } from '../anonymous-consent-launch-dialog.service';
let AnonymousConsentOpenDialogComponent = class AnonymousConsentOpenDialogComponent {
    constructor(vcr, anonymousConsentLaunchDialogService) {
        this.vcr = vcr;
        this.anonymousConsentLaunchDialogService = anonymousConsentLaunchDialogService;
    }
    openDialog() {
        const dialog = this.anonymousConsentLaunchDialogService.openDialog(this.openElement, this.vcr);
        if (dialog) {
            dialog.pipe(take(1)).subscribe();
        }
    }
};
AnonymousConsentOpenDialogComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: AnonymousConsentLaunchDialogService }
];
__decorate([
    ViewChild('open')
], AnonymousConsentOpenDialogComponent.prototype, "openElement", void 0);
AnonymousConsentOpenDialogComponent = __decorate([
    Component({
        selector: 'cx-anonymous-consent-open-dialog',
        template: "<button #open class=\"btn btn-link\" (click)=\"openDialog()\">\r\n  {{ 'anonymousConsents.preferences' | cxTranslate }}\r\n</button>\r\n"
    })
], AnonymousConsentOpenDialogComponent);
export { AnonymousConsentOpenDialogComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5vbnltb3VzLWNvbnNlbnQtb3Blbi1kaWFsb2cuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9zdG9yZWZyb250LyIsInNvdXJjZXMiOlsiY21zLWNvbXBvbmVudHMvYW5vbnltb3VzLWNvbnNlbnQtbWFuYWdlbWVudC9vcGVuLWRpYWxvZy9hbm9ueW1vdXMtY29uc2VudC1vcGVuLWRpYWxvZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFNBQVMsRUFDVCxnQkFBZ0IsR0FDakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3RDLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBTWpHLElBQWEsbUNBQW1DLEdBQWhELE1BQWEsbUNBQW1DO0lBRzlDLFlBQ1ksR0FBcUIsRUFDckIsbUNBQXdFO1FBRHhFLFFBQUcsR0FBSCxHQUFHLENBQWtCO1FBQ3JCLHdDQUFtQyxHQUFuQyxtQ0FBbUMsQ0FBcUM7SUFDakYsQ0FBQztJQUVKLFVBQVU7UUFDUixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsbUNBQW1DLENBQUMsVUFBVSxDQUNoRSxJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLENBQUMsR0FBRyxDQUNULENBQUM7UUFDRixJQUFJLE1BQU0sRUFBRTtZQUNWLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7U0FDbEM7SUFDSCxDQUFDO0NBQ0YsQ0FBQTs7WUFia0IsZ0JBQWdCO1lBQ2dCLG1DQUFtQzs7QUFKakU7SUFBbEIsU0FBUyxDQUFDLE1BQU0sQ0FBQzt3RUFBeUI7QUFEaEMsbUNBQW1DO0lBSi9DLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxrQ0FBa0M7UUFDNUMsb0pBQTZEO0tBQzlELENBQUM7R0FDVyxtQ0FBbUMsQ0FpQi9DO1NBakJZLG1DQUFtQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQ29tcG9uZW50LFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgVmlld0NoaWxkLFxyXG4gIFZpZXdDb250YWluZXJSZWYsXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEFub255bW91c0NvbnNlbnRMYXVuY2hEaWFsb2dTZXJ2aWNlIH0gZnJvbSAnLi4vYW5vbnltb3VzLWNvbnNlbnQtbGF1bmNoLWRpYWxvZy5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnY3gtYW5vbnltb3VzLWNvbnNlbnQtb3Blbi1kaWFsb2cnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9hbm9ueW1vdXMtY29uc2VudC1vcGVuLWRpYWxvZy5jb21wb25lbnQuaHRtbCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBbm9ueW1vdXNDb25zZW50T3BlbkRpYWxvZ0NvbXBvbmVudCB7XHJcbiAgQFZpZXdDaGlsZCgnb3BlbicpIG9wZW5FbGVtZW50OiBFbGVtZW50UmVmO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByb3RlY3RlZCB2Y3I6IFZpZXdDb250YWluZXJSZWYsXHJcbiAgICBwcm90ZWN0ZWQgYW5vbnltb3VzQ29uc2VudExhdW5jaERpYWxvZ1NlcnZpY2U6IEFub255bW91c0NvbnNlbnRMYXVuY2hEaWFsb2dTZXJ2aWNlXHJcbiAgKSB7fVxyXG5cclxuICBvcGVuRGlhbG9nKCk6IHZvaWQge1xyXG4gICAgY29uc3QgZGlhbG9nID0gdGhpcy5hbm9ueW1vdXNDb25zZW50TGF1bmNoRGlhbG9nU2VydmljZS5vcGVuRGlhbG9nKFxyXG4gICAgICB0aGlzLm9wZW5FbGVtZW50LFxyXG4gICAgICB0aGlzLnZjclxyXG4gICAgKTtcclxuICAgIGlmIChkaWFsb2cpIHtcclxuICAgICAgZGlhbG9nLnBpcGUodGFrZSgxKSkuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==