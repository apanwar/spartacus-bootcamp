import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnDestroy, Renderer2, } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { debounceTime, filter } from 'rxjs/operators';
import { ICON_TYPE } from '../../misc/icon/index';
let NavigationUIComponent = class NavigationUIComponent {
    constructor(router, renderer, elemRef) {
        this.router = router;
        this.renderer = renderer;
        this.elemRef = elemRef;
        /**
         * the icon type that will be used for navigation nodes
         * with children.
         */
        this.iconType = ICON_TYPE;
        /**
         * Indicates whether the navigation should support flyout.
         * If flyout is set to true, the
         * nested child navigation nodes will only appear on hover or focus.
         */
        this.flyout = true;
        this.isOpen = false;
        this.openNodes = [];
        this.subscriptions = new Subscription();
        this.resize = new EventEmitter();
        this.subscriptions.add(this.router.events
            .pipe(filter((event) => event instanceof NavigationEnd))
            .subscribe(() => this.clear()));
        this.subscriptions.add(this.resize.pipe(debounceTime(50)).subscribe(() => {
            this.alignWrappersToRightIfStickOut();
        }));
    }
    onResize() {
        this.resize.next();
    }
    toggleOpen(event) {
        if (event.type === 'keydown') {
            event.preventDefault();
        }
        const node = event.currentTarget;
        if (this.openNodes.includes(node)) {
            if (event.type === 'keydown') {
                this.back();
            }
            else {
                this.openNodes = this.openNodes.filter((n) => n !== node);
                this.renderer.removeClass(node, 'is-open');
            }
        }
        else {
            this.openNodes.push(node);
        }
        this.updateClasses();
        event.stopImmediatePropagation();
        event.stopPropagation();
    }
    back() {
        if (this.openNodes[this.openNodes.length - 1]) {
            this.renderer.removeClass(this.openNodes[this.openNodes.length - 1], 'is-open');
            this.openNodes.pop();
            this.updateClasses();
        }
    }
    clear() {
        this.openNodes = [];
        this.updateClasses();
    }
    onMouseEnter(event) {
        this.alignWrapperToRightIfStickOut(event.currentTarget);
        this.focusAfterPreviousClicked(event);
    }
    getTotalDepth(node, depth = 0) {
        if (node.children && node.children.length > 0) {
            return Math.max(...node.children.map((n) => this.getTotalDepth(n, depth + 1)));
        }
        else {
            return depth;
        }
    }
    getColumnCount(length) {
        return Math.round(length / (this.wrapAfter || length));
    }
    focusAfterPreviousClicked(event) {
        const target = ((event.target || event.relatedTarget));
        if (target.ownerDocument.activeElement.matches('nav[tabindex]') &&
            target.parentElement.matches('.flyout')) {
            target.focus();
        }
        return target.ownerDocument;
    }
    ngOnDestroy() {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
    }
    alignWrapperToRightIfStickOut(node) {
        const wrapper = node.querySelector('.wrapper');
        const body = node.closest('body');
        if (wrapper) {
            this.renderer.removeStyle(wrapper, 'margin-left');
            if (wrapper.offsetLeft + wrapper.offsetWidth >
                body.offsetLeft + body.offsetWidth) {
                this.renderer.setStyle(wrapper, 'margin-left', `${node.offsetWidth - wrapper.offsetWidth}px`);
            }
        }
    }
    alignWrappersToRightIfStickOut() {
        const navs = this.elemRef.nativeElement.childNodes;
        Array.from(navs)
            .filter((node) => node.tagName === 'NAV')
            .forEach((nav) => this.alignWrapperToRightIfStickOut(nav));
    }
    updateClasses() {
        this.openNodes.forEach((node, i) => {
            if (i + 1 < this.openNodes.length) {
                this.renderer.addClass(node, 'is-opened');
                this.renderer.removeClass(node, 'is-open');
            }
            else {
                this.renderer.removeClass(node, 'is-opened');
                this.renderer.addClass(node, 'is-open');
            }
        });
        this.isOpen = this.openNodes.length > 0;
    }
};
NavigationUIComponent.ctorParameters = () => [
    { type: Router },
    { type: Renderer2 },
    { type: ElementRef }
];
__decorate([
    Input()
], NavigationUIComponent.prototype, "node", void 0);
__decorate([
    Input()
], NavigationUIComponent.prototype, "wrapAfter", void 0);
__decorate([
    Input(), HostBinding('class.flyout')
], NavigationUIComponent.prototype, "flyout", void 0);
__decorate([
    Input(), HostBinding('class.is-open')
], NavigationUIComponent.prototype, "isOpen", void 0);
__decorate([
    HostListener('window:resize')
], NavigationUIComponent.prototype, "onResize", null);
NavigationUIComponent = __decorate([
    Component({
        selector: 'cx-navigation-ui',
        template: "<div\r\n  *ngIf=\"flyout && node?.children.length > 1\"\r\n  class=\"back is-open\"\r\n  (click)=\"back()\"\r\n>\r\n  <h5>\r\n    <cx-icon [type]=\"iconType.CARET_LEFT\"></cx-icon>\r\n    {{ 'common.back' | cxTranslate }}\r\n  </h5>\r\n</div>\r\n\r\n<ng-container *ngFor=\"let child of node?.children\">\r\n  <ng-container *ngTemplateOutlet=\"nav; context: { node: child, depth: 0 }\">\r\n  </ng-container>\r\n</ng-container>\r\n\r\n<!-- we generate links in a recursive manner -->\r\n<ng-template #nav let-node=\"node\" let-depth=\"depth\">\r\n  <nav\r\n    (click)=\"toggleOpen($event)\"\r\n    (mouseenter)=\"onMouseEnter($event)\"\r\n    (keydown.space)=\"toggleOpen($event)\"\r\n    (keydown.esc)=\"back()\"\r\n  >\r\n    <cx-generic-link\r\n      *ngIf=\"\r\n        node.url && (!node.children || node.children?.length === 0);\r\n        else heading\r\n      \"\r\n      [url]=\"node.url\"\r\n      [target]=\"node.target\"\r\n    >\r\n      {{ node.title }}\r\n      <cx-icon\r\n        *ngIf=\"flyout && node.children?.length > 0\"\r\n        [type]=\"iconType.CARET_DOWN\"\r\n      ></cx-icon>\r\n    </cx-generic-link>\r\n\r\n    <ng-template #heading>\r\n      <h5\r\n        [attr.aria-label]=\"node.title\"\r\n        [attr.tabindex]=\"flyout && (depth === 0 || node.url) ? 0 : -1\"\r\n      >\r\n        {{ node.title }}\r\n        <cx-icon\r\n          *ngIf=\"flyout && node.children?.length > 0\"\r\n          [type]=\"iconType.CARET_DOWN\"\r\n        ></cx-icon>\r\n      </h5>\r\n    </ng-template>\r\n\r\n    <!-- we add a wrapper to allow for better layout handling in CSS -->\r\n    <div class=\"wrapper\" *ngIf=\"node.children?.length > 0\">\r\n      <cx-generic-link\r\n        *ngIf=\"node.url\"\r\n        [url]=\"node.url\"\r\n        [target]=\"node.target\"\r\n        class=\"all\"\r\n      >\r\n        {{ 'navigation.shopAll' | cxTranslate: { navNode: node.title } }}\r\n      </cx-generic-link>\r\n      <div\r\n        class=\"childs\"\r\n        [attr.depth]=\"getTotalDepth(node)\"\r\n        [attr.wrap-after]=\"node.children?.length > wrapAfter ? wrapAfter : null\"\r\n        [attr.columns]=\"getColumnCount(node.children?.length)\"\r\n      >\r\n        <ng-container *ngFor=\"let child of node.children\">\r\n          <ng-container\r\n            *ngTemplateOutlet=\"nav; context: { node: child, depth: depth + 1 }\"\r\n          >\r\n          </ng-container>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n</ng-template>\r\n",
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], NavigationUIComponent);
export { NavigationUIComponent };
//# sourceMappingURL=data:application/json;base64,