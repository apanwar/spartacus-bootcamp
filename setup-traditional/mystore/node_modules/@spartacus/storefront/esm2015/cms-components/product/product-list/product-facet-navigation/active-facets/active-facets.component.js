import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';
import { FacetService } from '../services/facet.service';
/**
 * Active facets render the applied facet values as a list of focusable buttons
 * which can be used to remove the applied facet value.
 */
let ActiveFacetsComponent = class ActiveFacetsComponent {
    constructor(facetService) {
        this.facetService = facetService;
        /** Active facets which are applied to the product results. */
        this.facetList$ = this.facetService.facetList$;
        /** Configurable icon which is used for the active facet close button */
        this.closeIcon = ICON_TYPE.CLOSE;
    }
    getLinkParams(facet) {
        var _a, _b;
        return this.facetService.getLinkParams((_b = (_a = facet.removeQuery) === null || _a === void 0 ? void 0 : _a.query) === null || _b === void 0 ? void 0 : _b.value);
    }
    /**
     * The focus key is used to persist the focus on the facet when the DOM is being
     * recreated. We only apply the focus key for the given _active_ facet when there
     * the original facets is not available. This happens for non multi-valued facets.
     *
     * With this approach, the we keep the focus, either at the facet list or on the
     * active facets.
     */
    getFocusKey(facetList, facet) {
        var _a;
        return ((_a = facetList.facets) === null || _a === void 0 ? void 0 : _a.find((f) => { var _a; return (_a = f.values) === null || _a === void 0 ? void 0 : _a.find((val) => val.name === facet.facetValueName); })) ? ''
            : facet.facetValueName;
    }
};
ActiveFacetsComponent.ctorParameters = () => [
    { type: FacetService }
];
__decorate([
    Input()
], ActiveFacetsComponent.prototype, "closeIcon", void 0);
ActiveFacetsComponent = __decorate([
    Component({
        selector: 'cx-active-facets',
        template: "<ng-container *ngIf=\"facetList$ | async as facetList\">\r\n  <h4 *ngIf=\"facetList?.activeFacets?.length > 0\">\r\n    {{ 'productList.appliedFilter' | cxTranslate }}\r\n  </h4>\r\n\r\n  <a\r\n    *ngFor=\"let facet of facetList?.activeFacets\"\r\n    routerLink=\"./\"\r\n    [queryParams]=\"getLinkParams(facet)\"\r\n    [cxFocus]=\"getFocusKey(facetList, facet)\"\r\n  >\r\n    <span>{{ facet.facetValueName }}</span>\r\n    <cx-icon aria-hidden=\"true\" [type]=\"closeIcon\"></cx-icon>\r\n  </a>\r\n</ng-container>\r\n",
        changeDetection: ChangeDetectionStrategy.Default
    })
], ActiveFacetsComponent);
export { ActiveFacetsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aXZlLWZhY2V0cy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL3N0b3JlZnJvbnQvIiwic291cmNlcyI6WyJjbXMtY29tcG9uZW50cy9wcm9kdWN0L3Byb2R1Y3QtbGlzdC9wcm9kdWN0LWZhY2V0LW5hdmlnYXRpb24vYWN0aXZlLWZhY2V0cy9hY3RpdmUtZmFjZXRzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHMUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBRS9FLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUV6RDs7O0dBR0c7QUFNSCxJQUFhLHFCQUFxQixHQUFsQyxNQUFhLHFCQUFxQjtJQU9oQyxZQUFzQixZQUEwQjtRQUExQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQU5oRCw4REFBOEQ7UUFDOUQsZUFBVSxHQUEwQixJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztRQUVqRSx3RUFBd0U7UUFDL0QsY0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7SUFFYyxDQUFDO0lBRXBELGFBQWEsQ0FBQyxLQUFpQjs7UUFDN0IsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsYUFBQyxLQUFLLENBQUMsV0FBVywwQ0FBRSxLQUFLLDBDQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsV0FBVyxDQUFDLFNBQW9CLEVBQUUsS0FBaUI7O1FBQ2pELE9BQU8sT0FBQSxTQUFTLENBQUMsTUFBTSwwQ0FBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSx3QkFDbEMsQ0FBQyxDQUFDLE1BQU0sMENBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxjQUFjLElBQUMsR0FFMUQsQ0FBQyxDQUFDLEVBQUU7WUFDSixDQUFDLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQztJQUMzQixDQUFDO0NBQ0YsQ0FBQTs7WUFyQnFDLFlBQVk7O0FBRnZDO0lBQVIsS0FBSyxFQUFFO3dEQUE2QjtBQUwxQixxQkFBcUI7SUFMakMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGtCQUFrQjtRQUM1Qix1aEJBQTZDO1FBQzdDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxPQUFPO0tBQ2pELENBQUM7R0FDVyxxQkFBcUIsQ0E0QmpDO1NBNUJZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEJyZWFkY3J1bWIgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IElDT05fVFlQRSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2Ntcy1jb21wb25lbnRzL21pc2MvaWNvbi9pY29uLm1vZGVsJztcclxuaW1wb3J0IHsgRmFjZXRMaXN0IH0gZnJvbSAnLi4vZmFjZXQubW9kZWwnO1xyXG5pbXBvcnQgeyBGYWNldFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9mYWNldC5zZXJ2aWNlJztcclxuXHJcbi8qKlxyXG4gKiBBY3RpdmUgZmFjZXRzIHJlbmRlciB0aGUgYXBwbGllZCBmYWNldCB2YWx1ZXMgYXMgYSBsaXN0IG9mIGZvY3VzYWJsZSBidXR0b25zXHJcbiAqIHdoaWNoIGNhbiBiZSB1c2VkIHRvIHJlbW92ZSB0aGUgYXBwbGllZCBmYWNldCB2YWx1ZS5cclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnY3gtYWN0aXZlLWZhY2V0cycsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2FjdGl2ZS1mYWNldHMuY29tcG9uZW50Lmh0bWwnLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuRGVmYXVsdCxcclxufSlcclxuZXhwb3J0IGNsYXNzIEFjdGl2ZUZhY2V0c0NvbXBvbmVudCB7XHJcbiAgLyoqIEFjdGl2ZSBmYWNldHMgd2hpY2ggYXJlIGFwcGxpZWQgdG8gdGhlIHByb2R1Y3QgcmVzdWx0cy4gKi9cclxuICBmYWNldExpc3QkOiBPYnNlcnZhYmxlPEZhY2V0TGlzdD4gPSB0aGlzLmZhY2V0U2VydmljZS5mYWNldExpc3QkO1xyXG5cclxuICAvKiogQ29uZmlndXJhYmxlIGljb24gd2hpY2ggaXMgdXNlZCBmb3IgdGhlIGFjdGl2ZSBmYWNldCBjbG9zZSBidXR0b24gKi9cclxuICBASW5wdXQoKSBjbG9zZUljb24gPSBJQ09OX1RZUEUuQ0xPU0U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBmYWNldFNlcnZpY2U6IEZhY2V0U2VydmljZSkge31cclxuXHJcbiAgZ2V0TGlua1BhcmFtcyhmYWNldDogQnJlYWRjcnVtYikge1xyXG4gICAgcmV0dXJuIHRoaXMuZmFjZXRTZXJ2aWNlLmdldExpbmtQYXJhbXMoZmFjZXQucmVtb3ZlUXVlcnk/LnF1ZXJ5Py52YWx1ZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGUgZm9jdXMga2V5IGlzIHVzZWQgdG8gcGVyc2lzdCB0aGUgZm9jdXMgb24gdGhlIGZhY2V0IHdoZW4gdGhlIERPTSBpcyBiZWluZ1xyXG4gICAqIHJlY3JlYXRlZC4gV2Ugb25seSBhcHBseSB0aGUgZm9jdXMga2V5IGZvciB0aGUgZ2l2ZW4gX2FjdGl2ZV8gZmFjZXQgd2hlbiB0aGVyZVxyXG4gICAqIHRoZSBvcmlnaW5hbCBmYWNldHMgaXMgbm90IGF2YWlsYWJsZS4gVGhpcyBoYXBwZW5zIGZvciBub24gbXVsdGktdmFsdWVkIGZhY2V0cy5cclxuICAgKlxyXG4gICAqIFdpdGggdGhpcyBhcHByb2FjaCwgdGhlIHdlIGtlZXAgdGhlIGZvY3VzLCBlaXRoZXIgYXQgdGhlIGZhY2V0IGxpc3Qgb3Igb24gdGhlXHJcbiAgICogYWN0aXZlIGZhY2V0cy5cclxuICAgKi9cclxuICBnZXRGb2N1c0tleShmYWNldExpc3Q6IEZhY2V0TGlzdCwgZmFjZXQ6IEJyZWFkY3J1bWIpIHtcclxuICAgIHJldHVybiBmYWNldExpc3QuZmFjZXRzPy5maW5kKChmKSA9PlxyXG4gICAgICBmLnZhbHVlcz8uZmluZCgodmFsKSA9PiB2YWwubmFtZSA9PT0gZmFjZXQuZmFjZXRWYWx1ZU5hbWUpXHJcbiAgICApXHJcbiAgICAgID8gJydcclxuICAgICAgOiBmYWNldC5mYWNldFZhbHVlTmFtZTtcclxuICB9XHJcbn1cclxuIl19