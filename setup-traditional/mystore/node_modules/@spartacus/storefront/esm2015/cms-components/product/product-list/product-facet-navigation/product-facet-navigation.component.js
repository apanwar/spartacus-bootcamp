import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ViewChild, } from '@angular/core';
import { asapScheduler, BehaviorSubject, interval, of } from 'rxjs';
import { delayWhen, observeOn, switchMap } from 'rxjs/operators';
import { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';
import { BreakpointService } from '../../../../layout/breakpoint/breakpoint.service';
let ProductFacetNavigationComponent = class ProductFacetNavigationComponent {
    constructor(breakpointService) {
        this.breakpointService = breakpointService;
        this.iconTypes = ICON_TYPE;
        /**
         * We delay the removal of DOM so that animations can finish playing before the
         * DOM is removed. Removing the DOM, as hidding is not enough to stop elements
         * to be focused.
         */
        this.CLOSE_DELAY = 300;
        this.open$ = new BehaviorSubject(false);
        /**
         * Emits the open state that indicates whether the facet list should be rendered.
         * This is either done instantly, or after the user triggers this by using the trigger
         * button. This driven by the visiibility of the trigger, so that the CSS drives
         * the behaviour. This can differ per breakpoint.
         *
         * There's a configurable delay for the closed state, so that the DOM is not removed
         * before some CSS animations are done.
         */
        this.isOpen$ = this.breakpointService.breakpoint$.pipe(
        // deffer emitting a new value to the next micro-task to ensure that the `hasTrigger`
        // method represents the actual UI state.
        observeOn(asapScheduler), switchMap(() => (this.hasTrigger ? this.open$ : of(true))), delayWhen((launched) => interval(launched ? 0 : this.CLOSE_DELAY)));
        /**
         * Emits the active state that indicates whether the facet list is activated. Activation
         * is related to the css, so that a animation or transition can visualize opening/closing
         * the list (i.e. dialog).
         */
        this.isActive$ = this.open$.pipe(
        // deffer emitting a new value to the next micro-task to ensure the active class is
        //  applied after the DOM is created
        observeOn(asapScheduler));
    }
    launch() {
        this.open$.next(true);
    }
    close() {
        this.open$.next(false);
        this.trigger.nativeElement.focus();
    }
    /**
     * Indicates that the facet navigation should be open explicitely by a trigger.
     * This is fully controlled by CSS, where the trigger button can be hidden
     * (display:none) for certain screen sizes.
     */
    get hasTrigger() {
        return this.trigger.nativeElement.offsetParent !== null;
    }
};
ProductFacetNavigationComponent.ctorParameters = () => [
    { type: BreakpointService }
];
__decorate([
    ViewChild('trigger')
], ProductFacetNavigationComponent.prototype, "trigger", void 0);
ProductFacetNavigationComponent = __decorate([
    Component({
        selector: 'cx-product-facet-navigation',
        template: "<button\r\n  #trigger\r\n  class=\"btn btn-action btn-block dialog-trigger\"\r\n  (click)=\"launch()\"\r\n>\r\n  <cx-icon [type]=\"iconTypes.FILTER\"></cx-icon>\r\n  {{ 'productList.filterBy.label' | cxTranslate }}\r\n</button>\r\n\r\n<cx-active-facets></cx-active-facets>\r\n\r\n<cx-facet-list\r\n  *ngIf=\"isOpen$ | async\"\r\n  [isDialog]=\"hasTrigger\"\r\n  (closeList)=\"close()\"\r\n  [class.active]=\"isActive$ | async\"\r\n  [class.dialog]=\"hasTrigger\"\r\n></cx-facet-list>\r\n",
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], ProductFacetNavigationComponent);
export { ProductFacetNavigationComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1mYWNldC1uYXZpZ2F0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvc3RvcmVmcm9udC8iLCJzb3VyY2VzIjpbImNtcy1jb21wb25lbnRzL3Byb2R1Y3QvcHJvZHVjdC1saXN0L3Byb2R1Y3QtZmFjZXQtbmF2aWdhdGlvbi9wcm9kdWN0LWZhY2V0LW5hdmlnYXRpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFFVCxTQUFTLEdBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGFBQWEsRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNoRixPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saURBQWlELENBQUM7QUFDNUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFPckYsSUFBYSwrQkFBK0IsR0FBNUMsTUFBYSwrQkFBK0I7SUFnRDFDLFlBQXNCLGlCQUFvQztRQUFwQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBL0MxRCxjQUFTLEdBQUcsU0FBUyxDQUFDO1FBRXRCOzs7O1dBSUc7UUFDTyxnQkFBVyxHQUFHLEdBQUcsQ0FBQztRQVVsQixVQUFLLEdBQUcsSUFBSSxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFN0M7Ozs7Ozs7O1dBUUc7UUFDSCxZQUFPLEdBQXdCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsSUFBSTtRQUNwRSxxRkFBcUY7UUFDckYseUNBQXlDO1FBQ3pDLFNBQVMsQ0FBQyxhQUFhLENBQUMsRUFDeEIsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDMUQsU0FBUyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUNuRSxDQUFDO1FBRUY7Ozs7V0FJRztRQUNILGNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUk7UUFDekIsbUZBQW1GO1FBQ25GLG9DQUFvQztRQUNwQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQ3pCLENBQUM7SUFFMkQsQ0FBQztJQUU5RCxNQUFNO1FBQ0osSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsWUFBWSxLQUFLLElBQUksQ0FBQztJQUMxRCxDQUFDO0NBQ0YsQ0FBQTs7WUFuQjBDLGlCQUFpQjs7QUFoQ3BDO0lBQXJCLFNBQVMsQ0FBQyxTQUFTLENBQUM7Z0VBQWtDO0FBaEI1QywrQkFBK0I7SUFMM0MsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLDZCQUE2QjtRQUN2QyxtZkFBd0Q7UUFDeEQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07S0FDaEQsQ0FBQztHQUNXLCtCQUErQixDQW1FM0M7U0FuRVksK0JBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcclxuICBDb21wb25lbnQsXHJcbiAgRWxlbWVudFJlZixcclxuICBWaWV3Q2hpbGQsXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGFzYXBTY2hlZHVsZXIsIEJlaGF2aW9yU3ViamVjdCwgaW50ZXJ2YWwsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGRlbGF5V2hlbiwgb2JzZXJ2ZU9uLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IElDT05fVFlQRSB9IGZyb20gJy4uLy4uLy4uLy4uL2Ntcy1jb21wb25lbnRzL21pc2MvaWNvbi9pY29uLm1vZGVsJztcclxuaW1wb3J0IHsgQnJlYWtwb2ludFNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9sYXlvdXQvYnJlYWtwb2ludC9icmVha3BvaW50LnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdjeC1wcm9kdWN0LWZhY2V0LW5hdmlnYXRpb24nLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9wcm9kdWN0LWZhY2V0LW5hdmlnYXRpb24uY29tcG9uZW50Lmh0bWwnLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUHJvZHVjdEZhY2V0TmF2aWdhdGlvbkNvbXBvbmVudCB7XHJcbiAgaWNvblR5cGVzID0gSUNPTl9UWVBFO1xyXG5cclxuICAvKipcclxuICAgKiBXZSBkZWxheSB0aGUgcmVtb3ZhbCBvZiBET00gc28gdGhhdCBhbmltYXRpb25zIGNhbiBmaW5pc2ggcGxheWluZyBiZWZvcmUgdGhlXHJcbiAgICogRE9NIGlzIHJlbW92ZWQuIFJlbW92aW5nIHRoZSBET00sIGFzIGhpZGRpbmcgaXMgbm90IGVub3VnaCB0byBzdG9wIGVsZW1lbnRzXHJcbiAgICogdG8gYmUgZm9jdXNlZC5cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgQ0xPU0VfREVMQVkgPSAzMDA7XHJcblxyXG4gIC8qKlxyXG4gICAqIFVzZWQgdG8gb3BlbiB0aGUgZmFjZXQgbmF2aWdhdGlvbiBpbiBhIGRpYWxvZy4gVGhlIHVzYWdlIG9mIHRoZSBkaWFsb2cgZGVwZW5kc1xyXG4gICAqIG9uIHRoZSBhdmFpbGFiaWxpdHkgb2YgdGhlIHRyaWdnZXIgZWxlbWVudCwgd2hpY2ggaXMgZHJpdmVuIGJ5IENTUy5cclxuICAgKlxyXG4gICAqIFRoZSByZWZlcmVuY2UgaXMgYWxzbyB1c2VkIHRvIHJlZm9jdXMgdGhlIHRyaWdnZXIgYWZ0ZXIgdGhlIGRpYWxvZyBpcyBjbG9zZWQuXHJcbiAgICovXHJcbiAgQFZpZXdDaGlsZCgndHJpZ2dlcicpIHRyaWdnZXI6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+O1xyXG5cclxuICBwcm90ZWN0ZWQgb3BlbiQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KGZhbHNlKTtcclxuXHJcbiAgLyoqXHJcbiAgICogRW1pdHMgdGhlIG9wZW4gc3RhdGUgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgZmFjZXQgbGlzdCBzaG91bGQgYmUgcmVuZGVyZWQuXHJcbiAgICogVGhpcyBpcyBlaXRoZXIgZG9uZSBpbnN0YW50bHksIG9yIGFmdGVyIHRoZSB1c2VyIHRyaWdnZXJzIHRoaXMgYnkgdXNpbmcgdGhlIHRyaWdnZXJcclxuICAgKiBidXR0b24uIFRoaXMgZHJpdmVuIGJ5IHRoZSB2aXNpaWJpbGl0eSBvZiB0aGUgdHJpZ2dlciwgc28gdGhhdCB0aGUgQ1NTIGRyaXZlc1xyXG4gICAqIHRoZSBiZWhhdmlvdXIuIFRoaXMgY2FuIGRpZmZlciBwZXIgYnJlYWtwb2ludC5cclxuICAgKlxyXG4gICAqIFRoZXJlJ3MgYSBjb25maWd1cmFibGUgZGVsYXkgZm9yIHRoZSBjbG9zZWQgc3RhdGUsIHNvIHRoYXQgdGhlIERPTSBpcyBub3QgcmVtb3ZlZFxyXG4gICAqIGJlZm9yZSBzb21lIENTUyBhbmltYXRpb25zIGFyZSBkb25lLlxyXG4gICAqL1xyXG4gIGlzT3BlbiQ6IE9ic2VydmFibGU8Ym9vbGVhbj4gPSB0aGlzLmJyZWFrcG9pbnRTZXJ2aWNlLmJyZWFrcG9pbnQkLnBpcGUoXHJcbiAgICAvLyBkZWZmZXIgZW1pdHRpbmcgYSBuZXcgdmFsdWUgdG8gdGhlIG5leHQgbWljcm8tdGFzayB0byBlbnN1cmUgdGhhdCB0aGUgYGhhc1RyaWdnZXJgXHJcbiAgICAvLyBtZXRob2QgcmVwcmVzZW50cyB0aGUgYWN0dWFsIFVJIHN0YXRlLlxyXG4gICAgb2JzZXJ2ZU9uKGFzYXBTY2hlZHVsZXIpLFxyXG4gICAgc3dpdGNoTWFwKCgpID0+ICh0aGlzLmhhc1RyaWdnZXIgPyB0aGlzLm9wZW4kIDogb2YodHJ1ZSkpKSxcclxuICAgIGRlbGF5V2hlbigobGF1bmNoZWQpID0+IGludGVydmFsKGxhdW5jaGVkID8gMCA6IHRoaXMuQ0xPU0VfREVMQVkpKVxyXG4gICk7XHJcblxyXG4gIC8qKlxyXG4gICAqIEVtaXRzIHRoZSBhY3RpdmUgc3RhdGUgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgZmFjZXQgbGlzdCBpcyBhY3RpdmF0ZWQuIEFjdGl2YXRpb25cclxuICAgKiBpcyByZWxhdGVkIHRvIHRoZSBjc3MsIHNvIHRoYXQgYSBhbmltYXRpb24gb3IgdHJhbnNpdGlvbiBjYW4gdmlzdWFsaXplIG9wZW5pbmcvY2xvc2luZ1xyXG4gICAqIHRoZSBsaXN0IChpLmUuIGRpYWxvZykuXHJcbiAgICovXHJcbiAgaXNBY3RpdmUkID0gdGhpcy5vcGVuJC5waXBlKFxyXG4gICAgLy8gZGVmZmVyIGVtaXR0aW5nIGEgbmV3IHZhbHVlIHRvIHRoZSBuZXh0IG1pY3JvLXRhc2sgdG8gZW5zdXJlIHRoZSBhY3RpdmUgY2xhc3MgaXNcclxuICAgIC8vICBhcHBsaWVkIGFmdGVyIHRoZSBET00gaXMgY3JlYXRlZFxyXG4gICAgb2JzZXJ2ZU9uKGFzYXBTY2hlZHVsZXIpXHJcbiAgKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGJyZWFrcG9pbnRTZXJ2aWNlOiBCcmVha3BvaW50U2VydmljZSkge31cclxuXHJcbiAgbGF1bmNoKCkge1xyXG4gICAgdGhpcy5vcGVuJC5uZXh0KHRydWUpO1xyXG4gIH1cclxuXHJcbiAgY2xvc2UoKSB7XHJcbiAgICB0aGlzLm9wZW4kLm5leHQoZmFsc2UpO1xyXG4gICAgdGhpcy50cmlnZ2VyLm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyB0aGF0IHRoZSBmYWNldCBuYXZpZ2F0aW9uIHNob3VsZCBiZSBvcGVuIGV4cGxpY2l0ZWx5IGJ5IGEgdHJpZ2dlci5cclxuICAgKiBUaGlzIGlzIGZ1bGx5IGNvbnRyb2xsZWQgYnkgQ1NTLCB3aGVyZSB0aGUgdHJpZ2dlciBidXR0b24gY2FuIGJlIGhpZGRlblxyXG4gICAqIChkaXNwbGF5Om5vbmUpIGZvciBjZXJ0YWluIHNjcmVlbiBzaXplcy5cclxuICAgKi9cclxuICBnZXQgaGFzVHJpZ2dlcigpIHtcclxuICAgIHJldHVybiB0aGlzLnRyaWdnZXIubmF0aXZlRWxlbWVudC5vZmZzZXRQYXJlbnQgIT09IG51bGw7XHJcbiAgfVxyXG59XHJcbiJdfQ==