import { __decorate } from "tslib";
import { Component, ChangeDetectionStrategy, } from '@angular/core';
import { UserInterestsService, UserNotificationPreferenceService, AuthService, OCC_USER_ID_ANONYMOUS, NotificationPreference, NotificationType, Product, GlobalMessageService, TranslationService, GlobalMessageType, } from '@spartacus/core';
import { Subscription, combineLatest } from 'rxjs';
import { map, filter, tap, first } from 'rxjs/operators';
import { CurrentProductService } from '../current-product.service';
import { ModalService } from '../../../shared/components/modal/modal.service';
import { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';
let StockNotificationComponent = class StockNotificationComponent {
    constructor(authService, currentProductService, globalMessageService, translationService, interestsService, modalService, notificationPrefService) {
        this.authService = authService;
        this.currentProductService = currentProductService;
        this.globalMessageService = globalMessageService;
        this.translationService = translationService;
        this.interestsService = interestsService;
        this.modalService = modalService;
        this.notificationPrefService = notificationPrefService;
        this.anonymous = true;
        this.enabledPrefs = [];
        this.subscriptions = new Subscription();
    }
    ngOnInit() {
        this.outOfStock$ = combineLatest([
            this.currentProductService.getProduct().pipe(filter(Boolean)),
            this.authService.getOccUserId(),
        ]).pipe(tap(([product, userId]) => {
            this.productCode = product.code;
            if (userId !== OCC_USER_ID_ANONYMOUS) {
                this.anonymous = false;
                this.notificationPrefService.loadPreferences();
                this.interestsService.loadProductInterests(null, null, null, product.code, NotificationType.BACK_IN_STOCK);
            }
        }), map(([product]) => !!product.stock && product.stock.stockLevelStatus === 'outOfStock'));
        this.hasProductInterests$ = this.interestsService
            .getProductInterests()
            .pipe(map((interests) => !!interests.results && interests.results.length === 1));
        this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();
        this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();
        this.prefsEnabled$ = this.notificationPrefService
            .getEnabledPreferences()
            .pipe(tap((prefs) => (this.enabledPrefs = prefs)), map((prefs) => prefs.length > 0));
        this.subscriptions.add(this.interestsService.getAddProductInterestError().subscribe((error) => {
            if (error) {
                this.onInterestAddingError();
            }
        }));
        this.subscriptions.add(this.interestsService
            .getRemoveProdutInterestSuccess()
            .subscribe((success) => {
            if (success) {
                this.onInterestRemovingSuccess();
            }
        }));
    }
    subscribe() {
        this.openDialog();
        this.interestsService.addProductInterest(this.productCode, NotificationType.BACK_IN_STOCK);
    }
    unsubscribe() {
        this.interestsService.removeProdutInterest({
            product: {
                code: this.productCode,
            },
            productInterestEntry: [
                {
                    interestType: NotificationType.BACK_IN_STOCK,
                },
            ],
        }, true);
    }
    onInterestRemovingSuccess() {
        this.subscriptions.add(this.translationService
            .translate('stockNotification.unsubscribeSuccess')
            .pipe(first())
            .subscribe((text) => this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)));
        this.interestsService.resetRemoveInterestState();
    }
    onInterestAddingError() {
        this.modalService.dismissActiveModal();
        this.interestsService.resetAddInterestState();
    }
    openDialog() {
        const modalInstance = this.modalService.open(StockNotificationDialogComponent, {
            centered: true,
            size: 'lg',
        }).componentInstance;
        modalInstance.subscribeSuccess$ = this.subscribeSuccess$;
        modalInstance.enabledPrefs = this.enabledPrefs;
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
        this.interestsService.clearProductInterests();
        this.notificationPrefService.clearPreferences();
    }
};
StockNotificationComponent.ctorParameters = () => [
    { type: AuthService },
    { type: CurrentProductService },
    { type: GlobalMessageService },
    { type: TranslationService },
    { type: UserInterestsService },
    { type: ModalService },
    { type: UserNotificationPreferenceService }
];
StockNotificationComponent = __decorate([
    Component({
        selector: 'cx-stock-notification',
        template: "<ng-container *ngIf=\"outOfStock$ | async\">\r\n  <ng-container *ngIf=\"!(hasProductInterests$ | async); else stopNotify\">\r\n    <ng-container *ngIf=\"prefsEnabled$ | async; else disableNotify\">\r\n      <div class=\"stock-notification-notes\">\r\n        <p>{{ 'stockNotification.getNotified' | cxTranslate }}</p>\r\n      </div>\r\n      <button\r\n        class=\"btn btn-primary btn-block btn-notify\"\r\n        type=\"button\"\r\n        (click)=\"subscribe()\"\r\n      >\r\n        {{ 'stockNotification.notifyMe' | cxTranslate }}\r\n      </button>\r\n    </ng-container>\r\n  </ng-container>\r\n</ng-container>\r\n\r\n<ng-template #disableNotify>\r\n  <div class=\"stock-notification-notes\">\r\n    <p>\r\n      <ng-container *ngIf=\"anonymous; else loggedIn\">\r\n        <a [routerLink]=\"{ cxRoute: 'login' } | cxUrl\">\r\n          {{ 'miniLogin.signInRegister' | cxTranslate }}</a\r\n        >\r\n        {{ 'stockNotification.getNotifySuffix' | cxTranslate }}<br />\r\n      </ng-container>\r\n      <ng-template #loggedIn>\r\n        {{ 'stockNotification.getNotify' | cxTranslate }}<br />\r\n        {{ 'stockNotification.activateChannelsPrefix' | cxTranslate\r\n        }}<a [routerLink]=\"['/my-account/notification-preference']\">{{\r\n          'stockNotification.channelsLink' | cxTranslate\r\n        }}</a\r\n        >{{ 'stockNotification.activateChannelsSuffix' | cxTranslate }}\r\n      </ng-template>\r\n    </p>\r\n  </div>\r\n  <button\r\n    class=\"btn btn-primary btn-block btn-notify\"\r\n    type=\"button\"\r\n    disabled=\"true\"\r\n  >\r\n    {{ 'stockNotification.notifyMe' | cxTranslate }}\r\n  </button>\r\n</ng-template>\r\n\r\n<ng-template #stopNotify>\r\n  <ng-container *ngIf=\"!(isRemoveInterestLoading$ | async); else loading\">\r\n    <div class=\"stock-notification-notes\">\r\n      <p>{{ 'stockNotification.notified' | cxTranslate }}</p>\r\n    </div>\r\n    <button\r\n      class=\"btn btn-primary btn-block btn-stop-notify\"\r\n      type=\"button\"\r\n      (click)=\"unsubscribe()\"\r\n    >\r\n      {{ 'stockNotification.stopNotify' | cxTranslate }}\r\n    </button>\r\n  </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #loading>\r\n  <div class=\"cx-dialog-body modal-body\">\r\n    <div class=\"cx-dialog-row\">\r\n      <div class=\"col-sm-12\">\r\n        <cx-spinner></cx-spinner>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n",
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], StockNotificationComponent);
export { StockNotificationComponent };
//# sourceMappingURL=data:application/json;base64,