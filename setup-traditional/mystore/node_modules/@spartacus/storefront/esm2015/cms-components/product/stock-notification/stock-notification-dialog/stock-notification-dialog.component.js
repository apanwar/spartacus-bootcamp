import { __decorate } from "tslib";
import { Component } from '@angular/core';
import { NotificationPreference, UserInterestsService } from '@spartacus/core';
import { ModalService } from '../../../../shared/components/modal/modal.service';
let StockNotificationDialogComponent = class StockNotificationDialogComponent {
    constructor(modalService, interestsService) {
        this.modalService = modalService;
        this.interestsService = interestsService;
        this.enabledPrefs = [];
    }
    close() {
        this.modalService.dismissActiveModal();
    }
    ngOnDestroy() {
        if (this.subscribeSuccess$) {
            this.subscribeSuccess$
                .subscribe((success) => {
                if (success) {
                    this.interestsService.resetAddInterestState();
                }
            })
                .unsubscribe();
        }
    }
};
StockNotificationDialogComponent.ctorParameters = () => [
    { type: ModalService },
    { type: UserInterestsService }
];
StockNotificationDialogComponent = __decorate([
    Component({
        selector: 'cx-stock-notification-dialog',
        template: "<div class=\"cx-dialog-header modal-header\">\r\n  <div class=\"cx-dialog-title modal-title\">\r\n    {{ 'stockNotification.subscriptionDialog.header' | cxTranslate }}\r\n  </div>\r\n  <button\r\n    type=\"button\"\r\n    class=\"close\"\r\n    aria-label=\"Close\"\r\n    tabindex=\"-1\"\r\n    (click)=\"close()\"\r\n  >\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n</div>\r\n\r\n<ng-container *ngIf=\"subscribeSuccess$ | async; else loading\">\r\n  <div class=\"cx-dialog-body modal-body\">\r\n    <div class=\"container\">\r\n      <p>\r\n        {{\r\n          'stockNotification.subscriptionDialog.notifiedPrefix' | cxTranslate\r\n        }}\r\n      </p>\r\n      <p *ngFor=\"let preference of enabledPrefs\" class=\"channels\">\r\n        <span>{{ preference.channel }}</span\r\n        ><span *ngIf=\"preference.value\">{{ ': ' + preference.value }}</span>\r\n      </p>\r\n      <p>\r\n        {{\r\n          'stockNotification.subscriptionDialog.notifiedSuffix' | cxTranslate\r\n        }}\r\n      </p>\r\n      <p>\r\n        {{\r\n          'stockNotification.subscriptionDialog.manageChannelsPrefix'\r\n            | cxTranslate\r\n        }}\r\n        <a\r\n          (click)=\"close()\"\r\n          [routerLink]=\"['/my-account/notification-preference']\"\r\n          class=\"link-prefs\"\r\n        >\r\n          {{\r\n            'stockNotification.subscriptionDialog.manageChannelsLink'\r\n              | cxTranslate\r\n          }}</a\r\n        >\r\n        {{\r\n          'stockNotification.subscriptionDialog.manageChannelsSuffix'\r\n            | cxTranslate\r\n        }}\r\n      </p>\r\n\r\n      <p>\r\n        {{\r\n          'stockNotification.subscriptionDialog.manageSubscriptionsPrefix'\r\n            | cxTranslate\r\n        }}\r\n        <a\r\n          (click)=\"close()\"\r\n          [routerLink]=\"['/my-account/my-interests']\"\r\n          class=\"link-interests\"\r\n        >\r\n          {{\r\n            'stockNotification.subscriptionDialog.manageSubscriptionsLink'\r\n              | cxTranslate\r\n          }}</a\r\n        >\r\n        {{\r\n          'stockNotification.subscriptionDialog.manageSubscriptionsSuffix'\r\n            | cxTranslate\r\n        }}\r\n      </p>\r\n      <div class=\"row\">\r\n        <div class=\"cx-dialog-actions col-sm-12 col-md-3 offset-md-9\">\r\n          <button\r\n            class=\"btn btn-primary btn-block btn-ok\"\r\n            type=\"button\"\r\n            (click)=\"close()\"\r\n          >\r\n            {{ 'stockNotification.subscriptionDialog.okBtn' | cxTranslate }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #loading>\r\n  <div class=\"cx-dialog-body modal-body\">\r\n    <p>\r\n      {{ 'stockNotification.subscriptionDialog.subscribing' | cxTranslate }}\r\n    </p>\r\n    <div class=\"cx-dialog-row\">\r\n      <div class=\"col-sm-12\">\r\n        <cx-spinner></cx-spinner>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n"
    })
], StockNotificationDialogComponent);
export { StockNotificationDialogComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvY2stbm90aWZpY2F0aW9uLWRpYWxvZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL3N0b3JlZnJvbnQvIiwic291cmNlcyI6WyJjbXMtY29tcG9uZW50cy9wcm9kdWN0L3N0b2NrLW5vdGlmaWNhdGlvbi9zdG9jay1ub3RpZmljYXRpb24tZGlhbG9nL3N0b2NrLW5vdGlmaWNhdGlvbi1kaWFsb2cuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9FLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQU1qRixJQUFhLGdDQUFnQyxHQUE3QyxNQUFhLGdDQUFnQztJQUkzQyxZQUNVLFlBQTBCLEVBQzFCLGdCQUFzQztRQUR0QyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQXNCO1FBSmhELGlCQUFZLEdBQTZCLEVBQUUsQ0FBQztJQUt6QyxDQUFDO0lBRUosS0FBSztRQUNILElBQUksQ0FBQyxZQUFZLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUN6QyxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQzFCLElBQUksQ0FBQyxpQkFBaUI7aUJBQ25CLFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUNyQixJQUFJLE9BQU8sRUFBRTtvQkFDWCxJQUFJLENBQUMsZ0JBQWdCLENBQUMscUJBQXFCLEVBQUUsQ0FBQztpQkFDL0M7WUFDSCxDQUFDLENBQUM7aUJBQ0QsV0FBVyxFQUFFLENBQUM7U0FDbEI7SUFDSCxDQUFDO0NBQ0YsQ0FBQTs7WUFuQnlCLFlBQVk7WUFDUixvQkFBb0I7O0FBTnJDLGdDQUFnQztJQUo1QyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsOEJBQThCO1FBQ3hDLDYvRkFBeUQ7S0FDMUQsQ0FBQztHQUNXLGdDQUFnQyxDQXdCNUM7U0F4QlksZ0NBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTm90aWZpY2F0aW9uUHJlZmVyZW5jZSwgVXNlckludGVyZXN0c1NlcnZpY2UgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IE1vZGFsU2VydmljZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb21wb25lbnRzL21vZGFsL21vZGFsLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdjeC1zdG9jay1ub3RpZmljYXRpb24tZGlhbG9nJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vc3RvY2stbm90aWZpY2F0aW9uLWRpYWxvZy5jb21wb25lbnQuaHRtbCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTdG9ja05vdGlmaWNhdGlvbkRpYWxvZ0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcbiAgc3Vic2NyaWJlU3VjY2VzcyQ6IE9ic2VydmFibGU8Ym9vbGVhbj47XHJcbiAgZW5hYmxlZFByZWZzOiBOb3RpZmljYXRpb25QcmVmZXJlbmNlW10gPSBbXTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIG1vZGFsU2VydmljZTogTW9kYWxTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBpbnRlcmVzdHNTZXJ2aWNlOiBVc2VySW50ZXJlc3RzU2VydmljZVxyXG4gICkge31cclxuXHJcbiAgY2xvc2UoKSB7XHJcbiAgICB0aGlzLm1vZGFsU2VydmljZS5kaXNtaXNzQWN0aXZlTW9kYWwoKTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuc3Vic2NyaWJlU3VjY2VzcyQpIHtcclxuICAgICAgdGhpcy5zdWJzY3JpYmVTdWNjZXNzJFxyXG4gICAgICAgIC5zdWJzY3JpYmUoKHN1Y2Nlc3MpID0+IHtcclxuICAgICAgICAgIGlmIChzdWNjZXNzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW50ZXJlc3RzU2VydmljZS5yZXNldEFkZEludGVyZXN0U3RhdGUoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC51bnN1YnNjcmliZSgpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=