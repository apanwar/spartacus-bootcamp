import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, Input, QueryList, ViewChild, ViewChildren, } from '@angular/core';
import { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';
import { FocusDirective } from '../../../../../layout/a11y/keyboard-focus/focus.directive';
import { FacetService } from '../services/facet.service';
let FacetComponent = class FacetComponent {
    constructor(facetService, elementRef, cd) {
        this.facetService = facetService;
        this.elementRef = elementRef;
        this.cd = cd;
        /** configurable icon that is used to collapse the facet group  */
        this.expandIcon = ICON_TYPE.EXPAND;
        this.collapseIcon = ICON_TYPE.COLLAPSE;
    }
    set facet(value) {
        this._facet = value;
        this.isMultiSelect = !!value.multiSelect;
        this.state$ = this.facetService.getState(value);
    }
    get facet() {
        return this._facet;
    }
    /**
     * Handles clicking the heading of the facet group, which means toggling
     * the visibility of the group (collapse / expand) and optionally focusing
     * the group.
     */
    toggleGroup(event) {
        var _a;
        const host = this.elementRef.nativeElement;
        const isLocked = (_a = this.keyboardFocus) === null || _a === void 0 ? void 0 : _a.isLocked;
        this.facetService.toggle(this.facet, this.isExpanded);
        if (!isLocked || this.isExpanded) {
            host.focus();
            // we stop propagating the event as otherwise the focus on the host will trigger
            // an unlock event from the LockFocus directive.
            event.stopPropagation();
        }
    }
    get isExpanded() {
        return this.values.first.nativeElement.offsetParent !== null;
    }
    openLink(event) {
        event.target.click();
        event.preventDefault();
    }
    /**
     * Increases the number of visible values for the facet. This is delegated
     * to `facetService.increaseVisibleValues`.
     */
    increaseVisibleValues() {
        this.facetService.increaseVisibleValues(this.facet);
    }
    /**
     * Decreases the number of visible values for the facet. This is delegated
     * to `facetService.decreaseVisibleValues`.
     */
    decreaseVisibleValues() {
        this.facetService.decreaseVisibleValues(this.facet);
    }
    getLinkParams(value) {
        var _a;
        return this.facetService.getLinkParams((_a = value.query) === null || _a === void 0 ? void 0 : _a.query.value);
    }
};
FacetComponent.ctorParameters = () => [
    { type: FacetService },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
__decorate([
    Input()
], FacetComponent.prototype, "expandIcon", void 0);
__decorate([
    Input()
], FacetComponent.prototype, "collapseIcon", void 0);
__decorate([
    HostBinding('class.multi-select')
], FacetComponent.prototype, "isMultiSelect", void 0);
__decorate([
    ViewChildren('facetValue')
], FacetComponent.prototype, "values", void 0);
__decorate([
    ViewChild(FocusDirective)
], FacetComponent.prototype, "keyboardFocus", void 0);
__decorate([
    Input()
], FacetComponent.prototype, "facet", null);
FacetComponent = __decorate([
    Component({
        selector: 'cx-facet',
        template: "<ng-container *ngIf=\"state$ | async as state\">\r\n  <button class=\"heading\" (click)=\"toggleGroup($event)\">\r\n    {{ facet.name }}\r\n    <cx-icon class=\"collapse-icon\" [type]=\"collapseIcon\"></cx-icon>\r\n    <cx-icon class=\"expand-icon\" [type]=\"expandIcon\"></cx-icon>\r\n  </button>\r\n\r\n  <a\r\n    *ngFor=\"let value of facet.values | slice: 0:state.topVisible\"\r\n    #facetValue\r\n    routerLink=\"./\"\r\n    [queryParams]=\"getLinkParams(value)\"\r\n    class=\"value\"\r\n    [class.selected]=\"value.selected\"\r\n    [cxFocus]=\"value.name\"\r\n    (keydown.space)=\"openLink($event)\"\r\n  >\r\n    <span>\r\n      <span class=\"label\">{{ value.name }}</span>\r\n      <span class=\"count\">{{ value.count }}</span>\r\n    </span>\r\n  </a>\r\n\r\n  <div class=\"more\">\r\n    <a\r\n      *ngFor=\"\r\n        let value of facet.values | slice: state.topVisible:state.maxVisible\r\n      \"\r\n      #facetValue\r\n      routerLink=\"./\"\r\n      [queryParams]=\"getLinkParams(value)\"\r\n      class=\"value\"\r\n      [class.selected]=\"value.selected\"\r\n      [cxFocus]=\"value.name\"\r\n      (keydown.space)=\"openLink($event)\"\r\n    >\r\n      <span\r\n        >{{ value.name }}<span class=\"count\">{{ value.count }}</span></span\r\n      >\r\n    </a>\r\n\r\n    <button\r\n      *ngIf=\"state.maxVisible > state.topVisible\"\r\n      (click)=\"decreaseVisibleValues()\"\r\n      class=\"cx-action-link\"\r\n      cxFocus=\"moreorless\"\r\n    >\r\n      {{ 'productList.showLess' | cxTranslate }}\r\n    </button>\r\n\r\n    <button\r\n      *ngIf=\"state.maxVisible > 0 && state.maxVisible < facet.values.length\"\r\n      (click)=\"increaseVisibleValues()\"\r\n      class=\"cx-action-link\"\r\n      cxFocus=\"moreorless\"\r\n    >\r\n      {{ 'productList.showMore' | cxTranslate }}\r\n    </button>\r\n  </div>\r\n</ng-container>\r\n",
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], FacetComponent);
export { FacetComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjZXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9zdG9yZWZyb250LyIsInNvdXJjZXMiOlsiY21zLWNvbXBvbmVudHMvcHJvZHVjdC9wcm9kdWN0LWxpc3QvcHJvZHVjdC1mYWNldC1uYXZpZ2F0aW9uL2ZhY2V0L2ZhY2V0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLEVBQ1gsS0FBSyxFQUNMLFNBQVMsRUFDVCxTQUFTLEVBQ1QsWUFBWSxHQUNiLE1BQU0sZUFBZSxDQUFDO0FBR3ZCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUMvRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMkRBQTJELENBQUM7QUFFM0YsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBT3pELElBQWEsY0FBYyxHQUEzQixNQUFhLGNBQWM7SUEwQnpCLFlBQ1ksWUFBMEIsRUFDMUIsVUFBbUMsRUFDbkMsRUFBcUI7UUFGckIsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsZUFBVSxHQUFWLFVBQVUsQ0FBeUI7UUFDbkMsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUF4QmpDLGtFQUFrRTtRQUN6RCxlQUFVLEdBQWMsU0FBUyxDQUFDLE1BQU0sQ0FBQztRQUN6QyxpQkFBWSxHQUFjLFNBQVMsQ0FBQyxRQUFRLENBQUM7SUF1Qm5ELENBQUM7SUFkSixJQUFJLEtBQUssQ0FBQyxLQUFZO1FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUM7UUFDekMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFRRDs7OztPQUlHO0lBQ0gsV0FBVyxDQUFDLEtBQWM7O1FBQ3hCLE1BQU0sSUFBSSxHQUFnQixJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQUN4RCxNQUFNLFFBQVEsU0FBRyxJQUFJLENBQUMsYUFBYSwwQ0FBRSxRQUFRLENBQUM7UUFFOUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFdEQsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2hDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNiLGdGQUFnRjtZQUNoRixnREFBZ0Q7WUFDaEQsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQztJQUVELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFlBQVksS0FBSyxJQUFJLENBQUM7SUFDL0QsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFvQjtRQUMxQixLQUFLLENBQUMsTUFBc0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN0QyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVEOzs7T0FHRztJQUNILHFCQUFxQjtRQUNuQixJQUFJLENBQUMsWUFBWSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gscUJBQXFCO1FBQ25CLElBQUksQ0FBQyxZQUFZLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxhQUFhLENBQUMsS0FBaUI7O1FBQzdCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLE9BQUMsS0FBSyxDQUFDLEtBQUssMENBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25FLENBQUM7Q0FDRixDQUFBOztZQXBEMkIsWUFBWTtZQUNkLFVBQVU7WUFDbEIsaUJBQWlCOztBQXZCeEI7SUFBUixLQUFLLEVBQUU7a0RBQTBDO0FBQ3pDO0lBQVIsS0FBSyxFQUFFO29EQUE4QztBQUVuQjtJQUFsQyxXQUFXLENBQUMsb0JBQW9CLENBQUM7cURBQXdCO0FBRTlCO0lBQTNCLFlBQVksQ0FBQyxZQUFZLENBQUM7OENBQTRDO0FBRTVDO0lBQTFCLFNBQVMsQ0FBQyxjQUFjLENBQUM7cURBQStCO0FBR3pEO0lBREMsS0FBSyxFQUFFOzJDQUtQO0FBcEJVLGNBQWM7SUFMMUIsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLFVBQVU7UUFDcEIsdTJEQUFxQztRQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtLQUNoRCxDQUFDO0dBQ1csY0FBYyxDQStFMUI7U0EvRVksY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXHJcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgQ29tcG9uZW50LFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgSG9zdEJpbmRpbmcsXHJcbiAgSW5wdXQsXHJcbiAgUXVlcnlMaXN0LFxyXG4gIFZpZXdDaGlsZCxcclxuICBWaWV3Q2hpbGRyZW4sXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZhY2V0LCBGYWNldFZhbHVlIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBJQ09OX1RZUEUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jbXMtY29tcG9uZW50cy9taXNjL2ljb24vaWNvbi5tb2RlbCc7XHJcbmltcG9ydCB7IEZvY3VzRGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vbGF5b3V0L2ExMXkva2V5Ym9hcmQtZm9jdXMvZm9jdXMuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgRmFjZXRDb2xsYXBzZVN0YXRlIH0gZnJvbSAnLi4vZmFjZXQubW9kZWwnO1xyXG5pbXBvcnQgeyBGYWNldFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9mYWNldC5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnY3gtZmFjZXQnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9mYWNldC5jb21wb25lbnQuaHRtbCcsXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGYWNldENvbXBvbmVudCB7XHJcbiAgcHJvdGVjdGVkIF9mYWNldDogRmFjZXQ7XHJcblxyXG4gIHN0YXRlJDogT2JzZXJ2YWJsZTxGYWNldENvbGxhcHNlU3RhdGU+O1xyXG5cclxuICAvKiogY29uZmlndXJhYmxlIGljb24gdGhhdCBpcyB1c2VkIHRvIGNvbGxhcHNlIHRoZSBmYWNldCBncm91cCAgKi9cclxuICBASW5wdXQoKSBleHBhbmRJY29uOiBJQ09OX1RZUEUgPSBJQ09OX1RZUEUuRVhQQU5EO1xyXG4gIEBJbnB1dCgpIGNvbGxhcHNlSWNvbjogSUNPTl9UWVBFID0gSUNPTl9UWVBFLkNPTExBUFNFO1xyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLm11bHRpLXNlbGVjdCcpIGlzTXVsdGlTZWxlY3Q6IGJvb2xlYW47XHJcblxyXG4gIEBWaWV3Q2hpbGRyZW4oJ2ZhY2V0VmFsdWUnKSB2YWx1ZXM6IFF1ZXJ5TGlzdDxFbGVtZW50UmVmPEhUTUxFbGVtZW50Pj47XHJcblxyXG4gIEBWaWV3Q2hpbGQoRm9jdXNEaXJlY3RpdmUpIGtleWJvYXJkRm9jdXM6IEZvY3VzRGlyZWN0aXZlO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHNldCBmYWNldCh2YWx1ZTogRmFjZXQpIHtcclxuICAgIHRoaXMuX2ZhY2V0ID0gdmFsdWU7XHJcbiAgICB0aGlzLmlzTXVsdGlTZWxlY3QgPSAhIXZhbHVlLm11bHRpU2VsZWN0O1xyXG4gICAgdGhpcy5zdGF0ZSQgPSB0aGlzLmZhY2V0U2VydmljZS5nZXRTdGF0ZSh2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBnZXQgZmFjZXQoKTogRmFjZXQge1xyXG4gICAgcmV0dXJuIHRoaXMuX2ZhY2V0O1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgZmFjZXRTZXJ2aWNlOiBGYWNldFNlcnZpY2UsXHJcbiAgICBwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXHJcbiAgICBwcm90ZWN0ZWQgY2Q6IENoYW5nZURldGVjdG9yUmVmXHJcbiAgKSB7fVxyXG5cclxuICAvKipcclxuICAgKiBIYW5kbGVzIGNsaWNraW5nIHRoZSBoZWFkaW5nIG9mIHRoZSBmYWNldCBncm91cCwgd2hpY2ggbWVhbnMgdG9nZ2xpbmdcclxuICAgKiB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgZ3JvdXAgKGNvbGxhcHNlIC8gZXhwYW5kKSBhbmQgb3B0aW9uYWxseSBmb2N1c2luZ1xyXG4gICAqIHRoZSBncm91cC5cclxuICAgKi9cclxuICB0b2dnbGVHcm91cChldmVudDogVUlFdmVudCkge1xyXG4gICAgY29uc3QgaG9zdDogSFRNTEVsZW1lbnQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcclxuICAgIGNvbnN0IGlzTG9ja2VkID0gdGhpcy5rZXlib2FyZEZvY3VzPy5pc0xvY2tlZDtcclxuXHJcbiAgICB0aGlzLmZhY2V0U2VydmljZS50b2dnbGUodGhpcy5mYWNldCwgdGhpcy5pc0V4cGFuZGVkKTtcclxuXHJcbiAgICBpZiAoIWlzTG9ja2VkIHx8IHRoaXMuaXNFeHBhbmRlZCkge1xyXG4gICAgICBob3N0LmZvY3VzKCk7XHJcbiAgICAgIC8vIHdlIHN0b3AgcHJvcGFnYXRpbmcgdGhlIGV2ZW50IGFzIG90aGVyd2lzZSB0aGUgZm9jdXMgb24gdGhlIGhvc3Qgd2lsbCB0cmlnZ2VyXHJcbiAgICAgIC8vIGFuIHVubG9jayBldmVudCBmcm9tIHRoZSBMb2NrRm9jdXMgZGlyZWN0aXZlLlxyXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldCBpc0V4cGFuZGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMudmFsdWVzLmZpcnN0Lm5hdGl2ZUVsZW1lbnQub2Zmc2V0UGFyZW50ICE9PSBudWxsO1xyXG4gIH1cclxuXHJcbiAgb3BlbkxpbmsoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgIChldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQpLmNsaWNrKCk7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5jcmVhc2VzIHRoZSBudW1iZXIgb2YgdmlzaWJsZSB2YWx1ZXMgZm9yIHRoZSBmYWNldC4gVGhpcyBpcyBkZWxlZ2F0ZWRcclxuICAgKiB0byBgZmFjZXRTZXJ2aWNlLmluY3JlYXNlVmlzaWJsZVZhbHVlc2AuXHJcbiAgICovXHJcbiAgaW5jcmVhc2VWaXNpYmxlVmFsdWVzKCk6IHZvaWQge1xyXG4gICAgdGhpcy5mYWNldFNlcnZpY2UuaW5jcmVhc2VWaXNpYmxlVmFsdWVzKHRoaXMuZmFjZXQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGVjcmVhc2VzIHRoZSBudW1iZXIgb2YgdmlzaWJsZSB2YWx1ZXMgZm9yIHRoZSBmYWNldC4gVGhpcyBpcyBkZWxlZ2F0ZWRcclxuICAgKiB0byBgZmFjZXRTZXJ2aWNlLmRlY3JlYXNlVmlzaWJsZVZhbHVlc2AuXHJcbiAgICovXHJcbiAgZGVjcmVhc2VWaXNpYmxlVmFsdWVzKCk6IHZvaWQge1xyXG4gICAgdGhpcy5mYWNldFNlcnZpY2UuZGVjcmVhc2VWaXNpYmxlVmFsdWVzKHRoaXMuZmFjZXQpO1xyXG4gIH1cclxuXHJcbiAgZ2V0TGlua1BhcmFtcyh2YWx1ZTogRmFjZXRWYWx1ZSkge1xyXG4gICAgcmV0dXJuIHRoaXMuZmFjZXRTZXJ2aWNlLmdldExpbmtQYXJhbXModmFsdWUucXVlcnk/LnF1ZXJ5LnZhbHVlKTtcclxuICB9XHJcbn1cclxuIl19