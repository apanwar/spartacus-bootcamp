import { __decorate } from "tslib";
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActiveCartService, Cart, CartVoucherService, CustomerCoupon, CustomerCouponSearchResult, CustomerCouponService, } from '@spartacus/core';
import { combineLatest, Subscription } from 'rxjs';
import { map, tap } from 'rxjs/operators';
let CartCouponComponent = class CartCouponComponent {
    constructor(cartVoucherService, formBuilder, customerCouponService, activeCartService) {
        this.cartVoucherService = cartVoucherService;
        this.formBuilder = formBuilder;
        this.customerCouponService = customerCouponService;
        this.activeCartService = activeCartService;
        this.MAX_CUSTOMER_COUPON_PAGE = 100;
        this.ignoreCloseEvent = false;
        this.subscription = new Subscription();
        this.couponBoxIsActive = false;
    }
    ngOnInit() {
        if (this.customerCouponService) {
            this.customerCouponService.loadCustomerCoupons(this.MAX_CUSTOMER_COUPON_PAGE);
        }
        this.cart$ = combineLatest([
            this.activeCartService.getActive(),
            this.activeCartService.getActiveCartId(),
            this.customerCouponService.getCustomerCoupons(this.MAX_CUSTOMER_COUPON_PAGE),
        ]).pipe(tap(([cart, activeCardId, customerCoupons]) => {
            this.cartId = activeCardId;
            this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);
        }), map(([cart]) => cart));
        this.cartIsLoading$ = this.activeCartService
            .isStable()
            .pipe(map((loaded) => !loaded));
        this.cartVoucherService.resetAddVoucherProcessingState();
        this.couponForm = this.formBuilder.group({
            couponCode: ['', [Validators.required]],
        });
        // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER
        this.subscription.add(this.cartVoucherService
            .getAddVoucherResultSuccess()
            .subscribe((success) => {
            this.onSuccess(success);
        }));
        // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER
        this.subscription.add(this.cartVoucherService.getAddVoucherResultError().subscribe((error) => {
            this.onError(error);
        }));
    }
    onError(error) {
        if (error) {
            this.customerCouponService.loadCustomerCoupons(this.MAX_CUSTOMER_COUPON_PAGE);
            this.cartVoucherService.resetAddVoucherProcessingState();
        }
    }
    onSuccess(success) {
        if (success) {
            this.couponForm.reset();
            this.cartVoucherService.resetAddVoucherProcessingState();
        }
    }
    getApplicableCustomerCoupons(cart, coupons) {
        this.applicableCoupons = coupons || [];
        if (cart.appliedVouchers) {
            cart.appliedVouchers.forEach((appliedVoucher) => {
                this.applicableCoupons = this.applicableCoupons.filter((coupon) => coupon.couponId !== appliedVoucher.code);
            });
        }
    }
    applyVoucher() {
        if (this.couponForm.valid) {
            this.cartVoucherService.addVoucher(this.couponForm.value.couponCode, this.cartId);
        }
        else {
            this.couponForm.markAllAsTouched();
        }
    }
    applyCustomerCoupon(couponId) {
        this.cartVoucherService.addVoucher(couponId, this.cartId);
        this.couponBoxIsActive = false;
    }
    close(event) {
        if (!this.ignoreCloseEvent) {
            this.couponBoxIsActive = false;
            if (event && event.target) {
                event.target.blur();
            }
        }
        this.ignoreCloseEvent = false;
    }
    disableClose() {
        this.ignoreCloseEvent = true;
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
        this.cartVoucherService.resetAddVoucherProcessingState();
    }
};
CartCouponComponent.ctorParameters = () => [
    { type: CartVoucherService },
    { type: FormBuilder },
    { type: CustomerCouponService },
    { type: ActiveCartService }
];
CartCouponComponent = __decorate([
    Component({
        selector: 'cx-cart-coupon',
        template: "<ng-container *ngIf=\"cart$ | async as cart\">\r\n  <div class=\"cx-cart-coupon-title\">\r\n    {{ 'voucher.coupon' | cxTranslate }}\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <form (ngSubmit)=\"applyVoucher()\" [formGroup]=\"couponForm\">\r\n      <div class=\"cx-cart-coupon-container\">\r\n        <input\r\n          type=\"text\"\r\n          class=\"form-control input-coupon-code\"\r\n          formControlName=\"couponCode\"\r\n          placeholder=\"{{ 'voucher.placeholder' | cxTranslate }}\"\r\n        />\r\n        <button\r\n          class=\"btn btn-block btn-action apply-coupon-button\"\r\n          type=\"submit\"\r\n          [disabled]=\"cartIsLoading$ | async\"\r\n          [class.disabled]=\"cartIsLoading$ | async\"\r\n        >\r\n          {{ 'voucher.apply' | cxTranslate }}\r\n        </button>\r\n        <cx-form-errors\r\n          [control]=\"couponForm.get('couponCode')\"\r\n        ></cx-form-errors>\r\n      </div>\r\n    </form>\r\n  </div>\r\n\r\n  <cx-applied-coupons\r\n    [vouchers]=\"cart.appliedVouchers\"\r\n    [cartIsLoading]=\"cartIsLoading$ | async\"\r\n    [isReadOnly]=\"false\"\r\n  >\r\n  </cx-applied-coupons>\r\n\r\n  <ng-container *ngIf=\"applicableCoupons && applicableCoupons.length > 0\">\r\n    <div class=\"cx-available-coupon\">\r\n      <div class=\"title cx-cart-coupon-title\">\r\n        {{ 'voucher.availableCoupons' | cxTranslate }}\r\n      </div>\r\n      <div class=\"message\">\r\n        {{ 'voucher.availableCouponsLabel' | cxTranslate }}\r\n      </div>\r\n      <div class=\"scroll\">\r\n        <div class=\"coupons card\" *ngFor=\"let coupon of applicableCoupons\">\r\n          <button\r\n            (click)=\"applyCustomerCoupon(coupon.couponId)\"\r\n            class=\"coupon-id link\"\r\n            [disabled]=\"cartIsLoading$ | async\"\r\n            [class.disabled]=\"cartIsLoading$ | async\"\r\n          >\r\n            {{ coupon.couponId }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</ng-container>\r\n"
    })
], CartCouponComponent);
export { CartCouponComponent };
//# sourceMappingURL=data:application/json;base64,