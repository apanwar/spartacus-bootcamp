import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { CheckoutDeliveryService, DeliveryMode, RoutingService, } from '@spartacus/core';
import { map, withLatestFrom } from 'rxjs/operators';
import { CheckoutConfigService } from '../../services/checkout-config.service';
let DeliveryModeComponent = class DeliveryModeComponent {
    constructor(fb, checkoutDeliveryService, routingService, checkoutConfigService, activatedRoute) {
        this.fb = fb;
        this.checkoutDeliveryService = checkoutDeliveryService;
        this.routingService = routingService;
        this.checkoutConfigService = checkoutConfigService;
        this.activatedRoute = activatedRoute;
        this.allowRedirect = false;
        this.mode = this.fb.group({
            deliveryModeId: ['', Validators.required],
        });
    }
    ngOnInit() {
        this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute);
        this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(this.activatedRoute);
        this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();
        this.deliveryModeSub = this.supportedDeliveryModes$
            .pipe(withLatestFrom(this.checkoutDeliveryService
            .getSelectedDeliveryMode()
            .pipe(map((deliveryMode) => deliveryMode && deliveryMode.code ? deliveryMode.code : null))))
            .subscribe(([deliveryModes, code]) => {
            if (!code && deliveryModes && deliveryModes.length) {
                code = this.checkoutConfigService.getPreferredDeliveryMode(deliveryModes);
            }
            if (this.allowRedirect &&
                !!code &&
                code === this.currentDeliveryModeId) {
                this.routingService.go(this.checkoutStepUrlNext);
            }
            if (code) {
                this.mode.controls['deliveryModeId'].setValue(code);
                if (code !== this.currentDeliveryModeId) {
                    this.checkoutDeliveryService.setDeliveryMode(code);
                }
            }
            this.currentDeliveryModeId = code;
        });
    }
    changeMode(code) {
        if (code !== this.currentDeliveryModeId) {
            this.checkoutDeliveryService.setDeliveryMode(code);
            this.currentDeliveryModeId = code;
        }
    }
    next() {
        this.allowRedirect = true;
        if (this.mode.valid && this.mode.value) {
            if (!this.currentDeliveryModeId) {
                this.currentDeliveryModeId = this.mode.value.deliveryModeId;
            }
            this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);
        }
    }
    back() {
        this.routingService.go(this.checkoutStepUrlPrevious);
    }
    get deliveryModeInvalid() {
        return this.mode.controls['deliveryModeId'].invalid;
    }
    ngOnDestroy() {
        if (this.deliveryModeSub) {
            this.deliveryModeSub.unsubscribe();
        }
    }
};
DeliveryModeComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: CheckoutDeliveryService },
    { type: RoutingService },
    { type: CheckoutConfigService },
    { type: ActivatedRoute }
];
DeliveryModeComponent = __decorate([
    Component({
        selector: 'cx-delivery-mode',
        template: "<div [formGroup]=\"mode\">\r\n  <div class=\"row\">\r\n    <div class=\"col-md-12 col-lg-9\">\r\n      <h3 class=\"cx-checkout-title d-none d-lg-block d-xl-block\">\r\n        {{ 'checkoutShipping.shippingMethod' | cxTranslate }}\r\n      </h3>\r\n\r\n      <ng-container\r\n        *ngIf=\"(supportedDeliveryModes$ | async)?.length; else loading\"\r\n      >\r\n        <div\r\n          class=\"form-check\"\r\n          *ngFor=\"let mode of supportedDeliveryModes$ | async\"\r\n        >\r\n          <input\r\n            class=\"form-check-input\"\r\n            role=\"radio\"\r\n            type=\"radio\"\r\n            id=\"deliveryMode-{{ mode.code }}\"\r\n            aria-checked=\"true\"\r\n            (change)=\"changeMode(mode.code)\"\r\n            [value]=\"mode.code\"\r\n            formControlName=\"deliveryModeId\"\r\n          />\r\n          <label\r\n            class=\"cx-delivery-label form-check-label form-radio-label\"\r\n            for=\"deliveryMode-{{ mode.code }}\"\r\n          >\r\n            <div class=\"cx-delivery-mode\">{{ mode.name }}</div>\r\n            <div class=\"cx-delivery-price\">\r\n              {{ mode.deliveryCost.formattedValue }}\r\n            </div>\r\n            <div class=\"cx-delivery-details\">{{ mode.description }}</div>\r\n          </label>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"row cx-checkout-btns\">\r\n    <div class=\"col-md-12 col-lg-6\">\r\n      <button class=\"btn btn-block btn-action\" (click)=\"back()\">\r\n        {{ 'common.back' | cxTranslate }}\r\n      </button>\r\n    </div>\r\n    <div class=\"col-md-12 col-lg-6\">\r\n      <button\r\n        class=\"btn btn-block btn-primary\"\r\n        [disabled]=\"deliveryModeInvalid\"\r\n        (click)=\"next()\"\r\n      >\r\n        {{ 'common.continue' | cxTranslate }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #loading>\r\n  <div class=\"cx-spinner\">\r\n    <cx-spinner></cx-spinner>\r\n  </div>\r\n</ng-template>\r\n",
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], DeliveryModeComponent);
export { DeliveryModeComponent };
//# sourceMappingURL=data:application/json;base64,