import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { ActiveCartService, Address, CheckoutDeliveryService, CheckoutPaymentService, CheckoutService, GlobalMessageService, GlobalMessageType, PaymentDetails, RoutingService, TranslationService, UserPaymentService, } from '@spartacus/core';
import { combineLatest, of } from 'rxjs';
import { map, switchMap, take, tap } from 'rxjs/operators';
import { ICON_TYPE } from '../../../misc/icon';
import { CheckoutConfigService } from '../../services/checkout-config.service';
let PaymentMethodComponent = class PaymentMethodComponent {
    constructor(userPaymentService, checkoutService, checkoutDeliveryService, checkoutPaymentService, globalMessageService, routingService, checkoutConfigService, activatedRoute, translation, activeCartService) {
        this.userPaymentService = userPaymentService;
        this.checkoutService = checkoutService;
        this.checkoutDeliveryService = checkoutDeliveryService;
        this.checkoutPaymentService = checkoutPaymentService;
        this.globalMessageService = globalMessageService;
        this.routingService = routingService;
        this.checkoutConfigService = checkoutConfigService;
        this.activatedRoute = activatedRoute;
        this.translation = translation;
        this.activeCartService = activeCartService;
        this.iconTypes = ICON_TYPE;
        this.isGuestCheckout = false;
        this.newPaymentFormManuallyOpened = false;
    }
    ngOnInit() {
        this.shouldRedirect = false;
        this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();
        if (!this.activeCartService.isGuestCart()) {
            this.userPaymentService.loadPaymentMethods();
        }
        else {
            this.isGuestCheckout = true;
        }
        this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute);
        this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(this.activatedRoute);
        this.checkoutDeliveryService
            .getDeliveryAddress()
            .pipe(take(1))
            .subscribe((address) => {
            this.deliveryAddress = address;
        });
        this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();
        this.selectedMethod$ = this.checkoutPaymentService.getPaymentDetails().pipe(tap((paymentInfo) => {
            if (paymentInfo && !!Object.keys(paymentInfo).length) {
                if (paymentInfo['hasError']) {
                    Object.keys(paymentInfo).forEach((key) => {
                        if (key.startsWith('InvalidField')) {
                            this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);
                        }
                    });
                    this.checkoutService.clearCheckoutStep(3);
                }
                else if (this.shouldRedirect) {
                    this.routingService.go(this.checkoutStepUrlNext);
                }
            }
        }));
        this.cards$ = combineLatest([
            this.existingPaymentMethods$.pipe(switchMap((methods) => {
                return !(methods === null || methods === void 0 ? void 0 : methods.length)
                    ? of([])
                    : combineLatest(methods.map((method) => combineLatest([
                        of(method),
                        this.translation.translate('paymentCard.expires', {
                            month: method.expiryMonth,
                            year: method.expiryYear,
                        }),
                    ]).pipe(map(([payment, translation]) => ({
                        payment,
                        expiryTranslation: translation,
                    })))));
            })),
            this.selectedMethod$,
            this.translation.translate('paymentForm.useThisPayment'),
            this.translation.translate('paymentCard.defaultPaymentMethod'),
            this.translation.translate('paymentCard.selected'),
        ]).pipe(map(([paymentMethods, selectedMethod, textUseThisPayment, textDefaultPaymentMethod, textSelected,]) => {
            if (paymentMethods.length &&
                (!selectedMethod || Object.keys(selectedMethod).length === 0)) {
                const defaultPaymentMethod = paymentMethods.find((paymentMethod) => paymentMethod.payment.defaultPayment);
                if (defaultPaymentMethod) {
                    selectedMethod = defaultPaymentMethod.payment;
                    this.checkoutPaymentService.setPaymentDetails(selectedMethod);
                }
            }
            return paymentMethods.map((payment) => ({
                content: this.createCard(payment.payment, {
                    textExpires: payment.expiryTranslation,
                    textUseThisPayment,
                    textDefaultPaymentMethod,
                    textSelected,
                }, selectedMethod),
                paymentMethod: payment.payment,
            }));
        }));
    }
    selectPaymentMethod(paymentDetails) {
        this.checkoutPaymentService.setPaymentDetails(paymentDetails);
    }
    showNewPaymentForm() {
        this.newPaymentFormManuallyOpened = true;
    }
    hideNewPaymentForm() {
        this.newPaymentFormManuallyOpened = false;
    }
    setPaymentDetails({ paymentDetails, billingAddress, }) {
        const details = Object.assign({}, paymentDetails);
        details.billingAddress = billingAddress || this.deliveryAddress;
        this.checkoutPaymentService.createPaymentDetails(details);
        this.shouldRedirect = true;
    }
    ngOnDestroy() {
        this.checkoutPaymentService.paymentProcessSuccess();
    }
    getCardIcon(code) {
        let ccIcon;
        if (code === 'visa') {
            ccIcon = this.iconTypes.VISA;
        }
        else if (code === 'master' || code === 'mastercard_eurocard') {
            ccIcon = this.iconTypes.MASTER_CARD;
        }
        else if (code === 'diners') {
            ccIcon = this.iconTypes.DINERS_CLUB;
        }
        else if (code === 'amex') {
            ccIcon = this.iconTypes.AMEX;
        }
        else {
            ccIcon = this.iconTypes.CREDIT_CARD;
        }
        return ccIcon;
    }
    sendPaymentMethodFailGlobalMessage(field) {
        this.globalMessageService.add({
            key: 'paymentMethods.invalidField',
            params: { field },
        }, GlobalMessageType.MSG_TYPE_ERROR);
    }
    createCard(paymentDetails, cardLabels, selected) {
        return {
            title: paymentDetails.defaultPayment
                ? cardLabels.textDefaultPaymentMethod
                : '',
            textBold: paymentDetails.accountHolderName,
            text: [paymentDetails.cardNumber, cardLabels.textExpires],
            img: this.getCardIcon(paymentDetails.cardType.code),
            actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],
            header: (selected === null || selected === void 0 ? void 0 : selected.id) === paymentDetails.id
                ? cardLabels.textSelected
                : undefined,
        };
    }
    goNext() {
        this.routingService.go(this.checkoutStepUrlNext);
    }
    goPrevious() {
        this.routingService.go(this.checkoutStepUrlPrevious);
    }
};
PaymentMethodComponent.ctorParameters = () => [
    { type: UserPaymentService },
    { type: CheckoutService },
    { type: CheckoutDeliveryService },
    { type: CheckoutPaymentService },
    { type: GlobalMessageService },
    { type: RoutingService },
    { type: CheckoutConfigService },
    { type: ActivatedRoute },
    { type: TranslationService },
    { type: ActiveCartService }
];
PaymentMethodComponent = __decorate([
    Component({
        selector: 'cx-payment-method',
        template: "<ng-container *ngIf=\"cards$ | async as cards\">\r\n  <h3 class=\"cx-checkout-title d-none d-lg-block d-xl-block\">\r\n    {{ 'paymentForm.payment' | cxTranslate }}\r\n  </h3>\r\n  <ng-container *ngIf=\"!(isLoading$ | async); else loading\">\r\n    <ng-container\r\n      *ngIf=\"\r\n        cards?.length && !newPaymentFormManuallyOpened;\r\n        else newPaymentForm\r\n      \"\r\n    >\r\n      <p class=\"cx-checkout-text\">\r\n        {{ 'paymentForm.choosePaymentMethod' | cxTranslate }}\r\n      </p>\r\n      <div class=\"cx-checkout-btns row\">\r\n        <div class=\"col-md-12 col-lg-6\">\r\n          <button\r\n            class=\"btn btn-block btn-action\"\r\n            (click)=\"showNewPaymentForm()\"\r\n          >\r\n            {{ 'paymentForm.addNewPayment' | cxTranslate }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"cx-checkout-body row\">\r\n        <div\r\n          class=\"cx-payment-card col-md-12 col-lg-6\"\r\n          *ngFor=\"let card of cards; let i = index\"\r\n        >\r\n          <div class=\"cx-payment-card-inner\">\r\n            <cx-card\r\n              [border]=\"true\"\r\n              [fitToContainer]=\"true\"\r\n              [content]=\"card.content\"\r\n              (sendCard)=\"selectPaymentMethod(card.paymentMethod)\"\r\n            ></cx-card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row cx-checkout-btns\">\r\n        <div class=\"col-md-12 col-lg-6\">\r\n          <button class=\"btn btn-block btn-action\" (click)=\"goPrevious()\">\r\n            {{ 'common.back' | cxTranslate }}\r\n          </button>\r\n        </div>\r\n        <div class=\"col-md-12 col-lg-6\">\r\n          <button\r\n            class=\"btn btn-block btn-primary\"\r\n            [disabled]=\"!(selectedMethod$ | async)?.id\"\r\n            (click)=\"goNext()\"\r\n          >\r\n            {{ 'common.continue' | cxTranslate }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-template #newPaymentForm>\r\n      <cx-payment-form\r\n        (setPaymentDetails)=\"setPaymentDetails($event)\"\r\n        (closeForm)=\"hideNewPaymentForm()\"\r\n        (goBack)=\"goPrevious()\"\r\n        [paymentMethodsCount]=\"cards?.length || 0\"\r\n        [setAsDefaultField]=\"!isGuestCheckout\"\r\n      ></cx-payment-form>\r\n    </ng-template>\r\n  </ng-container>\r\n\r\n  <ng-template #loading>\r\n    <div class=\"cx-spinner\"><cx-spinner></cx-spinner></div>\r\n  </ng-template>\r\n</ng-container>\r\n",
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], PaymentMethodComponent);
export { PaymentMethodComponent };
//# sourceMappingURL=data:application/json;base64,