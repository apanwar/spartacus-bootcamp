import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { Address, Cart, ActiveCartService, CheckoutDeliveryService, CheckoutPaymentService, Country, DeliveryMode, OrderEntry, PaymentDetails, TranslationService, UserAddressService, PromotionResult, PromotionLocation, } from '@spartacus/core';
import { combineLatest } from 'rxjs';
import { map, switchMap, tap } from 'rxjs/operators';
import { CheckoutStepType } from '../../model/index';
import { CheckoutConfigService } from '../../services/index';
import { PromotionService } from '../../../../shared/services/promotion/promotion.service';
let ReviewSubmitComponent = class ReviewSubmitComponent {
    constructor(checkoutDeliveryService, checkoutPaymentService, userAddressService, activeCartService, translation, checkoutConfigService, promotionService) {
        this.checkoutDeliveryService = checkoutDeliveryService;
        this.checkoutPaymentService = checkoutPaymentService;
        this.userAddressService = userAddressService;
        this.activeCartService = activeCartService;
        this.translation = translation;
        this.checkoutConfigService = checkoutConfigService;
        this.promotionService = promotionService;
        this.checkoutStepType = CheckoutStepType;
        this.promotionLocation = PromotionLocation.ActiveCart;
    }
    ngOnInit() {
        this.cart$ = this.activeCartService.getActive();
        this.entries$ = this.activeCartService.getEntries();
        this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();
        this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();
        this.orderPromotions$ = this.promotionService.getOrderPromotions(this.promotionLocation);
        this.deliveryMode$ = this.checkoutDeliveryService
            .getSelectedDeliveryMode()
            .pipe(tap((selected) => {
            if (selected === null) {
                this.checkoutDeliveryService.loadSupportedDeliveryModes();
            }
        }));
        this.countryName$ = this.deliveryAddress$.pipe(switchMap((address) => this.userAddressService.getCountry(address.country.isocode)), tap((country) => {
            if (country === null) {
                this.userAddressService.loadDeliveryCountries();
            }
        }), map((country) => country && country.name));
    }
    getShippingAddressCard(deliveryAddress, countryName) {
        return combineLatest([
            this.translation.translate('addressCard.shipTo'),
        ]).pipe(map(([textTitle]) => {
            if (!countryName) {
                countryName = deliveryAddress.country.isocode;
            }
            let region = '';
            if (deliveryAddress.region && deliveryAddress.region.isocode) {
                region = deliveryAddress.region.isocode + ', ';
            }
            return {
                title: textTitle,
                textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,
                text: [
                    deliveryAddress.line1,
                    deliveryAddress.line2,
                    deliveryAddress.town + ', ' + region + countryName,
                    deliveryAddress.postalCode,
                    deliveryAddress.phone,
                ],
            };
        }));
    }
    getDeliveryModeCard(deliveryMode) {
        return combineLatest([
            this.translation.translate('checkoutShipping.shippingMethod'),
        ]).pipe(map(([textTitle]) => {
            return {
                title: textTitle,
                textBold: deliveryMode.name,
                text: [deliveryMode.description],
            };
        }));
    }
    getPaymentMethodCard(paymentDetails) {
        return combineLatest([
            this.translation.translate('paymentForm.payment'),
            this.translation.translate('paymentCard.expires', {
                month: paymentDetails.expiryMonth,
                year: paymentDetails.expiryYear,
            }),
        ]).pipe(map(([textTitle, textExpires]) => {
            return {
                title: textTitle,
                textBold: paymentDetails.accountHolderName,
                text: [paymentDetails.cardNumber, textExpires],
            };
        }));
    }
    getCheckoutStepUrl(stepType) {
        const step = this.checkoutConfigService.getCheckoutStep(stepType);
        return step && step.routeName;
    }
};
ReviewSubmitComponent.ctorParameters = () => [
    { type: CheckoutDeliveryService },
    { type: CheckoutPaymentService },
    { type: UserAddressService },
    { type: ActiveCartService },
    { type: TranslationService },
    { type: CheckoutConfigService },
    { type: PromotionService }
];
ReviewSubmitComponent = __decorate([
    Component({
        selector: 'cx-review-submit',
        template: "<div class=\"cx-review\">\r\n  <!-- TITLE -->\r\n  <h3 class=\"cx-review-title d-none d-lg-block d-xl-block\">\r\n    {{ 'checkoutReview.review' | cxTranslate }}\r\n  </h3>\r\n  <div class=\"cx-review-summary row\">\r\n    <!-- SHIPPING ADDRESS SECTION -->\r\n    <div class=\"col-md-12 col-lg-6 col-xl-4\">\r\n      <div class=\"cx-review-summary-wrapper\">\r\n        <div class=\"cx-review-summary-card cx-review-card-address\">\r\n          <cx-card\r\n            [content]=\"\r\n              getShippingAddressCard(\r\n                deliveryAddress$ | async,\r\n                countryName$ | async\r\n              ) | async\r\n            \"\r\n          ></cx-card>\r\n        </div>\r\n        <div *cxFeatureLevel=\"'1.1'\" class=\"cx-review-summary-edit-step\">\r\n          <a\r\n            [routerLink]=\"\r\n              {\r\n                cxRoute: getCheckoutStepUrl(checkoutStepType.SHIPPING_ADDRESS)\r\n              } | cxUrl\r\n            \"\r\n            >{{ 'checkoutReview.editShippingAddress' | cxTranslate }}</a\r\n          >\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- DELIVERY MODE SECTION -->\r\n    <div class=\"col-md-12 col-lg-6 col-xl-4\">\r\n      <div class=\"cx-review-summary-wrapper\">\r\n        <div class=\"cx-review-summary-card cx-review-card-shipping\">\r\n          <cx-card\r\n            *ngIf=\"deliveryMode$ | async as deliveryMode\"\r\n            [content]=\"getDeliveryModeCard(deliveryMode) | async\"\r\n          ></cx-card>\r\n        </div>\r\n        <div *cxFeatureLevel=\"'1.1'\" class=\"cx-review-summary-edit-step\">\r\n          <a\r\n            [routerLink]=\"\r\n              { cxRoute: getCheckoutStepUrl(checkoutStepType.DELIVERY_MODE) }\r\n                | cxUrl\r\n            \"\r\n            >{{ 'checkoutReview.editShippingMethod' | cxTranslate }}</a\r\n          >\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- PAYMENT METHOD SECTION -->\r\n    <div class=\"col-md-12 col-lg-6 col-xl-4\">\r\n      <div class=\"cx-review-summary-wrapper\">\r\n        <div class=\"cx-review-summary-card cx-review-card-payment\">\r\n          <cx-card\r\n            [content]=\"getPaymentMethodCard(paymentDetails$ | async) | async\"\r\n          ></cx-card>\r\n        </div>\r\n        <div *cxFeatureLevel=\"'1.1'\" class=\"cx-review-summary-edit-step\">\r\n          <a\r\n            [routerLink]=\"\r\n              { cxRoute: getCheckoutStepUrl(checkoutStepType.PAYMENT_DETAILS) }\r\n                | cxUrl\r\n            \"\r\n            >{{ 'checkoutReview.editPaymentMethod' | cxTranslate }}</a\r\n          >\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- CART ITEM SECTION -->\r\n  <ng-container *ngIf=\"cart$ | async as cart\">\r\n    <div class=\"cx-review-cart-total d-none d-lg-block d-xl-block\">\r\n      {{\r\n        'cartItems.cartTotal'\r\n          | cxTranslate: { count: cart.deliveryItemsQuantity }\r\n      }}:\r\n      {{ cart.totalPrice?.formattedValue }}\r\n    </div>\r\n    <h4 class=\"cx-review-cart-heading d-block d-lg-none d-xl-none\">\r\n      {{ 'checkoutReview.placeOrder' | cxTranslate }}\r\n    </h4>\r\n    <div\r\n      class=\"cx-review-cart-item col-md-12\"\r\n      *ngIf=\"entries$ | async as entries\"\r\n    >\r\n      <ng-container *ngIf=\"orderPromotions$ | async as orderPromotions\">\r\n        <cx-promotions [promotions]=\"orderPromotions\"></cx-promotions>\r\n      </ng-container>\r\n\r\n      <cx-cart-item-list\r\n        [items]=\"entries\"\r\n        [readonly]=\"true\"\r\n        [promotionLocation]=\"promotionLocation\"\r\n      ></cx-cart-item-list>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n",
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], ReviewSubmitComponent);
export { ReviewSubmitComponent };
//# sourceMappingURL=data:application/json;base64,