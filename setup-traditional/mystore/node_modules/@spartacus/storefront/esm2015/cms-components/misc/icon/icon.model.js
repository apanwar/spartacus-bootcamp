import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Config } from '@spartacus/core';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
export var ICON_TYPE;
(function (ICON_TYPE) {
    ICON_TYPE["STAR"] = "STAR";
    ICON_TYPE["SEARCH"] = "SEARCH";
    ICON_TYPE["CART"] = "CART";
    ICON_TYPE["INFO"] = "INFO";
    ICON_TYPE["GRID"] = "GRID";
    ICON_TYPE["LIST"] = "LIST";
    ICON_TYPE["CARET_DOWN"] = "CARET_DOWN";
    ICON_TYPE["CARET_LEFT"] = "CARET_LEFT";
    ICON_TYPE["CARET_RIGHT"] = "CARET_RIGHT";
    ICON_TYPE["CLOSE"] = "CLOSE";
    ICON_TYPE["ERROR"] = "ERROR";
    ICON_TYPE["WARNING"] = "WARNING";
    ICON_TYPE["SUCCESS"] = "SUCCESS";
    ICON_TYPE["VISA"] = "VISA";
    ICON_TYPE["MASTER_CARD"] = "MASTER_CARD";
    ICON_TYPE["AMEX"] = "AMEX";
    ICON_TYPE["DINERS_CLUB"] = "DINERS_CLUB";
    ICON_TYPE["CREDIT_CARD"] = "CREDIT_CARD";
    ICON_TYPE["EXPAND"] = "EXPAND";
    ICON_TYPE["COLLAPSE"] = "COLLAPSE";
    ICON_TYPE["RESET"] = "RESET";
    ICON_TYPE["CIRCLE"] = "CIRCLE";
    ICON_TYPE["HEART"] = "HEART";
    ICON_TYPE["EMPTY_HEART"] = "EMPTY_HEART";
    ICON_TYPE["FILTER"] = "FILTER";
})(ICON_TYPE || (ICON_TYPE = {}));
let IconConfig = class IconConfig {
};
IconConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function IconConfig_Factory() { return i0.ɵɵinject(i1.Config); }, token: IconConfig, providedIn: "root" });
IconConfig = __decorate([
    Injectable({
        providedIn: 'root',
        useExisting: Config,
    })
], IconConfig);
export { IconConfig };
/**
 * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.
 * The resources will be automitacally loaded in case they're required for the `ICON_TYPE`.
 */
export var IconResourceType;
(function (IconResourceType) {
    /**
     * An svg based icon requires an SVG resource that must be loaded,
     * this is typically a sprite svg file.
     */
    IconResourceType["SVG"] = "svg";
    /**
     * A font based ICON might require an additional CSS file to be loaded.
     */
    IconResourceType["LINK"] = "link";
    /**
     * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image
     * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)
     */
    IconResourceType["TEXT"] = "text";
})(IconResourceType || (IconResourceType = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvc3RvcmVmcm9udC8iLCJzb3VyY2VzIjpbImNtcy1jb21wb25lbnRzL21pc2MvaWNvbi9pY29uLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7O0FBRXpDLE1BQU0sQ0FBTixJQUFZLFNBMEJYO0FBMUJELFdBQVksU0FBUztJQUNuQiwwQkFBYSxDQUFBO0lBQ2IsOEJBQWlCLENBQUE7SUFDakIsMEJBQWEsQ0FBQTtJQUNiLDBCQUFhLENBQUE7SUFDYiwwQkFBYSxDQUFBO0lBQ2IsMEJBQWEsQ0FBQTtJQUNiLHNDQUF5QixDQUFBO0lBQ3pCLHNDQUF5QixDQUFBO0lBQ3pCLHdDQUEyQixDQUFBO0lBQzNCLDRCQUFlLENBQUE7SUFDZiw0QkFBZSxDQUFBO0lBQ2YsZ0NBQW1CLENBQUE7SUFDbkIsZ0NBQW1CLENBQUE7SUFDbkIsMEJBQWEsQ0FBQTtJQUNiLHdDQUEyQixDQUFBO0lBQzNCLDBCQUFhLENBQUE7SUFDYix3Q0FBMkIsQ0FBQTtJQUMzQix3Q0FBMkIsQ0FBQTtJQUMzQiw4QkFBaUIsQ0FBQTtJQUNqQixrQ0FBcUIsQ0FBQTtJQUNyQiw0QkFBZSxDQUFBO0lBQ2YsOEJBQWlCLENBQUE7SUFDakIsNEJBQWUsQ0FBQTtJQUNmLHdDQUEyQixDQUFBO0lBQzNCLDhCQUFpQixDQUFBO0FBQ25CLENBQUMsRUExQlcsU0FBUyxLQUFULFNBQVMsUUEwQnBCO0FBTUQsSUFBc0IsVUFBVSxHQUFoQyxNQUFzQixVQUFVO0NBRS9CLENBQUE7O0FBRnFCLFVBQVU7SUFKL0IsVUFBVSxDQUFDO1FBQ1YsVUFBVSxFQUFFLE1BQU07UUFDbEIsV0FBVyxFQUFFLE1BQU07S0FDcEIsQ0FBQztHQUNvQixVQUFVLENBRS9CO1NBRnFCLFVBQVU7QUFtQ2hDOzs7R0FHRztBQUNILE1BQU0sQ0FBTixJQUFZLGdCQWdCWDtBQWhCRCxXQUFZLGdCQUFnQjtJQUMxQjs7O09BR0c7SUFDSCwrQkFBVyxDQUFBO0lBRVg7O09BRUc7SUFDSCxpQ0FBYSxDQUFBO0lBQ2I7OztPQUdHO0lBQ0gsaUNBQWEsQ0FBQTtBQUNmLENBQUMsRUFoQlcsZ0JBQWdCLEtBQWhCLGdCQUFnQixRQWdCM0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XHJcblxyXG5leHBvcnQgZW51bSBJQ09OX1RZUEUge1xyXG4gIFNUQVIgPSAnU1RBUicsXHJcbiAgU0VBUkNIID0gJ1NFQVJDSCcsXHJcbiAgQ0FSVCA9ICdDQVJUJyxcclxuICBJTkZPID0gJ0lORk8nLFxyXG4gIEdSSUQgPSAnR1JJRCcsXHJcbiAgTElTVCA9ICdMSVNUJyxcclxuICBDQVJFVF9ET1dOID0gJ0NBUkVUX0RPV04nLFxyXG4gIENBUkVUX0xFRlQgPSAnQ0FSRVRfTEVGVCcsXHJcbiAgQ0FSRVRfUklHSFQgPSAnQ0FSRVRfUklHSFQnLFxyXG4gIENMT1NFID0gJ0NMT1NFJyxcclxuICBFUlJPUiA9ICdFUlJPUicsXHJcbiAgV0FSTklORyA9ICdXQVJOSU5HJyxcclxuICBTVUNDRVNTID0gJ1NVQ0NFU1MnLFxyXG4gIFZJU0EgPSAnVklTQScsXHJcbiAgTUFTVEVSX0NBUkQgPSAnTUFTVEVSX0NBUkQnLFxyXG4gIEFNRVggPSAnQU1FWCcsXHJcbiAgRElORVJTX0NMVUIgPSAnRElORVJTX0NMVUInLFxyXG4gIENSRURJVF9DQVJEID0gJ0NSRURJVF9DQVJEJyxcclxuICBFWFBBTkQgPSAnRVhQQU5EJyxcclxuICBDT0xMQVBTRSA9ICdDT0xMQVBTRScsXHJcbiAgUkVTRVQgPSAnUkVTRVQnLFxyXG4gIENJUkNMRSA9ICdDSVJDTEUnLFxyXG4gIEhFQVJUID0gJ0hFQVJUJyxcclxuICBFTVBUWV9IRUFSVCA9ICdFTVBUWV9IRUFSVCcsXHJcbiAgRklMVEVSID0gJ0ZJTFRFUicsXHJcbn1cclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCcsXHJcbiAgdXNlRXhpc3Rpbmc6IENvbmZpZyxcclxufSlcclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEljb25Db25maWcge1xyXG4gIGljb24/OiBJY29uT3B0aW9ucztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJY29uT3B0aW9ucyB7XHJcbiAgLyoqXHJcbiAgICogRWFjaCBpY29uIHR5cGUgY2FuIGJlIGNvbmZpZ3VyZWQgd2l0aCBhIHNvLWNhbGxlZCBzeW1ib2wuIFRoZSBzeW1ib2wgd2lsbFxyXG4gICAqIGJlIHVzZWQgdG8gbWFwIHRoZSBpY29uIHRvIGFuIFNWRyBgc3ltYm9sYCAoaWQpIG9yIHRvIHRoZSBzdHlsZSBjbGFzc2VzIG9mXHJcbiAgICogYSBmb250IGJhc2VkIGljb24uIFRoZSBmb2xsb3dpbmcgY29uZmlndXJhdGlvbiB3b3VsZCBtYXAgdG8gYSBmb250YXdlc29tZVxyXG4gICAqIGljb246XHJcbiAgICpcclxuICAgKiBpY29uOiB7XHJcbiAgICogICBzeW1ib2xzOiB7XHJcbiAgICogICAgIENBUlQ6ICdmYXMgZmEtc2hvcHBpbmctY2FydCdcclxuICAgKiAgIH1cclxuICAgKiB9XHJcbiAgICovXHJcbiAgc3ltYm9scz86IHtcclxuICAgIFtJQ09OX1RZUEU6IHN0cmluZ106IHN0cmluZztcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBSZXNvdXJjZXMgYXJlIHVzZWQgdG8gbWFwIGljb24gdHlwZXMgdG8gY2VydGFpbiBhc3NldCwgc3VjaCBhcyBhbiBTVkcgKHNwcml0ZSkgaW1hZ2UuXHJcbiAgICogVGhlIHJlc291cmNlIHR5cGUgKGBJY29uUmVzb3VyY2VUeXBlYCkgZGljdGF0ZXMgd2hldGhlciBhbiBTVkcgaW1hZ2UgaXMgdXNlZC4gVGhlIFVSTFxyXG4gICAqIGlzIHVzZWQgZm9yIHRoZSBTVkcgeGxpbmsgcmVmZXJlbmNlLlxyXG4gICAqL1xyXG4gIHJlc291cmNlcz86IEljb25Db25maWdSZXNvdXJjZVtdO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEljb25Db25maWdSZXNvdXJjZSB7XHJcbiAgdHlwZTogSWNvblJlc291cmNlVHlwZSB8IHN0cmluZztcclxuICB1cmw/OiBzdHJpbmc7XHJcbiAgdHlwZXM/OiAoSUNPTl9UWVBFIHwgc3RyaW5nKVtdO1xyXG59XHJcblxyXG4vKipcclxuICogRWFjaCBJQ09OIHR5cGUgY2FuIGhhdmUgYW4gY29tcGFuaWVkIHJlc291cmNlIHR5cGUsIHN1Y2ggYXMgU1ZHLCBMSU5LIChmb250KSBvciBqdXN0IFRFWFQuXHJcbiAqIFRoZSByZXNvdXJjZXMgd2lsbCBiZSBhdXRvbWl0YWNhbGx5IGxvYWRlZCBpbiBjYXNlIHRoZXkncmUgcmVxdWlyZWQgZm9yIHRoZSBgSUNPTl9UWVBFYC5cclxuICovXHJcbmV4cG9ydCBlbnVtIEljb25SZXNvdXJjZVR5cGUge1xyXG4gIC8qKlxyXG4gICAqIEFuIHN2ZyBiYXNlZCBpY29uIHJlcXVpcmVzIGFuIFNWRyByZXNvdXJjZSB0aGF0IG11c3QgYmUgbG9hZGVkLFxyXG4gICAqIHRoaXMgaXMgdHlwaWNhbGx5IGEgc3ByaXRlIHN2ZyBmaWxlLlxyXG4gICAqL1xyXG4gIFNWRyA9ICdzdmcnLFxyXG5cclxuICAvKipcclxuICAgKiBBIGZvbnQgYmFzZWQgSUNPTiBtaWdodCByZXF1aXJlIGFuIGFkZGl0aW9uYWwgQ1NTIGZpbGUgdG8gYmUgbG9hZGVkLlxyXG4gICAqL1xyXG4gIExJTksgPSAnbGluaycsXHJcbiAgLyoqXHJcbiAgICogVGV4dCBiYXNlZCBpY29ucyB3aWxsIHNpbXBseSBhZGQgdGhlIElDT04gc3RyaW5nIHRvIHRoZSBET00uIFRleHQgaWNvbnMgZG8gbm90IG5lZWQgYW4gaW1hZ2VcclxuICAgKiBvciBDU1MgcHNldWRvIGNsYXNzIChpLmUuIDpiZWZvcmUpLCBhcyB0aGUgdGV4dCBpdHNlbGYgaXMgdGhlIGljb24gKGkuZS4gKylcclxuICAgKi9cclxuICBURVhUID0gJ3RleHQnLFxyXG59XHJcbiJdfQ==